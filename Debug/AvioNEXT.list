
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f30  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0801a200  0801a200  0002a200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a824  0801a824  0002a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a82c  0801a82c  0002a82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a830  0801a830  0002a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801a834  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002f3c  240002d4  0801ab08  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003210  0801ab08  00033210  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000386a6  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000062a4  00000000  00000000  000689a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b88  00000000  00000000  0006ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002928  00000000  00000000  000717d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ed2b  00000000  00000000  00074100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039de5  00000000  00000000  000b2e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eb43  00000000  00000000  000ecc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026b753  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d0a0  00000000  00000000  0026b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a1e8 	.word	0x0801a1e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801a1e8 	.word	0x0801a1e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <setLEDs>:
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c2, writeAddress, memAddr, 2, &data, 1, 100);
	return data;
}

void setLEDs() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0
	static uint32_t LED_PWM_Data_0[(NUM_LEDS_0 * 24) + 58];
	static uint32_t LED_PWM_Data_1[(NUM_LEDS_1 * 24) + 58];
	static uint32_t LED_PWM_Data_2[(NUM_LEDS_2 * 24) + 58];
	static uint32_t LED_PWM_Data_3[(NUM_LEDS_3 * 24) + 58];

	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ab6:	e185      	b.n	8000dc4 <setLEDs+0x318>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000ab8:	4aa3      	ldr	r2, [pc, #652]	; (8000d48 <setLEDs+0x29c>)
 8000aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	f200 817b 	bhi.w	8000dbc <setLEDs+0x310>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <setLEDs+0x20>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000add 	.word	0x08000add
 8000ad0:	08000b8f 	.word	0x08000b8f
 8000ad4:	08000c41 	.word	0x08000c41
 8000ad8:	08000cf3 	.word	0x08000cf3
		case 0:
			for (int j = 0; j < 3; j++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
 8000ae0:	e043      	b.n	8000b6a <setLEDs+0xbe>
				for (int n = 0; n < 8; n++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae6:	e03a      	b.n	8000b5e <setLEDs+0xb2>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000ae8:	4998      	ldr	r1, [pc, #608]	; (8000d4c <setLEDs+0x2a0>)
 8000aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	18ca      	adds	r2, r1, r3
 8000af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	fa42 f303 	asr.w	r3, r2, r3
 8000b04:	400b      	ands	r3, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <setLEDs+0x86>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0c:	00da      	lsls	r2, r3, #3
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	18d1      	adds	r1, r2, r3
 8000b12:	4a8d      	ldr	r2, [pc, #564]	; (8000d48 <setLEDs+0x29c>)
 8000b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4413      	add	r3, r2
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
								+ 8] = 60;
 8000b26:	3308      	adds	r3, #8
 8000b28:	4a89      	ldr	r2, [pc, #548]	; (8000d50 <setLEDs+0x2a4>)
 8000b2a:	213c      	movs	r1, #60	; 0x3c
 8000b2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b30:	e012      	b.n	8000b58 <setLEDs+0xac>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	00da      	lsls	r2, r3, #3
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	18d1      	adds	r1, r2, r3
 8000b3a:	4a83      	ldr	r2, [pc, #524]	; (8000d48 <setLEDs+0x29c>)
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4413      	add	r3, r2
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	440b      	add	r3, r1
								+ 8] = 30;
 8000b4e:	3308      	adds	r3, #8
 8000b50:	4a7f      	ldr	r2, [pc, #508]	; (8000d50 <setLEDs+0x2a4>)
 8000b52:	211e      	movs	r1, #30
 8000b54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	ddc1      	ble.n	8000ae8 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	3301      	adds	r3, #1
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	ddb8      	ble.n	8000ae2 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b74:	e007      	b.n	8000b86 <setLEDs+0xda>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000b76:	4a76      	ldr	r2, [pc, #472]	; (8000d50 <setLEDs+0x2a4>)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b82:	3301      	adds	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b88:	2bb1      	cmp	r3, #177	; 0xb1
 8000b8a:	ddf4      	ble.n	8000b76 <setLEDs+0xca>
			}
			break;
 8000b8c:	e117      	b.n	8000dbe <setLEDs+0x312>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
 8000b92:	e043      	b.n	8000c1c <setLEDs+0x170>
				for (int n = 0; n < 8; n++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
 8000b98:	e03a      	b.n	8000c10 <setLEDs+0x164>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b9a:	496c      	ldr	r1, [pc, #432]	; (8000d4c <setLEDs+0x2a0>)
 8000b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	18ca      	adds	r2, r1, r3
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	2280      	movs	r2, #128	; 0x80
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	fa42 f303 	asr.w	r3, r2, r3
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d013      	beq.n	8000be4 <setLEDs+0x138>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	00da      	lsls	r2, r3, #3
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	18d1      	adds	r1, r2, r3
 8000bc4:	4a60      	ldr	r2, [pc, #384]	; (8000d48 <setLEDs+0x29c>)
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
								+ 8] = 60;
 8000bd8:	3308      	adds	r3, #8
 8000bda:	4a5e      	ldr	r2, [pc, #376]	; (8000d54 <setLEDs+0x2a8>)
 8000bdc:	213c      	movs	r1, #60	; 0x3c
 8000bde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000be2:	e012      	b.n	8000c0a <setLEDs+0x15e>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	00da      	lsls	r2, r3, #3
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	18d1      	adds	r1, r2, r3
 8000bec:	4a56      	ldr	r2, [pc, #344]	; (8000d48 <setLEDs+0x29c>)
 8000bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	440b      	add	r3, r1
								+ 8] = 30;
 8000c00:	3308      	adds	r3, #8
 8000c02:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <setLEDs+0x2a8>)
 8000c04:	211e      	movs	r1, #30
 8000c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c0a:	6a3b      	ldr	r3, [r7, #32]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	ddc1      	ble.n	8000b9a <setLEDs+0xee>
			for (int j = 0; j < 3; j++) {
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	3301      	adds	r3, #1
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	ddb8      	ble.n	8000b94 <setLEDs+0xe8>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e007      	b.n	8000c38 <setLEDs+0x18c>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000c28:	4a4a      	ldr	r2, [pc, #296]	; (8000d54 <setLEDs+0x2a8>)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3301      	adds	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	2bb1      	cmp	r3, #177	; 0xb1
 8000c3c:	ddf4      	ble.n	8000c28 <setLEDs+0x17c>
			}
			break;
 8000c3e:	e0be      	b.n	8000dbe <setLEDs+0x312>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	e043      	b.n	8000cce <setLEDs+0x222>
				for (int n = 0; n < 8; n++) {
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e03a      	b.n	8000cc2 <setLEDs+0x216>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c4c:	493f      	ldr	r1, [pc, #252]	; (8000d4c <setLEDs+0x2a0>)
 8000c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	18ca      	adds	r2, r1, r3
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa42 f303 	asr.w	r3, r2, r3
 8000c68:	400b      	ands	r3, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d013      	beq.n	8000c96 <setLEDs+0x1ea>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	18d1      	adds	r1, r2, r3
 8000c76:	4a34      	ldr	r2, [pc, #208]	; (8000d48 <setLEDs+0x29c>)
 8000c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	440b      	add	r3, r1
								+ 8] = 60;
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <setLEDs+0x2ac>)
 8000c8e:	213c      	movs	r1, #60	; 0x3c
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c94:	e012      	b.n	8000cbc <setLEDs+0x210>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	00da      	lsls	r2, r3, #3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	18d1      	adds	r1, r2, r3
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <setLEDs+0x29c>)
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	440b      	add	r3, r1
								+ 8] = 30;
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	4a28      	ldr	r2, [pc, #160]	; (8000d58 <setLEDs+0x2ac>)
 8000cb6:	211e      	movs	r1, #30
 8000cb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	ddc1      	ble.n	8000c4c <setLEDs+0x1a0>
			for (int j = 0; j < 3; j++) {
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	ddb8      	ble.n	8000c46 <setLEDs+0x19a>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000cd4:	2338      	movs	r3, #56	; 0x38
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	e007      	b.n	8000cea <setLEDs+0x23e>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000cda:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <setLEDs+0x2ac>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2b69      	cmp	r3, #105	; 0x69
 8000cee:	ddf4      	ble.n	8000cda <setLEDs+0x22e>
			}
			break;
 8000cf0:	e065      	b.n	8000dbe <setLEDs+0x312>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e04f      	b.n	8000d98 <setLEDs+0x2ec>
				for (int n = 0; n < 8; n++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	e046      	b.n	8000d8c <setLEDs+0x2e0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cfe:	4913      	ldr	r1, [pc, #76]	; (8000d4c <setLEDs+0x2a0>)
 8000d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	18ca      	adds	r2, r1, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	fa42 f303 	asr.w	r3, r2, r3
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d01f      	beq.n	8000d60 <setLEDs+0x2b4>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	00da      	lsls	r2, r3, #3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	18d1      	adds	r1, r2, r3
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <setLEDs+0x29c>)
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4413      	add	r3, r2
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <setLEDs+0x2b0>)
 8000d40:	213c      	movs	r1, #60	; 0x3c
 8000d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d46:	e01e      	b.n	8000d86 <setLEDs+0x2da>
 8000d48:	0801a2bc 	.word	0x0801a2bc
 8000d4c:	240015a4 	.word	0x240015a4
 8000d50:	240002f0 	.word	0x240002f0
 8000d54:	240005b8 	.word	0x240005b8
 8000d58:	24000880 	.word	0x24000880
 8000d5c:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	00da      	lsls	r2, r3, #3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	18d1      	adds	r1, r2, r3
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <setLEDs+0x358>)
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4413      	add	r3, r2
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
								+ 8] = 30;
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <setLEDs+0x35c>)
 8000d80:	211e      	movs	r1, #30
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	ddb5      	ble.n	8000cfe <setLEDs+0x252>
			for (int j = 0; j < 3; j++) {
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	ddac      	ble.n	8000cf8 <setLEDs+0x24c>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000d9e:	2338      	movs	r3, #56	; 0x38
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e007      	b.n	8000db4 <setLEDs+0x308>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <setLEDs+0x35c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2100      	movs	r1, #0
 8000daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3301      	adds	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b69      	cmp	r3, #105	; 0x69
 8000db8:	ddf4      	ble.n	8000da4 <setLEDs+0x2f8>
			}
			break;
 8000dba:	e000      	b.n	8000dbe <setLEDs+0x312>
		default:
			break;
 8000dbc:	bf00      	nop
			i++) {
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc6:	2b0d      	cmp	r3, #13
 8000dc8:	f77f ae76 	ble.w	8000ab8 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000dcc:	23b2      	movs	r3, #178	; 0xb2
 8000dce:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <setLEDs+0x360>)
 8000dd0:	210c      	movs	r1, #12
 8000dd2:	480f      	ldr	r0, [pc, #60]	; (8000e10 <setLEDs+0x364>)
 8000dd4:	f00d fa80 	bl	800e2d8 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000dd8:	23b2      	movs	r3, #178	; 0xb2
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <setLEDs+0x368>)
 8000ddc:	2108      	movs	r1, #8
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <setLEDs+0x36c>)
 8000de0:	f00d fa7a 	bl	800e2d8 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000de4:	236a      	movs	r3, #106	; 0x6a
 8000de6:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <setLEDs+0x370>)
 8000de8:	2104      	movs	r1, #4
 8000dea:	480d      	ldr	r0, [pc, #52]	; (8000e20 <setLEDs+0x374>)
 8000dec:	f00d fa74 	bl	800e2d8 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000df0:	236a      	movs	r3, #106	; 0x6a
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <setLEDs+0x35c>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480a      	ldr	r0, [pc, #40]	; (8000e20 <setLEDs+0x374>)
 8000df8:	f00d fa6e 	bl	800e2d8 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000dfc:	bf00      	nop
 8000dfe:	3738      	adds	r7, #56	; 0x38
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	0801a2bc 	.word	0x0801a2bc
 8000e08:	24000a28 	.word	0x24000a28
 8000e0c:	240002f0 	.word	0x240002f0
 8000e10:	2400118c 	.word	0x2400118c
 8000e14:	240005b8 	.word	0x240005b8
 8000e18:	240010a8 	.word	0x240010a8
 8000e1c:	24000880 	.word	0x24000880
 8000e20:	240010f4 	.word	0x240010f4

08000e24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8000e2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000e2c:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <main+0x138>)
 8000e2e:	f507 7429 	add.w	r4, r7, #676	; 0x2a4
 8000e32:	461d      	mov	r5, r3
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3c:	c403      	stmia	r4!, {r0, r1}
 8000e3e:	7022      	strb	r2, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e40:	f002 f89e 	bl	8002f80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e44:	f000 f88e 	bl	8000f64 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000e48:	f000 f910 	bl	800106c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e4c:	f000 fe98 	bl	8001b80 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e50:	f000 fe36 	bl	8001ac0 <MX_DMA_Init>
	MX_SPI3_Init();
 8000e54:	f000 fb90 	bl	8001578 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8000e58:	f000 fa20 	bl	800129c <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8000e5c:	f000 fde4 	bl	8001a28 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8000e60:	f000 f936 	bl	80010d0 <MX_ADC1_Init>
	MX_TIM4_Init();
 8000e64:	f000 fc9a 	bl	800179c <MX_TIM4_Init>
	MX_ADC3_Init();
 8000e68:	f000 f9aa 	bl	80011c0 <MX_ADC3_Init>
	MX_SPI2_Init();
 8000e6c:	f000 fb2e 	bl	80014cc <MX_SPI2_Init>
	MX_I2C2_Init();
 8000e70:	f000 fa78 	bl	8001364 <MX_I2C2_Init>
	MX_TIM2_Init();
 8000e74:	f000 fbd6 	bl	8001624 <MX_TIM2_Init>
	MX_TIM5_Init();
 8000e78:	f000 fd0c 	bl	8001894 <MX_TIM5_Init>
	MX_TIM3_Init();
 8000e7c:	f000 fc2a 	bl	80016d4 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8000e80:	f014 f92c 	bl	80150dc <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 8000e84:	f000 facc 	bl	8001420 <MX_SPI1_Init>
	MX_UART4_Init();
 8000e88:	f000 fd82 	bl	8001990 <MX_UART4_Init>
	MX_FATFS_Init();
 8000e8c:	f011 fefa 	bl	8012c84 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 8000e90:	f000 faa8 	bl	80013e4 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 8000e94:	f000 fd58 	bl	8001948 <MX_TIM13_Init>

	//if (MAX_M10s_init(&hi2c2))
	//	Error_Handler();

	while(1){
		for(int i = 0; i < 14; i++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8000e9e:	e021      	b.n	8000ee4 <main+0xc0>
			LED_Color_Data[i][0] = 255;
 8000ea0:	492f      	ldr	r1, [pc, #188]	; (8000f60 <main+0x13c>)
 8000ea2:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	701a      	strb	r2, [r3, #0]
			LED_Color_Data[i][1] = 255;
 8000eb2:	492b      	ldr	r1, [pc, #172]	; (8000f60 <main+0x13c>)
 8000eb4:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	701a      	strb	r2, [r3, #0]
			LED_Color_Data[i][2] = 255;
 8000ec6:	4926      	ldr	r1, [pc, #152]	; (8000f60 <main+0x13c>)
 8000ec8:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	22ff      	movs	r2, #255	; 0xff
 8000ed8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000eda:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8000ee4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8000ee8:	2b0d      	cmp	r3, #13
 8000eea:	ddd9      	ble.n	8000ea0 <main+0x7c>
		}
		setLEDs();
 8000eec:	f7ff fdde 	bl	8000aac <setLEDs>
		HAL_Delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f002 f8d6 	bl	80030a4 <HAL_Delay>
		for(int i = 0; i < 14; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8000efe:	e021      	b.n	8000f44 <main+0x120>
			LED_Color_Data[i][0] = 0;
 8000f00:	4917      	ldr	r1, [pc, #92]	; (8000f60 <main+0x13c>)
 8000f02:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			LED_Color_Data[i][1] = 0;
 8000f12:	4913      	ldr	r1, [pc, #76]	; (8000f60 <main+0x13c>)
 8000f14:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3301      	adds	r3, #1
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
			LED_Color_Data[i][2] = 0;
 8000f26:	490e      	ldr	r1, [pc, #56]	; (8000f60 <main+0x13c>)
 8000f28:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	3302      	adds	r3, #2
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000f3a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8000f3e:	3301      	adds	r3, #1
 8000f40:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8000f44:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8000f48:	2b0d      	cmp	r3, #13
 8000f4a:	ddd9      	ble.n	8000f00 <main+0xdc>
		}
		setLEDs();
 8000f4c:	f7ff fdae 	bl	8000aac <setLEDs>
		HAL_Delay(1000);
 8000f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f54:	f002 f8a6 	bl	80030a4 <HAL_Delay>
		for(int i = 0; i < 14; i++){
 8000f58:	e79e      	b.n	8000e98 <main+0x74>
 8000f5a:	bf00      	nop
 8000f5c:	0801a214 	.word	0x0801a214
 8000f60:	240015a4 	.word	0x240015a4

08000f64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09c      	sub	sp, #112	; 0x70
 8000f68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	224c      	movs	r2, #76	; 0x4c
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f014 fdd8 	bl	8015b28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f014 fdd2 	bl	8015b28 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f84:	2002      	movs	r0, #2
 8000f86:	f007 ff55 	bl	8008e34 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <SystemClock_Config+0x104>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f96:	4a34      	ldr	r2, [pc, #208]	; (8001068 <SystemClock_Config+0x104>)
 8000f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9c:	6193      	str	r3, [r2, #24]
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <SystemClock_Config+0x104>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000faa:	bf00      	nop
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <SystemClock_Config+0x104>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb8:	d1f8      	bne.n	8000fac <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000fba:	2322      	movs	r3, #34	; 0x22
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 12;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fea:	230c      	movs	r3, #12
 8000fec:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 ff64 	bl	8008ec8 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xa6>
		Error_Handler();
 8001006:	f000 ff1f 	bl	8001e48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800100a:	233f      	movs	r3, #63	; 0x3f
 800100c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100e:	2303      	movs	r3, #3
 8001010:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001016:	2308      	movs	r3, #8
 8001018:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800101a:	2340      	movs	r3, #64	; 0x40
 800101c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800101e:	2340      	movs	r3, #64	; 0x40
 8001020:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001022:	2340      	movs	r3, #64	; 0x40
 8001024:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2101      	movs	r1, #1
 8001034:	4618      	mov	r0, r3
 8001036:	f008 fb21 	bl	800967c <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <SystemClock_Config+0xf0>
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f008 fb19 	bl	800967c <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xf0>
				!= HAL_OK) {
			Error_Handler();
 8001050:	f000 fefa 	bl	8001e48 <Error_Handler>
		}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001054:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f008 fcc4 	bl	80099e8 <HAL_RCC_MCOConfig>
}
 8001060:	bf00      	nop
 8001062:	3770      	adds	r7, #112	; 0x70
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024800 	.word	0x58024800

0800106c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ae      	sub	sp, #184	; 0xb8
 8001070:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001072:	463b      	mov	r3, r7
 8001074:	22b8      	movs	r2, #184	; 0xb8
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f014 fd55 	bl	8015b28 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800107e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800108a:	2304      	movs	r3, #4
 800108c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800108e:	230c      	movs	r3, #12
 8001090:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800109e:	23c0      	movs	r3, #192	; 0xc0
 80010a0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80010b6:	463b      	mov	r3, r7
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 fed5 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 80010c4:	f000 fec0 	bl	8001e48 <Error_Handler>
	}
}
 80010c8:	bf00      	nop
 80010ca:	37b8      	adds	r7, #184	; 0xb8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010e2:	463b      	mov	r3, r7
 80010e4:	2224      	movs	r2, #36	; 0x24
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f014 fd1d 	bl	8015b28 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80010ee:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <MX_ADC1_Init+0xe4>)
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <MX_ADC1_Init+0xe8>)
 80010f2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_ADC1_Init+0xe4>)
 80010f6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80010fa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <MX_ADC1_Init+0xe4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800110a:	2204      	movs	r2, #4
 800110c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001110:	2200      	movs	r2, #0
 8001112:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800111c:	2201      	movs	r2, #1
 800111e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800113c:	2200      	movs	r2, #0
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800114e:	4819      	ldr	r0, [pc, #100]	; (80011b4 <MX_ADC1_Init+0xe4>)
 8001150:	f002 fa28 	bl	80035a4 <HAL_ADC_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x8e>
		Error_Handler();
 800115a:	f000 fe75 	bl	8001e48 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800116a:	f003 fa63 	bl	8004634 <HAL_ADCEx_MultiModeConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8001174:	f000 fe68 	bl	8001e48 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_ADC1_Init+0xec>)
 800117a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800117c:	2306      	movs	r3, #6
 800117e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001180:	2303      	movs	r3, #3
 8001182:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001184:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001188:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800118a:	2304      	movs	r3, #4
 800118c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_ADC1_Init+0xe4>)
 800119e:	f002 fc09 	bl	80039b4 <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0xdc>
		Error_Handler();
 80011a8:	f000 fe4e 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3730      	adds	r7, #48	; 0x30
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24000bd0 	.word	0x24000bd0
 80011b8:	40022000 	.word	0x40022000
 80011bc:	2a000400 	.word	0x2a000400

080011c0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2224      	movs	r2, #36	; 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f014 fcab 	bl	8015b28 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011d4:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <MX_ADC3_Init+0xd4>)
 80011d6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011da:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80011de:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011e0:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011e2:	2208      	movs	r2, #8
 80011e4:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011f4:	2204      	movs	r2, #4
 80011f6:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_ADC3_Init+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001200:	2200      	movs	r2, #0
 8001202:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001206:	2201      	movs	r2, #1
 8001208:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_ADC3_Init+0xd0>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001214:	2200      	movs	r2, #0
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_ADC3_Init+0xd0>)
 800121a:	2200      	movs	r2, #0
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001228:	2200      	movs	r2, #0
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC3_Init+0xd0>)
 800122e:	2200      	movs	r2, #0
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001234:	2200      	movs	r2, #0
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_ADC3_Init+0xd0>)
 800123a:	2200      	movs	r2, #0
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_ADC3_Init+0xd0>)
 8001248:	f002 f9ac 	bl	80035a4 <HAL_ADC_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC3_Init+0x96>
		Error_Handler();
 8001252:	f000 fdf9 	bl	8001e48 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_ADC3_Init+0xd8>)
 8001258:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800125a:	2306      	movs	r3, #6
 800125c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001262:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001266:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001268:	2304      	movs	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_ADC3_Init+0xd0>)
 800127a:	f002 fb9b 	bl	80039b4 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8001284:	f000 fde0 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000c40 	.word	0x24000c40
 8001294:	58026000 	.word	0x58026000
 8001298:	04300002 	.word	0x04300002

0800129c <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_FDCAN3_Init+0xc4>)
 80012a4:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 80012c4:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012d8:	2202      	movs	r2, #2
 80012da:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_FDCAN3_Init+0xc0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001302:	2200      	movs	r2, #0
 8001304:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001308:	2200      	movs	r2, #0
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_FDCAN3_Init+0xc0>)
 800130e:	2204      	movs	r2, #4
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_FDCAN3_Init+0xc0>)
 800131a:	2204      	movs	r2, #4
 800131c:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001320:	2200      	movs	r2, #0
 8001322:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001326:	2204      	movs	r2, #4
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_FDCAN3_Init+0xc0>)
 800132c:	2200      	movs	r2, #0
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001332:	2200      	movs	r2, #0
 8001334:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001338:	2200      	movs	r2, #0
 800133a:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_FDCAN3_Init+0xc0>)
 800133e:	2200      	movs	r2, #0
 8001340:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_FDCAN3_Init+0xc0>)
 8001344:	2204      	movs	r2, #4
 8001346:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_FDCAN3_Init+0xc0>)
 800134a:	f005 fc3b 	bl	8006bc4 <HAL_FDCAN_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8001354:	f000 fd78 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	24000da0 	.word	0x24000da0
 8001360:	4000d400 	.word	0x4000d400

08001364 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C2_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_I2C2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <MX_I2C2_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_I2C2_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013a0:	f006 f94e 	bl	8007640 <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x4a>
		Error_Handler();
 80013aa:	f000 fd4d 	bl	8001e48 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013b2:	f006 f9ef 	bl	8007794 <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80013bc:	f000 fd44 	bl	8001e48 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013c4:	f006 fa31 	bl	800782a <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C2_Init+0x6e>
		Error_Handler();
 80013ce:	f000 fd3b 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000e40 	.word	0x24000e40
 80013dc:	40005800 	.word	0x40005800
 80013e0:	20303e5d 	.word	0x20303e5d

080013e4 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 80013ea:	4a0c      	ldr	r2, [pc, #48]	; (800141c <MX_SDMMC2_SD_Init+0x38>)
 80013ec:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 80013fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001400:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 0;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <MX_SDMMC2_SD_Init+0x34>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	24000e94 	.word	0x24000e94
 800141c:	48022400 	.word	0x48022400

08001420 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <MX_SPI1_Init+0xa8>)
 8001428:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800142c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001430:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800143a:	2207      	movs	r2, #7
 800143c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800144c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001450:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001454:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001458:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001482:	2200      	movs	r2, #0
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI1_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness =
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <MX_SPI1_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_SPI1_Init+0xa4>)
 80014b2:	f00c fd23 	bl	800defc <HAL_SPI_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_SPI1_Init+0xa0>
		Error_Handler();
 80014bc:	f000 fcc4 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24000f10 	.word	0x24000f10
 80014c8:	40013000 	.word	0x40013000

080014cc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_SPI2_Init+0xa8>)
 80014d4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014dc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014e6:	2207      	movs	r2, #7
 80014e8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_SPI2_Init+0xa4>)
 80014f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014fc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001500:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001504:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_SPI2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_SPI2_Init+0xa4>)
 800151a:	2200      	movs	r2, #0
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_SPI2_Init+0xa4>)
 800152e:	2200      	movs	r2, #0
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001538:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_SPI2_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness =
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI2_Init+0xa4>)
 800154c:	2200      	movs	r2, #0
 800154e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001552:	2200      	movs	r2, #0
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI2_Init+0xa4>)
 8001558:	2200      	movs	r2, #0
 800155a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_SPI2_Init+0xa4>)
 800155e:	f00c fccd 	bl	800defc <HAL_SPI_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_SPI2_Init+0xa0>
		Error_Handler();
 8001568:	f000 fc6e 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	24000f98 	.word	0x24000f98
 8001574:	40003800 	.word	0x40003800

08001578 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_SPI3_Init+0xa4>)
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <MX_SPI3_Init+0xa8>)
 8001580:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_SPI3_Init+0xa4>)
 8001584:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001588:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_SPI3_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_SPI3_Init+0xa4>)
 8001592:	2207      	movs	r2, #7
 8001594:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_SPI3_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <MX_SPI3_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_SPI3_Init+0xa4>)
 80015a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015a8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_SPI3_Init+0xa4>)
 80015ac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80015b0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_SPI3_Init+0xa4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_SPI3_Init+0xa4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_SPI3_Init+0xa4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_SPI3_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_SPI3_Init+0xa4>)
 80015cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_SPI3_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_SPI3_Init+0xa4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_SPI3_Init+0xa4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <MX_SPI3_Init+0xa4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_SPI3_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness =
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_SPI3_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_SPI3_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_SPI3_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_SPI3_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_SPI3_Init+0xa4>)
 800160a:	f00c fc77 	bl	800defc <HAL_SPI_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8001614:	f000 fc18 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24001020 	.word	0x24001020
 8001620:	40003c00 	.word	0x40003c00

08001624 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_TIM2_Init+0xac>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_TIM2_Init+0xac>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_TIM2_Init+0xac>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_TIM2_Init+0xac>)
 800165e:	225a      	movs	r2, #90	; 0x5a
 8001660:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_TIM2_Init+0xac>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_TIM2_Init+0xac>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800166e:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_TIM2_Init+0xac>)
 8001670:	f00c fdda 	bl	800e228 <HAL_TIM_PWM_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800167a:	f000 fbe5 	bl	8001e48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <MX_TIM2_Init+0xac>)
 800168e:	f00d ff45 	bl	800f51c <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001698:	f000 fbd6 	bl	8001e48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169c:	2360      	movs	r3, #96	; 0x60
 800169e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80016ac:	463b      	mov	r3, r7
 80016ae:	2208      	movs	r2, #8
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM2_Init+0xac>)
 80016b4:	f00d f964 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80016be:	f000 fbc3 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM2_Init+0xac>)
 80016c4:	f001 f8de 	bl	8002884 <HAL_TIM_MspPostInit>

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	240010a8 	.word	0x240010a8

080016d4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	615a      	str	r2, [r3, #20]
 80016f6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <MX_TIM3_Init+0xc0>)
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <MX_TIM3_Init+0xc4>)
 80016fc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_TIM3_Init+0xc0>)
 800170c:	225a      	movs	r2, #90	; 0x5a
 800170e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <MX_TIM3_Init+0xc0>)
 800171e:	f00c fd83 	bl	800e228 <HAL_TIM_PWM_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x58>
		Error_Handler();
 8001728:	f000 fb8e 	bl	8001e48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4816      	ldr	r0, [pc, #88]	; (8001794 <MX_TIM3_Init+0xc0>)
 800173c:	f00d feee 	bl	800f51c <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001746:	f000 fb7f 	bl	8001e48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174a:	2360      	movs	r3, #96	; 0x60
 800174c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001762:	f00d f90d 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800176c:	f000 fb6c 	bl	8001e48 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001770:	463b      	mov	r3, r7
 8001772:	2204      	movs	r2, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001778:	f00d f902 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001782:	f000 fb61 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_TIM3_Init+0xc0>)
 8001788:	f001 f87c 	bl	8002884 <HAL_TIM_MspPostInit>

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	240010f4 	.word	0x240010f4
 8001798:	40000400 	.word	0x40000400

0800179c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	615a      	str	r2, [r3, #20]
 80017be:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <MX_TIM4_Init+0xf0>)
 80017c2:	4a33      	ldr	r2, [pc, #204]	; (8001890 <MX_TIM4_Init+0xf4>)
 80017c4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 28;
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <MX_TIM4_Init+0xf0>)
 80017c8:	221c      	movs	r2, #28
 80017ca:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <MX_TIM4_Init+0xf0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	; (800188c <MX_TIM4_Init+0xf0>)
 80017d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80017d8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <MX_TIM4_Init+0xf0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_TIM4_Init+0xf0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80017e6:	4829      	ldr	r0, [pc, #164]	; (800188c <MX_TIM4_Init+0xf0>)
 80017e8:	f00c fd1e 	bl	800e228 <HAL_TIM_PWM_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM4_Init+0x5a>
		Error_Handler();
 80017f2:	f000 fb29 	bl	8001e48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_TIM4_Init+0xf0>)
 8001806:	f00d fe89 	bl	800f51c <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001810:	f000 fb1a 	bl	8001e48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001814:	2360      	movs	r3, #96	; 0x60
 8001816:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM4_Init+0xf0>)
 800182c:	f00d f8a8 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001836:	f000 fb07 	bl	8001e48 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800183a:	463b      	mov	r3, r7
 800183c:	2204      	movs	r2, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <MX_TIM4_Init+0xf0>)
 8001842:	f00d f89d 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800184c:	f000 fafc 	bl	8001e48 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8001850:	463b      	mov	r3, r7
 8001852:	2208      	movs	r2, #8
 8001854:	4619      	mov	r1, r3
 8001856:	480d      	ldr	r0, [pc, #52]	; (800188c <MX_TIM4_Init+0xf0>)
 8001858:	f00d f892 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001862:	f000 faf1 	bl	8001e48 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8001866:	463b      	mov	r3, r7
 8001868:	220c      	movs	r2, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM4_Init+0xf0>)
 800186e:	f00d f887 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8001878:	f000 fae6 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM4_Init+0xf0>)
 800187e:	f001 f801 	bl	8002884 <HAL_TIM_MspPostInit>

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24001140 	.word	0x24001140
 8001890:	40000800 	.word	0x40000800

08001894 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_TIM5_Init+0xac>)
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <MX_TIM5_Init+0xb0>)
 80018bc:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_TIM5_Init+0xac>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_TIM5_Init+0xac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_TIM5_Init+0xac>)
 80018cc:	225a      	movs	r2, #90	; 0x5a
 80018ce:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <MX_TIM5_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM5_Init+0xac>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_TIM5_Init+0xac>)
 80018de:	f00c fca3 	bl	800e228 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM5_Init+0x58>
		Error_Handler();
 80018e8:	f000 faae 	bl	8001e48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_TIM5_Init+0xac>)
 80018fc:	f00d fe0e 	bl	800f51c <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001906:	f000 fa9f 	bl	8001e48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190a:	2360      	movs	r3, #96	; 0x60
 800190c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 800191a:	463b      	mov	r3, r7
 800191c:	220c      	movs	r2, #12
 800191e:	4619      	mov	r1, r3
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM5_Init+0xac>)
 8001922:	f00d f82d 	bl	800e980 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800192c:	f000 fa8c 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM5_Init+0xac>)
 8001932:	f000 ffa7 	bl	8002884 <HAL_TIM_MspPostInit>

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2400118c 	.word	0x2400118c
 8001944:	40000c00 	.word	0x40000c00

08001948 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM13_Init+0x40>)
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_TIM13_Init+0x44>)
 8001950:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 95;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_TIM13_Init+0x40>)
 8001954:	225f      	movs	r2, #95	; 0x5f
 8001956:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_TIM13_Init+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_TIM13_Init+0x40>)
 8001960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001964:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_TIM13_Init+0x40>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_TIM13_Init+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM13_Init+0x40>)
 8001974:	f00c fc01 	bl	800e17a <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800197e:	f000 fa63 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240011d8 	.word	0x240011d8
 800198c:	40001c00 	.word	0x40001c00

08001990 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_UART4_Init+0x90>)
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <MX_UART4_Init+0x94>)
 8001998:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_UART4_Init+0x90>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_UART4_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_UART4_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_UART4_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_UART4_Init+0x90>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_UART4_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_UART4_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_UART4_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_UART4_Init+0x90>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_UART4_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80019d8:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_UART4_Init+0x90>)
 80019da:	f00d fe59 	bl	800f690 <HAL_UART_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_UART4_Init+0x58>
		Error_Handler();
 80019e4:	f000 fa30 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80019e8:	2100      	movs	r1, #0
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <MX_UART4_Init+0x90>)
 80019ec:	f00e ff5f 	bl	80108ae <HAL_UARTEx_SetTxFifoThreshold>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80019f6:	f000 fa27 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4808      	ldr	r0, [pc, #32]	; (8001a20 <MX_UART4_Init+0x90>)
 80019fe:	f00e ff94 	bl	801092a <HAL_UARTEx_SetRxFifoThreshold>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001a08:	f000 fa1e 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_UART4_Init+0x90>)
 8001a0e:	f00e ff15 	bl	801083c <HAL_UARTEx_DisableFifoMode>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_UART4_Init+0x8c>
		Error_Handler();
 8001a18:	f000 fa16 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2400147c 	.word	0x2400147c
 8001a24:	40004c00 	.word	0x40004c00

08001a28 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <MX_USART6_UART_Init+0x94>)
 8001a30:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001a70:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a72:	f00d fe0d 	bl	800f690 <HAL_UART_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 8001a7c:	f000 f9e4 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8001a80:	2100      	movs	r1, #0
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a84:	f00e ff13 	bl	80108ae <HAL_UARTEx_SetTxFifoThreshold>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001a8e:	f000 f9db 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001a96:	f00e ff48 	bl	801092a <HAL_UARTEx_SetRxFifoThreshold>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001aa0:	f000 f9d2 	bl	8001e48 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_USART6_UART_Init+0x90>)
 8001aa6:	f00e fec9 	bl	801083c <HAL_UARTEx_DisableFifoMode>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8001ab0:	f000 f9ca 	bl	8001e48 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	24001510 	.word	0x24001510
 8001abc:	40011400 	.word	0x40011400

08001ac0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001acc:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ad6:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aea:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <MX_DMA_Init+0xbc>)
 8001af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	200b      	movs	r0, #11
 8001b08:	f002 ff51 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b0c:	200b      	movs	r0, #11
 8001b0e:	f002 ff68 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	200c      	movs	r0, #12
 8001b18:	f002 ff49 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b1c:	200c      	movs	r0, #12
 8001b1e:	f002 ff60 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	200d      	movs	r0, #13
 8001b28:	f002 ff41 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b2c:	200d      	movs	r0, #13
 8001b2e:	f002 ff58 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	200e      	movs	r0, #14
 8001b38:	f002 ff39 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b3c:	200e      	movs	r0, #14
 8001b3e:	f002 ff50 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200f      	movs	r0, #15
 8001b48:	f002 ff31 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	f002 ff48 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2010      	movs	r0, #16
 8001b58:	f002 ff29 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f002 ff40 	bl	80049e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2046      	movs	r0, #70	; 0x46
 8001b68:	f002 ff21 	bl	80049ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001b6c:	2046      	movs	r0, #70	; 0x46
 8001b6e:	f002 ff38 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	58024400 	.word	0x58024400

08001b80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b96:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	4aa2      	ldr	r2, [pc, #648]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba6:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	61bb      	str	r3, [r7, #24]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	4a9b      	ldr	r2, [pc, #620]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	4a93      	ldr	r2, [pc, #588]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	4a8c      	ldr	r2, [pc, #560]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c00:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a84      	ldr	r2, [pc, #528]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2c:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a7d      	ldr	r2, [pc, #500]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4a:	4b77      	ldr	r3, [pc, #476]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a75      	ldr	r2, [pc, #468]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <MX_GPIO_Init+0x2a8>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f241 5104 	movw	r1, #5380	; 0x1504
 8001c6e:	486f      	ldr	r0, [pc, #444]	; (8001e2c <MX_GPIO_Init+0x2ac>)
 8001c70:	f005 fccc 	bl	800760c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | ARM2_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f248 0106 	movw	r1, #32774	; 0x8006
 8001c7a:	486d      	ldr	r0, [pc, #436]	; (8001e30 <MX_GPIO_Init+0x2b0>)
 8001c7c:	f005 fcc6 	bl	800760c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2130      	movs	r1, #48	; 0x30
 8001c84:	486b      	ldr	r0, [pc, #428]	; (8001e34 <MX_GPIO_Init+0x2b4>)
 8001c86:	f005 fcc1 	bl	800760c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	486a      	ldr	r0, [pc, #424]	; (8001e38 <MX_GPIO_Init+0x2b8>)
 8001c90:	f005 fcbc 	bl	800760c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001c9a:	4868      	ldr	r0, [pc, #416]	; (8001e3c <MX_GPIO_Init+0x2bc>)
 8001c9c:	f005 fcb6 	bl	800760c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	210e      	movs	r1, #14
 8001ca4:	4866      	ldr	r0, [pc, #408]	; (8001e40 <MX_GPIO_Init+0x2c0>)
 8001ca6:	f005 fcb1 	bl	800760c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8001caa:	2200      	movs	r2, #0
 8001cac:	f240 3101 	movw	r1, #769	; 0x301
 8001cb0:	4864      	ldr	r0, [pc, #400]	; (8001e44 <MX_GPIO_Init+0x2c4>)
 8001cb2:	f005 fcab 	bl	800760c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8001cb6:	f241 5304 	movw	r3, #5380	; 0x1504
 8001cba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4857      	ldr	r0, [pc, #348]	; (8001e2c <MX_GPIO_Init+0x2ac>)
 8001cd0:	f005 fadc 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | ARM2_Pin | GPIO_PIN_15;
 8001cd4:	f248 0306 	movw	r3, #32774	; 0x8006
 8001cd8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4850      	ldr	r0, [pc, #320]	; (8001e30 <MX_GPIO_Init+0x2b0>)
 8001cee:	f005 facd 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8001cf2:	2330      	movs	r3, #48	; 0x30
 8001cf4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	4619      	mov	r1, r3
 8001d08:	484a      	ldr	r0, [pc, #296]	; (8001e34 <MX_GPIO_Init+0x2b4>)
 8001d0a:	f005 fabf 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	4844      	ldr	r0, [pc, #272]	; (8001e38 <MX_GPIO_Init+0x2b8>)
 8001d26:	f005 fab1 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	483e      	ldr	r0, [pc, #248]	; (8001e38 <MX_GPIO_Init+0x2b8>)
 8001d3e:	f005 faa5 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8001d42:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001d46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4838      	ldr	r0, [pc, #224]	; (8001e3c <MX_GPIO_Init+0x2bc>)
 8001d5c:	f005 fa96 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8001d60:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001d64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4831      	ldr	r0, [pc, #196]	; (8001e3c <MX_GPIO_Init+0x2bc>)
 8001d76:	f005 fa89 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <MX_GPIO_Init+0x2c0>)
 8001d8e:	f005 fa7d 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8001d92:	230e      	movs	r3, #14
 8001d94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4619      	mov	r1, r3
 8001da8:	4825      	ldr	r0, [pc, #148]	; (8001e40 <MX_GPIO_Init+0x2c0>)
 8001daa:	f005 fa6f 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8001dae:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001db2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481a      	ldr	r0, [pc, #104]	; (8001e2c <MX_GPIO_Init+0x2ac>)
 8001dc4:	f005 fa62 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8001dc8:	f240 3301 	movw	r3, #769	; 0x301
 8001dcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dda:	f107 031c 	add.w	r3, r7, #28
 8001dde:	4619      	mov	r1, r3
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_GPIO_Init+0x2c4>)
 8001de2:	f005 fa53 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8001de6:	2310      	movs	r3, #16
 8001de8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <MX_GPIO_Init+0x2c0>)
 8001dfa:	f005 fa47 	bl	800728c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_GPIO_Init+0x2b0>)
 8001e1c:	f005 fa36 	bl	800728c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e20:	bf00      	nop
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	58021000 	.word	0x58021000
 8001e30:	58020000 	.word	0x58020000
 8001e34:	58020800 	.word	0x58020800
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	58021400 	.word	0x58021400
 8001e40:	58021800 	.word	0x58021800
 8001e44:	58020c00 	.word	0x58020c00

08001e48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e50:	e7fe      	b.n	8001e50 <Error_Handler+0x8>
	...

08001e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_MspInit+0x30>)
 8001e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e60:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_MspInit+0x30>)
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_MspInit+0x30>)
 8001e6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	58024400 	.word	0x58024400

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	; 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5d      	ldr	r2, [pc, #372]	; (800201c <HAL_ADC_MspInit+0x194>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d159      	bne.n	8001f5e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001eb0:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001eb2:	f043 0320 	orr.w	r3, r3, #32
 8001eb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001eba:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	4a54      	ldr	r2, [pc, #336]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed8:	4b51      	ldr	r3, [pc, #324]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eea:	2303      	movs	r3, #3
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	484a      	ldr	r0, [pc, #296]	; (8002024 <HAL_ADC_MspInit+0x19c>)
 8001efa:	f005 f9c7 	bl	800728c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f00:	4a4a      	ldr	r2, [pc, #296]	; (800202c <HAL_ADC_MspInit+0x1a4>)
 8001f02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f04:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f06:	2209      	movs	r2, #9
 8001f08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f10:	4b45      	ldr	r3, [pc, #276]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f1e:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f26:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f40:	4839      	ldr	r0, [pc, #228]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f42:	f002 fd69 	bl	8004a18 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001f4c:	f7ff ff7c 	bl	8001e48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a35      	ldr	r2, [pc, #212]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_ADC_MspInit+0x1a0>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f5c:	e059      	b.n	8002012 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a33      	ldr	r2, [pc, #204]	; (8002030 <HAL_ADC_MspInit+0x1a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d154      	bne.n	8002012 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f78:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_ADC_MspInit+0x198>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001fa4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001fa8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001fac:	f001 f89e 	bl	80030ec <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_ADC_MspInit+0x1b0>)
 8001fb4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fb8:	2273      	movs	r2, #115	; 0x73
 8001fba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001fea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ff6:	480f      	ldr	r0, [pc, #60]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 8001ff8:	f002 fd0e 	bl	8004a18 <HAL_DMA_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002002:	f7ff ff21 	bl	8001e48 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
 800200c:	4a09      	ldr	r2, [pc, #36]	; (8002034 <HAL_ADC_MspInit+0x1ac>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002012:	bf00      	nop
 8002014:	3730      	adds	r7, #48	; 0x30
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	58024400 	.word	0x58024400
 8002024:	58020800 	.word	0x58020800
 8002028:	24000cb0 	.word	0x24000cb0
 800202c:	40020088 	.word	0x40020088
 8002030:	58026000 	.word	0x58026000
 8002034:	24000d28 	.word	0x24000d28
 8002038:	400204b8 	.word	0x400204b8

0800203c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0b8      	sub	sp, #224	; 0xe0
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	22b8      	movs	r2, #184	; 0xb8
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f013 fd63 	bl	8015b28 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_FDCAN_MspInit+0xc4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d144      	bne.n	80020f6 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800206c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002078:	2300      	movs	r3, #0
 800207a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	4618      	mov	r0, r3
 8002082:	f007 fef1 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 800208c:	f7ff fedc 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 8002092:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002096:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 80020a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_FDCAN_MspInit+0xc8>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80020e4:	2302      	movs	r3, #2
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <HAL_FDCAN_MspInit+0xcc>)
 80020f2:	f005 f8cb 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	37e0      	adds	r7, #224	; 0xe0
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	4000d400 	.word	0x4000d400
 8002104:	58024400 	.word	0x58024400
 8002108:	58021400 	.word	0x58021400

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0b8      	sub	sp, #224	; 0xe0
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	22b8      	movs	r2, #184	; 0xb8
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f013 fcfb 	bl	8015b28 <memset>
  if(hi2c->Instance==I2C2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_I2C_MspInit+0xd4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d14d      	bne.n	80021d8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800213c:	f04f 0208 	mov.w	r2, #8
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f007 fe88 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800215e:	f7ff fe73 	bl	8001e48 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 800216a:	f043 0320 	orr.w	r3, r3, #32
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002180:	2303      	movs	r3, #3
 8002182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002198:	2304      	movs	r3, #4
 800219a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800219e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021a2:	4619      	mov	r1, r3
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_I2C_MspInit+0xdc>)
 80021a6:	f005 f871 	bl	800728c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 80021ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 80021b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_I2C_MspInit+0xd8>)
 80021bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2101      	movs	r1, #1
 80021cc:	2021      	movs	r0, #33	; 0x21
 80021ce:	f002 fbee 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80021d2:	2021      	movs	r0, #33	; 0x21
 80021d4:	f002 fc05 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021d8:	bf00      	nop
 80021da:	37e0      	adds	r7, #224	; 0xe0
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40005800 	.word	0x40005800
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58021400 	.word	0x58021400

080021ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0ba      	sub	sp, #232	; 0xe8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002204:	f107 0318 	add.w	r3, r7, #24
 8002208:	22b8      	movs	r2, #184	; 0xb8
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f013 fc8b 	bl	8015b28 <memset>
  if(hsd->Instance==SDMMC2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <HAL_SD_MspInit+0x1a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	f040 80b3 	bne.w	8002384 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800221e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800222a:	2300      	movs	r3, #0
 800222c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	4618      	mov	r0, r3
 8002234:	f007 fe18 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800223e:	f7ff fe03 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002242:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002244:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002248:	4a51      	ldr	r2, [pc, #324]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 800224a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002252:	4b4f      	ldr	r3, [pc, #316]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002254:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002270:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	4a42      	ldr	r2, [pc, #264]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800228e:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_SD_MspInit+0x1a4>)
 8002290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800229c:	2340      	movs	r3, #64	; 0x40
 800229e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80022b4:	230b      	movs	r3, #11
 80022b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022be:	4619      	mov	r1, r3
 80022c0:	4834      	ldr	r0, [pc, #208]	; (8002394 <HAL_SD_MspInit+0x1a8>)
 80022c2:	f004 ffe3 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80022de:	230b      	movs	r3, #11
 80022e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022e8:	4619      	mov	r1, r3
 80022ea:	482a      	ldr	r0, [pc, #168]	; (8002394 <HAL_SD_MspInit+0x1a8>)
 80022ec:	f004 ffce 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fe:	2301      	movs	r3, #1
 8002300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800230a:	230b      	movs	r3, #11
 800230c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002314:	4619      	mov	r1, r3
 8002316:	4820      	ldr	r0, [pc, #128]	; (8002398 <HAL_SD_MspInit+0x1ac>)
 8002318:	f004 ffb8 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800231c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002320:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002336:	230b      	movs	r3, #11
 8002338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800233c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002340:	4619      	mov	r1, r3
 8002342:	4815      	ldr	r0, [pc, #84]	; (8002398 <HAL_SD_MspInit+0x1ac>)
 8002344:	f004 ffa2 	bl	800728c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002348:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800234c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002362:	230a      	movs	r3, #10
 8002364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002368:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <HAL_SD_MspInit+0x1ac>)
 8002370:	f004 ff8c 	bl	800728c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	207c      	movs	r0, #124	; 0x7c
 800237a:	f002 fb18 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800237e:	207c      	movs	r0, #124	; 0x7c
 8002380:	f002 fb2f 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	37e8      	adds	r7, #232	; 0xe8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	48022400 	.word	0x48022400
 8002390:	58024400 	.word	0x58024400
 8002394:	58020c00 	.word	0x58020c00
 8002398:	58021800 	.word	0x58021800

0800239c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08e      	sub	sp, #56	; 0x38
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_SPI_MspInit+0x15c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d12e      	bne.n	800241c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023be:	4b4f      	ldr	r3, [pc, #316]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ce:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	4a46      	ldr	r2, [pc, #280]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023fa:	23e0      	movs	r3, #224	; 0xe0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240a:	2305      	movs	r3, #5
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002412:	4619      	mov	r1, r3
 8002414:	483a      	ldr	r0, [pc, #232]	; (8002500 <HAL_SPI_MspInit+0x164>)
 8002416:	f004 ff39 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800241a:	e068      	b.n	80024ee <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a38      	ldr	r2, [pc, #224]	; (8002504 <HAL_SPI_MspInit+0x168>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d12f      	bne.n	8002486 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002426:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242c:	4a33      	ldr	r2, [pc, #204]	; (80024fc <HAL_SPI_MspInit+0x160>)
 800242e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002432:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800243c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <HAL_SPI_MspInit+0x160>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002462:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002474:	2305      	movs	r3, #5
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800247c:	4619      	mov	r1, r3
 800247e:	4822      	ldr	r0, [pc, #136]	; (8002508 <HAL_SPI_MspInit+0x16c>)
 8002480:	f004 ff04 	bl	800728c <HAL_GPIO_Init>
}
 8002484:	e033      	b.n	80024ee <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_SPI_MspInit+0x170>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d12e      	bne.n	80024ee <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002496:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_SPI_MspInit+0x160>)
 8002498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80024a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_SPI_MspInit+0x160>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024de:	2306      	movs	r3, #6
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4809      	ldr	r0, [pc, #36]	; (8002510 <HAL_SPI_MspInit+0x174>)
 80024ea:	f004 fecf 	bl	800728c <HAL_GPIO_Init>
}
 80024ee:	bf00      	nop
 80024f0:	3738      	adds	r7, #56	; 0x38
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40013000 	.word	0x40013000
 80024fc:	58024400 	.word	0x58024400
 8002500:	58020000 	.word	0x58020000
 8002504:	40003800 	.word	0x40003800
 8002508:	58020400 	.word	0x58020400
 800250c:	40003c00 	.word	0x40003c00
 8002510:	58020800 	.word	0x58020800

08002514 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d15d      	bne.n	80025f2 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	4b8e      	ldr	r3, [pc, #568]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 8002538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800253c:	4a8c      	ldr	r2, [pc, #560]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002546:	4b8a      	ldr	r3, [pc, #552]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 8002548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002554:	4b86      	ldr	r3, [pc, #536]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	4a85      	ldr	r2, [pc, #532]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002572:	2301      	movs	r3, #1
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002582:	2301      	movs	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4879      	ldr	r0, [pc, #484]	; (8002774 <HAL_TIM_PWM_MspInit+0x260>)
 800258e:	f004 fe7d 	bl	800728c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002592:	4b79      	ldr	r3, [pc, #484]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 8002594:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_TIM_PWM_MspInit+0x268>)
 8002596:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002598:	4b77      	ldr	r3, [pc, #476]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 800259a:	2214      	movs	r2, #20
 800259c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a4:	4b74      	ldr	r3, [pc, #464]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025b2:	4b71      	ldr	r3, [pc, #452]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025b8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80025d4:	4868      	ldr	r0, [pc, #416]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025d6:	f002 fa1f 	bl	8004a18 <HAL_DMA_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80025e0:	f7ff fc32 	bl	8001e48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a64      	ldr	r2, [pc, #400]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ea:	4a63      	ldr	r2, [pc, #396]	; (8002778 <HAL_TIM_PWM_MspInit+0x264>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025f0:	e119      	b.n	8002826 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a62      	ldr	r2, [pc, #392]	; (8002780 <HAL_TIM_PWM_MspInit+0x26c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d16d      	bne.n	80026d8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025fc:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 80025fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002602:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800260c:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 800260e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 800261c:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_TIM_PWM_MspInit+0x274>)
 800261e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002620:	4b58      	ldr	r3, [pc, #352]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002622:	2218      	movs	r2, #24
 8002624:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002626:	4b57      	ldr	r3, [pc, #348]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002628:	2240      	movs	r2, #64	; 0x40
 800262a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b55      	ldr	r3, [pc, #340]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b54      	ldr	r3, [pc, #336]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002638:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 800263c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002640:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002642:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002648:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800265c:	4849      	ldr	r0, [pc, #292]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 800265e:	f002 f9db 	bl	8004a18 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002668:	f7ff fbee 	bl	8001e48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a45      	ldr	r2, [pc, #276]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002670:	629a      	str	r2, [r3, #40]	; 0x28
 8002672:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_TIM_PWM_MspInit+0x270>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002678:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 800267a:	4a45      	ldr	r2, [pc, #276]	; (8002790 <HAL_TIM_PWM_MspInit+0x27c>)
 800267c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800267e:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 8002680:	2217      	movs	r2, #23
 8002682:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800268a:	4b40      	ldr	r3, [pc, #256]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002690:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 8002692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002696:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002698:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 800269a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800269e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026a0:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026a6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80026ba:	4834      	ldr	r0, [pc, #208]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026bc:	f002 f9ac 	bl	8004a18 <HAL_DMA_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80026c6:	f7ff fbbf 	bl	8001e48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2f      	ldr	r2, [pc, #188]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
 80026d0:	4a2e      	ldr	r2, [pc, #184]	; (800278c <HAL_TIM_PWM_MspInit+0x278>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026d6:	e0a6      	b.n	8002826 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_TIM_PWM_MspInit+0x280>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d15e      	bne.n	80027a0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 80026e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026e8:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026f2:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_TIM_PWM_MspInit+0x25c>)
 80026f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <HAL_TIM_PWM_MspInit+0x288>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002708:	221f      	movs	r2, #31
 800270a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 800271a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002726:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 800272a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800272e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002742:	4815      	ldr	r0, [pc, #84]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002744:	f002 f968 	bl	8004a18 <HAL_DMA_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800274e:	f7ff fb7b 	bl	8001e48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_TIM_PWM_MspInit+0x284>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201e      	movs	r0, #30
 8002764:	f002 f923 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002768:	201e      	movs	r0, #30
 800276a:	f002 f93a 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 800276e:	e05a      	b.n	8002826 <HAL_TIM_PWM_MspInit+0x312>
 8002770:	58024400 	.word	0x58024400
 8002774:	58020000 	.word	0x58020000
 8002778:	24001224 	.word	0x24001224
 800277c:	40020028 	.word	0x40020028
 8002780:	40000400 	.word	0x40000400
 8002784:	2400129c 	.word	0x2400129c
 8002788:	40020058 	.word	0x40020058
 800278c:	24001314 	.word	0x24001314
 8002790:	40020070 	.word	0x40020070
 8002794:	40000800 	.word	0x40000800
 8002798:	2400138c 	.word	0x2400138c
 800279c:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <HAL_TIM_PWM_MspInit+0x31c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d13d      	bne.n	8002826 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_TIM_PWM_MspInit+0x320>)
 80027ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_TIM_PWM_MspInit+0x320>)
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_TIM_PWM_MspInit+0x320>)
 80027bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027ca:	4a1c      	ldr	r2, [pc, #112]	; (800283c <HAL_TIM_PWM_MspInit+0x328>)
 80027cc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027d0:	223a      	movs	r2, #58	; 0x3a
 80027d2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ee:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027f6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 800280c:	f002 f904 	bl	8004a18 <HAL_DMA_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002816:	f7ff fb17 	bl	8001e48 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	4a05      	ldr	r2, [pc, #20]	; (8002838 <HAL_TIM_PWM_MspInit+0x324>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002826:	bf00      	nop
 8002828:	3730      	adds	r7, #48	; 0x30
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40000c00 	.word	0x40000c00
 8002834:	58024400 	.word	0x58024400
 8002838:	24001404 	.word	0x24001404
 800283c:	40020040 	.word	0x40020040

08002840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_TIM_Base_MspInit+0x3c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_TIM_Base_MspInit+0x40>)
 8002854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002858:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_TIM_Base_MspInit+0x40>)
 800285a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_TIM_Base_MspInit+0x40>)
 8002864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40001c00 	.word	0x40001c00
 8002880:	58024400 	.word	0x58024400

08002884 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d120      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80028a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ac:	4a50      	ldr	r2, [pc, #320]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ce:	2302      	movs	r3, #2
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028d6:	2301      	movs	r3, #1
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4844      	ldr	r0, [pc, #272]	; (80029f4 <HAL_TIM_MspPostInit+0x170>)
 80028e2:	f004 fcd3 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80028e6:	e07f      	b.n	80029e8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a42      	ldr	r2, [pc, #264]	; (80029f8 <HAL_TIM_MspPostInit+0x174>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11f      	bne.n	8002932 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	4b3f      	ldr	r3, [pc, #252]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f8:	4a3d      	ldr	r2, [pc, #244]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002902:	4b3b      	ldr	r3, [pc, #236]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002910:	2330      	movs	r3, #48	; 0x30
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002918:	2302      	movs	r3, #2
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002920:	2302      	movs	r3, #2
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	4832      	ldr	r0, [pc, #200]	; (80029f4 <HAL_TIM_MspPostInit+0x170>)
 800292c:	f004 fcae 	bl	800728c <HAL_GPIO_Init>
}
 8002930:	e05a      	b.n	80029e8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a31      	ldr	r2, [pc, #196]	; (80029fc <HAL_TIM_MspPostInit+0x178>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d131      	bne.n	80029a0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002942:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 8002944:	f043 0308 	orr.w	r3, r3, #8
 8002948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800295a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800295e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800296c:	2302      	movs	r3, #2
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002970:	f107 031c 	add.w	r3, r7, #28
 8002974:	4619      	mov	r1, r3
 8002976:	4822      	ldr	r0, [pc, #136]	; (8002a00 <HAL_TIM_MspPostInit+0x17c>)
 8002978:	f004 fc88 	bl	800728c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800297c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002986:	2302      	movs	r3, #2
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800298e:	2302      	movs	r3, #2
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4819      	ldr	r0, [pc, #100]	; (8002a00 <HAL_TIM_MspPostInit+0x17c>)
 800299a:	f004 fc77 	bl	800728c <HAL_GPIO_Init>
}
 800299e:	e023      	b.n	80029e8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_TIM_MspPostInit+0x180>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d11e      	bne.n	80029e8 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_TIM_MspPostInit+0x16c>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029c8:	2308      	movs	r3, #8
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d0:	2302      	movs	r3, #2
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029d8:	2302      	movs	r3, #2
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_TIM_MspPostInit+0x184>)
 80029e4:	f004 fc52 	bl	800728c <HAL_GPIO_Init>
}
 80029e8:	bf00      	nop
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	58024400 	.word	0x58024400
 80029f4:	58020400 	.word	0x58020400
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40000800 	.word	0x40000800
 8002a00:	58020c00 	.word	0x58020c00
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	58020000 	.word	0x58020000

08002a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	22b8      	movs	r2, #184	; 0xb8
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f013 f87b 	bl	8015b28 <memset>
  if(huart->Instance==UART4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4d      	ldr	r2, [pc, #308]	; (8002b6c <HAL_UART_MspInit+0x160>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d147      	bne.n	8002acc <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a3c:	f04f 0202 	mov.w	r2, #2
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4e:	f107 0318 	add.w	r3, r7, #24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f007 fa08 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a5e:	f7ff f9f3 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a62:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a68:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a86:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a90:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	482b      	ldr	r0, [pc, #172]	; (8002b74 <HAL_UART_MspInit+0x168>)
 8002ac6:	f004 fbe1 	bl	800728c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002aca:	e04a      	b.n	8002b62 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <HAL_UART_MspInit+0x16c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d145      	bne.n	8002b62 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ad6:	f04f 0201 	mov.w	r2, #1
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae8:	f107 0318 	add.w	r3, r7, #24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f007 f9bb 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002af8:	f7ff f9a6 	bl	8001e48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b02:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002b04:	f043 0320 	orr.w	r3, r3, #32
 8002b08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_UART_MspInit+0x164>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b38:	23c0      	movs	r3, #192	; 0xc0
 8002b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002b50:	2307      	movs	r3, #7
 8002b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4807      	ldr	r0, [pc, #28]	; (8002b7c <HAL_UART_MspInit+0x170>)
 8002b5e:	f004 fb95 	bl	800728c <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	37e8      	adds	r7, #232	; 0xe8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40004c00 	.word	0x40004c00
 8002b70:	58024400 	.word	0x58024400
 8002b74:	58020400 	.word	0x58020400
 8002b78:	40011400 	.word	0x40011400
 8002b7c:	58020800 	.word	0x58020800

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <NMI_Handler+0x4>

08002b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8a:	e7fe      	b.n	8002b8a <HardFault_Handler+0x4>

08002b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <MemManage_Handler+0x4>

08002b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b96:	e7fe      	b.n	8002b96 <BusFault_Handler+0x4>

08002b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b9c:	e7fe      	b.n	8002b9c <UsageFault_Handler+0x4>

08002b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bcc:	f000 fa4a 	bl	8003064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <DMA1_Stream0_IRQHandler+0x10>)
 8002bda:	f002 fce1 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2400138c 	.word	0x2400138c

08002be8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Stream1_IRQHandler+0x10>)
 8002bee:	f002 fcd7 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	24001224 	.word	0x24001224

08002bfc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <DMA1_Stream2_IRQHandler+0x10>)
 8002c02:	f002 fccd 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	24001404 	.word	0x24001404

08002c10 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Stream3_IRQHandler+0x10>)
 8002c16:	f002 fcc3 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2400129c 	.word	0x2400129c

08002c24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <DMA1_Stream4_IRQHandler+0x10>)
 8002c2a:	f002 fcb9 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	24001314 	.word	0x24001314

08002c38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA1_Stream5_IRQHandler+0x10>)
 8002c3e:	f002 fcaf 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	24000cb0 	.word	0x24000cb0

08002c4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <TIM4_IRQHandler+0x10>)
 8002c52:	f00b fd75 	bl	800e740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	24001140 	.word	0x24001140

08002c60 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <I2C2_EV_IRQHandler+0x10>)
 8002c66:	f004 fd7b 	bl	8007760 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000e40 	.word	0x24000e40

08002c74 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA2_Stream7_IRQHandler+0x10>)
 8002c7a:	f002 fc91 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	24000d28 	.word	0x24000d28

08002c88 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <OTG_HS_IRQHandler+0x10>)
 8002c8e:	f004 ff71 	bl	8007b74 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	24002ad4 	.word	0x24002ad4

08002c9c <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <SDMMC2_IRQHandler+0x10>)
 8002ca2:	f009 ff37 	bl	800cb14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	24000e94 	.word	0x24000e94

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cca:	f012 fef5 	bl	8015ab8 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
  }

  return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
  }
  return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_isatty>:

int _isatty(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f012 fe5a 	bl	8015ab8 <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	24050000 	.word	0x24050000
 8002e30:	00000800 	.word	0x00000800
 8002e34:	240015d0 	.word	0x240015d0
 8002e38:	24003210 	.word	0x24003210

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <SystemInit+0xd0>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <SystemInit+0xd0>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <SystemInit+0xd4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d807      	bhi.n	8002e6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <SystemInit+0xd4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 030f 	bic.w	r3, r3, #15
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <SystemInit+0xd4>)
 8002e66:	f043 0307 	orr.w	r3, r3, #7
 8002e6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <SystemInit+0xd8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <SystemInit+0xd8>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <SystemInit+0xd8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <SystemInit+0xd8>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4924      	ldr	r1, [pc, #144]	; (8002f14 <SystemInit+0xd8>)
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <SystemInit+0xdc>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <SystemInit+0xd4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <SystemInit+0xd4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 030f 	bic.w	r3, r3, #15
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <SystemInit+0xd4>)
 8002ea0:	f043 0307 	orr.w	r3, r3, #7
 8002ea4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <SystemInit+0xd8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <SystemInit+0xd8>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002eb2:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <SystemInit+0xd8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <SystemInit+0xd8>)
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <SystemInit+0xe0>)
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <SystemInit+0xd8>)
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <SystemInit+0xe4>)
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <SystemInit+0xd8>)
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <SystemInit+0xe8>)
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <SystemInit+0xd8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <SystemInit+0xd8>)
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <SystemInit+0xe8>)
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <SystemInit+0xd8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002edc:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <SystemInit+0xd8>)
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <SystemInit+0xe8>)
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <SystemInit+0xd8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <SystemInit+0xd8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <SystemInit+0xd8>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <SystemInit+0xd8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <SystemInit+0xec>)
 8002efc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00
 8002f10:	52002000 	.word	0x52002000
 8002f14:	58024400 	.word	0x58024400
 8002f18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f1c:	02020200 	.word	0x02020200
 8002f20:	01ff0000 	.word	0x01ff0000
 8002f24:	01010280 	.word	0x01010280
 8002f28:	52004000 	.word	0x52004000

08002f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f30:	f7ff ff84 	bl	8002e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f36:	490d      	ldr	r1, [pc, #52]	; (8002f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f5a:	f012 fdb3 	bl	8015ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5e:	f7fd ff61 	bl	8000e24 <main>
  bx  lr
 8002f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f64:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002f68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f6c:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8002f70:	0801a834 	.word	0x0801a834
  ldr r2, =_sbss
 8002f74:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8002f78:	24003210 	.word	0x24003210

08002f7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC3_IRQHandler>
	...

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f86:	2003      	movs	r0, #3
 8002f88:	f001 fd06 	bl	8004998 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f8c:	f006 fd96 	bl	8009abc <HAL_RCC_GetSysClockFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_Init+0x68>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	4913      	ldr	r1, [pc, #76]	; (8002fec <HAL_Init+0x6c>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HAL_Init+0x68>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <HAL_Init+0x6c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <HAL_Init+0x70>)
 8002fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_Init+0x74>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f000 f814 	bl	8002ff8 <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e002      	b.n	8002fe0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002fda:	f7fe ff3b 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	0801a32c 	.word	0x0801a32c
 8002ff0:	24000004 	.word	0x24000004
 8002ff4:	24000000 	.word	0x24000000

08002ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_InitTick+0x60>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e021      	b.n	8003050 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_InitTick+0x64>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_InitTick+0x60>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	4619      	mov	r1, r3
 8003016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301a:	fbb3 f3f1 	udiv	r3, r3, r1
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f001 fceb 	bl	80049fe <HAL_SYSTICK_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00e      	b.n	8003050 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d80a      	bhi.n	800304e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003038:	2200      	movs	r2, #0
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f001 fcb5 	bl	80049ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <HAL_InitTick+0x68>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	2400000c 	.word	0x2400000c
 800305c:	24000000 	.word	0x24000000
 8003060:	24000008 	.word	0x24000008

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2400000c 	.word	0x2400000c
 8003088:	240015d4 	.word	0x240015d4

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	240015d4 	.word	0x240015d4

080030a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ac:	f7ff ffee 	bl	800308c <HAL_GetTick>
 80030b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d005      	beq.n	80030ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <HAL_Delay+0x44>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ca:	bf00      	nop
 80030cc:	f7ff ffde 	bl	800308c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d8f7      	bhi.n	80030cc <HAL_Delay+0x28>
  {
  }
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2400000c 	.word	0x2400000c

080030ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	58000400 	.word	0x58000400

08003118 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3360      	adds	r3, #96	; 0x60
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a10      	ldr	r2, [pc, #64]	; (80031e0 <LL_ADC_SetOffset+0x60>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10b      	bne.n	80031bc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031ba:	e00b      	b.n	80031d4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	bf00      	nop
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	58026000 	.word	0x58026000

080031e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3360      	adds	r3, #96	; 0x60
 80031f2:	461a      	mov	r2, r3
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	611a      	str	r2, [r3, #16]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3360      	adds	r3, #96	; 0x60
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	601a      	str	r2, [r3, #0]
  }
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	58026000 	.word	0x58026000

08003288 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10e      	bne.n	80032ba <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3360      	adds	r3, #96	; 0x60
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	58026000 	.word	0x58026000

080032cc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <LL_ADC_SetOffsetSign+0x40>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10e      	bne.n	80032fe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3360      	adds	r3, #96	; 0x60
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	58026000 	.word	0x58026000

08003310 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3360      	adds	r3, #96	; 0x60
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <LL_ADC_SetOffsetState+0x50>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	431a      	orrs	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003342:	e007      	b.n	8003354 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	431a      	orrs	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	58026000 	.word	0x58026000

08003364 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3330      	adds	r3, #48	; 0x30
 8003374:	461a      	mov	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	4413      	add	r3, r2
 8003382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	211f      	movs	r1, #31
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 011f 	and.w	r1, r3, #31
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	431a      	orrs	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3314      	adds	r3, #20
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	0e5b      	lsrs	r3, r3, #25
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	4413      	add	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	0d1b      	lsrs	r3, r3, #20
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2107      	movs	r1, #7
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	401a      	ands	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	0d1b      	lsrs	r3, r3, #20
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d115      	bne.n	8003454 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0318 	and.w	r3, r3, #24
 800343e:	4914      	ldr	r1, [pc, #80]	; (8003490 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003440:	40d9      	lsrs	r1, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	400b      	ands	r3, r1
 8003446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344a:	431a      	orrs	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003452:	e014      	b.n	800347e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003460:	43db      	mvns	r3, r3
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0318 	and.w	r3, r3, #24
 800346a:	4909      	ldr	r1, [pc, #36]	; (8003490 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800346c:	40d9      	lsrs	r1, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	400b      	ands	r3, r1
 8003472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003476:	431a      	orrs	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	58026000 	.word	0x58026000
 8003490:	000fffff 	.word	0x000fffff

08003494 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6093      	str	r3, [r2, #8]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	5fffffc0 	.word	0x5fffffc0

080034b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034cc:	d101      	bne.n	80034d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <LL_ADC_EnableInternalRegulator+0x24>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	6fffffc0 	.word	0x6fffffc0

08003508 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351c:	d101      	bne.n	8003522 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <LL_ADC_IsEnabled+0x18>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <LL_ADC_IsEnabled+0x1a>
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d101      	bne.n	800356e <LL_ADC_REG_IsConversionOngoing+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d101      	bne.n	8003594 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1ee      	b.n	800399c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fe fc5b 	bl	8001e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff67 	bl	80034b8 <LL_ADC_IsDeepPowerDownEnabled>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff4d 	bl	8003494 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff82 	bl	8003508 <LL_ADC_IsInternalRegulatorEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d114      	bne.n	8003634 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff66 	bl	80034e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003614:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <HAL_ADC_Init+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	4a8e      	ldr	r2, [pc, #568]	; (8003854 <HAL_ADC_Init+0x2b0>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003626:	e002      	b.n	800362e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3b01      	subs	r3, #1
 800362c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff65 	bl	8003508 <LL_ADC_IsInternalRegulatorEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff76 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 800366a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 8188 	bne.w	800398a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 8184 	bne.w	800398a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800368a:	f043 0202 	orr.w	r2, r3, #2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff4a 	bl	8003530 <LL_ADC_IsEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d136      	bne.n	8003710 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6c      	ldr	r2, [pc, #432]	; (8003858 <HAL_ADC_Init+0x2b4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_ADC_Init+0x112>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_ADC_Init+0x2b8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10e      	bne.n	80036d4 <HAL_ADC_Init+0x130>
 80036b6:	4868      	ldr	r0, [pc, #416]	; (8003858 <HAL_ADC_Init+0x2b4>)
 80036b8:	f7ff ff3a 	bl	8003530 <LL_ADC_IsEnabled>
 80036bc:	4604      	mov	r4, r0
 80036be:	4867      	ldr	r0, [pc, #412]	; (800385c <HAL_ADC_Init+0x2b8>)
 80036c0:	f7ff ff36 	bl	8003530 <LL_ADC_IsEnabled>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4323      	orrs	r3, r4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e008      	b.n	80036e6 <HAL_ADC_Init+0x142>
 80036d4:	4862      	ldr	r0, [pc, #392]	; (8003860 <HAL_ADC_Init+0x2bc>)
 80036d6:	f7ff ff2b 	bl	8003530 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5a      	ldr	r2, [pc, #360]	; (8003858 <HAL_ADC_Init+0x2b4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_Init+0x15a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_ADC_Init+0x2b8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_Init+0x15e>
 80036fe:	4a59      	ldr	r2, [pc, #356]	; (8003864 <HAL_ADC_Init+0x2c0>)
 8003700:	e000      	b.n	8003704 <HAL_ADC_Init+0x160>
 8003702:	4a59      	ldr	r2, [pc, #356]	; (8003868 <HAL_ADC_Init+0x2c4>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7ff fd04 	bl	8003118 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_ADC_Init+0x2bc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d129      	bne.n	800376e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7e5b      	ldrb	r3, [r3, #25]
 800371e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003724:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800372a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d013      	beq.n	800375c <HAL_ADC_Init+0x1b8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d00d      	beq.n	8003758 <HAL_ADC_Init+0x1b4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b1c      	cmp	r3, #28
 8003742:	d007      	beq.n	8003754 <HAL_ADC_Init+0x1b0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b18      	cmp	r3, #24
 800374a:	d101      	bne.n	8003750 <HAL_ADC_Init+0x1ac>
 800374c:	2318      	movs	r3, #24
 800374e:	e006      	b.n	800375e <HAL_ADC_Init+0x1ba>
 8003750:	2300      	movs	r3, #0
 8003752:	e004      	b.n	800375e <HAL_ADC_Init+0x1ba>
 8003754:	2310      	movs	r3, #16
 8003756:	e002      	b.n	800375e <HAL_ADC_Init+0x1ba>
 8003758:	2308      	movs	r3, #8
 800375a:	e000      	b.n	800375e <HAL_ADC_Init+0x1ba>
 800375c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800375e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003766:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e00e      	b.n	800378c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7e5b      	ldrb	r3, [r3, #25]
 8003772:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003778:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800377e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d106      	bne.n	80037a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	3b01      	subs	r3, #1
 800379c:	045b      	lsls	r3, r3, #17
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a26      	ldr	r2, [pc, #152]	; (8003860 <HAL_ADC_Init+0x2bc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d115      	bne.n	80037f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_ADC_Init+0x2c8>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	69b9      	ldr	r1, [r7, #24]
 80037da:	430b      	orrs	r3, r1
 80037dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	611a      	str	r2, [r3, #16]
 80037f4:	e009      	b.n	800380a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_ADC_Init+0x2cc>)
 80037fe:	4013      	ands	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	69b9      	ldr	r1, [r7, #24]
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fea1 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 8003814:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff feae 	bl	800357c <LL_ADC_INJ_IsConversionOngoing>
 8003820:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 808e 	bne.w	8003946 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f040 808a 	bne.w	8003946 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_ADC_Init+0x2bc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d11b      	bne.n	8003874 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	7e1b      	ldrb	r3, [r3, #24]
 8003840:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003848:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e018      	b.n	8003882 <HAL_ADC_Init+0x2de>
 8003850:	24000000 	.word	0x24000000
 8003854:	053e2d63 	.word	0x053e2d63
 8003858:	40022000 	.word	0x40022000
 800385c:	40022100 	.word	0x40022100
 8003860:	58026000 	.word	0x58026000
 8003864:	40022300 	.word	0x40022300
 8003868:	58026300 	.word	0x58026300
 800386c:	fff04007 	.word	0xfff04007
 8003870:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7e1b      	ldrb	r3, [r3, #24]
 8003878:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	4b46      	ldr	r3, [pc, #280]	; (80039a4 <HAL_ADC_Init+0x400>)
 800388a:	4013      	ands	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	430b      	orrs	r3, r1
 8003894:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800389c:	2b01      	cmp	r3, #1
 800389e:	d137      	bne.n	8003910 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_ADC_Init+0x404>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d116      	bne.n	80038de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_ADC_Init+0x408>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038ce:	430a      	orrs	r2, r1
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	611a      	str	r2, [r3, #16]
 80038dc:	e020      	b.n	8003920 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <HAL_ADC_Init+0x40c>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038ec:	3a01      	subs	r2, #1
 80038ee:	0411      	lsls	r1, r2, #16
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003900:	430a      	orrs	r2, r1
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	e007      	b.n	8003920 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_ADC_Init+0x404>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d002      	beq.n	8003946 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd63 	bl	800440c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10c      	bne.n	8003968 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f023 010f 	bic.w	r1, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	1e5a      	subs	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
 8003966:	e007      	b.n	8003978 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 020f 	bic.w	r2, r2, #15
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	661a      	str	r2, [r3, #96]	; 0x60
 8003988:	e007      	b.n	800399a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800399a:	7ffb      	ldrb	r3, [r7, #31]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3724      	adds	r7, #36	; 0x24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	ffffbffc 	.word	0xffffbffc
 80039a8:	58026000 	.word	0x58026000
 80039ac:	fc00f81f 	.word	0xfc00f81f
 80039b0:	fc00f81e 	.word	0xfc00f81e

080039b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b0b9      	sub	sp, #228	; 0xe4
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ce:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4aa9      	ldr	r2, [pc, #676]	; (8003c7c <HAL_ADC_ConfigChannel+0x2c8>)
 80039d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x34>
 80039e2:	2302      	movs	r3, #2
 80039e4:	f000 bcfa 	b.w	80043dc <HAL_ADC_ConfigChannel+0xa28>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fdae 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 84de 	bne.w	80043be <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a9e      	ldr	r2, [pc, #632]	; (8003c80 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d033      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d108      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x76>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0e9b      	lsrs	r3, r3, #26
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	2201      	movs	r2, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	e01d      	b.n	8003a66 <HAL_ADC_ConfigChannel+0xb2>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e004      	b.n	8003a5c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a56:	fab3 f383 	clz	r3, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2201      	movs	r2, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	69d1      	ldr	r1, [r2, #28]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	430b      	orrs	r3, r1
 8003a72:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	f7ff fc6f 	bl	8003364 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fd63 	bl	8003556 <LL_ADC_REG_IsConversionOngoing>
 8003a90:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fd6f 	bl	800357c <LL_ADC_INJ_IsConversionOngoing>
 8003a9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 8270 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f040 826b 	bne.w	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f7ff fc7a 	bl	80033bc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a6c      	ldr	r2, [pc, #432]	; (8003c80 <HAL_ADC_ConfigChannel+0x2cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10d      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003aec:	e032      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aee:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <HAL_ADC_ConfigChannel+0x2d0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003afa:	d10b      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x160>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	e01d      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x19c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x186>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	e00a      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x19c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d048      	beq.n	8003bee <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6919      	ldr	r1, [r3, #16]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b6c:	f7ff fb08 	bl	8003180 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a42      	ldr	r2, [pc, #264]	; (8003c80 <HAL_ADC_ConfigChannel+0x2cc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d119      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7ff fba0 	bl	80032cc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x1f0>
 8003b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba2:	e000      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x1f2>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f7ff fb6e 	bl	8003288 <LL_ADC_SetOffsetSaturation>
 8003bac:	e1ee      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6919      	ldr	r1, [r3, #16]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x212>
 8003bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bc4:	e000      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x214>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f7ff fb3b 	bl	8003244 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6919      	ldr	r1, [r3, #16]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	7e1b      	ldrb	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x230>
 8003bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003be2:	e000      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x232>
 8003be4:	2300      	movs	r3, #0
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff fb12 	bl	8003210 <LL_ADC_SetDataRightShift>
 8003bec:	e1ce      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_ADC_ConfigChannel+0x2cc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	f040 8181 	bne.w	8003efc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff faef 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x272>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fae4 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	0e9b      	lsrs	r3, r3, #26
 8003c20:	f003 021f 	and.w	r2, r3, #31
 8003c24:	e01e      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x2b0>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fad9 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003c4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003c54:	2320      	movs	r3, #32
 8003c56:	e004      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003c58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x2d4>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	0e9b      	lsrs	r3, r3, #26
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	e01e      	b.n	8003cba <HAL_ADC_ConfigChannel+0x306>
 8003c7c:	47ff0000 	.word	0x47ff0000
 8003c80:	58026000 	.word	0x58026000
 8003c84:	5c001000 	.word	0x5c001000
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003cac:	2320      	movs	r3, #32
 8003cae:	e004      	b.n	8003cba <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d106      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fb22 	bl	8003310 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fa86 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x344>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fa7b 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	f003 021f 	and.w	r2, r3, #31
 8003cf6:	e01e      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x382>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fa70 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003d26:	2320      	movs	r3, #32
 8003d28:	e004      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003d2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x39a>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	e018      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x3cc>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003d72:	2320      	movs	r3, #32
 8003d74:	e004      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d7a:	fab3 f383 	clz	r3, r3
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d106      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fabf 	bl	8003310 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa23 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x40a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fa18 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003db4:	4603      	mov	r3, r0
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	f003 021f 	and.w	r2, r3, #31
 8003dbc:	e01e      	b.n	8003dfc <HAL_ADC_ConfigChannel+0x448>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fa0d 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e004      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x460>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0e9b      	lsrs	r3, r3, #26
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	e014      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x48a>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e004      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d106      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fa60 	bl	8003310 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2103      	movs	r1, #3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff f9c4 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x4c8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff f9b9 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003e72:	4603      	mov	r3, r0
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	f003 021f 	and.w	r2, r3, #31
 8003e7a:	e017      	b.n	8003eac <HAL_ADC_ConfigChannel+0x4f8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2103      	movs	r1, #3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff f9ae 	bl	80031e4 <LL_ADC_GetOffsetChannel>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e8e:	fa93 f3a3 	rbit	r3, r3
 8003e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e003      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x510>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	e011      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x534>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e003      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d14f      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2103      	movs	r1, #3
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fa0b 	bl	8003310 <LL_ADC_SetOffsetState>
 8003efa:	e047      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	069b      	lsls	r3, r3, #26
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f42:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	069b      	lsls	r3, r3, #26
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f66:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	069b      	lsls	r3, r3, #26
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d107      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f8a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff facd 	bl	8003530 <LL_ADC_IsEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 8219 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f7ff fa32 	bl	8003414 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4aa1      	ldr	r2, [pc, #644]	; (800423c <HAL_ADC_ConfigChannel+0x888>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	f040 812e 	bne.w	8004218 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x630>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e019      	b.n	8004018 <HAL_ADC_ConfigChannel+0x664>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	e003      	b.n	8004008 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b09      	cmp	r3, #9
 8004010:	bf94      	ite	ls
 8004012:	2301      	movls	r3, #1
 8004014:	2300      	movhi	r3, #0
 8004016:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004018:	2b00      	cmp	r3, #0
 800401a:	d079      	beq.n	8004110 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x684>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	069b      	lsls	r3, r3, #26
 8004032:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004036:	e015      	b.n	8004064 <HAL_ADC_ConfigChannel+0x6b0>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004048:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e003      	b.n	800405c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3301      	adds	r3, #1
 800405e:	069b      	lsls	r3, r3, #26
 8004060:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x6d0>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0e9b      	lsrs	r3, r3, #26
 8004076:	3301      	adds	r3, #1
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2101      	movs	r1, #1
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	e017      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x700>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e003      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2101      	movs	r1, #1
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	ea42 0103 	orr.w	r1, r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <HAL_ADC_ConfigChannel+0x726>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 021f 	and.w	r2, r3, #31
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	051b      	lsls	r3, r3, #20
 80040d8:	e018      	b.n	800410c <HAL_ADC_ConfigChannel+0x758>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e003      	b.n	80040fe <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	3301      	adds	r3, #1
 8004100:	f003 021f 	and.w	r2, r3, #31
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800410c:	430b      	orrs	r3, r1
 800410e:	e07e      	b.n	800420e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004118:	2b00      	cmp	r3, #0
 800411a:	d107      	bne.n	800412c <HAL_ADC_ConfigChannel+0x778>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	069b      	lsls	r3, r3, #26
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412a:	e015      	b.n	8004158 <HAL_ADC_ConfigChannel+0x7a4>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e003      	b.n	8004150 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	fab3 f383 	clz	r3, r3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3301      	adds	r3, #1
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x7c4>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0e9b      	lsrs	r3, r3, #26
 800416a:	3301      	adds	r3, #1
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	e017      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x7f4>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	61bb      	str	r3, [r7, #24]
  return result;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e003      	b.n	800419c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3301      	adds	r3, #1
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2101      	movs	r1, #1
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	ea42 0103 	orr.w	r1, r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x820>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	3b1e      	subs	r3, #30
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d2:	e01b      	b.n	800420c <HAL_ADC_ConfigChannel+0x858>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	60fb      	str	r3, [r7, #12]
  return result;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80041ec:	2320      	movs	r3, #32
 80041ee:	e003      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	f003 021f 	and.w	r2, r3, #31
 80041fe:	4613      	mov	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4413      	add	r3, r2
 8004204:	3b1e      	subs	r3, #30
 8004206:	051b      	lsls	r3, r3, #20
 8004208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800420c:	430b      	orrs	r3, r1
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	6892      	ldr	r2, [r2, #8]
 8004212:	4619      	mov	r1, r3
 8004214:	f7ff f8d2 	bl	80033bc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f280 80d7 	bge.w	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a06      	ldr	r2, [pc, #24]	; (8004240 <HAL_ADC_ConfigChannel+0x88c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_ADC_ConfigChannel+0x882>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <HAL_ADC_ConfigChannel+0x890>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10a      	bne.n	800424c <HAL_ADC_ConfigChannel+0x898>
 8004236:	4b04      	ldr	r3, [pc, #16]	; (8004248 <HAL_ADC_ConfigChannel+0x894>)
 8004238:	e009      	b.n	800424e <HAL_ADC_ConfigChannel+0x89a>
 800423a:	bf00      	nop
 800423c:	47ff0000 	.word	0x47ff0000
 8004240:	40022000 	.word	0x40022000
 8004244:	40022100 	.word	0x40022100
 8004248:	40022300 	.word	0x40022300
 800424c:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_ADC_ConfigChannel+0xa30>)
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe ff88 	bl	8003164 <LL_ADC_GetCommonPathInternalCh>
 8004254:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a62      	ldr	r2, [pc, #392]	; (80043e8 <HAL_ADC_ConfigChannel+0xa34>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_ADC_ConfigChannel+0x8b8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a61      	ldr	r2, [pc, #388]	; (80043ec <HAL_ADC_ConfigChannel+0xa38>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d10e      	bne.n	800428a <HAL_ADC_ConfigChannel+0x8d6>
 800426c:	485e      	ldr	r0, [pc, #376]	; (80043e8 <HAL_ADC_ConfigChannel+0xa34>)
 800426e:	f7ff f95f 	bl	8003530 <LL_ADC_IsEnabled>
 8004272:	4604      	mov	r4, r0
 8004274:	485d      	ldr	r0, [pc, #372]	; (80043ec <HAL_ADC_ConfigChannel+0xa38>)
 8004276:	f7ff f95b 	bl	8003530 <LL_ADC_IsEnabled>
 800427a:	4603      	mov	r3, r0
 800427c:	4323      	orrs	r3, r4
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	e008      	b.n	800429c <HAL_ADC_ConfigChannel+0x8e8>
 800428a:	4859      	ldr	r0, [pc, #356]	; (80043f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800428c:	f7ff f950 	bl	8003530 <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf0c      	ite	eq
 8004296:	2301      	moveq	r3, #1
 8004298:	2300      	movne	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8084 	beq.w	80043aa <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a53      	ldr	r2, [pc, #332]	; (80043f4 <HAL_ADC_ConfigChannel+0xa40>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d132      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x95e>
 80042ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d12c      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_ADC_ConfigChannel+0xa3c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	f040 8086 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a47      	ldr	r2, [pc, #284]	; (80043e8 <HAL_ADC_ConfigChannel+0xa34>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x924>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a46      	ldr	r2, [pc, #280]	; (80043ec <HAL_ADC_ConfigChannel+0xa38>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x928>
 80042d8:	4a47      	ldr	r2, [pc, #284]	; (80043f8 <HAL_ADC_ConfigChannel+0xa44>)
 80042da:	e000      	b.n	80042de <HAL_ADC_ConfigChannel+0x92a>
 80042dc:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <HAL_ADC_ConfigChannel+0xa30>)
 80042de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80042e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe ff28 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_ADC_ConfigChannel+0xa48>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	4a42      	ldr	r2, [pc, #264]	; (8004400 <HAL_ADC_ConfigChannel+0xa4c>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	3301      	adds	r3, #1
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004302:	e002      	b.n	800430a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f9      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004310:	e05e      	b.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3b      	ldr	r2, [pc, #236]	; (8004404 <HAL_ADC_ConfigChannel+0xa50>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d120      	bne.n	800435e <HAL_ADC_ConfigChannel+0x9aa>
 800431c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11a      	bne.n	800435e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d14e      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <HAL_ADC_ConfigChannel+0xa34>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_ADC_ConfigChannel+0x992>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2a      	ldr	r2, [pc, #168]	; (80043ec <HAL_ADC_ConfigChannel+0xa38>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x996>
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <HAL_ADC_ConfigChannel+0xa44>)
 8004348:	e000      	b.n	800434c <HAL_ADC_ConfigChannel+0x998>
 800434a:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <HAL_ADC_ConfigChannel+0xa30>)
 800434c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7fe fef1 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800435c:	e038      	b.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a29      	ldr	r2, [pc, #164]	; (8004408 <HAL_ADC_ConfigChannel+0xa54>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d133      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
 8004368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800436c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d12d      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_ADC_ConfigChannel+0xa3c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d128      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_ADC_ConfigChannel+0xa34>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_ADC_ConfigChannel+0x9de>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_ADC_ConfigChannel+0xa38>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x9e2>
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_ADC_ConfigChannel+0xa44>)
 8004394:	e000      	b.n	8004398 <HAL_ADC_ConfigChannel+0x9e4>
 8004396:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <HAL_ADC_ConfigChannel+0xa30>)
 8004398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800439c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f7fe fecb 	bl	800313e <LL_ADC_SetCommonPathInternalCh>
 80043a8:	e012      	b.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80043bc:	e008      	b.n	80043d0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043d8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80043dc:	4618      	mov	r0, r3
 80043de:	37e4      	adds	r7, #228	; 0xe4
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	58026300 	.word	0x58026300
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40022100 	.word	0x40022100
 80043f0:	58026000 	.word	0x58026000
 80043f4:	c7520000 	.word	0xc7520000
 80043f8:	40022300 	.word	0x40022300
 80043fc:	24000000 	.word	0x24000000
 8004400:	053e2d63 	.word	0x053e2d63
 8004404:	c3210000 	.word	0xc3210000
 8004408:	cb840000 	.word	0xcb840000

0800440c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6c      	ldr	r2, [pc, #432]	; (80045cc <ADC_ConfigureBoostMode+0x1c0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <ADC_ConfigureBoostMode+0x1c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6b      	ldr	r2, [pc, #428]	; (80045d0 <ADC_ConfigureBoostMode+0x1c4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <ADC_ConfigureBoostMode+0x30>
 8004428:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <ADC_ConfigureBoostMode+0x1c8>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e008      	b.n	800444e <ADC_ConfigureBoostMode+0x42>
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <ADC_ConfigureBoostMode+0x1cc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01c      	beq.n	800448c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004452:	f005 fcad 	bl	8009db0 <HAL_RCC_GetHCLKFreq>
 8004456:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004460:	d010      	beq.n	8004484 <ADC_ConfigureBoostMode+0x78>
 8004462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004466:	d873      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x144>
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d002      	beq.n	8004474 <ADC_ConfigureBoostMode+0x68>
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004472:	d16d      	bne.n	8004550 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	60fb      	str	r3, [r7, #12]
        break;
 8004482:	e068      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	60fb      	str	r3, [r7, #12]
        break;
 800448a:	e064      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800448c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	f006 fe88 	bl	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004498:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044a2:	d051      	beq.n	8004548 <ADC_ConfigureBoostMode+0x13c>
 80044a4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044a8:	d854      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044aa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044ae:	d047      	beq.n	8004540 <ADC_ConfigureBoostMode+0x134>
 80044b0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044b4:	d84e      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044b6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044ba:	d03d      	beq.n	8004538 <ADC_ConfigureBoostMode+0x12c>
 80044bc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044c0:	d848      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c6:	d033      	beq.n	8004530 <ADC_ConfigureBoostMode+0x124>
 80044c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044cc:	d842      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044ce:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044d2:	d029      	beq.n	8004528 <ADC_ConfigureBoostMode+0x11c>
 80044d4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044d8:	d83c      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044da:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044de:	d01a      	beq.n	8004516 <ADC_ConfigureBoostMode+0x10a>
 80044e0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044e4:	d836      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044e6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044ea:	d014      	beq.n	8004516 <ADC_ConfigureBoostMode+0x10a>
 80044ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044f0:	d830      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d00e      	beq.n	8004516 <ADC_ConfigureBoostMode+0x10a>
 80044f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fc:	d82a      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 80044fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004502:	d008      	beq.n	8004516 <ADC_ConfigureBoostMode+0x10a>
 8004504:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004508:	d824      	bhi.n	8004554 <ADC_ConfigureBoostMode+0x148>
 800450a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450e:	d002      	beq.n	8004516 <ADC_ConfigureBoostMode+0x10a>
 8004510:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004514:	d11e      	bne.n	8004554 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	0c9b      	lsrs	r3, r3, #18
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	60fb      	str	r3, [r7, #12]
        break;
 8004526:	e016      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
        break;
 800452e:	e012      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	60fb      	str	r3, [r7, #12]
        break;
 8004536:	e00e      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e00a      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	09db      	lsrs	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]
        break;
 8004546:	e006      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	60fb      	str	r3, [r7, #12]
        break;
 800454e:	e002      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004554:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <ADC_ConfigureBoostMode+0x1d0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d808      	bhi.n	8004576 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004572:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004574:	e025      	b.n	80045c2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <ADC_ConfigureBoostMode+0x1d4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d80a      	bhi.n	8004594 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	609a      	str	r2, [r3, #8]
}
 8004592:	e016      	b.n	80045c2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <ADC_ConfigureBoostMode+0x1d8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d80a      	bhi.n	80045b2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	e007      	b.n	80045c2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045c0:	609a      	str	r2, [r3, #8]
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40022000 	.word	0x40022000
 80045d0:	40022100 	.word	0x40022100
 80045d4:	40022300 	.word	0x40022300
 80045d8:	58026300 	.word	0x58026300
 80045dc:	005f5e10 	.word	0x005f5e10
 80045e0:	00bebc20 	.word	0x00bebc20
 80045e4:	017d7840 	.word	0x017d7840

080045e8 <LL_ADC_IsEnabled>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <LL_ADC_IsEnabled+0x18>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <LL_ADC_IsEnabled+0x1a>
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_ADC_REG_IsConversionOngoing>:
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d101      	bne.n	8004626 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b0a3      	sub	sp, #140	; 0x8c
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800464e:	2302      	movs	r3, #2
 8004650:	e0c1      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800465e:	2300      	movs	r3, #0
 8004660:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5e      	ldr	r2, [pc, #376]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d102      	bne.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800466c:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e001      	b.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0a0      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ffb9 	bl	800460e <LL_ADC_REG_IsConversionOngoing>
 800469c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ffb2 	bl	800460e <LL_ADC_REG_IsConversionOngoing>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 8081 	bne.w	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d17c      	bne.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a48      	ldr	r2, [pc, #288]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80046ce:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80046d0:	e000      	b.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80046d2:	4b46      	ldr	r3, [pc, #280]	; (80047ec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80046d4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d039      	beq.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3a      	ldr	r2, [pc, #232]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a39      	ldr	r2, [pc, #228]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d10e      	bne.n	8004722 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004704:	4836      	ldr	r0, [pc, #216]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004706:	f7ff ff6f 	bl	80045e8 <LL_ADC_IsEnabled>
 800470a:	4604      	mov	r4, r0
 800470c:	4835      	ldr	r0, [pc, #212]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800470e:	f7ff ff6b 	bl	80045e8 <LL_ADC_IsEnabled>
 8004712:	4603      	mov	r3, r0
 8004714:	4323      	orrs	r3, r4
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e008      	b.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004722:	4833      	ldr	r0, [pc, #204]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004724:	f7ff ff60 	bl	80045e8 <LL_ADC_IsEnabled>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d047      	beq.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800473e:	4013      	ands	r3, r2
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	6811      	ldr	r1, [r2, #0]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	430a      	orrs	r2, r1
 800474a:	431a      	orrs	r2, r3
 800474c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004750:	e03a      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800475a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800475c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10e      	bne.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004772:	481b      	ldr	r0, [pc, #108]	; (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004774:	f7ff ff38 	bl	80045e8 <LL_ADC_IsEnabled>
 8004778:	4604      	mov	r4, r0
 800477a:	481a      	ldr	r0, [pc, #104]	; (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800477c:	f7ff ff34 	bl	80045e8 <LL_ADC_IsEnabled>
 8004780:	4603      	mov	r3, r0
 8004782:	4323      	orrs	r3, r4
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e008      	b.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004790:	4817      	ldr	r0, [pc, #92]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004792:	f7ff ff29 	bl	80045e8 <LL_ADC_IsEnabled>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d010      	beq.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047b2:	e009      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b8:	f043 0220 	orr.w	r2, r3, #32
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80047c6:	e000      	b.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80047d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	378c      	adds	r7, #140	; 0x8c
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd90      	pop	{r4, r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40022100 	.word	0x40022100
 80047e8:	40022300 	.word	0x40022300
 80047ec:	58026300 	.word	0x58026300
 80047f0:	58026000 	.word	0x58026000
 80047f4:	fffff0e0 	.word	0xfffff0e0

080047f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <__NVIC_SetPriorityGrouping+0x40>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004814:	4013      	ands	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <__NVIC_SetPriorityGrouping+0x44>)
 8004822:	4313      	orrs	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <__NVIC_SetPriorityGrouping+0x40>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00
 800483c:	05fa0000 	.word	0x05fa0000

08004840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <__NVIC_GetPriorityGrouping+0x18>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 0307 	and.w	r3, r3, #7
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db0b      	blt.n	8004886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	4907      	ldr	r1, [pc, #28]	; (8004894 <__NVIC_EnableIRQ+0x38>)
 8004876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f202 	lsl.w	r2, r0, r2
 8004882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000e100 	.word	0xe000e100

08004898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	db0a      	blt.n	80048c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	490c      	ldr	r1, [pc, #48]	; (80048e4 <__NVIC_SetPriority+0x4c>)
 80048b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	440b      	add	r3, r1
 80048bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c0:	e00a      	b.n	80048d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4908      	ldr	r1, [pc, #32]	; (80048e8 <__NVIC_SetPriority+0x50>)
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	3b04      	subs	r3, #4
 80048d0:	0112      	lsls	r2, r2, #4
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	440b      	add	r3, r1
 80048d6:	761a      	strb	r2, [r3, #24]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000e100 	.word	0xe000e100
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f1c3 0307 	rsb	r3, r3, #7
 8004906:	2b04      	cmp	r3, #4
 8004908:	bf28      	it	cs
 800490a:	2304      	movcs	r3, #4
 800490c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3304      	adds	r3, #4
 8004912:	2b06      	cmp	r3, #6
 8004914:	d902      	bls.n	800491c <NVIC_EncodePriority+0x30>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3b03      	subs	r3, #3
 800491a:	e000      	b.n	800491e <NVIC_EncodePriority+0x32>
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	401a      	ands	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004934:	f04f 31ff 	mov.w	r1, #4294967295
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43d9      	mvns	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	4313      	orrs	r3, r2
         );
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004964:	d301      	bcc.n	800496a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004966:	2301      	movs	r3, #1
 8004968:	e00f      	b.n	800498a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <SysTick_Config+0x40>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004972:	210f      	movs	r1, #15
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f7ff ff8e 	bl	8004898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <SysTick_Config+0x40>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <SysTick_Config+0x40>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000e010 	.word	0xe000e010

08004998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff29 	bl	80047f8 <__NVIC_SetPriorityGrouping>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049bc:	f7ff ff40 	bl	8004840 <__NVIC_GetPriorityGrouping>
 80049c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff90 	bl	80048ec <NVIC_EncodePriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff5f 	bl	8004898 <__NVIC_SetPriority>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff33 	bl	800485c <__NVIC_EnableIRQ>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffa4 	bl	8004954 <SysTick_Config>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fe fb34 	bl	800308c <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e314      	b.n	800505a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <HAL_DMA_Init+0x1b8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <HAL_DMA_Init+0x1bc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d045      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a63      	ldr	r2, [pc, #396]	; (8004bd8 <HAL_DMA_Init+0x1c0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d040      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a62      	ldr	r2, [pc, #392]	; (8004bdc <HAL_DMA_Init+0x1c4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d03b      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a60      	ldr	r2, [pc, #384]	; (8004be0 <HAL_DMA_Init+0x1c8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_DMA_Init+0x1cc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d031      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_DMA_Init+0x1d0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02c      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5c      	ldr	r2, [pc, #368]	; (8004bec <HAL_DMA_Init+0x1d4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d027      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_DMA_Init+0x1d8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <HAL_DMA_Init+0x1dc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a57      	ldr	r2, [pc, #348]	; (8004bf8 <HAL_DMA_Init+0x1e0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a56      	ldr	r2, [pc, #344]	; (8004bfc <HAL_DMA_Init+0x1e4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_DMA_Init+0x1e8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a53      	ldr	r2, [pc, #332]	; (8004c04 <HAL_DMA_Init+0x1ec>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a51      	ldr	r2, [pc, #324]	; (8004c08 <HAL_DMA_Init+0x1f0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_DMA_Init+0xb8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a50      	ldr	r2, [pc, #320]	; (8004c0c <HAL_DMA_Init+0x1f4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Init+0xbc>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_DMA_Init+0xbe>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 813c 	beq.w	8004d54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a37      	ldr	r2, [pc, #220]	; (8004bd0 <HAL_DMA_Init+0x1b8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d04a      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a36      	ldr	r2, [pc, #216]	; (8004bd4 <HAL_DMA_Init+0x1bc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d045      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <HAL_DMA_Init+0x1c0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d040      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_DMA_Init+0x1c4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d03b      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a31      	ldr	r2, [pc, #196]	; (8004be0 <HAL_DMA_Init+0x1c8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d036      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a30      	ldr	r2, [pc, #192]	; (8004be4 <HAL_DMA_Init+0x1cc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d031      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <HAL_DMA_Init+0x1d0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02c      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	; (8004bec <HAL_DMA_Init+0x1d4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d027      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2b      	ldr	r2, [pc, #172]	; (8004bf0 <HAL_DMA_Init+0x1d8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d022      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <HAL_DMA_Init+0x1dc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d01d      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a28      	ldr	r2, [pc, #160]	; (8004bf8 <HAL_DMA_Init+0x1e0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d018      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_DMA_Init+0x1e4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_DMA_Init+0x1e8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00e      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_DMA_Init+0x1ec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d009      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_DMA_Init+0x1f0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d004      	beq.n	8004b8c <HAL_DMA_Init+0x174>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_DMA_Init+0x1f4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d108      	bne.n	8004b9e <HAL_DMA_Init+0x186>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e007      	b.n	8004bae <HAL_DMA_Init+0x196>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bae:	e02f      	b.n	8004c10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bb0:	f7fe fa6c 	bl	800308c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d928      	bls.n	8004c10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e244      	b.n	800505a <HAL_DMA_Init+0x642>
 8004bd0:	40020010 	.word	0x40020010
 8004bd4:	40020028 	.word	0x40020028
 8004bd8:	40020040 	.word	0x40020040
 8004bdc:	40020058 	.word	0x40020058
 8004be0:	40020070 	.word	0x40020070
 8004be4:	40020088 	.word	0x40020088
 8004be8:	400200a0 	.word	0x400200a0
 8004bec:	400200b8 	.word	0x400200b8
 8004bf0:	40020410 	.word	0x40020410
 8004bf4:	40020428 	.word	0x40020428
 8004bf8:	40020440 	.word	0x40020440
 8004bfc:	40020458 	.word	0x40020458
 8004c00:	40020470 	.word	0x40020470
 8004c04:	40020488 	.word	0x40020488
 8004c08:	400204a0 	.word	0x400204a0
 8004c0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1c8      	bne.n	8004bb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4b84      	ldr	r3, [pc, #528]	; (8004e3c <HAL_DMA_Init+0x424>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b28      	cmp	r3, #40	; 0x28
 8004c7a:	d903      	bls.n	8004c84 <HAL_DMA_Init+0x26c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b2e      	cmp	r3, #46	; 0x2e
 8004c82:	d91f      	bls.n	8004cc4 <HAL_DMA_Init+0x2ac>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b3e      	cmp	r3, #62	; 0x3e
 8004c8a:	d903      	bls.n	8004c94 <HAL_DMA_Init+0x27c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b42      	cmp	r3, #66	; 0x42
 8004c92:	d917      	bls.n	8004cc4 <HAL_DMA_Init+0x2ac>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b46      	cmp	r3, #70	; 0x46
 8004c9a:	d903      	bls.n	8004ca4 <HAL_DMA_Init+0x28c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b48      	cmp	r3, #72	; 0x48
 8004ca2:	d90f      	bls.n	8004cc4 <HAL_DMA_Init+0x2ac>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b4e      	cmp	r3, #78	; 0x4e
 8004caa:	d903      	bls.n	8004cb4 <HAL_DMA_Init+0x29c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b52      	cmp	r3, #82	; 0x52
 8004cb2:	d907      	bls.n	8004cc4 <HAL_DMA_Init+0x2ac>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b73      	cmp	r3, #115	; 0x73
 8004cba:	d905      	bls.n	8004cc8 <HAL_DMA_Init+0x2b0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b77      	cmp	r3, #119	; 0x77
 8004cc2:	d801      	bhi.n	8004cc8 <HAL_DMA_Init+0x2b0>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_DMA_Init+0x2b2>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 0307 	bic.w	r3, r3, #7
 8004cec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d117      	bne.n	8004d30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fdcc 	bl	80068b0 <DMA_CheckFifoParam>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2240      	movs	r2, #64	; 0x40
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e194      	b.n	800505a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f001 fd07 	bl	800674c <DMA_CalcBaseAndBitshift>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	223f      	movs	r2, #63	; 0x3f
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	e0ca      	b.n	8004eea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a39      	ldr	r2, [pc, #228]	; (8004e40 <HAL_DMA_Init+0x428>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a38      	ldr	r2, [pc, #224]	; (8004e44 <HAL_DMA_Init+0x42c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a36      	ldr	r2, [pc, #216]	; (8004e48 <HAL_DMA_Init+0x430>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a35      	ldr	r2, [pc, #212]	; (8004e4c <HAL_DMA_Init+0x434>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a33      	ldr	r2, [pc, #204]	; (8004e50 <HAL_DMA_Init+0x438>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a32      	ldr	r2, [pc, #200]	; (8004e54 <HAL_DMA_Init+0x43c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <HAL_DMA_Init+0x440>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Init+0x38c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <HAL_DMA_Init+0x444>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d101      	bne.n	8004da8 <HAL_DMA_Init+0x390>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_DMA_Init+0x392>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 8094 	beq.w	8004ed8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <HAL_DMA_Init+0x428>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d021      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	; (8004e44 <HAL_DMA_Init+0x42c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01c      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <HAL_DMA_Init+0x430>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d017      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <HAL_DMA_Init+0x434>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d012      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_DMA_Init+0x438>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_DMA_Init+0x43c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d008      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_DMA_Init+0x440>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <HAL_DMA_Init+0x3e6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_DMA_Init+0x444>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_DMA_Init+0x448>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d01d      	beq.n	8004e64 <HAL_DMA_Init+0x44c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b80      	cmp	r3, #128	; 0x80
 8004e2e:	d102      	bne.n	8004e36 <HAL_DMA_Init+0x41e>
 8004e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e34:	e017      	b.n	8004e66 <HAL_DMA_Init+0x44e>
 8004e36:	2300      	movs	r3, #0
 8004e38:	e015      	b.n	8004e66 <HAL_DMA_Init+0x44e>
 8004e3a:	bf00      	nop
 8004e3c:	fe10803f 	.word	0xfe10803f
 8004e40:	58025408 	.word	0x58025408
 8004e44:	5802541c 	.word	0x5802541c
 8004e48:	58025430 	.word	0x58025430
 8004e4c:	58025444 	.word	0x58025444
 8004e50:	58025458 	.word	0x58025458
 8004e54:	5802546c 	.word	0x5802546c
 8004e58:	58025480 	.word	0x58025480
 8004e5c:	58025494 	.word	0x58025494
 8004e60:	fffe000f 	.word	0xfffe000f
 8004e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68d2      	ldr	r2, [r2, #12]
 8004e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4b6e      	ldr	r3, [pc, #440]	; (8005064 <HAL_DMA_Init+0x64c>)
 8004eac:	4413      	add	r3, r2
 8004eae:	4a6e      	ldr	r2, [pc, #440]	; (8005068 <HAL_DMA_Init+0x650>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	009a      	lsls	r2, r3, #2
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 fc45 	bl	800674c <DMA_CalcBaseAndBitshift>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2201      	movs	r2, #1
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e008      	b.n	8004eea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0b7      	b.n	800505a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5f      	ldr	r2, [pc, #380]	; (800506c <HAL_DMA_Init+0x654>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d072      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5d      	ldr	r2, [pc, #372]	; (8005070 <HAL_DMA_Init+0x658>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d06d      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5c      	ldr	r2, [pc, #368]	; (8005074 <HAL_DMA_Init+0x65c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d068      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a5a      	ldr	r2, [pc, #360]	; (8005078 <HAL_DMA_Init+0x660>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d063      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a59      	ldr	r2, [pc, #356]	; (800507c <HAL_DMA_Init+0x664>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d05e      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a57      	ldr	r2, [pc, #348]	; (8005080 <HAL_DMA_Init+0x668>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d059      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a56      	ldr	r2, [pc, #344]	; (8005084 <HAL_DMA_Init+0x66c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d054      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a54      	ldr	r2, [pc, #336]	; (8005088 <HAL_DMA_Init+0x670>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04f      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a53      	ldr	r2, [pc, #332]	; (800508c <HAL_DMA_Init+0x674>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d04a      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a51      	ldr	r2, [pc, #324]	; (8005090 <HAL_DMA_Init+0x678>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d045      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_DMA_Init+0x67c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d040      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a4e      	ldr	r2, [pc, #312]	; (8005098 <HAL_DMA_Init+0x680>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d03b      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4d      	ldr	r2, [pc, #308]	; (800509c <HAL_DMA_Init+0x684>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d036      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_DMA_Init+0x688>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d031      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4a      	ldr	r2, [pc, #296]	; (80050a4 <HAL_DMA_Init+0x68c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d02c      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a48      	ldr	r2, [pc, #288]	; (80050a8 <HAL_DMA_Init+0x690>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d027      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a47      	ldr	r2, [pc, #284]	; (80050ac <HAL_DMA_Init+0x694>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d022      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a45      	ldr	r2, [pc, #276]	; (80050b0 <HAL_DMA_Init+0x698>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01d      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a44      	ldr	r2, [pc, #272]	; (80050b4 <HAL_DMA_Init+0x69c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a42      	ldr	r2, [pc, #264]	; (80050b8 <HAL_DMA_Init+0x6a0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a41      	ldr	r2, [pc, #260]	; (80050bc <HAL_DMA_Init+0x6a4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_DMA_Init+0x6a8>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a3e      	ldr	r2, [pc, #248]	; (80050c4 <HAL_DMA_Init+0x6ac>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_DMA_Init+0x5c2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	; (80050c8 <HAL_DMA_Init+0x6b0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_Init+0x5c6>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_DMA_Init+0x5c8>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d032      	beq.n	800504a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 fcdf 	bl	80069a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d102      	bne.n	8004ff8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800500c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d010      	beq.n	8005038 <HAL_DMA_Init+0x620>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d80c      	bhi.n	8005038 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f001 fd5c 	bl	8006adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e008      	b.n	800504a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	a7fdabf8 	.word	0xa7fdabf8
 8005068:	cccccccd 	.word	0xcccccccd
 800506c:	40020010 	.word	0x40020010
 8005070:	40020028 	.word	0x40020028
 8005074:	40020040 	.word	0x40020040
 8005078:	40020058 	.word	0x40020058
 800507c:	40020070 	.word	0x40020070
 8005080:	40020088 	.word	0x40020088
 8005084:	400200a0 	.word	0x400200a0
 8005088:	400200b8 	.word	0x400200b8
 800508c:	40020410 	.word	0x40020410
 8005090:	40020428 	.word	0x40020428
 8005094:	40020440 	.word	0x40020440
 8005098:	40020458 	.word	0x40020458
 800509c:	40020470 	.word	0x40020470
 80050a0:	40020488 	.word	0x40020488
 80050a4:	400204a0 	.word	0x400204a0
 80050a8:	400204b8 	.word	0x400204b8
 80050ac:	58025408 	.word	0x58025408
 80050b0:	5802541c 	.word	0x5802541c
 80050b4:	58025430 	.word	0x58025430
 80050b8:	58025444 	.word	0x58025444
 80050bc:	58025458 	.word	0x58025458
 80050c0:	5802546c 	.word	0x5802546c
 80050c4:	58025480 	.word	0x58025480
 80050c8:	58025494 	.word	0x58025494

080050cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e226      	b.n	8005536 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Start_IT+0x2a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e21f      	b.n	8005536 <HAL_DMA_Start_IT+0x46a>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 820a 	bne.w	8005520 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a68      	ldr	r2, [pc, #416]	; (80052c0 <HAL_DMA_Start_IT+0x1f4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a66      	ldr	r2, [pc, #408]	; (80052c4 <HAL_DMA_Start_IT+0x1f8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a65      	ldr	r2, [pc, #404]	; (80052c8 <HAL_DMA_Start_IT+0x1fc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a63      	ldr	r2, [pc, #396]	; (80052cc <HAL_DMA_Start_IT+0x200>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a62      	ldr	r2, [pc, #392]	; (80052d0 <HAL_DMA_Start_IT+0x204>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a60      	ldr	r2, [pc, #384]	; (80052d4 <HAL_DMA_Start_IT+0x208>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5f      	ldr	r2, [pc, #380]	; (80052d8 <HAL_DMA_Start_IT+0x20c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5d      	ldr	r2, [pc, #372]	; (80052dc <HAL_DMA_Start_IT+0x210>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a5c      	ldr	r2, [pc, #368]	; (80052e0 <HAL_DMA_Start_IT+0x214>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a5a      	ldr	r2, [pc, #360]	; (80052e4 <HAL_DMA_Start_IT+0x218>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a59      	ldr	r2, [pc, #356]	; (80052e8 <HAL_DMA_Start_IT+0x21c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a57      	ldr	r2, [pc, #348]	; (80052ec <HAL_DMA_Start_IT+0x220>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a56      	ldr	r2, [pc, #344]	; (80052f0 <HAL_DMA_Start_IT+0x224>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a54      	ldr	r2, [pc, #336]	; (80052f4 <HAL_DMA_Start_IT+0x228>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a53      	ldr	r2, [pc, #332]	; (80052f8 <HAL_DMA_Start_IT+0x22c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_DMA_Start_IT+0xee>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a51      	ldr	r2, [pc, #324]	; (80052fc <HAL_DMA_Start_IT+0x230>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d108      	bne.n	80051cc <HAL_DMA_Start_IT+0x100>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e007      	b.n	80051dc <HAL_DMA_Start_IT+0x110>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 f906 	bl	80063f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a34      	ldr	r2, [pc, #208]	; (80052c0 <HAL_DMA_Start_IT+0x1f4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d04a      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <HAL_DMA_Start_IT+0x1f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d045      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <HAL_DMA_Start_IT+0x1fc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d040      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_DMA_Start_IT+0x200>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d03b      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2e      	ldr	r2, [pc, #184]	; (80052d0 <HAL_DMA_Start_IT+0x204>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d036      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_DMA_Start_IT+0x208>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d031      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <HAL_DMA_Start_IT+0x20c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d02c      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <HAL_DMA_Start_IT+0x210>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d027      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_DMA_Start_IT+0x214>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d022      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <HAL_DMA_Start_IT+0x218>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d01d      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_DMA_Start_IT+0x21c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d018      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_DMA_Start_IT+0x220>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_DMA_Start_IT+0x224>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_DMA_Start_IT+0x228>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <HAL_DMA_Start_IT+0x22c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_DMA_Start_IT+0x1bc>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_DMA_Start_IT+0x230>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_DMA_Start_IT+0x1c0>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_DMA_Start_IT+0x1c2>
 800528c:	2300      	movs	r3, #0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d036      	beq.n	8005300 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 021e 	bic.w	r2, r3, #30
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0216 	orr.w	r2, r2, #22
 80052a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d03e      	beq.n	800532c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0208 	orr.w	r2, r2, #8
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e035      	b.n	800532c <HAL_DMA_Start_IT+0x260>
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 020e 	bic.w	r2, r3, #14
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 020a 	orr.w	r2, r2, #10
 8005312:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0204 	orr.w	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a83      	ldr	r2, [pc, #524]	; (8005540 <HAL_DMA_Start_IT+0x474>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d072      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a82      	ldr	r2, [pc, #520]	; (8005544 <HAL_DMA_Start_IT+0x478>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d06d      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a80      	ldr	r2, [pc, #512]	; (8005548 <HAL_DMA_Start_IT+0x47c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d068      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7f      	ldr	r2, [pc, #508]	; (800554c <HAL_DMA_Start_IT+0x480>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d063      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a7d      	ldr	r2, [pc, #500]	; (8005550 <HAL_DMA_Start_IT+0x484>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d05e      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a7c      	ldr	r2, [pc, #496]	; (8005554 <HAL_DMA_Start_IT+0x488>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d059      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a7a      	ldr	r2, [pc, #488]	; (8005558 <HAL_DMA_Start_IT+0x48c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d054      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a79      	ldr	r2, [pc, #484]	; (800555c <HAL_DMA_Start_IT+0x490>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d04f      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a77      	ldr	r2, [pc, #476]	; (8005560 <HAL_DMA_Start_IT+0x494>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d04a      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a76      	ldr	r2, [pc, #472]	; (8005564 <HAL_DMA_Start_IT+0x498>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d045      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a74      	ldr	r2, [pc, #464]	; (8005568 <HAL_DMA_Start_IT+0x49c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d040      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a73      	ldr	r2, [pc, #460]	; (800556c <HAL_DMA_Start_IT+0x4a0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d03b      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a71      	ldr	r2, [pc, #452]	; (8005570 <HAL_DMA_Start_IT+0x4a4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d036      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_DMA_Start_IT+0x4a8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d031      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_DMA_Start_IT+0x4ac>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d02c      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6d      	ldr	r2, [pc, #436]	; (800557c <HAL_DMA_Start_IT+0x4b0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d027      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a6b      	ldr	r2, [pc, #428]	; (8005580 <HAL_DMA_Start_IT+0x4b4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d022      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6a      	ldr	r2, [pc, #424]	; (8005584 <HAL_DMA_Start_IT+0x4b8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01d      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_DMA_Start_IT+0x4bc>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d018      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a67      	ldr	r2, [pc, #412]	; (800558c <HAL_DMA_Start_IT+0x4c0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_DMA_Start_IT+0x4c4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00e      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a64      	ldr	r2, [pc, #400]	; (8005594 <HAL_DMA_Start_IT+0x4c8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d009      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a62      	ldr	r2, [pc, #392]	; (8005598 <HAL_DMA_Start_IT+0x4cc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_DMA_Start_IT+0x350>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_DMA_Start_IT+0x4d0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Start_IT+0x354>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_DMA_Start_IT+0x356>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a37      	ldr	r2, [pc, #220]	; (8005540 <HAL_DMA_Start_IT+0x474>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04a      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_DMA_Start_IT+0x478>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d045      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <HAL_DMA_Start_IT+0x47c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d040      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_DMA_Start_IT+0x480>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d03b      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <HAL_DMA_Start_IT+0x484>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d036      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_DMA_Start_IT+0x488>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d031      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	; (8005558 <HAL_DMA_Start_IT+0x48c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02c      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	; (800555c <HAL_DMA_Start_IT+0x490>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d027      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_DMA_Start_IT+0x494>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <HAL_DMA_Start_IT+0x498>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a28      	ldr	r2, [pc, #160]	; (8005568 <HAL_DMA_Start_IT+0x49c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <HAL_DMA_Start_IT+0x4a0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <HAL_DMA_Start_IT+0x4a4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	; (8005574 <HAL_DMA_Start_IT+0x4a8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_DMA_Start_IT+0x4ac>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_DMA_Start_IT+0x430>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	; (800557c <HAL_DMA_Start_IT+0x4b0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d108      	bne.n	800550e <HAL_DMA_Start_IT+0x442>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e012      	b.n	8005534 <HAL_DMA_Start_IT+0x468>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	e009      	b.n	8005534 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40020010 	.word	0x40020010
 8005544:	40020028 	.word	0x40020028
 8005548:	40020040 	.word	0x40020040
 800554c:	40020058 	.word	0x40020058
 8005550:	40020070 	.word	0x40020070
 8005554:	40020088 	.word	0x40020088
 8005558:	400200a0 	.word	0x400200a0
 800555c:	400200b8 	.word	0x400200b8
 8005560:	40020410 	.word	0x40020410
 8005564:	40020428 	.word	0x40020428
 8005568:	40020440 	.word	0x40020440
 800556c:	40020458 	.word	0x40020458
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204a0 	.word	0x400204a0
 800557c:	400204b8 	.word	0x400204b8
 8005580:	58025408 	.word	0x58025408
 8005584:	5802541c 	.word	0x5802541c
 8005588:	58025430 	.word	0x58025430
 800558c:	58025444 	.word	0x58025444
 8005590:	58025458 	.word	0x58025458
 8005594:	5802546c 	.word	0x5802546c
 8005598:	58025480 	.word	0x58025480
 800559c:	58025494 	.word	0x58025494

080055a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055ac:	4b67      	ldr	r3, [pc, #412]	; (800574c <HAL_DMA_IRQHandler+0x1ac>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a67      	ldr	r2, [pc, #412]	; (8005750 <HAL_DMA_IRQHandler+0x1b0>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	0a9b      	lsrs	r3, r3, #10
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5f      	ldr	r2, [pc, #380]	; (8005754 <HAL_DMA_IRQHandler+0x1b4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <HAL_DMA_IRQHandler+0x1b8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a5c      	ldr	r2, [pc, #368]	; (800575c <HAL_DMA_IRQHandler+0x1bc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a5a      	ldr	r2, [pc, #360]	; (8005760 <HAL_DMA_IRQHandler+0x1c0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a59      	ldr	r2, [pc, #356]	; (8005764 <HAL_DMA_IRQHandler+0x1c4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a57      	ldr	r2, [pc, #348]	; (8005768 <HAL_DMA_IRQHandler+0x1c8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a56      	ldr	r2, [pc, #344]	; (800576c <HAL_DMA_IRQHandler+0x1cc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a54      	ldr	r2, [pc, #336]	; (8005770 <HAL_DMA_IRQHandler+0x1d0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a53      	ldr	r2, [pc, #332]	; (8005774 <HAL_DMA_IRQHandler+0x1d4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_DMA_IRQHandler+0x1d8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_DMA_IRQHandler+0x1dc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4e      	ldr	r2, [pc, #312]	; (8005780 <HAL_DMA_IRQHandler+0x1e0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a4d      	ldr	r2, [pc, #308]	; (8005784 <HAL_DMA_IRQHandler+0x1e4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <HAL_DMA_IRQHandler+0x1e8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a4a      	ldr	r2, [pc, #296]	; (800578c <HAL_DMA_IRQHandler+0x1ec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_IRQHandler+0xd2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_DMA_IRQHandler+0x1f0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <HAL_DMA_IRQHandler+0xd6>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_DMA_IRQHandler+0xd8>
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 842b 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2208      	movs	r2, #8
 8005688:	409a      	lsls	r2, r3
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80a2 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2e      	ldr	r2, [pc, #184]	; (8005754 <HAL_DMA_IRQHandler+0x1b4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d04a      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2d      	ldr	r2, [pc, #180]	; (8005758 <HAL_DMA_IRQHandler+0x1b8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d045      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	; (800575c <HAL_DMA_IRQHandler+0x1bc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d040      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <HAL_DMA_IRQHandler+0x1c0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d03b      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a28      	ldr	r2, [pc, #160]	; (8005764 <HAL_DMA_IRQHandler+0x1c4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d036      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a27      	ldr	r2, [pc, #156]	; (8005768 <HAL_DMA_IRQHandler+0x1c8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d031      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_DMA_IRQHandler+0x1cc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02c      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a24      	ldr	r2, [pc, #144]	; (8005770 <HAL_DMA_IRQHandler+0x1d0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d027      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a22      	ldr	r2, [pc, #136]	; (8005774 <HAL_DMA_IRQHandler+0x1d4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <HAL_DMA_IRQHandler+0x1d8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d01d      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_DMA_IRQHandler+0x1dc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_DMA_IRQHandler+0x1e0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_DMA_IRQHandler+0x1e4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_DMA_IRQHandler+0x1e8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_DMA_IRQHandler+0x1ec>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_DMA_IRQHandler+0x194>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_DMA_IRQHandler+0x1f0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d12f      	bne.n	8005794 <HAL_DMA_IRQHandler+0x1f4>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e02e      	b.n	80057a8 <HAL_DMA_IRQHandler+0x208>
 800574a:	bf00      	nop
 800574c:	24000000 	.word	0x24000000
 8005750:	1b4e81b5 	.word	0x1b4e81b5
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2208      	movs	r2, #8
 80057c6:	409a      	lsls	r2, r3
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d0:	f043 0201 	orr.w	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d06e      	beq.n	80058cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a69      	ldr	r2, [pc, #420]	; (8005998 <HAL_DMA_IRQHandler+0x3f8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d04a      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a67      	ldr	r2, [pc, #412]	; (800599c <HAL_DMA_IRQHandler+0x3fc>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d045      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a66      	ldr	r2, [pc, #408]	; (80059a0 <HAL_DMA_IRQHandler+0x400>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d040      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a64      	ldr	r2, [pc, #400]	; (80059a4 <HAL_DMA_IRQHandler+0x404>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d03b      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a63      	ldr	r2, [pc, #396]	; (80059a8 <HAL_DMA_IRQHandler+0x408>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d036      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a61      	ldr	r2, [pc, #388]	; (80059ac <HAL_DMA_IRQHandler+0x40c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d031      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a60      	ldr	r2, [pc, #384]	; (80059b0 <HAL_DMA_IRQHandler+0x410>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d02c      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5e      	ldr	r2, [pc, #376]	; (80059b4 <HAL_DMA_IRQHandler+0x414>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d027      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5d      	ldr	r2, [pc, #372]	; (80059b8 <HAL_DMA_IRQHandler+0x418>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5b      	ldr	r2, [pc, #364]	; (80059bc <HAL_DMA_IRQHandler+0x41c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a5a      	ldr	r2, [pc, #360]	; (80059c0 <HAL_DMA_IRQHandler+0x420>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a58      	ldr	r2, [pc, #352]	; (80059c4 <HAL_DMA_IRQHandler+0x424>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a57      	ldr	r2, [pc, #348]	; (80059c8 <HAL_DMA_IRQHandler+0x428>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a55      	ldr	r2, [pc, #340]	; (80059cc <HAL_DMA_IRQHandler+0x42c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a54      	ldr	r2, [pc, #336]	; (80059d0 <HAL_DMA_IRQHandler+0x430>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_DMA_IRQHandler+0x2ee>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a52      	ldr	r2, [pc, #328]	; (80059d4 <HAL_DMA_IRQHandler+0x434>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10a      	bne.n	80058a4 <HAL_DMA_IRQHandler+0x304>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e003      	b.n	80058ac <HAL_DMA_IRQHandler+0x30c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0202 	orr.w	r2, r3, #2
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2204      	movs	r2, #4
 80058d6:	409a      	lsls	r2, r3
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 808f 	beq.w	8005a00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2c      	ldr	r2, [pc, #176]	; (8005998 <HAL_DMA_IRQHandler+0x3f8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d04a      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2a      	ldr	r2, [pc, #168]	; (800599c <HAL_DMA_IRQHandler+0x3fc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d045      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a29      	ldr	r2, [pc, #164]	; (80059a0 <HAL_DMA_IRQHandler+0x400>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d040      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <HAL_DMA_IRQHandler+0x404>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d03b      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <HAL_DMA_IRQHandler+0x408>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d036      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a24      	ldr	r2, [pc, #144]	; (80059ac <HAL_DMA_IRQHandler+0x40c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d031      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a23      	ldr	r2, [pc, #140]	; (80059b0 <HAL_DMA_IRQHandler+0x410>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02c      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_DMA_IRQHandler+0x414>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d027      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <HAL_DMA_IRQHandler+0x418>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_DMA_IRQHandler+0x41c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01d      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_DMA_IRQHandler+0x420>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_DMA_IRQHandler+0x424>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d013      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_DMA_IRQHandler+0x428>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_DMA_IRQHandler+0x42c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_DMA_IRQHandler+0x430>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_DMA_IRQHandler+0x3e2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <HAL_DMA_IRQHandler+0x434>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d12a      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x438>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf14      	ite	ne
 8005990:	2301      	movne	r3, #1
 8005992:	2300      	moveq	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	e023      	b.n	80059e0 <HAL_DMA_IRQHandler+0x440>
 8005998:	40020010 	.word	0x40020010
 800599c:	40020028 	.word	0x40020028
 80059a0:	40020040 	.word	0x40020040
 80059a4:	40020058 	.word	0x40020058
 80059a8:	40020070 	.word	0x40020070
 80059ac:	40020088 	.word	0x40020088
 80059b0:	400200a0 	.word	0x400200a0
 80059b4:	400200b8 	.word	0x400200b8
 80059b8:	40020410 	.word	0x40020410
 80059bc:	40020428 	.word	0x40020428
 80059c0:	40020440 	.word	0x40020440
 80059c4:	40020458 	.word	0x40020458
 80059c8:	40020470 	.word	0x40020470
 80059cc:	40020488 	.word	0x40020488
 80059d0:	400204a0 	.word	0x400204a0
 80059d4:	400204b8 	.word	0x400204b8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2204      	movs	r2, #4
 80059ee:	409a      	lsls	r2, r3
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f8:	f043 0204 	orr.w	r2, r3, #4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2210      	movs	r2, #16
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a6 	beq.w	8005b62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a85      	ldr	r2, [pc, #532]	; (8005c30 <HAL_DMA_IRQHandler+0x690>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d04a      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a83      	ldr	r2, [pc, #524]	; (8005c34 <HAL_DMA_IRQHandler+0x694>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d045      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a82      	ldr	r2, [pc, #520]	; (8005c38 <HAL_DMA_IRQHandler+0x698>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d040      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a80      	ldr	r2, [pc, #512]	; (8005c3c <HAL_DMA_IRQHandler+0x69c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d03b      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a7f      	ldr	r2, [pc, #508]	; (8005c40 <HAL_DMA_IRQHandler+0x6a0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d036      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_DMA_IRQHandler+0x6a4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d031      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7c      	ldr	r2, [pc, #496]	; (8005c48 <HAL_DMA_IRQHandler+0x6a8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d02c      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a7a      	ldr	r2, [pc, #488]	; (8005c4c <HAL_DMA_IRQHandler+0x6ac>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d027      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a79      	ldr	r2, [pc, #484]	; (8005c50 <HAL_DMA_IRQHandler+0x6b0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a77      	ldr	r2, [pc, #476]	; (8005c54 <HAL_DMA_IRQHandler+0x6b4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01d      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a76      	ldr	r2, [pc, #472]	; (8005c58 <HAL_DMA_IRQHandler+0x6b8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d018      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a74      	ldr	r2, [pc, #464]	; (8005c5c <HAL_DMA_IRQHandler+0x6bc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <HAL_DMA_IRQHandler+0x6c0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00e      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a71      	ldr	r2, [pc, #452]	; (8005c64 <HAL_DMA_IRQHandler+0x6c4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a70      	ldr	r2, [pc, #448]	; (8005c68 <HAL_DMA_IRQHandler+0x6c8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x516>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_DMA_IRQHandler+0x6cc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10a      	bne.n	8005acc <HAL_DMA_IRQHandler+0x52c>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e009      	b.n	8005ae0 <HAL_DMA_IRQHandler+0x540>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bf14      	ite	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	2300      	moveq	r3, #0
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d03e      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2210      	movs	r2, #16
 8005aee:	409a      	lsls	r2, r3
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d108      	bne.n	8005b22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d024      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
 8005b20:	e01f      	b.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01b      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
 8005b32:	e016      	b.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0208 	bic.w	r2, r2, #8
 8005b50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	409a      	lsls	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8110 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2c      	ldr	r2, [pc, #176]	; (8005c30 <HAL_DMA_IRQHandler+0x690>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d04a      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2b      	ldr	r2, [pc, #172]	; (8005c34 <HAL_DMA_IRQHandler+0x694>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d045      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <HAL_DMA_IRQHandler+0x698>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d040      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <HAL_DMA_IRQHandler+0x69c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d03b      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <HAL_DMA_IRQHandler+0x6a0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d036      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <HAL_DMA_IRQHandler+0x6a4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d031      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <HAL_DMA_IRQHandler+0x6a8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d02c      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a22      	ldr	r2, [pc, #136]	; (8005c4c <HAL_DMA_IRQHandler+0x6ac>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d027      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <HAL_DMA_IRQHandler+0x6b0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d022      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <HAL_DMA_IRQHandler+0x6b4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d01d      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <HAL_DMA_IRQHandler+0x6b8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <HAL_DMA_IRQHandler+0x6bc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d013      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_DMA_IRQHandler+0x6c0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_DMA_IRQHandler+0x6c4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <HAL_DMA_IRQHandler+0x6c8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_DMA_IRQHandler+0x678>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <HAL_DMA_IRQHandler+0x6cc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d12b      	bne.n	8005c70 <HAL_DMA_IRQHandler+0x6d0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e02a      	b.n	8005c84 <HAL_DMA_IRQHandler+0x6e4>
 8005c2e:	bf00      	nop
 8005c30:	40020010 	.word	0x40020010
 8005c34:	40020028 	.word	0x40020028
 8005c38:	40020040 	.word	0x40020040
 8005c3c:	40020058 	.word	0x40020058
 8005c40:	40020070 	.word	0x40020070
 8005c44:	40020088 	.word	0x40020088
 8005c48:	400200a0 	.word	0x400200a0
 8005c4c:	400200b8 	.word	0x400200b8
 8005c50:	40020410 	.word	0x40020410
 8005c54:	40020428 	.word	0x40020428
 8005c58:	40020440 	.word	0x40020440
 8005c5c:	40020458 	.word	0x40020458
 8005c60:	40020470 	.word	0x40020470
 8005c64:	40020488 	.word	0x40020488
 8005c68:	400204a0 	.word	0x400204a0
 8005c6c:	400204b8 	.word	0x400204b8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bf14      	ite	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	2300      	moveq	r3, #0
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 8087 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2220      	movs	r2, #32
 8005c94:	409a      	lsls	r2, r3
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d139      	bne.n	8005d1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0216 	bic.w	r2, r2, #22
 8005cb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cc4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <HAL_DMA_IRQHandler+0x736>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0208 	bic.w	r2, r2, #8
 8005ce4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	223f      	movs	r2, #63	; 0x3f
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 834a 	beq.w	80063a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
          }
          return;
 8005d18:	e344      	b.n	80063a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d018      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d108      	bne.n	8005d48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02c      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	e027      	b.n	8005d98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d023      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
 8005d58:	e01e      	b.n	8005d98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10f      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0210 	bic.w	r2, r2, #16
 8005d76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8306 	beq.w	80063ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8088 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a7a      	ldr	r2, [pc, #488]	; (8005fa8 <HAL_DMA_IRQHandler+0xa08>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04a      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a79      	ldr	r2, [pc, #484]	; (8005fac <HAL_DMA_IRQHandler+0xa0c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d045      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a77      	ldr	r2, [pc, #476]	; (8005fb0 <HAL_DMA_IRQHandler+0xa10>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d040      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a76      	ldr	r2, [pc, #472]	; (8005fb4 <HAL_DMA_IRQHandler+0xa14>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a74      	ldr	r2, [pc, #464]	; (8005fb8 <HAL_DMA_IRQHandler+0xa18>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d036      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a73      	ldr	r2, [pc, #460]	; (8005fbc <HAL_DMA_IRQHandler+0xa1c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a71      	ldr	r2, [pc, #452]	; (8005fc0 <HAL_DMA_IRQHandler+0xa20>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a70      	ldr	r2, [pc, #448]	; (8005fc4 <HAL_DMA_IRQHandler+0xa24>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d027      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a6e      	ldr	r2, [pc, #440]	; (8005fc8 <HAL_DMA_IRQHandler+0xa28>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a6d      	ldr	r2, [pc, #436]	; (8005fcc <HAL_DMA_IRQHandler+0xa2c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a6b      	ldr	r2, [pc, #428]	; (8005fd0 <HAL_DMA_IRQHandler+0xa30>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a6a      	ldr	r2, [pc, #424]	; (8005fd4 <HAL_DMA_IRQHandler+0xa34>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_DMA_IRQHandler+0xa38>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a67      	ldr	r2, [pc, #412]	; (8005fdc <HAL_DMA_IRQHandler+0xa3c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a65      	ldr	r2, [pc, #404]	; (8005fe0 <HAL_DMA_IRQHandler+0xa40>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x8b8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a64      	ldr	r2, [pc, #400]	; (8005fe4 <HAL_DMA_IRQHandler+0xa44>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d108      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x8ca>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e007      	b.n	8005e7a <HAL_DMA_IRQHandler+0x8da>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d307      	bcc.n	8005e96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f2      	bne.n	8005e7a <HAL_DMA_IRQHandler+0x8da>
 8005e94:	e000      	b.n	8005e98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005e96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005eae:	e003      	b.n	8005eb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8272 	beq.w	80063ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e26c      	b.n	80063ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a43      	ldr	r2, [pc, #268]	; (8005fe8 <HAL_DMA_IRQHandler+0xa48>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d022      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a42      	ldr	r2, [pc, #264]	; (8005fec <HAL_DMA_IRQHandler+0xa4c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d01d      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a40      	ldr	r2, [pc, #256]	; (8005ff0 <HAL_DMA_IRQHandler+0xa50>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a3f      	ldr	r2, [pc, #252]	; (8005ff4 <HAL_DMA_IRQHandler+0xa54>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a3d      	ldr	r2, [pc, #244]	; (8005ff8 <HAL_DMA_IRQHandler+0xa58>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3c      	ldr	r2, [pc, #240]	; (8005ffc <HAL_DMA_IRQHandler+0xa5c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a3a      	ldr	r2, [pc, #232]	; (8006000 <HAL_DMA_IRQHandler+0xa60>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x984>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a39      	ldr	r2, [pc, #228]	; (8006004 <HAL_DMA_IRQHandler+0xa64>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d101      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x988>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_DMA_IRQHandler+0x98a>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 823f 	beq.w	80063ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2204      	movs	r2, #4
 8005f42:	409a      	lsls	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80cd 	beq.w	80060e8 <HAL_DMA_IRQHandler+0xb48>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80c7 	beq.w	80060e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2204      	movs	r2, #4
 8005f64:	409a      	lsls	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d049      	beq.n	8006008 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8210 	beq.w	80063a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f90:	e20a      	b.n	80063a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8206 	beq.w	80063a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa4:	e200      	b.n	80063a8 <HAL_DMA_IRQHandler+0xe08>
 8005fa6:	bf00      	nop
 8005fa8:	40020010 	.word	0x40020010
 8005fac:	40020028 	.word	0x40020028
 8005fb0:	40020040 	.word	0x40020040
 8005fb4:	40020058 	.word	0x40020058
 8005fb8:	40020070 	.word	0x40020070
 8005fbc:	40020088 	.word	0x40020088
 8005fc0:	400200a0 	.word	0x400200a0
 8005fc4:	400200b8 	.word	0x400200b8
 8005fc8:	40020410 	.word	0x40020410
 8005fcc:	40020428 	.word	0x40020428
 8005fd0:	40020440 	.word	0x40020440
 8005fd4:	40020458 	.word	0x40020458
 8005fd8:	40020470 	.word	0x40020470
 8005fdc:	40020488 	.word	0x40020488
 8005fe0:	400204a0 	.word	0x400204a0
 8005fe4:	400204b8 	.word	0x400204b8
 8005fe8:	58025408 	.word	0x58025408
 8005fec:	5802541c 	.word	0x5802541c
 8005ff0:	58025430 	.word	0x58025430
 8005ff4:	58025444 	.word	0x58025444
 8005ff8:	58025458 	.word	0x58025458
 8005ffc:	5802546c 	.word	0x5802546c
 8006000:	58025480 	.word	0x58025480
 8006004:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d160      	bne.n	80060d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a7f      	ldr	r2, [pc, #508]	; (8006214 <HAL_DMA_IRQHandler+0xc74>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d04a      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7d      	ldr	r2, [pc, #500]	; (8006218 <HAL_DMA_IRQHandler+0xc78>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d045      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7c      	ldr	r2, [pc, #496]	; (800621c <HAL_DMA_IRQHandler+0xc7c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d040      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7a      	ldr	r2, [pc, #488]	; (8006220 <HAL_DMA_IRQHandler+0xc80>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d03b      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a79      	ldr	r2, [pc, #484]	; (8006224 <HAL_DMA_IRQHandler+0xc84>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d036      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a77      	ldr	r2, [pc, #476]	; (8006228 <HAL_DMA_IRQHandler+0xc88>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d031      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a76      	ldr	r2, [pc, #472]	; (800622c <HAL_DMA_IRQHandler+0xc8c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d02c      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a74      	ldr	r2, [pc, #464]	; (8006230 <HAL_DMA_IRQHandler+0xc90>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d027      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a73      	ldr	r2, [pc, #460]	; (8006234 <HAL_DMA_IRQHandler+0xc94>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a71      	ldr	r2, [pc, #452]	; (8006238 <HAL_DMA_IRQHandler+0xc98>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a70      	ldr	r2, [pc, #448]	; (800623c <HAL_DMA_IRQHandler+0xc9c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a6e      	ldr	r2, [pc, #440]	; (8006240 <HAL_DMA_IRQHandler+0xca0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a6d      	ldr	r2, [pc, #436]	; (8006244 <HAL_DMA_IRQHandler+0xca4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6b      	ldr	r2, [pc, #428]	; (8006248 <HAL_DMA_IRQHandler+0xca8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6a      	ldr	r2, [pc, #424]	; (800624c <HAL_DMA_IRQHandler+0xcac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <HAL_DMA_IRQHandler+0xb12>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a68      	ldr	r2, [pc, #416]	; (8006250 <HAL_DMA_IRQHandler+0xcb0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d108      	bne.n	80060c4 <HAL_DMA_IRQHandler+0xb24>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0208 	bic.w	r2, r2, #8
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e007      	b.n	80060d4 <HAL_DMA_IRQHandler+0xb34>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0204 	bic.w	r2, r2, #4
 80060d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8165 	beq.w	80063a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e6:	e15f      	b.n	80063a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	2202      	movs	r2, #2
 80060f2:	409a      	lsls	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80c5 	beq.w	8006288 <HAL_DMA_IRQHandler+0xce8>
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80bf 	beq.w	8006288 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2202      	movs	r2, #2
 8006114:	409a      	lsls	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d018      	beq.n	8006156 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 813a 	beq.w	80063ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006140:	e134      	b.n	80063ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8130 	beq.w	80063ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006154:	e12a      	b.n	80063ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8089 	bne.w	8006274 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <HAL_DMA_IRQHandler+0xc74>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04a      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a29      	ldr	r2, [pc, #164]	; (8006218 <HAL_DMA_IRQHandler+0xc78>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d045      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a28      	ldr	r2, [pc, #160]	; (800621c <HAL_DMA_IRQHandler+0xc7c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d040      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a26      	ldr	r2, [pc, #152]	; (8006220 <HAL_DMA_IRQHandler+0xc80>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d03b      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a25      	ldr	r2, [pc, #148]	; (8006224 <HAL_DMA_IRQHandler+0xc84>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d036      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <HAL_DMA_IRQHandler+0xc88>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d031      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_DMA_IRQHandler+0xc8c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d02c      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a20      	ldr	r2, [pc, #128]	; (8006230 <HAL_DMA_IRQHandler+0xc90>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d027      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <HAL_DMA_IRQHandler+0xc94>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <HAL_DMA_IRQHandler+0xc98>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01d      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	; (800623c <HAL_DMA_IRQHandler+0xc9c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_DMA_IRQHandler+0xca0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_DMA_IRQHandler+0xca4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_DMA_IRQHandler+0xca8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <HAL_DMA_IRQHandler+0xcac>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_DMA_IRQHandler+0xc62>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a14      	ldr	r2, [pc, #80]	; (8006250 <HAL_DMA_IRQHandler+0xcb0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d128      	bne.n	8006254 <HAL_DMA_IRQHandler+0xcb4>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0214 	bic.w	r2, r2, #20
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e027      	b.n	8006264 <HAL_DMA_IRQHandler+0xcc4>
 8006214:	40020010 	.word	0x40020010
 8006218:	40020028 	.word	0x40020028
 800621c:	40020040 	.word	0x40020040
 8006220:	40020058 	.word	0x40020058
 8006224:	40020070 	.word	0x40020070
 8006228:	40020088 	.word	0x40020088
 800622c:	400200a0 	.word	0x400200a0
 8006230:	400200b8 	.word	0x400200b8
 8006234:	40020410 	.word	0x40020410
 8006238:	40020428 	.word	0x40020428
 800623c:	40020440 	.word	0x40020440
 8006240:	40020458 	.word	0x40020458
 8006244:	40020470 	.word	0x40020470
 8006248:	40020488 	.word	0x40020488
 800624c:	400204a0 	.word	0x400204a0
 8006250:	400204b8 	.word	0x400204b8
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 020a 	bic.w	r2, r2, #10
 8006262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8097 	beq.w	80063ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006286:	e091      	b.n	80063ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2208      	movs	r2, #8
 8006292:	409a      	lsls	r2, r3
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8088 	beq.w	80063ae <HAL_DMA_IRQHandler+0xe0e>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8082 	beq.w	80063ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a41      	ldr	r2, [pc, #260]	; (80063b4 <HAL_DMA_IRQHandler+0xe14>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04a      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <HAL_DMA_IRQHandler+0xe18>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d045      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <HAL_DMA_IRQHandler+0xe1c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d040      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3c      	ldr	r2, [pc, #240]	; (80063c0 <HAL_DMA_IRQHandler+0xe20>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d03b      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a3b      	ldr	r2, [pc, #236]	; (80063c4 <HAL_DMA_IRQHandler+0xe24>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d036      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a39      	ldr	r2, [pc, #228]	; (80063c8 <HAL_DMA_IRQHandler+0xe28>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d031      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a38      	ldr	r2, [pc, #224]	; (80063cc <HAL_DMA_IRQHandler+0xe2c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d02c      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a36      	ldr	r2, [pc, #216]	; (80063d0 <HAL_DMA_IRQHandler+0xe30>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a35      	ldr	r2, [pc, #212]	; (80063d4 <HAL_DMA_IRQHandler+0xe34>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a33      	ldr	r2, [pc, #204]	; (80063d8 <HAL_DMA_IRQHandler+0xe38>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a32      	ldr	r2, [pc, #200]	; (80063dc <HAL_DMA_IRQHandler+0xe3c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <HAL_DMA_IRQHandler+0xe40>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2f      	ldr	r2, [pc, #188]	; (80063e4 <HAL_DMA_IRQHandler+0xe44>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2d      	ldr	r2, [pc, #180]	; (80063e8 <HAL_DMA_IRQHandler+0xe48>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2c      	ldr	r2, [pc, #176]	; (80063ec <HAL_DMA_IRQHandler+0xe4c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_DMA_IRQHandler+0xdaa>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <HAL_DMA_IRQHandler+0xe50>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d108      	bne.n	800635c <HAL_DMA_IRQHandler+0xdbc>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 021c 	bic.w	r2, r2, #28
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e007      	b.n	800636c <HAL_DMA_IRQHandler+0xdcc>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 020e 	bic.w	r2, r2, #14
 800636a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2201      	movs	r2, #1
 8006376:	409a      	lsls	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
 80063a2:	e004      	b.n	80063ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063a4:	bf00      	nop
 80063a6:	e002      	b.n	80063ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063a8:	bf00      	nop
 80063aa:	e000      	b.n	80063ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063ae:	3728      	adds	r7, #40	; 0x28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40020010 	.word	0x40020010
 80063b8:	40020028 	.word	0x40020028
 80063bc:	40020040 	.word	0x40020040
 80063c0:	40020058 	.word	0x40020058
 80063c4:	40020070 	.word	0x40020070
 80063c8:	40020088 	.word	0x40020088
 80063cc:	400200a0 	.word	0x400200a0
 80063d0:	400200b8 	.word	0x400200b8
 80063d4:	40020410 	.word	0x40020410
 80063d8:	40020428 	.word	0x40020428
 80063dc:	40020440 	.word	0x40020440
 80063e0:	40020458 	.word	0x40020458
 80063e4:	40020470 	.word	0x40020470
 80063e8:	40020488 	.word	0x40020488
 80063ec:	400204a0 	.word	0x400204a0
 80063f0:	400204b8 	.word	0x400204b8

080063f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7f      	ldr	r2, [pc, #508]	; (8006610 <DMA_SetConfig+0x21c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d072      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a7d      	ldr	r2, [pc, #500]	; (8006614 <DMA_SetConfig+0x220>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d06d      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a7c      	ldr	r2, [pc, #496]	; (8006618 <DMA_SetConfig+0x224>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d068      	beq.n	80064fe <DMA_SetConfig+0x10a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a7a      	ldr	r2, [pc, #488]	; (800661c <DMA_SetConfig+0x228>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d063      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a79      	ldr	r2, [pc, #484]	; (8006620 <DMA_SetConfig+0x22c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d05e      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a77      	ldr	r2, [pc, #476]	; (8006624 <DMA_SetConfig+0x230>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d059      	beq.n	80064fe <DMA_SetConfig+0x10a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a76      	ldr	r2, [pc, #472]	; (8006628 <DMA_SetConfig+0x234>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d054      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a74      	ldr	r2, [pc, #464]	; (800662c <DMA_SetConfig+0x238>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d04f      	beq.n	80064fe <DMA_SetConfig+0x10a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a73      	ldr	r2, [pc, #460]	; (8006630 <DMA_SetConfig+0x23c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d04a      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a71      	ldr	r2, [pc, #452]	; (8006634 <DMA_SetConfig+0x240>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d045      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a70      	ldr	r2, [pc, #448]	; (8006638 <DMA_SetConfig+0x244>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d040      	beq.n	80064fe <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a6e      	ldr	r2, [pc, #440]	; (800663c <DMA_SetConfig+0x248>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d03b      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a6d      	ldr	r2, [pc, #436]	; (8006640 <DMA_SetConfig+0x24c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d036      	beq.n	80064fe <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a6b      	ldr	r2, [pc, #428]	; (8006644 <DMA_SetConfig+0x250>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d031      	beq.n	80064fe <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a6a      	ldr	r2, [pc, #424]	; (8006648 <DMA_SetConfig+0x254>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d02c      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a68      	ldr	r2, [pc, #416]	; (800664c <DMA_SetConfig+0x258>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d027      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a67      	ldr	r2, [pc, #412]	; (8006650 <DMA_SetConfig+0x25c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a65      	ldr	r2, [pc, #404]	; (8006654 <DMA_SetConfig+0x260>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a64      	ldr	r2, [pc, #400]	; (8006658 <DMA_SetConfig+0x264>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a62      	ldr	r2, [pc, #392]	; (800665c <DMA_SetConfig+0x268>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a61      	ldr	r2, [pc, #388]	; (8006660 <DMA_SetConfig+0x26c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a5f      	ldr	r2, [pc, #380]	; (8006664 <DMA_SetConfig+0x270>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a5e      	ldr	r2, [pc, #376]	; (8006668 <DMA_SetConfig+0x274>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <DMA_SetConfig+0x10a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a5c      	ldr	r2, [pc, #368]	; (800666c <DMA_SetConfig+0x278>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <DMA_SetConfig+0x10e>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <DMA_SetConfig+0x110>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006510:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006522:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a39      	ldr	r2, [pc, #228]	; (8006610 <DMA_SetConfig+0x21c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a38      	ldr	r2, [pc, #224]	; (8006614 <DMA_SetConfig+0x220>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a36      	ldr	r2, [pc, #216]	; (8006618 <DMA_SetConfig+0x224>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a35      	ldr	r2, [pc, #212]	; (800661c <DMA_SetConfig+0x228>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a33      	ldr	r2, [pc, #204]	; (8006620 <DMA_SetConfig+0x22c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a32      	ldr	r2, [pc, #200]	; (8006624 <DMA_SetConfig+0x230>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a30      	ldr	r2, [pc, #192]	; (8006628 <DMA_SetConfig+0x234>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2f      	ldr	r2, [pc, #188]	; (800662c <DMA_SetConfig+0x238>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <DMA_SetConfig+0x23c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2c      	ldr	r2, [pc, #176]	; (8006634 <DMA_SetConfig+0x240>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <DMA_SetConfig+0x244>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a29      	ldr	r2, [pc, #164]	; (800663c <DMA_SetConfig+0x248>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a27      	ldr	r2, [pc, #156]	; (8006640 <DMA_SetConfig+0x24c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a26      	ldr	r2, [pc, #152]	; (8006644 <DMA_SetConfig+0x250>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a24      	ldr	r2, [pc, #144]	; (8006648 <DMA_SetConfig+0x254>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <DMA_SetConfig+0x1d0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a23      	ldr	r2, [pc, #140]	; (800664c <DMA_SetConfig+0x258>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <DMA_SetConfig+0x1d4>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <DMA_SetConfig+0x1d6>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d059      	beq.n	8006682 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	223f      	movs	r2, #63	; 0x3f
 80065d8:	409a      	lsls	r2, r3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d138      	bne.n	8006670 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800660e:	e086      	b.n	800671e <DMA_SetConfig+0x32a>
 8006610:	40020010 	.word	0x40020010
 8006614:	40020028 	.word	0x40020028
 8006618:	40020040 	.word	0x40020040
 800661c:	40020058 	.word	0x40020058
 8006620:	40020070 	.word	0x40020070
 8006624:	40020088 	.word	0x40020088
 8006628:	400200a0 	.word	0x400200a0
 800662c:	400200b8 	.word	0x400200b8
 8006630:	40020410 	.word	0x40020410
 8006634:	40020428 	.word	0x40020428
 8006638:	40020440 	.word	0x40020440
 800663c:	40020458 	.word	0x40020458
 8006640:	40020470 	.word	0x40020470
 8006644:	40020488 	.word	0x40020488
 8006648:	400204a0 	.word	0x400204a0
 800664c:	400204b8 	.word	0x400204b8
 8006650:	58025408 	.word	0x58025408
 8006654:	5802541c 	.word	0x5802541c
 8006658:	58025430 	.word	0x58025430
 800665c:	58025444 	.word	0x58025444
 8006660:	58025458 	.word	0x58025458
 8006664:	5802546c 	.word	0x5802546c
 8006668:	58025480 	.word	0x58025480
 800666c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
}
 8006680:	e04d      	b.n	800671e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a29      	ldr	r2, [pc, #164]	; (800672c <DMA_SetConfig+0x338>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d022      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <DMA_SetConfig+0x33c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01d      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a26      	ldr	r2, [pc, #152]	; (8006734 <DMA_SetConfig+0x340>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d018      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a24      	ldr	r2, [pc, #144]	; (8006738 <DMA_SetConfig+0x344>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a23      	ldr	r2, [pc, #140]	; (800673c <DMA_SetConfig+0x348>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00e      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a21      	ldr	r2, [pc, #132]	; (8006740 <DMA_SetConfig+0x34c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d009      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <DMA_SetConfig+0x350>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d004      	beq.n	80066d2 <DMA_SetConfig+0x2de>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <DMA_SetConfig+0x354>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d101      	bne.n	80066d6 <DMA_SetConfig+0x2e2>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <DMA_SetConfig+0x2e4>
 80066d6:	2300      	movs	r3, #0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d020      	beq.n	800671e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	2201      	movs	r2, #1
 80066e6:	409a      	lsls	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b40      	cmp	r3, #64	; 0x40
 80066fa:	d108      	bne.n	800670e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	60da      	str	r2, [r3, #12]
}
 800670c:	e007      	b.n	800671e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	60da      	str	r2, [r3, #12]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	58025408 	.word	0x58025408
 8006730:	5802541c 	.word	0x5802541c
 8006734:	58025430 	.word	0x58025430
 8006738:	58025444 	.word	0x58025444
 800673c:	58025458 	.word	0x58025458
 8006740:	5802546c 	.word	0x5802546c
 8006744:	58025480 	.word	0x58025480
 8006748:	58025494 	.word	0x58025494

0800674c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a42      	ldr	r2, [pc, #264]	; (8006864 <DMA_CalcBaseAndBitshift+0x118>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d04a      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a41      	ldr	r2, [pc, #260]	; (8006868 <DMA_CalcBaseAndBitshift+0x11c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d045      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a3f      	ldr	r2, [pc, #252]	; (800686c <DMA_CalcBaseAndBitshift+0x120>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d040      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3e      	ldr	r2, [pc, #248]	; (8006870 <DMA_CalcBaseAndBitshift+0x124>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d03b      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <DMA_CalcBaseAndBitshift+0x128>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d036      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3b      	ldr	r2, [pc, #236]	; (8006878 <DMA_CalcBaseAndBitshift+0x12c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d031      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a39      	ldr	r2, [pc, #228]	; (800687c <DMA_CalcBaseAndBitshift+0x130>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d02c      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a38      	ldr	r2, [pc, #224]	; (8006880 <DMA_CalcBaseAndBitshift+0x134>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d027      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a36      	ldr	r2, [pc, #216]	; (8006884 <DMA_CalcBaseAndBitshift+0x138>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a35      	ldr	r2, [pc, #212]	; (8006888 <DMA_CalcBaseAndBitshift+0x13c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d01d      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a33      	ldr	r2, [pc, #204]	; (800688c <DMA_CalcBaseAndBitshift+0x140>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d018      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a32      	ldr	r2, [pc, #200]	; (8006890 <DMA_CalcBaseAndBitshift+0x144>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a30      	ldr	r2, [pc, #192]	; (8006894 <DMA_CalcBaseAndBitshift+0x148>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00e      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <DMA_CalcBaseAndBitshift+0x14c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d009      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2d      	ldr	r2, [pc, #180]	; (800689c <DMA_CalcBaseAndBitshift+0x150>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a2c      	ldr	r2, [pc, #176]	; (80068a0 <DMA_CalcBaseAndBitshift+0x154>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d101      	bne.n	80067f8 <DMA_CalcBaseAndBitshift+0xac>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <DMA_CalcBaseAndBitshift+0xae>
 80067f8:	2300      	movs	r3, #0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d024      	beq.n	8006848 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	3b10      	subs	r3, #16
 8006806:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <DMA_CalcBaseAndBitshift+0x158>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006818:	5cd3      	ldrb	r3, [r2, r3]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b03      	cmp	r3, #3
 8006824:	d908      	bls.n	8006838 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	4b1f      	ldr	r3, [pc, #124]	; (80068ac <DMA_CalcBaseAndBitshift+0x160>)
 800682e:	4013      	ands	r3, r2
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	659a      	str	r2, [r3, #88]	; 0x58
 8006836:	e00d      	b.n	8006854 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <DMA_CalcBaseAndBitshift+0x160>)
 8006840:	4013      	ands	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6593      	str	r3, [r2, #88]	; 0x58
 8006846:	e005      	b.n	8006854 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40020010 	.word	0x40020010
 8006868:	40020028 	.word	0x40020028
 800686c:	40020040 	.word	0x40020040
 8006870:	40020058 	.word	0x40020058
 8006874:	40020070 	.word	0x40020070
 8006878:	40020088 	.word	0x40020088
 800687c:	400200a0 	.word	0x400200a0
 8006880:	400200b8 	.word	0x400200b8
 8006884:	40020410 	.word	0x40020410
 8006888:	40020428 	.word	0x40020428
 800688c:	40020440 	.word	0x40020440
 8006890:	40020458 	.word	0x40020458
 8006894:	40020470 	.word	0x40020470
 8006898:	40020488 	.word	0x40020488
 800689c:	400204a0 	.word	0x400204a0
 80068a0:	400204b8 	.word	0x400204b8
 80068a4:	aaaaaaab 	.word	0xaaaaaaab
 80068a8:	0801a33c 	.word	0x0801a33c
 80068ac:	fffffc00 	.word	0xfffffc00

080068b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d120      	bne.n	8006906 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d858      	bhi.n	800697e <DMA_CheckFifoParam+0xce>
 80068cc:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <DMA_CheckFifoParam+0x24>)
 80068ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d2:	bf00      	nop
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	080068f7 	.word	0x080068f7
 80068dc:	080068e5 	.word	0x080068e5
 80068e0:	0800697f 	.word	0x0800697f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d048      	beq.n	8006982 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068f4:	e045      	b.n	8006982 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068fe:	d142      	bne.n	8006986 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006904:	e03f      	b.n	8006986 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690e:	d123      	bne.n	8006958 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	2b03      	cmp	r3, #3
 8006916:	d838      	bhi.n	800698a <DMA_CheckFifoParam+0xda>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <DMA_CheckFifoParam+0x70>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006931 	.word	0x08006931
 8006924:	08006937 	.word	0x08006937
 8006928:	08006931 	.word	0x08006931
 800692c:	08006949 	.word	0x08006949
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
        break;
 8006934:	e030      	b.n	8006998 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d025      	beq.n	800698e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006946:	e022      	b.n	800698e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006950:	d11f      	bne.n	8006992 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006956:	e01c      	b.n	8006992 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	2b02      	cmp	r3, #2
 800695e:	d902      	bls.n	8006966 <DMA_CheckFifoParam+0xb6>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d003      	beq.n	800696c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006964:	e018      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	73fb      	strb	r3, [r7, #15]
        break;
 800696a:	e015      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
    break;
 800697c:	e00b      	b.n	8006996 <DMA_CheckFifoParam+0xe6>
        break;
 800697e:	bf00      	nop
 8006980:	e00a      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        break;
 8006982:	bf00      	nop
 8006984:	e008      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        break;
 8006986:	bf00      	nop
 8006988:	e006      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        break;
 800698a:	bf00      	nop
 800698c:	e004      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        break;
 800698e:	bf00      	nop
 8006990:	e002      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
        break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <DMA_CheckFifoParam+0xe8>
    break;
 8006996:	bf00      	nop
    }
  }

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a38      	ldr	r2, [pc, #224]	; (8006a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a36      	ldr	r2, [pc, #216]	; (8006aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a35      	ldr	r2, [pc, #212]	; (8006aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a33      	ldr	r2, [pc, #204]	; (8006aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a32      	ldr	r2, [pc, #200]	; (8006aac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a30      	ldr	r2, [pc, #192]	; (8006ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2d      	ldr	r2, [pc, #180]	; (8006ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01a      	beq.n	8006a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	3b08      	subs	r3, #8
 8006a18:	4a28      	ldr	r2, [pc, #160]	; (8006abc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4b26      	ldr	r3, [pc, #152]	; (8006ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a24      	ldr	r2, [pc, #144]	; (8006ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a34:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f003 031f 	and.w	r3, r3, #31
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	409a      	lsls	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a44:	e024      	b.n	8006a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	3b10      	subs	r3, #16
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d806      	bhi.n	8006a6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d902      	bls.n	8006a6e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4b18      	ldr	r3, [pc, #96]	; (8006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a16      	ldr	r2, [pc, #88]	; (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a80:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	58025408 	.word	0x58025408
 8006aa0:	5802541c 	.word	0x5802541c
 8006aa4:	58025430 	.word	0x58025430
 8006aa8:	58025444 	.word	0x58025444
 8006aac:	58025458 	.word	0x58025458
 8006ab0:	5802546c 	.word	0x5802546c
 8006ab4:	58025480 	.word	0x58025480
 8006ab8:	58025494 	.word	0x58025494
 8006abc:	cccccccd 	.word	0xcccccccd
 8006ac0:	16009600 	.word	0x16009600
 8006ac4:	58025880 	.word	0x58025880
 8006ac8:	aaaaaaab 	.word	0xaaaaaaab
 8006acc:	400204b8 	.word	0x400204b8
 8006ad0:	4002040f 	.word	0x4002040f
 8006ad4:	10008200 	.word	0x10008200
 8006ad8:	40020880 	.word	0x40020880

08006adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04a      	beq.n	8006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d847      	bhi.n	8006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a25      	ldr	r2, [pc, #148]	; (8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d022      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a24      	ldr	r2, [pc, #144]	; (8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01d      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a22      	ldr	r2, [pc, #136]	; (8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d018      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d013      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d009      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d101      	bne.n	8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b64:	671a      	str	r2, [r3, #112]	; 0x70
 8006b66:	e009      	b.n	8006b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	2201      	movs	r2, #1
 8006b82:	409a      	lsls	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	58025408 	.word	0x58025408
 8006b98:	5802541c 	.word	0x5802541c
 8006b9c:	58025430 	.word	0x58025430
 8006ba0:	58025444 	.word	0x58025444
 8006ba4:	58025458 	.word	0x58025458
 8006ba8:	5802546c 	.word	0x5802546c
 8006bac:	58025480 	.word	0x58025480
 8006bb0:	58025494 	.word	0x58025494
 8006bb4:	1600963f 	.word	0x1600963f
 8006bb8:	58025940 	.word	0x58025940
 8006bbc:	1000823f 	.word	0x1000823f
 8006bc0:	40020940 	.word	0x40020940

08006bc4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b098      	sub	sp, #96	; 0x60
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006bcc:	4a84      	ldr	r2, [pc, #528]	; (8006de0 <HAL_FDCAN_Init+0x21c>)
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	224c      	movs	r2, #76	; 0x4c
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f00e ff98 	bl	8015b0c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e1c6      	b.n	8006f74 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a7e      	ldr	r2, [pc, #504]	; (8006de4 <HAL_FDCAN_Init+0x220>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d106      	bne.n	8006bfe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fa12 	bl	800203c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0210 	bic.w	r2, r2, #16
 8006c26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c28:	f7fc fa30 	bl	800308c <HAL_GetTick>
 8006c2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c2e:	e014      	b.n	8006c5a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c30:	f7fc fa2c 	bl	800308c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b0a      	cmp	r3, #10
 8006c3c:	d90d      	bls.n	8006c5a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c44:	f043 0201 	orr.w	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2203      	movs	r2, #3
 8006c52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e18c      	b.n	8006f74 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d0e3      	beq.n	8006c30 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c78:	f7fc fa08 	bl	800308c <HAL_GetTick>
 8006c7c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006c7e:	e014      	b.n	8006caa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c80:	f7fc fa04 	bl	800308c <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b0a      	cmp	r3, #10
 8006c8c:	d90d      	bls.n	8006caa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c94:	f043 0201 	orr.w	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e164      	b.n	8006f74 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0e3      	beq.n	8006c80 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0202 	orr.w	r2, r2, #2
 8006cc6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d108      	bne.n	8006ce2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cde:	619a      	str	r2, [r3, #24]
 8006ce0:	e007      	b.n	8006cf2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7c5b      	ldrb	r3, [r3, #17]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d108      	bne.n	8006d0c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d08:	619a      	str	r2, [r3, #24]
 8006d0a:	e007      	b.n	8006d1c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7c9b      	ldrb	r3, [r3, #18]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d108      	bne.n	8006d36 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d32:	619a      	str	r2, [r3, #24]
 8006d34:	e007      	b.n	8006d46 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699a      	ldr	r2, [r3, #24]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d44:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006d6a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0210 	bic.w	r2, r2, #16
 8006d7a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d108      	bne.n	8006d96 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0204 	orr.w	r2, r2, #4
 8006d92:	619a      	str	r2, [r3, #24]
 8006d94:	e030      	b.n	8006df8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d02c      	beq.n	8006df8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d020      	beq.n	8006de8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006db4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0210 	orr.w	r2, r2, #16
 8006dc4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d114      	bne.n	8006df8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0220 	orr.w	r2, r2, #32
 8006ddc:	619a      	str	r2, [r3, #24]
 8006dde:	e00b      	b.n	8006df8 <HAL_FDCAN_Init+0x234>
 8006de0:	0801a234 	.word	0x0801a234
 8006de4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0220 	orr.w	r2, r2, #32
 8006df6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e08:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e10:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e20:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e22:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2c:	d115      	bne.n	8006e5a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e3c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	3b01      	subs	r3, #1
 8006e44:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006e46:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006e56:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006e58:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e80:	4413      	add	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d011      	beq.n	8006eaa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006e8e:	f023 0107 	bic.w	r1, r3, #7
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3360      	adds	r3, #96	; 0x60
 8006e9a:	443b      	add	r3, r7
 8006e9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d011      	beq.n	8006ed6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006eba:	f023 0107 	bic.w	r1, r3, #7
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	3360      	adds	r3, #96	; 0x60
 8006ec6:	443b      	add	r3, r7
 8006ec8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d012      	beq.n	8006f04 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ee6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	3360      	adds	r3, #96	; 0x60
 8006ef2:	443b      	add	r3, r7
 8006ef4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ef8:	011a      	lsls	r2, r3, #4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006f14:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	3360      	adds	r3, #96	; 0x60
 8006f20:	443b      	add	r3, r7
 8006f22:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006f26:	021a      	lsls	r2, r3, #8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <HAL_FDCAN_Init+0x3b8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d107      	bne.n	8006f4c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f022 0203 	bic.w	r2, r2, #3
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f80b 	bl	8006f80 <FDCAN_CalcultateRamBlockAddresses>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006f70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3760      	adds	r7, #96	; 0x60
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	4000a000 	.word	0x4000a000

08006f80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006f96:	4ba7      	ldr	r3, [pc, #668]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0091      	lsls	r1, r2, #2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	041a      	lsls	r2, r3, #16
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	4413      	add	r3, r2
 8006fcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fd6:	4b97      	ldr	r3, [pc, #604]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	0091      	lsls	r1, r2, #2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff8:	041a      	lsls	r2, r3, #16
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007018:	4b86      	ldr	r3, [pc, #536]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800701a:	4013      	ands	r3, r2
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0091      	lsls	r1, r2, #2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	430b      	orrs	r3, r1
 8007026:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007032:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	041a      	lsls	r2, r3, #16
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	4413      	add	r3, r2
 8007056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007060:	4b74      	ldr	r3, [pc, #464]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007062:	4013      	ands	r3, r2
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	0091      	lsls	r1, r2, #2
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6812      	ldr	r2, [r2, #0]
 800706c:	430b      	orrs	r3, r1
 800706e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800707a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007082:	041a      	lsls	r2, r3, #16
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	4413      	add	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80070a8:	4b62      	ldr	r3, [pc, #392]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	0091      	lsls	r1, r2, #2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	430b      	orrs	r3, r1
 80070b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	4413      	add	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80070d4:	4b57      	ldr	r3, [pc, #348]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	0091      	lsls	r1, r2, #2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070ee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	041a      	lsls	r2, r3, #16
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	4413      	add	r3, r2
 800710c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007116:	4b47      	ldr	r3, [pc, #284]	; (8007234 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007118:	4013      	ands	r3, r2
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0091      	lsls	r1, r2, #2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	430b      	orrs	r3, r1
 8007124:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007130:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007138:	041a      	lsls	r2, r3, #16
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800714c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007154:	061a      	lsls	r2, r3, #24
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007164:	4b34      	ldr	r3, [pc, #208]	; (8007238 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007166:	4413      	add	r3, r2
 8007168:	009a      	lsls	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	441a      	add	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80071fa:	fb01 f303 	mul.w	r3, r1, r3
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d915      	bls.n	800725c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007230:	e006      	b.n	8007240 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007232:	bf00      	nop
 8007234:	ffff0003 	.word	0xffff0003
 8007238:	10002b00 	.word	0x10002b00
 800723c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2203      	movs	r2, #3
 8007254:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e010      	b.n	800727e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e005      	b.n	8007270 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3304      	adds	r3, #4
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	d3f3      	bcc.n	8007264 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop

0800728c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800729a:	4b86      	ldr	r3, [pc, #536]	; (80074b4 <HAL_GPIO_Init+0x228>)
 800729c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800729e:	e18c      	b.n	80075ba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	2101      	movs	r1, #1
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ac:	4013      	ands	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 817e 	beq.w	80075b4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d005      	beq.n	80072d0 <HAL_GPIO_Init+0x44>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d130      	bne.n	8007332 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	2203      	movs	r2, #3
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	43db      	mvns	r3, r3
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	4013      	ands	r3, r2
 80072e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007306:	2201      	movs	r2, #1
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43db      	mvns	r3, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4013      	ands	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 0201 	and.w	r2, r3, #1
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4313      	orrs	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d017      	beq.n	800736e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	2203      	movs	r2, #3
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	4013      	ands	r3, r2
 8007354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	4313      	orrs	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b02      	cmp	r3, #2
 8007378:	d123      	bne.n	80073c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	08da      	lsrs	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3208      	adds	r2, #8
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	220f      	movs	r2, #15
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	43db      	mvns	r3, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	08da      	lsrs	r2, r3, #3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3208      	adds	r2, #8
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	2203      	movs	r2, #3
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43db      	mvns	r3, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f003 0203 	and.w	r2, r3, #3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 80d8 	beq.w	80075b4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007404:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <HAL_GPIO_Init+0x22c>)
 8007406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800740a:	4a2b      	ldr	r2, [pc, #172]	; (80074b8 <HAL_GPIO_Init+0x22c>)
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007414:	4b28      	ldr	r3, [pc, #160]	; (80074b8 <HAL_GPIO_Init+0x22c>)
 8007416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007422:	4a26      	ldr	r2, [pc, #152]	; (80074bc <HAL_GPIO_Init+0x230>)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	3302      	adds	r3, #2
 800742a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800742e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	220f      	movs	r2, #15
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	43db      	mvns	r3, r3
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	4013      	ands	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_GPIO_Init+0x234>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d04a      	beq.n	80074e4 <HAL_GPIO_Init+0x258>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_GPIO_Init+0x238>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d02b      	beq.n	80074ae <HAL_GPIO_Init+0x222>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <HAL_GPIO_Init+0x23c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d025      	beq.n	80074aa <HAL_GPIO_Init+0x21e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1a      	ldr	r2, [pc, #104]	; (80074cc <HAL_GPIO_Init+0x240>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d01f      	beq.n	80074a6 <HAL_GPIO_Init+0x21a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <HAL_GPIO_Init+0x244>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d019      	beq.n	80074a2 <HAL_GPIO_Init+0x216>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <HAL_GPIO_Init+0x248>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_GPIO_Init+0x212>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <HAL_GPIO_Init+0x24c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00d      	beq.n	800749a <HAL_GPIO_Init+0x20e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_GPIO_Init+0x250>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d007      	beq.n	8007496 <HAL_GPIO_Init+0x20a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <HAL_GPIO_Init+0x254>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d101      	bne.n	8007492 <HAL_GPIO_Init+0x206>
 800748e:	2309      	movs	r3, #9
 8007490:	e029      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 8007492:	230a      	movs	r3, #10
 8007494:	e027      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 8007496:	2307      	movs	r3, #7
 8007498:	e025      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 800749a:	2306      	movs	r3, #6
 800749c:	e023      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 800749e:	2305      	movs	r3, #5
 80074a0:	e021      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 80074a2:	2304      	movs	r3, #4
 80074a4:	e01f      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 80074a6:	2303      	movs	r3, #3
 80074a8:	e01d      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e01b      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e019      	b.n	80074e6 <HAL_GPIO_Init+0x25a>
 80074b2:	bf00      	nop
 80074b4:	58000080 	.word	0x58000080
 80074b8:	58024400 	.word	0x58024400
 80074bc:	58000400 	.word	0x58000400
 80074c0:	58020000 	.word	0x58020000
 80074c4:	58020400 	.word	0x58020400
 80074c8:	58020800 	.word	0x58020800
 80074cc:	58020c00 	.word	0x58020c00
 80074d0:	58021000 	.word	0x58021000
 80074d4:	58021400 	.word	0x58021400
 80074d8:	58021800 	.word	0x58021800
 80074dc:	58021c00 	.word	0x58021c00
 80074e0:	58022400 	.word	0x58022400
 80074e4:	2300      	movs	r3, #0
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	f002 0203 	and.w	r2, r2, #3
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	4093      	lsls	r3, r2
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074f6:	4938      	ldr	r1, [pc, #224]	; (80075d8 <HAL_GPIO_Init+0x34c>)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	089b      	lsrs	r3, r3, #2
 80074fc:	3302      	adds	r3, #2
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	43db      	mvns	r3, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4013      	ands	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800752a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	43db      	mvns	r3, r3
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	4013      	ands	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	43db      	mvns	r3, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4013      	ands	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	43db      	mvns	r3, r3
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4013      	ands	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f47f ae6b 	bne.w	80072a0 <HAL_GPIO_Init+0x14>
  }
}
 80075ca:	bf00      	nop
 80075cc:	bf00      	nop
 80075ce:	3724      	adds	r7, #36	; 0x24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	58000400 	.word	0x58000400

080075dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	887b      	ldrh	r3, [r7, #2]
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075f4:	2301      	movs	r3, #1
 80075f6:	73fb      	strb	r3, [r7, #15]
 80075f8:	e001      	b.n	80075fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
 8007618:	4613      	mov	r3, r2
 800761a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800761c:	787b      	ldrb	r3, [r7, #1]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007622:	887a      	ldrh	r2, [r7, #2]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007628:	e003      	b.n	8007632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800762a:	887b      	ldrh	r3, [r7, #2]
 800762c:	041a      	lsls	r2, r3, #16
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	619a      	str	r2, [r3, #24]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
	...

08007640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e07f      	b.n	8007752 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fd50 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2224      	movs	r2, #36	; 0x24
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0201 	bic.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d107      	bne.n	80076ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	e006      	b.n	80076c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d104      	bne.n	80076da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6859      	ldr	r1, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	4b1d      	ldr	r3, [pc, #116]	; (800775c <HAL_I2C_Init+0x11c>)
 80076e6:	430b      	orrs	r3, r1
 80076e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69d9      	ldr	r1, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	02008000 	.word	0x02008000

08007760 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
  }
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d138      	bne.n	800781c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e032      	b.n	800781e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	; 0x24
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0201 	bic.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b20      	cmp	r3, #32
 800783e:	d139      	bne.n	80078b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800784a:	2302      	movs	r3, #2
 800784c:	e033      	b.n	80078b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2224      	movs	r2, #36	; 0x24
 800785a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800787c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e000      	b.n	80078b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80078c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078c4:	b08f      	sub	sp, #60	; 0x3c
 80078c6:	af0a      	add	r7, sp, #40	; 0x28
 80078c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e116      	b.n	8007b02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f00d fdd6 	bl	80154a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2203      	movs	r2, #3
 80078f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f009 ff81 	bl	801181a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	603b      	str	r3, [r7, #0]
 800791e:	687e      	ldr	r6, [r7, #4]
 8007920:	466d      	mov	r5, sp
 8007922:	f106 0410 	add.w	r4, r6, #16
 8007926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800792a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800792c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800792e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007932:	e885 0003 	stmia.w	r5, {r0, r1}
 8007936:	1d33      	adds	r3, r6, #4
 8007938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800793a:	6838      	ldr	r0, [r7, #0]
 800793c:	f009 fe4c 	bl	80115d8 <USB_CoreInit>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2202      	movs	r2, #2
 800794a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e0d7      	b.n	8007b02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f009 ff6f 	bl	801183c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
 8007962:	e04a      	b.n	80079fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007964:	7bfa      	ldrb	r2, [r7, #15]
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	333d      	adds	r3, #61	; 0x3d
 8007974:	2201      	movs	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007978:	7bfa      	ldrb	r2, [r7, #15]
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4613      	mov	r3, r2
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	440b      	add	r3, r1
 8007986:	333c      	adds	r3, #60	; 0x3c
 8007988:	7bfa      	ldrb	r2, [r7, #15]
 800798a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800798c:	7bfa      	ldrb	r2, [r7, #15]
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	b298      	uxth	r0, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	3356      	adds	r3, #86	; 0x56
 80079a0:	4602      	mov	r2, r0
 80079a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80079a4:	7bfa      	ldrb	r2, [r7, #15]
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	3340      	adds	r3, #64	; 0x40
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80079b8:	7bfa      	ldrb	r2, [r7, #15]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	3344      	adds	r3, #68	; 0x44
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80079cc:	7bfa      	ldrb	r2, [r7, #15]
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	4613      	mov	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	3348      	adds	r3, #72	; 0x48
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80079e0:	7bfa      	ldrb	r2, [r7, #15]
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	4613      	mov	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	334c      	adds	r3, #76	; 0x4c
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	3301      	adds	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
 80079fa:	7bfa      	ldrb	r2, [r7, #15]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3af      	bcc.n	8007964 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	e044      	b.n	8007a94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007a0a:	7bfa      	ldrb	r2, [r7, #15]
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a20:	7bfa      	ldrb	r2, [r7, #15]
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007a32:	7bfa      	ldrb	r2, [r7, #15]
 8007a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007a36:	7bfa      	ldrb	r2, [r7, #15]
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007a4c:	7bfa      	ldrb	r2, [r7, #15]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007a62:	7bfa      	ldrb	r2, [r7, #15]
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007a78:	7bfa      	ldrb	r2, [r7, #15]
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	3301      	adds	r3, #1
 8007a92:	73fb      	strb	r3, [r7, #15]
 8007a94:	7bfa      	ldrb	r2, [r7, #15]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d3b5      	bcc.n	8007a0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	687e      	ldr	r6, [r7, #4]
 8007aa6:	466d      	mov	r5, sp
 8007aa8:	f106 0410 	add.w	r4, r6, #16
 8007aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ab8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007abc:	1d33      	adds	r3, r6, #4
 8007abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ac0:	6838      	ldr	r0, [r7, #0]
 8007ac2:	f009 ff07 	bl	80118d4 <USB_DevInit>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e014      	b.n	8007b02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d102      	bne.n	8007af6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f96f 	bl	8008dd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f00a ff49 	bl	8012992 <USB_DevDisconnect>

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_PCD_Start+0x1c>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e022      	b.n	8007b6c <HAL_PCD_Start+0x62>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d105      	bne.n	8007b4e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f009 fe50 	bl	80117f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f00a fef7 	bl	8012950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b08d      	sub	sp, #52	; 0x34
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00a ffb5 	bl	8012afa <USB_GetMode>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 84b7 	bne.w	8008506 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f00a ff19 	bl	80129d4 <USB_ReadInterrupts>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 84ad 	beq.w	8008504 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f00a ff06 	bl	80129d4 <USB_ReadInterrupts>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d107      	bne.n	8007be2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695a      	ldr	r2, [r3, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f002 0202 	and.w	r2, r2, #2
 8007be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f00a fef4 	bl	80129d4 <USB_ReadInterrupts>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	2b10      	cmp	r3, #16
 8007bf4:	d161      	bne.n	8007cba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699a      	ldr	r2, [r3, #24]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0210 	bic.w	r2, r2, #16
 8007c04:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	4613      	mov	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	3304      	adds	r3, #4
 8007c24:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	0c5b      	lsrs	r3, r3, #17
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d124      	bne.n	8007c7c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007c38:	4013      	ands	r3, r2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d035      	beq.n	8007caa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007c48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6a38      	ldr	r0, [r7, #32]
 8007c52:	f00a fd2b 	bl	80126ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	091b      	lsrs	r3, r3, #4
 8007c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c62:	441a      	add	r2, r3
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	695a      	ldr	r2, [r3, #20]
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	091b      	lsrs	r3, r3, #4
 8007c70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c74:	441a      	add	r2, r3
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	615a      	str	r2, [r3, #20]
 8007c7a:	e016      	b.n	8007caa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	0c5b      	lsrs	r3, r3, #17
 8007c80:	f003 030f 	and.w	r3, r3, #15
 8007c84:	2b06      	cmp	r3, #6
 8007c86:	d110      	bne.n	8007caa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c8e:	2208      	movs	r2, #8
 8007c90:	4619      	mov	r1, r3
 8007c92:	6a38      	ldr	r0, [r7, #32]
 8007c94:	f00a fd0a 	bl	80126ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ca4:	441a      	add	r2, r3
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	699a      	ldr	r2, [r3, #24]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0210 	orr.w	r2, r2, #16
 8007cb8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f00a fe88 	bl	80129d4 <USB_ReadInterrupts>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007cce:	f040 80a7 	bne.w	8007e20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f00a fe8d 	bl	80129fa <USB_ReadDevAllOutEpInterrupt>
 8007ce0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007ce2:	e099      	b.n	8007e18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 808e 	beq.w	8007e0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f00a feb1 	bl	8012a62 <USB_ReadDevOutEPInterrupt>
 8007d00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00c      	beq.n	8007d26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fed1 	bl	8008ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2308      	movs	r3, #8
 8007d40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 ffa7 	bl	8008c98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	461a      	mov	r2, r3
 8007d62:	2310      	movs	r3, #16
 8007d64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d030      	beq.n	8007dd2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d78:	2b80      	cmp	r3, #128	; 0x80
 8007d7a:	d109      	bne.n	8007d90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	4613      	mov	r3, r2
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	4413      	add	r3, r2
 8007da2:	3304      	adds	r3, #4
 8007da4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	78db      	ldrb	r3, [r3, #3]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d108      	bne.n	8007dc0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f00d fc68 	bl	8015690 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2302      	movs	r3, #2
 8007dd0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	461a      	mov	r2, r3
 8007dea:	2320      	movs	r3, #32
 8007dec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	461a      	mov	r2, r3
 8007e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	3301      	adds	r3, #1
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	085b      	lsrs	r3, r3, #1
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f47f af62 	bne.w	8007ce4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f00a fdd5 	bl	80129d4 <USB_ReadInterrupts>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e34:	f040 80db 	bne.w	8007fee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f00a fdf6 	bl	8012a2e <USB_ReadDevAllInEpInterrupt>
 8007e42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007e48:	e0cd      	b.n	8007fe6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80c2 	beq.w	8007fda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f00a fe1c 	bl	8012a9e <USB_ReadDevInEPInterrupt>
 8007e66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d057      	beq.n	8007f22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	2201      	movs	r2, #1
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	69f9      	ldr	r1, [r7, #28]
 8007e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e92:	4013      	ands	r3, r2
 8007e94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d132      	bne.n	8007f16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	00db      	lsls	r3, r3, #3
 8007eb8:	4413      	add	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	3348      	adds	r3, #72	; 0x48
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4403      	add	r3, r0
 8007ed0:	3344      	adds	r3, #68	; 0x44
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4419      	add	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	4613      	mov	r3, r2
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4403      	add	r3, r0
 8007ee4:	3348      	adds	r3, #72	; 0x48
 8007ee6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d113      	bne.n	8007f16 <HAL_PCD_IRQHandler+0x3a2>
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	440b      	add	r3, r1
 8007efc:	334c      	adds	r3, #76	; 0x4c
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d108      	bne.n	8007f16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2101      	movs	r1, #1
 8007f12:	f00a fe25 	bl	8012b60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f00d fb32 	bl	8015586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	461a      	mov	r2, r3
 8007f56:	2310      	movs	r3, #16
 8007f58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f70:	461a      	mov	r2, r3
 8007f72:	2340      	movs	r3, #64	; 0x40
 8007f74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d023      	beq.n	8007fc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f82:	6a38      	ldr	r0, [r7, #32]
 8007f84:	f009 fe04 	bl	8011b90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	3338      	adds	r3, #56	; 0x38
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	3304      	adds	r3, #4
 8007f9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	78db      	ldrb	r3, [r3, #3]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d108      	bne.n	8007fb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f00d fb7f 	bl	80156b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fcea 	bl	80089ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	3301      	adds	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f af2e 	bne.w	8007e4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f00a fcee 	bl	80129d4 <USB_ReadInterrupts>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008002:	d122      	bne.n	800804a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008012:	f023 0301 	bic.w	r3, r3, #1
 8008016:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800801e:	2b01      	cmp	r3, #1
 8008020:	d108      	bne.n	8008034 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800802a:	2100      	movs	r1, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fef5 	bl	8008e1c <HAL_PCDEx_LPM_Callback>
 8008032:	e002      	b.n	800803a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f00d fb1d 	bl	8015674 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695a      	ldr	r2, [r3, #20]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f00a fcc0 	bl	80129d4 <USB_ReadInterrupts>
 8008054:	4603      	mov	r3, r0
 8008056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800805a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805e:	d112      	bne.n	8008086 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d102      	bne.n	8008076 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f00d fad9 	bl	8015628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008084:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f00a fca2 	bl	80129d4 <USB_ReadInterrupts>
 8008090:	4603      	mov	r3, r0
 8008092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800809a:	d121      	bne.n	80080e0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80080aa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d111      	bne.n	80080da <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c4:	089b      	lsrs	r3, r3, #2
 80080c6:	f003 020f 	and.w	r2, r3, #15
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80080d0:	2101      	movs	r1, #1
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fea2 	bl	8008e1c <HAL_PCDEx_LPM_Callback>
 80080d8:	e002      	b.n	80080e0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f00d faa4 	bl	8015628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f00a fc75 	bl	80129d4 <USB_ReadInterrupts>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f4:	f040 80b7 	bne.w	8008266 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008106:	f023 0301 	bic.w	r3, r3, #1
 800810a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2110      	movs	r1, #16
 8008112:	4618      	mov	r0, r3
 8008114:	f009 fd3c 	bl	8011b90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008118:	2300      	movs	r3, #0
 800811a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800811c:	e046      	b.n	80081ac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800811e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812a:	461a      	mov	r2, r3
 800812c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008130:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008142:	0151      	lsls	r1, r2, #5
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	440a      	add	r2, r1
 8008148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800814c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008150:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	461a      	mov	r2, r3
 8008160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008164:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008184:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	440a      	add	r2, r1
 800819c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	3301      	adds	r3, #1
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d3b3      	bcc.n	800811e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80081c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d016      	beq.n	8008200 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081e2:	f043 030b 	orr.w	r3, r3, #11
 80081e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081f8:	f043 030b 	orr.w	r3, r3, #11
 80081fc:	6453      	str	r3, [r2, #68]	; 0x44
 80081fe:	e015      	b.n	800822c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	4619      	mov	r1, r3
 8008210:	f242 032b 	movw	r3, #8235	; 0x202b
 8008214:	4313      	orrs	r3, r2
 8008216:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008226:	f043 030b 	orr.w	r3, r3, #11
 800822a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800823e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6818      	ldr	r0, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008250:	461a      	mov	r2, r3
 8008252:	f00a fc85 	bl	8012b60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f00a fbb2 	bl	80129d4 <USB_ReadInterrupts>
 8008270:	4603      	mov	r3, r0
 8008272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800827a:	d124      	bne.n	80082c6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f00a fc49 	bl	8012b18 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f009 fcfd 	bl	8011c8a <USB_GetDevSpeed>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681c      	ldr	r4, [r3, #0]
 800829c:	f001 fd88 	bl	8009db0 <HAL_RCC_GetHCLKFreq>
 80082a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	4620      	mov	r0, r4
 80082ac:	f009 fa02 	bl	80116b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f00d f990 	bl	80155d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80082c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f00a fb82 	bl	80129d4 <USB_ReadInterrupts>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b08      	cmp	r3, #8
 80082d8:	d10a      	bne.n	80082f0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f00d f96d 	bl	80155ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695a      	ldr	r2, [r3, #20]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f002 0208 	and.w	r2, r2, #8
 80082ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f00a fb6d 	bl	80129d4 <USB_ReadInterrupts>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008300:	2b80      	cmp	r3, #128	; 0x80
 8008302:	d122      	bne.n	800834a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008310:	2301      	movs	r3, #1
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
 8008314:	e014      	b.n	8008340 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	4613      	mov	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d105      	bne.n	800833a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb09 	bl	800894c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	3301      	adds	r3, #1
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008346:	429a      	cmp	r2, r3
 8008348:	d3e5      	bcc.n	8008316 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f00a fb40 	bl	80129d4 <USB_ReadInterrupts>
 8008354:	4603      	mov	r3, r0
 8008356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800835a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800835e:	d13b      	bne.n	80083d8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008360:	2301      	movs	r3, #1
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
 8008364:	e02b      	b.n	80083be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	4613      	mov	r3, r2
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	3340      	adds	r3, #64	; 0x40
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d115      	bne.n	80083b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800838c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800838e:	2b00      	cmp	r3, #0
 8008390:	da12      	bge.n	80083b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008396:	4613      	mov	r3, r2
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	333f      	adds	r3, #63	; 0x3f
 80083a2:	2201      	movs	r2, #1
 80083a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 faca 	bl	800894c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	3301      	adds	r3, #1
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d3ce      	bcc.n	8008366 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695a      	ldr	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80083d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f00a faf9 	bl	80129d4 <USB_ReadInterrupts>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ec:	d155      	bne.n	800849a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083ee:	2301      	movs	r3, #1
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	e045      	b.n	8008480 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d12e      	bne.n	800847a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800841c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800841e:	2b00      	cmp	r3, #0
 8008420:	da2b      	bge.n	800847a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800842e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008432:	429a      	cmp	r2, r3
 8008434:	d121      	bne.n	800847a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	4613      	mov	r3, r2
 800843c:	00db      	lsls	r3, r3, #3
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008476:	6053      	str	r3, [r2, #4]
            break;
 8008478:	e007      	b.n	800848a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	3301      	adds	r3, #1
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	429a      	cmp	r2, r3
 8008488:	d3b4      	bcc.n	80083f4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f00a fa98 	bl	80129d4 <USB_ReadInterrupts>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ae:	d10a      	bne.n	80084c6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f00d f911 	bl	80156d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80084c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f00a fa82 	bl	80129d4 <USB_ReadInterrupts>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d115      	bne.n	8008506 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f00d f901 	bl	80156f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6859      	ldr	r1, [r3, #4]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	e000      	b.n	8008506 <HAL_PCD_IRQHandler+0x992>
      return;
 8008504:	bf00      	nop
    }
  }
}
 8008506:	3734      	adds	r7, #52	; 0x34
 8008508:	46bd      	mov	sp, r7
 800850a:	bd90      	pop	{r4, r7, pc}

0800850c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_PCD_SetAddress+0x1a>
 8008522:	2302      	movs	r3, #2
 8008524:	e013      	b.n	800854e <HAL_PCD_SetAddress+0x42>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	4611      	mov	r1, r2
 800853e:	4618      	mov	r0, r3
 8008540:	f00a f9e0 	bl	8012904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	4608      	mov	r0, r1
 8008560:	4611      	mov	r1, r2
 8008562:	461a      	mov	r2, r3
 8008564:	4603      	mov	r3, r0
 8008566:	70fb      	strb	r3, [r7, #3]
 8008568:	460b      	mov	r3, r1
 800856a:	803b      	strh	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008578:	2b00      	cmp	r3, #0
 800857a:	da0f      	bge.n	800859c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	f003 020f 	and.w	r2, r3, #15
 8008582:	4613      	mov	r3, r2
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	3338      	adds	r3, #56	; 0x38
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	3304      	adds	r3, #4
 8008592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	705a      	strb	r2, [r3, #1]
 800859a:	e00f      	b.n	80085bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	f003 020f 	and.w	r2, r3, #15
 80085a2:	4613      	mov	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085c8:	883a      	ldrh	r2, [r7, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	78ba      	ldrb	r2, [r7, #2]
 80085d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80085e6:	78bb      	ldrb	r3, [r7, #2]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d102      	bne.n	80085f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_PCD_EP_Open+0xaa>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e00e      	b.n	800861e <HAL_PCD_EP_Open+0xc8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	4618      	mov	r0, r3
 8008610:	f009 fb60 	bl	8011cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800861c:	7afb      	ldrb	r3, [r7, #11]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da0f      	bge.n	800865a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	3338      	adds	r3, #56	; 0x38
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	3304      	adds	r3, #4
 8008650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	705a      	strb	r2, [r3, #1]
 8008658:	e00f      	b.n	800867a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	4613      	mov	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	4413      	add	r3, r2
 8008670:	3304      	adds	r3, #4
 8008672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	b2da      	uxtb	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_PCD_EP_Close+0x6e>
 8008690:	2302      	movs	r3, #2
 8008692:	e00e      	b.n	80086b2 <HAL_PCD_EP_Close+0x8c>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f009 fb9e 	bl	8011de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b086      	sub	sp, #24
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	460b      	mov	r3, r1
 80086c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086ca:	7afb      	ldrb	r3, [r7, #11]
 80086cc:	f003 020f 	and.w	r2, r3, #15
 80086d0:	4613      	mov	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4413      	add	r3, r2
 80086e0:	3304      	adds	r3, #4
 80086e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2200      	movs	r2, #0
 80086f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	b2da      	uxtb	r2, r3
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d102      	bne.n	8008716 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	461a      	mov	r2, r3
 8008722:	6979      	ldr	r1, [r7, #20]
 8008724:	f009 fc3a 	bl	8011f9c <USB_EPStartXfer>

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008754:	681b      	ldr	r3, [r3, #0]
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
 800876e:	460b      	mov	r3, r1
 8008770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	f003 020f 	and.w	r2, r3, #15
 8008778:	4613      	mov	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	3338      	adds	r3, #56	; 0x38
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	3304      	adds	r3, #4
 8008788:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2201      	movs	r2, #1
 80087a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d102      	bne.n	80087bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	f009 fbe7 	bl	8011f9c <USB_EPStartXfer>

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d901      	bls.n	80087f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e050      	b.n	8008898 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80087f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	da0f      	bge.n	800881e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087fe:	78fb      	ldrb	r3, [r7, #3]
 8008800:	f003 020f 	and.w	r2, r3, #15
 8008804:	4613      	mov	r3, r2
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	3338      	adds	r3, #56	; 0x38
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	3304      	adds	r3, #4
 8008814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	705a      	strb	r2, [r3, #1]
 800881c:	e00d      	b.n	800883a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4613      	mov	r3, r2
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	4413      	add	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	3304      	adds	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	b2da      	uxtb	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_PCD_EP_SetStall+0x82>
 8008856:	2302      	movs	r3, #2
 8008858:	e01e      	b.n	8008898 <HAL_PCD_EP_SetStall+0xc0>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	4618      	mov	r0, r3
 800886a:	f009 ff77 	bl	801275c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	b2d9      	uxtb	r1, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008888:	461a      	mov	r2, r3
 800888a:	f00a f969 	bl	8012b60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	f003 020f 	and.w	r2, r3, #15
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d901      	bls.n	80088be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e042      	b.n	8008944 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da0f      	bge.n	80088e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	f003 020f 	and.w	r2, r3, #15
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	3338      	adds	r3, #56	; 0x38
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	3304      	adds	r3, #4
 80088dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	705a      	strb	r2, [r3, #1]
 80088e4:	e00f      	b.n	8008906 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 020f 	and.w	r2, r3, #15
 80088ec:	4613      	mov	r3, r2
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	4413      	add	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	4413      	add	r3, r2
 80088fc:	3304      	adds	r3, #4
 80088fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	b2da      	uxtb	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_PCD_EP_ClrStall+0x86>
 8008922:	2302      	movs	r3, #2
 8008924:	e00e      	b.n	8008944 <HAL_PCD_EP_ClrStall+0xa4>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	4618      	mov	r0, r3
 8008936:	f009 ff7f 	bl	8012838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da0c      	bge.n	800897a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	f003 020f 	and.w	r2, r3, #15
 8008966:	4613      	mov	r3, r2
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	3338      	adds	r3, #56	; 0x38
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	3304      	adds	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e00c      	b.n	8008994 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	f003 020f 	and.w	r2, r3, #15
 8008980:	4613      	mov	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4413      	add	r3, r2
 8008990:	3304      	adds	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68f9      	ldr	r1, [r7, #12]
 800899a:	4618      	mov	r0, r3
 800899c:	f009 fd9e 	bl	80124dc <USB_EPStopXfer>
 80089a0:	4603      	mov	r3, r0
 80089a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b08a      	sub	sp, #40	; 0x28
 80089b2:	af02      	add	r7, sp, #8
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80089c2:	683a      	ldr	r2, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4413      	add	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	3338      	adds	r3, #56	; 0x38
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4413      	add	r3, r2
 80089d2:	3304      	adds	r3, #4
 80089d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	695a      	ldr	r2, [r3, #20]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d901      	bls.n	80089e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e06c      	b.n	8008ac0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	69fa      	ldr	r2, [r7, #28]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d902      	bls.n	8008a02 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3303      	adds	r3, #3
 8008a06:	089b      	lsrs	r3, r3, #2
 8008a08:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a0a:	e02b      	b.n	8008a64 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	69fa      	ldr	r2, [r7, #28]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d902      	bls.n	8008a28 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	3303      	adds	r3, #3
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68d9      	ldr	r1, [r3, #12]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	6978      	ldr	r0, [r7, #20]
 8008a48:	f009 fdf2 	bl	8012630 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	441a      	add	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	441a      	add	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d809      	bhi.n	8008a8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1be      	bne.n	8008a0c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d811      	bhi.n	8008abe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	6939      	ldr	r1, [r7, #16]
 8008ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aba:	4013      	ands	r3, r2
 8008abc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3720      	adds	r7, #32
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	333c      	adds	r3, #60	; 0x3c
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d17b      	bne.n	8008bf6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d015      	beq.n	8008b34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	4a61      	ldr	r2, [pc, #388]	; (8008c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	f240 80b9 	bls.w	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80b3 	beq.w	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b30:	6093      	str	r3, [r2, #8]
 8008b32:	e0a7      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	6093      	str	r3, [r2, #8]
 8008b50:	e098      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f040 8093 	bne.w	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	4a4b      	ldr	r2, [pc, #300]	; (8008c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d90f      	bls.n	8008b86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b82:	6093      	str	r3, [r2, #8]
 8008b84:	e07e      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	4413      	add	r3, r2
 8008b98:	3304      	adds	r3, #4
 8008b9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	0159      	lsls	r1, r3, #5
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	440b      	add	r3, r1
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d114      	bne.n	8008be8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	f009 ffc4 	bl	8012b60 <USB_EP0_OutStart>
 8008bd8:	e006      	b.n	8008be8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	441a      	add	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f00c fcae 	bl	8015550 <HAL_PCD_DataOutStageCallback>
 8008bf4:	e046      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d124      	bne.n	8008c48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	461a      	mov	r2, r3
 8008c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1a:	6093      	str	r3, [r2, #8]
 8008c1c:	e032      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d008      	beq.n	8008c3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	461a      	mov	r2, r3
 8008c36:	2320      	movs	r3, #32
 8008c38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f00c fc85 	bl	8015550 <HAL_PCD_DataOutStageCallback>
 8008c46:	e01d      	b.n	8008c84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d114      	bne.n	8008c78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	4613      	mov	r3, r2
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	4413      	add	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	440b      	add	r3, r1
 8008c5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d108      	bne.n	8008c78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c70:	461a      	mov	r2, r3
 8008c72:	2100      	movs	r1, #0
 8008c74:	f009 ff74 	bl	8012b60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f00c fc66 	bl	8015550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3720      	adds	r7, #32
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	4f54300a 	.word	0x4f54300a
 8008c94:	4f54310a 	.word	0x4f54310a

08008c98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	333c      	adds	r3, #60	; 0x3c
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d90e      	bls.n	8008cec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f00c fc1d 	bl	801552c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d90c      	bls.n	8008d14 <PCD_EP_OutSetupPacket_int+0x7c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d108      	bne.n	8008d14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	2101      	movs	r1, #1
 8008d10:	f009 ff26 	bl	8012b60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	4f54300a 	.word	0x4f54300a

08008d24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
 8008d30:	4613      	mov	r3, r2
 8008d32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d107      	bne.n	8008d52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d42:	883b      	ldrh	r3, [r7, #0]
 8008d44:	0419      	lsls	r1, r3, #16
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d50:	e028      	b.n	8008da4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	73fb      	strb	r3, [r7, #15]
 8008d64:	e00d      	b.n	8008d82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	3340      	adds	r3, #64	; 0x40
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	73fb      	strb	r3, [r7, #15]
 8008d82:	7bfa      	ldrb	r2, [r7, #15]
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d3ec      	bcc.n	8008d66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008d8c:	883b      	ldrh	r3, [r7, #0]
 8008d8e:	0418      	lsls	r0, r3, #16
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	4302      	orrs	r2, r0
 8008d9c:	3340      	adds	r3, #64	; 0x40
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	887a      	ldrh	r2, [r7, #2]
 8008dc4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <HAL_PCDEx_ActivateLPM+0x44>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	10000003 	.word	0x10000003

08008e1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e3c:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d00a      	beq.n	8008e5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e48:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d001      	beq.n	8008e5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e01f      	b.n	8008e9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e01d      	b.n	8008e9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e5e:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f023 0207 	bic.w	r2, r3, #7
 8008e66:	490f      	ldr	r1, [pc, #60]	; (8008ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e6e:	f7fa f90d 	bl	800308c <HAL_GetTick>
 8008e72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e74:	e009      	b.n	8008e8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e76:	f7fa f909 	bl	800308c <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e84:	d901      	bls.n	8008e8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e007      	b.n	8008e9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e8a:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e96:	d1ee      	bne.n	8008e76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	58024800 	.word	0x58024800

08008ea8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eb6:	60d3      	str	r3, [r2, #12]
}
 8008eb8:	bf00      	nop
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	58024800 	.word	0x58024800

08008ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08c      	sub	sp, #48	; 0x30
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e3c8      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 8087 	beq.w	8008ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee8:	4b88      	ldr	r3, [pc, #544]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ef2:	4b86      	ldr	r3, [pc, #536]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efa:	2b10      	cmp	r3, #16
 8008efc:	d007      	beq.n	8008f0e <HAL_RCC_OscConfig+0x46>
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	2b18      	cmp	r3, #24
 8008f02:	d110      	bne.n	8008f26 <HAL_RCC_OscConfig+0x5e>
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d10b      	bne.n	8008f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f0e:	4b7f      	ldr	r3, [pc, #508]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d06c      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x12c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d168      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e3a2      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2e:	d106      	bne.n	8008f3e <HAL_RCC_OscConfig+0x76>
 8008f30:	4b76      	ldr	r3, [pc, #472]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a75      	ldr	r2, [pc, #468]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e02e      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <HAL_RCC_OscConfig+0x98>
 8008f46:	4b71      	ldr	r3, [pc, #452]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a70      	ldr	r2, [pc, #448]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	4b6e      	ldr	r3, [pc, #440]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a6d      	ldr	r2, [pc, #436]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e01d      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCC_OscConfig+0xbc>
 8008f6a:	4b68      	ldr	r3, [pc, #416]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a67      	ldr	r2, [pc, #412]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4b65      	ldr	r3, [pc, #404]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a64      	ldr	r2, [pc, #400]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e00b      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f84:	4b61      	ldr	r3, [pc, #388]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a60      	ldr	r2, [pc, #384]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	4b5e      	ldr	r3, [pc, #376]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a5d      	ldr	r2, [pc, #372]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d013      	beq.n	8008fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa4:	f7fa f872 	bl	800308c <HAL_GetTick>
 8008fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fac:	f7fa f86e 	bl	800308c <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b64      	cmp	r3, #100	; 0x64
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e356      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fbe:	4b53      	ldr	r3, [pc, #332]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0f0      	beq.n	8008fac <HAL_RCC_OscConfig+0xe4>
 8008fca:	e014      	b.n	8008ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fcc:	f7fa f85e 	bl	800308c <HAL_GetTick>
 8008fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd4:	f7fa f85a 	bl	800308c <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b64      	cmp	r3, #100	; 0x64
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e342      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fe6:	4b49      	ldr	r3, [pc, #292]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1f0      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x10c>
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 808c 	beq.w	800911c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009004:	4b41      	ldr	r3, [pc, #260]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800900c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800900e:	4b3f      	ldr	r3, [pc, #252]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <HAL_RCC_OscConfig+0x162>
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	2b18      	cmp	r3, #24
 800901e:	d137      	bne.n	8009090 <HAL_RCC_OscConfig+0x1c8>
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d132      	bne.n	8009090 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800902a:	4b38      	ldr	r3, [pc, #224]	; (800910c <HAL_RCC_OscConfig+0x244>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <HAL_RCC_OscConfig+0x17a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e314      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009042:	4b32      	ldr	r3, [pc, #200]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f023 0219 	bic.w	r2, r3, #25
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	492f      	ldr	r1, [pc, #188]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8009050:	4313      	orrs	r3, r2
 8009052:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fa f81a 	bl	800308c <HAL_GetTick>
 8009058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800905a:	e008      	b.n	800906e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800905c:	f7fa f816 	bl	800308c <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d901      	bls.n	800906e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e2fe      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800906e:	4b27      	ldr	r3, [pc, #156]	; (800910c <HAL_RCC_OscConfig+0x244>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f0      	beq.n	800905c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800907a:	4b24      	ldr	r3, [pc, #144]	; (800910c <HAL_RCC_OscConfig+0x244>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	061b      	lsls	r3, r3, #24
 8009088:	4920      	ldr	r1, [pc, #128]	; (800910c <HAL_RCC_OscConfig+0x244>)
 800908a:	4313      	orrs	r3, r2
 800908c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800908e:	e045      	b.n	800911c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d026      	beq.n	80090e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009098:	4b1c      	ldr	r3, [pc, #112]	; (800910c <HAL_RCC_OscConfig+0x244>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f023 0219 	bic.w	r2, r3, #25
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	4919      	ldr	r1, [pc, #100]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090aa:	f7f9 ffef 	bl	800308c <HAL_GetTick>
 80090ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090b0:	e008      	b.n	80090c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090b2:	f7f9 ffeb 	bl	800308c <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e2d3      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0f0      	beq.n	80090b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d0:	4b0e      	ldr	r3, [pc, #56]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	061b      	lsls	r3, r3, #24
 80090de:	490b      	ldr	r1, [pc, #44]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	604b      	str	r3, [r1, #4]
 80090e4:	e01a      	b.n	800911c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090e6:	4b09      	ldr	r3, [pc, #36]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a08      	ldr	r2, [pc, #32]	; (800910c <HAL_RCC_OscConfig+0x244>)
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f2:	f7f9 ffcb 	bl	800308c <HAL_GetTick>
 80090f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090f8:	e00a      	b.n	8009110 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090fa:	f7f9 ffc7 	bl	800308c <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d903      	bls.n	8009110 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e2af      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
 800910c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009110:	4b96      	ldr	r3, [pc, #600]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1ee      	bne.n	80090fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	d06a      	beq.n	80091fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009128:	4b90      	ldr	r3, [pc, #576]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009130:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009132:	4b8e      	ldr	r3, [pc, #568]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b08      	cmp	r3, #8
 800913c:	d007      	beq.n	800914e <HAL_RCC_OscConfig+0x286>
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	2b18      	cmp	r3, #24
 8009142:	d11b      	bne.n	800917c <HAL_RCC_OscConfig+0x2b4>
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	2b01      	cmp	r3, #1
 800914c:	d116      	bne.n	800917c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800914e:	4b87      	ldr	r3, [pc, #540]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_RCC_OscConfig+0x29e>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	2b80      	cmp	r3, #128	; 0x80
 8009160:	d001      	beq.n	8009166 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e282      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009166:	4b81      	ldr	r3, [pc, #516]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	497d      	ldr	r1, [pc, #500]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009176:	4313      	orrs	r3, r2
 8009178:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800917a:	e040      	b.n	80091fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d023      	beq.n	80091cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009184:	4b79      	ldr	r3, [pc, #484]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a78      	ldr	r2, [pc, #480]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800918a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7f9 ff7c 	bl	800308c <HAL_GetTick>
 8009194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009198:	f7f9 ff78 	bl	800308c <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e260      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091aa:	4b70      	ldr	r3, [pc, #448]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091b6:	4b6d      	ldr	r3, [pc, #436]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	061b      	lsls	r3, r3, #24
 80091c4:	4969      	ldr	r1, [pc, #420]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60cb      	str	r3, [r1, #12]
 80091ca:	e018      	b.n	80091fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091cc:	4b67      	ldr	r3, [pc, #412]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a66      	ldr	r2, [pc, #408]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d8:	f7f9 ff58 	bl	800308c <HAL_GetTick>
 80091dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091de:	e008      	b.n	80091f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091e0:	f7f9 ff54 	bl	800308c <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d901      	bls.n	80091f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e23c      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091f2:	4b5e      	ldr	r3, [pc, #376]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1f0      	bne.n	80091e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	2b00      	cmp	r3, #0
 8009208:	d036      	beq.n	8009278 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d019      	beq.n	8009246 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009212:	4b56      	ldr	r3, [pc, #344]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009216:	4a55      	ldr	r2, [pc, #340]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800921e:	f7f9 ff35 	bl	800308c <HAL_GetTick>
 8009222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009224:	e008      	b.n	8009238 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009226:	f7f9 ff31 	bl	800308c <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d901      	bls.n	8009238 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e219      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009238:	4b4c      	ldr	r3, [pc, #304]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0f0      	beq.n	8009226 <HAL_RCC_OscConfig+0x35e>
 8009244:	e018      	b.n	8009278 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009246:	4b49      	ldr	r3, [pc, #292]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924a:	4a48      	ldr	r2, [pc, #288]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009252:	f7f9 ff1b 	bl	800308c <HAL_GetTick>
 8009256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800925a:	f7f9 ff17 	bl	800308c <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e1ff      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800926c:	4b3f      	ldr	r3, [pc, #252]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800926e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1f0      	bne.n	800925a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d036      	beq.n	80092f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d019      	beq.n	80092c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800928c:	4b37      	ldr	r3, [pc, #220]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a36      	ldr	r2, [pc, #216]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009296:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009298:	f7f9 fef8 	bl	800308c <HAL_GetTick>
 800929c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800929e:	e008      	b.n	80092b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092a0:	f7f9 fef4 	bl	800308c <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e1dc      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092b2:	4b2e      	ldr	r3, [pc, #184]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0f0      	beq.n	80092a0 <HAL_RCC_OscConfig+0x3d8>
 80092be:	e018      	b.n	80092f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092c0:	4b2a      	ldr	r3, [pc, #168]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a29      	ldr	r2, [pc, #164]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80092c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092cc:	f7f9 fede 	bl	800308c <HAL_GetTick>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092d2:	e008      	b.n	80092e6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092d4:	f7f9 feda 	bl	800308c <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d901      	bls.n	80092e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e1c2      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092e6:	4b21      	ldr	r3, [pc, #132]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1f0      	bne.n	80092d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 8086 	beq.w	800940c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009300:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <HAL_RCC_OscConfig+0x4a8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a1a      	ldr	r2, [pc, #104]	; (8009370 <HAL_RCC_OscConfig+0x4a8>)
 8009306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800930c:	f7f9 febe 	bl	800308c <HAL_GetTick>
 8009310:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009312:	e008      	b.n	8009326 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009314:	f7f9 feba 	bl	800308c <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b64      	cmp	r3, #100	; 0x64
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e1a2      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009326:	4b12      	ldr	r3, [pc, #72]	; (8009370 <HAL_RCC_OscConfig+0x4a8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0f0      	beq.n	8009314 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d106      	bne.n	8009348 <HAL_RCC_OscConfig+0x480>
 800933a:	4b0c      	ldr	r3, [pc, #48]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	4a0b      	ldr	r2, [pc, #44]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009340:	f043 0301 	orr.w	r3, r3, #1
 8009344:	6713      	str	r3, [r2, #112]	; 0x70
 8009346:	e032      	b.n	80093ae <HAL_RCC_OscConfig+0x4e6>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d111      	bne.n	8009374 <HAL_RCC_OscConfig+0x4ac>
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009354:	4a05      	ldr	r2, [pc, #20]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009356:	f023 0301 	bic.w	r3, r3, #1
 800935a:	6713      	str	r3, [r2, #112]	; 0x70
 800935c:	4b03      	ldr	r3, [pc, #12]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	4a02      	ldr	r2, [pc, #8]	; (800936c <HAL_RCC_OscConfig+0x4a4>)
 8009362:	f023 0304 	bic.w	r3, r3, #4
 8009366:	6713      	str	r3, [r2, #112]	; 0x70
 8009368:	e021      	b.n	80093ae <HAL_RCC_OscConfig+0x4e6>
 800936a:	bf00      	nop
 800936c:	58024400 	.word	0x58024400
 8009370:	58024800 	.word	0x58024800
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	2b05      	cmp	r3, #5
 800937a:	d10c      	bne.n	8009396 <HAL_RCC_OscConfig+0x4ce>
 800937c:	4b83      	ldr	r3, [pc, #524]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800937e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009380:	4a82      	ldr	r2, [pc, #520]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009382:	f043 0304 	orr.w	r3, r3, #4
 8009386:	6713      	str	r3, [r2, #112]	; 0x70
 8009388:	4b80      	ldr	r3, [pc, #512]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938c:	4a7f      	ldr	r2, [pc, #508]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800938e:	f043 0301 	orr.w	r3, r3, #1
 8009392:	6713      	str	r3, [r2, #112]	; 0x70
 8009394:	e00b      	b.n	80093ae <HAL_RCC_OscConfig+0x4e6>
 8009396:	4b7d      	ldr	r3, [pc, #500]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939a:	4a7c      	ldr	r2, [pc, #496]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800939c:	f023 0301 	bic.w	r3, r3, #1
 80093a0:	6713      	str	r3, [r2, #112]	; 0x70
 80093a2:	4b7a      	ldr	r3, [pc, #488]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	4a79      	ldr	r2, [pc, #484]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80093a8:	f023 0304 	bic.w	r3, r3, #4
 80093ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d015      	beq.n	80093e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b6:	f7f9 fe69 	bl	800308c <HAL_GetTick>
 80093ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093bc:	e00a      	b.n	80093d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093be:	f7f9 fe65 	bl	800308c <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d901      	bls.n	80093d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e14b      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093d4:	4b6d      	ldr	r3, [pc, #436]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ee      	beq.n	80093be <HAL_RCC_OscConfig+0x4f6>
 80093e0:	e014      	b.n	800940c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e2:	f7f9 fe53 	bl	800308c <HAL_GetTick>
 80093e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093e8:	e00a      	b.n	8009400 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ea:	f7f9 fe4f 	bl	800308c <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d901      	bls.n	8009400 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e135      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009400:	4b62      	ldr	r3, [pc, #392]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1ee      	bne.n	80093ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 812a 	beq.w	800966a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009416:	4b5d      	ldr	r3, [pc, #372]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800941e:	2b18      	cmp	r3, #24
 8009420:	f000 80ba 	beq.w	8009598 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	2b02      	cmp	r3, #2
 800942a:	f040 8095 	bne.w	8009558 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800942e:	4b57      	ldr	r3, [pc, #348]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a56      	ldr	r2, [pc, #344]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943a:	f7f9 fe27 	bl	800308c <HAL_GetTick>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009440:	e008      	b.n	8009454 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009442:	f7f9 fe23 	bl	800308c <HAL_GetTick>
 8009446:	4602      	mov	r2, r0
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	2b02      	cmp	r3, #2
 800944e:	d901      	bls.n	8009454 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e10b      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009454:	4b4d      	ldr	r3, [pc, #308]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f0      	bne.n	8009442 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009460:	4b4a      	ldr	r3, [pc, #296]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009464:	4b4a      	ldr	r3, [pc, #296]	; (8009590 <HAL_RCC_OscConfig+0x6c8>)
 8009466:	4013      	ands	r3, r2
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009470:	0112      	lsls	r2, r2, #4
 8009472:	430a      	orrs	r2, r1
 8009474:	4945      	ldr	r1, [pc, #276]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009476:	4313      	orrs	r3, r2
 8009478:	628b      	str	r3, [r1, #40]	; 0x28
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	3b01      	subs	r3, #1
 8009480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009488:	3b01      	subs	r3, #1
 800948a:	025b      	lsls	r3, r3, #9
 800948c:	b29b      	uxth	r3, r3
 800948e:	431a      	orrs	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	3b01      	subs	r3, #1
 8009496:	041b      	lsls	r3, r3, #16
 8009498:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a2:	3b01      	subs	r3, #1
 80094a4:	061b      	lsls	r3, r3, #24
 80094a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094aa:	4938      	ldr	r1, [pc, #224]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80094b0:	4b36      	ldr	r3, [pc, #216]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	4a35      	ldr	r2, [pc, #212]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	f023 0301 	bic.w	r3, r3, #1
 80094ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094bc:	4b33      	ldr	r3, [pc, #204]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c0:	4b34      	ldr	r3, [pc, #208]	; (8009594 <HAL_RCC_OscConfig+0x6cc>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094c8:	00d2      	lsls	r2, r2, #3
 80094ca:	4930      	ldr	r1, [pc, #192]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094d0:	4b2e      	ldr	r3, [pc, #184]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	f023 020c 	bic.w	r2, r3, #12
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094dc:	492b      	ldr	r1, [pc, #172]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	f023 0202 	bic.w	r2, r3, #2
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ee:	4927      	ldr	r1, [pc, #156]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094f4:	4b25      	ldr	r3, [pc, #148]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a24      	ldr	r2, [pc, #144]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 80094fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009500:	4b22      	ldr	r3, [pc, #136]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	4a21      	ldr	r2, [pc, #132]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800950a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800950c:	4b1f      	ldr	r3, [pc, #124]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	4a1e      	ldr	r2, [pc, #120]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009518:	4b1c      	ldr	r3, [pc, #112]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	4a1b      	ldr	r2, [pc, #108]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009524:	4b19      	ldr	r3, [pc, #100]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a18      	ldr	r2, [pc, #96]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800952a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800952e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009530:	f7f9 fdac 	bl	800308c <HAL_GetTick>
 8009534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009538:	f7f9 fda8 	bl	800308c <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e090      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800954a:	4b10      	ldr	r3, [pc, #64]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0x670>
 8009556:	e088      	b.n	800966a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009558:	4b0c      	ldr	r3, [pc, #48]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a0b      	ldr	r2, [pc, #44]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 800955e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009564:	f7f9 fd92 	bl	800308c <HAL_GetTick>
 8009568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800956a:	e008      	b.n	800957e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800956c:	f7f9 fd8e 	bl	800308c <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	2b02      	cmp	r3, #2
 8009578:	d901      	bls.n	800957e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e076      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800957e:	4b03      	ldr	r3, [pc, #12]	; (800958c <HAL_RCC_OscConfig+0x6c4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1f0      	bne.n	800956c <HAL_RCC_OscConfig+0x6a4>
 800958a:	e06e      	b.n	800966a <HAL_RCC_OscConfig+0x7a2>
 800958c:	58024400 	.word	0x58024400
 8009590:	fffffc0c 	.word	0xfffffc0c
 8009594:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009598:	4b36      	ldr	r3, [pc, #216]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 800959a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800959e:	4b35      	ldr	r3, [pc, #212]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d031      	beq.n	8009610 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f003 0203 	and.w	r2, r3, #3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d12a      	bne.n	8009610 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	091b      	lsrs	r3, r3, #4
 80095be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d122      	bne.n	8009610 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d11a      	bne.n	8009610 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	0a5b      	lsrs	r3, r3, #9
 80095de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d111      	bne.n	8009610 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	0c1b      	lsrs	r3, r3, #16
 80095f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d108      	bne.n	8009610 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	0e1b      	lsrs	r3, r3, #24
 8009602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800960c:	429a      	cmp	r2, r3
 800960e:	d001      	beq.n	8009614 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e02b      	b.n	800966c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 8009616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009618:	08db      	lsrs	r3, r3, #3
 800961a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800961e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	429a      	cmp	r2, r3
 8009628:	d01f      	beq.n	800966a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 800962c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962e:	4a11      	ldr	r2, [pc, #68]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009636:	f7f9 fd29 	bl	800308c <HAL_GetTick>
 800963a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800963c:	bf00      	nop
 800963e:	f7f9 fd25 	bl	800308c <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	4293      	cmp	r3, r2
 8009648:	d0f9      	beq.n	800963e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800964a:	4b0a      	ldr	r3, [pc, #40]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 800964c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <HAL_RCC_OscConfig+0x7b0>)
 8009650:	4013      	ands	r3, r2
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009656:	00d2      	lsls	r2, r2, #3
 8009658:	4906      	ldr	r1, [pc, #24]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 800965a:	4313      	orrs	r3, r2
 800965c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 8009660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009662:	4a04      	ldr	r2, [pc, #16]	; (8009674 <HAL_RCC_OscConfig+0x7ac>)
 8009664:	f043 0301 	orr.w	r3, r3, #1
 8009668:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3730      	adds	r7, #48	; 0x30
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58024400 	.word	0x58024400
 8009678:	ffff0007 	.word	0xffff0007

0800967c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e19c      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009690:	4b8a      	ldr	r3, [pc, #552]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d910      	bls.n	80096c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800969e:	4b87      	ldr	r3, [pc, #540]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f023 020f 	bic.w	r2, r3, #15
 80096a6:	4985      	ldr	r1, [pc, #532]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ae:	4b83      	ldr	r3, [pc, #524]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d001      	beq.n	80096c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e184      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	4b7b      	ldr	r3, [pc, #492]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096d8:	429a      	cmp	r2, r3
 80096da:	d908      	bls.n	80096ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096dc:	4b78      	ldr	r3, [pc, #480]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	4975      	ldr	r1, [pc, #468]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d010      	beq.n	800971c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	695a      	ldr	r2, [r3, #20]
 80096fe:	4b70      	ldr	r3, [pc, #448]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009706:	429a      	cmp	r2, r3
 8009708:	d908      	bls.n	800971c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800970a:	4b6d      	ldr	r3, [pc, #436]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	496a      	ldr	r1, [pc, #424]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009718:	4313      	orrs	r3, r2
 800971a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0310 	and.w	r3, r3, #16
 8009724:	2b00      	cmp	r3, #0
 8009726:	d010      	beq.n	800974a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	4b64      	ldr	r3, [pc, #400]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009734:	429a      	cmp	r2, r3
 8009736:	d908      	bls.n	800974a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009738:	4b61      	ldr	r3, [pc, #388]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	495e      	ldr	r1, [pc, #376]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009746:	4313      	orrs	r3, r2
 8009748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d010      	beq.n	8009778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	69da      	ldr	r2, [r3, #28]
 800975a:	4b59      	ldr	r3, [pc, #356]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009762:	429a      	cmp	r2, r3
 8009764:	d908      	bls.n	8009778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009766:	4b56      	ldr	r3, [pc, #344]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	4953      	ldr	r1, [pc, #332]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009774:	4313      	orrs	r3, r2
 8009776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	4b4d      	ldr	r3, [pc, #308]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	429a      	cmp	r2, r3
 8009792:	d908      	bls.n	80097a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009794:	4b4a      	ldr	r3, [pc, #296]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f023 020f 	bic.w	r2, r3, #15
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4947      	ldr	r1, [pc, #284]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d055      	beq.n	800985e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097b2:	4b43      	ldr	r3, [pc, #268]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	4940      	ldr	r1, [pc, #256]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d107      	bne.n	80097dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097cc:	4b3c      	ldr	r3, [pc, #240]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d121      	bne.n	800981c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e0f6      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d107      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097e4:	4b36      	ldr	r3, [pc, #216]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d115      	bne.n	800981c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0ea      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d107      	bne.n	800980c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097fc:	4b30      	ldr	r3, [pc, #192]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0de      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800980c:	4b2c      	ldr	r3, [pc, #176]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e0d6      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800981c:	4b28      	ldr	r3, [pc, #160]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f023 0207 	bic.w	r2, r3, #7
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4925      	ldr	r1, [pc, #148]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800982a:	4313      	orrs	r3, r2
 800982c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800982e:	f7f9 fc2d 	bl	800308c <HAL_GetTick>
 8009832:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009834:	e00a      	b.n	800984c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009836:	f7f9 fc29 	bl	800308c <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	f241 3288 	movw	r2, #5000	; 0x1388
 8009844:	4293      	cmp	r3, r2
 8009846:	d901      	bls.n	800984c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e0be      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800984c:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	429a      	cmp	r2, r3
 800985c:	d1eb      	bne.n	8009836 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0302 	and.w	r3, r3, #2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d010      	beq.n	800988c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	429a      	cmp	r2, r3
 8009878:	d208      	bcs.n	800988c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800987a:	4b11      	ldr	r3, [pc, #68]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	f023 020f 	bic.w	r2, r3, #15
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	490e      	ldr	r1, [pc, #56]	; (80098c0 <HAL_RCC_ClockConfig+0x244>)
 8009888:	4313      	orrs	r3, r2
 800988a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d214      	bcs.n	80098c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800989a:	4b08      	ldr	r3, [pc, #32]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f023 020f 	bic.w	r2, r3, #15
 80098a2:	4906      	ldr	r1, [pc, #24]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098aa:	4b04      	ldr	r3, [pc, #16]	; (80098bc <HAL_RCC_ClockConfig+0x240>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d005      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e086      	b.n	80099ca <HAL_RCC_ClockConfig+0x34e>
 80098bc:	52002000 	.word	0x52002000
 80098c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	4b3f      	ldr	r3, [pc, #252]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098dc:	429a      	cmp	r2, r3
 80098de:	d208      	bcs.n	80098f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098e0:	4b3c      	ldr	r3, [pc, #240]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	4939      	ldr	r1, [pc, #228]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0308 	and.w	r3, r3, #8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d010      	beq.n	8009920 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	695a      	ldr	r2, [r3, #20]
 8009902:	4b34      	ldr	r3, [pc, #208]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800990a:	429a      	cmp	r2, r3
 800990c:	d208      	bcs.n	8009920 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800990e:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	492e      	ldr	r1, [pc, #184]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 800991c:	4313      	orrs	r3, r2
 800991e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0310 	and.w	r3, r3, #16
 8009928:	2b00      	cmp	r3, #0
 800992a:	d010      	beq.n	800994e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	699a      	ldr	r2, [r3, #24]
 8009930:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009938:	429a      	cmp	r2, r3
 800993a:	d208      	bcs.n	800994e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800993c:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	4922      	ldr	r1, [pc, #136]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 800994a:	4313      	orrs	r3, r2
 800994c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0320 	and.w	r3, r3, #32
 8009956:	2b00      	cmp	r3, #0
 8009958:	d010      	beq.n	800997c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69da      	ldr	r2, [r3, #28]
 800995e:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009966:	429a      	cmp	r2, r3
 8009968:	d208      	bcs.n	800997c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	4917      	ldr	r1, [pc, #92]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009978:	4313      	orrs	r3, r2
 800997a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800997c:	f000 f89e 	bl	8009abc <HAL_RCC_GetSysClockFreq>
 8009980:	4602      	mov	r2, r0
 8009982:	4b14      	ldr	r3, [pc, #80]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	4912      	ldr	r1, [pc, #72]	; (80099d8 <HAL_RCC_ClockConfig+0x35c>)
 800998e:	5ccb      	ldrb	r3, [r1, r3]
 8009990:	f003 031f 	and.w	r3, r3, #31
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
 8009998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800999a:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <HAL_RCC_ClockConfig+0x358>)
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f003 030f 	and.w	r3, r3, #15
 80099a2:	4a0d      	ldr	r2, [pc, #52]	; (80099d8 <HAL_RCC_ClockConfig+0x35c>)
 80099a4:	5cd3      	ldrb	r3, [r2, r3]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	fa22 f303 	lsr.w	r3, r2, r3
 80099b0:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <HAL_RCC_ClockConfig+0x360>)
 80099b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099b4:	4a0a      	ldr	r2, [pc, #40]	; (80099e0 <HAL_RCC_ClockConfig+0x364>)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099ba:	4b0a      	ldr	r3, [pc, #40]	; (80099e4 <HAL_RCC_ClockConfig+0x368>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f9 fb1a 	bl	8002ff8 <HAL_InitTick>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	58024400 	.word	0x58024400
 80099d8:	0801a32c 	.word	0x0801a32c
 80099dc:	24000004 	.word	0x24000004
 80099e0:	24000000 	.word	0x24000000
 80099e4:	24000008 	.word	0x24000008

080099e8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08c      	sub	sp, #48	; 0x30
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d12a      	bne.n	8009a50 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80099fa:	4b2d      	ldr	r3, [pc, #180]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 80099fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a00:	4a2b      	ldr	r2, [pc, #172]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a0a:	4b29      	ldr	r3, [pc, #164]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a22:	2303      	movs	r3, #3
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a2e:	f107 031c 	add.w	r3, r7, #28
 8009a32:	4619      	mov	r1, r3
 8009a34:	481f      	ldr	r0, [pc, #124]	; (8009ab4 <HAL_RCC_MCOConfig+0xcc>)
 8009a36:	f7fd fc29 	bl	800728c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009a3a:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	430b      	orrs	r3, r1
 8009a48:	4919      	ldr	r1, [pc, #100]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009a4e:	e02a      	b.n	8009aa6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009a50:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a56:	4a16      	ldr	r2, [pc, #88]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a58:	f043 0304 	orr.w	r3, r3, #4
 8009a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	617b      	str	r3, [r7, #20]
 8009a6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a74:	2302      	movs	r3, #2
 8009a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a80:	2300      	movs	r3, #0
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009a84:	f107 031c 	add.w	r3, r7, #28
 8009a88:	4619      	mov	r1, r3
 8009a8a:	480b      	ldr	r0, [pc, #44]	; (8009ab8 <HAL_RCC_MCOConfig+0xd0>)
 8009a8c:	f7fd fbfe 	bl	800728c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	01d9      	lsls	r1, r3, #7
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	4903      	ldr	r1, [pc, #12]	; (8009ab0 <HAL_RCC_MCOConfig+0xc8>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	610b      	str	r3, [r1, #16]
}
 8009aa6:	bf00      	nop
 8009aa8:	3730      	adds	r7, #48	; 0x30
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	58020000 	.word	0x58020000
 8009ab8:	58020800 	.word	0x58020800

08009abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b089      	sub	sp, #36	; 0x24
 8009ac0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ac2:	4bb3      	ldr	r3, [pc, #716]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aca:	2b18      	cmp	r3, #24
 8009acc:	f200 8155 	bhi.w	8009d7a <HAL_RCC_GetSysClockFreq+0x2be>
 8009ad0:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b3d 	.word	0x08009b3d
 8009adc:	08009d7b 	.word	0x08009d7b
 8009ae0:	08009d7b 	.word	0x08009d7b
 8009ae4:	08009d7b 	.word	0x08009d7b
 8009ae8:	08009d7b 	.word	0x08009d7b
 8009aec:	08009d7b 	.word	0x08009d7b
 8009af0:	08009d7b 	.word	0x08009d7b
 8009af4:	08009d7b 	.word	0x08009d7b
 8009af8:	08009b63 	.word	0x08009b63
 8009afc:	08009d7b 	.word	0x08009d7b
 8009b00:	08009d7b 	.word	0x08009d7b
 8009b04:	08009d7b 	.word	0x08009d7b
 8009b08:	08009d7b 	.word	0x08009d7b
 8009b0c:	08009d7b 	.word	0x08009d7b
 8009b10:	08009d7b 	.word	0x08009d7b
 8009b14:	08009d7b 	.word	0x08009d7b
 8009b18:	08009b69 	.word	0x08009b69
 8009b1c:	08009d7b 	.word	0x08009d7b
 8009b20:	08009d7b 	.word	0x08009d7b
 8009b24:	08009d7b 	.word	0x08009d7b
 8009b28:	08009d7b 	.word	0x08009d7b
 8009b2c:	08009d7b 	.word	0x08009d7b
 8009b30:	08009d7b 	.word	0x08009d7b
 8009b34:	08009d7b 	.word	0x08009d7b
 8009b38:	08009b6f 	.word	0x08009b6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b3c:	4b94      	ldr	r3, [pc, #592]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0320 	and.w	r3, r3, #32
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d009      	beq.n	8009b5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b48:	4b91      	ldr	r3, [pc, #580]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	08db      	lsrs	r3, r3, #3
 8009b4e:	f003 0303 	and.w	r3, r3, #3
 8009b52:	4a90      	ldr	r2, [pc, #576]	; (8009d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b54:	fa22 f303 	lsr.w	r3, r2, r3
 8009b58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b5a:	e111      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b5c:	4b8d      	ldr	r3, [pc, #564]	; (8009d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b5e:	61bb      	str	r3, [r7, #24]
      break;
 8009b60:	e10e      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009b62:	4b8d      	ldr	r3, [pc, #564]	; (8009d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b64:	61bb      	str	r3, [r7, #24]
      break;
 8009b66:	e10b      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009b68:	4b8c      	ldr	r3, [pc, #560]	; (8009d9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b6a:	61bb      	str	r3, [r7, #24]
      break;
 8009b6c:	e108      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b6e:	4b88      	ldr	r3, [pc, #544]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b78:	4b85      	ldr	r3, [pc, #532]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	091b      	lsrs	r3, r3, #4
 8009b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b84:	4b82      	ldr	r3, [pc, #520]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b8e:	4b80      	ldr	r3, [pc, #512]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	08db      	lsrs	r3, r3, #3
 8009b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80e1 	beq.w	8009d74 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	f000 8083 	beq.w	8009cc0 <HAL_RCC_GetSysClockFreq+0x204>
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	f200 80a1 	bhi.w	8009d04 <HAL_RCC_GetSysClockFreq+0x248>
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <HAL_RCC_GetSysClockFreq+0x114>
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d056      	beq.n	8009c7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009bce:	e099      	b.n	8009d04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bd0:	4b6f      	ldr	r3, [pc, #444]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 0320 	and.w	r3, r3, #32
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d02d      	beq.n	8009c38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bdc:	4b6c      	ldr	r3, [pc, #432]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	08db      	lsrs	r3, r3, #3
 8009be2:	f003 0303 	and.w	r3, r3, #3
 8009be6:	4a6b      	ldr	r2, [pc, #428]	; (8009d94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009be8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c06:	4b62      	ldr	r3, [pc, #392]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	ee07 3a90 	vmov	s15, r3
 8009c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c1a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c36:	e087      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009da4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4a:	4b51      	ldr	r3, [pc, #324]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c5e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c7a:	e065      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8e:	4b40      	ldr	r3, [pc, #256]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ca2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cbe:	e043      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009dac <HAL_RCC_GetSysClockFreq+0x2f0>
 8009cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd2:	4b2f      	ldr	r3, [pc, #188]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ce6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d02:	e021      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009da8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d16:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d2a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009da0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009d48:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	0a5b      	lsrs	r3, r3, #9
 8009d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d52:	3301      	adds	r3, #1
 8009d54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6c:	ee17 3a90 	vmov	r3, s15
 8009d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009d72:	e005      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61bb      	str	r3, [r7, #24]
      break;
 8009d78:	e002      	b.n	8009d80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d7c:	61bb      	str	r3, [r7, #24]
      break;
 8009d7e:	bf00      	nop
  }

  return sysclockfreq;
 8009d80:	69bb      	ldr	r3, [r7, #24]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3724      	adds	r7, #36	; 0x24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	58024400 	.word	0x58024400
 8009d94:	03d09000 	.word	0x03d09000
 8009d98:	003d0900 	.word	0x003d0900
 8009d9c:	02faf080 	.word	0x02faf080
 8009da0:	46000000 	.word	0x46000000
 8009da4:	4c742400 	.word	0x4c742400
 8009da8:	4a742400 	.word	0x4a742400
 8009dac:	4c3ebc20 	.word	0x4c3ebc20

08009db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009db6:	f7ff fe81 	bl	8009abc <HAL_RCC_GetSysClockFreq>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	f003 030f 	and.w	r3, r3, #15
 8009dc6:	490f      	ldr	r1, [pc, #60]	; (8009e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8009dc8:	5ccb      	ldrb	r3, [r1, r3]
 8009dca:	f003 031f 	and.w	r3, r3, #31
 8009dce:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <HAL_RCC_GetHCLKFreq+0x50>)
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	4a09      	ldr	r2, [pc, #36]	; (8009e04 <HAL_RCC_GetHCLKFreq+0x54>)
 8009dde:	5cd3      	ldrb	r3, [r2, r3]
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dee:	4a07      	ldr	r2, [pc, #28]	; (8009e0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009df4:	4b04      	ldr	r3, [pc, #16]	; (8009e08 <HAL_RCC_GetHCLKFreq+0x58>)
 8009df6:	681b      	ldr	r3, [r3, #0]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	58024400 	.word	0x58024400
 8009e04:	0801a32c 	.word	0x0801a32c
 8009e08:	24000004 	.word	0x24000004
 8009e0c:	24000000 	.word	0x24000000

08009e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e14:	f7ff ffcc 	bl	8009db0 <HAL_RCC_GetHCLKFreq>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	091b      	lsrs	r3, r3, #4
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	4904      	ldr	r1, [pc, #16]	; (8009e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e26:	5ccb      	ldrb	r3, [r1, r3]
 8009e28:	f003 031f 	and.w	r3, r3, #31
 8009e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	58024400 	.word	0x58024400
 8009e38:	0801a32c 	.word	0x0801a32c

08009e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e40:	f7ff ffb6 	bl	8009db0 <HAL_RCC_GetHCLKFreq>
 8009e44:	4602      	mov	r2, r0
 8009e46:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	0a1b      	lsrs	r3, r3, #8
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	4904      	ldr	r1, [pc, #16]	; (8009e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e52:	5ccb      	ldrb	r3, [r1, r3]
 8009e54:	f003 031f 	and.w	r3, r3, #31
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	58024400 	.word	0x58024400
 8009e64:	0801a32c 	.word	0x0801a32c

08009e68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e6c:	b0c6      	sub	sp, #280	; 0x118
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e74:	2300      	movs	r3, #0
 8009e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	ea54 0305 	orrs.w	r3, r4, r5
 8009e92:	d049      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e9e:	d02f      	beq.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ea4:	d828      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eaa:	d01a      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eb0:	d822      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eba:	d007      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ebc:	e01c      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ebe:	4bab      	ldr	r3, [pc, #684]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	4aaa      	ldr	r2, [pc, #680]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009eca:	e01a      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f002 fa49 	bl	800c36c <RCCEx_PLL2_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ee0:	e00f      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee6:	3328      	adds	r3, #40	; 0x28
 8009ee8:	2102      	movs	r1, #2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f002 faf0 	bl	800c4d0 <RCCEx_PLL3_Config>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ef6:	e004      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009efe:	e000      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f0a:	4b98      	ldr	r3, [pc, #608]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f18:	4a94      	ldr	r2, [pc, #592]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f1a:	430b      	orrs	r3, r1
 8009f1c:	6513      	str	r3, [r2, #80]	; 0x50
 8009f1e:	e003      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009f34:	f04f 0900 	mov.w	r9, #0
 8009f38:	ea58 0309 	orrs.w	r3, r8, r9
 8009f3c:	d047      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d82a      	bhi.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f48:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f73 	.word	0x08009f73
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009fa7 	.word	0x08009fa7
 8009f60:	08009fa7 	.word	0x08009fa7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f64:	4b81      	ldr	r3, [pc, #516]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a80      	ldr	r2, [pc, #512]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f70:	e01a      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f76:	3308      	adds	r3, #8
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f002 f9f6 	bl	800c36c <RCCEx_PLL2_Config>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f86:	e00f      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8c:	3328      	adds	r3, #40	; 0x28
 8009f8e:	2100      	movs	r1, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f002 fa9d 	bl	800c4d0 <RCCEx_PLL3_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f9c:	e004      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fa4:	e000      	b.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fb0:	4b6e      	ldr	r3, [pc, #440]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb4:	f023 0107 	bic.w	r1, r3, #7
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fbe:	4a6b      	ldr	r2, [pc, #428]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fc0:	430b      	orrs	r3, r1
 8009fc2:	6513      	str	r3, [r2, #80]	; 0x50
 8009fc4:	e003      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009fda:	f04f 0b00 	mov.w	fp, #0
 8009fde:	ea5a 030b 	orrs.w	r3, sl, fp
 8009fe2:	d05b      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fec:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009ff0:	d03b      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009ff2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009ff6:	d834      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ffc:	d037      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009ffe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a002:	d82e      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a004:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a008:	d033      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a00a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a00e:	d828      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a014:	d01a      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a01a:	d822      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a024:	d007      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a026:	e01c      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a028:	4b50      	ldr	r3, [pc, #320]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a4f      	ldr	r2, [pc, #316]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a02e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a034:	e01e      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a03a:	3308      	adds	r3, #8
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f002 f994 	bl	800c36c <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a04a:	e013      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a050:	3328      	adds	r3, #40	; 0x28
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f002 fa3b 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a060:	e008      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a068:	e004      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a06a:	bf00      	nop
 800a06c:	e002      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a06e:	bf00      	nop
 800a070:	e000      	b.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a072:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a074:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10b      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a07c:	4b3b      	ldr	r3, [pc, #236]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a080:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a08c:	4a37      	ldr	r2, [pc, #220]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a08e:	430b      	orrs	r3, r1
 800a090:	6593      	str	r3, [r2, #88]	; 0x58
 800a092:	e003      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a098:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a0a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	d05d      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0c4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a0c8:	d03b      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a0ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a0ce:	d834      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0d4:	d037      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a0d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0da:	d82e      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0e0:	d033      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a0e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0e6:	d828      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0ec:	d01a      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a0ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0f2:	d822      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a0f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0fc:	d007      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a0fe:	e01c      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a100:	4b1a      	ldr	r3, [pc, #104]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a19      	ldr	r2, [pc, #100]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a10a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a10c:	e01e      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a112:	3308      	adds	r3, #8
 800a114:	2100      	movs	r1, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f002 f928 	bl	800c36c <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a122:	e013      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a128:	3328      	adds	r3, #40	; 0x28
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f002 f9cf 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a138:	e008      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a140:	e004      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a142:	bf00      	nop
 800a144:	e002      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a146:	bf00      	nop
 800a148:	e000      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a14a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a150:	2b00      	cmp	r3, #0
 800a152:	d10d      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a158:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a164:	4a01      	ldr	r2, [pc, #4]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a166:	430b      	orrs	r3, r1
 800a168:	6593      	str	r3, [r2, #88]	; 0x58
 800a16a:	e005      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a16c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a174:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a184:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a188:	2300      	movs	r3, #0
 800a18a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a18e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a192:	460b      	mov	r3, r1
 800a194:	4313      	orrs	r3, r2
 800a196:	d03a      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a19e:	2b30      	cmp	r3, #48	; 0x30
 800a1a0:	d01f      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a1a2:	2b30      	cmp	r3, #48	; 0x30
 800a1a4:	d819      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d00c      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	d815      	bhi.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d019      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d111      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b6:	4baa      	ldr	r3, [pc, #680]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4aa9      	ldr	r2, [pc, #676]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a1c2:	e011      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f002 f8cd 	bl	800c36c <RCCEx_PLL2_Config>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a1d8:	e006      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1e0:	e002      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a1e2:	bf00      	nop
 800a1e4:	e000      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a1f0:	4b9b      	ldr	r3, [pc, #620]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fe:	4a98      	ldr	r2, [pc, #608]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a200:	430b      	orrs	r3, r1
 800a202:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a204:	e003      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a206:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a20a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a21a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a21e:	2300      	movs	r3, #0
 800a220:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a224:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a228:	460b      	mov	r3, r1
 800a22a:	4313      	orrs	r3, r2
 800a22c:	d051      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a238:	d035      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a23e:	d82e      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a244:	d031      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a24a:	d828      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a250:	d01a      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a256:	d822      	bhi.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a260:	d007      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a262:	e01c      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a264:	4b7e      	ldr	r3, [pc, #504]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	4a7d      	ldr	r2, [pc, #500]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a26e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a270:	e01c      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a276:	3308      	adds	r3, #8
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f002 f876 	bl	800c36c <RCCEx_PLL2_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a286:	e011      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28c:	3328      	adds	r3, #40	; 0x28
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f002 f91d 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a29c:	e006      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2a4:	e002      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a2a6:	bf00      	nop
 800a2a8:	e000      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a2aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a2b4:	4b6a      	ldr	r3, [pc, #424]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c2:	4a67      	ldr	r2, [pc, #412]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6513      	str	r3, [r2, #80]	; 0x50
 800a2c8:	e003      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a2de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d053      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2fc:	d033      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a2fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a302:	d82c      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a304:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a308:	d02f      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a30a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a30e:	d826      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a310:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a314:	d02b      	beq.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a31a:	d820      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a31c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a320:	d012      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a326:	d81a      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d022      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a330:	d115      	bne.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a336:	3308      	adds	r3, #8
 800a338:	2101      	movs	r1, #1
 800a33a:	4618      	mov	r0, r3
 800a33c:	f002 f816 	bl	800c36c <RCCEx_PLL2_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a346:	e015      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34c:	3328      	adds	r3, #40	; 0x28
 800a34e:	2101      	movs	r1, #1
 800a350:	4618      	mov	r0, r3
 800a352:	f002 f8bd 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a35c:	e00a      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a364:	e006      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a366:	bf00      	nop
 800a368:	e004      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a36a:	bf00      	nop
 800a36c:	e002      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a36e:	bf00      	nop
 800a370:	e000      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a372:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10a      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a37c:	4b38      	ldr	r3, [pc, #224]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a380:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a38a:	4a35      	ldr	r2, [pc, #212]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6513      	str	r3, [r2, #80]	; 0x50
 800a390:	e003      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a396:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a3a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	d058      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3c6:	d033      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3cc:	d82c      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d2:	d02f      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d8:	d826      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3de:	d02b      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a3e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a3e4:	d820      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ea:	d012      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d81a      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d022      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fa:	d115      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a400:	3308      	adds	r3, #8
 800a402:	2101      	movs	r1, #1
 800a404:	4618      	mov	r0, r3
 800a406:	f001 ffb1 	bl	800c36c <RCCEx_PLL2_Config>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a410:	e015      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a416:	3328      	adds	r3, #40	; 0x28
 800a418:	2101      	movs	r1, #1
 800a41a:	4618      	mov	r0, r3
 800a41c:	f002 f858 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a420:	4603      	mov	r3, r0
 800a422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a426:	e00a      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a42e:	e006      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a430:	bf00      	nop
 800a432:	e004      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a434:	bf00      	nop
 800a436:	e002      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a438:	bf00      	nop
 800a43a:	e000      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a43c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a43e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10e      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a452:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a456:	4a02      	ldr	r2, [pc, #8]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a458:	430b      	orrs	r3, r1
 800a45a:	6593      	str	r3, [r2, #88]	; 0x58
 800a45c:	e006      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a45e:	bf00      	nop
 800a460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a468:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a482:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a486:	460b      	mov	r3, r1
 800a488:	4313      	orrs	r3, r2
 800a48a:	d037      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a496:	d00e      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a49c:	d816      	bhi.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d018      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a4a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4a6:	d111      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a8:	4bc4      	ldr	r3, [pc, #784]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ac:	4ac3      	ldr	r2, [pc, #780]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4b4:	e00f      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	2101      	movs	r1, #1
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 ff54 	bl	800c36c <RCCEx_PLL2_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4ca:	e004      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4d2:	e000      	b.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4de:	4bb7      	ldr	r3, [pc, #732]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ec:	4ab3      	ldr	r2, [pc, #716]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	6513      	str	r3, [r2, #80]	; 0x50
 800a4f2:	e003      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a50c:	2300      	movs	r3, #0
 800a50e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a512:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a516:	460b      	mov	r3, r1
 800a518:	4313      	orrs	r3, r2
 800a51a:	d039      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a522:	2b03      	cmp	r3, #3
 800a524:	d81c      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a526:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a569 	.word	0x0800a569
 800a530:	0800a53d 	.word	0x0800a53d
 800a534:	0800a54b 	.word	0x0800a54b
 800a538:	0800a569 	.word	0x0800a569
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b9f      	ldr	r3, [pc, #636]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a9e      	ldr	r2, [pc, #632]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54e:	3308      	adds	r3, #8
 800a550:	2102      	movs	r1, #2
 800a552:	4618      	mov	r0, r3
 800a554:	f001 ff0a 	bl	800c36c <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a55e:	e004      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a566:	e000      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a56a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10a      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a572:	4b92      	ldr	r3, [pc, #584]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	f023 0103 	bic.w	r1, r3, #3
 800a57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a580:	4a8e      	ldr	r2, [pc, #568]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a582:	430b      	orrs	r3, r1
 800a584:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a586:	e003      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a58c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a59c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f000 8099 	beq.w	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5b2:	4b83      	ldr	r3, [pc, #524]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a82      	ldr	r2, [pc, #520]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5be:	f7f8 fd65 	bl	800308c <HAL_GetTick>
 800a5c2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5c6:	e00b      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5c8:	f7f8 fd60 	bl	800308c <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	2b64      	cmp	r3, #100	; 0x64
 800a5d6:	d903      	bls.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5de:	e005      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5e0:	4b77      	ldr	r3, [pc, #476]	; (800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0ed      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d173      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5f4:	4b71      	ldr	r3, [pc, #452]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a600:	4053      	eors	r3, r2
 800a602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a606:	2b00      	cmp	r3, #0
 800a608:	d015      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a60a:	4b6c      	ldr	r3, [pc, #432]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a612:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a616:	4b69      	ldr	r3, [pc, #420]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61a:	4a68      	ldr	r2, [pc, #416]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a61c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a620:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a622:	4b66      	ldr	r3, [pc, #408]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	4a65      	ldr	r2, [pc, #404]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a62c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a62e:	4a63      	ldr	r2, [pc, #396]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a634:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a642:	d118      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7f8 fd22 	bl	800308c <HAL_GetTick>
 800a648:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a64c:	e00d      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a64e:	f7f8 fd1d 	bl	800308c <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a65e:	429a      	cmp	r2, r3
 800a660:	d903      	bls.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a668:	e005      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a66a:	4b54      	ldr	r3, [pc, #336]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0eb      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a676:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d129      	bne.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a68e:	d10e      	bne.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a690:	4b4a      	ldr	r3, [pc, #296]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6a0:	091a      	lsrs	r2, r3, #4
 800a6a2:	4b48      	ldr	r3, [pc, #288]	; (800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	4a45      	ldr	r2, [pc, #276]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	6113      	str	r3, [r2, #16]
 800a6ac:	e005      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a6ae:	4b43      	ldr	r3, [pc, #268]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	4a42      	ldr	r2, [pc, #264]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6b8:	6113      	str	r3, [r2, #16]
 800a6ba:	4b40      	ldr	r3, [pc, #256]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6ca:	4a3c      	ldr	r2, [pc, #240]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a6d0:	e008      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a6da:	e003      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f002 0301 	and.w	r3, r2, #1
 800a6f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a6fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	f000 808f 	beq.w	800a824 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a70c:	2b28      	cmp	r3, #40	; 0x28
 800a70e:	d871      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a7fd 	.word	0x0800a7fd
 800a71c:	0800a7f5 	.word	0x0800a7f5
 800a720:	0800a7f5 	.word	0x0800a7f5
 800a724:	0800a7f5 	.word	0x0800a7f5
 800a728:	0800a7f5 	.word	0x0800a7f5
 800a72c:	0800a7f5 	.word	0x0800a7f5
 800a730:	0800a7f5 	.word	0x0800a7f5
 800a734:	0800a7f5 	.word	0x0800a7f5
 800a738:	0800a7c9 	.word	0x0800a7c9
 800a73c:	0800a7f5 	.word	0x0800a7f5
 800a740:	0800a7f5 	.word	0x0800a7f5
 800a744:	0800a7f5 	.word	0x0800a7f5
 800a748:	0800a7f5 	.word	0x0800a7f5
 800a74c:	0800a7f5 	.word	0x0800a7f5
 800a750:	0800a7f5 	.word	0x0800a7f5
 800a754:	0800a7f5 	.word	0x0800a7f5
 800a758:	0800a7df 	.word	0x0800a7df
 800a75c:	0800a7f5 	.word	0x0800a7f5
 800a760:	0800a7f5 	.word	0x0800a7f5
 800a764:	0800a7f5 	.word	0x0800a7f5
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a7f5 	.word	0x0800a7f5
 800a770:	0800a7f5 	.word	0x0800a7f5
 800a774:	0800a7f5 	.word	0x0800a7f5
 800a778:	0800a7fd 	.word	0x0800a7fd
 800a77c:	0800a7f5 	.word	0x0800a7f5
 800a780:	0800a7f5 	.word	0x0800a7f5
 800a784:	0800a7f5 	.word	0x0800a7f5
 800a788:	0800a7f5 	.word	0x0800a7f5
 800a78c:	0800a7f5 	.word	0x0800a7f5
 800a790:	0800a7f5 	.word	0x0800a7f5
 800a794:	0800a7f5 	.word	0x0800a7f5
 800a798:	0800a7fd 	.word	0x0800a7fd
 800a79c:	0800a7f5 	.word	0x0800a7f5
 800a7a0:	0800a7f5 	.word	0x0800a7f5
 800a7a4:	0800a7f5 	.word	0x0800a7f5
 800a7a8:	0800a7f5 	.word	0x0800a7f5
 800a7ac:	0800a7f5 	.word	0x0800a7f5
 800a7b0:	0800a7f5 	.word	0x0800a7f5
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7fd 	.word	0x0800a7fd
 800a7bc:	58024400 	.word	0x58024400
 800a7c0:	58024800 	.word	0x58024800
 800a7c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2101      	movs	r1, #1
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fdcb 	bl	800c36c <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7dc:	e00f      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	3328      	adds	r3, #40	; 0x28
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fe72 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7f2:	e004      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7fa:	e000      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a806:	4bbf      	ldr	r3, [pc, #764]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a814:	4abb      	ldr	r2, [pc, #748]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a816:	430b      	orrs	r3, r1
 800a818:	6553      	str	r3, [r2, #84]	; 0x54
 800a81a:	e003      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f002 0302 	and.w	r3, r2, #2
 800a830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a834:	2300      	movs	r3, #0
 800a836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a83a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a83e:	460b      	mov	r3, r1
 800a840:	4313      	orrs	r3, r2
 800a842:	d041      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a84a:	2b05      	cmp	r3, #5
 800a84c:	d824      	bhi.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a8a1 	.word	0x0800a8a1
 800a858:	0800a86d 	.word	0x0800a86d
 800a85c:	0800a883 	.word	0x0800a883
 800a860:	0800a8a1 	.word	0x0800a8a1
 800a864:	0800a8a1 	.word	0x0800a8a1
 800a868:	0800a8a1 	.word	0x0800a8a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a870:	3308      	adds	r3, #8
 800a872:	2101      	movs	r1, #1
 800a874:	4618      	mov	r0, r3
 800a876:	f001 fd79 	bl	800c36c <RCCEx_PLL2_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a880:	e00f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a886:	3328      	adds	r3, #40	; 0x28
 800a888:	2101      	movs	r1, #1
 800a88a:	4618      	mov	r0, r3
 800a88c:	f001 fe20 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a896:	e004      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a89e:	e000      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8aa:	4b96      	ldr	r3, [pc, #600]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	f023 0107 	bic.w	r1, r3, #7
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b8:	4a92      	ldr	r2, [pc, #584]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8ba:	430b      	orrs	r3, r1
 800a8bc:	6553      	str	r3, [r2, #84]	; 0x54
 800a8be:	e003      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 0304 	and.w	r3, r2, #4
 800a8d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8de:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	d044      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d825      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a8f4:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a915 	.word	0x0800a915
 800a904:	0800a92b 	.word	0x0800a92b
 800a908:	0800a949 	.word	0x0800a949
 800a90c:	0800a949 	.word	0x0800a949
 800a910:	0800a949 	.word	0x0800a949
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a918:	3308      	adds	r3, #8
 800a91a:	2101      	movs	r1, #1
 800a91c:	4618      	mov	r0, r3
 800a91e:	f001 fd25 	bl	800c36c <RCCEx_PLL2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a928:	e00f      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	3328      	adds	r3, #40	; 0x28
 800a930:	2101      	movs	r1, #1
 800a932:	4618      	mov	r0, r3
 800a934:	f001 fdcc 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a93e:	e004      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a946:	e000      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a952:	4b6c      	ldr	r3, [pc, #432]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a956:	f023 0107 	bic.w	r1, r3, #7
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a962:	4a68      	ldr	r2, [pc, #416]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a964:	430b      	orrs	r3, r1
 800a966:	6593      	str	r3, [r2, #88]	; 0x58
 800a968:	e003      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a96a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a96e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f002 0320 	and.w	r3, r2, #32
 800a97e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a982:	2300      	movs	r3, #0
 800a984:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a988:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4313      	orrs	r3, r2
 800a990:	d055      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a99a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a99e:	d033      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a9a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9a4:	d82c      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9aa:	d02f      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b0:	d826      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9b6:	d02b      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a9b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9bc:	d820      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c2:	d012      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c8:	d81a      	bhi.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d022      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a9ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9d2:	d115      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d8:	3308      	adds	r3, #8
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f001 fcc5 	bl	800c36c <RCCEx_PLL2_Config>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9e8:	e015      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	3328      	adds	r3, #40	; 0x28
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 fd6c 	bl	800c4d0 <RCCEx_PLL3_Config>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9fe:	e00a      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa06:	e006      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa08:	bf00      	nop
 800aa0a:	e004      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa0c:	bf00      	nop
 800aa0e:	e002      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10b      	bne.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa1e:	4b39      	ldr	r3, [pc, #228]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa2e:	4a35      	ldr	r2, [pc, #212]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa30:	430b      	orrs	r3, r1
 800aa32:	6553      	str	r3, [r2, #84]	; 0x54
 800aa34:	e003      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aa4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	d058      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa6a:	d033      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800aa6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa70:	d82c      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa76:	d02f      	beq.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aa78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa7c:	d826      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa82:	d02b      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aa84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa88:	d820      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa8e:	d012      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aa90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa94:	d81a      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d022      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aa9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa9e:	d115      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa4:	3308      	adds	r3, #8
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 fc5f 	bl	800c36c <RCCEx_PLL2_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aab4:	e015      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaba:	3328      	adds	r3, #40	; 0x28
 800aabc:	2102      	movs	r1, #2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 fd06 	bl	800c4d0 <RCCEx_PLL3_Config>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aaca:	e00a      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aad2:	e006      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aad4:	bf00      	nop
 800aad6:	e004      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aad8:	bf00      	nop
 800aada:	e002      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aadc:	bf00      	nop
 800aade:	e000      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10e      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaea:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aafa:	4a02      	ldr	r2, [pc, #8]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6593      	str	r3, [r2, #88]	; 0x58
 800ab00:	e006      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ab02:	bf00      	nop
 800ab04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab20:	2300      	movs	r3, #0
 800ab22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	d055      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab3c:	d033      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ab3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab42:	d82c      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab48:	d02f      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ab4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab4e:	d826      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab54:	d02b      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ab56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab5a:	d820      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab60:	d012      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ab62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab66:	d81a      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d022      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ab6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab70:	d115      	bne.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab76:	3308      	adds	r3, #8
 800ab78:	2100      	movs	r1, #0
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f001 fbf6 	bl	800c36c <RCCEx_PLL2_Config>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab86:	e015      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	3328      	adds	r3, #40	; 0x28
 800ab8e:	2102      	movs	r1, #2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fc9d 	bl	800c4d0 <RCCEx_PLL3_Config>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab9c:	e00a      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aba4:	e006      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800aba6:	bf00      	nop
 800aba8:	e004      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abaa:	bf00      	nop
 800abac:	e002      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abae:	bf00      	nop
 800abb0:	e000      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10b      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800abbc:	4ba0      	ldr	r3, [pc, #640]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800abc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abcc:	4a9c      	ldr	r2, [pc, #624]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abce:	430b      	orrs	r3, r1
 800abd0:	6593      	str	r3, [r2, #88]	; 0x58
 800abd2:	e003      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe4:	f002 0308 	and.w	r3, r2, #8
 800abe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800abec:	2300      	movs	r3, #0
 800abee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abf2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800abf6:	460b      	mov	r3, r1
 800abf8:	4313      	orrs	r3, r2
 800abfa:	d01e      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800abfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac08:	d10c      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0e:	3328      	adds	r3, #40	; 0x28
 800ac10:	2102      	movs	r1, #2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f001 fc5c 	bl	800c4d0 <RCCEx_PLL3_Config>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ac24:	4b86      	ldr	r3, [pc, #536]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac34:	4a82      	ldr	r2, [pc, #520]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac36:	430b      	orrs	r3, r1
 800ac38:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f002 0310 	and.w	r3, r2, #16
 800ac46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ac54:	460b      	mov	r3, r1
 800ac56:	4313      	orrs	r3, r2
 800ac58:	d01e      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac66:	d10c      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	3328      	adds	r3, #40	; 0x28
 800ac6e:	2102      	movs	r1, #2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 fc2d 	bl	800c4d0 <RCCEx_PLL3_Config>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac82:	4b6f      	ldr	r3, [pc, #444]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ac8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac92:	4a6b      	ldr	r2, [pc, #428]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aca4:	67bb      	str	r3, [r7, #120]	; 0x78
 800aca6:	2300      	movs	r3, #0
 800aca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acaa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800acae:	460b      	mov	r3, r1
 800acb0:	4313      	orrs	r3, r2
 800acb2:	d03e      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800acbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc0:	d022      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800acc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc6:	d81b      	bhi.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd0:	d00b      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800acd2:	e015      	b.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd8:	3308      	adds	r3, #8
 800acda:	2100      	movs	r1, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 fb45 	bl	800c36c <RCCEx_PLL2_Config>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ace8:	e00f      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acee:	3328      	adds	r3, #40	; 0x28
 800acf0:	2102      	movs	r1, #2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 fbec 	bl	800c4d0 <RCCEx_PLL3_Config>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acfe:	e004      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad06:	e000      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ad08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10b      	bne.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad12:	4b4b      	ldr	r3, [pc, #300]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad22:	4a47      	ldr	r2, [pc, #284]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad24:	430b      	orrs	r3, r1
 800ad26:	6593      	str	r3, [r2, #88]	; 0x58
 800ad28:	e003      	b.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad2e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ad3e:	673b      	str	r3, [r7, #112]	; 0x70
 800ad40:	2300      	movs	r3, #0
 800ad42:	677b      	str	r3, [r7, #116]	; 0x74
 800ad44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	d03b      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad5a:	d01f      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ad5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad60:	d818      	bhi.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ad62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad66:	d003      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ad68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad6c:	d007      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ad6e:	e011      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad70:	4b33      	ldr	r3, [pc, #204]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	4a32      	ldr	r2, [pc, #200]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad7c:	e00f      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad82:	3328      	adds	r3, #40	; 0x28
 800ad84:	2101      	movs	r1, #1
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 fba2 	bl	800c4d0 <RCCEx_PLL3_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad92:	e004      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad9a:	e000      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ad9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10b      	bne.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ada6:	4b26      	ldr	r3, [pc, #152]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ada8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adaa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb6:	4a22      	ldr	r2, [pc, #136]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adb8:	430b      	orrs	r3, r1
 800adba:	6553      	str	r3, [r2, #84]	; 0x54
 800adbc:	e003      	b.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800adc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800add2:	66bb      	str	r3, [r7, #104]	; 0x68
 800add4:	2300      	movs	r3, #0
 800add6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800add8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800addc:	460b      	mov	r3, r1
 800adde:	4313      	orrs	r3, r2
 800ade0:	d034      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800adec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf0:	d007      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800adf2:	e011      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf4:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	4a11      	ldr	r2, [pc, #68]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae00:	e00e      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	3308      	adds	r3, #8
 800ae08:	2102      	movs	r1, #2
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f001 faae 	bl	800c36c <RCCEx_PLL2_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae16:	e003      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10d      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae28:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae36:	4a02      	ldr	r2, [pc, #8]	; (800ae40 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae3c:	e006      	b.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ae3e:	bf00      	nop
 800ae40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ae58:	663b      	str	r3, [r7, #96]	; 0x60
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae5e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ae62:	460b      	mov	r3, r1
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d00c      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	3328      	adds	r3, #40	; 0x28
 800ae6e:	2102      	movs	r1, #2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f001 fb2d 	bl	800c4d0 <RCCEx_PLL3_Config>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ae8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae90:	2300      	movs	r3, #0
 800ae92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae94:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	d036      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aea8:	d018      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800aeaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeae:	d811      	bhi.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aeb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb4:	d014      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800aeb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeba:	d80b      	bhi.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d011      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec4:	d106      	bne.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aec6:	4bb7      	ldr	r3, [pc, #732]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	4ab6      	ldr	r2, [pc, #728]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aed2:	e008      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aeda:	e004      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aedc:	bf00      	nop
 800aede:	e002      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aee0:	bf00      	nop
 800aee2:	e000      	b.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aee6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aeee:	4bad      	ldr	r3, [pc, #692]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aefc:	4aa9      	ldr	r2, [pc, #676]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aefe:	430b      	orrs	r3, r1
 800af00:	6553      	str	r3, [r2, #84]	; 0x54
 800af02:	e003      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af18:	653b      	str	r3, [r7, #80]	; 0x50
 800af1a:	2300      	movs	r3, #0
 800af1c:	657b      	str	r3, [r7, #84]	; 0x54
 800af1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800af22:	460b      	mov	r3, r1
 800af24:	4313      	orrs	r3, r2
 800af26:	d009      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af28:	4b9e      	ldr	r3, [pc, #632]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800af30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	4a9b      	ldr	r2, [pc, #620]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af38:	430b      	orrs	r3, r1
 800af3a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af44:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800af48:	64bb      	str	r3, [r7, #72]	; 0x48
 800af4a:	2300      	movs	r3, #0
 800af4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af4e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800af52:	460b      	mov	r3, r1
 800af54:	4313      	orrs	r3, r2
 800af56:	d009      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af58:	4b92      	ldr	r3, [pc, #584]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af5c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af66:	4a8f      	ldr	r2, [pc, #572]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af68:	430b      	orrs	r3, r1
 800af6a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800af78:	643b      	str	r3, [r7, #64]	; 0x40
 800af7a:	2300      	movs	r3, #0
 800af7c:	647b      	str	r3, [r7, #68]	; 0x44
 800af7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800af82:	460b      	mov	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	d00e      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af88:	4b86      	ldr	r3, [pc, #536]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	4a85      	ldr	r2, [pc, #532]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af92:	6113      	str	r3, [r2, #16]
 800af94:	4b83      	ldr	r3, [pc, #524]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af96:	6919      	ldr	r1, [r3, #16]
 800af98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afa0:	4a80      	ldr	r2, [pc, #512]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afa2:	430b      	orrs	r3, r1
 800afa4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800afa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800afb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afb4:	2300      	movs	r3, #0
 800afb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800afbc:	460b      	mov	r3, r1
 800afbe:	4313      	orrs	r3, r2
 800afc0:	d009      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800afc2:	4b78      	ldr	r3, [pc, #480]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afd0:	4a74      	ldr	r2, [pc, #464]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afd2:	430b      	orrs	r3, r1
 800afd4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800afe2:	633b      	str	r3, [r7, #48]	; 0x30
 800afe4:	2300      	movs	r3, #0
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
 800afe8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800afec:	460b      	mov	r3, r1
 800afee:	4313      	orrs	r3, r2
 800aff0:	d00a      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aff2:	4b6c      	ldr	r3, [pc, #432]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800affa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b002:	4a68      	ldr	r2, [pc, #416]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b004:	430b      	orrs	r3, r1
 800b006:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	2100      	movs	r1, #0
 800b012:	62b9      	str	r1, [r7, #40]	; 0x28
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b01a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b01e:	460b      	mov	r3, r1
 800b020:	4313      	orrs	r3, r2
 800b022:	d011      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b028:	3308      	adds	r3, #8
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 f99d 	bl	800c36c <RCCEx_PLL2_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b038:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	2100      	movs	r1, #0
 800b052:	6239      	str	r1, [r7, #32]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	627b      	str	r3, [r7, #36]	; 0x24
 800b05a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b05e:	460b      	mov	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	d011      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b068:	3308      	adds	r3, #8
 800b06a:	2101      	movs	r1, #1
 800b06c:	4618      	mov	r0, r3
 800b06e:	f001 f97d 	bl	800c36c <RCCEx_PLL2_Config>
 800b072:	4603      	mov	r3, r0
 800b074:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b080:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b084:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	2100      	movs	r1, #0
 800b092:	61b9      	str	r1, [r7, #24]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	61fb      	str	r3, [r7, #28]
 800b09a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	d011      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 f95d 	bl	800c36c <RCCEx_PLL2_Config>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	6139      	str	r1, [r7, #16]
 800b0d4:	f003 0308 	and.w	r3, r3, #8
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	d011      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e8:	3328      	adds	r3, #40	; 0x28
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f9ef 	bl	800c4d0 <RCCEx_PLL3_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b100:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b104:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	2100      	movs	r1, #0
 800b112:	60b9      	str	r1, [r7, #8]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b11e:	460b      	mov	r3, r1
 800b120:	4313      	orrs	r3, r2
 800b122:	d011      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b128:	3328      	adds	r3, #40	; 0x28
 800b12a:	2101      	movs	r1, #1
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 f9cf 	bl	800c4d0 <RCCEx_PLL3_Config>
 800b132:	4603      	mov	r3, r0
 800b134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d003      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	2100      	movs	r1, #0
 800b152:	6039      	str	r1, [r7, #0]
 800b154:	f003 0320 	and.w	r3, r3, #32
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b15e:	460b      	mov	r3, r1
 800b160:	4313      	orrs	r3, r2
 800b162:	d011      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b168:	3328      	adds	r3, #40	; 0x28
 800b16a:	2102      	movs	r1, #2
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 f9af 	bl	800c4d0 <RCCEx_PLL3_Config>
 800b172:	4603      	mov	r3, r0
 800b174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b184:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b188:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	e000      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b194:	2301      	movs	r3, #1
}
 800b196:	4618      	mov	r0, r3
 800b198:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b19c:	46bd      	mov	sp, r7
 800b19e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1a2:	bf00      	nop
 800b1a4:	58024400 	.word	0x58024400

0800b1a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b090      	sub	sp, #64	; 0x40
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b1ba:	430b      	orrs	r3, r1
 800b1bc:	f040 8094 	bne.w	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1c0:	4b9b      	ldr	r3, [pc, #620]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	f200 8087 	bhi.w	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1d2:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b1ed 	.word	0x0800b1ed
 800b1dc:	0800b215 	.word	0x0800b215
 800b1e0:	0800b23d 	.word	0x0800b23d
 800b1e4:	0800b2d9 	.word	0x0800b2d9
 800b1e8:	0800b265 	.word	0x0800b265
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1ec:	4b90      	ldr	r3, [pc, #576]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f8:	d108      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 ff62 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	f000 bc93 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b210:	f000 bc8f 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b214:	4b86      	ldr	r3, [pc, #536]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b21c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b220:	d108      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b222:	f107 0318 	add.w	r3, r7, #24
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fca6 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b230:	f000 bc7f 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b238:	f000 bc7b 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b23c:	4b7c      	ldr	r3, [pc, #496]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b248:	d108      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b24a:	f107 030c 	add.w	r3, r7, #12
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fde6 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b258:	f000 bc6b 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b25c:	2300      	movs	r3, #0
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b260:	f000 bc67 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b264:	4b72      	ldr	r3, [pc, #456]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b26e:	4b70      	ldr	r3, [pc, #448]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0304 	and.w	r3, r3, #4
 800b276:	2b04      	cmp	r3, #4
 800b278:	d10c      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d109      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b280:	4b6b      	ldr	r3, [pc, #428]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	08db      	lsrs	r3, r3, #3
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	4a6a      	ldr	r2, [pc, #424]	; (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b28c:	fa22 f303 	lsr.w	r3, r2, r3
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b292:	e01f      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b294:	4b66      	ldr	r3, [pc, #408]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a0:	d106      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2a8:	d102      	bne.n	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2aa:	4b63      	ldr	r3, [pc, #396]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ae:	e011      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2b0:	4b5f      	ldr	r3, [pc, #380]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2bc:	d106      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c4:	d102      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2c6:	4b5d      	ldr	r3, [pc, #372]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2ca:	e003      	b.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2d0:	f000 bc2f 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2d4:	f000 bc2d 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2d8:	4b59      	ldr	r3, [pc, #356]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2dc:	f000 bc29 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e4:	f000 bc25 	b.w	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b2f0:	430b      	orrs	r3, r1
 800b2f2:	f040 80a7 	bne.w	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b2f6:	4b4e      	ldr	r3, [pc, #312]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b2fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b306:	d054      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b30e:	f200 808b 	bhi.w	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b318:	f000 8083 	beq.w	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b322:	f200 8081 	bhi.w	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b32c:	d02f      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b334:	d878      	bhi.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b342:	d012      	beq.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b344:	e070      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b346:	4b3a      	ldr	r3, [pc, #232]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b352:	d107      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 feb5 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b362:	e3e6      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b368:	e3e3      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b36a:	4b31      	ldr	r3, [pc, #196]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b376:	d107      	bne.n	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b378:	f107 0318 	add.w	r3, r7, #24
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fbfb 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b386:	e3d4      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b388:	2300      	movs	r3, #0
 800b38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38c:	e3d1      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b38e:	4b28      	ldr	r3, [pc, #160]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b39a:	d107      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b39c:	f107 030c 	add.w	r3, r7, #12
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fd3d 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e3c2      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b0:	e3bf      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3b2:	4b1f      	ldr	r3, [pc, #124]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3bc:	4b1c      	ldr	r3, [pc, #112]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b04      	cmp	r3, #4
 800b3c6:	d10c      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ce:	4b18      	ldr	r3, [pc, #96]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	08db      	lsrs	r3, r3, #3
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	4a16      	ldr	r2, [pc, #88]	; (800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b3da:	fa22 f303 	lsr.w	r3, r2, r3
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e0:	e01e      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3e2:	4b13      	ldr	r3, [pc, #76]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ee:	d106      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f6:	d102      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3fc:	e010      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b40a:	d106      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b412:	d102      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b418:	e002      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b41e:	e388      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b420:	e387      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b422:	4b07      	ldr	r3, [pc, #28]	; (800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b426:	e384      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b42c:	e381      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b42e:	bf00      	nop
 800b430:	58024400 	.word	0x58024400
 800b434:	03d09000 	.word	0x03d09000
 800b438:	003d0900 	.word	0x003d0900
 800b43c:	02faf080 	.word	0x02faf080
 800b440:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b444:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b448:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b44c:	430b      	orrs	r3, r1
 800b44e:	f040 809c 	bne.w	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b452:	4b9e      	ldr	r3, [pc, #632]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b456:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b45a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b462:	d054      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b46a:	f200 808b 	bhi.w	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b474:	f000 8083 	beq.w	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b47e:	f200 8081 	bhi.w	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b488:	d02f      	beq.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b490:	d878      	bhi.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	2b00      	cmp	r3, #0
 800b496:	d004      	beq.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b49e:	d012      	beq.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b4a0:	e070      	b.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4a2:	4b8a      	ldr	r3, [pc, #552]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ae:	d107      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fe07 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4be:	e338      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c4:	e335      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4c6:	4b81      	ldr	r3, [pc, #516]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4d2:	d107      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4d4:	f107 0318 	add.w	r3, r7, #24
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fb4d 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e2:	e326      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e8:	e323      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ea:	4b78      	ldr	r3, [pc, #480]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f6:	d107      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4f8:	f107 030c 	add.w	r3, r7, #12
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 fc8f 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b506:	e314      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b50c:	e311      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b50e:	4b6f      	ldr	r3, [pc, #444]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b512:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b516:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b518:	4b6c      	ldr	r3, [pc, #432]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 0304 	and.w	r3, r3, #4
 800b520:	2b04      	cmp	r3, #4
 800b522:	d10c      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	2b00      	cmp	r3, #0
 800b528:	d109      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b52a:	4b68      	ldr	r3, [pc, #416]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	08db      	lsrs	r3, r3, #3
 800b530:	f003 0303 	and.w	r3, r3, #3
 800b534:	4a66      	ldr	r2, [pc, #408]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b536:	fa22 f303 	lsr.w	r3, r2, r3
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b53c:	e01e      	b.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b53e:	4b63      	ldr	r3, [pc, #396]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b54a:	d106      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b552:	d102      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b554:	4b5f      	ldr	r3, [pc, #380]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b558:	e010      	b.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b55a:	4b5c      	ldr	r3, [pc, #368]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b566:	d106      	bne.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56e:	d102      	bne.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b570:	4b59      	ldr	r3, [pc, #356]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b574:	e002      	b.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b57a:	e2da      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b57c:	e2d9      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b57e:	4b57      	ldr	r3, [pc, #348]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b582:	e2d6      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b588:	e2d3      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b58e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b592:	430b      	orrs	r3, r1
 800b594:	f040 80a7 	bne.w	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b598:	4b4c      	ldr	r3, [pc, #304]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b59c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b5a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5a8:	d055      	beq.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b0:	f200 8096 	bhi.w	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5ba:	f000 8084 	beq.w	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5c4:	f200 808c 	bhi.w	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ce:	d030      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d6:	f200 8083 	bhi.w	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e6:	d012      	beq.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b5e8:	e07a      	b.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5ea:	4b38      	ldr	r3, [pc, #224]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5f6:	d107      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fd63 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b606:	e294      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b60c:	e291      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b60e:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b61a:	d107      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b61c:	f107 0318 	add.w	r3, r7, #24
 800b620:	4618      	mov	r0, r3
 800b622:	f000 faa9 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b62a:	e282      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b630:	e27f      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b632:	4b26      	ldr	r3, [pc, #152]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63e:	d107      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b640:	f107 030c 	add.w	r3, r7, #12
 800b644:	4618      	mov	r0, r3
 800b646:	f000 fbeb 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64e:	e270      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b654:	e26d      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b656:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b65a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b660:	4b1a      	ldr	r3, [pc, #104]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d10c      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b672:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	08db      	lsrs	r3, r3, #3
 800b678:	f003 0303 	and.w	r3, r3, #3
 800b67c:	4a14      	ldr	r2, [pc, #80]	; (800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b67e:	fa22 f303 	lsr.w	r3, r2, r3
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b684:	e01e      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b692:	d106      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b69a:	d102      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b69c:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a0:	e010      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ae:	d106      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b6:	d102      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6b8:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6bc:	e002      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6c2:	e236      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6c4:	e235      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ca:	e232      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6cc:	58024400 	.word	0x58024400
 800b6d0:	03d09000 	.word	0x03d09000
 800b6d4:	003d0900 	.word	0x003d0900
 800b6d8:	02faf080 	.word	0x02faf080
 800b6dc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e4:	e225      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b6e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ea:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	f040 8085 	bne.w	800b7fe <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b6f4:	4b9c      	ldr	r3, [pc, #624]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6f8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b6fc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b704:	d06b      	beq.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b70c:	d874      	bhi.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b714:	d056      	beq.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b718:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b71c:	d86c      	bhi.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b724:	d03b      	beq.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b72c:	d864      	bhi.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b734:	d021      	beq.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b73c:	d85c      	bhi.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d004      	beq.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b74a:	d004      	beq.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b74c:	e054      	b.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b74e:	f7fe fb5f 	bl	8009e10 <HAL_RCC_GetPCLK1Freq>
 800b752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b754:	e1ed      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b756:	4b84      	ldr	r3, [pc, #528]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b75e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b762:	d107      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b764:	f107 0318 	add.w	r3, r7, #24
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fa05 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b772:	e1de      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b778:	e1db      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b77a:	4b7b      	ldr	r3, [pc, #492]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b786:	d107      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b788:	f107 030c 	add.w	r3, r7, #12
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 fb47 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b796:	e1cc      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b79c:	e1c9      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b79e:	4b72      	ldr	r3, [pc, #456]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0304 	and.w	r3, r3, #4
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d109      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7aa:	4b6f      	ldr	r3, [pc, #444]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	08db      	lsrs	r3, r3, #3
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	4a6d      	ldr	r2, [pc, #436]	; (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7bc:	e1b9      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7c2:	e1b6      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7c4:	4b68      	ldr	r3, [pc, #416]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b7d2:	4b67      	ldr	r3, [pc, #412]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d6:	e1ac      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7dc:	e1a9      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7de:	4b62      	ldr	r3, [pc, #392]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ea:	d102      	bne.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b7ec:	4b61      	ldr	r3, [pc, #388]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f0:	e19f      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f6:	e19c      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7fc:	e199      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b7fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b802:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b806:	430b      	orrs	r3, r1
 800b808:	d173      	bne.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b80a:	4b57      	ldr	r3, [pc, #348]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b812:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b81a:	d02f      	beq.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b822:	d863      	bhi.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b830:	d012      	beq.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b832:	e05b      	b.n	800b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b834:	4b4c      	ldr	r3, [pc, #304]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b83c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b840:	d107      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b842:	f107 0318 	add.w	r3, r7, #24
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f996 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b850:	e16f      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b856:	e16c      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b858:	4b43      	ldr	r3, [pc, #268]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b864:	d107      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b866:	f107 030c 	add.w	r3, r7, #12
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fad8 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b874:	e15d      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b87a:	e15a      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b87c:	4b3a      	ldr	r3, [pc, #232]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b87e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b884:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b886:	4b38      	ldr	r3, [pc, #224]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0304 	and.w	r3, r3, #4
 800b88e:	2b04      	cmp	r3, #4
 800b890:	d10c      	bne.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b894:	2b00      	cmp	r3, #0
 800b896:	d109      	bne.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b898:	4b33      	ldr	r3, [pc, #204]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	08db      	lsrs	r3, r3, #3
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	4a32      	ldr	r2, [pc, #200]	; (800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b8a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8aa:	e01e      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8ac:	4b2e      	ldr	r3, [pc, #184]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b8:	d106      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c0:	d102      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8c2:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c6:	e010      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c8:	4b27      	ldr	r3, [pc, #156]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d4:	d106      	bne.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8dc:	d102      	bne.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8de:	4b25      	ldr	r3, [pc, #148]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e2:	e002      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8e8:	e123      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8ea:	e122      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f0:	e11f      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8f6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b8fa:	430b      	orrs	r3, r1
 800b8fc:	d13c      	bne.n	800b978 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b8fe:	4b1a      	ldr	r3, [pc, #104]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b906:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d004      	beq.n	800b918 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b914:	d012      	beq.n	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b916:	e023      	b.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b918:	4b13      	ldr	r3, [pc, #76]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b924:	d107      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 fbcc 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b934:	e0fd      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b93a:	e0fa      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b93c:	4b0a      	ldr	r3, [pc, #40]	; (800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b948:	d107      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b94a:	f107 0318 	add.w	r3, r7, #24
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f912 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b958:	e0eb      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b95e:	e0e8      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b964:	e0e5      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b966:	bf00      	nop
 800b968:	58024400 	.word	0x58024400
 800b96c:	03d09000 	.word	0x03d09000
 800b970:	003d0900 	.word	0x003d0900
 800b974:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b97c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b980:	430b      	orrs	r3, r1
 800b982:	f040 8085 	bne.w	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b986:	4b6d      	ldr	r3, [pc, #436]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b98a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b98e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b996:	d06b      	beq.n	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b99e:	d874      	bhi.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9a6:	d056      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ae:	d86c      	bhi.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9b6:	d03b      	beq.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b9be:	d864      	bhi.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9c6:	d021      	beq.n	800ba0c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ce:	d85c      	bhi.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9dc:	d004      	beq.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b9de:	e054      	b.n	800ba8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b9e0:	f000 f8b4 	bl	800bb4c <HAL_RCCEx_GetD3PCLK1Freq>
 800b9e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b9e6:	e0a4      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e8:	4b54      	ldr	r3, [pc, #336]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9f4:	d107      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9f6:	f107 0318 	add.w	r3, r7, #24
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f8bc 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba04:	e095      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba0a:	e092      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba0c:	4b4b      	ldr	r3, [pc, #300]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba18:	d107      	bne.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba1a:	f107 030c 	add.w	r3, r7, #12
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 f9fe 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba28:	e083      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba2e:	e080      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba30:	4b42      	ldr	r3, [pc, #264]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d109      	bne.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba3c:	4b3f      	ldr	r3, [pc, #252]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	08db      	lsrs	r3, r3, #3
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	4a3e      	ldr	r2, [pc, #248]	; (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ba48:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba4e:	e070      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba54:	e06d      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba56:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba62:	d102      	bne.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ba64:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba68:	e063      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6e:	e060      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba70:	4b32      	ldr	r3, [pc, #200]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba7c:	d102      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ba7e:	4b32      	ldr	r3, [pc, #200]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba82:	e056      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba88:	e053      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba8e:	e050      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	d148      	bne.n	800bb2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba9c:	4b27      	ldr	r3, [pc, #156]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800baa4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baac:	d02a      	beq.n	800bb04 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bab4:	d838      	bhi.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac2:	d00d      	beq.n	800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bac4:	e030      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bac6:	4b1d      	ldr	r3, [pc, #116]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bace:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bad2:	d102      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bad4:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad8:	e02b      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bade:	e028      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bae0:	4b16      	ldr	r3, [pc, #88]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baec:	d107      	bne.n	800bafe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fae8 	bl	800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafc:	e019      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb02:	e016      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb10:	d107      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb12:	f107 0318 	add.w	r3, r7, #24
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f82e 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb20:	e007      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb26:	e004      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb2c:	e001      	b.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3740      	adds	r7, #64	; 0x40
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	58024400 	.word	0x58024400
 800bb40:	03d09000 	.word	0x03d09000
 800bb44:	003d0900 	.word	0x003d0900
 800bb48:	02faf080 	.word	0x02faf080

0800bb4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb50:	f7fe f92e 	bl	8009db0 <HAL_RCC_GetHCLKFreq>
 800bb54:	4602      	mov	r2, r0
 800bb56:	4b06      	ldr	r3, [pc, #24]	; (800bb70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	091b      	lsrs	r3, r3, #4
 800bb5c:	f003 0307 	and.w	r3, r3, #7
 800bb60:	4904      	ldr	r1, [pc, #16]	; (800bb74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb62:	5ccb      	ldrb	r3, [r1, r3]
 800bb64:	f003 031f 	and.w	r3, r3, #31
 800bb68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	58024400 	.word	0x58024400
 800bb74:	0801a32c 	.word	0x0801a32c

0800bb78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b089      	sub	sp, #36	; 0x24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb80:	4ba1      	ldr	r3, [pc, #644]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	f003 0303 	and.w	r3, r3, #3
 800bb88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb8a:	4b9f      	ldr	r3, [pc, #636]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	0b1b      	lsrs	r3, r3, #12
 800bb90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb96:	4b9c      	ldr	r3, [pc, #624]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9a:	091b      	lsrs	r3, r3, #4
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bba2:	4b99      	ldr	r3, [pc, #612]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba6:	08db      	lsrs	r3, r3, #3
 800bba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	fb02 f303 	mul.w	r3, r2, r3
 800bbb2:	ee07 3a90 	vmov	s15, r3
 800bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8111 	beq.w	800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	f000 8083 	beq.w	800bcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	f200 80a1 	bhi.w	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d056      	beq.n	800bc90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbe2:	e099      	b.n	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbe4:	4b88      	ldr	r3, [pc, #544]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d02d      	beq.n	800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbf0:	4b85      	ldr	r3, [pc, #532]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	08db      	lsrs	r3, r3, #3
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	4a84      	ldr	r2, [pc, #528]	; (800be0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbfc:	fa22 f303 	lsr.w	r3, r2, r3
 800bc00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1a:	4b7b      	ldr	r3, [pc, #492]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc4a:	e087      	b.n	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5e:	4b6a      	ldr	r3, [pc, #424]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc8e:	e065      	b.n	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca2:	4b59      	ldr	r3, [pc, #356]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcd2:	e043      	b.n	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce6:	4b48      	ldr	r3, [pc, #288]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcfa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd16:	e021      	b.n	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2a:	4b37      	ldr	r3, [pc, #220]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bd5c:	4b2a      	ldr	r3, [pc, #168]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd60:	0a5b      	lsrs	r3, r3, #9
 800bd62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd76:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd82:	ee17 2a90 	vmov	r2, s15
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd8a:	4b1f      	ldr	r3, [pc, #124]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8e:	0c1b      	lsrs	r3, r3, #16
 800bd90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bda0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bda4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bda8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdb0:	ee17 2a90 	vmov	r2, s15
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bdb8:	4b13      	ldr	r3, [pc, #76]	; (800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdbc:	0e1b      	lsrs	r3, r3, #24
 800bdbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdc2:	ee07 3a90 	vmov	s15, r3
 800bdc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdde:	ee17 2a90 	vmov	r2, s15
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bde6:	e008      	b.n	800bdfa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	609a      	str	r2, [r3, #8]
}
 800bdfa:	bf00      	nop
 800bdfc:	3724      	adds	r7, #36	; 0x24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	58024400 	.word	0x58024400
 800be0c:	03d09000 	.word	0x03d09000
 800be10:	46000000 	.word	0x46000000
 800be14:	4c742400 	.word	0x4c742400
 800be18:	4a742400 	.word	0x4a742400
 800be1c:	4c3ebc20 	.word	0x4c3ebc20

0800be20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be20:	b480      	push	{r7}
 800be22:	b089      	sub	sp, #36	; 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be28:	4ba1      	ldr	r3, [pc, #644]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2c:	f003 0303 	and.w	r3, r3, #3
 800be30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be32:	4b9f      	ldr	r3, [pc, #636]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be36:	0d1b      	lsrs	r3, r3, #20
 800be38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be3e:	4b9c      	ldr	r3, [pc, #624]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	0a1b      	lsrs	r3, r3, #8
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be4a:	4b99      	ldr	r3, [pc, #612]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4e:	08db      	lsrs	r3, r3, #3
 800be50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	fb02 f303 	mul.w	r3, r2, r3
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 8111 	beq.w	800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	2b02      	cmp	r3, #2
 800be72:	f000 8083 	beq.w	800bf7c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	f200 80a1 	bhi.w	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d056      	beq.n	800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be8a:	e099      	b.n	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be8c:	4b88      	ldr	r3, [pc, #544]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f003 0320 	and.w	r3, r3, #32
 800be94:	2b00      	cmp	r3, #0
 800be96:	d02d      	beq.n	800bef4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be98:	4b85      	ldr	r3, [pc, #532]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	08db      	lsrs	r3, r3, #3
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	4a84      	ldr	r2, [pc, #528]	; (800c0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bea4:	fa22 f303 	lsr.w	r3, r2, r3
 800bea8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	ee07 3a90 	vmov	s15, r3
 800beb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bec2:	4b7b      	ldr	r3, [pc, #492]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beca:	ee07 3a90 	vmov	s15, r3
 800bece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bed6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bef2:	e087      	b.n	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf06:	4b6a      	ldr	r3, [pc, #424]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf1a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf36:	e065      	b.n	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4a:	4b59      	ldr	r3, [pc, #356]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf5e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf7a:	e043      	b.n	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf86:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8e:	4b48      	ldr	r3, [pc, #288]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfbe:	e021      	b.n	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd2:	4b37      	ldr	r3, [pc, #220]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c002:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c004:	4b2a      	ldr	r3, [pc, #168]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c008:	0a5b      	lsrs	r3, r3, #9
 800c00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c02a:	ee17 2a90 	vmov	r2, s15
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c032:	4b1f      	ldr	r3, [pc, #124]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c036:	0c1b      	lsrs	r3, r3, #16
 800c038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c03c:	ee07 3a90 	vmov	s15, r3
 800c040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c048:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c04c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c058:	ee17 2a90 	vmov	r2, s15
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c060:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c064:	0e1b      	lsrs	r3, r3, #24
 800c066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c07a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c07e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c086:	ee17 2a90 	vmov	r2, s15
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c08e:	e008      	b.n	800c0a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	609a      	str	r2, [r3, #8]
}
 800c0a2:	bf00      	nop
 800c0a4:	3724      	adds	r7, #36	; 0x24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	58024400 	.word	0x58024400
 800c0b4:	03d09000 	.word	0x03d09000
 800c0b8:	46000000 	.word	0x46000000
 800c0bc:	4c742400 	.word	0x4c742400
 800c0c0:	4a742400 	.word	0x4a742400
 800c0c4:	4c3ebc20 	.word	0x4c3ebc20

0800c0c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b089      	sub	sp, #36	; 0x24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0d0:	4ba0      	ldr	r3, [pc, #640]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d4:	f003 0303 	and.w	r3, r3, #3
 800c0d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c0da:	4b9e      	ldr	r3, [pc, #632]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0de:	091b      	lsrs	r3, r3, #4
 800c0e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c0e6:	4b9b      	ldr	r3, [pc, #620]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c0f0:	4b98      	ldr	r3, [pc, #608]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f4:	08db      	lsrs	r3, r3, #3
 800c0f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	fb02 f303 	mul.w	r3, r2, r3
 800c100:	ee07 3a90 	vmov	s15, r3
 800c104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c108:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 8111 	beq.w	800c336 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	2b02      	cmp	r3, #2
 800c118:	f000 8083 	beq.w	800c222 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	f200 80a1 	bhi.w	800c266 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d003      	beq.n	800c132 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d056      	beq.n	800c1de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c130:	e099      	b.n	800c266 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c132:	4b88      	ldr	r3, [pc, #544]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0320 	and.w	r3, r3, #32
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d02d      	beq.n	800c19a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c13e:	4b85      	ldr	r3, [pc, #532]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	08db      	lsrs	r3, r3, #3
 800c144:	f003 0303 	and.w	r3, r3, #3
 800c148:	4a83      	ldr	r2, [pc, #524]	; (800c358 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c14a:	fa22 f303 	lsr.w	r3, r2, r3
 800c14e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	ee07 3a90 	vmov	s15, r3
 800c156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c168:	4b7a      	ldr	r3, [pc, #488]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c178:	ed97 6a03 	vldr	s12, [r7, #12]
 800c17c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c18c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c190:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c194:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c198:	e087      	b.n	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	ee07 3a90 	vmov	s15, r3
 800c1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ac:	4b69      	ldr	r3, [pc, #420]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1dc:	e065      	b.n	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c364 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1f0:	4b58      	ldr	r3, [pc, #352]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c200:	ed97 6a03 	vldr	s12, [r7, #12]
 800c204:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c20c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c220:	e043      	b.n	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c368 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c234:	4b47      	ldr	r3, [pc, #284]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c244:	ed97 6a03 	vldr	s12, [r7, #12]
 800c248:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c24c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c260:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c264:	e021      	b.n	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c270:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c360 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c278:	4b36      	ldr	r3, [pc, #216]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c288:	ed97 6a03 	vldr	s12, [r7, #12]
 800c28c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c35c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c29c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c2aa:	4b2a      	ldr	r3, [pc, #168]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ae:	0a5b      	lsrs	r3, r3, #9
 800c2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b4:	ee07 3a90 	vmov	s15, r3
 800c2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d0:	ee17 2a90 	vmov	r2, s15
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c2d8:	4b1e      	ldr	r3, [pc, #120]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2dc:	0c1b      	lsrs	r3, r3, #16
 800c2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e2:	ee07 3a90 	vmov	s15, r3
 800c2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2fe:	ee17 2a90 	vmov	r2, s15
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c306:	4b13      	ldr	r3, [pc, #76]	; (800c354 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30a:	0e1b      	lsrs	r3, r3, #24
 800c30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c310:	ee07 3a90 	vmov	s15, r3
 800c314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c31c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c320:	edd7 6a07 	vldr	s13, [r7, #28]
 800c324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32c:	ee17 2a90 	vmov	r2, s15
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c334:	e008      	b.n	800c348 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	609a      	str	r2, [r3, #8]
}
 800c348:	bf00      	nop
 800c34a:	3724      	adds	r7, #36	; 0x24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	58024400 	.word	0x58024400
 800c358:	03d09000 	.word	0x03d09000
 800c35c:	46000000 	.word	0x46000000
 800c360:	4c742400 	.word	0x4c742400
 800c364:	4a742400 	.word	0x4a742400
 800c368:	4c3ebc20 	.word	0x4c3ebc20

0800c36c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c37a:	4b53      	ldr	r3, [pc, #332]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	2b03      	cmp	r3, #3
 800c384:	d101      	bne.n	800c38a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e099      	b.n	800c4be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c38a:	4b4f      	ldr	r3, [pc, #316]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a4e      	ldr	r2, [pc, #312]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c390:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c396:	f7f6 fe79 	bl	800308c <HAL_GetTick>
 800c39a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c39c:	e008      	b.n	800c3b0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c39e:	f7f6 fe75 	bl	800308c <HAL_GetTick>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d901      	bls.n	800c3b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e086      	b.n	800c4be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3b0:	4b45      	ldr	r3, [pc, #276]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f0      	bne.n	800c39e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3bc:	4b42      	ldr	r3, [pc, #264]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	031b      	lsls	r3, r3, #12
 800c3ca:	493f      	ldr	r1, [pc, #252]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	628b      	str	r3, [r1, #40]	; 0x28
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	025b      	lsls	r3, r3, #9
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	431a      	orrs	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	041b      	lsls	r3, r3, #16
 800c3ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	061b      	lsls	r3, r3, #24
 800c3fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c400:	4931      	ldr	r1, [pc, #196]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c402:	4313      	orrs	r3, r2
 800c404:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c406:	4b30      	ldr	r3, [pc, #192]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	492d      	ldr	r1, [pc, #180]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c414:	4313      	orrs	r3, r2
 800c416:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c418:	4b2b      	ldr	r3, [pc, #172]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	f023 0220 	bic.w	r2, r3, #32
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	4928      	ldr	r1, [pc, #160]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c426:	4313      	orrs	r3, r2
 800c428:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c42a:	4b27      	ldr	r3, [pc, #156]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	4a26      	ldr	r2, [pc, #152]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c430:	f023 0310 	bic.w	r3, r3, #16
 800c434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c436:	4b24      	ldr	r3, [pc, #144]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c43a:	4b24      	ldr	r3, [pc, #144]	; (800c4cc <RCCEx_PLL2_Config+0x160>)
 800c43c:	4013      	ands	r3, r2
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	69d2      	ldr	r2, [r2, #28]
 800c442:	00d2      	lsls	r2, r2, #3
 800c444:	4920      	ldr	r1, [pc, #128]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c446:	4313      	orrs	r3, r2
 800c448:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c44a:	4b1f      	ldr	r3, [pc, #124]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44e:	4a1e      	ldr	r2, [pc, #120]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c450:	f043 0310 	orr.w	r3, r3, #16
 800c454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c45c:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	4a19      	ldr	r2, [pc, #100]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c466:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c468:	e00f      	b.n	800c48a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d106      	bne.n	800c47e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c470:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	4a14      	ldr	r2, [pc, #80]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c47a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c47c:	e005      	b.n	800c48a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c47e:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	4a11      	ldr	r2, [pc, #68]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c488:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c48a:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a0e      	ldr	r2, [pc, #56]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c496:	f7f6 fdf9 	bl	800308c <HAL_GetTick>
 800c49a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c49c:	e008      	b.n	800c4b0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c49e:	f7f6 fdf5 	bl	800308c <HAL_GetTick>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	d901      	bls.n	800c4b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e006      	b.n	800c4be <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4b0:	4b05      	ldr	r3, [pc, #20]	; (800c4c8 <RCCEx_PLL2_Config+0x15c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d0f0      	beq.n	800c49e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	58024400 	.word	0x58024400
 800c4cc:	ffff0007 	.word	0xffff0007

0800c4d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4de:	4b53      	ldr	r3, [pc, #332]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d101      	bne.n	800c4ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e099      	b.n	800c622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c4ee:	4b4f      	ldr	r3, [pc, #316]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a4e      	ldr	r2, [pc, #312]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c4f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4fa:	f7f6 fdc7 	bl	800308c <HAL_GetTick>
 800c4fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c500:	e008      	b.n	800c514 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c502:	f7f6 fdc3 	bl	800308c <HAL_GetTick>
 800c506:	4602      	mov	r2, r0
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d901      	bls.n	800c514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e086      	b.n	800c622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c514:	4b45      	ldr	r3, [pc, #276]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f0      	bne.n	800c502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c520:	4b42      	ldr	r3, [pc, #264]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c524:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	051b      	lsls	r3, r3, #20
 800c52e:	493f      	ldr	r1, [pc, #252]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c530:	4313      	orrs	r3, r2
 800c532:	628b      	str	r3, [r1, #40]	; 0x28
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	3b01      	subs	r3, #1
 800c53a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	3b01      	subs	r3, #1
 800c544:	025b      	lsls	r3, r3, #9
 800c546:	b29b      	uxth	r3, r3
 800c548:	431a      	orrs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	3b01      	subs	r3, #1
 800c550:	041b      	lsls	r3, r3, #16
 800c552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c556:	431a      	orrs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	061b      	lsls	r3, r3, #24
 800c560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c564:	4931      	ldr	r1, [pc, #196]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c566:	4313      	orrs	r3, r2
 800c568:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c56a:	4b30      	ldr	r3, [pc, #192]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	492d      	ldr	r1, [pc, #180]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c578:	4313      	orrs	r3, r2
 800c57a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c57c:	4b2b      	ldr	r3, [pc, #172]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c580:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	4928      	ldr	r1, [pc, #160]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c58e:	4b27      	ldr	r3, [pc, #156]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	4a26      	ldr	r2, [pc, #152]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c59a:	4b24      	ldr	r3, [pc, #144]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c59e:	4b24      	ldr	r3, [pc, #144]	; (800c630 <RCCEx_PLL3_Config+0x160>)
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	69d2      	ldr	r2, [r2, #28]
 800c5a6:	00d2      	lsls	r2, r2, #3
 800c5a8:	4920      	ldr	r1, [pc, #128]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c5ae:	4b1f      	ldr	r3, [pc, #124]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b2:	4a1e      	ldr	r2, [pc, #120]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5c0:	4b1a      	ldr	r3, [pc, #104]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c4:	4a19      	ldr	r2, [pc, #100]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5cc:	e00f      	b.n	800c5ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d106      	bne.n	800c5e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5d4:	4b15      	ldr	r3, [pc, #84]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d8:	4a14      	ldr	r2, [pc, #80]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c5de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c5e0:	e005      	b.n	800c5ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c5e2:	4b12      	ldr	r3, [pc, #72]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	4a11      	ldr	r2, [pc, #68]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a0e      	ldr	r2, [pc, #56]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c5f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5fa:	f7f6 fd47 	bl	800308c <HAL_GetTick>
 800c5fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c600:	e008      	b.n	800c614 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c602:	f7f6 fd43 	bl	800308c <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e006      	b.n	800c622 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c614:	4b05      	ldr	r3, [pc, #20]	; (800c62c <RCCEx_PLL3_Config+0x15c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f0      	beq.n	800c602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	58024400 	.word	0x58024400
 800c630:	ffff0007 	.word	0xffff0007

0800c634 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08a      	sub	sp, #40	; 0x28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d101      	bne.n	800c646 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e075      	b.n	800c732 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7f5 fdc7 	bl	80021ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2204      	movs	r2, #4
 800c662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 f868 	bl	800c73c <HAL_SD_InitCard>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	e05d      	b.n	800c732 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c676:	f107 0308 	add.w	r3, r7, #8
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fdaf 	bl	800d1e0 <HAL_SD_GetCardStatus>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e052      	b.n	800c732 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c68c:	7e3b      	ldrb	r3, [r7, #24]
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c692:	7e7b      	ldrb	r3, [r7, #25]
 800c694:	b2db      	uxtb	r3, r3
 800c696:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d10a      	bne.n	800c6b6 <HAL_SD_Init+0x82>
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <HAL_SD_Init+0x78>
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d004      	beq.n	800c6b6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6b2:	659a      	str	r2, [r3, #88]	; 0x58
 800c6b4:	e00b      	b.n	800c6ce <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d104      	bne.n	800c6c8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6c4:	659a      	str	r2, [r3, #88]	; 0x58
 800c6c6:	e002      	b.n	800c6ce <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fe6d 	bl	800d3b4 <HAL_SD_ConfigWideBusOperation>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e026      	b.n	800c732 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c6e4:	f7f6 fcd2 	bl	800308c <HAL_GetTick>
 800c6e8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c6ea:	e011      	b.n	800c710 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c6ec:	f7f6 fcce 	bl	800308c <HAL_GetTick>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fa:	d109      	bne.n	800c710 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c702:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e010      	b.n	800c732 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 ff61 	bl	800d5d8 <HAL_SD_GetCardState>
 800c716:	4603      	mov	r3, r0
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d1e7      	bne.n	800c6ec <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3728      	adds	r7, #40	; 0x28
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
	...

0800c73c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b08d      	sub	sp, #52	; 0x34
 800c740:	af02      	add	r7, sp, #8
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c748:	2300      	movs	r3, #0
 800c74a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c74c:	2300      	movs	r3, #0
 800c74e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c750:	2300      	movs	r3, #0
 800c752:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c754:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c758:	f04f 0100 	mov.w	r1, #0
 800c75c:	f7fe fd24 	bl	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c760:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	2b00      	cmp	r3, #0
 800c766:	d109      	bne.n	800c77c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c776:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e070      	b.n	800c85e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	0a1b      	lsrs	r3, r3, #8
 800c780:	4a39      	ldr	r2, [pc, #228]	; (800c868 <HAL_SD_InitCard+0x12c>)
 800c782:	fba2 2303 	umull	r2, r3, r2, r3
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681c      	ldr	r4, [r3, #0]
 800c78e:	466a      	mov	r2, sp
 800c790:	f107 0318 	add.w	r3, r7, #24
 800c794:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c798:	e882 0003 	stmia.w	r2, {r0, r1}
 800c79c:	f107 030c 	add.w	r3, r7, #12
 800c7a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f004 f94e 	bl	8010a44 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f004 f991 	bl	8010ad4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d005      	beq.n	800c7c4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d007      	beq.n	800c7da <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c7ca:	4a28      	ldr	r2, [pc, #160]	; (800c86c <HAL_SD_InitCard+0x130>)
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7f6 fc65 	bl	80030a4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 ffea 	bl	800d7b4 <SD_PowerON>
 800c7e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e02e      	b.n	800c85e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 ff09 	bl	800d618 <SD_InitCard>
 800c806:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2201      	movs	r2, #1
 800c812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	431a      	orrs	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c822:	2301      	movs	r3, #1
 800c824:	e01b      	b.n	800c85e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c82e:	4618      	mov	r0, r3
 800c830:	f004 f9e6 	bl	8010c00 <SDMMC_CmdBlockLength>
 800c834:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c836:	6a3b      	ldr	r3, [r7, #32]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00f      	beq.n	800c85c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a0b      	ldr	r2, [pc, #44]	; (800c870 <HAL_SD_InitCard+0x134>)
 800c842:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c848:	6a3b      	ldr	r3, [r7, #32]
 800c84a:	431a      	orrs	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e000      	b.n	800c85e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	372c      	adds	r7, #44	; 0x2c
 800c862:	46bd      	mov	sp, r7
 800c864:	bd90      	pop	{r4, r7, pc}
 800c866:	bf00      	nop
 800c868:	014f8b59 	.word	0x014f8b59
 800c86c:	00012110 	.word	0x00012110
 800c870:	1fe00fff 	.word	0x1fe00fff

0800c874 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d107      	bne.n	800c89c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c890:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e08d      	b.n	800c9b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	f040 8086 	bne.w	800c9b6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	441a      	add	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d907      	bls.n	800c8ce <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e074      	b.n	800c9b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2203      	movs	r2, #3
 800c8d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	025a      	lsls	r2, r3, #9
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d002      	beq.n	800c8fa <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	025b      	lsls	r3, r3, #9
 800c8f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	025b      	lsls	r3, r3, #9
 800c904:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c906:	2390      	movs	r3, #144	; 0x90
 800c908:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c90a:	2302      	movs	r3, #2
 800c90c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c90e:	2300      	movs	r3, #0
 800c910:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c912:	2300      	movs	r3, #0
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f107 0210 	add.w	r2, r7, #16
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f004 f941 	bl	8010ba8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68da      	ldr	r2, [r3, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c934:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2201      	movs	r2, #1
 800c944:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d90a      	bls.n	800c962 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2282      	movs	r2, #130	; 0x82
 800c950:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c958:	4618      	mov	r0, r3
 800c95a:	f004 f997 	bl	8010c8c <SDMMC_CmdReadMultiBlock>
 800c95e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c960:	e009      	b.n	800c976 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2281      	movs	r2, #129	; 0x81
 800c966:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c96e:	4618      	mov	r0, r3
 800c970:	f004 f969 	bl	8010c46 <SDMMC_CmdReadSingleBlock>
 800c974:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d012      	beq.n	800c9a2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a0f      	ldr	r2, [pc, #60]	; (800c9c0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	431a      	orrs	r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e00a      	b.n	800c9b8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c9b0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e000      	b.n	800c9b8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c9b6:	2302      	movs	r3, #2
  }
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3730      	adds	r7, #48	; 0x30
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	1fe00fff 	.word	0x1fe00fff

0800c9c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08c      	sub	sp, #48	; 0x30
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
 800c9d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d107      	bne.n	800c9ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e08d      	b.n	800cb08 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	f040 8086 	bne.w	800cb06 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	441a      	add	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d907      	bls.n	800ca1e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e074      	b.n	800cb08 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2203      	movs	r2, #3
 800ca22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	025a      	lsls	r2, r3, #9
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d002      	beq.n	800ca4a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ca44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca46:	025b      	lsls	r3, r3, #9
 800ca48:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	025b      	lsls	r3, r3, #9
 800ca54:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ca56:	2390      	movs	r3, #144	; 0x90
 800ca58:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ca62:	2300      	movs	r3, #0
 800ca64:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f107 0210 	add.w	r2, r7, #16
 800ca6e:	4611      	mov	r1, r2
 800ca70:	4618      	mov	r0, r3
 800ca72:	f004 f899 	bl	8010ba8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68da      	ldr	r2, [r3, #12]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca84:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2201      	movs	r2, #1
 800ca94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d90a      	bls.n	800cab2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	22a0      	movs	r2, #160	; 0xa0
 800caa0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caa8:	4618      	mov	r0, r3
 800caaa:	f004 f935 	bl	8010d18 <SDMMC_CmdWriteMultiBlock>
 800caae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cab0:	e009      	b.n	800cac6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2290      	movs	r2, #144	; 0x90
 800cab6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cabe:	4618      	mov	r0, r3
 800cac0:	f004 f907 	bl	8010cd2 <SDMMC_CmdWriteSingleBlock>
 800cac4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d012      	beq.n	800caf2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0f      	ldr	r2, [pc, #60]	; (800cb10 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	431a      	orrs	r2, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	e00a      	b.n	800cb08 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cb00:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb02:	2300      	movs	r3, #0
 800cb04:	e000      	b.n	800cb08 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cb06:	2302      	movs	r3, #2
  }
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3730      	adds	r7, #48	; 0x30
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	1fe00fff 	.word	0x1fe00fff

0800cb14 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d008      	beq.n	800cb42 <HAL_SD_IRQHandler+0x2e>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f001 f926 	bl	800dd8c <SD_Read_IT>
 800cb40:	e19a      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 80ac 	beq.w	800ccaa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	4b59      	ldr	r3, [pc, #356]	; (800cccc <HAL_SD_IRQHandler+0x1b8>)
 800cb68:	400b      	ands	r3, r1
 800cb6a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cb7a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb8a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d038      	beq.n	800cc08 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f003 0302 	and.w	r3, r3, #2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d104      	bne.n	800cbaa <HAL_SD_IRQHandler+0x96>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f003 0320 	and.w	r3, r3, #32
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d011      	beq.n	800cbce <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f004 f8d6 	bl	8010d60 <SDMMC_CmdStopTransfer>
 800cbb4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d008      	beq.n	800cbce <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	431a      	orrs	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f95b 	bl	800ce84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a3f      	ldr	r2, [pc, #252]	; (800ccd0 <HAL_SD_IRQHandler+0x1bc>)
 800cbd4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0301 	and.w	r3, r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d104      	bne.n	800cbf8 <HAL_SD_IRQHandler+0xe4>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d003      	beq.n	800cc00 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f006 f8d7 	bl	8012dac <HAL_SD_RxCpltCallback>
 800cbfe:	e13b      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f006 f8c9 	bl	8012d98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc06:	e137      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 8132 	beq.w	800ce78 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2200      	movs	r2, #0
 800cc22:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f003 0302 	and.w	r3, r3, #2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d104      	bne.n	800cc40 <HAL_SD_IRQHandler+0x12c>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f003 0320 	and.w	r3, r3, #32
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d011      	beq.n	800cc64 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f004 f88b 	bl	8010d60 <SDMMC_CmdStopTransfer>
 800cc4a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d008      	beq.n	800cc64 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f910 	bl	800ce84 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f003 0310 	and.w	r3, r3, #16
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <HAL_SD_IRQHandler+0x172>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f003 0320 	and.w	r3, r3, #32
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f006 f886 	bl	8012d98 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <HAL_SD_IRQHandler+0x18e>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f003 0302 	and.w	r3, r3, #2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 80eb 	beq.w	800ce78 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f006 f882 	bl	8012dac <HAL_SD_RxCpltCallback>
}
 800cca8:	e0e6      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00d      	beq.n	800ccd4 <HAL_SD_IRQHandler+0x1c0>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f003 0308 	and.w	r3, r3, #8
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d008      	beq.n	800ccd4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 f8a8 	bl	800de18 <SD_Write_IT>
 800ccc8:	e0d6      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
 800ccca:	bf00      	nop
 800cccc:	ffff3ec5 	.word	0xffff3ec5
 800ccd0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccda:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 809d 	beq.w	800ce1e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf6:	f043 0202 	orr.w	r2, r3, #2
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd04:	f003 0308 	and.w	r3, r3, #8
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd10:	f043 0208 	orr.w	r2, r3, #8
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1e:	f003 0320 	and.w	r3, r3, #32
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d005      	beq.n	800cd32 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2a:	f043 0220 	orr.w	r2, r3, #32
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd38:	f003 0310 	and.w	r3, r3, #16
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d005      	beq.n	800cd4c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd44:	f043 0210 	orr.w	r2, r3, #16
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a4b      	ldr	r2, [pc, #300]	; (800ce80 <HAL_SD_IRQHandler+0x36c>)
 800cd52:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cd62:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd72:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd82:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd92:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f003 ffe1 	bl	8010d60 <SDMMC_CmdStopTransfer>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda4:	431a      	orrs	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	68da      	ldr	r2, [r3, #12]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdb8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdc2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f003 0308 	and.w	r3, r3, #8
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00a      	beq.n	800cde4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f851 	bl	800ce84 <HAL_SD_ErrorCallback>
}
 800cde2:	e049      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d044      	beq.n	800ce78 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d040      	beq.n	800ce78 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ce04:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f834 	bl	800ce84 <HAL_SD_ErrorCallback>
}
 800ce1c:	e02c      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d025      	beq.n	800ce78 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce34:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10c      	bne.n	800ce5e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d003      	beq.n	800ce56 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 f84a 	bl	800dee8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ce54:	e010      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f001 f832 	bl	800dec0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ce5c:	e00c      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f003 0320 	and.w	r3, r3, #32
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f001 f833 	bl	800ded4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ce6e:	e003      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f001 f81b 	bl	800deac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ce76:	e7ff      	b.n	800ce78 <HAL_SD_IRQHandler+0x364>
 800ce78:	bf00      	nop
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	18000f3a 	.word	0x18000f3a

0800ce84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cea6:	0f9b      	lsrs	r3, r3, #30
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceb2:	0e9b      	lsrs	r3, r3, #26
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	f003 030f 	and.w	r3, r3, #15
 800ceba:	b2da      	uxtb	r2, r3
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cec4:	0e1b      	lsrs	r3, r3, #24
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	f003 0303 	and.w	r3, r3, #3
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ced6:	0c1b      	lsrs	r3, r3, #16
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cee2:	0a1b      	lsrs	r3, r3, #8
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef8:	0d1b      	lsrs	r3, r3, #20
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf04:	0c1b      	lsrs	r3, r3, #16
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	f003 030f 	and.w	r3, r3, #15
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf16:	0bdb      	lsrs	r3, r3, #15
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	f003 0301 	and.w	r3, r3, #1
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf28:	0b9b      	lsrs	r3, r3, #14
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf3a:	0b5b      	lsrs	r3, r3, #13
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf4c:	0b1b      	lsrs	r3, r3, #12
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d163      	bne.n	800d030 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf6c:	009a      	lsls	r2, r3, #2
 800cf6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cf72:	4013      	ands	r3, r2
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cf78:	0f92      	lsrs	r2, r2, #30
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf84:	0edb      	lsrs	r3, r3, #27
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	f003 0307 	and.w	r3, r3, #7
 800cf8c:	b2da      	uxtb	r2, r3
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf96:	0e1b      	lsrs	r3, r3, #24
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	f003 0307 	and.w	r3, r3, #7
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfa8:	0d5b      	lsrs	r3, r3, #21
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	f003 0307 	and.w	r3, r3, #7
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfba:	0c9b      	lsrs	r3, r3, #18
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	f003 0307 	and.w	r3, r3, #7
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfcc:	0bdb      	lsrs	r3, r3, #15
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	7e1b      	ldrb	r3, [r3, #24]
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	f003 0307 	and.w	r3, r3, #7
 800cfee:	3302      	adds	r3, #2
 800cff0:	2201      	movs	r2, #1
 800cff2:	fa02 f303 	lsl.w	r3, r2, r3
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cffa:	fb03 f202 	mul.w	r2, r3, r2
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	7a1b      	ldrb	r3, [r3, #8]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f003 030f 	and.w	r3, r3, #15
 800d00c:	2201      	movs	r2, #1
 800d00e:	409a      	lsls	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d01c:	0a52      	lsrs	r2, r2, #9
 800d01e:	fb03 f202 	mul.w	r2, r3, r2
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d02c:	655a      	str	r2, [r3, #84]	; 0x54
 800d02e:	e031      	b.n	800d094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d034:	2b01      	cmp	r3, #1
 800d036:	d11d      	bne.n	800d074 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d03c:	041b      	lsls	r3, r3, #16
 800d03e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d046:	0c1b      	lsrs	r3, r3, #16
 800d048:	431a      	orrs	r2, r3
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	3301      	adds	r3, #1
 800d054:	029a      	lsls	r2, r3, #10
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d068:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	655a      	str	r2, [r3, #84]	; 0x54
 800d072:	e00f      	b.n	800d094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a58      	ldr	r2, [pc, #352]	; (800d1dc <HAL_SD_GetCardCSD+0x344>)
 800d07a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	e09d      	b.n	800d1d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d098:	0b9b      	lsrs	r3, r3, #14
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0aa:	09db      	lsrs	r3, r3, #7
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0cc:	0fdb      	lsrs	r3, r3, #31
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0d8:	0f5b      	lsrs	r3, r3, #29
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	f003 0303 	and.w	r3, r3, #3
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0ea:	0e9b      	lsrs	r3, r3, #26
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	f003 0307 	and.w	r3, r3, #7
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0fc:	0d9b      	lsrs	r3, r3, #22
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f003 030f 	and.w	r3, r3, #15
 800d104:	b2da      	uxtb	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d10e:	0d5b      	lsrs	r3, r3, #21
 800d110:	b2db      	uxtb	r3, r3
 800d112:	f003 0301 	and.w	r3, r3, #1
 800d116:	b2da      	uxtb	r2, r3
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d12a:	0c1b      	lsrs	r3, r3, #16
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	b2da      	uxtb	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d13e:	0bdb      	lsrs	r3, r3, #15
 800d140:	b2db      	uxtb	r3, r3
 800d142:	f003 0301 	and.w	r3, r3, #1
 800d146:	b2da      	uxtb	r2, r3
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d152:	0b9b      	lsrs	r3, r3, #14
 800d154:	b2db      	uxtb	r3, r3
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d166:	0b5b      	lsrs	r3, r3, #13
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d17a:	0b1b      	lsrs	r3, r3, #12
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	b2da      	uxtb	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d18e:	0a9b      	lsrs	r3, r3, #10
 800d190:	b2db      	uxtb	r3, r3
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	b2da      	uxtb	r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1a2:	0a1b      	lsrs	r3, r3, #8
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 0303 	and.w	r3, r3, #3
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b6:	085b      	lsrs	r3, r3, #1
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr
 800d1dc:	1fe00fff 	.word	0x1fe00fff

0800d1e0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b094      	sub	sp, #80	; 0x50
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d101      	bne.n	800d200 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e0a7      	b.n	800d350 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d200:	f107 0308 	add.w	r3, r7, #8
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fb62 	bl	800d8d0 <SD_SendSDStatus>
 800d20c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d210:	2b00      	cmp	r3, #0
 800d212:	d011      	beq.n	800d238 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a4f      	ldr	r2, [pc, #316]	; (800d358 <HAL_SD_GetCardStatus+0x178>)
 800d21a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d222:	431a      	orrs	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d236:	e070      	b.n	800d31a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	099b      	lsrs	r3, r3, #6
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	f003 0303 	and.w	r3, r3, #3
 800d242:	b2da      	uxtb	r2, r3
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	095b      	lsrs	r3, r3, #5
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	0a1b      	lsrs	r3, r3, #8
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d262:	b29a      	uxth	r2, r3
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	0e1b      	lsrs	r3, r3, #24
 800d268:	b29b      	uxth	r3, r3
 800d26a:	4313      	orrs	r3, r2
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	061a      	lsls	r2, r3, #24
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	021b      	lsls	r3, r3, #8
 800d27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d27e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	0a1b      	lsrs	r3, r3, #8
 800d284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d288:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	0e1b      	lsrs	r3, r3, #24
 800d28e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	0a1b      	lsrs	r3, r3, #8
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	0d1b      	lsrs	r3, r3, #20
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f003 030f 	and.w	r3, r3, #15
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	0c1b      	lsrs	r3, r3, #16
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	0a9b      	lsrs	r3, r3, #10
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	0a1b      	lsrs	r3, r3, #8
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	f003 0303 	and.w	r3, r3, #3
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	091b      	lsrs	r3, r3, #4
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	b2da      	uxtb	r2, r3
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	b2db      	uxtb	r3, r3
 800d306:	f003 030f 	and.w	r3, r3, #15
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	0e1b      	lsrs	r3, r3, #24
 800d314:	b2da      	uxtb	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d322:	4618      	mov	r0, r3
 800d324:	f003 fc6c 	bl	8010c00 <SDMMC_CmdBlockLength>
 800d328:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d32a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00d      	beq.n	800d34c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a08      	ldr	r2, [pc, #32]	; (800d358 <HAL_SD_GetCardStatus+0x178>)
 800d336:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d33c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d346:	2301      	movs	r3, #1
 800d348:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d34c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d350:	4618      	mov	r0, r3
 800d352:	3750      	adds	r7, #80	; 0x50
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	1fe00fff 	.word	0x1fe00fff

0800d35c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d3b4:	b590      	push	{r4, r7, lr}
 800d3b6:	b08d      	sub	sp, #52	; 0x34
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d02e      	beq.n	800d432 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3da:	d106      	bne.n	800d3ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	635a      	str	r2, [r3, #52]	; 0x34
 800d3e8:	e029      	b.n	800d43e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3f0:	d10a      	bne.n	800d408 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fb64 	bl	800dac0 <SD_WideBus_Enable>
 800d3f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3fe:	6a3b      	ldr	r3, [r7, #32]
 800d400:	431a      	orrs	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	635a      	str	r2, [r3, #52]	; 0x34
 800d406:	e01a      	b.n	800d43e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10a      	bne.n	800d424 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fba1 	bl	800db56 <SD_WideBus_Disable>
 800d414:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d41a:	6a3b      	ldr	r3, [r7, #32]
 800d41c:	431a      	orrs	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	635a      	str	r2, [r3, #52]	; 0x34
 800d422:	e00c      	b.n	800d43e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	635a      	str	r2, [r3, #52]	; 0x34
 800d430:	e005      	b.n	800d43e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d436:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d442:	2b00      	cmp	r3, #0
 800d444:	d007      	beq.n	800d456 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a5f      	ldr	r2, [pc, #380]	; (800d5c8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d44c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d44e:	2301      	movs	r3, #1
 800d450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d454:	e096      	b.n	800d584 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d456:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d45a:	f04f 0100 	mov.w	r1, #0
 800d45e:	f7fd fea3 	bl	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d462:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 8083 	beq.w	800d572 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	695a      	ldr	r2, [r3, #20]
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	4950      	ldr	r1, [pc, #320]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d48a:	fba1 1303 	umull	r1, r3, r1, r3
 800d48e:	0e1b      	lsrs	r3, r3, #24
 800d490:	429a      	cmp	r2, r3
 800d492:	d303      	bcc.n	800d49c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	61bb      	str	r3, [r7, #24]
 800d49a:	e05a      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4a4:	d103      	bne.n	800d4ae <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	61bb      	str	r3, [r7, #24]
 800d4ac:	e051      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4b6:	d126      	bne.n	800d506 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10e      	bne.n	800d4de <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	4a43      	ldr	r2, [pc, #268]	; (800d5d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d906      	bls.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	4a40      	ldr	r2, [pc, #256]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d4d0:	0e5b      	lsrs	r3, r3, #25
 800d4d2:	61bb      	str	r3, [r7, #24]
 800d4d4:	e03d      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	61bb      	str	r3, [r7, #24]
 800d4dc:	e039      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	69fa      	ldr	r2, [r7, #28]
 800d4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ea:	4a39      	ldr	r2, [pc, #228]	; (800d5d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d906      	bls.n	800d4fe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4a36      	ldr	r2, [pc, #216]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4f8:	0e5b      	lsrs	r3, r3, #25
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	e029      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	61bb      	str	r3, [r7, #24]
 800d504:	e025      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10e      	bne.n	800d52c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	4a30      	ldr	r2, [pc, #192]	; (800d5d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d906      	bls.n	800d524 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	4a2c      	ldr	r2, [pc, #176]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d51a:	fba2 2303 	umull	r2, r3, r2, r3
 800d51e:	0e1b      	lsrs	r3, r3, #24
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	e016      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	e012      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	695b      	ldr	r3, [r3, #20]
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	69fa      	ldr	r2, [r7, #28]
 800d534:	fbb2 f3f3 	udiv	r3, r2, r3
 800d538:	4a26      	ldr	r2, [pc, #152]	; (800d5d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d906      	bls.n	800d54c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	4a22      	ldr	r2, [pc, #136]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800d542:	fba2 2303 	umull	r2, r3, r2, r3
 800d546:	0e1b      	lsrs	r3, r3, #24
 800d548:	61bb      	str	r3, [r7, #24]
 800d54a:	e002      	b.n	800d552 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681c      	ldr	r4, [r3, #0]
 800d556:	466a      	mov	r2, sp
 800d558:	f107 0314 	add.w	r3, r7, #20
 800d55c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d560:	e882 0003 	stmia.w	r2, {r0, r1}
 800d564:	f107 0308 	add.w	r3, r7, #8
 800d568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d56a:	4620      	mov	r0, r4
 800d56c:	f003 fa6a 	bl	8010a44 <SDMMC_Init>
 800d570:	e008      	b.n	800d584 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d576:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d58c:	4618      	mov	r0, r3
 800d58e:	f003 fb37 	bl	8010c00 <SDMMC_CmdBlockLength>
 800d592:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d00c      	beq.n	800d5b4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a0a      	ldr	r2, [pc, #40]	; (800d5c8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d5a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	372c      	adds	r7, #44	; 0x2c
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd90      	pop	{r4, r7, pc}
 800d5c8:	1fe00fff 	.word	0x1fe00fff
 800d5cc:	55e63b89 	.word	0x55e63b89
 800d5d0:	02faf080 	.word	0x02faf080
 800d5d4:	017d7840 	.word	0x017d7840

0800d5d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d5e4:	f107 030c 	add.w	r3, r7, #12
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fa40 	bl	800da70 <SD_SendStatus>
 800d5f0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	431a      	orrs	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	0a5b      	lsrs	r3, r3, #9
 800d608:	f003 030f 	and.w	r3, r3, #15
 800d60c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d60e:	693b      	ldr	r3, [r7, #16]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b090      	sub	sp, #64	; 0x40
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d620:	2300      	movs	r3, #0
 800d622:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d624:	f7f5 fd32 	bl	800308c <HAL_GetTick>
 800d628:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f003 fa61 	bl	8010af6 <SDMMC_GetPowerState>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d63a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d63e:	e0b5      	b.n	800d7ac <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d644:	2b03      	cmp	r3, #3
 800d646:	d02e      	beq.n	800d6a6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f003 fcac 	bl	8010faa <SDMMC_CmdSendCID>
 800d652:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <SD_InitCard+0x46>
    {
      return errorstate;
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	e0a6      	b.n	800d7ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2100      	movs	r1, #0
 800d664:	4618      	mov	r0, r3
 800d666:	f003 fa8c 	bl	8010b82 <SDMMC_GetResponse>
 800d66a:	4602      	mov	r2, r0
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2104      	movs	r1, #4
 800d676:	4618      	mov	r0, r3
 800d678:	f003 fa83 	bl	8010b82 <SDMMC_GetResponse>
 800d67c:	4602      	mov	r2, r0
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2108      	movs	r1, #8
 800d688:	4618      	mov	r0, r3
 800d68a:	f003 fa7a 	bl	8010b82 <SDMMC_GetResponse>
 800d68e:	4602      	mov	r2, r0
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	210c      	movs	r1, #12
 800d69a:	4618      	mov	r0, r3
 800d69c:	f003 fa71 	bl	8010b82 <SDMMC_GetResponse>
 800d6a0:	4602      	mov	r2, r0
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d01d      	beq.n	800d6ea <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d6ae:	e019      	b.n	800d6e4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f107 020a 	add.w	r2, r7, #10
 800d6b8:	4611      	mov	r1, r2
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f003 fcb4 	bl	8011028 <SDMMC_CmdSetRelAdd>
 800d6c0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d001      	beq.n	800d6cc <SD_InitCard+0xb4>
      {
        return errorstate;
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ca:	e06f      	b.n	800d7ac <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d6cc:	f7f5 fcde 	bl	800308c <HAL_GetTick>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	f241 3287 	movw	r2, #4999	; 0x1387
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d902      	bls.n	800d6e4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d6de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6e2:	e063      	b.n	800d7ac <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d6e4:	897b      	ldrh	r3, [r7, #10]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d0e2      	beq.n	800d6b0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d036      	beq.n	800d760 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d6f2:	897b      	ldrh	r3, [r7, #10]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d702:	041b      	lsls	r3, r3, #16
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f003 fc6e 	bl	8010fe8 <SDMMC_CmdSendCSD>
 800d70c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d710:	2b00      	cmp	r3, #0
 800d712:	d001      	beq.n	800d718 <SD_InitCard+0x100>
    {
      return errorstate;
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	e049      	b.n	800d7ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2100      	movs	r1, #0
 800d71e:	4618      	mov	r0, r3
 800d720:	f003 fa2f 	bl	8010b82 <SDMMC_GetResponse>
 800d724:	4602      	mov	r2, r0
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2104      	movs	r1, #4
 800d730:	4618      	mov	r0, r3
 800d732:	f003 fa26 	bl	8010b82 <SDMMC_GetResponse>
 800d736:	4602      	mov	r2, r0
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2108      	movs	r1, #8
 800d742:	4618      	mov	r0, r3
 800d744:	f003 fa1d 	bl	8010b82 <SDMMC_GetResponse>
 800d748:	4602      	mov	r2, r0
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	210c      	movs	r1, #12
 800d754:	4618      	mov	r0, r3
 800d756:	f003 fa14 	bl	8010b82 <SDMMC_GetResponse>
 800d75a:	4602      	mov	r2, r0
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2104      	movs	r1, #4
 800d766:	4618      	mov	r0, r3
 800d768:	f003 fa0b 	bl	8010b82 <SDMMC_GetResponse>
 800d76c:	4603      	mov	r3, r0
 800d76e:	0d1a      	lsrs	r2, r3, #20
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d774:	f107 030c 	add.w	r3, r7, #12
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7ff fb8c 	bl	800ce98 <HAL_SD_GetCardCSD>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d002      	beq.n	800d78c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d78a:	e00f      	b.n	800d7ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d794:	041b      	lsls	r3, r3, #16
 800d796:	4619      	mov	r1, r3
 800d798:	4610      	mov	r0, r2
 800d79a:	f003 fb1d 	bl	8010dd8 <SDMMC_CmdSelDesel>
 800d79e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <SD_InitCard+0x192>
  {
    return errorstate;
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a8:	e000      	b.n	800d7ac <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3740      	adds	r7, #64	; 0x40
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f003 fb26 	bl	8010e1e <SDMMC_CmdGoIdleState>
 800d7d2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <SD_PowerON+0x2a>
  {
    return errorstate;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	e072      	b.n	800d8c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f003 fb39 	bl	8010e5a <SDMMC_CmdOperCond>
 800d7e8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7f0:	d10d      	bne.n	800d80e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f003 fb0e 	bl	8010e1e <SDMMC_CmdGoIdleState>
 800d802:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d004      	beq.n	800d814 <SD_PowerON+0x60>
    {
      return errorstate;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	e05a      	b.n	800d8c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d137      	bne.n	800d88c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2100      	movs	r1, #0
 800d822:	4618      	mov	r0, r3
 800d824:	f003 fb39 	bl	8010e9a <SDMMC_CmdAppCommand>
 800d828:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d02d      	beq.n	800d88c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d834:	e046      	b.n	800d8c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2100      	movs	r1, #0
 800d83c:	4618      	mov	r0, r3
 800d83e:	f003 fb2c 	bl	8010e9a <SDMMC_CmdAppCommand>
 800d842:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <SD_PowerON+0x9a>
    {
      return errorstate;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	e03a      	b.n	800d8c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	491e      	ldr	r1, [pc, #120]	; (800d8cc <SD_PowerON+0x118>)
 800d854:	4618      	mov	r0, r3
 800d856:	f003 fb43 	bl	8010ee0 <SDMMC_CmdAppOperCommand>
 800d85a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d862:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d866:	e02d      	b.n	800d8c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f003 f987 	bl	8010b82 <SDMMC_GetResponse>
 800d874:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	0fdb      	lsrs	r3, r3, #31
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d101      	bne.n	800d882 <SD_PowerON+0xce>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <SD_PowerON+0xd0>
 800d882:	2300      	movs	r3, #0
 800d884:	613b      	str	r3, [r7, #16]

    count++;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	3301      	adds	r3, #1
 800d88a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d892:	4293      	cmp	r3, r2
 800d894:	d802      	bhi.n	800d89c <SD_PowerON+0xe8>
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d0cc      	beq.n	800d836 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d902      	bls.n	800d8ac <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d8a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d8aa:	e00b      	b.n	800d8c4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	c1100000 	.word	0xc1100000

0800d8d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b08c      	sub	sp, #48	; 0x30
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d8da:	f7f5 fbd7 	bl	800308c <HAL_GetTick>
 800d8de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f003 f949 	bl	8010b82 <SDMMC_GetResponse>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8fa:	d102      	bne.n	800d902 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d8fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d900:	e0b0      	b.n	800da64 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2140      	movs	r1, #64	; 0x40
 800d908:	4618      	mov	r0, r3
 800d90a:	f003 f979 	bl	8010c00 <SDMMC_CmdBlockLength>
 800d90e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d005      	beq.n	800d922 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d91e:	6a3b      	ldr	r3, [r7, #32]
 800d920:	e0a0      	b.n	800da64 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d92a:	041b      	lsls	r3, r3, #16
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f003 fab3 	bl	8010e9a <SDMMC_CmdAppCommand>
 800d934:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d005      	beq.n	800d948 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	e08d      	b.n	800da64 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d948:	f04f 33ff 	mov.w	r3, #4294967295
 800d94c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d94e:	2340      	movs	r3, #64	; 0x40
 800d950:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d952:	2360      	movs	r3, #96	; 0x60
 800d954:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d956:	2302      	movs	r3, #2
 800d958:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d95e:	2301      	movs	r3, #1
 800d960:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f107 0208 	add.w	r2, r7, #8
 800d96a:	4611      	mov	r1, r2
 800d96c:	4618      	mov	r0, r3
 800d96e:	f003 f91b 	bl	8010ba8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f003 fb9b 	bl	80110b2 <SDMMC_CmdStatusRegister>
 800d97c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d02b      	beq.n	800d9dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	e069      	b.n	800da64 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d013      	beq.n	800d9c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d99e:	2300      	movs	r3, #0
 800d9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9a2:	e00d      	b.n	800d9c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f003 f875 	bl	8010a98 <SDMMC_ReadFIFO>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b2:	601a      	str	r2, [r3, #0]
        pData++;
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	3301      	adds	r3, #1
 800d9be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c2:	2b07      	cmp	r3, #7
 800d9c4:	d9ee      	bls.n	800d9a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d9c6:	f7f5 fb61 	bl	800308c <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d4:	d102      	bne.n	800d9dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d9d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9da:	e043      	b.n	800da64 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0d2      	beq.n	800d990 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f0:	f003 0308 	and.w	r3, r3, #8
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	e033      	b.n	800da64 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da0a:	2302      	movs	r3, #2
 800da0c:	e02a      	b.n	800da64 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da14:	f003 0320 	and.w	r3, r3, #32
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d017      	beq.n	800da4c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800da1c:	2320      	movs	r3, #32
 800da1e:	e021      	b.n	800da64 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f003 f837 	bl	8010a98 <SDMMC_ReadFIFO>
 800da2a:	4602      	mov	r2, r0
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	601a      	str	r2, [r3, #0]
    pData++;
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	3304      	adds	r3, #4
 800da34:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da36:	f7f5 fb29 	bl	800308c <HAL_GetTick>
 800da3a:	4602      	mov	r2, r0
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da44:	d102      	bne.n	800da4c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da4a:	e00b      	b.n	800da64 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1e2      	bne.n	800da20 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a03      	ldr	r2, [pc, #12]	; (800da6c <SD_SendSDStatus+0x19c>)
 800da60:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3730      	adds	r7, #48	; 0x30
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	18000f3a 	.word	0x18000f3a

0800da70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d102      	bne.n	800da86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800da80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da84:	e018      	b.n	800dab8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681a      	ldr	r2, [r3, #0]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da8e:	041b      	lsls	r3, r3, #16
 800da90:	4619      	mov	r1, r3
 800da92:	4610      	mov	r0, r2
 800da94:	f003 faea 	bl	801106c <SDMMC_CmdSendStatus>
 800da98:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	e009      	b.n	800dab8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2100      	movs	r1, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f003 f869 	bl	8010b82 <SDMMC_GetResponse>
 800dab0:	4602      	mov	r2, r0
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dab6:	2300      	movs	r3, #0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dac8:	2300      	movs	r3, #0
 800daca:	60fb      	str	r3, [r7, #12]
 800dacc:	2300      	movs	r3, #0
 800dace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2100      	movs	r1, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	f003 f853 	bl	8010b82 <SDMMC_GetResponse>
 800dadc:	4603      	mov	r3, r0
 800dade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dae6:	d102      	bne.n	800daee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daec:	e02f      	b.n	800db4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800daee:	f107 030c 	add.w	r3, r7, #12
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f879 	bl	800dbec <SD_FindSCR>
 800dafa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	e023      	b.n	800db4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d01c      	beq.n	800db4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681a      	ldr	r2, [r3, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db18:	041b      	lsls	r3, r3, #16
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f003 f9bc 	bl	8010e9a <SDMMC_CmdAppCommand>
 800db22:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	e00f      	b.n	800db4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2102      	movs	r1, #2
 800db34:	4618      	mov	r0, r3
 800db36:	f003 f9f3 	bl	8010f20 <SDMMC_CmdBusWidth>
 800db3a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	e003      	b.n	800db4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db46:	2300      	movs	r3, #0
 800db48:	e001      	b.n	800db4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b086      	sub	sp, #24
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800db5e:	2300      	movs	r3, #0
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	2300      	movs	r3, #0
 800db64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2100      	movs	r1, #0
 800db6c:	4618      	mov	r0, r3
 800db6e:	f003 f808 	bl	8010b82 <SDMMC_GetResponse>
 800db72:	4603      	mov	r3, r0
 800db74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db7c:	d102      	bne.n	800db84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db82:	e02f      	b.n	800dbe4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db84:	f107 030c 	add.w	r3, r7, #12
 800db88:	4619      	mov	r1, r3
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f82e 	bl	800dbec <SD_FindSCR>
 800db90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d001      	beq.n	800db9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	e023      	b.n	800dbe4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d01c      	beq.n	800dbe0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbae:	041b      	lsls	r3, r3, #16
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	f003 f971 	bl	8010e9a <SDMMC_CmdAppCommand>
 800dbb8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d001      	beq.n	800dbc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	e00f      	b.n	800dbe4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f003 f9a8 	bl	8010f20 <SDMMC_CmdBusWidth>
 800dbd0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	e003      	b.n	800dbe4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e001      	b.n	800dbe4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbe0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3718      	adds	r7, #24
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b08e      	sub	sp, #56	; 0x38
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dbf6:	f7f5 fa49 	bl	800308c <HAL_GetTick>
 800dbfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dc00:	2300      	movs	r3, #0
 800dc02:	60bb      	str	r3, [r7, #8]
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2108      	movs	r1, #8
 800dc12:	4618      	mov	r0, r3
 800dc14:	f002 fff4 	bl	8010c00 <SDMMC_CmdBlockLength>
 800dc18:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc22:	e0ad      	b.n	800dd80 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc2c:	041b      	lsls	r3, r3, #16
 800dc2e:	4619      	mov	r1, r3
 800dc30:	4610      	mov	r0, r2
 800dc32:	f003 f932 	bl	8010e9a <SDMMC_CmdAppCommand>
 800dc36:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	e09e      	b.n	800dd80 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc42:	f04f 33ff 	mov.w	r3, #4294967295
 800dc46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc48:	2308      	movs	r3, #8
 800dc4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dc4c:	2330      	movs	r3, #48	; 0x30
 800dc4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc50:	2302      	movs	r3, #2
 800dc52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc54:	2300      	movs	r3, #0
 800dc56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f107 0210 	add.w	r2, r7, #16
 800dc64:	4611      	mov	r1, r2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f002 ff9e 	bl	8010ba8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f003 f978 	bl	8010f66 <SDMMC_CmdSendSCR>
 800dc76:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d027      	beq.n	800dcce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc80:	e07e      	b.n	800dd80 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d113      	bne.n	800dcb8 <SD_FindSCR+0xcc>
 800dc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d110      	bne.n	800dcb8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f002 fefc 	bl	8010a98 <SDMMC_ReadFIFO>
 800dca0:	4603      	mov	r3, r0
 800dca2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f002 fef5 	bl	8010a98 <SDMMC_ReadFIFO>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	60fb      	str	r3, [r7, #12]
      index++;
 800dcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcb8:	f7f5 f9e8 	bl	800308c <HAL_GetTick>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc6:	d102      	bne.n	800dcce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dcc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dccc:	e058      	b.n	800dd80 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcd4:	f240 532a 	movw	r3, #1322	; 0x52a
 800dcd8:	4013      	ands	r3, r2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0d1      	beq.n	800dc82 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce4:	f003 0308 	and.w	r3, r3, #8
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d005      	beq.n	800dcf8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2208      	movs	r2, #8
 800dcf2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	e043      	b.n	800dd80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfe:	f003 0302 	and.w	r3, r3, #2
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd0e:	2302      	movs	r3, #2
 800dd10:	e036      	b.n	800dd80 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd18:	f003 0320 	and.w	r3, r3, #32
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d005      	beq.n	800dd2c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2220      	movs	r2, #32
 800dd26:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd28:	2320      	movs	r3, #32
 800dd2a:	e029      	b.n	800dd80 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <SD_FindSCR+0x19c>)
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	061a      	lsls	r2, r3, #24
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	021b      	lsls	r3, r3, #8
 800dd3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	0a1b      	lsrs	r3, r3, #8
 800dd46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	0e1b      	lsrs	r3, r3, #24
 800dd50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd54:	601a      	str	r2, [r3, #0]
    scr++;
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	3304      	adds	r3, #4
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	061a      	lsls	r2, r3, #24
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	021b      	lsls	r3, r3, #8
 800dd64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	0a1b      	lsrs	r3, r3, #8
 800dd6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dd72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	0e1b      	lsrs	r3, r3, #24
 800dd78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3738      	adds	r7, #56	; 0x38
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	18000f3a 	.word	0x18000f3a

0800dd8c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd98:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9e:	2b1f      	cmp	r3, #31
 800dda0:	d936      	bls.n	800de10 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	e027      	b.n	800ddf8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 fe73 	bl	8010a98 <SDMMC_ReadFIFO>
 800ddb2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	0a1b      	lsrs	r3, r3, #8
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	0c1b      	lsrs	r3, r3, #16
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	3301      	adds	r3, #1
 800dde0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	0e1b      	lsrs	r3, r3, #24
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2b07      	cmp	r3, #7
 800ddfc:	d9d4      	bls.n	800dda8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de08:	f1a3 0220 	sub.w	r2, r3, #32
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800de10:	bf00      	nop
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	2b1f      	cmp	r3, #31
 800de2c:	d93a      	bls.n	800dea4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800de2e:	2300      	movs	r3, #0
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e02b      	b.n	800de8c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	3301      	adds	r3, #1
 800de3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	021a      	lsls	r2, r3, #8
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	4313      	orrs	r3, r2
 800de4a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	3301      	adds	r3, #1
 800de50:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	041a      	lsls	r2, r3, #16
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	3301      	adds	r3, #1
 800de62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	061a      	lsls	r2, r3, #24
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	3301      	adds	r3, #1
 800de74:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f107 020c 	add.w	r2, r7, #12
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f002 fe16 	bl	8010ab2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	3301      	adds	r3, #1
 800de8a:	617b      	str	r3, [r7, #20]
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	2b07      	cmp	r3, #7
 800de90:	d9d0      	bls.n	800de34 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	f1a3 0220 	sub.w	r2, r3, #32
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	621a      	str	r2, [r3, #32]
  }
}
 800dea4:	bf00      	nop
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800deac:	b480      	push	{r7}
 800deae:	b083      	sub	sp, #12
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dedc:	bf00      	nop
 800dede:	370c      	adds	r7, #12
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr

0800dee8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e10f      	b.n	800e12e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a87      	ldr	r2, [pc, #540]	; (800e138 <HAL_SPI_Init+0x23c>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d00f      	beq.n	800df3e <HAL_SPI_Init+0x42>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a86      	ldr	r2, [pc, #536]	; (800e13c <HAL_SPI_Init+0x240>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d00a      	beq.n	800df3e <HAL_SPI_Init+0x42>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a84      	ldr	r2, [pc, #528]	; (800e140 <HAL_SPI_Init+0x244>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d005      	beq.n	800df3e <HAL_SPI_Init+0x42>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	2b0f      	cmp	r3, #15
 800df38:	d901      	bls.n	800df3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e0f7      	b.n	800e12e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f900 	bl	800e144 <SPI_GetPacketSize>
 800df44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a7b      	ldr	r2, [pc, #492]	; (800e138 <HAL_SPI_Init+0x23c>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d00c      	beq.n	800df6a <HAL_SPI_Init+0x6e>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a79      	ldr	r2, [pc, #484]	; (800e13c <HAL_SPI_Init+0x240>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d007      	beq.n	800df6a <HAL_SPI_Init+0x6e>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a78      	ldr	r2, [pc, #480]	; (800e140 <HAL_SPI_Init+0x244>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d002      	beq.n	800df6a <HAL_SPI_Init+0x6e>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b08      	cmp	r3, #8
 800df68:	d811      	bhi.n	800df8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df6e:	4a72      	ldr	r2, [pc, #456]	; (800e138 <HAL_SPI_Init+0x23c>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d009      	beq.n	800df88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a70      	ldr	r2, [pc, #448]	; (800e13c <HAL_SPI_Init+0x240>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d004      	beq.n	800df88 <HAL_SPI_Init+0x8c>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a6f      	ldr	r2, [pc, #444]	; (800e140 <HAL_SPI_Init+0x244>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d104      	bne.n	800df92 <HAL_SPI_Init+0x96>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b10      	cmp	r3, #16
 800df8c:	d901      	bls.n	800df92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df8e:	2301      	movs	r3, #1
 800df90:	e0cd      	b.n	800e12e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d106      	bne.n	800dfac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7f4 f9f8 	bl	800239c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2202      	movs	r2, #2
 800dfb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f022 0201 	bic.w	r2, r2, #1
 800dfc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	689b      	ldr	r3, [r3, #8]
 800dfca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dfce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dfd8:	d119      	bne.n	800e00e <HAL_SPI_Init+0x112>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dfe2:	d103      	bne.n	800dfec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d008      	beq.n	800dffe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10c      	bne.n	800e00e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dffc:	d107      	bne.n	800e00e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e00c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00f      	beq.n	800e03a <HAL_SPI_Init+0x13e>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	2b06      	cmp	r3, #6
 800e020:	d90b      	bls.n	800e03a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	430a      	orrs	r2, r1
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	e007      	b.n	800e04a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e048:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	69da      	ldr	r2, [r3, #28]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e052:	431a      	orrs	r2, r3
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	431a      	orrs	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e05c:	ea42 0103 	orr.w	r1, r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	68da      	ldr	r2, [r3, #12]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	430a      	orrs	r2, r1
 800e06a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07a:	431a      	orrs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	431a      	orrs	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	431a      	orrs	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	431a      	orrs	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	431a      	orrs	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e09e:	431a      	orrs	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0aa:	ea42 0103 	orr.w	r1, r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d113      	bne.n	800e0ea <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e0d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e0e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f022 0201 	bic.w	r2, r2, #1
 800e0f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	430a      	orrs	r2, r1
 800e11a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	40013000 	.word	0x40013000
 800e13c:	40003800 	.word	0x40003800
 800e140:	40003c00 	.word	0x40003c00

0800e144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e150:	095b      	lsrs	r3, r3, #5
 800e152:	3301      	adds	r3, #1
 800e154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	3307      	adds	r3, #7
 800e162:	08db      	lsrs	r3, r3, #3
 800e164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3714      	adds	r7, #20
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr

0800e17a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b082      	sub	sp, #8
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e049      	b.n	800e220 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d106      	bne.n	800e1a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7f4 fb4d 	bl	8002840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2202      	movs	r2, #2
 800e1aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	4610      	mov	r0, r2
 800e1ba:	f000 fe0d 	bl	800edd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d101      	bne.n	800e23a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	e049      	b.n	800e2ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d106      	bne.n	800e254 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7f4 f960 	bl	8002514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2202      	movs	r2, #2
 800e258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3304      	adds	r3, #4
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f000 fdb6 	bl	800edd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3708      	adds	r7, #8
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b086      	sub	sp, #24
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <HAL_TIM_PWM_Start_DMA+0x2c>
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b02      	cmp	r3, #2
 800e2fa:	bf0c      	ite	eq
 800e2fc:	2301      	moveq	r3, #1
 800e2fe:	2300      	movne	r3, #0
 800e300:	b2db      	uxtb	r3, r3
 800e302:	e03c      	b.n	800e37e <HAL_TIM_PWM_Start_DMA+0xa6>
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	2b04      	cmp	r3, #4
 800e308:	d109      	bne.n	800e31e <HAL_TIM_PWM_Start_DMA+0x46>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b02      	cmp	r3, #2
 800e314:	bf0c      	ite	eq
 800e316:	2301      	moveq	r3, #1
 800e318:	2300      	movne	r3, #0
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	e02f      	b.n	800e37e <HAL_TIM_PWM_Start_DMA+0xa6>
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b08      	cmp	r3, #8
 800e322:	d109      	bne.n	800e338 <HAL_TIM_PWM_Start_DMA+0x60>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	bf0c      	ite	eq
 800e330:	2301      	moveq	r3, #1
 800e332:	2300      	movne	r3, #0
 800e334:	b2db      	uxtb	r3, r3
 800e336:	e022      	b.n	800e37e <HAL_TIM_PWM_Start_DMA+0xa6>
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	2b0c      	cmp	r3, #12
 800e33c:	d109      	bne.n	800e352 <HAL_TIM_PWM_Start_DMA+0x7a>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b02      	cmp	r3, #2
 800e348:	bf0c      	ite	eq
 800e34a:	2301      	moveq	r3, #1
 800e34c:	2300      	movne	r3, #0
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	e015      	b.n	800e37e <HAL_TIM_PWM_Start_DMA+0xa6>
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2b10      	cmp	r3, #16
 800e356:	d109      	bne.n	800e36c <HAL_TIM_PWM_Start_DMA+0x94>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	2b02      	cmp	r3, #2
 800e362:	bf0c      	ite	eq
 800e364:	2301      	moveq	r3, #1
 800e366:	2300      	movne	r3, #0
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	e008      	b.n	800e37e <HAL_TIM_PWM_Start_DMA+0xa6>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b02      	cmp	r3, #2
 800e376:	bf0c      	ite	eq
 800e378:	2301      	moveq	r3, #1
 800e37a:	2300      	movne	r3, #0
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800e382:	2302      	movs	r3, #2
 800e384:	e1ba      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d109      	bne.n	800e3a0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b01      	cmp	r3, #1
 800e396:	bf0c      	ite	eq
 800e398:	2301      	moveq	r3, #1
 800e39a:	2300      	movne	r3, #0
 800e39c:	b2db      	uxtb	r3, r3
 800e39e:	e03c      	b.n	800e41a <HAL_TIM_PWM_Start_DMA+0x142>
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2b04      	cmp	r3, #4
 800e3a4:	d109      	bne.n	800e3ba <HAL_TIM_PWM_Start_DMA+0xe2>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	bf0c      	ite	eq
 800e3b2:	2301      	moveq	r3, #1
 800e3b4:	2300      	movne	r3, #0
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	e02f      	b.n	800e41a <HAL_TIM_PWM_Start_DMA+0x142>
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b08      	cmp	r3, #8
 800e3be:	d109      	bne.n	800e3d4 <HAL_TIM_PWM_Start_DMA+0xfc>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	bf0c      	ite	eq
 800e3cc:	2301      	moveq	r3, #1
 800e3ce:	2300      	movne	r3, #0
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	e022      	b.n	800e41a <HAL_TIM_PWM_Start_DMA+0x142>
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2b0c      	cmp	r3, #12
 800e3d8:	d109      	bne.n	800e3ee <HAL_TIM_PWM_Start_DMA+0x116>
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	bf0c      	ite	eq
 800e3e6:	2301      	moveq	r3, #1
 800e3e8:	2300      	movne	r3, #0
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	e015      	b.n	800e41a <HAL_TIM_PWM_Start_DMA+0x142>
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b10      	cmp	r3, #16
 800e3f2:	d109      	bne.n	800e408 <HAL_TIM_PWM_Start_DMA+0x130>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	bf0c      	ite	eq
 800e400:	2301      	moveq	r3, #1
 800e402:	2300      	movne	r3, #0
 800e404:	b2db      	uxtb	r3, r3
 800e406:	e008      	b.n	800e41a <HAL_TIM_PWM_Start_DMA+0x142>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b01      	cmp	r3, #1
 800e412:	bf0c      	ite	eq
 800e414:	2301      	moveq	r3, #1
 800e416:	2300      	movne	r3, #0
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d034      	beq.n	800e488 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d002      	beq.n	800e42a <HAL_TIM_PWM_Start_DMA+0x152>
 800e424:	887b      	ldrh	r3, [r7, #2]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	e166      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <HAL_TIM_PWM_Start_DMA+0x166>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2202      	movs	r2, #2
 800e438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e43c:	e026      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b04      	cmp	r3, #4
 800e442:	d104      	bne.n	800e44e <HAL_TIM_PWM_Start_DMA+0x176>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2202      	movs	r2, #2
 800e448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e44c:	e01e      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	2b08      	cmp	r3, #8
 800e452:	d104      	bne.n	800e45e <HAL_TIM_PWM_Start_DMA+0x186>
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2202      	movs	r2, #2
 800e458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e45c:	e016      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2b0c      	cmp	r3, #12
 800e462:	d104      	bne.n	800e46e <HAL_TIM_PWM_Start_DMA+0x196>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e46c:	e00e      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b10      	cmp	r3, #16
 800e472:	d104      	bne.n	800e47e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2202      	movs	r2, #2
 800e478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e47c:	e006      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2202      	movs	r2, #2
 800e482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e486:	e001      	b.n	800e48c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	e137      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2b0c      	cmp	r3, #12
 800e490:	f200 80ae 	bhi.w	800e5f0 <HAL_TIM_PWM_Start_DMA+0x318>
 800e494:	a201      	add	r2, pc, #4	; (adr r2, 800e49c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800e496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49a:	bf00      	nop
 800e49c:	0800e4d1 	.word	0x0800e4d1
 800e4a0:	0800e5f1 	.word	0x0800e5f1
 800e4a4:	0800e5f1 	.word	0x0800e5f1
 800e4a8:	0800e5f1 	.word	0x0800e5f1
 800e4ac:	0800e519 	.word	0x0800e519
 800e4b0:	0800e5f1 	.word	0x0800e5f1
 800e4b4:	0800e5f1 	.word	0x0800e5f1
 800e4b8:	0800e5f1 	.word	0x0800e5f1
 800e4bc:	0800e561 	.word	0x0800e561
 800e4c0:	0800e5f1 	.word	0x0800e5f1
 800e4c4:	0800e5f1 	.word	0x0800e5f1
 800e4c8:	0800e5f1 	.word	0x0800e5f1
 800e4cc:	0800e5a9 	.word	0x0800e5a9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	4a8b      	ldr	r2, [pc, #556]	; (800e704 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e4d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4dc:	4a8a      	ldr	r2, [pc, #552]	; (800e708 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e4de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e4:	4a89      	ldr	r2, [pc, #548]	; (800e70c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e4e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3334      	adds	r3, #52	; 0x34
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	887b      	ldrh	r3, [r7, #2]
 800e4f8:	f7f6 fde8 	bl	80050cc <HAL_DMA_Start_IT>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	e0fa      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e514:	60da      	str	r2, [r3, #12]
      break;
 800e516:	e06e      	b.n	800e5f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e51c:	4a79      	ldr	r2, [pc, #484]	; (800e704 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e51e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e524:	4a78      	ldr	r2, [pc, #480]	; (800e708 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e52c:	4a77      	ldr	r2, [pc, #476]	; (800e70c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e52e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3338      	adds	r3, #56	; 0x38
 800e53c:	461a      	mov	r2, r3
 800e53e:	887b      	ldrh	r3, [r7, #2]
 800e540:	f7f6 fdc4 	bl	80050cc <HAL_DMA_Start_IT>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d001      	beq.n	800e54e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e0d6      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e55c:	60da      	str	r2, [r3, #12]
      break;
 800e55e:	e04a      	b.n	800e5f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e564:	4a67      	ldr	r2, [pc, #412]	; (800e704 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e566:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56c:	4a66      	ldr	r2, [pc, #408]	; (800e708 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e56e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e574:	4a65      	ldr	r2, [pc, #404]	; (800e70c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e576:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e57c:	6879      	ldr	r1, [r7, #4]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	333c      	adds	r3, #60	; 0x3c
 800e584:	461a      	mov	r2, r3
 800e586:	887b      	ldrh	r3, [r7, #2]
 800e588:	f7f6 fda0 	bl	80050cc <HAL_DMA_Start_IT>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d001      	beq.n	800e596 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e592:	2301      	movs	r3, #1
 800e594:	e0b2      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68da      	ldr	r2, [r3, #12]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5a4:	60da      	str	r2, [r3, #12]
      break;
 800e5a6:	e026      	b.n	800e5f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ac:	4a55      	ldr	r2, [pc, #340]	; (800e704 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e5ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b4:	4a54      	ldr	r2, [pc, #336]	; (800e708 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e5b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5bc:	4a53      	ldr	r2, [pc, #332]	; (800e70c <HAL_TIM_PWM_Start_DMA+0x434>)
 800e5be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e5c4:	6879      	ldr	r1, [r7, #4]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3340      	adds	r3, #64	; 0x40
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	887b      	ldrh	r3, [r7, #2]
 800e5d0:	f7f6 fd7c 	bl	80050cc <HAL_DMA_Start_IT>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e08e      	b.n	800e6fc <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68da      	ldr	r2, [r3, #12]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e5ec:	60da      	str	r2, [r3, #12]
      break;
 800e5ee:	e002      	b.n	800e5f6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	75fb      	strb	r3, [r7, #23]
      break;
 800e5f4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d17e      	bne.n	800e6fa <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2201      	movs	r2, #1
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	4618      	mov	r0, r3
 800e606:	f000 ff63 	bl	800f4d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a40      	ldr	r2, [pc, #256]	; (800e710 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d013      	beq.n	800e63c <HAL_TIM_PWM_Start_DMA+0x364>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a3e      	ldr	r2, [pc, #248]	; (800e714 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d00e      	beq.n	800e63c <HAL_TIM_PWM_Start_DMA+0x364>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a3d      	ldr	r2, [pc, #244]	; (800e718 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d009      	beq.n	800e63c <HAL_TIM_PWM_Start_DMA+0x364>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a3b      	ldr	r2, [pc, #236]	; (800e71c <HAL_TIM_PWM_Start_DMA+0x444>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d004      	beq.n	800e63c <HAL_TIM_PWM_Start_DMA+0x364>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a3a      	ldr	r2, [pc, #232]	; (800e720 <HAL_TIM_PWM_Start_DMA+0x448>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d101      	bne.n	800e640 <HAL_TIM_PWM_Start_DMA+0x368>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <HAL_TIM_PWM_Start_DMA+0x36a>
 800e640:	2300      	movs	r3, #0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d007      	beq.n	800e656 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4a2d      	ldr	r2, [pc, #180]	; (800e710 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d02c      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e668:	d027      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	4a2d      	ldr	r2, [pc, #180]	; (800e724 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d022      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a2b      	ldr	r2, [pc, #172]	; (800e728 <HAL_TIM_PWM_Start_DMA+0x450>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d01d      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a2a      	ldr	r2, [pc, #168]	; (800e72c <HAL_TIM_PWM_Start_DMA+0x454>)
 800e684:	4293      	cmp	r3, r2
 800e686:	d018      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a21      	ldr	r2, [pc, #132]	; (800e714 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d013      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	4a26      	ldr	r2, [pc, #152]	; (800e730 <HAL_TIM_PWM_Start_DMA+0x458>)
 800e698:	4293      	cmp	r3, r2
 800e69a:	d00e      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a1d      	ldr	r2, [pc, #116]	; (800e718 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d009      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a22      	ldr	r2, [pc, #136]	; (800e734 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d004      	beq.n	800e6ba <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a20      	ldr	r2, [pc, #128]	; (800e738 <HAL_TIM_PWM_Start_DMA+0x460>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d115      	bne.n	800e6e6 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	4b1e      	ldr	r3, [pc, #120]	; (800e73c <HAL_TIM_PWM_Start_DMA+0x464>)
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	2b06      	cmp	r3, #6
 800e6ca:	d015      	beq.n	800e6f8 <HAL_TIM_PWM_Start_DMA+0x420>
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6d2:	d011      	beq.n	800e6f8 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f042 0201 	orr.w	r2, r2, #1
 800e6e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e4:	e008      	b.n	800e6f8 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f042 0201 	orr.w	r2, r2, #1
 800e6f4:	601a      	str	r2, [r3, #0]
 800e6f6:	e000      	b.n	800e6fa <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3718      	adds	r7, #24
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	0800ecc7 	.word	0x0800ecc7
 800e708:	0800ed6f 	.word	0x0800ed6f
 800e70c:	0800ec35 	.word	0x0800ec35
 800e710:	40010000 	.word	0x40010000
 800e714:	40010400 	.word	0x40010400
 800e718:	40014000 	.word	0x40014000
 800e71c:	40014400 	.word	0x40014400
 800e720:	40014800 	.word	0x40014800
 800e724:	40000400 	.word	0x40000400
 800e728:	40000800 	.word	0x40000800
 800e72c:	40000c00 	.word	0x40000c00
 800e730:	40001800 	.word	0x40001800
 800e734:	4000e000 	.word	0x4000e000
 800e738:	4000e400 	.word	0x4000e400
 800e73c:	00010007 	.word	0x00010007

0800e740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	f003 0302 	and.w	r3, r3, #2
 800e752:	2b02      	cmp	r3, #2
 800e754:	d122      	bne.n	800e79c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	f003 0302 	and.w	r3, r3, #2
 800e760:	2b02      	cmp	r3, #2
 800e762:	d11b      	bne.n	800e79c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f06f 0202 	mvn.w	r2, #2
 800e76c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d003      	beq.n	800e78a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fa24 	bl	800ebd0 <HAL_TIM_IC_CaptureCallback>
 800e788:	e005      	b.n	800e796 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fa16 	bl	800ebbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 fa27 	bl	800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	f003 0304 	and.w	r3, r3, #4
 800e7a6:	2b04      	cmp	r3, #4
 800e7a8:	d122      	bne.n	800e7f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b04      	cmp	r3, #4
 800e7b6:	d11b      	bne.n	800e7f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f06f 0204 	mvn.w	r2, #4
 800e7c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	699b      	ldr	r3, [r3, #24]
 800e7ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d003      	beq.n	800e7de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f9fa 	bl	800ebd0 <HAL_TIM_IC_CaptureCallback>
 800e7dc:	e005      	b.n	800e7ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 f9ec 	bl	800ebbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f9fd 	bl	800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	f003 0308 	and.w	r3, r3, #8
 800e7fa:	2b08      	cmp	r3, #8
 800e7fc:	d122      	bne.n	800e844 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	f003 0308 	and.w	r3, r3, #8
 800e808:	2b08      	cmp	r3, #8
 800e80a:	d11b      	bne.n	800e844 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f06f 0208 	mvn.w	r2, #8
 800e814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2204      	movs	r2, #4
 800e81a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	69db      	ldr	r3, [r3, #28]
 800e822:	f003 0303 	and.w	r3, r3, #3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d003      	beq.n	800e832 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f9d0 	bl	800ebd0 <HAL_TIM_IC_CaptureCallback>
 800e830:	e005      	b.n	800e83e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 f9c2 	bl	800ebbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f9d3 	bl	800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	f003 0310 	and.w	r3, r3, #16
 800e84e:	2b10      	cmp	r3, #16
 800e850:	d122      	bne.n	800e898 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	68db      	ldr	r3, [r3, #12]
 800e858:	f003 0310 	and.w	r3, r3, #16
 800e85c:	2b10      	cmp	r3, #16
 800e85e:	d11b      	bne.n	800e898 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f06f 0210 	mvn.w	r2, #16
 800e868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2208      	movs	r2, #8
 800e86e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f9a6 	bl	800ebd0 <HAL_TIM_IC_CaptureCallback>
 800e884:	e005      	b.n	800e892 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f998 	bl	800ebbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f9a9 	bl	800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	691b      	ldr	r3, [r3, #16]
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d10e      	bne.n	800e8c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68db      	ldr	r3, [r3, #12]
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d107      	bne.n	800e8c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f06f 0201 	mvn.w	r2, #1
 800e8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 f972 	bl	800eba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	691b      	ldr	r3, [r3, #16]
 800e8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ce:	2b80      	cmp	r3, #128	; 0x80
 800e8d0:	d10e      	bne.n	800e8f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8dc:	2b80      	cmp	r3, #128	; 0x80
 800e8de:	d107      	bne.n	800e8f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e8e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 febc 	bl	800f668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	691b      	ldr	r3, [r3, #16]
 800e8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8fe:	d10e      	bne.n	800e91e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e90a:	2b80      	cmp	r3, #128	; 0x80
 800e90c:	d107      	bne.n	800e91e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 feaf 	bl	800f67c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e928:	2b40      	cmp	r3, #64	; 0x40
 800e92a:	d10e      	bne.n	800e94a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e936:	2b40      	cmp	r3, #64	; 0x40
 800e938:	d107      	bne.n	800e94a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f961 	bl	800ec0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	f003 0320 	and.w	r3, r3, #32
 800e954:	2b20      	cmp	r3, #32
 800e956:	d10e      	bne.n	800e976 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	f003 0320 	and.w	r3, r3, #32
 800e962:	2b20      	cmp	r3, #32
 800e964:	d107      	bne.n	800e976 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f06f 0220 	mvn.w	r2, #32
 800e96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fe6f 	bl	800f654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e976:	bf00      	nop
 800e978:	3708      	adds	r7, #8
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b086      	sub	sp, #24
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e98c:	2300      	movs	r3, #0
 800e98e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e996:	2b01      	cmp	r3, #1
 800e998:	d101      	bne.n	800e99e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e99a:	2302      	movs	r3, #2
 800e99c:	e0ff      	b.n	800eb9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b14      	cmp	r3, #20
 800e9aa:	f200 80f0 	bhi.w	800eb8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800ea09 	.word	0x0800ea09
 800e9b8:	0800eb8f 	.word	0x0800eb8f
 800e9bc:	0800eb8f 	.word	0x0800eb8f
 800e9c0:	0800eb8f 	.word	0x0800eb8f
 800e9c4:	0800ea49 	.word	0x0800ea49
 800e9c8:	0800eb8f 	.word	0x0800eb8f
 800e9cc:	0800eb8f 	.word	0x0800eb8f
 800e9d0:	0800eb8f 	.word	0x0800eb8f
 800e9d4:	0800ea8b 	.word	0x0800ea8b
 800e9d8:	0800eb8f 	.word	0x0800eb8f
 800e9dc:	0800eb8f 	.word	0x0800eb8f
 800e9e0:	0800eb8f 	.word	0x0800eb8f
 800e9e4:	0800eacb 	.word	0x0800eacb
 800e9e8:	0800eb8f 	.word	0x0800eb8f
 800e9ec:	0800eb8f 	.word	0x0800eb8f
 800e9f0:	0800eb8f 	.word	0x0800eb8f
 800e9f4:	0800eb0d 	.word	0x0800eb0d
 800e9f8:	0800eb8f 	.word	0x0800eb8f
 800e9fc:	0800eb8f 	.word	0x0800eb8f
 800ea00:	0800eb8f 	.word	0x0800eb8f
 800ea04:	0800eb4d 	.word	0x0800eb4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68b9      	ldr	r1, [r7, #8]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 fa88 	bl	800ef24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	699a      	ldr	r2, [r3, #24]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f042 0208 	orr.w	r2, r2, #8
 800ea22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	699a      	ldr	r2, [r3, #24]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f022 0204 	bic.w	r2, r2, #4
 800ea32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6999      	ldr	r1, [r3, #24]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	691a      	ldr	r2, [r3, #16]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	619a      	str	r2, [r3, #24]
      break;
 800ea46:	e0a5      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68b9      	ldr	r1, [r7, #8]
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 faf8 	bl	800f044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	699a      	ldr	r2, [r3, #24]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	699a      	ldr	r2, [r3, #24]
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6999      	ldr	r1, [r3, #24]
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	021a      	lsls	r2, r3, #8
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	619a      	str	r2, [r3, #24]
      break;
 800ea88:	e084      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68b9      	ldr	r1, [r7, #8]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 fb61 	bl	800f158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	69da      	ldr	r2, [r3, #28]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f042 0208 	orr.w	r2, r2, #8
 800eaa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	69da      	ldr	r2, [r3, #28]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f022 0204 	bic.w	r2, r2, #4
 800eab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	69d9      	ldr	r1, [r3, #28]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	691a      	ldr	r2, [r3, #16]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	430a      	orrs	r2, r1
 800eac6:	61da      	str	r2, [r3, #28]
      break;
 800eac8:	e064      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	68b9      	ldr	r1, [r7, #8]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f000 fbc9 	bl	800f268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	69da      	ldr	r2, [r3, #28]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	69da      	ldr	r2, [r3, #28]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eaf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	69d9      	ldr	r1, [r3, #28]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	021a      	lsls	r2, r3, #8
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	430a      	orrs	r2, r1
 800eb08:	61da      	str	r2, [r3, #28]
      break;
 800eb0a:	e043      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68b9      	ldr	r1, [r7, #8]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fc12 	bl	800f33c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f042 0208 	orr.w	r2, r2, #8
 800eb26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f022 0204 	bic.w	r2, r2, #4
 800eb36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	691a      	ldr	r2, [r3, #16]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb4a:	e023      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68b9      	ldr	r1, [r7, #8]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 fc56 	bl	800f404 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	691b      	ldr	r3, [r3, #16]
 800eb82:	021a      	lsls	r2, r3, #8
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb8c:	e002      	b.n	800eb94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	75fb      	strb	r3, [r7, #23]
      break;
 800eb92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop

0800eba8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ebc4:	bf00      	nop
 800ebc6:	370c      	adds	r7, #12
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ebd8:	bf00      	nop
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b083      	sub	sp, #12
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d107      	bne.n	800ec5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec5a:	e02a      	b.n	800ecb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d107      	bne.n	800ec76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec74:	e01d      	b.n	800ecb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d107      	bne.n	800ec90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2204      	movs	r2, #4
 800ec84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec8e:	e010      	b.n	800ecb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d107      	bne.n	800ecaa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2208      	movs	r2, #8
 800ec9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eca8:	e003      	b.n	800ecb2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f7ff ffb4 	bl	800ec20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	771a      	strb	r2, [r3, #28]
}
 800ecbe:	bf00      	nop
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d10b      	bne.n	800ecf6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2201      	movs	r2, #1
 800ece2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	69db      	ldr	r3, [r3, #28]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d136      	bne.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecf4:	e031      	b.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d10b      	bne.n	800ed18 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2202      	movs	r2, #2
 800ed04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69db      	ldr	r3, [r3, #28]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d125      	bne.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed16:	e020      	b.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d10b      	bne.n	800ed3a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2204      	movs	r2, #4
 800ed26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	69db      	ldr	r3, [r3, #28]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d114      	bne.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed38:	e00f      	b.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d10a      	bne.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2208      	movs	r2, #8
 800ed48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	69db      	ldr	r3, [r3, #28]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d103      	bne.n	800ed5a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff ff42 	bl	800ebe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2200      	movs	r2, #0
 800ed64:	771a      	strb	r2, [r3, #28]
}
 800ed66:	bf00      	nop
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d103      	bne.n	800ed8e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	771a      	strb	r2, [r3, #28]
 800ed8c:	e019      	b.n	800edc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d103      	bne.n	800eda0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	771a      	strb	r2, [r3, #28]
 800ed9e:	e010      	b.n	800edc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d103      	bne.n	800edb2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2204      	movs	r2, #4
 800edae:	771a      	strb	r2, [r3, #28]
 800edb0:	e007      	b.n	800edc2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d102      	bne.n	800edc2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2208      	movs	r2, #8
 800edc0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff ff18 	bl	800ebf8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	771a      	strb	r2, [r3, #28]
}
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a44      	ldr	r2, [pc, #272]	; (800eefc <TIM_Base_SetConfig+0x124>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d013      	beq.n	800ee18 <TIM_Base_SetConfig+0x40>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edf6:	d00f      	beq.n	800ee18 <TIM_Base_SetConfig+0x40>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a41      	ldr	r2, [pc, #260]	; (800ef00 <TIM_Base_SetConfig+0x128>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d00b      	beq.n	800ee18 <TIM_Base_SetConfig+0x40>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a40      	ldr	r2, [pc, #256]	; (800ef04 <TIM_Base_SetConfig+0x12c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d007      	beq.n	800ee18 <TIM_Base_SetConfig+0x40>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a3f      	ldr	r2, [pc, #252]	; (800ef08 <TIM_Base_SetConfig+0x130>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d003      	beq.n	800ee18 <TIM_Base_SetConfig+0x40>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a3e      	ldr	r2, [pc, #248]	; (800ef0c <TIM_Base_SetConfig+0x134>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d108      	bne.n	800ee2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4a33      	ldr	r2, [pc, #204]	; (800eefc <TIM_Base_SetConfig+0x124>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d027      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee38:	d023      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	4a30      	ldr	r2, [pc, #192]	; (800ef00 <TIM_Base_SetConfig+0x128>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	d01f      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a2f      	ldr	r2, [pc, #188]	; (800ef04 <TIM_Base_SetConfig+0x12c>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d01b      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a2e      	ldr	r2, [pc, #184]	; (800ef08 <TIM_Base_SetConfig+0x130>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d017      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a2d      	ldr	r2, [pc, #180]	; (800ef0c <TIM_Base_SetConfig+0x134>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d013      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a2c      	ldr	r2, [pc, #176]	; (800ef10 <TIM_Base_SetConfig+0x138>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d00f      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a2b      	ldr	r2, [pc, #172]	; (800ef14 <TIM_Base_SetConfig+0x13c>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d00b      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4a2a      	ldr	r2, [pc, #168]	; (800ef18 <TIM_Base_SetConfig+0x140>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d007      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4a29      	ldr	r2, [pc, #164]	; (800ef1c <TIM_Base_SetConfig+0x144>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d003      	beq.n	800ee82 <TIM_Base_SetConfig+0xaa>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a28      	ldr	r2, [pc, #160]	; (800ef20 <TIM_Base_SetConfig+0x148>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d108      	bne.n	800ee94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	68fa      	ldr	r2, [r7, #12]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	689a      	ldr	r2, [r3, #8]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a10      	ldr	r2, [pc, #64]	; (800eefc <TIM_Base_SetConfig+0x124>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d00f      	beq.n	800eee0 <TIM_Base_SetConfig+0x108>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a12      	ldr	r2, [pc, #72]	; (800ef0c <TIM_Base_SetConfig+0x134>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d00b      	beq.n	800eee0 <TIM_Base_SetConfig+0x108>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a11      	ldr	r2, [pc, #68]	; (800ef10 <TIM_Base_SetConfig+0x138>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d007      	beq.n	800eee0 <TIM_Base_SetConfig+0x108>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a10      	ldr	r2, [pc, #64]	; (800ef14 <TIM_Base_SetConfig+0x13c>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d003      	beq.n	800eee0 <TIM_Base_SetConfig+0x108>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a0f      	ldr	r2, [pc, #60]	; (800ef18 <TIM_Base_SetConfig+0x140>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d103      	bne.n	800eee8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	691a      	ldr	r2, [r3, #16]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2201      	movs	r2, #1
 800eeec:	615a      	str	r2, [r3, #20]
}
 800eeee:	bf00      	nop
 800eef0:	3714      	adds	r7, #20
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	40010000 	.word	0x40010000
 800ef00:	40000400 	.word	0x40000400
 800ef04:	40000800 	.word	0x40000800
 800ef08:	40000c00 	.word	0x40000c00
 800ef0c:	40010400 	.word	0x40010400
 800ef10:	40014000 	.word	0x40014000
 800ef14:	40014400 	.word	0x40014400
 800ef18:	40014800 	.word	0x40014800
 800ef1c:	4000e000 	.word	0x4000e000
 800ef20:	4000e400 	.word	0x4000e400

0800ef24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b087      	sub	sp, #28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	f023 0201 	bic.w	r2, r3, #1
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4b37      	ldr	r3, [pc, #220]	; (800f02c <TIM_OC1_SetConfig+0x108>)
 800ef50:	4013      	ands	r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f023 0303 	bic.w	r3, r3, #3
 800ef5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	f023 0302 	bic.w	r3, r3, #2
 800ef6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	697a      	ldr	r2, [r7, #20]
 800ef74:	4313      	orrs	r3, r2
 800ef76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a2d      	ldr	r2, [pc, #180]	; (800f030 <TIM_OC1_SetConfig+0x10c>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d00f      	beq.n	800efa0 <TIM_OC1_SetConfig+0x7c>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a2c      	ldr	r2, [pc, #176]	; (800f034 <TIM_OC1_SetConfig+0x110>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d00b      	beq.n	800efa0 <TIM_OC1_SetConfig+0x7c>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a2b      	ldr	r2, [pc, #172]	; (800f038 <TIM_OC1_SetConfig+0x114>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d007      	beq.n	800efa0 <TIM_OC1_SetConfig+0x7c>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a2a      	ldr	r2, [pc, #168]	; (800f03c <TIM_OC1_SetConfig+0x118>)
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d003      	beq.n	800efa0 <TIM_OC1_SetConfig+0x7c>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a29      	ldr	r2, [pc, #164]	; (800f040 <TIM_OC1_SetConfig+0x11c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d10c      	bne.n	800efba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f023 0308 	bic.w	r3, r3, #8
 800efa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	697a      	ldr	r2, [r7, #20]
 800efae:	4313      	orrs	r3, r2
 800efb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f023 0304 	bic.w	r3, r3, #4
 800efb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a1c      	ldr	r2, [pc, #112]	; (800f030 <TIM_OC1_SetConfig+0x10c>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d00f      	beq.n	800efe2 <TIM_OC1_SetConfig+0xbe>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a1b      	ldr	r2, [pc, #108]	; (800f034 <TIM_OC1_SetConfig+0x110>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d00b      	beq.n	800efe2 <TIM_OC1_SetConfig+0xbe>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a1a      	ldr	r2, [pc, #104]	; (800f038 <TIM_OC1_SetConfig+0x114>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d007      	beq.n	800efe2 <TIM_OC1_SetConfig+0xbe>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a19      	ldr	r2, [pc, #100]	; (800f03c <TIM_OC1_SetConfig+0x118>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d003      	beq.n	800efe2 <TIM_OC1_SetConfig+0xbe>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a18      	ldr	r2, [pc, #96]	; (800f040 <TIM_OC1_SetConfig+0x11c>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d111      	bne.n	800f006 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	695b      	ldr	r3, [r3, #20]
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	4313      	orrs	r3, r2
 800effa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	699b      	ldr	r3, [r3, #24]
 800f000:	693a      	ldr	r2, [r7, #16]
 800f002:	4313      	orrs	r3, r2
 800f004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	621a      	str	r2, [r3, #32]
}
 800f020:	bf00      	nop
 800f022:	371c      	adds	r7, #28
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr
 800f02c:	fffeff8f 	.word	0xfffeff8f
 800f030:	40010000 	.word	0x40010000
 800f034:	40010400 	.word	0x40010400
 800f038:	40014000 	.word	0x40014000
 800f03c:	40014400 	.word	0x40014400
 800f040:	40014800 	.word	0x40014800

0800f044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f044:	b480      	push	{r7}
 800f046:	b087      	sub	sp, #28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	f023 0210 	bic.w	r2, r3, #16
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	699b      	ldr	r3, [r3, #24]
 800f06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4b34      	ldr	r3, [pc, #208]	; (800f140 <TIM_OC2_SetConfig+0xfc>)
 800f070:	4013      	ands	r3, r2
 800f072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	021b      	lsls	r3, r3, #8
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	4313      	orrs	r3, r2
 800f086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f023 0320 	bic.w	r3, r3, #32
 800f08e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	689b      	ldr	r3, [r3, #8]
 800f094:	011b      	lsls	r3, r3, #4
 800f096:	697a      	ldr	r2, [r7, #20]
 800f098:	4313      	orrs	r3, r2
 800f09a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a29      	ldr	r2, [pc, #164]	; (800f144 <TIM_OC2_SetConfig+0x100>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d003      	beq.n	800f0ac <TIM_OC2_SetConfig+0x68>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a28      	ldr	r2, [pc, #160]	; (800f148 <TIM_OC2_SetConfig+0x104>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d10d      	bne.n	800f0c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	011b      	lsls	r3, r3, #4
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a1e      	ldr	r2, [pc, #120]	; (800f144 <TIM_OC2_SetConfig+0x100>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d00f      	beq.n	800f0f0 <TIM_OC2_SetConfig+0xac>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a1d      	ldr	r2, [pc, #116]	; (800f148 <TIM_OC2_SetConfig+0x104>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d00b      	beq.n	800f0f0 <TIM_OC2_SetConfig+0xac>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a1c      	ldr	r2, [pc, #112]	; (800f14c <TIM_OC2_SetConfig+0x108>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d007      	beq.n	800f0f0 <TIM_OC2_SetConfig+0xac>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a1b      	ldr	r2, [pc, #108]	; (800f150 <TIM_OC2_SetConfig+0x10c>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d003      	beq.n	800f0f0 <TIM_OC2_SetConfig+0xac>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a1a      	ldr	r2, [pc, #104]	; (800f154 <TIM_OC2_SetConfig+0x110>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d113      	bne.n	800f118 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	695b      	ldr	r3, [r3, #20]
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	4313      	orrs	r3, r2
 800f10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	699b      	ldr	r3, [r3, #24]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	4313      	orrs	r3, r2
 800f116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	685a      	ldr	r2, [r3, #4]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	621a      	str	r2, [r3, #32]
}
 800f132:	bf00      	nop
 800f134:	371c      	adds	r7, #28
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	feff8fff 	.word	0xfeff8fff
 800f144:	40010000 	.word	0x40010000
 800f148:	40010400 	.word	0x40010400
 800f14c:	40014000 	.word	0x40014000
 800f150:	40014400 	.word	0x40014400
 800f154:	40014800 	.word	0x40014800

0800f158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f158:	b480      	push	{r7}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	69db      	ldr	r3, [r3, #28]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	4b33      	ldr	r3, [pc, #204]	; (800f250 <TIM_OC3_SetConfig+0xf8>)
 800f184:	4013      	ands	r3, r2
 800f186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f023 0303 	bic.w	r3, r3, #3
 800f18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	4313      	orrs	r3, r2
 800f198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	021b      	lsls	r3, r3, #8
 800f1a8:	697a      	ldr	r2, [r7, #20]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a28      	ldr	r2, [pc, #160]	; (800f254 <TIM_OC3_SetConfig+0xfc>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d003      	beq.n	800f1be <TIM_OC3_SetConfig+0x66>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a27      	ldr	r2, [pc, #156]	; (800f258 <TIM_OC3_SetConfig+0x100>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d10d      	bne.n	800f1da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	021b      	lsls	r3, r3, #8
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a1d      	ldr	r2, [pc, #116]	; (800f254 <TIM_OC3_SetConfig+0xfc>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d00f      	beq.n	800f202 <TIM_OC3_SetConfig+0xaa>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a1c      	ldr	r2, [pc, #112]	; (800f258 <TIM_OC3_SetConfig+0x100>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d00b      	beq.n	800f202 <TIM_OC3_SetConfig+0xaa>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a1b      	ldr	r2, [pc, #108]	; (800f25c <TIM_OC3_SetConfig+0x104>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d007      	beq.n	800f202 <TIM_OC3_SetConfig+0xaa>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a1a      	ldr	r2, [pc, #104]	; (800f260 <TIM_OC3_SetConfig+0x108>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d003      	beq.n	800f202 <TIM_OC3_SetConfig+0xaa>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a19      	ldr	r2, [pc, #100]	; (800f264 <TIM_OC3_SetConfig+0x10c>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d113      	bne.n	800f22a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	011b      	lsls	r3, r3, #4
 800f218:	693a      	ldr	r2, [r7, #16]
 800f21a:	4313      	orrs	r3, r2
 800f21c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	011b      	lsls	r3, r3, #4
 800f224:	693a      	ldr	r2, [r7, #16]
 800f226:	4313      	orrs	r3, r2
 800f228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	685a      	ldr	r2, [r3, #4]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	621a      	str	r2, [r3, #32]
}
 800f244:	bf00      	nop
 800f246:	371c      	adds	r7, #28
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr
 800f250:	fffeff8f 	.word	0xfffeff8f
 800f254:	40010000 	.word	0x40010000
 800f258:	40010400 	.word	0x40010400
 800f25c:	40014000 	.word	0x40014000
 800f260:	40014400 	.word	0x40014400
 800f264:	40014800 	.word	0x40014800

0800f268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f268:	b480      	push	{r7}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	69db      	ldr	r3, [r3, #28]
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f290:	68fa      	ldr	r2, [r7, #12]
 800f292:	4b24      	ldr	r3, [pc, #144]	; (800f324 <TIM_OC4_SetConfig+0xbc>)
 800f294:	4013      	ands	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f29e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	021b      	lsls	r3, r3, #8
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	031b      	lsls	r3, r3, #12
 800f2ba:	693a      	ldr	r2, [r7, #16]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a19      	ldr	r2, [pc, #100]	; (800f328 <TIM_OC4_SetConfig+0xc0>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d00f      	beq.n	800f2e8 <TIM_OC4_SetConfig+0x80>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a18      	ldr	r2, [pc, #96]	; (800f32c <TIM_OC4_SetConfig+0xc4>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d00b      	beq.n	800f2e8 <TIM_OC4_SetConfig+0x80>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a17      	ldr	r2, [pc, #92]	; (800f330 <TIM_OC4_SetConfig+0xc8>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d007      	beq.n	800f2e8 <TIM_OC4_SetConfig+0x80>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a16      	ldr	r2, [pc, #88]	; (800f334 <TIM_OC4_SetConfig+0xcc>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d003      	beq.n	800f2e8 <TIM_OC4_SetConfig+0x80>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a15      	ldr	r2, [pc, #84]	; (800f338 <TIM_OC4_SetConfig+0xd0>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d109      	bne.n	800f2fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f2ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	019b      	lsls	r3, r3, #6
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	697a      	ldr	r2, [r7, #20]
 800f300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	693a      	ldr	r2, [r7, #16]
 800f314:	621a      	str	r2, [r3, #32]
}
 800f316:	bf00      	nop
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	feff8fff 	.word	0xfeff8fff
 800f328:	40010000 	.word	0x40010000
 800f32c:	40010400 	.word	0x40010400
 800f330:	40014000 	.word	0x40014000
 800f334:	40014400 	.word	0x40014400
 800f338:	40014800 	.word	0x40014800

0800f33c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a1b      	ldr	r3, [r3, #32]
 800f34a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	4b21      	ldr	r3, [pc, #132]	; (800f3ec <TIM_OC5_SetConfig+0xb0>)
 800f368:	4013      	ands	r3, r2
 800f36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	4313      	orrs	r3, r2
 800f374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f37c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	041b      	lsls	r3, r3, #16
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	4313      	orrs	r3, r2
 800f388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a18      	ldr	r2, [pc, #96]	; (800f3f0 <TIM_OC5_SetConfig+0xb4>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d00f      	beq.n	800f3b2 <TIM_OC5_SetConfig+0x76>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a17      	ldr	r2, [pc, #92]	; (800f3f4 <TIM_OC5_SetConfig+0xb8>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d00b      	beq.n	800f3b2 <TIM_OC5_SetConfig+0x76>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a16      	ldr	r2, [pc, #88]	; (800f3f8 <TIM_OC5_SetConfig+0xbc>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d007      	beq.n	800f3b2 <TIM_OC5_SetConfig+0x76>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a15      	ldr	r2, [pc, #84]	; (800f3fc <TIM_OC5_SetConfig+0xc0>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d003      	beq.n	800f3b2 <TIM_OC5_SetConfig+0x76>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4a14      	ldr	r2, [pc, #80]	; (800f400 <TIM_OC5_SetConfig+0xc4>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d109      	bne.n	800f3c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f3b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	021b      	lsls	r3, r3, #8
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	693a      	ldr	r2, [r7, #16]
 800f3de:	621a      	str	r2, [r3, #32]
}
 800f3e0:	bf00      	nop
 800f3e2:	371c      	adds	r7, #28
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	fffeff8f 	.word	0xfffeff8f
 800f3f0:	40010000 	.word	0x40010000
 800f3f4:	40010400 	.word	0x40010400
 800f3f8:	40014000 	.word	0x40014000
 800f3fc:	40014400 	.word	0x40014400
 800f400:	40014800 	.word	0x40014800

0800f404 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f404:	b480      	push	{r7}
 800f406:	b087      	sub	sp, #28
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a1b      	ldr	r3, [r3, #32]
 800f412:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a1b      	ldr	r3, [r3, #32]
 800f41e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4b22      	ldr	r3, [pc, #136]	; (800f4b8 <TIM_OC6_SetConfig+0xb4>)
 800f430:	4013      	ands	r3, r2
 800f432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	021b      	lsls	r3, r3, #8
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	4313      	orrs	r3, r2
 800f43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	051b      	lsls	r3, r3, #20
 800f44e:	693a      	ldr	r2, [r7, #16]
 800f450:	4313      	orrs	r3, r2
 800f452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a19      	ldr	r2, [pc, #100]	; (800f4bc <TIM_OC6_SetConfig+0xb8>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d00f      	beq.n	800f47c <TIM_OC6_SetConfig+0x78>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a18      	ldr	r2, [pc, #96]	; (800f4c0 <TIM_OC6_SetConfig+0xbc>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d00b      	beq.n	800f47c <TIM_OC6_SetConfig+0x78>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a17      	ldr	r2, [pc, #92]	; (800f4c4 <TIM_OC6_SetConfig+0xc0>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d007      	beq.n	800f47c <TIM_OC6_SetConfig+0x78>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a16      	ldr	r2, [pc, #88]	; (800f4c8 <TIM_OC6_SetConfig+0xc4>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d003      	beq.n	800f47c <TIM_OC6_SetConfig+0x78>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a15      	ldr	r2, [pc, #84]	; (800f4cc <TIM_OC6_SetConfig+0xc8>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d109      	bne.n	800f490 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f482:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	695b      	ldr	r3, [r3, #20]
 800f488:	029b      	lsls	r3, r3, #10
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	621a      	str	r2, [r3, #32]
}
 800f4aa:	bf00      	nop
 800f4ac:	371c      	adds	r7, #28
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	feff8fff 	.word	0xfeff8fff
 800f4bc:	40010000 	.word	0x40010000
 800f4c0:	40010400 	.word	0x40010400
 800f4c4:	40014000 	.word	0x40014000
 800f4c8:	40014400 	.word	0x40014400
 800f4cc:	40014800 	.word	0x40014800

0800f4d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b087      	sub	sp, #28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	f003 031f 	and.w	r3, r3, #31
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6a1a      	ldr	r2, [r3, #32]
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	43db      	mvns	r3, r3
 800f4f2:	401a      	ands	r2, r3
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6a1a      	ldr	r2, [r3, #32]
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	f003 031f 	and.w	r3, r3, #31
 800f502:	6879      	ldr	r1, [r7, #4]
 800f504:	fa01 f303 	lsl.w	r3, r1, r3
 800f508:	431a      	orrs	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	621a      	str	r2, [r3, #32]
}
 800f50e:	bf00      	nop
 800f510:	371c      	adds	r7, #28
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
	...

0800f51c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d101      	bne.n	800f534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f530:	2302      	movs	r3, #2
 800f532:	e077      	b.n	800f624 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2202      	movs	r2, #2
 800f540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4a35      	ldr	r2, [pc, #212]	; (800f630 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d004      	beq.n	800f568 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a34      	ldr	r2, [pc, #208]	; (800f634 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d108      	bne.n	800f57a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f56e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4313      	orrs	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f580:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4a25      	ldr	r2, [pc, #148]	; (800f630 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d02c      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5a6:	d027      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	4a22      	ldr	r2, [pc, #136]	; (800f638 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d022      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a21      	ldr	r2, [pc, #132]	; (800f63c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d01d      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a1f      	ldr	r2, [pc, #124]	; (800f640 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d018      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4a1a      	ldr	r2, [pc, #104]	; (800f634 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d013      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a1b      	ldr	r2, [pc, #108]	; (800f644 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d00e      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a1a      	ldr	r2, [pc, #104]	; (800f648 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d009      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	4a18      	ldr	r2, [pc, #96]	; (800f64c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d004      	beq.n	800f5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a17      	ldr	r2, [pc, #92]	; (800f650 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d10c      	bne.n	800f612 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	68ba      	ldr	r2, [r7, #8]
 800f606:	4313      	orrs	r3, r2
 800f608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2201      	movs	r2, #1
 800f616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	40010000 	.word	0x40010000
 800f634:	40010400 	.word	0x40010400
 800f638:	40000400 	.word	0x40000400
 800f63c:	40000800 	.word	0x40000800
 800f640:	40000c00 	.word	0x40000c00
 800f644:	40001800 	.word	0x40001800
 800f648:	40014000 	.word	0x40014000
 800f64c:	4000e000 	.word	0x4000e000
 800f650:	4000e400 	.word	0x4000e400

0800f654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f65c:	bf00      	nop
 800f65e:	370c      	adds	r7, #12
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr

0800f668 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f670:	bf00      	nop
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f684:	bf00      	nop
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr

0800f690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e042      	b.n	800f728 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d106      	bne.n	800f6ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7f3 f9a9 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2224      	movs	r2, #36	; 0x24
 800f6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f022 0201 	bic.w	r2, r2, #1
 800f6d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f82c 	bl	800f730 <UART_SetConfig>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d101      	bne.n	800f6e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e022      	b.n	800f728 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d002      	beq.n	800f6f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 fe8c 	bl	8010408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	685a      	ldr	r2, [r3, #4]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	689a      	ldr	r2, [r3, #8]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f70e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f042 0201 	orr.w	r2, r2, #1
 800f71e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 ff13 	bl	801054c <UART_CheckIdleState>
 800f726:	4603      	mov	r3, r0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f734:	b092      	sub	sp, #72	; 0x48
 800f736:	af00      	add	r7, sp, #0
 800f738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f73a:	2300      	movs	r3, #0
 800f73c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	689a      	ldr	r2, [r3, #8]
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	431a      	orrs	r2, r3
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	695b      	ldr	r3, [r3, #20]
 800f74e:	431a      	orrs	r2, r3
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	69db      	ldr	r3, [r3, #28]
 800f754:	4313      	orrs	r3, r2
 800f756:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	4bbe      	ldr	r3, [pc, #760]	; (800fa58 <UART_SetConfig+0x328>)
 800f760:	4013      	ands	r3, r2
 800f762:	697a      	ldr	r2, [r7, #20]
 800f764:	6812      	ldr	r2, [r2, #0]
 800f766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f768:	430b      	orrs	r3, r1
 800f76a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	68da      	ldr	r2, [r3, #12]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	699b      	ldr	r3, [r3, #24]
 800f786:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4ab3      	ldr	r2, [pc, #716]	; (800fa5c <UART_SetConfig+0x32c>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d004      	beq.n	800f79c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f798:	4313      	orrs	r3, r2
 800f79a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	689a      	ldr	r2, [r3, #8]
 800f7a2:	4baf      	ldr	r3, [pc, #700]	; (800fa60 <UART_SetConfig+0x330>)
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	6812      	ldr	r2, [r2, #0]
 800f7aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7ac:	430b      	orrs	r3, r1
 800f7ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b6:	f023 010f 	bic.w	r1, r3, #15
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	430a      	orrs	r2, r1
 800f7c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4aa6      	ldr	r2, [pc, #664]	; (800fa64 <UART_SetConfig+0x334>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d177      	bne.n	800f8c0 <UART_SetConfig+0x190>
 800f7d0:	4ba5      	ldr	r3, [pc, #660]	; (800fa68 <UART_SetConfig+0x338>)
 800f7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7d8:	2b28      	cmp	r3, #40	; 0x28
 800f7da:	d86d      	bhi.n	800f8b8 <UART_SetConfig+0x188>
 800f7dc:	a201      	add	r2, pc, #4	; (adr r2, 800f7e4 <UART_SetConfig+0xb4>)
 800f7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e2:	bf00      	nop
 800f7e4:	0800f889 	.word	0x0800f889
 800f7e8:	0800f8b9 	.word	0x0800f8b9
 800f7ec:	0800f8b9 	.word	0x0800f8b9
 800f7f0:	0800f8b9 	.word	0x0800f8b9
 800f7f4:	0800f8b9 	.word	0x0800f8b9
 800f7f8:	0800f8b9 	.word	0x0800f8b9
 800f7fc:	0800f8b9 	.word	0x0800f8b9
 800f800:	0800f8b9 	.word	0x0800f8b9
 800f804:	0800f891 	.word	0x0800f891
 800f808:	0800f8b9 	.word	0x0800f8b9
 800f80c:	0800f8b9 	.word	0x0800f8b9
 800f810:	0800f8b9 	.word	0x0800f8b9
 800f814:	0800f8b9 	.word	0x0800f8b9
 800f818:	0800f8b9 	.word	0x0800f8b9
 800f81c:	0800f8b9 	.word	0x0800f8b9
 800f820:	0800f8b9 	.word	0x0800f8b9
 800f824:	0800f899 	.word	0x0800f899
 800f828:	0800f8b9 	.word	0x0800f8b9
 800f82c:	0800f8b9 	.word	0x0800f8b9
 800f830:	0800f8b9 	.word	0x0800f8b9
 800f834:	0800f8b9 	.word	0x0800f8b9
 800f838:	0800f8b9 	.word	0x0800f8b9
 800f83c:	0800f8b9 	.word	0x0800f8b9
 800f840:	0800f8b9 	.word	0x0800f8b9
 800f844:	0800f8a1 	.word	0x0800f8a1
 800f848:	0800f8b9 	.word	0x0800f8b9
 800f84c:	0800f8b9 	.word	0x0800f8b9
 800f850:	0800f8b9 	.word	0x0800f8b9
 800f854:	0800f8b9 	.word	0x0800f8b9
 800f858:	0800f8b9 	.word	0x0800f8b9
 800f85c:	0800f8b9 	.word	0x0800f8b9
 800f860:	0800f8b9 	.word	0x0800f8b9
 800f864:	0800f8a9 	.word	0x0800f8a9
 800f868:	0800f8b9 	.word	0x0800f8b9
 800f86c:	0800f8b9 	.word	0x0800f8b9
 800f870:	0800f8b9 	.word	0x0800f8b9
 800f874:	0800f8b9 	.word	0x0800f8b9
 800f878:	0800f8b9 	.word	0x0800f8b9
 800f87c:	0800f8b9 	.word	0x0800f8b9
 800f880:	0800f8b9 	.word	0x0800f8b9
 800f884:	0800f8b1 	.word	0x0800f8b1
 800f888:	2301      	movs	r3, #1
 800f88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88e:	e326      	b.n	800fede <UART_SetConfig+0x7ae>
 800f890:	2304      	movs	r3, #4
 800f892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f896:	e322      	b.n	800fede <UART_SetConfig+0x7ae>
 800f898:	2308      	movs	r3, #8
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e31e      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8a0:	2310      	movs	r3, #16
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a6:	e31a      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8a8:	2320      	movs	r3, #32
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e316      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8b0:	2340      	movs	r3, #64	; 0x40
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e312      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8b8:	2380      	movs	r3, #128	; 0x80
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e30e      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a69      	ldr	r2, [pc, #420]	; (800fa6c <UART_SetConfig+0x33c>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d130      	bne.n	800f92c <UART_SetConfig+0x1fc>
 800f8ca:	4b67      	ldr	r3, [pc, #412]	; (800fa68 <UART_SetConfig+0x338>)
 800f8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ce:	f003 0307 	and.w	r3, r3, #7
 800f8d2:	2b05      	cmp	r3, #5
 800f8d4:	d826      	bhi.n	800f924 <UART_SetConfig+0x1f4>
 800f8d6:	a201      	add	r2, pc, #4	; (adr r2, 800f8dc <UART_SetConfig+0x1ac>)
 800f8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8dc:	0800f8f5 	.word	0x0800f8f5
 800f8e0:	0800f8fd 	.word	0x0800f8fd
 800f8e4:	0800f905 	.word	0x0800f905
 800f8e8:	0800f90d 	.word	0x0800f90d
 800f8ec:	0800f915 	.word	0x0800f915
 800f8f0:	0800f91d 	.word	0x0800f91d
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fa:	e2f0      	b.n	800fede <UART_SetConfig+0x7ae>
 800f8fc:	2304      	movs	r3, #4
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f902:	e2ec      	b.n	800fede <UART_SetConfig+0x7ae>
 800f904:	2308      	movs	r3, #8
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e2e8      	b.n	800fede <UART_SetConfig+0x7ae>
 800f90c:	2310      	movs	r3, #16
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e2e4      	b.n	800fede <UART_SetConfig+0x7ae>
 800f914:	2320      	movs	r3, #32
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e2e0      	b.n	800fede <UART_SetConfig+0x7ae>
 800f91c:	2340      	movs	r3, #64	; 0x40
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e2dc      	b.n	800fede <UART_SetConfig+0x7ae>
 800f924:	2380      	movs	r3, #128	; 0x80
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e2d8      	b.n	800fede <UART_SetConfig+0x7ae>
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a4f      	ldr	r2, [pc, #316]	; (800fa70 <UART_SetConfig+0x340>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d130      	bne.n	800f998 <UART_SetConfig+0x268>
 800f936:	4b4c      	ldr	r3, [pc, #304]	; (800fa68 <UART_SetConfig+0x338>)
 800f938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f93a:	f003 0307 	and.w	r3, r3, #7
 800f93e:	2b05      	cmp	r3, #5
 800f940:	d826      	bhi.n	800f990 <UART_SetConfig+0x260>
 800f942:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <UART_SetConfig+0x218>)
 800f944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f948:	0800f961 	.word	0x0800f961
 800f94c:	0800f969 	.word	0x0800f969
 800f950:	0800f971 	.word	0x0800f971
 800f954:	0800f979 	.word	0x0800f979
 800f958:	0800f981 	.word	0x0800f981
 800f95c:	0800f989 	.word	0x0800f989
 800f960:	2300      	movs	r3, #0
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e2ba      	b.n	800fede <UART_SetConfig+0x7ae>
 800f968:	2304      	movs	r3, #4
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96e:	e2b6      	b.n	800fede <UART_SetConfig+0x7ae>
 800f970:	2308      	movs	r3, #8
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e2b2      	b.n	800fede <UART_SetConfig+0x7ae>
 800f978:	2310      	movs	r3, #16
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97e:	e2ae      	b.n	800fede <UART_SetConfig+0x7ae>
 800f980:	2320      	movs	r3, #32
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f986:	e2aa      	b.n	800fede <UART_SetConfig+0x7ae>
 800f988:	2340      	movs	r3, #64	; 0x40
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98e:	e2a6      	b.n	800fede <UART_SetConfig+0x7ae>
 800f990:	2380      	movs	r3, #128	; 0x80
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e2a2      	b.n	800fede <UART_SetConfig+0x7ae>
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4a35      	ldr	r2, [pc, #212]	; (800fa74 <UART_SetConfig+0x344>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d130      	bne.n	800fa04 <UART_SetConfig+0x2d4>
 800f9a2:	4b31      	ldr	r3, [pc, #196]	; (800fa68 <UART_SetConfig+0x338>)
 800f9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9a6:	f003 0307 	and.w	r3, r3, #7
 800f9aa:	2b05      	cmp	r3, #5
 800f9ac:	d826      	bhi.n	800f9fc <UART_SetConfig+0x2cc>
 800f9ae:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <UART_SetConfig+0x284>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800f9cd 	.word	0x0800f9cd
 800f9b8:	0800f9d5 	.word	0x0800f9d5
 800f9bc:	0800f9dd 	.word	0x0800f9dd
 800f9c0:	0800f9e5 	.word	0x0800f9e5
 800f9c4:	0800f9ed 	.word	0x0800f9ed
 800f9c8:	0800f9f5 	.word	0x0800f9f5
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d2:	e284      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9d4:	2304      	movs	r3, #4
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9da:	e280      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9dc:	2308      	movs	r3, #8
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e2:	e27c      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9e4:	2310      	movs	r3, #16
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ea:	e278      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9ec:	2320      	movs	r3, #32
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e274      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9f4:	2340      	movs	r3, #64	; 0x40
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fa:	e270      	b.n	800fede <UART_SetConfig+0x7ae>
 800f9fc:	2380      	movs	r3, #128	; 0x80
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e26c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a1b      	ldr	r2, [pc, #108]	; (800fa78 <UART_SetConfig+0x348>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d142      	bne.n	800fa94 <UART_SetConfig+0x364>
 800fa0e:	4b16      	ldr	r3, [pc, #88]	; (800fa68 <UART_SetConfig+0x338>)
 800fa10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	2b05      	cmp	r3, #5
 800fa18:	d838      	bhi.n	800fa8c <UART_SetConfig+0x35c>
 800fa1a:	a201      	add	r2, pc, #4	; (adr r2, 800fa20 <UART_SetConfig+0x2f0>)
 800fa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa20:	0800fa39 	.word	0x0800fa39
 800fa24:	0800fa41 	.word	0x0800fa41
 800fa28:	0800fa49 	.word	0x0800fa49
 800fa2c:	0800fa51 	.word	0x0800fa51
 800fa30:	0800fa7d 	.word	0x0800fa7d
 800fa34:	0800fa85 	.word	0x0800fa85
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e24e      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa46:	e24a      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e246      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e242      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa58:	cfff69f3 	.word	0xcfff69f3
 800fa5c:	58000c00 	.word	0x58000c00
 800fa60:	11fff4ff 	.word	0x11fff4ff
 800fa64:	40011000 	.word	0x40011000
 800fa68:	58024400 	.word	0x58024400
 800fa6c:	40004400 	.word	0x40004400
 800fa70:	40004800 	.word	0x40004800
 800fa74:	40004c00 	.word	0x40004c00
 800fa78:	40005000 	.word	0x40005000
 800fa7c:	2320      	movs	r3, #32
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa82:	e22c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa84:	2340      	movs	r3, #64	; 0x40
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8a:	e228      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa8c:	2380      	movs	r3, #128	; 0x80
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa92:	e224      	b.n	800fede <UART_SetConfig+0x7ae>
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4ab1      	ldr	r2, [pc, #708]	; (800fd60 <UART_SetConfig+0x630>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d176      	bne.n	800fb8c <UART_SetConfig+0x45c>
 800fa9e:	4bb1      	ldr	r3, [pc, #708]	; (800fd64 <UART_SetConfig+0x634>)
 800faa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800faa6:	2b28      	cmp	r3, #40	; 0x28
 800faa8:	d86c      	bhi.n	800fb84 <UART_SetConfig+0x454>
 800faaa:	a201      	add	r2, pc, #4	; (adr r2, 800fab0 <UART_SetConfig+0x380>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fb55 	.word	0x0800fb55
 800fab4:	0800fb85 	.word	0x0800fb85
 800fab8:	0800fb85 	.word	0x0800fb85
 800fabc:	0800fb85 	.word	0x0800fb85
 800fac0:	0800fb85 	.word	0x0800fb85
 800fac4:	0800fb85 	.word	0x0800fb85
 800fac8:	0800fb85 	.word	0x0800fb85
 800facc:	0800fb85 	.word	0x0800fb85
 800fad0:	0800fb5d 	.word	0x0800fb5d
 800fad4:	0800fb85 	.word	0x0800fb85
 800fad8:	0800fb85 	.word	0x0800fb85
 800fadc:	0800fb85 	.word	0x0800fb85
 800fae0:	0800fb85 	.word	0x0800fb85
 800fae4:	0800fb85 	.word	0x0800fb85
 800fae8:	0800fb85 	.word	0x0800fb85
 800faec:	0800fb85 	.word	0x0800fb85
 800faf0:	0800fb65 	.word	0x0800fb65
 800faf4:	0800fb85 	.word	0x0800fb85
 800faf8:	0800fb85 	.word	0x0800fb85
 800fafc:	0800fb85 	.word	0x0800fb85
 800fb00:	0800fb85 	.word	0x0800fb85
 800fb04:	0800fb85 	.word	0x0800fb85
 800fb08:	0800fb85 	.word	0x0800fb85
 800fb0c:	0800fb85 	.word	0x0800fb85
 800fb10:	0800fb6d 	.word	0x0800fb6d
 800fb14:	0800fb85 	.word	0x0800fb85
 800fb18:	0800fb85 	.word	0x0800fb85
 800fb1c:	0800fb85 	.word	0x0800fb85
 800fb20:	0800fb85 	.word	0x0800fb85
 800fb24:	0800fb85 	.word	0x0800fb85
 800fb28:	0800fb85 	.word	0x0800fb85
 800fb2c:	0800fb85 	.word	0x0800fb85
 800fb30:	0800fb75 	.word	0x0800fb75
 800fb34:	0800fb85 	.word	0x0800fb85
 800fb38:	0800fb85 	.word	0x0800fb85
 800fb3c:	0800fb85 	.word	0x0800fb85
 800fb40:	0800fb85 	.word	0x0800fb85
 800fb44:	0800fb85 	.word	0x0800fb85
 800fb48:	0800fb85 	.word	0x0800fb85
 800fb4c:	0800fb85 	.word	0x0800fb85
 800fb50:	0800fb7d 	.word	0x0800fb7d
 800fb54:	2301      	movs	r3, #1
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5a:	e1c0      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb5c:	2304      	movs	r3, #4
 800fb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb62:	e1bc      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb64:	2308      	movs	r3, #8
 800fb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6a:	e1b8      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb6c:	2310      	movs	r3, #16
 800fb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb72:	e1b4      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb74:	2320      	movs	r3, #32
 800fb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb7a:	e1b0      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb7c:	2340      	movs	r3, #64	; 0x40
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb82:	e1ac      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb84:	2380      	movs	r3, #128	; 0x80
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e1a8      	b.n	800fede <UART_SetConfig+0x7ae>
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a75      	ldr	r2, [pc, #468]	; (800fd68 <UART_SetConfig+0x638>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d130      	bne.n	800fbf8 <UART_SetConfig+0x4c8>
 800fb96:	4b73      	ldr	r3, [pc, #460]	; (800fd64 <UART_SetConfig+0x634>)
 800fb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb9a:	f003 0307 	and.w	r3, r3, #7
 800fb9e:	2b05      	cmp	r3, #5
 800fba0:	d826      	bhi.n	800fbf0 <UART_SetConfig+0x4c0>
 800fba2:	a201      	add	r2, pc, #4	; (adr r2, 800fba8 <UART_SetConfig+0x478>)
 800fba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba8:	0800fbc1 	.word	0x0800fbc1
 800fbac:	0800fbc9 	.word	0x0800fbc9
 800fbb0:	0800fbd1 	.word	0x0800fbd1
 800fbb4:	0800fbd9 	.word	0x0800fbd9
 800fbb8:	0800fbe1 	.word	0x0800fbe1
 800fbbc:	0800fbe9 	.word	0x0800fbe9
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc6:	e18a      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbc8:	2304      	movs	r3, #4
 800fbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbce:	e186      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbd0:	2308      	movs	r3, #8
 800fbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd6:	e182      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbd8:	2310      	movs	r3, #16
 800fbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbde:	e17e      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbe0:	2320      	movs	r3, #32
 800fbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbe6:	e17a      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbe8:	2340      	movs	r3, #64	; 0x40
 800fbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbee:	e176      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbf0:	2380      	movs	r3, #128	; 0x80
 800fbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbf6:	e172      	b.n	800fede <UART_SetConfig+0x7ae>
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a5b      	ldr	r2, [pc, #364]	; (800fd6c <UART_SetConfig+0x63c>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d130      	bne.n	800fc64 <UART_SetConfig+0x534>
 800fc02:	4b58      	ldr	r3, [pc, #352]	; (800fd64 <UART_SetConfig+0x634>)
 800fc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc06:	f003 0307 	and.w	r3, r3, #7
 800fc0a:	2b05      	cmp	r3, #5
 800fc0c:	d826      	bhi.n	800fc5c <UART_SetConfig+0x52c>
 800fc0e:	a201      	add	r2, pc, #4	; (adr r2, 800fc14 <UART_SetConfig+0x4e4>)
 800fc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc14:	0800fc2d 	.word	0x0800fc2d
 800fc18:	0800fc35 	.word	0x0800fc35
 800fc1c:	0800fc3d 	.word	0x0800fc3d
 800fc20:	0800fc45 	.word	0x0800fc45
 800fc24:	0800fc4d 	.word	0x0800fc4d
 800fc28:	0800fc55 	.word	0x0800fc55
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc32:	e154      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc34:	2304      	movs	r3, #4
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc3a:	e150      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc3c:	2308      	movs	r3, #8
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc42:	e14c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc44:	2310      	movs	r3, #16
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc4a:	e148      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc4c:	2320      	movs	r3, #32
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc52:	e144      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc54:	2340      	movs	r3, #64	; 0x40
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc5a:	e140      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc5c:	2380      	movs	r3, #128	; 0x80
 800fc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc62:	e13c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a41      	ldr	r2, [pc, #260]	; (800fd70 <UART_SetConfig+0x640>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	f040 8082 	bne.w	800fd74 <UART_SetConfig+0x644>
 800fc70:	4b3c      	ldr	r3, [pc, #240]	; (800fd64 <UART_SetConfig+0x634>)
 800fc72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc78:	2b28      	cmp	r3, #40	; 0x28
 800fc7a:	d86d      	bhi.n	800fd58 <UART_SetConfig+0x628>
 800fc7c:	a201      	add	r2, pc, #4	; (adr r2, 800fc84 <UART_SetConfig+0x554>)
 800fc7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc82:	bf00      	nop
 800fc84:	0800fd29 	.word	0x0800fd29
 800fc88:	0800fd59 	.word	0x0800fd59
 800fc8c:	0800fd59 	.word	0x0800fd59
 800fc90:	0800fd59 	.word	0x0800fd59
 800fc94:	0800fd59 	.word	0x0800fd59
 800fc98:	0800fd59 	.word	0x0800fd59
 800fc9c:	0800fd59 	.word	0x0800fd59
 800fca0:	0800fd59 	.word	0x0800fd59
 800fca4:	0800fd31 	.word	0x0800fd31
 800fca8:	0800fd59 	.word	0x0800fd59
 800fcac:	0800fd59 	.word	0x0800fd59
 800fcb0:	0800fd59 	.word	0x0800fd59
 800fcb4:	0800fd59 	.word	0x0800fd59
 800fcb8:	0800fd59 	.word	0x0800fd59
 800fcbc:	0800fd59 	.word	0x0800fd59
 800fcc0:	0800fd59 	.word	0x0800fd59
 800fcc4:	0800fd39 	.word	0x0800fd39
 800fcc8:	0800fd59 	.word	0x0800fd59
 800fccc:	0800fd59 	.word	0x0800fd59
 800fcd0:	0800fd59 	.word	0x0800fd59
 800fcd4:	0800fd59 	.word	0x0800fd59
 800fcd8:	0800fd59 	.word	0x0800fd59
 800fcdc:	0800fd59 	.word	0x0800fd59
 800fce0:	0800fd59 	.word	0x0800fd59
 800fce4:	0800fd41 	.word	0x0800fd41
 800fce8:	0800fd59 	.word	0x0800fd59
 800fcec:	0800fd59 	.word	0x0800fd59
 800fcf0:	0800fd59 	.word	0x0800fd59
 800fcf4:	0800fd59 	.word	0x0800fd59
 800fcf8:	0800fd59 	.word	0x0800fd59
 800fcfc:	0800fd59 	.word	0x0800fd59
 800fd00:	0800fd59 	.word	0x0800fd59
 800fd04:	0800fd49 	.word	0x0800fd49
 800fd08:	0800fd59 	.word	0x0800fd59
 800fd0c:	0800fd59 	.word	0x0800fd59
 800fd10:	0800fd59 	.word	0x0800fd59
 800fd14:	0800fd59 	.word	0x0800fd59
 800fd18:	0800fd59 	.word	0x0800fd59
 800fd1c:	0800fd59 	.word	0x0800fd59
 800fd20:	0800fd59 	.word	0x0800fd59
 800fd24:	0800fd51 	.word	0x0800fd51
 800fd28:	2301      	movs	r3, #1
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd2e:	e0d6      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd30:	2304      	movs	r3, #4
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd36:	e0d2      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd38:	2308      	movs	r3, #8
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd3e:	e0ce      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd40:	2310      	movs	r3, #16
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd46:	e0ca      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd48:	2320      	movs	r3, #32
 800fd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd4e:	e0c6      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd50:	2340      	movs	r3, #64	; 0x40
 800fd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd56:	e0c2      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd58:	2380      	movs	r3, #128	; 0x80
 800fd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fd5e:	e0be      	b.n	800fede <UART_SetConfig+0x7ae>
 800fd60:	40011400 	.word	0x40011400
 800fd64:	58024400 	.word	0x58024400
 800fd68:	40007800 	.word	0x40007800
 800fd6c:	40007c00 	.word	0x40007c00
 800fd70:	40011800 	.word	0x40011800
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4aad      	ldr	r2, [pc, #692]	; (8010030 <UART_SetConfig+0x900>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d176      	bne.n	800fe6c <UART_SetConfig+0x73c>
 800fd7e:	4bad      	ldr	r3, [pc, #692]	; (8010034 <UART_SetConfig+0x904>)
 800fd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd86:	2b28      	cmp	r3, #40	; 0x28
 800fd88:	d86c      	bhi.n	800fe64 <UART_SetConfig+0x734>
 800fd8a:	a201      	add	r2, pc, #4	; (adr r2, 800fd90 <UART_SetConfig+0x660>)
 800fd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd90:	0800fe35 	.word	0x0800fe35
 800fd94:	0800fe65 	.word	0x0800fe65
 800fd98:	0800fe65 	.word	0x0800fe65
 800fd9c:	0800fe65 	.word	0x0800fe65
 800fda0:	0800fe65 	.word	0x0800fe65
 800fda4:	0800fe65 	.word	0x0800fe65
 800fda8:	0800fe65 	.word	0x0800fe65
 800fdac:	0800fe65 	.word	0x0800fe65
 800fdb0:	0800fe3d 	.word	0x0800fe3d
 800fdb4:	0800fe65 	.word	0x0800fe65
 800fdb8:	0800fe65 	.word	0x0800fe65
 800fdbc:	0800fe65 	.word	0x0800fe65
 800fdc0:	0800fe65 	.word	0x0800fe65
 800fdc4:	0800fe65 	.word	0x0800fe65
 800fdc8:	0800fe65 	.word	0x0800fe65
 800fdcc:	0800fe65 	.word	0x0800fe65
 800fdd0:	0800fe45 	.word	0x0800fe45
 800fdd4:	0800fe65 	.word	0x0800fe65
 800fdd8:	0800fe65 	.word	0x0800fe65
 800fddc:	0800fe65 	.word	0x0800fe65
 800fde0:	0800fe65 	.word	0x0800fe65
 800fde4:	0800fe65 	.word	0x0800fe65
 800fde8:	0800fe65 	.word	0x0800fe65
 800fdec:	0800fe65 	.word	0x0800fe65
 800fdf0:	0800fe4d 	.word	0x0800fe4d
 800fdf4:	0800fe65 	.word	0x0800fe65
 800fdf8:	0800fe65 	.word	0x0800fe65
 800fdfc:	0800fe65 	.word	0x0800fe65
 800fe00:	0800fe65 	.word	0x0800fe65
 800fe04:	0800fe65 	.word	0x0800fe65
 800fe08:	0800fe65 	.word	0x0800fe65
 800fe0c:	0800fe65 	.word	0x0800fe65
 800fe10:	0800fe55 	.word	0x0800fe55
 800fe14:	0800fe65 	.word	0x0800fe65
 800fe18:	0800fe65 	.word	0x0800fe65
 800fe1c:	0800fe65 	.word	0x0800fe65
 800fe20:	0800fe65 	.word	0x0800fe65
 800fe24:	0800fe65 	.word	0x0800fe65
 800fe28:	0800fe65 	.word	0x0800fe65
 800fe2c:	0800fe65 	.word	0x0800fe65
 800fe30:	0800fe5d 	.word	0x0800fe5d
 800fe34:	2301      	movs	r3, #1
 800fe36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe3a:	e050      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe3c:	2304      	movs	r3, #4
 800fe3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe42:	e04c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe44:	2308      	movs	r3, #8
 800fe46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe4a:	e048      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe4c:	2310      	movs	r3, #16
 800fe4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe52:	e044      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe54:	2320      	movs	r3, #32
 800fe56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe5a:	e040      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe5c:	2340      	movs	r3, #64	; 0x40
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe62:	e03c      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe64:	2380      	movs	r3, #128	; 0x80
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe6a:	e038      	b.n	800fede <UART_SetConfig+0x7ae>
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a71      	ldr	r2, [pc, #452]	; (8010038 <UART_SetConfig+0x908>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d130      	bne.n	800fed8 <UART_SetConfig+0x7a8>
 800fe76:	4b6f      	ldr	r3, [pc, #444]	; (8010034 <UART_SetConfig+0x904>)
 800fe78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe7a:	f003 0307 	and.w	r3, r3, #7
 800fe7e:	2b05      	cmp	r3, #5
 800fe80:	d826      	bhi.n	800fed0 <UART_SetConfig+0x7a0>
 800fe82:	a201      	add	r2, pc, #4	; (adr r2, 800fe88 <UART_SetConfig+0x758>)
 800fe84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe88:	0800fea1 	.word	0x0800fea1
 800fe8c:	0800fea9 	.word	0x0800fea9
 800fe90:	0800feb1 	.word	0x0800feb1
 800fe94:	0800feb9 	.word	0x0800feb9
 800fe98:	0800fec1 	.word	0x0800fec1
 800fe9c:	0800fec9 	.word	0x0800fec9
 800fea0:	2302      	movs	r3, #2
 800fea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fea6:	e01a      	b.n	800fede <UART_SetConfig+0x7ae>
 800fea8:	2304      	movs	r3, #4
 800feaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feae:	e016      	b.n	800fede <UART_SetConfig+0x7ae>
 800feb0:	2308      	movs	r3, #8
 800feb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feb6:	e012      	b.n	800fede <UART_SetConfig+0x7ae>
 800feb8:	2310      	movs	r3, #16
 800feba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800febe:	e00e      	b.n	800fede <UART_SetConfig+0x7ae>
 800fec0:	2320      	movs	r3, #32
 800fec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fec6:	e00a      	b.n	800fede <UART_SetConfig+0x7ae>
 800fec8:	2340      	movs	r3, #64	; 0x40
 800feca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fece:	e006      	b.n	800fede <UART_SetConfig+0x7ae>
 800fed0:	2380      	movs	r3, #128	; 0x80
 800fed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fed6:	e002      	b.n	800fede <UART_SetConfig+0x7ae>
 800fed8:	2380      	movs	r3, #128	; 0x80
 800feda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	4a55      	ldr	r2, [pc, #340]	; (8010038 <UART_SetConfig+0x908>)
 800fee4:	4293      	cmp	r3, r2
 800fee6:	f040 80f8 	bne.w	80100da <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800feea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800feee:	2b20      	cmp	r3, #32
 800fef0:	dc46      	bgt.n	800ff80 <UART_SetConfig+0x850>
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	db75      	blt.n	800ffe2 <UART_SetConfig+0x8b2>
 800fef6:	3b02      	subs	r3, #2
 800fef8:	2b1e      	cmp	r3, #30
 800fefa:	d872      	bhi.n	800ffe2 <UART_SetConfig+0x8b2>
 800fefc:	a201      	add	r2, pc, #4	; (adr r2, 800ff04 <UART_SetConfig+0x7d4>)
 800fefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff02:	bf00      	nop
 800ff04:	0800ff87 	.word	0x0800ff87
 800ff08:	0800ffe3 	.word	0x0800ffe3
 800ff0c:	0800ff8f 	.word	0x0800ff8f
 800ff10:	0800ffe3 	.word	0x0800ffe3
 800ff14:	0800ffe3 	.word	0x0800ffe3
 800ff18:	0800ffe3 	.word	0x0800ffe3
 800ff1c:	0800ff9f 	.word	0x0800ff9f
 800ff20:	0800ffe3 	.word	0x0800ffe3
 800ff24:	0800ffe3 	.word	0x0800ffe3
 800ff28:	0800ffe3 	.word	0x0800ffe3
 800ff2c:	0800ffe3 	.word	0x0800ffe3
 800ff30:	0800ffe3 	.word	0x0800ffe3
 800ff34:	0800ffe3 	.word	0x0800ffe3
 800ff38:	0800ffe3 	.word	0x0800ffe3
 800ff3c:	0800ffaf 	.word	0x0800ffaf
 800ff40:	0800ffe3 	.word	0x0800ffe3
 800ff44:	0800ffe3 	.word	0x0800ffe3
 800ff48:	0800ffe3 	.word	0x0800ffe3
 800ff4c:	0800ffe3 	.word	0x0800ffe3
 800ff50:	0800ffe3 	.word	0x0800ffe3
 800ff54:	0800ffe3 	.word	0x0800ffe3
 800ff58:	0800ffe3 	.word	0x0800ffe3
 800ff5c:	0800ffe3 	.word	0x0800ffe3
 800ff60:	0800ffe3 	.word	0x0800ffe3
 800ff64:	0800ffe3 	.word	0x0800ffe3
 800ff68:	0800ffe3 	.word	0x0800ffe3
 800ff6c:	0800ffe3 	.word	0x0800ffe3
 800ff70:	0800ffe3 	.word	0x0800ffe3
 800ff74:	0800ffe3 	.word	0x0800ffe3
 800ff78:	0800ffe3 	.word	0x0800ffe3
 800ff7c:	0800ffd5 	.word	0x0800ffd5
 800ff80:	2b40      	cmp	r3, #64	; 0x40
 800ff82:	d02a      	beq.n	800ffda <UART_SetConfig+0x8aa>
 800ff84:	e02d      	b.n	800ffe2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff86:	f7fb fde1 	bl	800bb4c <HAL_RCCEx_GetD3PCLK1Freq>
 800ff8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff8c:	e02f      	b.n	800ffee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fb fdf0 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff9c:	e027      	b.n	800ffee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff9e:	f107 0318 	add.w	r3, r7, #24
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fb ff3c 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffac:	e01f      	b.n	800ffee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffae:	4b21      	ldr	r3, [pc, #132]	; (8010034 <UART_SetConfig+0x904>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ffba:	4b1e      	ldr	r3, [pc, #120]	; (8010034 <UART_SetConfig+0x904>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	08db      	lsrs	r3, r3, #3
 800ffc0:	f003 0303 	and.w	r3, r3, #3
 800ffc4:	4a1d      	ldr	r2, [pc, #116]	; (801003c <UART_SetConfig+0x90c>)
 800ffc6:	fa22 f303 	lsr.w	r3, r2, r3
 800ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ffcc:	e00f      	b.n	800ffee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ffce:	4b1b      	ldr	r3, [pc, #108]	; (801003c <UART_SetConfig+0x90c>)
 800ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffd2:	e00c      	b.n	800ffee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffd4:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <UART_SetConfig+0x910>)
 800ffd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffd8:	e009      	b.n	800ffee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffe0:	e005      	b.n	800ffee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ffec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ffee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f000 81ee 	beq.w	80103d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffa:	4a12      	ldr	r2, [pc, #72]	; (8010044 <UART_SetConfig+0x914>)
 800fffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010000:	461a      	mov	r2, r3
 8010002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010004:	fbb3 f3f2 	udiv	r3, r3, r2
 8010008:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	685a      	ldr	r2, [r3, #4]
 801000e:	4613      	mov	r3, r2
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	4413      	add	r3, r2
 8010014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010016:	429a      	cmp	r2, r3
 8010018:	d305      	bcc.n	8010026 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010022:	429a      	cmp	r2, r3
 8010024:	d910      	bls.n	8010048 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010026:	2301      	movs	r3, #1
 8010028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801002c:	e1d1      	b.n	80103d2 <UART_SetConfig+0xca2>
 801002e:	bf00      	nop
 8010030:	40011c00 	.word	0x40011c00
 8010034:	58024400 	.word	0x58024400
 8010038:	58000c00 	.word	0x58000c00
 801003c:	03d09000 	.word	0x03d09000
 8010040:	003d0900 	.word	0x003d0900
 8010044:	0801a344 	.word	0x0801a344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801004a:	2200      	movs	r2, #0
 801004c:	60bb      	str	r3, [r7, #8]
 801004e:	60fa      	str	r2, [r7, #12]
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	4ac0      	ldr	r2, [pc, #768]	; (8010358 <UART_SetConfig+0xc28>)
 8010056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801005a:	b29b      	uxth	r3, r3
 801005c:	2200      	movs	r2, #0
 801005e:	603b      	str	r3, [r7, #0]
 8010060:	607a      	str	r2, [r7, #4]
 8010062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801006a:	f7f0 fb65 	bl	8000738 <__aeabi_uldivmod>
 801006e:	4602      	mov	r2, r0
 8010070:	460b      	mov	r3, r1
 8010072:	4610      	mov	r0, r2
 8010074:	4619      	mov	r1, r3
 8010076:	f04f 0200 	mov.w	r2, #0
 801007a:	f04f 0300 	mov.w	r3, #0
 801007e:	020b      	lsls	r3, r1, #8
 8010080:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010084:	0202      	lsls	r2, r0, #8
 8010086:	6979      	ldr	r1, [r7, #20]
 8010088:	6849      	ldr	r1, [r1, #4]
 801008a:	0849      	lsrs	r1, r1, #1
 801008c:	2000      	movs	r0, #0
 801008e:	460c      	mov	r4, r1
 8010090:	4605      	mov	r5, r0
 8010092:	eb12 0804 	adds.w	r8, r2, r4
 8010096:	eb43 0905 	adc.w	r9, r3, r5
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	469a      	mov	sl, r3
 80100a2:	4693      	mov	fp, r2
 80100a4:	4652      	mov	r2, sl
 80100a6:	465b      	mov	r3, fp
 80100a8:	4640      	mov	r0, r8
 80100aa:	4649      	mov	r1, r9
 80100ac:	f7f0 fb44 	bl	8000738 <__aeabi_uldivmod>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4613      	mov	r3, r2
 80100b6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100be:	d308      	bcc.n	80100d2 <UART_SetConfig+0x9a2>
 80100c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100c6:	d204      	bcs.n	80100d2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100ce:	60da      	str	r2, [r3, #12]
 80100d0:	e17f      	b.n	80103d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80100d2:	2301      	movs	r3, #1
 80100d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80100d8:	e17b      	b.n	80103d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100e2:	f040 80bd 	bne.w	8010260 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80100e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80100ea:	2b20      	cmp	r3, #32
 80100ec:	dc48      	bgt.n	8010180 <UART_SetConfig+0xa50>
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	db7b      	blt.n	80101ea <UART_SetConfig+0xaba>
 80100f2:	2b20      	cmp	r3, #32
 80100f4:	d879      	bhi.n	80101ea <UART_SetConfig+0xaba>
 80100f6:	a201      	add	r2, pc, #4	; (adr r2, 80100fc <UART_SetConfig+0x9cc>)
 80100f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fc:	08010187 	.word	0x08010187
 8010100:	0801018f 	.word	0x0801018f
 8010104:	080101eb 	.word	0x080101eb
 8010108:	080101eb 	.word	0x080101eb
 801010c:	08010197 	.word	0x08010197
 8010110:	080101eb 	.word	0x080101eb
 8010114:	080101eb 	.word	0x080101eb
 8010118:	080101eb 	.word	0x080101eb
 801011c:	080101a7 	.word	0x080101a7
 8010120:	080101eb 	.word	0x080101eb
 8010124:	080101eb 	.word	0x080101eb
 8010128:	080101eb 	.word	0x080101eb
 801012c:	080101eb 	.word	0x080101eb
 8010130:	080101eb 	.word	0x080101eb
 8010134:	080101eb 	.word	0x080101eb
 8010138:	080101eb 	.word	0x080101eb
 801013c:	080101b7 	.word	0x080101b7
 8010140:	080101eb 	.word	0x080101eb
 8010144:	080101eb 	.word	0x080101eb
 8010148:	080101eb 	.word	0x080101eb
 801014c:	080101eb 	.word	0x080101eb
 8010150:	080101eb 	.word	0x080101eb
 8010154:	080101eb 	.word	0x080101eb
 8010158:	080101eb 	.word	0x080101eb
 801015c:	080101eb 	.word	0x080101eb
 8010160:	080101eb 	.word	0x080101eb
 8010164:	080101eb 	.word	0x080101eb
 8010168:	080101eb 	.word	0x080101eb
 801016c:	080101eb 	.word	0x080101eb
 8010170:	080101eb 	.word	0x080101eb
 8010174:	080101eb 	.word	0x080101eb
 8010178:	080101eb 	.word	0x080101eb
 801017c:	080101dd 	.word	0x080101dd
 8010180:	2b40      	cmp	r3, #64	; 0x40
 8010182:	d02e      	beq.n	80101e2 <UART_SetConfig+0xab2>
 8010184:	e031      	b.n	80101ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010186:	f7f9 fe43 	bl	8009e10 <HAL_RCC_GetPCLK1Freq>
 801018a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801018c:	e033      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801018e:	f7f9 fe55 	bl	8009e3c <HAL_RCC_GetPCLK2Freq>
 8010192:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010194:	e02f      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801019a:	4618      	mov	r0, r3
 801019c:	f7fb fcec 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80101a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101a4:	e027      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101a6:	f107 0318 	add.w	r3, r7, #24
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fb fe38 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101b4:	e01f      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101b6:	4b69      	ldr	r3, [pc, #420]	; (801035c <UART_SetConfig+0xc2c>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f003 0320 	and.w	r3, r3, #32
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d009      	beq.n	80101d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80101c2:	4b66      	ldr	r3, [pc, #408]	; (801035c <UART_SetConfig+0xc2c>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	08db      	lsrs	r3, r3, #3
 80101c8:	f003 0303 	and.w	r3, r3, #3
 80101cc:	4a64      	ldr	r2, [pc, #400]	; (8010360 <UART_SetConfig+0xc30>)
 80101ce:	fa22 f303 	lsr.w	r3, r2, r3
 80101d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80101d4:	e00f      	b.n	80101f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80101d6:	4b62      	ldr	r3, [pc, #392]	; (8010360 <UART_SetConfig+0xc30>)
 80101d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101da:	e00c      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80101dc:	4b61      	ldr	r3, [pc, #388]	; (8010364 <UART_SetConfig+0xc34>)
 80101de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101e0:	e009      	b.n	80101f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101e8:	e005      	b.n	80101f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80101ea:	2300      	movs	r3, #0
 80101ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80101ee:	2301      	movs	r3, #1
 80101f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80101f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 80ea 	beq.w	80103d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010202:	4a55      	ldr	r2, [pc, #340]	; (8010358 <UART_SetConfig+0xc28>)
 8010204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010208:	461a      	mov	r2, r3
 801020a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010210:	005a      	lsls	r2, r3, #1
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	085b      	lsrs	r3, r3, #1
 8010218:	441a      	add	r2, r3
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010222:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	2b0f      	cmp	r3, #15
 8010228:	d916      	bls.n	8010258 <UART_SetConfig+0xb28>
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010230:	d212      	bcs.n	8010258 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010234:	b29b      	uxth	r3, r3
 8010236:	f023 030f 	bic.w	r3, r3, #15
 801023a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801023c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023e:	085b      	lsrs	r3, r3, #1
 8010240:	b29b      	uxth	r3, r3
 8010242:	f003 0307 	and.w	r3, r3, #7
 8010246:	b29a      	uxth	r2, r3
 8010248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801024a:	4313      	orrs	r3, r2
 801024c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010254:	60da      	str	r2, [r3, #12]
 8010256:	e0bc      	b.n	80103d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010258:	2301      	movs	r3, #1
 801025a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801025e:	e0b8      	b.n	80103d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010260:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010264:	2b20      	cmp	r3, #32
 8010266:	dc4b      	bgt.n	8010300 <UART_SetConfig+0xbd0>
 8010268:	2b00      	cmp	r3, #0
 801026a:	f2c0 8087 	blt.w	801037c <UART_SetConfig+0xc4c>
 801026e:	2b20      	cmp	r3, #32
 8010270:	f200 8084 	bhi.w	801037c <UART_SetConfig+0xc4c>
 8010274:	a201      	add	r2, pc, #4	; (adr r2, 801027c <UART_SetConfig+0xb4c>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	08010307 	.word	0x08010307
 8010280:	0801030f 	.word	0x0801030f
 8010284:	0801037d 	.word	0x0801037d
 8010288:	0801037d 	.word	0x0801037d
 801028c:	08010317 	.word	0x08010317
 8010290:	0801037d 	.word	0x0801037d
 8010294:	0801037d 	.word	0x0801037d
 8010298:	0801037d 	.word	0x0801037d
 801029c:	08010327 	.word	0x08010327
 80102a0:	0801037d 	.word	0x0801037d
 80102a4:	0801037d 	.word	0x0801037d
 80102a8:	0801037d 	.word	0x0801037d
 80102ac:	0801037d 	.word	0x0801037d
 80102b0:	0801037d 	.word	0x0801037d
 80102b4:	0801037d 	.word	0x0801037d
 80102b8:	0801037d 	.word	0x0801037d
 80102bc:	08010337 	.word	0x08010337
 80102c0:	0801037d 	.word	0x0801037d
 80102c4:	0801037d 	.word	0x0801037d
 80102c8:	0801037d 	.word	0x0801037d
 80102cc:	0801037d 	.word	0x0801037d
 80102d0:	0801037d 	.word	0x0801037d
 80102d4:	0801037d 	.word	0x0801037d
 80102d8:	0801037d 	.word	0x0801037d
 80102dc:	0801037d 	.word	0x0801037d
 80102e0:	0801037d 	.word	0x0801037d
 80102e4:	0801037d 	.word	0x0801037d
 80102e8:	0801037d 	.word	0x0801037d
 80102ec:	0801037d 	.word	0x0801037d
 80102f0:	0801037d 	.word	0x0801037d
 80102f4:	0801037d 	.word	0x0801037d
 80102f8:	0801037d 	.word	0x0801037d
 80102fc:	0801036f 	.word	0x0801036f
 8010300:	2b40      	cmp	r3, #64	; 0x40
 8010302:	d037      	beq.n	8010374 <UART_SetConfig+0xc44>
 8010304:	e03a      	b.n	801037c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010306:	f7f9 fd83 	bl	8009e10 <HAL_RCC_GetPCLK1Freq>
 801030a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801030c:	e03c      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801030e:	f7f9 fd95 	bl	8009e3c <HAL_RCC_GetPCLK2Freq>
 8010312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010314:	e038      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801031a:	4618      	mov	r0, r3
 801031c:	f7fb fc2c 	bl	800bb78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010324:	e030      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010326:	f107 0318 	add.w	r3, r7, #24
 801032a:	4618      	mov	r0, r3
 801032c:	f7fb fd78 	bl	800be20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010334:	e028      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010336:	4b09      	ldr	r3, [pc, #36]	; (801035c <UART_SetConfig+0xc2c>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f003 0320 	and.w	r3, r3, #32
 801033e:	2b00      	cmp	r3, #0
 8010340:	d012      	beq.n	8010368 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010342:	4b06      	ldr	r3, [pc, #24]	; (801035c <UART_SetConfig+0xc2c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	08db      	lsrs	r3, r3, #3
 8010348:	f003 0303 	and.w	r3, r3, #3
 801034c:	4a04      	ldr	r2, [pc, #16]	; (8010360 <UART_SetConfig+0xc30>)
 801034e:	fa22 f303 	lsr.w	r3, r2, r3
 8010352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010354:	e018      	b.n	8010388 <UART_SetConfig+0xc58>
 8010356:	bf00      	nop
 8010358:	0801a344 	.word	0x0801a344
 801035c:	58024400 	.word	0x58024400
 8010360:	03d09000 	.word	0x03d09000
 8010364:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010368:	4b24      	ldr	r3, [pc, #144]	; (80103fc <UART_SetConfig+0xccc>)
 801036a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801036c:	e00c      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801036e:	4b24      	ldr	r3, [pc, #144]	; (8010400 <UART_SetConfig+0xcd0>)
 8010370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010372:	e009      	b.n	8010388 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801037a:	e005      	b.n	8010388 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801037c:	2300      	movs	r3, #0
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010380:	2301      	movs	r3, #1
 8010382:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010386:	bf00      	nop
    }

    if (pclk != 0U)
 8010388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038a:	2b00      	cmp	r3, #0
 801038c:	d021      	beq.n	80103d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	4a1c      	ldr	r2, [pc, #112]	; (8010404 <UART_SetConfig+0xcd4>)
 8010394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010398:	461a      	mov	r2, r3
 801039a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801039c:	fbb3 f2f2 	udiv	r2, r3, r2
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	085b      	lsrs	r3, r3, #1
 80103a6:	441a      	add	r2, r3
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80103b0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b4:	2b0f      	cmp	r3, #15
 80103b6:	d909      	bls.n	80103cc <UART_SetConfig+0xc9c>
 80103b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103be:	d205      	bcs.n	80103cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	60da      	str	r2, [r3, #12]
 80103ca:	e002      	b.n	80103d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80103cc:	2301      	movs	r3, #1
 80103ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2201      	movs	r2, #1
 80103d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	2201      	movs	r2, #1
 80103de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	2200      	movs	r2, #0
 80103e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	2200      	movs	r2, #0
 80103ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80103ee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3748      	adds	r7, #72	; 0x48
 80103f6:	46bd      	mov	sp, r7
 80103f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80103fc:	03d09000 	.word	0x03d09000
 8010400:	003d0900 	.word	0x003d0900
 8010404:	0801a344 	.word	0x0801a344

08010408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00a      	beq.n	8010432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	430a      	orrs	r2, r1
 8010430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010436:	f003 0302 	and.w	r3, r3, #2
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00a      	beq.n	8010454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	430a      	orrs	r2, r1
 8010452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010458:	f003 0304 	and.w	r3, r3, #4
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00a      	beq.n	8010476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	430a      	orrs	r2, r1
 8010474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047a:	f003 0308 	and.w	r3, r3, #8
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00a      	beq.n	8010498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	430a      	orrs	r2, r1
 8010496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801049c:	f003 0310 	and.w	r3, r3, #16
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	430a      	orrs	r2, r1
 80104b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104be:	f003 0320 	and.w	r3, r3, #32
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00a      	beq.n	80104dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	430a      	orrs	r2, r1
 80104da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01a      	beq.n	801051e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	430a      	orrs	r2, r1
 80104fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010506:	d10a      	bne.n	801051e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	430a      	orrs	r2, r1
 801051c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00a      	beq.n	8010540 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	430a      	orrs	r2, r1
 801053e:	605a      	str	r2, [r3, #4]
  }
}
 8010540:	bf00      	nop
 8010542:	370c      	adds	r7, #12
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b098      	sub	sp, #96	; 0x60
 8010550:	af02      	add	r7, sp, #8
 8010552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801055c:	f7f2 fd96 	bl	800308c <HAL_GetTick>
 8010560:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f003 0308 	and.w	r3, r3, #8
 801056c:	2b08      	cmp	r3, #8
 801056e:	d12f      	bne.n	80105d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010574:	9300      	str	r3, [sp, #0]
 8010576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010578:	2200      	movs	r2, #0
 801057a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f88e 	bl	80106a0 <UART_WaitOnFlagUntilTimeout>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d022      	beq.n	80105d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	e853 3f00 	ldrex	r3, [r3]
 8010596:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801059e:	653b      	str	r3, [r7, #80]	; 0x50
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	461a      	mov	r2, r3
 80105a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a8:	647b      	str	r3, [r7, #68]	; 0x44
 80105aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105b0:	e841 2300 	strex	r3, r2, [r1]
 80105b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1e6      	bne.n	801058a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2220      	movs	r2, #32
 80105c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105cc:	2303      	movs	r3, #3
 80105ce:	e063      	b.n	8010698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	f003 0304 	and.w	r3, r3, #4
 80105da:	2b04      	cmp	r3, #4
 80105dc:	d149      	bne.n	8010672 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e6:	2200      	movs	r2, #0
 80105e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 f857 	bl	80106a0 <UART_WaitOnFlagUntilTimeout>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d03c      	beq.n	8010672 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	623b      	str	r3, [r7, #32]
   return(result);
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801060c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	461a      	mov	r2, r3
 8010614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010616:	633b      	str	r3, [r7, #48]	; 0x30
 8010618:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801061c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e6      	bne.n	80105f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	3308      	adds	r3, #8
 8010630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010632:	693b      	ldr	r3, [r7, #16]
 8010634:	e853 3f00 	ldrex	r3, [r3]
 8010638:	60fb      	str	r3, [r7, #12]
   return(result);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f023 0301 	bic.w	r3, r3, #1
 8010640:	64bb      	str	r3, [r7, #72]	; 0x48
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	3308      	adds	r3, #8
 8010648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801064a:	61fa      	str	r2, [r7, #28]
 801064c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064e:	69b9      	ldr	r1, [r7, #24]
 8010650:	69fa      	ldr	r2, [r7, #28]
 8010652:	e841 2300 	strex	r3, r2, [r1]
 8010656:	617b      	str	r3, [r7, #20]
   return(result);
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1e5      	bne.n	801062a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2220      	movs	r2, #32
 8010662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801066e:	2303      	movs	r3, #3
 8010670:	e012      	b.n	8010698 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2220      	movs	r2, #32
 8010676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2220      	movs	r2, #32
 801067e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3758      	adds	r7, #88	; 0x58
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	4613      	mov	r3, r2
 80106ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106b0:	e049      	b.n	8010746 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b8:	d045      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106ba:	f7f2 fce7 	bl	800308c <HAL_GetTick>
 80106be:	4602      	mov	r2, r0
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	69ba      	ldr	r2, [r7, #24]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d302      	bcc.n	80106d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d101      	bne.n	80106d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80106d0:	2303      	movs	r3, #3
 80106d2:	e048      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f003 0304 	and.w	r3, r3, #4
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d031      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	69db      	ldr	r3, [r3, #28]
 80106e8:	f003 0308 	and.w	r3, r3, #8
 80106ec:	2b08      	cmp	r3, #8
 80106ee:	d110      	bne.n	8010712 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2208      	movs	r2, #8
 80106f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80106f8:	68f8      	ldr	r0, [r7, #12]
 80106fa:	f000 f839 	bl	8010770 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2208      	movs	r2, #8
 8010702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e029      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	69db      	ldr	r3, [r3, #28]
 8010718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801071c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010720:	d111      	bne.n	8010746 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801072a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f000 f81f 	bl	8010770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010742:	2303      	movs	r3, #3
 8010744:	e00f      	b.n	8010766 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	69da      	ldr	r2, [r3, #28]
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	4013      	ands	r3, r2
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	429a      	cmp	r2, r3
 8010754:	bf0c      	ite	eq
 8010756:	2301      	moveq	r3, #1
 8010758:	2300      	movne	r3, #0
 801075a:	b2db      	uxtb	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	79fb      	ldrb	r3, [r7, #7]
 8010760:	429a      	cmp	r2, r3
 8010762:	d0a6      	beq.n	80106b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
	...

08010770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010770:	b480      	push	{r7}
 8010772:	b095      	sub	sp, #84	; 0x54
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010780:	e853 3f00 	ldrex	r3, [r3]
 8010784:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801078c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	461a      	mov	r2, r3
 8010794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010796:	643b      	str	r3, [r7, #64]	; 0x40
 8010798:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801079a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801079c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801079e:	e841 2300 	strex	r3, r2, [r1]
 80107a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1e6      	bne.n	8010778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	3308      	adds	r3, #8
 80107b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b2:	6a3b      	ldr	r3, [r7, #32]
 80107b4:	e853 3f00 	ldrex	r3, [r3]
 80107b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80107ba:	69fa      	ldr	r2, [r7, #28]
 80107bc:	4b1e      	ldr	r3, [pc, #120]	; (8010838 <UART_EndRxTransfer+0xc8>)
 80107be:	4013      	ands	r3, r2
 80107c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3308      	adds	r3, #8
 80107c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107d2:	e841 2300 	strex	r3, r2, [r1]
 80107d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1e5      	bne.n	80107aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d118      	bne.n	8010818 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	e853 3f00 	ldrex	r3, [r3]
 80107f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	f023 0310 	bic.w	r3, r3, #16
 80107fa:	647b      	str	r3, [r7, #68]	; 0x44
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	461a      	mov	r2, r3
 8010802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010804:	61bb      	str	r3, [r7, #24]
 8010806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010808:	6979      	ldr	r1, [r7, #20]
 801080a:	69ba      	ldr	r2, [r7, #24]
 801080c:	e841 2300 	strex	r3, r2, [r1]
 8010810:	613b      	str	r3, [r7, #16]
   return(result);
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e6      	bne.n	80107e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2220      	movs	r2, #32
 801081c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801082c:	bf00      	nop
 801082e:	3754      	adds	r7, #84	; 0x54
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr
 8010838:	effffffe 	.word	0xeffffffe

0801083c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801084a:	2b01      	cmp	r3, #1
 801084c:	d101      	bne.n	8010852 <HAL_UARTEx_DisableFifoMode+0x16>
 801084e:	2302      	movs	r3, #2
 8010850:	e027      	b.n	80108a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2224      	movs	r2, #36	; 0x24
 801085e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f022 0201 	bic.w	r2, r2, #1
 8010878:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010880:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	68fa      	ldr	r2, [r7, #12]
 801088e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2220      	movs	r2, #32
 8010894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3714      	adds	r7, #20
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b084      	sub	sp, #16
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d101      	bne.n	80108c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108c2:	2302      	movs	r3, #2
 80108c4:	e02d      	b.n	8010922 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2201      	movs	r2, #1
 80108ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2224      	movs	r2, #36	; 0x24
 80108d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f022 0201 	bic.w	r2, r2, #1
 80108ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	430a      	orrs	r2, r1
 8010900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f850 	bl	80109a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2220      	movs	r2, #32
 8010914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b084      	sub	sp, #16
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
 8010932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801093a:	2b01      	cmp	r3, #1
 801093c:	d101      	bne.n	8010942 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801093e:	2302      	movs	r3, #2
 8010940:	e02d      	b.n	801099e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2201      	movs	r2, #1
 8010946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2224      	movs	r2, #36	; 0x24
 801094e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f022 0201 	bic.w	r2, r2, #1
 8010968:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	430a      	orrs	r2, r1
 801097c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f812 	bl	80109a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2220      	movs	r2, #32
 8010990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
	...

080109a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109a8:	b480      	push	{r7}
 80109aa:	b085      	sub	sp, #20
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d108      	bne.n	80109ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109c8:	e031      	b.n	8010a2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109ca:	2310      	movs	r3, #16
 80109cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80109ce:	2310      	movs	r3, #16
 80109d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	0e5b      	lsrs	r3, r3, #25
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	f003 0307 	and.w	r3, r3, #7
 80109e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	0f5b      	lsrs	r3, r3, #29
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	f003 0307 	and.w	r3, r3, #7
 80109f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109f2:	7bbb      	ldrb	r3, [r7, #14]
 80109f4:	7b3a      	ldrb	r2, [r7, #12]
 80109f6:	4911      	ldr	r1, [pc, #68]	; (8010a3c <UARTEx_SetNbDataToProcess+0x94>)
 80109f8:	5c8a      	ldrb	r2, [r1, r2]
 80109fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109fe:	7b3a      	ldrb	r2, [r7, #12]
 8010a00:	490f      	ldr	r1, [pc, #60]	; (8010a40 <UARTEx_SetNbDataToProcess+0x98>)
 8010a02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a10:	7bfb      	ldrb	r3, [r7, #15]
 8010a12:	7b7a      	ldrb	r2, [r7, #13]
 8010a14:	4909      	ldr	r1, [pc, #36]	; (8010a3c <UARTEx_SetNbDataToProcess+0x94>)
 8010a16:	5c8a      	ldrb	r2, [r1, r2]
 8010a18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a1c:	7b7a      	ldrb	r2, [r7, #13]
 8010a1e:	4908      	ldr	r1, [pc, #32]	; (8010a40 <UARTEx_SetNbDataToProcess+0x98>)
 8010a20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a2e:	bf00      	nop
 8010a30:	3714      	adds	r7, #20
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	0801a35c 	.word	0x0801a35c
 8010a40:	0801a364 	.word	0x0801a364

08010a44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010a44:	b084      	sub	sp, #16
 8010a46:	b480      	push	{r7}
 8010a48:	b085      	sub	sp, #20
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	f107 001c 	add.w	r0, r7, #28
 8010a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8010a5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010a5e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8010a62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8010a66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8010a6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	4b07      	ldr	r3, [pc, #28]	; (8010a94 <SDMMC_Init+0x50>)
 8010a78:	4013      	ands	r3, r2
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	431a      	orrs	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010a82:	2300      	movs	r3, #0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3714      	adds	r7, #20
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	b004      	add	sp, #16
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	ffc02c00 	.word	0xffc02c00

08010a98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	370c      	adds	r7, #12
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010ab2:	b480      	push	{r7}
 8010ab4:	b083      	sub	sp, #12
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	681a      	ldr	r2, [r3, #0]
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ac6:	2300      	movs	r3, #0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f043 0203 	orr.w	r2, r3, #3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010ae8:	2300      	movs	r3, #0
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010af6:	b480      	push	{r7}
 8010af8:	b083      	sub	sp, #12
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f003 0303 	and.w	r3, r3, #3
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
	...

08010b14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010b38:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010b3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	4313      	orrs	r3, r2
 8010b44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68da      	ldr	r2, [r3, #12]
 8010b4a:	4b06      	ldr	r3, [pc, #24]	; (8010b64 <SDMMC_SendCommand+0x50>)
 8010b4c:	4013      	ands	r3, r2
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	431a      	orrs	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010b56:	2300      	movs	r3, #0
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3714      	adds	r7, #20
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr
 8010b64:	fffee0c0 	.word	0xfffee0c0

08010b68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	b2db      	uxtb	r3, r3
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b085      	sub	sp, #20
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
 8010b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3314      	adds	r3, #20
 8010b90:	461a      	mov	r2, r3
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	4413      	add	r3, r2
 8010b96:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3714      	adds	r7, #20
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba6:	4770      	bx	lr

08010ba8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010bd4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010bda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	4313      	orrs	r3, r2
 8010be0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	431a      	orrs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010bf2:	2300      	movs	r3, #0

}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3714      	adds	r7, #20
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010c0e:	2310      	movs	r3, #16
 8010c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c22:	f107 0308 	add.w	r3, r7, #8
 8010c26:	4619      	mov	r1, r3
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f7ff ff73 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c32:	2110      	movs	r1, #16
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 fa5f 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c3c:	69fb      	ldr	r3, [r7, #28]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3720      	adds	r7, #32
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b088      	sub	sp, #32
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010c54:	2311      	movs	r3, #17
 8010c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c68:	f107 0308 	add.w	r3, r7, #8
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7ff ff50 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c78:	2111      	movs	r1, #17
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fa3c 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010c80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c82:	69fb      	ldr	r3, [r7, #28]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3720      	adds	r7, #32
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b088      	sub	sp, #32
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010c9a:	2312      	movs	r3, #18
 8010c9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cae:	f107 0308 	add.w	r3, r7, #8
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ff ff2d 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cbe:	2112      	movs	r1, #18
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 fa19 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010cc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cc8:	69fb      	ldr	r3, [r7, #28]
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3720      	adds	r7, #32
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010cd2:	b580      	push	{r7, lr}
 8010cd4:	b088      	sub	sp, #32
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
 8010cda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010ce0:	2318      	movs	r3, #24
 8010ce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cea:	2300      	movs	r3, #0
 8010cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cf4:	f107 0308 	add.w	r3, r7, #8
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7ff ff0a 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d04:	2118      	movs	r1, #24
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 f9f6 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d0e:	69fb      	ldr	r3, [r7, #28]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3720      	adds	r7, #32
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b088      	sub	sp, #32
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010d26:	2319      	movs	r3, #25
 8010d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d30:	2300      	movs	r3, #0
 8010d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	4619      	mov	r1, r3
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff fee7 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d4a:	2119      	movs	r1, #25
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f000 f9d3 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010d52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d54:	69fb      	ldr	r3, [r7, #28]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3720      	adds	r7, #32
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
	...

08010d60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b088      	sub	sp, #32
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010d6c:	230c      	movs	r3, #12
 8010d6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d76:	2300      	movs	r3, #0
 8010d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d7e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d98:	f107 0308 	add.w	r3, r7, #8
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f7ff feb8 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010da4:	4a0b      	ldr	r2, [pc, #44]	; (8010dd4 <SDMMC_CmdStopTransfer+0x74>)
 8010da6:	210c      	movs	r1, #12
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 f9a5 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010dae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010dc2:	d101      	bne.n	8010dc8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010dc8:	69fb      	ldr	r3, [r7, #28]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3720      	adds	r7, #32
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	05f5e100 	.word	0x05f5e100

08010dd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b088      	sub	sp, #32
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010de6:	2307      	movs	r3, #7
 8010de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010df0:	2300      	movs	r3, #0
 8010df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010df8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dfa:	f107 0308 	add.w	r3, r7, #8
 8010dfe:	4619      	mov	r1, r3
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7ff fe87 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e0a:	2107      	movs	r1, #7
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f973 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e14:	69fb      	ldr	r3, [r7, #28]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3720      	adds	r7, #32
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b088      	sub	sp, #32
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010e26:	2300      	movs	r3, #0
 8010e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e32:	2300      	movs	r3, #0
 8010e34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e3c:	f107 0308 	add.w	r3, r7, #8
 8010e40:	4619      	mov	r1, r3
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff fe66 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 fb97 	bl	801157c <SDMMC_GetCmdError>
 8010e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e50:	69fb      	ldr	r3, [r7, #28]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3720      	adds	r7, #32
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b088      	sub	sp, #32
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010e62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010e68:	2308      	movs	r3, #8
 8010e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e72:	2300      	movs	r3, #0
 8010e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e7c:	f107 0308 	add.w	r3, r7, #8
 8010e80:	4619      	mov	r1, r3
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7ff fe46 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 fb29 	bl	80114e0 <SDMMC_GetCmdResp7>
 8010e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e90:	69fb      	ldr	r3, [r7, #28]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3720      	adds	r7, #32
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b088      	sub	sp, #32
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
 8010ea2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ea8:	2337      	movs	r3, #55	; 0x37
 8010eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ebc:	f107 0308 	add.w	r3, r7, #8
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff fe26 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ecc:	2137      	movs	r1, #55	; 0x37
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f000 f912 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ed6:	69fb      	ldr	r3, [r7, #28]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3720      	adds	r7, #32
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b088      	sub	sp, #32
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010eee:	2329      	movs	r3, #41	; 0x29
 8010ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ef8:	2300      	movs	r3, #0
 8010efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f02:	f107 0308 	add.w	r3, r7, #8
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff fe03 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fa2e 	bl	8011370 <SDMMC_GetCmdResp3>
 8010f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f16:	69fb      	ldr	r3, [r7, #28]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3720      	adds	r7, #32
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b088      	sub	sp, #32
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010f2e:	2306      	movs	r3, #6
 8010f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f42:	f107 0308 	add.w	r3, r7, #8
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7ff fde3 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f52:	2106      	movs	r1, #6
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f8cf 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
}
 8010f5e:	4618      	mov	r0, r3
 8010f60:	3720      	adds	r7, #32
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b088      	sub	sp, #32
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010f72:	2333      	movs	r3, #51	; 0x33
 8010f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f86:	f107 0308 	add.w	r3, r7, #8
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7ff fdc1 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f96:	2133      	movs	r1, #51	; 0x33
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 f8ad 	bl	80110f8 <SDMMC_GetCmdResp1>
 8010f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3720      	adds	r7, #32
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}

08010faa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b088      	sub	sp, #32
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010fb6:	2302      	movs	r3, #2
 8010fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fca:	f107 0308 	add.w	r3, r7, #8
 8010fce:	4619      	mov	r1, r3
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f7ff fd9f 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f980 	bl	80112dc <SDMMC_GetCmdResp2>
 8010fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fde:	69fb      	ldr	r3, [r7, #28]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3720      	adds	r7, #32
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b088      	sub	sp, #32
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010ff6:	2309      	movs	r3, #9
 8010ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011000:	2300      	movs	r3, #0
 8011002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011008:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801100a:	f107 0308 	add.w	r3, r7, #8
 801100e:	4619      	mov	r1, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7ff fd7f 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 f960 	bl	80112dc <SDMMC_GetCmdResp2>
 801101c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801101e:	69fb      	ldr	r3, [r7, #28]
}
 8011020:	4618      	mov	r0, r3
 8011022:	3720      	adds	r7, #32
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b088      	sub	sp, #32
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011032:	2300      	movs	r3, #0
 8011034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011036:	2303      	movs	r3, #3
 8011038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801103a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801103e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011040:	2300      	movs	r3, #0
 8011042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801104a:	f107 0308 	add.w	r3, r7, #8
 801104e:	4619      	mov	r1, r3
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff fd5f 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	2103      	movs	r1, #3
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 f9c8 	bl	80113f0 <SDMMC_GetCmdResp6>
 8011060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011062:	69fb      	ldr	r3, [r7, #28]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3720      	adds	r7, #32
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801107a:	230d      	movs	r3, #13
 801107c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801107e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011084:	2300      	movs	r3, #0
 8011086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801108c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801108e:	f107 0308 	add.w	r3, r7, #8
 8011092:	4619      	mov	r1, r3
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f7ff fd3d 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801109a:	f241 3288 	movw	r2, #5000	; 0x1388
 801109e:	210d      	movs	r1, #13
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f829 	bl	80110f8 <SDMMC_GetCmdResp1>
 80110a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110a8:	69fb      	ldr	r3, [r7, #28]
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b088      	sub	sp, #32
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80110ba:	2300      	movs	r3, #0
 80110bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80110be:	230d      	movs	r3, #13
 80110c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110c8:	2300      	movs	r3, #0
 80110ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110d2:	f107 0308 	add.w	r3, r7, #8
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7ff fd1b 	bl	8010b14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80110de:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e2:	210d      	movs	r1, #13
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 f807 	bl	80110f8 <SDMMC_GetCmdResp1>
 80110ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110ec:	69fb      	ldr	r3, [r7, #28]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3720      	adds	r7, #32
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	460b      	mov	r3, r1
 8011102:	607a      	str	r2, [r7, #4]
 8011104:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011106:	4b70      	ldr	r3, [pc, #448]	; (80112c8 <SDMMC_GetCmdResp1+0x1d0>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a70      	ldr	r2, [pc, #448]	; (80112cc <SDMMC_GetCmdResp1+0x1d4>)
 801110c:	fba2 2303 	umull	r2, r3, r2, r3
 8011110:	0a5a      	lsrs	r2, r3, #9
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	fb02 f303 	mul.w	r3, r2, r3
 8011118:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	1e5a      	subs	r2, r3, #1
 801111e:	61fa      	str	r2, [r7, #28]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d102      	bne.n	801112a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011128:	e0c9      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801112e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011130:	69ba      	ldr	r2, [r7, #24]
 8011132:	4b67      	ldr	r3, [pc, #412]	; (80112d0 <SDMMC_GetCmdResp1+0x1d8>)
 8011134:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011136:	2b00      	cmp	r3, #0
 8011138:	d0ef      	beq.n	801111a <SDMMC_GetCmdResp1+0x22>
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011140:	2b00      	cmp	r3, #0
 8011142:	d1ea      	bne.n	801111a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011148:	f003 0304 	and.w	r3, r3, #4
 801114c:	2b00      	cmp	r3, #0
 801114e:	d004      	beq.n	801115a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2204      	movs	r2, #4
 8011154:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011156:	2304      	movs	r3, #4
 8011158:	e0b1      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b00      	cmp	r3, #0
 8011164:	d004      	beq.n	8011170 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	2201      	movs	r2, #1
 801116a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801116c:	2301      	movs	r3, #1
 801116e:	e0a6      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	4a58      	ldr	r2, [pc, #352]	; (80112d4 <SDMMC_GetCmdResp1+0x1dc>)
 8011174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f7ff fcf6 	bl	8010b68 <SDMMC_GetCommandResponse>
 801117c:	4603      	mov	r3, r0
 801117e:	461a      	mov	r2, r3
 8011180:	7afb      	ldrb	r3, [r7, #11]
 8011182:	4293      	cmp	r3, r2
 8011184:	d001      	beq.n	801118a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011186:	2301      	movs	r3, #1
 8011188:	e099      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801118a:	2100      	movs	r1, #0
 801118c:	68f8      	ldr	r0, [r7, #12]
 801118e:	f7ff fcf8 	bl	8010b82 <SDMMC_GetResponse>
 8011192:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011194:	697a      	ldr	r2, [r7, #20]
 8011196:	4b50      	ldr	r3, [pc, #320]	; (80112d8 <SDMMC_GetCmdResp1+0x1e0>)
 8011198:	4013      	ands	r3, r2
 801119a:	2b00      	cmp	r3, #0
 801119c:	d101      	bne.n	80111a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801119e:	2300      	movs	r3, #0
 80111a0:	e08d      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	da02      	bge.n	80111ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80111a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80111ac:	e087      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d001      	beq.n	80111bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80111b8:	2340      	movs	r3, #64	; 0x40
 80111ba:	e080      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80111c6:	2380      	movs	r3, #128	; 0x80
 80111c8:	e079      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d002      	beq.n	80111da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80111d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111d8:	e071      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80111e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111e8:	e069      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80111f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111f8:	e061      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011204:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011208:	e059      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011210:	2b00      	cmp	r3, #0
 8011212:	d002      	beq.n	801121a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011218:	e051      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011228:	e049      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011230:	2b00      	cmp	r3, #0
 8011232:	d002      	beq.n	801123a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011238:	e041      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011240:	2b00      	cmp	r3, #0
 8011242:	d002      	beq.n	801124a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011248:	e039      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011258:	e031      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011264:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011268:	e029      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011274:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011278:	e021      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011280:	2b00      	cmp	r3, #0
 8011282:	d002      	beq.n	801128a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011284:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011288:	e019      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011290:	2b00      	cmp	r3, #0
 8011292:	d002      	beq.n	801129a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011294:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011298:	e011      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d002      	beq.n	80112aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80112a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80112a8:	e009      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	f003 0308 	and.w	r3, r3, #8
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d002      	beq.n	80112ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80112b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80112b8:	e001      	b.n	80112be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80112ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3720      	adds	r7, #32
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	24000000 	.word	0x24000000
 80112cc:	10624dd3 	.word	0x10624dd3
 80112d0:	00200045 	.word	0x00200045
 80112d4:	002000c5 	.word	0x002000c5
 80112d8:	fdffe008 	.word	0xfdffe008

080112dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80112dc:	b480      	push	{r7}
 80112de:	b085      	sub	sp, #20
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80112e4:	4b1f      	ldr	r3, [pc, #124]	; (8011364 <SDMMC_GetCmdResp2+0x88>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	4a1f      	ldr	r2, [pc, #124]	; (8011368 <SDMMC_GetCmdResp2+0x8c>)
 80112ea:	fba2 2303 	umull	r2, r3, r2, r3
 80112ee:	0a5b      	lsrs	r3, r3, #9
 80112f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112f4:	fb02 f303 	mul.w	r3, r2, r3
 80112f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	1e5a      	subs	r2, r3, #1
 80112fe:	60fa      	str	r2, [r7, #12]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d102      	bne.n	801130a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011308:	e026      	b.n	8011358 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801130e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0ef      	beq.n	80112fa <SDMMC_GetCmdResp2+0x1e>
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1ea      	bne.n	80112fa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011328:	f003 0304 	and.w	r3, r3, #4
 801132c:	2b00      	cmp	r3, #0
 801132e:	d004      	beq.n	801133a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2204      	movs	r2, #4
 8011334:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011336:	2304      	movs	r3, #4
 8011338:	e00e      	b.n	8011358 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801133e:	f003 0301 	and.w	r3, r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	d004      	beq.n	8011350 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2201      	movs	r2, #1
 801134a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801134c:	2301      	movs	r3, #1
 801134e:	e003      	b.n	8011358 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	4a06      	ldr	r2, [pc, #24]	; (801136c <SDMMC_GetCmdResp2+0x90>)
 8011354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011356:	2300      	movs	r3, #0
}
 8011358:	4618      	mov	r0, r3
 801135a:	3714      	adds	r7, #20
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	24000000 	.word	0x24000000
 8011368:	10624dd3 	.word	0x10624dd3
 801136c:	002000c5 	.word	0x002000c5

08011370 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011370:	b480      	push	{r7}
 8011372:	b085      	sub	sp, #20
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011378:	4b1a      	ldr	r3, [pc, #104]	; (80113e4 <SDMMC_GetCmdResp3+0x74>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a1a      	ldr	r2, [pc, #104]	; (80113e8 <SDMMC_GetCmdResp3+0x78>)
 801137e:	fba2 2303 	umull	r2, r3, r2, r3
 8011382:	0a5b      	lsrs	r3, r3, #9
 8011384:	f241 3288 	movw	r2, #5000	; 0x1388
 8011388:	fb02 f303 	mul.w	r3, r2, r3
 801138c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	1e5a      	subs	r2, r3, #1
 8011392:	60fa      	str	r2, [r7, #12]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d102      	bne.n	801139e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801139c:	e01b      	b.n	80113d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0ef      	beq.n	801138e <SDMMC_GetCmdResp3+0x1e>
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1ea      	bne.n	801138e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113bc:	f003 0304 	and.w	r3, r3, #4
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d004      	beq.n	80113ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2204      	movs	r2, #4
 80113c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80113ca:	2304      	movs	r3, #4
 80113cc:	e003      	b.n	80113d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4a06      	ldr	r2, [pc, #24]	; (80113ec <SDMMC_GetCmdResp3+0x7c>)
 80113d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3714      	adds	r7, #20
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr
 80113e2:	bf00      	nop
 80113e4:	24000000 	.word	0x24000000
 80113e8:	10624dd3 	.word	0x10624dd3
 80113ec:	002000c5 	.word	0x002000c5

080113f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b088      	sub	sp, #32
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	460b      	mov	r3, r1
 80113fa:	607a      	str	r2, [r7, #4]
 80113fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80113fe:	4b35      	ldr	r3, [pc, #212]	; (80114d4 <SDMMC_GetCmdResp6+0xe4>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	4a35      	ldr	r2, [pc, #212]	; (80114d8 <SDMMC_GetCmdResp6+0xe8>)
 8011404:	fba2 2303 	umull	r2, r3, r2, r3
 8011408:	0a5b      	lsrs	r3, r3, #9
 801140a:	f241 3288 	movw	r2, #5000	; 0x1388
 801140e:	fb02 f303 	mul.w	r3, r2, r3
 8011412:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	1e5a      	subs	r2, r3, #1
 8011418:	61fa      	str	r2, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d102      	bne.n	8011424 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801141e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011422:	e052      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011428:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011430:	2b00      	cmp	r3, #0
 8011432:	d0ef      	beq.n	8011414 <SDMMC_GetCmdResp6+0x24>
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801143a:	2b00      	cmp	r3, #0
 801143c:	d1ea      	bne.n	8011414 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011442:	f003 0304 	and.w	r3, r3, #4
 8011446:	2b00      	cmp	r3, #0
 8011448:	d004      	beq.n	8011454 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2204      	movs	r2, #4
 801144e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011450:	2304      	movs	r3, #4
 8011452:	e03a      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011458:	f003 0301 	and.w	r3, r3, #1
 801145c:	2b00      	cmp	r3, #0
 801145e:	d004      	beq.n	801146a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2201      	movs	r2, #1
 8011464:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011466:	2301      	movs	r3, #1
 8011468:	e02f      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7ff fb7c 	bl	8010b68 <SDMMC_GetCommandResponse>
 8011470:	4603      	mov	r3, r0
 8011472:	461a      	mov	r2, r3
 8011474:	7afb      	ldrb	r3, [r7, #11]
 8011476:	4293      	cmp	r3, r2
 8011478:	d001      	beq.n	801147e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801147a:	2301      	movs	r3, #1
 801147c:	e025      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	4a16      	ldr	r2, [pc, #88]	; (80114dc <SDMMC_GetCmdResp6+0xec>)
 8011482:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011484:	2100      	movs	r1, #0
 8011486:	68f8      	ldr	r0, [r7, #12]
 8011488:	f7ff fb7b 	bl	8010b82 <SDMMC_GetResponse>
 801148c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011494:	2b00      	cmp	r3, #0
 8011496:	d106      	bne.n	80114a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	0c1b      	lsrs	r3, r3, #16
 801149c:	b29a      	uxth	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	e011      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d002      	beq.n	80114b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80114b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80114b4:	e009      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80114c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114c4:	e001      	b.n	80114ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80114c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3720      	adds	r7, #32
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	24000000 	.word	0x24000000
 80114d8:	10624dd3 	.word	0x10624dd3
 80114dc:	002000c5 	.word	0x002000c5

080114e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80114e8:	4b22      	ldr	r3, [pc, #136]	; (8011574 <SDMMC_GetCmdResp7+0x94>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a22      	ldr	r2, [pc, #136]	; (8011578 <SDMMC_GetCmdResp7+0x98>)
 80114ee:	fba2 2303 	umull	r2, r3, r2, r3
 80114f2:	0a5b      	lsrs	r3, r3, #9
 80114f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114f8:	fb02 f303 	mul.w	r3, r2, r3
 80114fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	1e5a      	subs	r2, r3, #1
 8011502:	60fa      	str	r2, [r7, #12]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d102      	bne.n	801150e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801150c:	e02c      	b.n	8011568 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011512:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801151a:	2b00      	cmp	r3, #0
 801151c:	d0ef      	beq.n	80114fe <SDMMC_GetCmdResp7+0x1e>
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011524:	2b00      	cmp	r3, #0
 8011526:	d1ea      	bne.n	80114fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801152c:	f003 0304 	and.w	r3, r3, #4
 8011530:	2b00      	cmp	r3, #0
 8011532:	d004      	beq.n	801153e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2204      	movs	r2, #4
 8011538:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801153a:	2304      	movs	r3, #4
 801153c:	e014      	b.n	8011568 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011542:	f003 0301 	and.w	r3, r3, #1
 8011546:	2b00      	cmp	r3, #0
 8011548:	d004      	beq.n	8011554 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2201      	movs	r2, #1
 801154e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011550:	2301      	movs	r3, #1
 8011552:	e009      	b.n	8011568 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801155c:	2b00      	cmp	r3, #0
 801155e:	d002      	beq.n	8011566 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2240      	movs	r2, #64	; 0x40
 8011564:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011566:	2300      	movs	r3, #0

}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr
 8011574:	24000000 	.word	0x24000000
 8011578:	10624dd3 	.word	0x10624dd3

0801157c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011584:	4b11      	ldr	r3, [pc, #68]	; (80115cc <SDMMC_GetCmdError+0x50>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a11      	ldr	r2, [pc, #68]	; (80115d0 <SDMMC_GetCmdError+0x54>)
 801158a:	fba2 2303 	umull	r2, r3, r2, r3
 801158e:	0a5b      	lsrs	r3, r3, #9
 8011590:	f241 3288 	movw	r2, #5000	; 0x1388
 8011594:	fb02 f303 	mul.w	r3, r2, r3
 8011598:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	1e5a      	subs	r2, r3, #1
 801159e:	60fa      	str	r2, [r7, #12]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80115a8:	e009      	b.n	80115be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0f1      	beq.n	801159a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a06      	ldr	r2, [pc, #24]	; (80115d4 <SDMMC_GetCmdError+0x58>)
 80115ba:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3714      	adds	r7, #20
 80115c2:	46bd      	mov	sp, r7
 80115c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c8:	4770      	bx	lr
 80115ca:	bf00      	nop
 80115cc:	24000000 	.word	0x24000000
 80115d0:	10624dd3 	.word	0x10624dd3
 80115d4:	002000c5 	.word	0x002000c5

080115d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80115d8:	b084      	sub	sp, #16
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	f107 001c 	add.w	r0, r7, #28
 80115e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80115ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d120      	bne.n	8011632 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	68da      	ldr	r2, [r3, #12]
 8011600:	4b2a      	ldr	r3, [pc, #168]	; (80116ac <USB_CoreInit+0xd4>)
 8011602:	4013      	ands	r3, r2
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011616:	2b01      	cmp	r3, #1
 8011618:	d105      	bne.n	8011626 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f001 faf8 	bl	8012c1c <USB_CoreReset>
 801162c:	4603      	mov	r3, r0
 801162e:	73fb      	strb	r3, [r7, #15]
 8011630:	e01a      	b.n	8011668 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	68db      	ldr	r3, [r3, #12]
 8011636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f001 faec 	bl	8012c1c <USB_CoreReset>
 8011644:	4603      	mov	r3, r0
 8011646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801164a:	2b00      	cmp	r3, #0
 801164c:	d106      	bne.n	801165c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	639a      	str	r2, [r3, #56]	; 0x38
 801165a:	e005      	b.n	8011668 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166a:	2b01      	cmp	r3, #1
 801166c:	d116      	bne.n	801169c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011672:	b29a      	uxth	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801167c:	4b0c      	ldr	r3, [pc, #48]	; (80116b0 <USB_CoreInit+0xd8>)
 801167e:	4313      	orrs	r3, r2
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	689b      	ldr	r3, [r3, #8]
 8011688:	f043 0206 	orr.w	r2, r3, #6
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	689b      	ldr	r3, [r3, #8]
 8011694:	f043 0220 	orr.w	r2, r3, #32
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801169c:	7bfb      	ldrb	r3, [r7, #15]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80116a8:	b004      	add	sp, #16
 80116aa:	4770      	bx	lr
 80116ac:	ffbdffbf 	.word	0xffbdffbf
 80116b0:	03ee0000 	.word	0x03ee0000

080116b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	4613      	mov	r3, r2
 80116c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80116c2:	79fb      	ldrb	r3, [r7, #7]
 80116c4:	2b02      	cmp	r3, #2
 80116c6:	d165      	bne.n	8011794 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	4a41      	ldr	r2, [pc, #260]	; (80117d0 <USB_SetTurnaroundTime+0x11c>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d906      	bls.n	80116de <USB_SetTurnaroundTime+0x2a>
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	4a40      	ldr	r2, [pc, #256]	; (80117d4 <USB_SetTurnaroundTime+0x120>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d202      	bcs.n	80116de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80116d8:	230f      	movs	r3, #15
 80116da:	617b      	str	r3, [r7, #20]
 80116dc:	e062      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4a3c      	ldr	r2, [pc, #240]	; (80117d4 <USB_SetTurnaroundTime+0x120>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d306      	bcc.n	80116f4 <USB_SetTurnaroundTime+0x40>
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	4a3b      	ldr	r2, [pc, #236]	; (80117d8 <USB_SetTurnaroundTime+0x124>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d202      	bcs.n	80116f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80116ee:	230e      	movs	r3, #14
 80116f0:	617b      	str	r3, [r7, #20]
 80116f2:	e057      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	4a38      	ldr	r2, [pc, #224]	; (80117d8 <USB_SetTurnaroundTime+0x124>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d306      	bcc.n	801170a <USB_SetTurnaroundTime+0x56>
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	4a37      	ldr	r2, [pc, #220]	; (80117dc <USB_SetTurnaroundTime+0x128>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d202      	bcs.n	801170a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011704:	230d      	movs	r3, #13
 8011706:	617b      	str	r3, [r7, #20]
 8011708:	e04c      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	4a33      	ldr	r2, [pc, #204]	; (80117dc <USB_SetTurnaroundTime+0x128>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d306      	bcc.n	8011720 <USB_SetTurnaroundTime+0x6c>
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	4a32      	ldr	r2, [pc, #200]	; (80117e0 <USB_SetTurnaroundTime+0x12c>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d802      	bhi.n	8011720 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801171a:	230c      	movs	r3, #12
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	e041      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	4a2f      	ldr	r2, [pc, #188]	; (80117e0 <USB_SetTurnaroundTime+0x12c>)
 8011724:	4293      	cmp	r3, r2
 8011726:	d906      	bls.n	8011736 <USB_SetTurnaroundTime+0x82>
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	4a2e      	ldr	r2, [pc, #184]	; (80117e4 <USB_SetTurnaroundTime+0x130>)
 801172c:	4293      	cmp	r3, r2
 801172e:	d802      	bhi.n	8011736 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011730:	230b      	movs	r3, #11
 8011732:	617b      	str	r3, [r7, #20]
 8011734:	e036      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	4a2a      	ldr	r2, [pc, #168]	; (80117e4 <USB_SetTurnaroundTime+0x130>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d906      	bls.n	801174c <USB_SetTurnaroundTime+0x98>
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	4a29      	ldr	r2, [pc, #164]	; (80117e8 <USB_SetTurnaroundTime+0x134>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d802      	bhi.n	801174c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011746:	230a      	movs	r3, #10
 8011748:	617b      	str	r3, [r7, #20]
 801174a:	e02b      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	4a26      	ldr	r2, [pc, #152]	; (80117e8 <USB_SetTurnaroundTime+0x134>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d906      	bls.n	8011762 <USB_SetTurnaroundTime+0xae>
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	4a25      	ldr	r2, [pc, #148]	; (80117ec <USB_SetTurnaroundTime+0x138>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d202      	bcs.n	8011762 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801175c:	2309      	movs	r3, #9
 801175e:	617b      	str	r3, [r7, #20]
 8011760:	e020      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	4a21      	ldr	r2, [pc, #132]	; (80117ec <USB_SetTurnaroundTime+0x138>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d306      	bcc.n	8011778 <USB_SetTurnaroundTime+0xc4>
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	4a20      	ldr	r2, [pc, #128]	; (80117f0 <USB_SetTurnaroundTime+0x13c>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d802      	bhi.n	8011778 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011772:	2308      	movs	r3, #8
 8011774:	617b      	str	r3, [r7, #20]
 8011776:	e015      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	4a1d      	ldr	r2, [pc, #116]	; (80117f0 <USB_SetTurnaroundTime+0x13c>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d906      	bls.n	801178e <USB_SetTurnaroundTime+0xda>
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	4a1c      	ldr	r2, [pc, #112]	; (80117f4 <USB_SetTurnaroundTime+0x140>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d202      	bcs.n	801178e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011788:	2307      	movs	r3, #7
 801178a:	617b      	str	r3, [r7, #20]
 801178c:	e00a      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801178e:	2306      	movs	r3, #6
 8011790:	617b      	str	r3, [r7, #20]
 8011792:	e007      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011794:	79fb      	ldrb	r3, [r7, #7]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801179a:	2309      	movs	r3, #9
 801179c:	617b      	str	r3, [r7, #20]
 801179e:	e001      	b.n	80117a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80117a0:	2309      	movs	r3, #9
 80117a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	68da      	ldr	r2, [r3, #12]
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	029b      	lsls	r3, r3, #10
 80117b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80117bc:	431a      	orrs	r2, r3
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80117c2:	2300      	movs	r3, #0
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	371c      	adds	r7, #28
 80117c8:	46bd      	mov	sp, r7
 80117ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ce:	4770      	bx	lr
 80117d0:	00d8acbf 	.word	0x00d8acbf
 80117d4:	00e4e1c0 	.word	0x00e4e1c0
 80117d8:	00f42400 	.word	0x00f42400
 80117dc:	01067380 	.word	0x01067380
 80117e0:	011a499f 	.word	0x011a499f
 80117e4:	01312cff 	.word	0x01312cff
 80117e8:	014ca43f 	.word	0x014ca43f
 80117ec:	016e3600 	.word	0x016e3600
 80117f0:	01a6ab1f 	.word	0x01a6ab1f
 80117f4:	01e84800 	.word	0x01e84800

080117f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b083      	sub	sp, #12
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	f043 0201 	orr.w	r2, r3, #1
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	370c      	adds	r7, #12
 8011812:	46bd      	mov	sp, r7
 8011814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011818:	4770      	bx	lr

0801181a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	f023 0201 	bic.w	r2, r3, #1
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	370c      	adds	r7, #12
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	460b      	mov	r3, r1
 8011846:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011848:	2300      	movs	r3, #0
 801184a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011858:	78fb      	ldrb	r3, [r7, #3]
 801185a:	2b01      	cmp	r3, #1
 801185c:	d115      	bne.n	801188a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801186a:	2001      	movs	r0, #1
 801186c:	f7f1 fc1a 	bl	80030a4 <HAL_Delay>
      ms++;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	3301      	adds	r3, #1
 8011874:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f001 f93f 	bl	8012afa <USB_GetMode>
 801187c:	4603      	mov	r3, r0
 801187e:	2b01      	cmp	r3, #1
 8011880:	d01e      	beq.n	80118c0 <USB_SetCurrentMode+0x84>
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2b31      	cmp	r3, #49	; 0x31
 8011886:	d9f0      	bls.n	801186a <USB_SetCurrentMode+0x2e>
 8011888:	e01a      	b.n	80118c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801188a:	78fb      	ldrb	r3, [r7, #3]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d115      	bne.n	80118bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801189c:	2001      	movs	r0, #1
 801189e:	f7f1 fc01 	bl	80030a4 <HAL_Delay>
      ms++;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	3301      	adds	r3, #1
 80118a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f001 f926 	bl	8012afa <USB_GetMode>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <USB_SetCurrentMode+0x84>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b31      	cmp	r3, #49	; 0x31
 80118b8:	d9f0      	bls.n	801189c <USB_SetCurrentMode+0x60>
 80118ba:	e001      	b.n	80118c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	e005      	b.n	80118cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b32      	cmp	r3, #50	; 0x32
 80118c4:	d101      	bne.n	80118ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80118c6:	2301      	movs	r3, #1
 80118c8:	e000      	b.n	80118cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80118d4:	b084      	sub	sp, #16
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b086      	sub	sp, #24
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80118e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80118e6:	2300      	movs	r3, #0
 80118e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80118ee:	2300      	movs	r3, #0
 80118f0:	613b      	str	r3, [r7, #16]
 80118f2:	e009      	b.n	8011908 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	3340      	adds	r3, #64	; 0x40
 80118fa:	009b      	lsls	r3, r3, #2
 80118fc:	4413      	add	r3, r2
 80118fe:	2200      	movs	r2, #0
 8011900:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	3301      	adds	r3, #1
 8011906:	613b      	str	r3, [r7, #16]
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	2b0e      	cmp	r3, #14
 801190c:	d9f2      	bls.n	80118f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801190e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011910:	2b00      	cmp	r3, #0
 8011912:	d11c      	bne.n	801194e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011922:	f043 0302 	orr.w	r3, r3, #2
 8011926:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801192c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	601a      	str	r2, [r3, #0]
 801194c:	e005      	b.n	801195a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011960:	461a      	mov	r2, r3
 8011962:	2300      	movs	r3, #0
 8011964:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801196c:	4619      	mov	r1, r3
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011974:	461a      	mov	r2, r3
 8011976:	680b      	ldr	r3, [r1, #0]
 8011978:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197c:	2b01      	cmp	r3, #1
 801197e:	d10c      	bne.n	801199a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011982:	2b00      	cmp	r3, #0
 8011984:	d104      	bne.n	8011990 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011986:	2100      	movs	r1, #0
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 f965 	bl	8011c58 <USB_SetDevSpeed>
 801198e:	e008      	b.n	80119a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011990:	2101      	movs	r1, #1
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 f960 	bl	8011c58 <USB_SetDevSpeed>
 8011998:	e003      	b.n	80119a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801199a:	2103      	movs	r1, #3
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 f95b 	bl	8011c58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80119a2:	2110      	movs	r1, #16
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f000 f8f3 	bl	8011b90 <USB_FlushTxFifo>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80119b0:	2301      	movs	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f91f 	bl	8011bf8 <USB_FlushRxFifo>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d001      	beq.n	80119c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80119c0:	2301      	movs	r3, #1
 80119c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119ca:	461a      	mov	r2, r3
 80119cc:	2300      	movs	r3, #0
 80119ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119d6:	461a      	mov	r2, r3
 80119d8:	2300      	movs	r3, #0
 80119da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119e2:	461a      	mov	r2, r3
 80119e4:	2300      	movs	r3, #0
 80119e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80119e8:	2300      	movs	r3, #0
 80119ea:	613b      	str	r3, [r7, #16]
 80119ec:	e043      	b.n	8011a76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	015a      	lsls	r2, r3, #5
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	4413      	add	r3, r2
 80119f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a04:	d118      	bne.n	8011a38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10a      	bne.n	8011a22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	015a      	lsls	r2, r3, #5
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	4413      	add	r3, r2
 8011a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011a1e:	6013      	str	r3, [r2, #0]
 8011a20:	e013      	b.n	8011a4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	015a      	lsls	r2, r3, #5
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4413      	add	r3, r2
 8011a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a2e:	461a      	mov	r2, r3
 8011a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011a34:	6013      	str	r3, [r2, #0]
 8011a36:	e008      	b.n	8011a4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	015a      	lsls	r2, r3, #5
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	4413      	add	r3, r2
 8011a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a44:	461a      	mov	r2, r3
 8011a46:	2300      	movs	r3, #0
 8011a48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	015a      	lsls	r2, r3, #5
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	4413      	add	r3, r2
 8011a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a56:	461a      	mov	r2, r3
 8011a58:	2300      	movs	r3, #0
 8011a5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	015a      	lsls	r2, r3, #5
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	4413      	add	r3, r2
 8011a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a68:	461a      	mov	r2, r3
 8011a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011a6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	3301      	adds	r3, #1
 8011a74:	613b      	str	r3, [r7, #16]
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a78:	693a      	ldr	r2, [r7, #16]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d3b7      	bcc.n	80119ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a7e:	2300      	movs	r3, #0
 8011a80:	613b      	str	r3, [r7, #16]
 8011a82:	e043      	b.n	8011b0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	015a      	lsls	r2, r3, #5
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	4413      	add	r3, r2
 8011a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011a9a:	d118      	bne.n	8011ace <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10a      	bne.n	8011ab8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	015a      	lsls	r2, r3, #5
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aae:	461a      	mov	r2, r3
 8011ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011ab4:	6013      	str	r3, [r2, #0]
 8011ab6:	e013      	b.n	8011ae0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	015a      	lsls	r2, r3, #5
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	4413      	add	r3, r2
 8011ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011aca:	6013      	str	r3, [r2, #0]
 8011acc:	e008      	b.n	8011ae0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	015a      	lsls	r2, r3, #5
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ada:	461a      	mov	r2, r3
 8011adc:	2300      	movs	r3, #0
 8011ade:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	015a      	lsls	r2, r3, #5
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	4413      	add	r3, r2
 8011ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011aec:	461a      	mov	r2, r3
 8011aee:	2300      	movs	r3, #0
 8011af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	015a      	lsls	r2, r3, #5
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	4413      	add	r3, r2
 8011afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011afe:	461a      	mov	r2, r3
 8011b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011b04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	613b      	str	r3, [r7, #16]
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	693a      	ldr	r2, [r7, #16]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d3b7      	bcc.n	8011a84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b1a:	691b      	ldr	r3, [r3, #16]
 8011b1c:	68fa      	ldr	r2, [r7, #12]
 8011b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011b26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011b34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d105      	bne.n	8011b48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	699b      	ldr	r3, [r3, #24]
 8011b40:	f043 0210 	orr.w	r2, r3, #16
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	699a      	ldr	r2, [r3, #24]
 8011b4c:	4b0e      	ldr	r3, [pc, #56]	; (8011b88 <USB_DevInit+0x2b4>)
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	687a      	ldr	r2, [r7, #4]
 8011b52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d005      	beq.n	8011b66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	699b      	ldr	r3, [r3, #24]
 8011b5e:	f043 0208 	orr.w	r2, r3, #8
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b68:	2b01      	cmp	r3, #1
 8011b6a:	d105      	bne.n	8011b78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	699a      	ldr	r2, [r3, #24]
 8011b70:	4b06      	ldr	r3, [pc, #24]	; (8011b8c <USB_DevInit+0x2b8>)
 8011b72:	4313      	orrs	r3, r2
 8011b74:	687a      	ldr	r2, [r7, #4]
 8011b76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3718      	adds	r7, #24
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b84:	b004      	add	sp, #16
 8011b86:	4770      	bx	lr
 8011b88:	803c3800 	.word	0x803c3800
 8011b8c:	40000004 	.word	0x40000004

08011b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	4a13      	ldr	r2, [pc, #76]	; (8011bf4 <USB_FlushTxFifo+0x64>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d901      	bls.n	8011bb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011bac:	2303      	movs	r3, #3
 8011bae:	e01b      	b.n	8011be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	691b      	ldr	r3, [r3, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	daf2      	bge.n	8011b9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	019b      	lsls	r3, r3, #6
 8011bc0:	f043 0220 	orr.w	r2, r3, #32
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	4a08      	ldr	r2, [pc, #32]	; (8011bf4 <USB_FlushTxFifo+0x64>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d901      	bls.n	8011bda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	e006      	b.n	8011be8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	691b      	ldr	r3, [r3, #16]
 8011bde:	f003 0320 	and.w	r3, r3, #32
 8011be2:	2b20      	cmp	r3, #32
 8011be4:	d0f0      	beq.n	8011bc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3714      	adds	r7, #20
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr
 8011bf4:	00030d40 	.word	0x00030d40

08011bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011c00:	2300      	movs	r3, #0
 8011c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	3301      	adds	r3, #1
 8011c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	4a11      	ldr	r2, [pc, #68]	; (8011c54 <USB_FlushRxFifo+0x5c>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d901      	bls.n	8011c16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011c12:	2303      	movs	r3, #3
 8011c14:	e018      	b.n	8011c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	691b      	ldr	r3, [r3, #16]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	daf2      	bge.n	8011c04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2210      	movs	r2, #16
 8011c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	4a08      	ldr	r2, [pc, #32]	; (8011c54 <USB_FlushRxFifo+0x5c>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d901      	bls.n	8011c3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011c36:	2303      	movs	r3, #3
 8011c38:	e006      	b.n	8011c48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	691b      	ldr	r3, [r3, #16]
 8011c3e:	f003 0310 	and.w	r3, r3, #16
 8011c42:	2b10      	cmp	r3, #16
 8011c44:	d0f0      	beq.n	8011c28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3714      	adds	r7, #20
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	00030d40 	.word	0x00030d40

08011c58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	460b      	mov	r3, r1
 8011c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	78fb      	ldrb	r3, [r7, #3]
 8011c72:	68f9      	ldr	r1, [r7, #12]
 8011c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c78:	4313      	orrs	r3, r2
 8011c7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011c7c:	2300      	movs	r3, #0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3714      	adds	r7, #20
 8011c82:	46bd      	mov	sp, r7
 8011c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c88:	4770      	bx	lr

08011c8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011c8a:	b480      	push	{r7}
 8011c8c:	b087      	sub	sp, #28
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	f003 0306 	and.w	r3, r3, #6
 8011ca2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d102      	bne.n	8011cb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011caa:	2300      	movs	r3, #0
 8011cac:	75fb      	strb	r3, [r7, #23]
 8011cae:	e00a      	b.n	8011cc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2b02      	cmp	r3, #2
 8011cb4:	d002      	beq.n	8011cbc <USB_GetDevSpeed+0x32>
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2b06      	cmp	r3, #6
 8011cba:	d102      	bne.n	8011cc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011cbc:	2302      	movs	r3, #2
 8011cbe:	75fb      	strb	r3, [r7, #23]
 8011cc0:	e001      	b.n	8011cc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011cc2:	230f      	movs	r3, #15
 8011cc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	371c      	adds	r7, #28
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	785b      	ldrb	r3, [r3, #1]
 8011cec:	2b01      	cmp	r3, #1
 8011cee:	d139      	bne.n	8011d64 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cf6:	69da      	ldr	r2, [r3, #28]
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	f003 030f 	and.w	r3, r3, #15
 8011d00:	2101      	movs	r1, #1
 8011d02:	fa01 f303 	lsl.w	r3, r1, r3
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	68f9      	ldr	r1, [r7, #12]
 8011d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d0e:	4313      	orrs	r3, r2
 8011d10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	015a      	lsls	r2, r3, #5
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	4413      	add	r3, r2
 8011d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d153      	bne.n	8011dd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	015a      	lsls	r2, r3, #5
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	4413      	add	r3, r2
 8011d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	791b      	ldrb	r3, [r3, #4]
 8011d42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011d44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	059b      	lsls	r3, r3, #22
 8011d4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011d4c:	431a      	orrs	r2, r3
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	0159      	lsls	r1, r3, #5
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	440b      	add	r3, r1
 8011d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	4b20      	ldr	r3, [pc, #128]	; (8011de0 <USB_ActivateEndpoint+0x10c>)
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	600b      	str	r3, [r1, #0]
 8011d62:	e035      	b.n	8011dd0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d6a:	69da      	ldr	r2, [r3, #28]
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	f003 030f 	and.w	r3, r3, #15
 8011d74:	2101      	movs	r1, #1
 8011d76:	fa01 f303 	lsl.w	r3, r1, r3
 8011d7a:	041b      	lsls	r3, r3, #16
 8011d7c:	68f9      	ldr	r1, [r7, #12]
 8011d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d82:	4313      	orrs	r3, r2
 8011d84:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	015a      	lsls	r2, r3, #5
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d119      	bne.n	8011dd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	015a      	lsls	r2, r3, #5
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	4413      	add	r3, r2
 8011da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	791b      	ldrb	r3, [r3, #4]
 8011db6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011db8:	430b      	orrs	r3, r1
 8011dba:	431a      	orrs	r2, r3
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	0159      	lsls	r1, r3, #5
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	440b      	add	r3, r1
 8011dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4b05      	ldr	r3, [pc, #20]	; (8011de0 <USB_ActivateEndpoint+0x10c>)
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3714      	adds	r7, #20
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	10008000 	.word	0x10008000

08011de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	785b      	ldrb	r3, [r3, #1]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d161      	bne.n	8011ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	015a      	lsls	r2, r3, #5
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	4413      	add	r3, r2
 8011e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011e16:	d11f      	bne.n	8011e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	015a      	lsls	r2, r3, #5
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	4413      	add	r3, r2
 8011e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	0151      	lsls	r1, r2, #5
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	440a      	add	r2, r1
 8011e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	015a      	lsls	r2, r3, #5
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	4413      	add	r3, r2
 8011e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	0151      	lsls	r1, r2, #5
 8011e4a:	68fa      	ldr	r2, [r7, #12]
 8011e4c:	440a      	add	r2, r1
 8011e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	f003 030f 	and.w	r3, r3, #15
 8011e68:	2101      	movs	r1, #1
 8011e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	43db      	mvns	r3, r3
 8011e72:	68f9      	ldr	r1, [r7, #12]
 8011e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e78:	4013      	ands	r3, r2
 8011e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e82:	69da      	ldr	r2, [r3, #28]
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	781b      	ldrb	r3, [r3, #0]
 8011e88:	f003 030f 	and.w	r3, r3, #15
 8011e8c:	2101      	movs	r1, #1
 8011e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	43db      	mvns	r3, r3
 8011e96:	68f9      	ldr	r1, [r7, #12]
 8011e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e9c:	4013      	ands	r3, r2
 8011e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	015a      	lsls	r2, r3, #5
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	4413      	add	r3, r2
 8011ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	0159      	lsls	r1, r3, #5
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	440b      	add	r3, r1
 8011eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011eba:	4619      	mov	r1, r3
 8011ebc:	4b35      	ldr	r3, [pc, #212]	; (8011f94 <USB_DeactivateEndpoint+0x1b0>)
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	600b      	str	r3, [r1, #0]
 8011ec2:	e060      	b.n	8011f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	015a      	lsls	r2, r3, #5
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	4413      	add	r3, r2
 8011ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011eda:	d11f      	bne.n	8011f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	015a      	lsls	r2, r3, #5
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	0151      	lsls	r1, r2, #5
 8011eee:	68fa      	ldr	r2, [r7, #12]
 8011ef0:	440a      	add	r2, r1
 8011ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	015a      	lsls	r2, r3, #5
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4413      	add	r3, r2
 8011f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	68ba      	ldr	r2, [r7, #8]
 8011f0c:	0151      	lsls	r1, r2, #5
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	440a      	add	r2, r1
 8011f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f003 030f 	and.w	r3, r3, #15
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011f32:	041b      	lsls	r3, r3, #16
 8011f34:	43db      	mvns	r3, r3
 8011f36:	68f9      	ldr	r1, [r7, #12]
 8011f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f3c:	4013      	ands	r3, r2
 8011f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f46:	69da      	ldr	r2, [r3, #28]
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	f003 030f 	and.w	r3, r3, #15
 8011f50:	2101      	movs	r1, #1
 8011f52:	fa01 f303 	lsl.w	r3, r1, r3
 8011f56:	041b      	lsls	r3, r3, #16
 8011f58:	43db      	mvns	r3, r3
 8011f5a:	68f9      	ldr	r1, [r7, #12]
 8011f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f60:	4013      	ands	r3, r2
 8011f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	015a      	lsls	r2, r3, #5
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	0159      	lsls	r1, r3, #5
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	440b      	add	r3, r1
 8011f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f7e:	4619      	mov	r1, r3
 8011f80:	4b05      	ldr	r3, [pc, #20]	; (8011f98 <USB_DeactivateEndpoint+0x1b4>)
 8011f82:	4013      	ands	r3, r2
 8011f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011f86:	2300      	movs	r3, #0
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3714      	adds	r7, #20
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	ec337800 	.word	0xec337800
 8011f98:	eff37800 	.word	0xeff37800

08011f9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b08a      	sub	sp, #40	; 0x28
 8011fa0:	af02      	add	r7, sp, #8
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	785b      	ldrb	r3, [r3, #1]
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	f040 8181 	bne.w	80122c0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	691b      	ldr	r3, [r3, #16]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d132      	bne.n	801202c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	015a      	lsls	r2, r3, #5
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	4413      	add	r3, r2
 8011fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd2:	691a      	ldr	r2, [r3, #16]
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	0159      	lsls	r1, r3, #5
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	440b      	add	r3, r1
 8011fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4ba5      	ldr	r3, [pc, #660]	; (8012278 <USB_EPStartXfer+0x2dc>)
 8011fe4:	4013      	ands	r3, r2
 8011fe6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	69ba      	ldr	r2, [r7, #24]
 8011ff8:	0151      	lsls	r1, r2, #5
 8011ffa:	69fa      	ldr	r2, [r7, #28]
 8011ffc:	440a      	add	r2, r1
 8011ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012008:	69bb      	ldr	r3, [r7, #24]
 801200a:	015a      	lsls	r2, r3, #5
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	4413      	add	r3, r2
 8012010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012014:	691a      	ldr	r2, [r3, #16]
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	0159      	lsls	r1, r3, #5
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	440b      	add	r3, r1
 801201e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012022:	4619      	mov	r1, r3
 8012024:	4b95      	ldr	r3, [pc, #596]	; (801227c <USB_EPStartXfer+0x2e0>)
 8012026:	4013      	ands	r3, r2
 8012028:	610b      	str	r3, [r1, #16]
 801202a:	e092      	b.n	8012152 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	015a      	lsls	r2, r3, #5
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	4413      	add	r3, r2
 8012034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012038:	691a      	ldr	r2, [r3, #16]
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	0159      	lsls	r1, r3, #5
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	440b      	add	r3, r1
 8012042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012046:	4619      	mov	r1, r3
 8012048:	4b8c      	ldr	r3, [pc, #560]	; (801227c <USB_EPStartXfer+0x2e0>)
 801204a:	4013      	ands	r3, r2
 801204c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	015a      	lsls	r2, r3, #5
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	4413      	add	r3, r2
 8012056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801205a:	691a      	ldr	r2, [r3, #16]
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	0159      	lsls	r1, r3, #5
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	440b      	add	r3, r1
 8012064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012068:	4619      	mov	r1, r3
 801206a:	4b83      	ldr	r3, [pc, #524]	; (8012278 <USB_EPStartXfer+0x2dc>)
 801206c:	4013      	ands	r3, r2
 801206e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d11a      	bne.n	80120ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	691a      	ldr	r2, [r3, #16]
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	429a      	cmp	r2, r3
 8012080:	d903      	bls.n	801208a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	689a      	ldr	r2, [r3, #8]
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	015a      	lsls	r2, r3, #5
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	4413      	add	r3, r2
 8012092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	69ba      	ldr	r2, [r7, #24]
 801209a:	0151      	lsls	r1, r2, #5
 801209c:	69fa      	ldr	r2, [r7, #28]
 801209e:	440a      	add	r2, r1
 80120a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80120a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120a8:	6113      	str	r3, [r2, #16]
 80120aa:	e01b      	b.n	80120e4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	015a      	lsls	r2, r3, #5
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	4413      	add	r3, r2
 80120b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120b8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	6919      	ldr	r1, [r3, #16]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	440b      	add	r3, r1
 80120c4:	1e59      	subs	r1, r3, #1
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80120ce:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80120d0:	4b6b      	ldr	r3, [pc, #428]	; (8012280 <USB_EPStartXfer+0x2e4>)
 80120d2:	400b      	ands	r3, r1
 80120d4:	69b9      	ldr	r1, [r7, #24]
 80120d6:	0148      	lsls	r0, r1, #5
 80120d8:	69f9      	ldr	r1, [r7, #28]
 80120da:	4401      	add	r1, r0
 80120dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80120e0:	4313      	orrs	r3, r2
 80120e2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80120f0:	691a      	ldr	r2, [r3, #16]
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120fa:	69b9      	ldr	r1, [r7, #24]
 80120fc:	0148      	lsls	r0, r1, #5
 80120fe:	69f9      	ldr	r1, [r7, #28]
 8012100:	4401      	add	r1, r0
 8012102:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012106:	4313      	orrs	r3, r2
 8012108:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	791b      	ldrb	r3, [r3, #4]
 801210e:	2b01      	cmp	r3, #1
 8012110:	d11f      	bne.n	8012152 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	015a      	lsls	r2, r3, #5
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	4413      	add	r3, r2
 801211a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801211e:	691b      	ldr	r3, [r3, #16]
 8012120:	69ba      	ldr	r2, [r7, #24]
 8012122:	0151      	lsls	r1, r2, #5
 8012124:	69fa      	ldr	r2, [r7, #28]
 8012126:	440a      	add	r2, r1
 8012128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801212c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012130:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	015a      	lsls	r2, r3, #5
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	4413      	add	r3, r2
 801213a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801213e:	691b      	ldr	r3, [r3, #16]
 8012140:	69ba      	ldr	r2, [r7, #24]
 8012142:	0151      	lsls	r1, r2, #5
 8012144:	69fa      	ldr	r2, [r7, #28]
 8012146:	440a      	add	r2, r1
 8012148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801214c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012150:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012152:	79fb      	ldrb	r3, [r7, #7]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d14b      	bne.n	80121f0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	69db      	ldr	r3, [r3, #28]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d009      	beq.n	8012174 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	015a      	lsls	r2, r3, #5
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	4413      	add	r3, r2
 8012168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801216c:	461a      	mov	r2, r3
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	69db      	ldr	r3, [r3, #28]
 8012172:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	791b      	ldrb	r3, [r3, #4]
 8012178:	2b01      	cmp	r3, #1
 801217a:	d128      	bne.n	80121ce <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012182:	689b      	ldr	r3, [r3, #8]
 8012184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012188:	2b00      	cmp	r3, #0
 801218a:	d110      	bne.n	80121ae <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	015a      	lsls	r2, r3, #5
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	4413      	add	r3, r2
 8012194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	69ba      	ldr	r2, [r7, #24]
 801219c:	0151      	lsls	r1, r2, #5
 801219e:	69fa      	ldr	r2, [r7, #28]
 80121a0:	440a      	add	r2, r1
 80121a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80121aa:	6013      	str	r3, [r2, #0]
 80121ac:	e00f      	b.n	80121ce <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	015a      	lsls	r2, r3, #5
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	4413      	add	r3, r2
 80121b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	69ba      	ldr	r2, [r7, #24]
 80121be:	0151      	lsls	r1, r2, #5
 80121c0:	69fa      	ldr	r2, [r7, #28]
 80121c2:	440a      	add	r2, r1
 80121c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80121cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	015a      	lsls	r2, r3, #5
 80121d2:	69fb      	ldr	r3, [r7, #28]
 80121d4:	4413      	add	r3, r2
 80121d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	69ba      	ldr	r2, [r7, #24]
 80121de:	0151      	lsls	r1, r2, #5
 80121e0:	69fa      	ldr	r2, [r7, #28]
 80121e2:	440a      	add	r2, r1
 80121e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80121ec:	6013      	str	r3, [r2, #0]
 80121ee:	e16a      	b.n	80124c6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	015a      	lsls	r2, r3, #5
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	4413      	add	r3, r2
 80121f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	69ba      	ldr	r2, [r7, #24]
 8012200:	0151      	lsls	r1, r2, #5
 8012202:	69fa      	ldr	r2, [r7, #28]
 8012204:	440a      	add	r2, r1
 8012206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801220a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801220e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	791b      	ldrb	r3, [r3, #4]
 8012214:	2b01      	cmp	r3, #1
 8012216:	d015      	beq.n	8012244 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	691b      	ldr	r3, [r3, #16]
 801221c:	2b00      	cmp	r3, #0
 801221e:	f000 8152 	beq.w	80124c6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	f003 030f 	and.w	r3, r3, #15
 8012232:	2101      	movs	r1, #1
 8012234:	fa01 f303 	lsl.w	r3, r1, r3
 8012238:	69f9      	ldr	r1, [r7, #28]
 801223a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801223e:	4313      	orrs	r3, r2
 8012240:	634b      	str	r3, [r1, #52]	; 0x34
 8012242:	e140      	b.n	80124c6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801224a:	689b      	ldr	r3, [r3, #8]
 801224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012250:	2b00      	cmp	r3, #0
 8012252:	d117      	bne.n	8012284 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	015a      	lsls	r2, r3, #5
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	4413      	add	r3, r2
 801225c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	69ba      	ldr	r2, [r7, #24]
 8012264:	0151      	lsls	r1, r2, #5
 8012266:	69fa      	ldr	r2, [r7, #28]
 8012268:	440a      	add	r2, r1
 801226a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801226e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012272:	6013      	str	r3, [r2, #0]
 8012274:	e016      	b.n	80122a4 <USB_EPStartXfer+0x308>
 8012276:	bf00      	nop
 8012278:	e007ffff 	.word	0xe007ffff
 801227c:	fff80000 	.word	0xfff80000
 8012280:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	015a      	lsls	r2, r3, #5
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	4413      	add	r3, r2
 801228c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	69ba      	ldr	r2, [r7, #24]
 8012294:	0151      	lsls	r1, r2, #5
 8012296:	69fa      	ldr	r2, [r7, #28]
 8012298:	440a      	add	r2, r1
 801229a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801229e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	68d9      	ldr	r1, [r3, #12]
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	781a      	ldrb	r2, [r3, #0]
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	691b      	ldr	r3, [r3, #16]
 80122b0:	b298      	uxth	r0, r3
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4603      	mov	r3, r0
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f000 f9b9 	bl	8012630 <USB_WritePacket>
 80122be:	e102      	b.n	80124c6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	015a      	lsls	r2, r3, #5
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	4413      	add	r3, r2
 80122c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122cc:	691a      	ldr	r2, [r3, #16]
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	0159      	lsls	r1, r3, #5
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	440b      	add	r3, r1
 80122d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122da:	4619      	mov	r1, r3
 80122dc:	4b7c      	ldr	r3, [pc, #496]	; (80124d0 <USB_EPStartXfer+0x534>)
 80122de:	4013      	ands	r3, r2
 80122e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	015a      	lsls	r2, r3, #5
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	4413      	add	r3, r2
 80122ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ee:	691a      	ldr	r2, [r3, #16]
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	0159      	lsls	r1, r3, #5
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	440b      	add	r3, r1
 80122f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122fc:	4619      	mov	r1, r3
 80122fe:	4b75      	ldr	r3, [pc, #468]	; (80124d4 <USB_EPStartXfer+0x538>)
 8012300:	4013      	ands	r3, r2
 8012302:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d12f      	bne.n	801236a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	689a      	ldr	r2, [r3, #8]
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801231a:	68bb      	ldr	r3, [r7, #8]
 801231c:	689a      	ldr	r2, [r3, #8]
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	015a      	lsls	r2, r3, #5
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	4413      	add	r3, r2
 801232a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801232e:	691a      	ldr	r2, [r3, #16]
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	6a1b      	ldr	r3, [r3, #32]
 8012334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012338:	69b9      	ldr	r1, [r7, #24]
 801233a:	0148      	lsls	r0, r1, #5
 801233c:	69f9      	ldr	r1, [r7, #28]
 801233e:	4401      	add	r1, r0
 8012340:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012344:	4313      	orrs	r3, r2
 8012346:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	015a      	lsls	r2, r3, #5
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	4413      	add	r3, r2
 8012350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012354:	691b      	ldr	r3, [r3, #16]
 8012356:	69ba      	ldr	r2, [r7, #24]
 8012358:	0151      	lsls	r1, r2, #5
 801235a:	69fa      	ldr	r2, [r7, #28]
 801235c:	440a      	add	r2, r1
 801235e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012366:	6113      	str	r3, [r2, #16]
 8012368:	e05f      	b.n	801242a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	691b      	ldr	r3, [r3, #16]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d123      	bne.n	80123ba <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	015a      	lsls	r2, r3, #5
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	4413      	add	r3, r2
 801237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801237e:	691a      	ldr	r2, [r3, #16]
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012388:	69b9      	ldr	r1, [r7, #24]
 801238a:	0148      	lsls	r0, r1, #5
 801238c:	69f9      	ldr	r1, [r7, #28]
 801238e:	4401      	add	r1, r0
 8012390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012394:	4313      	orrs	r3, r2
 8012396:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	015a      	lsls	r2, r3, #5
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	4413      	add	r3, r2
 80123a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123a4:	691b      	ldr	r3, [r3, #16]
 80123a6:	69ba      	ldr	r2, [r7, #24]
 80123a8:	0151      	lsls	r1, r2, #5
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	440a      	add	r2, r1
 80123ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80123b6:	6113      	str	r3, [r2, #16]
 80123b8:	e037      	b.n	801242a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	691a      	ldr	r2, [r3, #16]
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	4413      	add	r3, r2
 80123c4:	1e5a      	subs	r2, r3, #1
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	689b      	ldr	r3, [r3, #8]
 80123ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80123ce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	689b      	ldr	r3, [r3, #8]
 80123d4:	8afa      	ldrh	r2, [r7, #22]
 80123d6:	fb03 f202 	mul.w	r2, r3, r2
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	015a      	lsls	r2, r3, #5
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	4413      	add	r3, r2
 80123e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123ea:	691a      	ldr	r2, [r3, #16]
 80123ec:	8afb      	ldrh	r3, [r7, #22]
 80123ee:	04d9      	lsls	r1, r3, #19
 80123f0:	4b39      	ldr	r3, [pc, #228]	; (80124d8 <USB_EPStartXfer+0x53c>)
 80123f2:	400b      	ands	r3, r1
 80123f4:	69b9      	ldr	r1, [r7, #24]
 80123f6:	0148      	lsls	r0, r1, #5
 80123f8:	69f9      	ldr	r1, [r7, #28]
 80123fa:	4401      	add	r1, r0
 80123fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012400:	4313      	orrs	r3, r2
 8012402:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012404:	69bb      	ldr	r3, [r7, #24]
 8012406:	015a      	lsls	r2, r3, #5
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	4413      	add	r3, r2
 801240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012410:	691a      	ldr	r2, [r3, #16]
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	6a1b      	ldr	r3, [r3, #32]
 8012416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801241a:	69b9      	ldr	r1, [r7, #24]
 801241c:	0148      	lsls	r0, r1, #5
 801241e:	69f9      	ldr	r1, [r7, #28]
 8012420:	4401      	add	r1, r0
 8012422:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012426:	4313      	orrs	r3, r2
 8012428:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801242a:	79fb      	ldrb	r3, [r7, #7]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d10d      	bne.n	801244c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d009      	beq.n	801244c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	68d9      	ldr	r1, [r3, #12]
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012448:	460a      	mov	r2, r1
 801244a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	791b      	ldrb	r3, [r3, #4]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d128      	bne.n	80124a6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801245a:	689b      	ldr	r3, [r3, #8]
 801245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012460:	2b00      	cmp	r3, #0
 8012462:	d110      	bne.n	8012486 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	015a      	lsls	r2, r3, #5
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	4413      	add	r3, r2
 801246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	69ba      	ldr	r2, [r7, #24]
 8012474:	0151      	lsls	r1, r2, #5
 8012476:	69fa      	ldr	r2, [r7, #28]
 8012478:	440a      	add	r2, r1
 801247a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801247e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012482:	6013      	str	r3, [r2, #0]
 8012484:	e00f      	b.n	80124a6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	015a      	lsls	r2, r3, #5
 801248a:	69fb      	ldr	r3, [r7, #28]
 801248c:	4413      	add	r3, r2
 801248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	69ba      	ldr	r2, [r7, #24]
 8012496:	0151      	lsls	r1, r2, #5
 8012498:	69fa      	ldr	r2, [r7, #28]
 801249a:	440a      	add	r2, r1
 801249c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124a4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80124a6:	69bb      	ldr	r3, [r7, #24]
 80124a8:	015a      	lsls	r2, r3, #5
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	4413      	add	r3, r2
 80124ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	69ba      	ldr	r2, [r7, #24]
 80124b6:	0151      	lsls	r1, r2, #5
 80124b8:	69fa      	ldr	r2, [r7, #28]
 80124ba:	440a      	add	r2, r1
 80124bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80124c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3720      	adds	r7, #32
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	fff80000 	.word	0xfff80000
 80124d4:	e007ffff 	.word	0xe007ffff
 80124d8:	1ff80000 	.word	0x1ff80000

080124dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124dc:	b480      	push	{r7}
 80124de:	b087      	sub	sp, #28
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80124e6:	2300      	movs	r3, #0
 80124e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	785b      	ldrb	r3, [r3, #1]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d14a      	bne.n	8012590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	015a      	lsls	r2, r3, #5
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	4413      	add	r3, r2
 8012504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801250e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012512:	f040 8086 	bne.w	8012622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	015a      	lsls	r2, r3, #5
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	4413      	add	r3, r2
 8012520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	683a      	ldr	r2, [r7, #0]
 8012528:	7812      	ldrb	r2, [r2, #0]
 801252a:	0151      	lsls	r1, r2, #5
 801252c:	693a      	ldr	r2, [r7, #16]
 801252e:	440a      	add	r2, r1
 8012530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	015a      	lsls	r2, r3, #5
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	4413      	add	r3, r2
 8012544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	683a      	ldr	r2, [r7, #0]
 801254c:	7812      	ldrb	r2, [r2, #0]
 801254e:	0151      	lsls	r1, r2, #5
 8012550:	693a      	ldr	r2, [r7, #16]
 8012552:	440a      	add	r2, r1
 8012554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801255c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	3301      	adds	r3, #1
 8012562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	f242 7210 	movw	r2, #10000	; 0x2710
 801256a:	4293      	cmp	r3, r2
 801256c:	d902      	bls.n	8012574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801256e:	2301      	movs	r3, #1
 8012570:	75fb      	strb	r3, [r7, #23]
          break;
 8012572:	e056      	b.n	8012622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	015a      	lsls	r2, r3, #5
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	4413      	add	r3, r2
 801257e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801258c:	d0e7      	beq.n	801255e <USB_EPStopXfer+0x82>
 801258e:	e048      	b.n	8012622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	015a      	lsls	r2, r3, #5
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	4413      	add	r3, r2
 801259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80125a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80125a8:	d13b      	bne.n	8012622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	015a      	lsls	r2, r3, #5
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	4413      	add	r3, r2
 80125b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	7812      	ldrb	r2, [r2, #0]
 80125be:	0151      	lsls	r1, r2, #5
 80125c0:	693a      	ldr	r2, [r7, #16]
 80125c2:	440a      	add	r2, r1
 80125c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80125cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	015a      	lsls	r2, r3, #5
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	4413      	add	r3, r2
 80125d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	7812      	ldrb	r2, [r2, #0]
 80125e2:	0151      	lsls	r1, r2, #5
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	440a      	add	r2, r1
 80125e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80125ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80125f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	3301      	adds	r3, #1
 80125f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80125fe:	4293      	cmp	r3, r2
 8012600:	d902      	bls.n	8012608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012602:	2301      	movs	r3, #1
 8012604:	75fb      	strb	r3, [r7, #23]
          break;
 8012606:	e00c      	b.n	8012622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	781b      	ldrb	r3, [r3, #0]
 801260c:	015a      	lsls	r2, r3, #5
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	4413      	add	r3, r2
 8012612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801261c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012620:	d0e7      	beq.n	80125f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012622:	7dfb      	ldrb	r3, [r7, #23]
}
 8012624:	4618      	mov	r0, r3
 8012626:	371c      	adds	r7, #28
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012630:	b480      	push	{r7}
 8012632:	b089      	sub	sp, #36	; 0x24
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	4611      	mov	r1, r2
 801263c:	461a      	mov	r2, r3
 801263e:	460b      	mov	r3, r1
 8012640:	71fb      	strb	r3, [r7, #7]
 8012642:	4613      	mov	r3, r2
 8012644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801264e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012652:	2b00      	cmp	r3, #0
 8012654:	d123      	bne.n	801269e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012656:	88bb      	ldrh	r3, [r7, #4]
 8012658:	3303      	adds	r3, #3
 801265a:	089b      	lsrs	r3, r3, #2
 801265c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801265e:	2300      	movs	r3, #0
 8012660:	61bb      	str	r3, [r7, #24]
 8012662:	e018      	b.n	8012696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012664:	79fb      	ldrb	r3, [r7, #7]
 8012666:	031a      	lsls	r2, r3, #12
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	4413      	add	r3, r2
 801266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012670:	461a      	mov	r2, r3
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	3301      	adds	r3, #1
 801267c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	3301      	adds	r3, #1
 8012682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	3301      	adds	r3, #1
 8012688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801268a:	69fb      	ldr	r3, [r7, #28]
 801268c:	3301      	adds	r3, #1
 801268e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	3301      	adds	r3, #1
 8012694:	61bb      	str	r3, [r7, #24]
 8012696:	69ba      	ldr	r2, [r7, #24]
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	429a      	cmp	r2, r3
 801269c:	d3e2      	bcc.n	8012664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801269e:	2300      	movs	r3, #0
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3724      	adds	r7, #36	; 0x24
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr

080126ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b08b      	sub	sp, #44	; 0x2c
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	4613      	mov	r3, r2
 80126b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80126c2:	88fb      	ldrh	r3, [r7, #6]
 80126c4:	089b      	lsrs	r3, r3, #2
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80126ca:	88fb      	ldrh	r3, [r7, #6]
 80126cc:	f003 0303 	and.w	r3, r3, #3
 80126d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80126d2:	2300      	movs	r3, #0
 80126d4:	623b      	str	r3, [r7, #32]
 80126d6:	e014      	b.n	8012702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80126de:	681a      	ldr	r2, [r3, #0]
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	3301      	adds	r3, #1
 80126e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80126ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ec:	3301      	adds	r3, #1
 80126ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80126f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f2:	3301      	adds	r3, #1
 80126f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80126f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f8:	3301      	adds	r3, #1
 80126fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80126fc:	6a3b      	ldr	r3, [r7, #32]
 80126fe:	3301      	adds	r3, #1
 8012700:	623b      	str	r3, [r7, #32]
 8012702:	6a3a      	ldr	r2, [r7, #32]
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	429a      	cmp	r2, r3
 8012708:	d3e6      	bcc.n	80126d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801270a:	8bfb      	ldrh	r3, [r7, #30]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d01e      	beq.n	801274e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012710:	2300      	movs	r3, #0
 8012712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801271a:	461a      	mov	r2, r3
 801271c:	f107 0310 	add.w	r3, r7, #16
 8012720:	6812      	ldr	r2, [r2, #0]
 8012722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012724:	693a      	ldr	r2, [r7, #16]
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	b2db      	uxtb	r3, r3
 801272a:	00db      	lsls	r3, r3, #3
 801272c:	fa22 f303 	lsr.w	r3, r2, r3
 8012730:	b2da      	uxtb	r2, r3
 8012732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012734:	701a      	strb	r2, [r3, #0]
      i++;
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	3301      	adds	r3, #1
 801273a:	623b      	str	r3, [r7, #32]
      pDest++;
 801273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273e:	3301      	adds	r3, #1
 8012740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012742:	8bfb      	ldrh	r3, [r7, #30]
 8012744:	3b01      	subs	r3, #1
 8012746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012748:	8bfb      	ldrh	r3, [r7, #30]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1ea      	bne.n	8012724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012750:	4618      	mov	r0, r3
 8012752:	372c      	adds	r7, #44	; 0x2c
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr

0801275c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801275c:	b480      	push	{r7}
 801275e:	b085      	sub	sp, #20
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	785b      	ldrb	r3, [r3, #1]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d12c      	bne.n	80127d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	015a      	lsls	r2, r3, #5
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	4413      	add	r3, r2
 8012780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	db12      	blt.n	80127b0 <USB_EPSetStall+0x54>
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d00f      	beq.n	80127b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	4413      	add	r3, r2
 8012798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	68ba      	ldr	r2, [r7, #8]
 80127a0:	0151      	lsls	r1, r2, #5
 80127a2:	68fa      	ldr	r2, [r7, #12]
 80127a4:	440a      	add	r2, r1
 80127a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80127ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	015a      	lsls	r2, r3, #5
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	4413      	add	r3, r2
 80127b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	68ba      	ldr	r2, [r7, #8]
 80127c0:	0151      	lsls	r1, r2, #5
 80127c2:	68fa      	ldr	r2, [r7, #12]
 80127c4:	440a      	add	r2, r1
 80127c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80127ce:	6013      	str	r3, [r2, #0]
 80127d0:	e02b      	b.n	801282a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	015a      	lsls	r2, r3, #5
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	4413      	add	r3, r2
 80127da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	db12      	blt.n	801280a <USB_EPSetStall+0xae>
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00f      	beq.n	801280a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	015a      	lsls	r2, r3, #5
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	4413      	add	r3, r2
 80127f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	68ba      	ldr	r2, [r7, #8]
 80127fa:	0151      	lsls	r1, r2, #5
 80127fc:	68fa      	ldr	r2, [r7, #12]
 80127fe:	440a      	add	r2, r1
 8012800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	015a      	lsls	r2, r3, #5
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	4413      	add	r3, r2
 8012812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	68ba      	ldr	r2, [r7, #8]
 801281a:	0151      	lsls	r1, r2, #5
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	440a      	add	r2, r1
 8012820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	3714      	adds	r7, #20
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012838:	b480      	push	{r7}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	785b      	ldrb	r3, [r3, #1]
 8012850:	2b01      	cmp	r3, #1
 8012852:	d128      	bne.n	80128a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	015a      	lsls	r2, r3, #5
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	4413      	add	r3, r2
 801285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	0151      	lsls	r1, r2, #5
 8012866:	68fa      	ldr	r2, [r7, #12]
 8012868:	440a      	add	r2, r1
 801286a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801286e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	791b      	ldrb	r3, [r3, #4]
 8012878:	2b03      	cmp	r3, #3
 801287a:	d003      	beq.n	8012884 <USB_EPClearStall+0x4c>
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	791b      	ldrb	r3, [r3, #4]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d138      	bne.n	80128f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	015a      	lsls	r2, r3, #5
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	4413      	add	r3, r2
 801288c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	0151      	lsls	r1, r2, #5
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	440a      	add	r2, r1
 801289a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128a2:	6013      	str	r3, [r2, #0]
 80128a4:	e027      	b.n	80128f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	015a      	lsls	r2, r3, #5
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	4413      	add	r3, r2
 80128ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	68ba      	ldr	r2, [r7, #8]
 80128b6:	0151      	lsls	r1, r2, #5
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	440a      	add	r2, r1
 80128bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80128c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	791b      	ldrb	r3, [r3, #4]
 80128ca:	2b03      	cmp	r3, #3
 80128cc:	d003      	beq.n	80128d6 <USB_EPClearStall+0x9e>
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	791b      	ldrb	r3, [r3, #4]
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	d10f      	bne.n	80128f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	015a      	lsls	r2, r3, #5
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	4413      	add	r3, r2
 80128de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	0151      	lsls	r1, r2, #5
 80128e8:	68fa      	ldr	r2, [r7, #12]
 80128ea:	440a      	add	r2, r1
 80128ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3714      	adds	r7, #20
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr

08012904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	68fa      	ldr	r2, [r7, #12]
 801291e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801292e:	681a      	ldr	r2, [r3, #0]
 8012930:	78fb      	ldrb	r3, [r7, #3]
 8012932:	011b      	lsls	r3, r3, #4
 8012934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012938:	68f9      	ldr	r1, [r7, #12]
 801293a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801293e:	4313      	orrs	r3, r2
 8012940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3714      	adds	r7, #20
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012950:	b480      	push	{r7}
 8012952:	b085      	sub	sp, #20
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	68fa      	ldr	r2, [r7, #12]
 8012966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801296a:	f023 0303 	bic.w	r3, r3, #3
 801296e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801297e:	f023 0302 	bic.w	r3, r3, #2
 8012982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3714      	adds	r7, #20
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012992:	b480      	push	{r7}
 8012994:	b085      	sub	sp, #20
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	68fa      	ldr	r2, [r7, #12]
 80129a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80129ac:	f023 0303 	bic.w	r3, r3, #3
 80129b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80129c0:	f043 0302 	orr.w	r3, r3, #2
 80129c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3714      	adds	r7, #20
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	4770      	bx	lr

080129d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b085      	sub	sp, #20
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	695b      	ldr	r3, [r3, #20]
 80129e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	699b      	ldr	r3, [r3, #24]
 80129e6:	68fa      	ldr	r2, [r7, #12]
 80129e8:	4013      	ands	r3, r2
 80129ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80129ec:	68fb      	ldr	r3, [r7, #12]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3714      	adds	r7, #20
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80129fa:	b480      	push	{r7}
 80129fc:	b085      	sub	sp, #20
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a0c:	699b      	ldr	r3, [r3, #24]
 8012a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a16:	69db      	ldr	r3, [r3, #28]
 8012a18:	68ba      	ldr	r2, [r7, #8]
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	0c1b      	lsrs	r3, r3, #16
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012a2e:	b480      	push	{r7}
 8012a30:	b085      	sub	sp, #20
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a40:	699b      	ldr	r3, [r3, #24]
 8012a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a4a:	69db      	ldr	r3, [r3, #28]
 8012a4c:	68ba      	ldr	r2, [r7, #8]
 8012a4e:	4013      	ands	r3, r2
 8012a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	b29b      	uxth	r3, r3
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3714      	adds	r7, #20
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr

08012a62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012a62:	b480      	push	{r7}
 8012a64:	b085      	sub	sp, #20
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012a72:	78fb      	ldrb	r3, [r7, #3]
 8012a74:	015a      	lsls	r2, r3, #5
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	4413      	add	r3, r2
 8012a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a88:	695b      	ldr	r3, [r3, #20]
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	4013      	ands	r3, r2
 8012a8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012a90:	68bb      	ldr	r3, [r7, #8]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3714      	adds	r7, #20
 8012a96:	46bd      	mov	sp, r7
 8012a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9c:	4770      	bx	lr

08012a9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012a9e:	b480      	push	{r7}
 8012aa0:	b087      	sub	sp, #28
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ab4:	691b      	ldr	r3, [r3, #16]
 8012ab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012ac2:	78fb      	ldrb	r3, [r7, #3]
 8012ac4:	f003 030f 	and.w	r3, r3, #15
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	fa22 f303 	lsr.w	r3, r2, r3
 8012ace:	01db      	lsls	r3, r3, #7
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	693a      	ldr	r2, [r7, #16]
 8012ad4:	4313      	orrs	r3, r2
 8012ad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012ad8:	78fb      	ldrb	r3, [r7, #3]
 8012ada:	015a      	lsls	r2, r3, #5
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	4413      	add	r3, r2
 8012ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	693a      	ldr	r2, [r7, #16]
 8012ae8:	4013      	ands	r3, r2
 8012aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012aec:	68bb      	ldr	r3, [r7, #8]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	371c      	adds	r7, #28
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8012afa:	b480      	push	{r7}
 8012afc:	b083      	sub	sp, #12
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	695b      	ldr	r3, [r3, #20]
 8012b06:	f003 0301 	and.w	r3, r3, #1
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	370c      	adds	r7, #12
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr
	...

08012b18 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b32:	4619      	mov	r1, r3
 8012b34:	4b09      	ldr	r3, [pc, #36]	; (8012b5c <USB_ActivateSetup+0x44>)
 8012b36:	4013      	ands	r3, r2
 8012b38:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	68fa      	ldr	r2, [r7, #12]
 8012b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012b4e:	2300      	movs	r3, #0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3714      	adds	r7, #20
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr
 8012b5c:	fffff800 	.word	0xfffff800

08012b60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	460b      	mov	r3, r1
 8012b6a:	607a      	str	r2, [r7, #4]
 8012b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	333c      	adds	r3, #60	; 0x3c
 8012b76:	3304      	adds	r3, #4
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	4a26      	ldr	r2, [pc, #152]	; (8012c18 <USB_EP0_OutStart+0xb8>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d90a      	bls.n	8012b9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b94:	d101      	bne.n	8012b9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8012b96:	2300      	movs	r3, #0
 8012b98:	e037      	b.n	8012c0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bac:	691b      	ldr	r3, [r3, #16]
 8012bae:	697a      	ldr	r2, [r7, #20]
 8012bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc0:	691b      	ldr	r3, [r3, #16]
 8012bc2:	697a      	ldr	r2, [r7, #20]
 8012bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bc8:	f043 0318 	orr.w	r3, r3, #24
 8012bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bd4:	691b      	ldr	r3, [r3, #16]
 8012bd6:	697a      	ldr	r2, [r7, #20]
 8012bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012be0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012be2:	7afb      	ldrb	r3, [r7, #11]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d10f      	bne.n	8012c08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bee:	461a      	mov	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	697a      	ldr	r2, [r7, #20]
 8012bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012c06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	371c      	adds	r7, #28
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr
 8012c16:	bf00      	nop
 8012c18:	4f54300a 	.word	0x4f54300a

08012c1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012c24:	2300      	movs	r3, #0
 8012c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	4a13      	ldr	r2, [pc, #76]	; (8012c80 <USB_CoreReset+0x64>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d901      	bls.n	8012c3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012c36:	2303      	movs	r3, #3
 8012c38:	e01b      	b.n	8012c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	691b      	ldr	r3, [r3, #16]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	daf2      	bge.n	8012c28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012c42:	2300      	movs	r3, #0
 8012c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	691b      	ldr	r3, [r3, #16]
 8012c4a:	f043 0201 	orr.w	r2, r3, #1
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	3301      	adds	r3, #1
 8012c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	4a09      	ldr	r2, [pc, #36]	; (8012c80 <USB_CoreReset+0x64>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d901      	bls.n	8012c64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012c60:	2303      	movs	r3, #3
 8012c62:	e006      	b.n	8012c72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	691b      	ldr	r3, [r3, #16]
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d0f0      	beq.n	8012c52 <USB_CoreReset+0x36>

  return HAL_OK;
 8012c70:	2300      	movs	r3, #0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3714      	adds	r7, #20
 8012c76:	46bd      	mov	sp, r7
 8012c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop
 8012c80:	00030d40 	.word	0x00030d40

08012c84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012c88:	4904      	ldr	r1, [pc, #16]	; (8012c9c <MX_FATFS_Init+0x18>)
 8012c8a:	4805      	ldr	r0, [pc, #20]	; (8012ca0 <MX_FATFS_Init+0x1c>)
 8012c8c:	f002 fa16 	bl	80150bc <FATFS_LinkDriver>
 8012c90:	4603      	mov	r3, r0
 8012c92:	461a      	mov	r2, r3
 8012c94:	4b03      	ldr	r3, [pc, #12]	; (8012ca4 <MX_FATFS_Init+0x20>)
 8012c96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012c98:	bf00      	nop
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	240015dc 	.word	0x240015dc
 8012ca0:	0801a36c 	.word	0x0801a36c
 8012ca4:	240015d8 	.word	0x240015d8

08012ca8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012cb2:	f000 f885 	bl	8012dc0 <BSP_SD_IsDetected>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d001      	beq.n	8012cc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	e012      	b.n	8012ce6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8012cc0:	480b      	ldr	r0, [pc, #44]	; (8012cf0 <BSP_SD_Init+0x48>)
 8012cc2:	f7f9 fcb7 	bl	800c634 <HAL_SD_Init>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012cca:	79fb      	ldrb	r3, [r7, #7]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d109      	bne.n	8012ce4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012cd4:	4806      	ldr	r0, [pc, #24]	; (8012cf0 <BSP_SD_Init+0x48>)
 8012cd6:	f7fa fb6d 	bl	800d3b4 <HAL_SD_ConfigWideBusOperation>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d001      	beq.n	8012ce4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	24000e94 	.word	0x24000e94

08012cf4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b086      	sub	sp, #24
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012d00:	2300      	movs	r3, #0
 8012d02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	68ba      	ldr	r2, [r7, #8]
 8012d08:	68f9      	ldr	r1, [r7, #12]
 8012d0a:	4806      	ldr	r0, [pc, #24]	; (8012d24 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012d0c:	f7f9 fdb2 	bl	800c874 <HAL_SD_ReadBlocks_DMA>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d001      	beq.n	8012d1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012d16:	2301      	movs	r3, #1
 8012d18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3718      	adds	r7, #24
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	24000e94 	.word	0x24000e94

08012d28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	60f8      	str	r0, [r7, #12]
 8012d30:	60b9      	str	r1, [r7, #8]
 8012d32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	68f9      	ldr	r1, [r7, #12]
 8012d3e:	4806      	ldr	r0, [pc, #24]	; (8012d58 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012d40:	f7f9 fe40 	bl	800c9c4 <HAL_SD_WriteBlocks_DMA>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d001      	beq.n	8012d4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	24000e94 	.word	0x24000e94

08012d5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012d60:	4805      	ldr	r0, [pc, #20]	; (8012d78 <BSP_SD_GetCardState+0x1c>)
 8012d62:	f7fa fc39 	bl	800d5d8 <HAL_SD_GetCardState>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b04      	cmp	r3, #4
 8012d6a:	bf14      	ite	ne
 8012d6c:	2301      	movne	r3, #1
 8012d6e:	2300      	moveq	r3, #0
 8012d70:	b2db      	uxtb	r3, r3
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	24000e94 	.word	0x24000e94

08012d7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8012d84:	6879      	ldr	r1, [r7, #4]
 8012d86:	4803      	ldr	r0, [pc, #12]	; (8012d94 <BSP_SD_GetCardInfo+0x18>)
 8012d88:	f7fa fae8 	bl	800d35c <HAL_SD_GetCardInfo>
}
 8012d8c:	bf00      	nop
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	24000e94 	.word	0x24000e94

08012d98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012da0:	f000 f9a0 	bl	80130e4 <BSP_SD_WriteCpltCallback>
}
 8012da4:	bf00      	nop
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012db4:	f000 f9a2 	bl	80130fc <BSP_SD_ReadCpltCallback>
}
 8012db8:	bf00      	nop
 8012dba:	3708      	adds	r7, #8
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012dca:	f000 f80b 	bl	8012de4 <BSP_PlatformIsDetected>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012dd8:	79fb      	ldrb	r3, [r7, #7]
 8012dda:	b2db      	uxtb	r3, r3
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012dea:	2301      	movs	r3, #1
 8012dec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012dee:	2104      	movs	r1, #4
 8012df0:	4806      	ldr	r0, [pc, #24]	; (8012e0c <BSP_PlatformIsDetected+0x28>)
 8012df2:	f7f4 fbf3 	bl	80075dc <HAL_GPIO_ReadPin>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012e00:	79fb      	ldrb	r3, [r7, #7]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3708      	adds	r7, #8
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	58020400 	.word	0x58020400

08012e10 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012e18:	f7f0 f938 	bl	800308c <HAL_GetTick>
 8012e1c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012e1e:	e006      	b.n	8012e2e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012e20:	f7ff ff9c 	bl	8012d5c <BSP_SD_GetCardState>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d101      	bne.n	8012e2e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	e009      	b.n	8012e42 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012e2e:	f7f0 f92d 	bl	800308c <HAL_GetTick>
 8012e32:	4602      	mov	r2, r0
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	1ad3      	subs	r3, r2, r3
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d8f0      	bhi.n	8012e20 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e42:	4618      	mov	r0, r3
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
	...

08012e4c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	4603      	mov	r3, r0
 8012e54:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012e56:	4b0b      	ldr	r3, [pc, #44]	; (8012e84 <SD_CheckStatus+0x38>)
 8012e58:	2201      	movs	r2, #1
 8012e5a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012e5c:	f7ff ff7e 	bl	8012d5c <BSP_SD_GetCardState>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d107      	bne.n	8012e76 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012e66:	4b07      	ldr	r3, [pc, #28]	; (8012e84 <SD_CheckStatus+0x38>)
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	f023 0301 	bic.w	r3, r3, #1
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	4b04      	ldr	r3, [pc, #16]	; (8012e84 <SD_CheckStatus+0x38>)
 8012e74:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012e76:	4b03      	ldr	r3, [pc, #12]	; (8012e84 <SD_CheckStatus+0x38>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	b2db      	uxtb	r3, r3
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3708      	adds	r7, #8
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	2400000d 	.word	0x2400000d

08012e88 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012e92:	f7ff ff09 	bl	8012ca8 <BSP_SD_Init>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d107      	bne.n	8012eac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012e9c:	79fb      	ldrb	r3, [r7, #7]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7ff ffd4 	bl	8012e4c <SD_CheckStatus>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	4b04      	ldr	r3, [pc, #16]	; (8012ebc <SD_initialize+0x34>)
 8012eaa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012eac:	4b03      	ldr	r3, [pc, #12]	; (8012ebc <SD_initialize+0x34>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	b2db      	uxtb	r3, r3
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	2400000d 	.word	0x2400000d

08012ec0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012eca:	79fb      	ldrb	r3, [r7, #7]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7ff ffbd 	bl	8012e4c <SD_CheckStatus>
 8012ed2:	4603      	mov	r3, r0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b086      	sub	sp, #24
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60b9      	str	r1, [r7, #8]
 8012ee4:	607a      	str	r2, [r7, #4]
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012eec:	2301      	movs	r3, #1
 8012eee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012ef0:	f247 5030 	movw	r0, #30000	; 0x7530
 8012ef4:	f7ff ff8c 	bl	8012e10 <SD_CheckStatusWithTimeout>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	da01      	bge.n	8012f02 <SD_read+0x26>
  {
    return res;
 8012efe:	7dfb      	ldrb	r3, [r7, #23]
 8012f00:	e03b      	b.n	8012f7a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012f02:	683a      	ldr	r2, [r7, #0]
 8012f04:	6879      	ldr	r1, [r7, #4]
 8012f06:	68b8      	ldr	r0, [r7, #8]
 8012f08:	f7ff fef4 	bl	8012cf4 <BSP_SD_ReadBlocks_DMA>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d132      	bne.n	8012f78 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012f12:	4b1c      	ldr	r3, [pc, #112]	; (8012f84 <SD_read+0xa8>)
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012f18:	f7f0 f8b8 	bl	800308c <HAL_GetTick>
 8012f1c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012f1e:	bf00      	nop
 8012f20:	4b18      	ldr	r3, [pc, #96]	; (8012f84 <SD_read+0xa8>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d108      	bne.n	8012f3a <SD_read+0x5e>
 8012f28:	f7f0 f8b0 	bl	800308c <HAL_GetTick>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	f247 522f 	movw	r2, #29999	; 0x752f
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d9f2      	bls.n	8012f20 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012f3a:	4b12      	ldr	r3, [pc, #72]	; (8012f84 <SD_read+0xa8>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d102      	bne.n	8012f48 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012f42:	2301      	movs	r3, #1
 8012f44:	75fb      	strb	r3, [r7, #23]
 8012f46:	e017      	b.n	8012f78 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012f48:	4b0e      	ldr	r3, [pc, #56]	; (8012f84 <SD_read+0xa8>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012f4e:	f7f0 f89d 	bl	800308c <HAL_GetTick>
 8012f52:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012f54:	e007      	b.n	8012f66 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012f56:	f7ff ff01 	bl	8012d5c <BSP_SD_GetCardState>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d102      	bne.n	8012f66 <SD_read+0x8a>
          {
            res = RES_OK;
 8012f60:	2300      	movs	r3, #0
 8012f62:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012f64:	e008      	b.n	8012f78 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012f66:	f7f0 f891 	bl	800308c <HAL_GetTick>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	f247 522f 	movw	r2, #29999	; 0x752f
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d9ee      	bls.n	8012f56 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3718      	adds	r7, #24
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
 8012f82:	bf00      	nop
 8012f84:	240015e4 	.word	0x240015e4

08012f88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b086      	sub	sp, #24
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	60b9      	str	r1, [r7, #8]
 8012f90:	607a      	str	r2, [r7, #4]
 8012f92:	603b      	str	r3, [r7, #0]
 8012f94:	4603      	mov	r3, r0
 8012f96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012f9c:	4b24      	ldr	r3, [pc, #144]	; (8013030 <SD_write+0xa8>)
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012fa2:	f247 5030 	movw	r0, #30000	; 0x7530
 8012fa6:	f7ff ff33 	bl	8012e10 <SD_CheckStatusWithTimeout>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	da01      	bge.n	8012fb4 <SD_write+0x2c>
  {
    return res;
 8012fb0:	7dfb      	ldrb	r3, [r7, #23]
 8012fb2:	e038      	b.n	8013026 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	6879      	ldr	r1, [r7, #4]
 8012fb8:	68b8      	ldr	r0, [r7, #8]
 8012fba:	f7ff feb5 	bl	8012d28 <BSP_SD_WriteBlocks_DMA>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d12f      	bne.n	8013024 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012fc4:	f7f0 f862 	bl	800308c <HAL_GetTick>
 8012fc8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012fca:	bf00      	nop
 8012fcc:	4b18      	ldr	r3, [pc, #96]	; (8013030 <SD_write+0xa8>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d108      	bne.n	8012fe6 <SD_write+0x5e>
 8012fd4:	f7f0 f85a 	bl	800308c <HAL_GetTick>
 8012fd8:	4602      	mov	r2, r0
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	1ad3      	subs	r3, r2, r3
 8012fde:	f247 522f 	movw	r2, #29999	; 0x752f
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d9f2      	bls.n	8012fcc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012fe6:	4b12      	ldr	r3, [pc, #72]	; (8013030 <SD_write+0xa8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d102      	bne.n	8012ff4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012fee:	2301      	movs	r3, #1
 8012ff0:	75fb      	strb	r3, [r7, #23]
 8012ff2:	e017      	b.n	8013024 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012ff4:	4b0e      	ldr	r3, [pc, #56]	; (8013030 <SD_write+0xa8>)
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012ffa:	f7f0 f847 	bl	800308c <HAL_GetTick>
 8012ffe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013000:	e007      	b.n	8013012 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013002:	f7ff feab 	bl	8012d5c <BSP_SD_GetCardState>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d102      	bne.n	8013012 <SD_write+0x8a>
          {
            res = RES_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	75fb      	strb	r3, [r7, #23]
            break;
 8013010:	e008      	b.n	8013024 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013012:	f7f0 f83b 	bl	800308c <HAL_GetTick>
 8013016:	4602      	mov	r2, r0
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013020:	4293      	cmp	r3, r2
 8013022:	d9ee      	bls.n	8013002 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013024:	7dfb      	ldrb	r3, [r7, #23]
}
 8013026:	4618      	mov	r0, r3
 8013028:	3718      	adds	r7, #24
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	240015e0 	.word	0x240015e0

08013034 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b08c      	sub	sp, #48	; 0x30
 8013038:	af00      	add	r7, sp, #0
 801303a:	4603      	mov	r3, r0
 801303c:	603a      	str	r2, [r7, #0]
 801303e:	71fb      	strb	r3, [r7, #7]
 8013040:	460b      	mov	r3, r1
 8013042:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013044:	2301      	movs	r3, #1
 8013046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801304a:	4b25      	ldr	r3, [pc, #148]	; (80130e0 <SD_ioctl+0xac>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	b2db      	uxtb	r3, r3
 8013050:	f003 0301 	and.w	r3, r3, #1
 8013054:	2b00      	cmp	r3, #0
 8013056:	d001      	beq.n	801305c <SD_ioctl+0x28>
 8013058:	2303      	movs	r3, #3
 801305a:	e03c      	b.n	80130d6 <SD_ioctl+0xa2>

  switch (cmd)
 801305c:	79bb      	ldrb	r3, [r7, #6]
 801305e:	2b03      	cmp	r3, #3
 8013060:	d834      	bhi.n	80130cc <SD_ioctl+0x98>
 8013062:	a201      	add	r2, pc, #4	; (adr r2, 8013068 <SD_ioctl+0x34>)
 8013064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013068:	08013079 	.word	0x08013079
 801306c:	08013081 	.word	0x08013081
 8013070:	08013099 	.word	0x08013099
 8013074:	080130b3 	.word	0x080130b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013078:	2300      	movs	r3, #0
 801307a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801307e:	e028      	b.n	80130d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013080:	f107 0308 	add.w	r3, r7, #8
 8013084:	4618      	mov	r0, r3
 8013086:	f7ff fe79 	bl	8012d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801308a:	6a3a      	ldr	r2, [r7, #32]
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013090:	2300      	movs	r3, #0
 8013092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013096:	e01c      	b.n	80130d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013098:	f107 0308 	add.w	r3, r7, #8
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff fe6d 	bl	8012d7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	683b      	ldr	r3, [r7, #0]
 80130a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80130b0:	e00f      	b.n	80130d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80130b2:	f107 0308 	add.w	r3, r7, #8
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7ff fe60 	bl	8012d7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	0a5a      	lsrs	r2, r3, #9
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80130c4:	2300      	movs	r3, #0
 80130c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80130ca:	e002      	b.n	80130d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80130cc:	2304      	movs	r3, #4
 80130ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80130d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3730      	adds	r7, #48	; 0x30
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	2400000d 	.word	0x2400000d

080130e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80130e4:	b480      	push	{r7}
 80130e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80130e8:	4b03      	ldr	r3, [pc, #12]	; (80130f8 <BSP_SD_WriteCpltCallback+0x14>)
 80130ea:	2201      	movs	r2, #1
 80130ec:	601a      	str	r2, [r3, #0]
}
 80130ee:	bf00      	nop
 80130f0:	46bd      	mov	sp, r7
 80130f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f6:	4770      	bx	lr
 80130f8:	240015e0 	.word	0x240015e0

080130fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80130fc:	b480      	push	{r7}
 80130fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013100:	4b03      	ldr	r3, [pc, #12]	; (8013110 <BSP_SD_ReadCpltCallback+0x14>)
 8013102:	2201      	movs	r2, #1
 8013104:	601a      	str	r2, [r3, #0]
}
 8013106:	bf00      	nop
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr
 8013110:	240015e4 	.word	0x240015e4

08013114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	460b      	mov	r3, r1
 801311e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013120:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013124:	f002 fc84 	bl	8015a30 <USBD_static_malloc>
 8013128:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d109      	bne.n	8013144 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	32b0      	adds	r2, #176	; 0xb0
 801313a:	2100      	movs	r1, #0
 801313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013140:	2302      	movs	r3, #2
 8013142:	e0d4      	b.n	80132ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013144:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013148:	2100      	movs	r1, #0
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f002 fcec 	bl	8015b28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	32b0      	adds	r2, #176	; 0xb0
 801315a:	68f9      	ldr	r1, [r7, #12]
 801315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	32b0      	adds	r2, #176	; 0xb0
 801316a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	7c1b      	ldrb	r3, [r3, #16]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d138      	bne.n	80131ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801317c:	4b5e      	ldr	r3, [pc, #376]	; (80132f8 <USBD_CDC_Init+0x1e4>)
 801317e:	7819      	ldrb	r1, [r3, #0]
 8013180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013184:	2202      	movs	r2, #2
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f002 fb2f 	bl	80157ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801318c:	4b5a      	ldr	r3, [pc, #360]	; (80132f8 <USBD_CDC_Init+0x1e4>)
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	f003 020f 	and.w	r2, r3, #15
 8013194:	6879      	ldr	r1, [r7, #4]
 8013196:	4613      	mov	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	4413      	add	r3, r2
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	440b      	add	r3, r1
 80131a0:	3324      	adds	r3, #36	; 0x24
 80131a2:	2201      	movs	r2, #1
 80131a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80131a6:	4b55      	ldr	r3, [pc, #340]	; (80132fc <USBD_CDC_Init+0x1e8>)
 80131a8:	7819      	ldrb	r1, [r3, #0]
 80131aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131ae:	2202      	movs	r2, #2
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f002 fb1a 	bl	80157ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80131b6:	4b51      	ldr	r3, [pc, #324]	; (80132fc <USBD_CDC_Init+0x1e8>)
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	f003 020f 	and.w	r2, r3, #15
 80131be:	6879      	ldr	r1, [r7, #4]
 80131c0:	4613      	mov	r3, r2
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	4413      	add	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	440b      	add	r3, r1
 80131ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80131ce:	2201      	movs	r2, #1
 80131d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80131d2:	4b4b      	ldr	r3, [pc, #300]	; (8013300 <USBD_CDC_Init+0x1ec>)
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	f003 020f 	and.w	r2, r3, #15
 80131da:	6879      	ldr	r1, [r7, #4]
 80131dc:	4613      	mov	r3, r2
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	4413      	add	r3, r2
 80131e2:	009b      	lsls	r3, r3, #2
 80131e4:	440b      	add	r3, r1
 80131e6:	3326      	adds	r3, #38	; 0x26
 80131e8:	2210      	movs	r2, #16
 80131ea:	801a      	strh	r2, [r3, #0]
 80131ec:	e035      	b.n	801325a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80131ee:	4b42      	ldr	r3, [pc, #264]	; (80132f8 <USBD_CDC_Init+0x1e4>)
 80131f0:	7819      	ldrb	r1, [r3, #0]
 80131f2:	2340      	movs	r3, #64	; 0x40
 80131f4:	2202      	movs	r2, #2
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f002 faf7 	bl	80157ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80131fc:	4b3e      	ldr	r3, [pc, #248]	; (80132f8 <USBD_CDC_Init+0x1e4>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	f003 020f 	and.w	r2, r3, #15
 8013204:	6879      	ldr	r1, [r7, #4]
 8013206:	4613      	mov	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	4413      	add	r3, r2
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	440b      	add	r3, r1
 8013210:	3324      	adds	r3, #36	; 0x24
 8013212:	2201      	movs	r2, #1
 8013214:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013216:	4b39      	ldr	r3, [pc, #228]	; (80132fc <USBD_CDC_Init+0x1e8>)
 8013218:	7819      	ldrb	r1, [r3, #0]
 801321a:	2340      	movs	r3, #64	; 0x40
 801321c:	2202      	movs	r2, #2
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f002 fae3 	bl	80157ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013224:	4b35      	ldr	r3, [pc, #212]	; (80132fc <USBD_CDC_Init+0x1e8>)
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	f003 020f 	and.w	r2, r3, #15
 801322c:	6879      	ldr	r1, [r7, #4]
 801322e:	4613      	mov	r3, r2
 8013230:	009b      	lsls	r3, r3, #2
 8013232:	4413      	add	r3, r2
 8013234:	009b      	lsls	r3, r3, #2
 8013236:	440b      	add	r3, r1
 8013238:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801323c:	2201      	movs	r2, #1
 801323e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013240:	4b2f      	ldr	r3, [pc, #188]	; (8013300 <USBD_CDC_Init+0x1ec>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 020f 	and.w	r2, r3, #15
 8013248:	6879      	ldr	r1, [r7, #4]
 801324a:	4613      	mov	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4413      	add	r3, r2
 8013250:	009b      	lsls	r3, r3, #2
 8013252:	440b      	add	r3, r1
 8013254:	3326      	adds	r3, #38	; 0x26
 8013256:	2210      	movs	r2, #16
 8013258:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801325a:	4b29      	ldr	r3, [pc, #164]	; (8013300 <USBD_CDC_Init+0x1ec>)
 801325c:	7819      	ldrb	r1, [r3, #0]
 801325e:	2308      	movs	r3, #8
 8013260:	2203      	movs	r2, #3
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f002 fac1 	bl	80157ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013268:	4b25      	ldr	r3, [pc, #148]	; (8013300 <USBD_CDC_Init+0x1ec>)
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	f003 020f 	and.w	r2, r3, #15
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	4613      	mov	r3, r2
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	4413      	add	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	440b      	add	r3, r1
 801327c:	3324      	adds	r3, #36	; 0x24
 801327e:	2201      	movs	r2, #1
 8013280:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2200      	movs	r2, #0
 8013286:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	33b0      	adds	r3, #176	; 0xb0
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	4413      	add	r3, r2
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	2200      	movs	r2, #0
 80132a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2200      	movs	r2, #0
 80132aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80132b8:	2302      	movs	r3, #2
 80132ba:	e018      	b.n	80132ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7c1b      	ldrb	r3, [r3, #16]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d10a      	bne.n	80132da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80132c4:	4b0d      	ldr	r3, [pc, #52]	; (80132fc <USBD_CDC_Init+0x1e8>)
 80132c6:	7819      	ldrb	r1, [r3, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f002 fb78 	bl	80159c8 <USBD_LL_PrepareReceive>
 80132d8:	e008      	b.n	80132ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80132da:	4b08      	ldr	r3, [pc, #32]	; (80132fc <USBD_CDC_Init+0x1e8>)
 80132dc:	7819      	ldrb	r1, [r3, #0]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80132e4:	2340      	movs	r3, #64	; 0x40
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f002 fb6e 	bl	80159c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3710      	adds	r7, #16
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	24000097 	.word	0x24000097
 80132fc:	24000098 	.word	0x24000098
 8013300:	24000099 	.word	0x24000099

08013304 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	460b      	mov	r3, r1
 801330e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013310:	4b3a      	ldr	r3, [pc, #232]	; (80133fc <USBD_CDC_DeInit+0xf8>)
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	4619      	mov	r1, r3
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f002 fa8d 	bl	8015836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801331c:	4b37      	ldr	r3, [pc, #220]	; (80133fc <USBD_CDC_DeInit+0xf8>)
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 020f 	and.w	r2, r3, #15
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	440b      	add	r3, r1
 8013330:	3324      	adds	r3, #36	; 0x24
 8013332:	2200      	movs	r2, #0
 8013334:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013336:	4b32      	ldr	r3, [pc, #200]	; (8013400 <USBD_CDC_DeInit+0xfc>)
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	4619      	mov	r1, r3
 801333c:	6878      	ldr	r0, [r7, #4]
 801333e:	f002 fa7a 	bl	8015836 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013342:	4b2f      	ldr	r3, [pc, #188]	; (8013400 <USBD_CDC_DeInit+0xfc>)
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	f003 020f 	and.w	r2, r3, #15
 801334a:	6879      	ldr	r1, [r7, #4]
 801334c:	4613      	mov	r3, r2
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	4413      	add	r3, r2
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	440b      	add	r3, r1
 8013356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801335a:	2200      	movs	r2, #0
 801335c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801335e:	4b29      	ldr	r3, [pc, #164]	; (8013404 <USBD_CDC_DeInit+0x100>)
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	4619      	mov	r1, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f002 fa66 	bl	8015836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801336a:	4b26      	ldr	r3, [pc, #152]	; (8013404 <USBD_CDC_DeInit+0x100>)
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	f003 020f 	and.w	r2, r3, #15
 8013372:	6879      	ldr	r1, [r7, #4]
 8013374:	4613      	mov	r3, r2
 8013376:	009b      	lsls	r3, r3, #2
 8013378:	4413      	add	r3, r2
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	440b      	add	r3, r1
 801337e:	3324      	adds	r3, #36	; 0x24
 8013380:	2200      	movs	r2, #0
 8013382:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013384:	4b1f      	ldr	r3, [pc, #124]	; (8013404 <USBD_CDC_DeInit+0x100>)
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 020f 	and.w	r2, r3, #15
 801338c:	6879      	ldr	r1, [r7, #4]
 801338e:	4613      	mov	r3, r2
 8013390:	009b      	lsls	r3, r3, #2
 8013392:	4413      	add	r3, r2
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	440b      	add	r3, r1
 8013398:	3326      	adds	r3, #38	; 0x26
 801339a:	2200      	movs	r2, #0
 801339c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	32b0      	adds	r2, #176	; 0xb0
 80133a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d01f      	beq.n	80133f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	33b0      	adds	r3, #176	; 0xb0
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	4413      	add	r3, r2
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	32b0      	adds	r2, #176	; 0xb0
 80133ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133d2:	4618      	mov	r0, r3
 80133d4:	f002 fb3a 	bl	8015a4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	32b0      	adds	r2, #176	; 0xb0
 80133e2:	2100      	movs	r1, #0
 80133e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80133f0:	2300      	movs	r3, #0
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	24000097 	.word	0x24000097
 8013400:	24000098 	.word	0x24000098
 8013404:	24000099 	.word	0x24000099

08013408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b086      	sub	sp, #24
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	32b0      	adds	r2, #176	; 0xb0
 801341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013420:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013422:	2300      	movs	r3, #0
 8013424:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013426:	2300      	movs	r3, #0
 8013428:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801342a:	2300      	movs	r3, #0
 801342c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d101      	bne.n	8013438 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013434:	2303      	movs	r3, #3
 8013436:	e0bf      	b.n	80135b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013440:	2b00      	cmp	r3, #0
 8013442:	d050      	beq.n	80134e6 <USBD_CDC_Setup+0xde>
 8013444:	2b20      	cmp	r3, #32
 8013446:	f040 80af 	bne.w	80135a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	88db      	ldrh	r3, [r3, #6]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d03a      	beq.n	80134c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	b25b      	sxtb	r3, r3
 8013458:	2b00      	cmp	r3, #0
 801345a:	da1b      	bge.n	8013494 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	33b0      	adds	r3, #176	; 0xb0
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	689b      	ldr	r3, [r3, #8]
 801346e:	683a      	ldr	r2, [r7, #0]
 8013470:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013472:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013474:	683a      	ldr	r2, [r7, #0]
 8013476:	88d2      	ldrh	r2, [r2, #6]
 8013478:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	88db      	ldrh	r3, [r3, #6]
 801347e:	2b07      	cmp	r3, #7
 8013480:	bf28      	it	cs
 8013482:	2307      	movcs	r3, #7
 8013484:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	89fa      	ldrh	r2, [r7, #14]
 801348a:	4619      	mov	r1, r3
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f001 fd49 	bl	8014f24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013492:	e090      	b.n	80135b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	785a      	ldrb	r2, [r3, #1]
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	88db      	ldrh	r3, [r3, #6]
 80134a2:	2b3f      	cmp	r3, #63	; 0x3f
 80134a4:	d803      	bhi.n	80134ae <USBD_CDC_Setup+0xa6>
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	88db      	ldrh	r3, [r3, #6]
 80134aa:	b2da      	uxtb	r2, r3
 80134ac:	e000      	b.n	80134b0 <USBD_CDC_Setup+0xa8>
 80134ae:	2240      	movs	r2, #64	; 0x40
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80134b6:	6939      	ldr	r1, [r7, #16]
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80134be:	461a      	mov	r2, r3
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f001 fd5b 	bl	8014f7c <USBD_CtlPrepareRx>
      break;
 80134c6:	e076      	b.n	80135b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	33b0      	adds	r3, #176	; 0xb0
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	4413      	add	r3, r2
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	683a      	ldr	r2, [r7, #0]
 80134dc:	7850      	ldrb	r0, [r2, #1]
 80134de:	2200      	movs	r2, #0
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	4798      	blx	r3
      break;
 80134e4:	e067      	b.n	80135b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	785b      	ldrb	r3, [r3, #1]
 80134ea:	2b0b      	cmp	r3, #11
 80134ec:	d851      	bhi.n	8013592 <USBD_CDC_Setup+0x18a>
 80134ee:	a201      	add	r2, pc, #4	; (adr r2, 80134f4 <USBD_CDC_Setup+0xec>)
 80134f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f4:	08013525 	.word	0x08013525
 80134f8:	080135a1 	.word	0x080135a1
 80134fc:	08013593 	.word	0x08013593
 8013500:	08013593 	.word	0x08013593
 8013504:	08013593 	.word	0x08013593
 8013508:	08013593 	.word	0x08013593
 801350c:	08013593 	.word	0x08013593
 8013510:	08013593 	.word	0x08013593
 8013514:	08013593 	.word	0x08013593
 8013518:	08013593 	.word	0x08013593
 801351c:	0801354f 	.word	0x0801354f
 8013520:	08013579 	.word	0x08013579
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801352a:	b2db      	uxtb	r3, r3
 801352c:	2b03      	cmp	r3, #3
 801352e:	d107      	bne.n	8013540 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013530:	f107 030a 	add.w	r3, r7, #10
 8013534:	2202      	movs	r2, #2
 8013536:	4619      	mov	r1, r3
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f001 fcf3 	bl	8014f24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801353e:	e032      	b.n	80135a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013540:	6839      	ldr	r1, [r7, #0]
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f001 fc7d 	bl	8014e42 <USBD_CtlError>
            ret = USBD_FAIL;
 8013548:	2303      	movs	r3, #3
 801354a:	75fb      	strb	r3, [r7, #23]
          break;
 801354c:	e02b      	b.n	80135a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013554:	b2db      	uxtb	r3, r3
 8013556:	2b03      	cmp	r3, #3
 8013558:	d107      	bne.n	801356a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801355a:	f107 030d 	add.w	r3, r7, #13
 801355e:	2201      	movs	r2, #1
 8013560:	4619      	mov	r1, r3
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f001 fcde 	bl	8014f24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013568:	e01d      	b.n	80135a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801356a:	6839      	ldr	r1, [r7, #0]
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f001 fc68 	bl	8014e42 <USBD_CtlError>
            ret = USBD_FAIL;
 8013572:	2303      	movs	r3, #3
 8013574:	75fb      	strb	r3, [r7, #23]
          break;
 8013576:	e016      	b.n	80135a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801357e:	b2db      	uxtb	r3, r3
 8013580:	2b03      	cmp	r3, #3
 8013582:	d00f      	beq.n	80135a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013584:	6839      	ldr	r1, [r7, #0]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f001 fc5b 	bl	8014e42 <USBD_CtlError>
            ret = USBD_FAIL;
 801358c:	2303      	movs	r3, #3
 801358e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013590:	e008      	b.n	80135a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f001 fc54 	bl	8014e42 <USBD_CtlError>
          ret = USBD_FAIL;
 801359a:	2303      	movs	r3, #3
 801359c:	75fb      	strb	r3, [r7, #23]
          break;
 801359e:	e002      	b.n	80135a6 <USBD_CDC_Setup+0x19e>
          break;
 80135a0:	bf00      	nop
 80135a2:	e008      	b.n	80135b6 <USBD_CDC_Setup+0x1ae>
          break;
 80135a4:	bf00      	nop
      }
      break;
 80135a6:	e006      	b.n	80135b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80135a8:	6839      	ldr	r1, [r7, #0]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f001 fc49 	bl	8014e42 <USBD_CtlError>
      ret = USBD_FAIL;
 80135b0:	2303      	movs	r3, #3
 80135b2:	75fb      	strb	r3, [r7, #23]
      break;
 80135b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80135b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3718      	adds	r7, #24
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80135d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	32b0      	adds	r2, #176	; 0xb0
 80135de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d101      	bne.n	80135ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80135e6:	2303      	movs	r3, #3
 80135e8:	e065      	b.n	80136b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	32b0      	adds	r2, #176	; 0xb0
 80135f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80135fa:	78fb      	ldrb	r3, [r7, #3]
 80135fc:	f003 020f 	and.w	r2, r3, #15
 8013600:	6879      	ldr	r1, [r7, #4]
 8013602:	4613      	mov	r3, r2
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	4413      	add	r3, r2
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	440b      	add	r3, r1
 801360c:	3318      	adds	r3, #24
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d02f      	beq.n	8013674 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013614:	78fb      	ldrb	r3, [r7, #3]
 8013616:	f003 020f 	and.w	r2, r3, #15
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	4613      	mov	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	4413      	add	r3, r2
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	440b      	add	r3, r1
 8013626:	3318      	adds	r3, #24
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	78fb      	ldrb	r3, [r7, #3]
 801362c:	f003 010f 	and.w	r1, r3, #15
 8013630:	68f8      	ldr	r0, [r7, #12]
 8013632:	460b      	mov	r3, r1
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4403      	add	r3, r0
 801363c:	3344      	adds	r3, #68	; 0x44
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	fbb2 f1f3 	udiv	r1, r2, r3
 8013644:	fb01 f303 	mul.w	r3, r1, r3
 8013648:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801364a:	2b00      	cmp	r3, #0
 801364c:	d112      	bne.n	8013674 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801364e:	78fb      	ldrb	r3, [r7, #3]
 8013650:	f003 020f 	and.w	r2, r3, #15
 8013654:	6879      	ldr	r1, [r7, #4]
 8013656:	4613      	mov	r3, r2
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	4413      	add	r3, r2
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	440b      	add	r3, r1
 8013660:	3318      	adds	r3, #24
 8013662:	2200      	movs	r2, #0
 8013664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013666:	78f9      	ldrb	r1, [r7, #3]
 8013668:	2300      	movs	r3, #0
 801366a:	2200      	movs	r2, #0
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f002 f98a 	bl	8015986 <USBD_LL_Transmit>
 8013672:	e01f      	b.n	80136b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	2200      	movs	r2, #0
 8013678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	33b0      	adds	r3, #176	; 0xb0
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	685b      	ldr	r3, [r3, #4]
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d010      	beq.n	80136b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	33b0      	adds	r3, #176	; 0xb0
 801369c:	009b      	lsls	r3, r3, #2
 801369e:	4413      	add	r3, r2
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	691b      	ldr	r3, [r3, #16]
 80136a4:	68ba      	ldr	r2, [r7, #8]
 80136a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80136aa:	68ba      	ldr	r2, [r7, #8]
 80136ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80136b0:	78fa      	ldrb	r2, [r7, #3]
 80136b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80136b4:	2300      	movs	r3, #0
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3710      	adds	r7, #16
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b084      	sub	sp, #16
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	6078      	str	r0, [r7, #4]
 80136c6:	460b      	mov	r3, r1
 80136c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	32b0      	adds	r2, #176	; 0xb0
 80136d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	32b0      	adds	r2, #176	; 0xb0
 80136e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80136ec:	2303      	movs	r3, #3
 80136ee:	e01a      	b.n	8013726 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80136f0:	78fb      	ldrb	r3, [r7, #3]
 80136f2:	4619      	mov	r1, r3
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f002 f988 	bl	8015a0a <USBD_LL_GetRxDataSize>
 80136fa:	4602      	mov	r2, r0
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	33b0      	adds	r3, #176	; 0xb0
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	4413      	add	r3, r2
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	68db      	ldr	r3, [r3, #12]
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013720:	4611      	mov	r1, r2
 8013722:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3710      	adds	r7, #16
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b084      	sub	sp, #16
 8013732:	af00      	add	r7, sp, #0
 8013734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	32b0      	adds	r2, #176	; 0xb0
 8013740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d101      	bne.n	8013750 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801374c:	2303      	movs	r3, #3
 801374e:	e025      	b.n	801379c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	33b0      	adds	r3, #176	; 0xb0
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	4413      	add	r3, r2
 801375e:	685b      	ldr	r3, [r3, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d01a      	beq.n	801379a <USBD_CDC_EP0_RxReady+0x6c>
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801376a:	2bff      	cmp	r3, #255	; 0xff
 801376c:	d015      	beq.n	801379a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	33b0      	adds	r3, #176	; 0xb0
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4413      	add	r3, r2
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	689b      	ldr	r3, [r3, #8]
 8013780:	68fa      	ldr	r2, [r7, #12]
 8013782:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013786:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013788:	68fa      	ldr	r2, [r7, #12]
 801378a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801378e:	b292      	uxth	r2, r2
 8013790:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	22ff      	movs	r2, #255	; 0xff
 8013796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801379a:	2300      	movs	r3, #0
}
 801379c:	4618      	mov	r0, r3
 801379e:	3710      	adds	r7, #16
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b086      	sub	sp, #24
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80137ac:	2182      	movs	r1, #130	; 0x82
 80137ae:	4818      	ldr	r0, [pc, #96]	; (8013810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80137b0:	f000 fd0f 	bl	80141d2 <USBD_GetEpDesc>
 80137b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80137b6:	2101      	movs	r1, #1
 80137b8:	4815      	ldr	r0, [pc, #84]	; (8013810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80137ba:	f000 fd0a 	bl	80141d2 <USBD_GetEpDesc>
 80137be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80137c0:	2181      	movs	r1, #129	; 0x81
 80137c2:	4813      	ldr	r0, [pc, #76]	; (8013810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80137c4:	f000 fd05 	bl	80141d2 <USBD_GetEpDesc>
 80137c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d002      	beq.n	80137d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	2210      	movs	r2, #16
 80137d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d006      	beq.n	80137ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	2200      	movs	r2, #0
 80137e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137e4:	711a      	strb	r2, [r3, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d006      	beq.n	80137fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137f8:	711a      	strb	r2, [r3, #4]
 80137fa:	2200      	movs	r2, #0
 80137fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2243      	movs	r2, #67	; 0x43
 8013802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013804:	4b02      	ldr	r3, [pc, #8]	; (8013810 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013806:	4618      	mov	r0, r3
 8013808:	3718      	adds	r7, #24
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	24000054 	.word	0x24000054

08013814 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b086      	sub	sp, #24
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801381c:	2182      	movs	r1, #130	; 0x82
 801381e:	4818      	ldr	r0, [pc, #96]	; (8013880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013820:	f000 fcd7 	bl	80141d2 <USBD_GetEpDesc>
 8013824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013826:	2101      	movs	r1, #1
 8013828:	4815      	ldr	r0, [pc, #84]	; (8013880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801382a:	f000 fcd2 	bl	80141d2 <USBD_GetEpDesc>
 801382e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013830:	2181      	movs	r1, #129	; 0x81
 8013832:	4813      	ldr	r0, [pc, #76]	; (8013880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013834:	f000 fccd 	bl	80141d2 <USBD_GetEpDesc>
 8013838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d002      	beq.n	8013846 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	2210      	movs	r2, #16
 8013844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d006      	beq.n	801385a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2200      	movs	r2, #0
 8013850:	711a      	strb	r2, [r3, #4]
 8013852:	2200      	movs	r2, #0
 8013854:	f042 0202 	orr.w	r2, r2, #2
 8013858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d006      	beq.n	801386e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	711a      	strb	r2, [r3, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	f042 0202 	orr.w	r2, r2, #2
 801386c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2243      	movs	r2, #67	; 0x43
 8013872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013874:	4b02      	ldr	r3, [pc, #8]	; (8013880 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013876:	4618      	mov	r0, r3
 8013878:	3718      	adds	r7, #24
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop
 8013880:	24000054 	.word	0x24000054

08013884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801388c:	2182      	movs	r1, #130	; 0x82
 801388e:	4818      	ldr	r0, [pc, #96]	; (80138f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013890:	f000 fc9f 	bl	80141d2 <USBD_GetEpDesc>
 8013894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013896:	2101      	movs	r1, #1
 8013898:	4815      	ldr	r0, [pc, #84]	; (80138f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801389a:	f000 fc9a 	bl	80141d2 <USBD_GetEpDesc>
 801389e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138a0:	2181      	movs	r1, #129	; 0x81
 80138a2:	4813      	ldr	r0, [pc, #76]	; (80138f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80138a4:	f000 fc95 	bl	80141d2 <USBD_GetEpDesc>
 80138a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	2210      	movs	r2, #16
 80138b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d006      	beq.n	80138ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	2200      	movs	r2, #0
 80138c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138c4:	711a      	strb	r2, [r3, #4]
 80138c6:	2200      	movs	r2, #0
 80138c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d006      	beq.n	80138de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138d8:	711a      	strb	r2, [r3, #4]
 80138da:	2200      	movs	r2, #0
 80138dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2243      	movs	r2, #67	; 0x43
 80138e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80138e4:	4b02      	ldr	r3, [pc, #8]	; (80138f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	3718      	adds	r7, #24
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	bf00      	nop
 80138f0:	24000054 	.word	0x24000054

080138f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	220a      	movs	r2, #10
 8013900:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013902:	4b03      	ldr	r3, [pc, #12]	; (8013910 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013904:	4618      	mov	r0, r3
 8013906:	370c      	adds	r7, #12
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr
 8013910:	24000010 	.word	0x24000010

08013914 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d101      	bne.n	8013928 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013924:	2303      	movs	r3, #3
 8013926:	e009      	b.n	801393c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	33b0      	adds	r3, #176	; 0xb0
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	4413      	add	r3, r2
 8013936:	683a      	ldr	r2, [r7, #0]
 8013938:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	370c      	adds	r7, #12
 8013940:	46bd      	mov	sp, r7
 8013942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013946:	4770      	bx	lr

08013948 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013948:	b480      	push	{r7}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	32b0      	adds	r2, #176	; 0xb0
 801395e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013962:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d101      	bne.n	801396e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801396a:	2303      	movs	r3, #3
 801396c:	e008      	b.n	8013980 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	68ba      	ldr	r2, [r7, #8]
 8013972:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013976:	697b      	ldr	r3, [r7, #20]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801397e:	2300      	movs	r3, #0
}
 8013980:	4618      	mov	r0, r3
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr

0801398c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801398c:	b480      	push	{r7}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	32b0      	adds	r2, #176	; 0xb0
 80139a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d101      	bne.n	80139b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80139ac:	2303      	movs	r3, #3
 80139ae:	e004      	b.n	80139ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	683a      	ldr	r2, [r7, #0]
 80139b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3714      	adds	r7, #20
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
	...

080139c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	32b0      	adds	r2, #176	; 0xb0
 80139da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	32b0      	adds	r2, #176	; 0xb0
 80139ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d101      	bne.n	80139f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80139f2:	2303      	movs	r3, #3
 80139f4:	e018      	b.n	8013a28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	7c1b      	ldrb	r3, [r3, #16]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d10a      	bne.n	8013a14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80139fe:	4b0c      	ldr	r3, [pc, #48]	; (8013a30 <USBD_CDC_ReceivePacket+0x68>)
 8013a00:	7819      	ldrb	r1, [r3, #0]
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f001 ffdb 	bl	80159c8 <USBD_LL_PrepareReceive>
 8013a12:	e008      	b.n	8013a26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013a14:	4b06      	ldr	r3, [pc, #24]	; (8013a30 <USBD_CDC_ReceivePacket+0x68>)
 8013a16:	7819      	ldrb	r1, [r3, #0]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a1e:	2340      	movs	r3, #64	; 0x40
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f001 ffd1 	bl	80159c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013a26:	2300      	movs	r3, #0
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	24000098 	.word	0x24000098

08013a34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	60f8      	str	r0, [r7, #12]
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	4613      	mov	r3, r2
 8013a40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d101      	bne.n	8013a4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	e01f      	b.n	8013a8c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2200      	movs	r2, #0
 8013a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2200      	movs	r2, #0
 8013a58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d003      	beq.n	8013a72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	68ba      	ldr	r2, [r7, #8]
 8013a6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2201      	movs	r2, #1
 8013a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	79fa      	ldrb	r2, [r7, #7]
 8013a7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013a80:	68f8      	ldr	r0, [r7, #12]
 8013a82:	f001 fe45 	bl	8015710 <USBD_LL_Init>
 8013a86:	4603      	mov	r3, r0
 8013a88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3718      	adds	r7, #24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}

08013a94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	e025      	b.n	8013af8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	683a      	ldr	r2, [r7, #0]
 8013ab0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	32ae      	adds	r2, #174	; 0xae
 8013abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00f      	beq.n	8013ae8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	32ae      	adds	r2, #174	; 0xae
 8013ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad8:	f107 020e 	add.w	r2, r7, #14
 8013adc:	4610      	mov	r0, r2
 8013ade:	4798      	blx	r3
 8013ae0:	4602      	mov	r2, r0
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013aee:	1c5a      	adds	r2, r3, #1
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013af6:	2300      	movs	r3, #0
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3710      	adds	r7, #16
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b082      	sub	sp, #8
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f001 fe53 	bl	80157b4 <USBD_LL_Start>
 8013b0e:	4603      	mov	r3, r0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	3708      	adds	r7, #8
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b083      	sub	sp, #12
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	370c      	adds	r7, #12
 8013b26:	46bd      	mov	sp, r7
 8013b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2c:	4770      	bx	lr

08013b2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b2e:	b580      	push	{r7, lr}
 8013b30:	b084      	sub	sp, #16
 8013b32:	af00      	add	r7, sp, #0
 8013b34:	6078      	str	r0, [r7, #4]
 8013b36:	460b      	mov	r3, r1
 8013b38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d009      	beq.n	8013b5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	78fa      	ldrb	r2, [r7, #3]
 8013b52:	4611      	mov	r1, r2
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	4798      	blx	r3
 8013b58:	4603      	mov	r3, r0
 8013b5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3710      	adds	r7, #16
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b084      	sub	sp, #16
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
 8013b6e:	460b      	mov	r3, r1
 8013b70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b72:	2300      	movs	r3, #0
 8013b74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	78fa      	ldrb	r2, [r7, #3]
 8013b80:	4611      	mov	r1, r2
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	4798      	blx	r3
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013b8c:	2303      	movs	r3, #3
 8013b8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b92:	4618      	mov	r0, r3
 8013b94:	3710      	adds	r7, #16
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b084      	sub	sp, #16
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	6078      	str	r0, [r7, #4]
 8013ba2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013baa:	6839      	ldr	r1, [r7, #0]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f001 f90e 	bl	8014dce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013bce:	f003 031f 	and.w	r3, r3, #31
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d01a      	beq.n	8013c0c <USBD_LL_SetupStage+0x72>
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d822      	bhi.n	8013c20 <USBD_LL_SetupStage+0x86>
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d002      	beq.n	8013be4 <USBD_LL_SetupStage+0x4a>
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d00a      	beq.n	8013bf8 <USBD_LL_SetupStage+0x5e>
 8013be2:	e01d      	b.n	8013c20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013bea:	4619      	mov	r1, r3
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f000 fb65 	bl	80142bc <USBD_StdDevReq>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8013bf6:	e020      	b.n	8013c3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013bfe:	4619      	mov	r1, r3
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 fbcd 	bl	80143a0 <USBD_StdItfReq>
 8013c06:	4603      	mov	r3, r0
 8013c08:	73fb      	strb	r3, [r7, #15]
      break;
 8013c0a:	e016      	b.n	8013c3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c12:	4619      	mov	r1, r3
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 fc2f 	bl	8014478 <USBD_StdEPReq>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8013c1e:	e00c      	b.n	8013c3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	4619      	mov	r1, r3
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f001 fe20 	bl	8015874 <USBD_LL_StallEP>
 8013c34:	4603      	mov	r3, r0
 8013c36:	73fb      	strb	r3, [r7, #15]
      break;
 8013c38:	bf00      	nop
  }

  return ret;
 8013c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	607a      	str	r2, [r7, #4]
 8013c50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013c56:	7afb      	ldrb	r3, [r7, #11]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d16e      	bne.n	8013d3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013c62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c6a:	2b03      	cmp	r3, #3
 8013c6c:	f040 8098 	bne.w	8013da0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	689a      	ldr	r2, [r3, #8]
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	68db      	ldr	r3, [r3, #12]
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d913      	bls.n	8013ca4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	689a      	ldr	r2, [r3, #8]
 8013c80:	693b      	ldr	r3, [r7, #16]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	1ad2      	subs	r2, r2, r3
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	68da      	ldr	r2, [r3, #12]
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	4293      	cmp	r3, r2
 8013c94:	bf28      	it	cs
 8013c96:	4613      	movcs	r3, r2
 8013c98:	461a      	mov	r2, r3
 8013c9a:	6879      	ldr	r1, [r7, #4]
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f001 f98a 	bl	8014fb6 <USBD_CtlContinueRx>
 8013ca2:	e07d      	b.n	8013da0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013caa:	f003 031f 	and.w	r3, r3, #31
 8013cae:	2b02      	cmp	r3, #2
 8013cb0:	d014      	beq.n	8013cdc <USBD_LL_DataOutStage+0x98>
 8013cb2:	2b02      	cmp	r3, #2
 8013cb4:	d81d      	bhi.n	8013cf2 <USBD_LL_DataOutStage+0xae>
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <USBD_LL_DataOutStage+0x7c>
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d003      	beq.n	8013cc6 <USBD_LL_DataOutStage+0x82>
 8013cbe:	e018      	b.n	8013cf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8013cc4:	e018      	b.n	8013cf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	4619      	mov	r1, r3
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f000 fa64 	bl	801419e <USBD_CoreFindIF>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	75bb      	strb	r3, [r7, #22]
            break;
 8013cda:	e00d      	b.n	8013cf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	f000 fa66 	bl	80141b8 <USBD_CoreFindEP>
 8013cec:	4603      	mov	r3, r0
 8013cee:	75bb      	strb	r3, [r7, #22]
            break;
 8013cf0:	e002      	b.n	8013cf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	75bb      	strb	r3, [r7, #22]
            break;
 8013cf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013cf8:	7dbb      	ldrb	r3, [r7, #22]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d119      	bne.n	8013d32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d113      	bne.n	8013d32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013d0a:	7dba      	ldrb	r2, [r7, #22]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	32ae      	adds	r2, #174	; 0xae
 8013d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d14:	691b      	ldr	r3, [r3, #16]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00b      	beq.n	8013d32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013d1a:	7dba      	ldrb	r2, [r7, #22]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013d22:	7dba      	ldrb	r2, [r7, #22]
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	32ae      	adds	r2, #174	; 0xae
 8013d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d2c:	691b      	ldr	r3, [r3, #16]
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f001 f950 	bl	8014fd8 <USBD_CtlSendStatus>
 8013d38:	e032      	b.n	8013da0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013d3a:	7afb      	ldrb	r3, [r7, #11]
 8013d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	4619      	mov	r1, r3
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f000 fa37 	bl	80141b8 <USBD_CoreFindEP>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d4e:	7dbb      	ldrb	r3, [r7, #22]
 8013d50:	2bff      	cmp	r3, #255	; 0xff
 8013d52:	d025      	beq.n	8013da0 <USBD_LL_DataOutStage+0x15c>
 8013d54:	7dbb      	ldrb	r3, [r7, #22]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d122      	bne.n	8013da0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d60:	b2db      	uxtb	r3, r3
 8013d62:	2b03      	cmp	r3, #3
 8013d64:	d117      	bne.n	8013d96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013d66:	7dba      	ldrb	r2, [r7, #22]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	32ae      	adds	r2, #174	; 0xae
 8013d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d70:	699b      	ldr	r3, [r3, #24]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00f      	beq.n	8013d96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013d76:	7dba      	ldrb	r2, [r7, #22]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013d7e:	7dba      	ldrb	r2, [r7, #22]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	32ae      	adds	r2, #174	; 0xae
 8013d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d88:	699b      	ldr	r3, [r3, #24]
 8013d8a:	7afa      	ldrb	r2, [r7, #11]
 8013d8c:	4611      	mov	r1, r2
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	4798      	blx	r3
 8013d92:	4603      	mov	r3, r0
 8013d94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013d96:	7dfb      	ldrb	r3, [r7, #23]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013d9c:	7dfb      	ldrb	r3, [r7, #23]
 8013d9e:	e000      	b.n	8013da2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3718      	adds	r7, #24
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}

08013daa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b086      	sub	sp, #24
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	60f8      	str	r0, [r7, #12]
 8013db2:	460b      	mov	r3, r1
 8013db4:	607a      	str	r2, [r7, #4]
 8013db6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013db8:	7afb      	ldrb	r3, [r7, #11]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d16f      	bne.n	8013e9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3314      	adds	r3, #20
 8013dc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d15a      	bne.n	8013e84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	689a      	ldr	r2, [r3, #8]
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	429a      	cmp	r2, r3
 8013dd8:	d914      	bls.n	8013e04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	689a      	ldr	r2, [r3, #8]
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	1ad2      	subs	r2, r2, r3
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	689b      	ldr	r3, [r3, #8]
 8013dec:	461a      	mov	r2, r3
 8013dee:	6879      	ldr	r1, [r7, #4]
 8013df0:	68f8      	ldr	r0, [r7, #12]
 8013df2:	f001 f8b2 	bl	8014f5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013df6:	2300      	movs	r3, #0
 8013df8:	2200      	movs	r2, #0
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	68f8      	ldr	r0, [r7, #12]
 8013dfe:	f001 fde3 	bl	80159c8 <USBD_LL_PrepareReceive>
 8013e02:	e03f      	b.n	8013e84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	68da      	ldr	r2, [r3, #12]
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d11c      	bne.n	8013e4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	685a      	ldr	r2, [r3, #4]
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d316      	bcc.n	8013e4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	685a      	ldr	r2, [r3, #4]
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d20f      	bcs.n	8013e4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	2100      	movs	r1, #0
 8013e2e:	68f8      	ldr	r0, [r7, #12]
 8013e30:	f001 f893 	bl	8014f5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2200      	movs	r2, #0
 8013e38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	2200      	movs	r2, #0
 8013e40:	2100      	movs	r1, #0
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f001 fdc0 	bl	80159c8 <USBD_LL_PrepareReceive>
 8013e48:	e01c      	b.n	8013e84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	2b03      	cmp	r3, #3
 8013e54:	d10f      	bne.n	8013e76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e5c:	68db      	ldr	r3, [r3, #12]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d009      	beq.n	8013e76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2200      	movs	r2, #0
 8013e66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e70:	68db      	ldr	r3, [r3, #12]
 8013e72:	68f8      	ldr	r0, [r7, #12]
 8013e74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e76:	2180      	movs	r1, #128	; 0x80
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f001 fcfb 	bl	8015874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f001 f8bd 	bl	8014ffe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d03a      	beq.n	8013f04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013e8e:	68f8      	ldr	r0, [r7, #12]
 8013e90:	f7ff fe42 	bl	8013b18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2200      	movs	r2, #0
 8013e98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013e9c:	e032      	b.n	8013f04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013e9e:	7afb      	ldrb	r3, [r7, #11]
 8013ea0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013ea4:	b2db      	uxtb	r3, r3
 8013ea6:	4619      	mov	r1, r3
 8013ea8:	68f8      	ldr	r0, [r7, #12]
 8013eaa:	f000 f985 	bl	80141b8 <USBD_CoreFindEP>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013eb2:	7dfb      	ldrb	r3, [r7, #23]
 8013eb4:	2bff      	cmp	r3, #255	; 0xff
 8013eb6:	d025      	beq.n	8013f04 <USBD_LL_DataInStage+0x15a>
 8013eb8:	7dfb      	ldrb	r3, [r7, #23]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d122      	bne.n	8013f04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b03      	cmp	r3, #3
 8013ec8:	d11c      	bne.n	8013f04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013eca:	7dfa      	ldrb	r2, [r7, #23]
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	32ae      	adds	r2, #174	; 0xae
 8013ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ed4:	695b      	ldr	r3, [r3, #20]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d014      	beq.n	8013f04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013eda:	7dfa      	ldrb	r2, [r7, #23]
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013ee2:	7dfa      	ldrb	r2, [r7, #23]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	32ae      	adds	r2, #174	; 0xae
 8013ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eec:	695b      	ldr	r3, [r3, #20]
 8013eee:	7afa      	ldrb	r2, [r7, #11]
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	68f8      	ldr	r0, [r7, #12]
 8013ef4:	4798      	blx	r3
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013efa:	7dbb      	ldrb	r3, [r7, #22]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d001      	beq.n	8013f04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013f00:	7dbb      	ldrb	r3, [r7, #22]
 8013f02:	e000      	b.n	8013f06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3718      	adds	r7, #24
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}

08013f0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f0e:	b580      	push	{r7, lr}
 8013f10:	b084      	sub	sp, #16
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f16:	2300      	movs	r3, #0
 8013f18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	2200      	movs	r2, #0
 8013f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d014      	beq.n	8013f74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d00e      	beq.n	8013f74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	6852      	ldr	r2, [r2, #4]
 8013f62:	b2d2      	uxtb	r2, r2
 8013f64:	4611      	mov	r1, r2
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	4798      	blx	r3
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d001      	beq.n	8013f74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013f70:	2303      	movs	r3, #3
 8013f72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f74:	2340      	movs	r3, #64	; 0x40
 8013f76:	2200      	movs	r2, #0
 8013f78:	2100      	movs	r1, #0
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f001 fc35 	bl	80157ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2201      	movs	r2, #1
 8013f84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2240      	movs	r2, #64	; 0x40
 8013f8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f90:	2340      	movs	r3, #64	; 0x40
 8013f92:	2200      	movs	r2, #0
 8013f94:	2180      	movs	r1, #128	; 0x80
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f001 fc27 	bl	80157ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2240      	movs	r2, #64	; 0x40
 8013fa6:	621a      	str	r2, [r3, #32]

  return ret;
 8013fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3710      	adds	r7, #16
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013fb2:	b480      	push	{r7}
 8013fb4:	b083      	sub	sp, #12
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
 8013fba:	460b      	mov	r3, r1
 8013fbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	78fa      	ldrb	r2, [r7, #3]
 8013fc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013fc4:	2300      	movs	r3, #0
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr

08013fd2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013fd2:	b480      	push	{r7}
 8013fd4:	b083      	sub	sp, #12
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	2b04      	cmp	r3, #4
 8013fe4:	d006      	beq.n	8013ff4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fec:	b2da      	uxtb	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2204      	movs	r2, #4
 8013ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	370c      	adds	r7, #12
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr

0801400a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801400a:	b480      	push	{r7}
 801400c:	b083      	sub	sp, #12
 801400e:	af00      	add	r7, sp, #0
 8014010:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b04      	cmp	r3, #4
 801401c:	d106      	bne.n	801402c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014024:	b2da      	uxtb	r2, r3
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014038:	4770      	bx	lr

0801403a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801403a:	b580      	push	{r7, lr}
 801403c:	b082      	sub	sp, #8
 801403e:	af00      	add	r7, sp, #0
 8014040:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014048:	b2db      	uxtb	r3, r3
 801404a:	2b03      	cmp	r3, #3
 801404c:	d110      	bne.n	8014070 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014054:	2b00      	cmp	r3, #0
 8014056:	d00b      	beq.n	8014070 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801405e:	69db      	ldr	r3, [r3, #28]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d005      	beq.n	8014070 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801406a:	69db      	ldr	r3, [r3, #28]
 801406c:	6878      	ldr	r0, [r7, #4]
 801406e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014070:	2300      	movs	r3, #0
}
 8014072:	4618      	mov	r0, r3
 8014074:	3708      	adds	r7, #8
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}

0801407a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801407a:	b580      	push	{r7, lr}
 801407c:	b082      	sub	sp, #8
 801407e:	af00      	add	r7, sp, #0
 8014080:	6078      	str	r0, [r7, #4]
 8014082:	460b      	mov	r3, r1
 8014084:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	32ae      	adds	r2, #174	; 0xae
 8014090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d101      	bne.n	801409c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014098:	2303      	movs	r3, #3
 801409a:	e01c      	b.n	80140d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	2b03      	cmp	r3, #3
 80140a6:	d115      	bne.n	80140d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	32ae      	adds	r2, #174	; 0xae
 80140b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140b6:	6a1b      	ldr	r3, [r3, #32]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00b      	beq.n	80140d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	32ae      	adds	r2, #174	; 0xae
 80140c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ca:	6a1b      	ldr	r3, [r3, #32]
 80140cc:	78fa      	ldrb	r2, [r7, #3]
 80140ce:	4611      	mov	r1, r2
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80140d4:	2300      	movs	r3, #0
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3708      	adds	r7, #8
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}

080140de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80140de:	b580      	push	{r7, lr}
 80140e0:	b082      	sub	sp, #8
 80140e2:	af00      	add	r7, sp, #0
 80140e4:	6078      	str	r0, [r7, #4]
 80140e6:	460b      	mov	r3, r1
 80140e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	32ae      	adds	r2, #174	; 0xae
 80140f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d101      	bne.n	8014100 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80140fc:	2303      	movs	r3, #3
 80140fe:	e01c      	b.n	801413a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014106:	b2db      	uxtb	r3, r3
 8014108:	2b03      	cmp	r3, #3
 801410a:	d115      	bne.n	8014138 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	32ae      	adds	r2, #174	; 0xae
 8014116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00b      	beq.n	8014138 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	32ae      	adds	r2, #174	; 0xae
 801412a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014130:	78fa      	ldrb	r2, [r7, #3]
 8014132:	4611      	mov	r1, r2
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014138:	2300      	movs	r3, #0
}
 801413a:	4618      	mov	r0, r3
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}

08014142 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014142:	b480      	push	{r7}
 8014144:	b083      	sub	sp, #12
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801414a:	2300      	movs	r3, #0
}
 801414c:	4618      	mov	r0, r3
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014160:	2300      	movs	r3, #0
 8014162:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2201      	movs	r2, #1
 8014168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014172:	2b00      	cmp	r3, #0
 8014174:	d00e      	beq.n	8014194 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801417c:	685b      	ldr	r3, [r3, #4]
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	6852      	ldr	r2, [r2, #4]
 8014182:	b2d2      	uxtb	r2, r2
 8014184:	4611      	mov	r1, r2
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	4798      	blx	r3
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014190:	2303      	movs	r3, #3
 8014192:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014194:	7bfb      	ldrb	r3, [r7, #15]
}
 8014196:	4618      	mov	r0, r3
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}

0801419e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801419e:	b480      	push	{r7}
 80141a0:	b083      	sub	sp, #12
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
 80141a6:	460b      	mov	r3, r1
 80141a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80141aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	460b      	mov	r3, r1
 80141c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80141c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	370c      	adds	r7, #12
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr

080141d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80141d2:	b580      	push	{r7, lr}
 80141d4:	b086      	sub	sp, #24
 80141d6:	af00      	add	r7, sp, #0
 80141d8:	6078      	str	r0, [r7, #4]
 80141da:	460b      	mov	r3, r1
 80141dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80141e6:	2300      	movs	r3, #0
 80141e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	885b      	ldrh	r3, [r3, #2]
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d920      	bls.n	801423c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	781b      	ldrb	r3, [r3, #0]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014202:	e013      	b.n	801422c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014204:	f107 030a 	add.w	r3, r7, #10
 8014208:	4619      	mov	r1, r3
 801420a:	6978      	ldr	r0, [r7, #20]
 801420c:	f000 f81b 	bl	8014246 <USBD_GetNextDesc>
 8014210:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	785b      	ldrb	r3, [r3, #1]
 8014216:	2b05      	cmp	r3, #5
 8014218:	d108      	bne.n	801422c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	789b      	ldrb	r3, [r3, #2]
 8014222:	78fa      	ldrb	r2, [r7, #3]
 8014224:	429a      	cmp	r2, r3
 8014226:	d008      	beq.n	801423a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014228:	2300      	movs	r3, #0
 801422a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	885b      	ldrh	r3, [r3, #2]
 8014230:	b29a      	uxth	r2, r3
 8014232:	897b      	ldrh	r3, [r7, #10]
 8014234:	429a      	cmp	r2, r3
 8014236:	d8e5      	bhi.n	8014204 <USBD_GetEpDesc+0x32>
 8014238:	e000      	b.n	801423c <USBD_GetEpDesc+0x6a>
          break;
 801423a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801423c:	693b      	ldr	r3, [r7, #16]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3718      	adds	r7, #24
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014246:	b480      	push	{r7}
 8014248:	b085      	sub	sp, #20
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	881a      	ldrh	r2, [r3, #0]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	b29b      	uxth	r3, r3
 801425e:	4413      	add	r3, r2
 8014260:	b29a      	uxth	r2, r3
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	461a      	mov	r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	4413      	add	r3, r2
 8014270:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014272:	68fb      	ldr	r3, [r7, #12]
}
 8014274:	4618      	mov	r0, r3
 8014276:	3714      	adds	r7, #20
 8014278:	46bd      	mov	sp, r7
 801427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801427e:	4770      	bx	lr

08014280 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014280:	b480      	push	{r7}
 8014282:	b087      	sub	sp, #28
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	3301      	adds	r3, #1
 8014296:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801429e:	8a3b      	ldrh	r3, [r7, #16]
 80142a0:	021b      	lsls	r3, r3, #8
 80142a2:	b21a      	sxth	r2, r3
 80142a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80142a8:	4313      	orrs	r3, r2
 80142aa:	b21b      	sxth	r3, r3
 80142ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80142ae:	89fb      	ldrh	r3, [r7, #14]
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	371c      	adds	r7, #28
 80142b4:	46bd      	mov	sp, r7
 80142b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ba:	4770      	bx	lr

080142bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80142c6:	2300      	movs	r3, #0
 80142c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80142d2:	2b40      	cmp	r3, #64	; 0x40
 80142d4:	d005      	beq.n	80142e2 <USBD_StdDevReq+0x26>
 80142d6:	2b40      	cmp	r3, #64	; 0x40
 80142d8:	d857      	bhi.n	801438a <USBD_StdDevReq+0xce>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00f      	beq.n	80142fe <USBD_StdDevReq+0x42>
 80142de:	2b20      	cmp	r3, #32
 80142e0:	d153      	bne.n	801438a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	32ae      	adds	r2, #174	; 0xae
 80142ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f0:	689b      	ldr	r3, [r3, #8]
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	4798      	blx	r3
 80142f8:	4603      	mov	r3, r0
 80142fa:	73fb      	strb	r3, [r7, #15]
      break;
 80142fc:	e04a      	b.n	8014394 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	785b      	ldrb	r3, [r3, #1]
 8014302:	2b09      	cmp	r3, #9
 8014304:	d83b      	bhi.n	801437e <USBD_StdDevReq+0xc2>
 8014306:	a201      	add	r2, pc, #4	; (adr r2, 801430c <USBD_StdDevReq+0x50>)
 8014308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430c:	08014361 	.word	0x08014361
 8014310:	08014375 	.word	0x08014375
 8014314:	0801437f 	.word	0x0801437f
 8014318:	0801436b 	.word	0x0801436b
 801431c:	0801437f 	.word	0x0801437f
 8014320:	0801433f 	.word	0x0801433f
 8014324:	08014335 	.word	0x08014335
 8014328:	0801437f 	.word	0x0801437f
 801432c:	08014357 	.word	0x08014357
 8014330:	08014349 	.word	0x08014349
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014334:	6839      	ldr	r1, [r7, #0]
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f000 fa3c 	bl	80147b4 <USBD_GetDescriptor>
          break;
 801433c:	e024      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801433e:	6839      	ldr	r1, [r7, #0]
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 fba1 	bl	8014a88 <USBD_SetAddress>
          break;
 8014346:	e01f      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014348:	6839      	ldr	r1, [r7, #0]
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f000 fbe0 	bl	8014b10 <USBD_SetConfig>
 8014350:	4603      	mov	r3, r0
 8014352:	73fb      	strb	r3, [r7, #15]
          break;
 8014354:	e018      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014356:	6839      	ldr	r1, [r7, #0]
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f000 fc83 	bl	8014c64 <USBD_GetConfig>
          break;
 801435e:	e013      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014360:	6839      	ldr	r1, [r7, #0]
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	f000 fcb4 	bl	8014cd0 <USBD_GetStatus>
          break;
 8014368:	e00e      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801436a:	6839      	ldr	r1, [r7, #0]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f000 fce3 	bl	8014d38 <USBD_SetFeature>
          break;
 8014372:	e009      	b.n	8014388 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014374:	6839      	ldr	r1, [r7, #0]
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f000 fd07 	bl	8014d8a <USBD_ClrFeature>
          break;
 801437c:	e004      	b.n	8014388 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801437e:	6839      	ldr	r1, [r7, #0]
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f000 fd5e 	bl	8014e42 <USBD_CtlError>
          break;
 8014386:	bf00      	nop
      }
      break;
 8014388:	e004      	b.n	8014394 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801438a:	6839      	ldr	r1, [r7, #0]
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f000 fd58 	bl	8014e42 <USBD_CtlError>
      break;
 8014392:	bf00      	nop
  }

  return ret;
 8014394:	7bfb      	ldrb	r3, [r7, #15]
}
 8014396:	4618      	mov	r0, r3
 8014398:	3710      	adds	r7, #16
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop

080143a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143b6:	2b40      	cmp	r3, #64	; 0x40
 80143b8:	d005      	beq.n	80143c6 <USBD_StdItfReq+0x26>
 80143ba:	2b40      	cmp	r3, #64	; 0x40
 80143bc:	d852      	bhi.n	8014464 <USBD_StdItfReq+0xc4>
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d001      	beq.n	80143c6 <USBD_StdItfReq+0x26>
 80143c2:	2b20      	cmp	r3, #32
 80143c4:	d14e      	bne.n	8014464 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	3b01      	subs	r3, #1
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	d840      	bhi.n	8014456 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	889b      	ldrh	r3, [r3, #4]
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d836      	bhi.n	801444c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	889b      	ldrh	r3, [r3, #4]
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	4619      	mov	r1, r3
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7ff fed9 	bl	801419e <USBD_CoreFindIF>
 80143ec:	4603      	mov	r3, r0
 80143ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143f0:	7bbb      	ldrb	r3, [r7, #14]
 80143f2:	2bff      	cmp	r3, #255	; 0xff
 80143f4:	d01d      	beq.n	8014432 <USBD_StdItfReq+0x92>
 80143f6:	7bbb      	ldrb	r3, [r7, #14]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d11a      	bne.n	8014432 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80143fc:	7bba      	ldrb	r2, [r7, #14]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	32ae      	adds	r2, #174	; 0xae
 8014402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00f      	beq.n	801442c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801440c:	7bba      	ldrb	r2, [r7, #14]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014414:	7bba      	ldrb	r2, [r7, #14]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	32ae      	adds	r2, #174	; 0xae
 801441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441e:	689b      	ldr	r3, [r3, #8]
 8014420:	6839      	ldr	r1, [r7, #0]
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	4798      	blx	r3
 8014426:	4603      	mov	r3, r0
 8014428:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801442a:	e004      	b.n	8014436 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801442c:	2303      	movs	r3, #3
 801442e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014430:	e001      	b.n	8014436 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014432:	2303      	movs	r3, #3
 8014434:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	88db      	ldrh	r3, [r3, #6]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d110      	bne.n	8014460 <USBD_StdItfReq+0xc0>
 801443e:	7bfb      	ldrb	r3, [r7, #15]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10d      	bne.n	8014460 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f000 fdc7 	bl	8014fd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801444a:	e009      	b.n	8014460 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801444c:	6839      	ldr	r1, [r7, #0]
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f000 fcf7 	bl	8014e42 <USBD_CtlError>
          break;
 8014454:	e004      	b.n	8014460 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014456:	6839      	ldr	r1, [r7, #0]
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f000 fcf2 	bl	8014e42 <USBD_CtlError>
          break;
 801445e:	e000      	b.n	8014462 <USBD_StdItfReq+0xc2>
          break;
 8014460:	bf00      	nop
      }
      break;
 8014462:	e004      	b.n	801446e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014464:	6839      	ldr	r1, [r7, #0]
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f000 fceb 	bl	8014e42 <USBD_CtlError>
      break;
 801446c:	bf00      	nop
  }

  return ret;
 801446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014470:	4618      	mov	r0, r3
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014482:	2300      	movs	r3, #0
 8014484:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	889b      	ldrh	r3, [r3, #4]
 801448a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014494:	2b40      	cmp	r3, #64	; 0x40
 8014496:	d007      	beq.n	80144a8 <USBD_StdEPReq+0x30>
 8014498:	2b40      	cmp	r3, #64	; 0x40
 801449a:	f200 817f 	bhi.w	801479c <USBD_StdEPReq+0x324>
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d02a      	beq.n	80144f8 <USBD_StdEPReq+0x80>
 80144a2:	2b20      	cmp	r3, #32
 80144a4:	f040 817a 	bne.w	801479c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80144a8:	7bbb      	ldrb	r3, [r7, #14]
 80144aa:	4619      	mov	r1, r3
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7ff fe83 	bl	80141b8 <USBD_CoreFindEP>
 80144b2:	4603      	mov	r3, r0
 80144b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80144b6:	7b7b      	ldrb	r3, [r7, #13]
 80144b8:	2bff      	cmp	r3, #255	; 0xff
 80144ba:	f000 8174 	beq.w	80147a6 <USBD_StdEPReq+0x32e>
 80144be:	7b7b      	ldrb	r3, [r7, #13]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f040 8170 	bne.w	80147a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80144c6:	7b7a      	ldrb	r2, [r7, #13]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80144ce:	7b7a      	ldrb	r2, [r7, #13]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	32ae      	adds	r2, #174	; 0xae
 80144d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144d8:	689b      	ldr	r3, [r3, #8]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	f000 8163 	beq.w	80147a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80144e0:	7b7a      	ldrb	r2, [r7, #13]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	32ae      	adds	r2, #174	; 0xae
 80144e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ea:	689b      	ldr	r3, [r3, #8]
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	4798      	blx	r3
 80144f2:	4603      	mov	r3, r0
 80144f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80144f6:	e156      	b.n	80147a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	785b      	ldrb	r3, [r3, #1]
 80144fc:	2b03      	cmp	r3, #3
 80144fe:	d008      	beq.n	8014512 <USBD_StdEPReq+0x9a>
 8014500:	2b03      	cmp	r3, #3
 8014502:	f300 8145 	bgt.w	8014790 <USBD_StdEPReq+0x318>
 8014506:	2b00      	cmp	r3, #0
 8014508:	f000 809b 	beq.w	8014642 <USBD_StdEPReq+0x1ca>
 801450c:	2b01      	cmp	r3, #1
 801450e:	d03c      	beq.n	801458a <USBD_StdEPReq+0x112>
 8014510:	e13e      	b.n	8014790 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b02      	cmp	r3, #2
 801451c:	d002      	beq.n	8014524 <USBD_StdEPReq+0xac>
 801451e:	2b03      	cmp	r3, #3
 8014520:	d016      	beq.n	8014550 <USBD_StdEPReq+0xd8>
 8014522:	e02c      	b.n	801457e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014524:	7bbb      	ldrb	r3, [r7, #14]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d00d      	beq.n	8014546 <USBD_StdEPReq+0xce>
 801452a:	7bbb      	ldrb	r3, [r7, #14]
 801452c:	2b80      	cmp	r3, #128	; 0x80
 801452e:	d00a      	beq.n	8014546 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014530:	7bbb      	ldrb	r3, [r7, #14]
 8014532:	4619      	mov	r1, r3
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f001 f99d 	bl	8015874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801453a:	2180      	movs	r1, #128	; 0x80
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f001 f999 	bl	8015874 <USBD_LL_StallEP>
 8014542:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014544:	e020      	b.n	8014588 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014546:	6839      	ldr	r1, [r7, #0]
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f000 fc7a 	bl	8014e42 <USBD_CtlError>
              break;
 801454e:	e01b      	b.n	8014588 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	885b      	ldrh	r3, [r3, #2]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d10e      	bne.n	8014576 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014558:	7bbb      	ldrb	r3, [r7, #14]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d00b      	beq.n	8014576 <USBD_StdEPReq+0xfe>
 801455e:	7bbb      	ldrb	r3, [r7, #14]
 8014560:	2b80      	cmp	r3, #128	; 0x80
 8014562:	d008      	beq.n	8014576 <USBD_StdEPReq+0xfe>
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	88db      	ldrh	r3, [r3, #6]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d104      	bne.n	8014576 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801456c:	7bbb      	ldrb	r3, [r7, #14]
 801456e:	4619      	mov	r1, r3
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f001 f97f 	bl	8015874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 fd2e 	bl	8014fd8 <USBD_CtlSendStatus>

              break;
 801457c:	e004      	b.n	8014588 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801457e:	6839      	ldr	r1, [r7, #0]
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 fc5e 	bl	8014e42 <USBD_CtlError>
              break;
 8014586:	bf00      	nop
          }
          break;
 8014588:	e107      	b.n	801479a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014590:	b2db      	uxtb	r3, r3
 8014592:	2b02      	cmp	r3, #2
 8014594:	d002      	beq.n	801459c <USBD_StdEPReq+0x124>
 8014596:	2b03      	cmp	r3, #3
 8014598:	d016      	beq.n	80145c8 <USBD_StdEPReq+0x150>
 801459a:	e04b      	b.n	8014634 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801459c:	7bbb      	ldrb	r3, [r7, #14]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d00d      	beq.n	80145be <USBD_StdEPReq+0x146>
 80145a2:	7bbb      	ldrb	r3, [r7, #14]
 80145a4:	2b80      	cmp	r3, #128	; 0x80
 80145a6:	d00a      	beq.n	80145be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80145a8:	7bbb      	ldrb	r3, [r7, #14]
 80145aa:	4619      	mov	r1, r3
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f001 f961 	bl	8015874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80145b2:	2180      	movs	r1, #128	; 0x80
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f001 f95d 	bl	8015874 <USBD_LL_StallEP>
 80145ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80145bc:	e040      	b.n	8014640 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80145be:	6839      	ldr	r1, [r7, #0]
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f000 fc3e 	bl	8014e42 <USBD_CtlError>
              break;
 80145c6:	e03b      	b.n	8014640 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	885b      	ldrh	r3, [r3, #2]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d136      	bne.n	801463e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80145d0:	7bbb      	ldrb	r3, [r7, #14]
 80145d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d004      	beq.n	80145e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80145da:	7bbb      	ldrb	r3, [r7, #14]
 80145dc:	4619      	mov	r1, r3
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f001 f967 	bl	80158b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f000 fcf7 	bl	8014fd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80145ea:	7bbb      	ldrb	r3, [r7, #14]
 80145ec:	4619      	mov	r1, r3
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f7ff fde2 	bl	80141b8 <USBD_CoreFindEP>
 80145f4:	4603      	mov	r3, r0
 80145f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145f8:	7b7b      	ldrb	r3, [r7, #13]
 80145fa:	2bff      	cmp	r3, #255	; 0xff
 80145fc:	d01f      	beq.n	801463e <USBD_StdEPReq+0x1c6>
 80145fe:	7b7b      	ldrb	r3, [r7, #13]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d11c      	bne.n	801463e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014604:	7b7a      	ldrb	r2, [r7, #13]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801460c:	7b7a      	ldrb	r2, [r7, #13]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	32ae      	adds	r2, #174	; 0xae
 8014612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d010      	beq.n	801463e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801461c:	7b7a      	ldrb	r2, [r7, #13]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	32ae      	adds	r2, #174	; 0xae
 8014622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	6839      	ldr	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	4798      	blx	r3
 801462e:	4603      	mov	r3, r0
 8014630:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014632:	e004      	b.n	801463e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014634:	6839      	ldr	r1, [r7, #0]
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f000 fc03 	bl	8014e42 <USBD_CtlError>
              break;
 801463c:	e000      	b.n	8014640 <USBD_StdEPReq+0x1c8>
              break;
 801463e:	bf00      	nop
          }
          break;
 8014640:	e0ab      	b.n	801479a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b02      	cmp	r3, #2
 801464c:	d002      	beq.n	8014654 <USBD_StdEPReq+0x1dc>
 801464e:	2b03      	cmp	r3, #3
 8014650:	d032      	beq.n	80146b8 <USBD_StdEPReq+0x240>
 8014652:	e097      	b.n	8014784 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014654:	7bbb      	ldrb	r3, [r7, #14]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d007      	beq.n	801466a <USBD_StdEPReq+0x1f2>
 801465a:	7bbb      	ldrb	r3, [r7, #14]
 801465c:	2b80      	cmp	r3, #128	; 0x80
 801465e:	d004      	beq.n	801466a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014660:	6839      	ldr	r1, [r7, #0]
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f000 fbed 	bl	8014e42 <USBD_CtlError>
                break;
 8014668:	e091      	b.n	801478e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801466a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801466e:	2b00      	cmp	r3, #0
 8014670:	da0b      	bge.n	801468a <USBD_StdEPReq+0x212>
 8014672:	7bbb      	ldrb	r3, [r7, #14]
 8014674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014678:	4613      	mov	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	4413      	add	r3, r2
 801467e:	009b      	lsls	r3, r3, #2
 8014680:	3310      	adds	r3, #16
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	4413      	add	r3, r2
 8014686:	3304      	adds	r3, #4
 8014688:	e00b      	b.n	80146a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801468a:	7bbb      	ldrb	r3, [r7, #14]
 801468c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014690:	4613      	mov	r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	4413      	add	r3, r2
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	4413      	add	r3, r2
 80146a0:	3304      	adds	r3, #4
 80146a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	2200      	movs	r2, #0
 80146a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	2202      	movs	r2, #2
 80146ae:	4619      	mov	r1, r3
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fc37 	bl	8014f24 <USBD_CtlSendData>
              break;
 80146b6:	e06a      	b.n	801478e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80146b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	da11      	bge.n	80146e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80146c0:	7bbb      	ldrb	r3, [r7, #14]
 80146c2:	f003 020f 	and.w	r2, r3, #15
 80146c6:	6879      	ldr	r1, [r7, #4]
 80146c8:	4613      	mov	r3, r2
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	4413      	add	r3, r2
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	440b      	add	r3, r1
 80146d2:	3324      	adds	r3, #36	; 0x24
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d117      	bne.n	801470a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80146da:	6839      	ldr	r1, [r7, #0]
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f000 fbb0 	bl	8014e42 <USBD_CtlError>
                  break;
 80146e2:	e054      	b.n	801478e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80146e4:	7bbb      	ldrb	r3, [r7, #14]
 80146e6:	f003 020f 	and.w	r2, r3, #15
 80146ea:	6879      	ldr	r1, [r7, #4]
 80146ec:	4613      	mov	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	440b      	add	r3, r1
 80146f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d104      	bne.n	801470a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014700:	6839      	ldr	r1, [r7, #0]
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 fb9d 	bl	8014e42 <USBD_CtlError>
                  break;
 8014708:	e041      	b.n	801478e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801470a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801470e:	2b00      	cmp	r3, #0
 8014710:	da0b      	bge.n	801472a <USBD_StdEPReq+0x2b2>
 8014712:	7bbb      	ldrb	r3, [r7, #14]
 8014714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014718:	4613      	mov	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	4413      	add	r3, r2
 801471e:	009b      	lsls	r3, r3, #2
 8014720:	3310      	adds	r3, #16
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	4413      	add	r3, r2
 8014726:	3304      	adds	r3, #4
 8014728:	e00b      	b.n	8014742 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801472a:	7bbb      	ldrb	r3, [r7, #14]
 801472c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014730:	4613      	mov	r3, r2
 8014732:	009b      	lsls	r3, r3, #2
 8014734:	4413      	add	r3, r2
 8014736:	009b      	lsls	r3, r3, #2
 8014738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	4413      	add	r3, r2
 8014740:	3304      	adds	r3, #4
 8014742:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014744:	7bbb      	ldrb	r3, [r7, #14]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <USBD_StdEPReq+0x2d8>
 801474a:	7bbb      	ldrb	r3, [r7, #14]
 801474c:	2b80      	cmp	r3, #128	; 0x80
 801474e:	d103      	bne.n	8014758 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	2200      	movs	r2, #0
 8014754:	601a      	str	r2, [r3, #0]
 8014756:	e00e      	b.n	8014776 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014758:	7bbb      	ldrb	r3, [r7, #14]
 801475a:	4619      	mov	r1, r3
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f001 f8c7 	bl	80158f0 <USBD_LL_IsStallEP>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d003      	beq.n	8014770 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	2201      	movs	r2, #1
 801476c:	601a      	str	r2, [r3, #0]
 801476e:	e002      	b.n	8014776 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	2200      	movs	r2, #0
 8014774:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2202      	movs	r2, #2
 801477a:	4619      	mov	r1, r3
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fbd1 	bl	8014f24 <USBD_CtlSendData>
              break;
 8014782:	e004      	b.n	801478e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014784:	6839      	ldr	r1, [r7, #0]
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f000 fb5b 	bl	8014e42 <USBD_CtlError>
              break;
 801478c:	bf00      	nop
          }
          break;
 801478e:	e004      	b.n	801479a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014790:	6839      	ldr	r1, [r7, #0]
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f000 fb55 	bl	8014e42 <USBD_CtlError>
          break;
 8014798:	bf00      	nop
      }
      break;
 801479a:	e005      	b.n	80147a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801479c:	6839      	ldr	r1, [r7, #0]
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 fb4f 	bl	8014e42 <USBD_CtlError>
      break;
 80147a4:	e000      	b.n	80147a8 <USBD_StdEPReq+0x330>
      break;
 80147a6:	bf00      	nop
  }

  return ret;
 80147a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	3710      	adds	r7, #16
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd80      	pop	{r7, pc}
	...

080147b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b084      	sub	sp, #16
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80147be:	2300      	movs	r3, #0
 80147c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80147c2:	2300      	movs	r3, #0
 80147c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80147c6:	2300      	movs	r3, #0
 80147c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	885b      	ldrh	r3, [r3, #2]
 80147ce:	0a1b      	lsrs	r3, r3, #8
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	3b01      	subs	r3, #1
 80147d4:	2b06      	cmp	r3, #6
 80147d6:	f200 8128 	bhi.w	8014a2a <USBD_GetDescriptor+0x276>
 80147da:	a201      	add	r2, pc, #4	; (adr r2, 80147e0 <USBD_GetDescriptor+0x2c>)
 80147dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147e0:	080147fd 	.word	0x080147fd
 80147e4:	08014815 	.word	0x08014815
 80147e8:	08014855 	.word	0x08014855
 80147ec:	08014a2b 	.word	0x08014a2b
 80147f0:	08014a2b 	.word	0x08014a2b
 80147f4:	080149cb 	.word	0x080149cb
 80147f8:	080149f7 	.word	0x080149f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	7c12      	ldrb	r2, [r2, #16]
 8014808:	f107 0108 	add.w	r1, r7, #8
 801480c:	4610      	mov	r0, r2
 801480e:	4798      	blx	r3
 8014810:	60f8      	str	r0, [r7, #12]
      break;
 8014812:	e112      	b.n	8014a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	7c1b      	ldrb	r3, [r3, #16]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d10d      	bne.n	8014838 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014824:	f107 0208 	add.w	r2, r7, #8
 8014828:	4610      	mov	r0, r2
 801482a:	4798      	blx	r3
 801482c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	3301      	adds	r3, #1
 8014832:	2202      	movs	r2, #2
 8014834:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014836:	e100      	b.n	8014a3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014840:	f107 0208 	add.w	r2, r7, #8
 8014844:	4610      	mov	r0, r2
 8014846:	4798      	blx	r3
 8014848:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	3301      	adds	r3, #1
 801484e:	2202      	movs	r2, #2
 8014850:	701a      	strb	r2, [r3, #0]
      break;
 8014852:	e0f2      	b.n	8014a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	885b      	ldrh	r3, [r3, #2]
 8014858:	b2db      	uxtb	r3, r3
 801485a:	2b05      	cmp	r3, #5
 801485c:	f200 80ac 	bhi.w	80149b8 <USBD_GetDescriptor+0x204>
 8014860:	a201      	add	r2, pc, #4	; (adr r2, 8014868 <USBD_GetDescriptor+0xb4>)
 8014862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014866:	bf00      	nop
 8014868:	08014881 	.word	0x08014881
 801486c:	080148b5 	.word	0x080148b5
 8014870:	080148e9 	.word	0x080148e9
 8014874:	0801491d 	.word	0x0801491d
 8014878:	08014951 	.word	0x08014951
 801487c:	08014985 	.word	0x08014985
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014886:	685b      	ldr	r3, [r3, #4]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d00b      	beq.n	80148a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	7c12      	ldrb	r2, [r2, #16]
 8014898:	f107 0108 	add.w	r1, r7, #8
 801489c:	4610      	mov	r0, r2
 801489e:	4798      	blx	r3
 80148a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80148a2:	e091      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80148a4:	6839      	ldr	r1, [r7, #0]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 facb 	bl	8014e42 <USBD_CtlError>
            err++;
 80148ac:	7afb      	ldrb	r3, [r7, #11]
 80148ae:	3301      	adds	r3, #1
 80148b0:	72fb      	strb	r3, [r7, #11]
          break;
 80148b2:	e089      	b.n	80149c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148ba:	689b      	ldr	r3, [r3, #8]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00b      	beq.n	80148d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	7c12      	ldrb	r2, [r2, #16]
 80148cc:	f107 0108 	add.w	r1, r7, #8
 80148d0:	4610      	mov	r0, r2
 80148d2:	4798      	blx	r3
 80148d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80148d6:	e077      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80148d8:	6839      	ldr	r1, [r7, #0]
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fab1 	bl	8014e42 <USBD_CtlError>
            err++;
 80148e0:	7afb      	ldrb	r3, [r7, #11]
 80148e2:	3301      	adds	r3, #1
 80148e4:	72fb      	strb	r3, [r7, #11]
          break;
 80148e6:	e06f      	b.n	80149c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00b      	beq.n	801490c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	687a      	ldr	r2, [r7, #4]
 80148fe:	7c12      	ldrb	r2, [r2, #16]
 8014900:	f107 0108 	add.w	r1, r7, #8
 8014904:	4610      	mov	r0, r2
 8014906:	4798      	blx	r3
 8014908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801490a:	e05d      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801490c:	6839      	ldr	r1, [r7, #0]
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 fa97 	bl	8014e42 <USBD_CtlError>
            err++;
 8014914:	7afb      	ldrb	r3, [r7, #11]
 8014916:	3301      	adds	r3, #1
 8014918:	72fb      	strb	r3, [r7, #11]
          break;
 801491a:	e055      	b.n	80149c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014922:	691b      	ldr	r3, [r3, #16]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00b      	beq.n	8014940 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801492e:	691b      	ldr	r3, [r3, #16]
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	7c12      	ldrb	r2, [r2, #16]
 8014934:	f107 0108 	add.w	r1, r7, #8
 8014938:	4610      	mov	r0, r2
 801493a:	4798      	blx	r3
 801493c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801493e:	e043      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014940:	6839      	ldr	r1, [r7, #0]
 8014942:	6878      	ldr	r0, [r7, #4]
 8014944:	f000 fa7d 	bl	8014e42 <USBD_CtlError>
            err++;
 8014948:	7afb      	ldrb	r3, [r7, #11]
 801494a:	3301      	adds	r3, #1
 801494c:	72fb      	strb	r3, [r7, #11]
          break;
 801494e:	e03b      	b.n	80149c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014956:	695b      	ldr	r3, [r3, #20]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00b      	beq.n	8014974 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014962:	695b      	ldr	r3, [r3, #20]
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	7c12      	ldrb	r2, [r2, #16]
 8014968:	f107 0108 	add.w	r1, r7, #8
 801496c:	4610      	mov	r0, r2
 801496e:	4798      	blx	r3
 8014970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014972:	e029      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014974:	6839      	ldr	r1, [r7, #0]
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f000 fa63 	bl	8014e42 <USBD_CtlError>
            err++;
 801497c:	7afb      	ldrb	r3, [r7, #11]
 801497e:	3301      	adds	r3, #1
 8014980:	72fb      	strb	r3, [r7, #11]
          break;
 8014982:	e021      	b.n	80149c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801498a:	699b      	ldr	r3, [r3, #24]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00b      	beq.n	80149a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014996:	699b      	ldr	r3, [r3, #24]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	7c12      	ldrb	r2, [r2, #16]
 801499c:	f107 0108 	add.w	r1, r7, #8
 80149a0:	4610      	mov	r0, r2
 80149a2:	4798      	blx	r3
 80149a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149a6:	e00f      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fa49 	bl	8014e42 <USBD_CtlError>
            err++;
 80149b0:	7afb      	ldrb	r3, [r7, #11]
 80149b2:	3301      	adds	r3, #1
 80149b4:	72fb      	strb	r3, [r7, #11]
          break;
 80149b6:	e007      	b.n	80149c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80149b8:	6839      	ldr	r1, [r7, #0]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f000 fa41 	bl	8014e42 <USBD_CtlError>
          err++;
 80149c0:	7afb      	ldrb	r3, [r7, #11]
 80149c2:	3301      	adds	r3, #1
 80149c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80149c6:	bf00      	nop
      }
      break;
 80149c8:	e037      	b.n	8014a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	7c1b      	ldrb	r3, [r3, #16]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d109      	bne.n	80149e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149da:	f107 0208 	add.w	r2, r7, #8
 80149de:	4610      	mov	r0, r2
 80149e0:	4798      	blx	r3
 80149e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80149e4:	e029      	b.n	8014a3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80149e6:	6839      	ldr	r1, [r7, #0]
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f000 fa2a 	bl	8014e42 <USBD_CtlError>
        err++;
 80149ee:	7afb      	ldrb	r3, [r7, #11]
 80149f0:	3301      	adds	r3, #1
 80149f2:	72fb      	strb	r3, [r7, #11]
      break;
 80149f4:	e021      	b.n	8014a3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	7c1b      	ldrb	r3, [r3, #16]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d10d      	bne.n	8014a1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a06:	f107 0208 	add.w	r2, r7, #8
 8014a0a:	4610      	mov	r0, r2
 8014a0c:	4798      	blx	r3
 8014a0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3301      	adds	r3, #1
 8014a14:	2207      	movs	r2, #7
 8014a16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a18:	e00f      	b.n	8014a3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014a1a:	6839      	ldr	r1, [r7, #0]
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 fa10 	bl	8014e42 <USBD_CtlError>
        err++;
 8014a22:	7afb      	ldrb	r3, [r7, #11]
 8014a24:	3301      	adds	r3, #1
 8014a26:	72fb      	strb	r3, [r7, #11]
      break;
 8014a28:	e007      	b.n	8014a3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014a2a:	6839      	ldr	r1, [r7, #0]
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 fa08 	bl	8014e42 <USBD_CtlError>
      err++;
 8014a32:	7afb      	ldrb	r3, [r7, #11]
 8014a34:	3301      	adds	r3, #1
 8014a36:	72fb      	strb	r3, [r7, #11]
      break;
 8014a38:	bf00      	nop
  }

  if (err != 0U)
 8014a3a:	7afb      	ldrb	r3, [r7, #11]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d11e      	bne.n	8014a7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	88db      	ldrh	r3, [r3, #6]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d016      	beq.n	8014a76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014a48:	893b      	ldrh	r3, [r7, #8]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00e      	beq.n	8014a6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	88da      	ldrh	r2, [r3, #6]
 8014a52:	893b      	ldrh	r3, [r7, #8]
 8014a54:	4293      	cmp	r3, r2
 8014a56:	bf28      	it	cs
 8014a58:	4613      	movcs	r3, r2
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014a5e:	893b      	ldrh	r3, [r7, #8]
 8014a60:	461a      	mov	r2, r3
 8014a62:	68f9      	ldr	r1, [r7, #12]
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 fa5d 	bl	8014f24 <USBD_CtlSendData>
 8014a6a:	e009      	b.n	8014a80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014a6c:	6839      	ldr	r1, [r7, #0]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 f9e7 	bl	8014e42 <USBD_CtlError>
 8014a74:	e004      	b.n	8014a80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 faae 	bl	8014fd8 <USBD_CtlSendStatus>
 8014a7c:	e000      	b.n	8014a80 <USBD_GetDescriptor+0x2cc>
    return;
 8014a7e:	bf00      	nop
  }
}
 8014a80:	3710      	adds	r7, #16
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop

08014a88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b084      	sub	sp, #16
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	889b      	ldrh	r3, [r3, #4]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d131      	bne.n	8014afe <USBD_SetAddress+0x76>
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	88db      	ldrh	r3, [r3, #6]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d12d      	bne.n	8014afe <USBD_SetAddress+0x76>
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	885b      	ldrh	r3, [r3, #2]
 8014aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8014aa8:	d829      	bhi.n	8014afe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	885b      	ldrh	r3, [r3, #2]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ab4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	2b03      	cmp	r3, #3
 8014ac0:	d104      	bne.n	8014acc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014ac2:	6839      	ldr	r1, [r7, #0]
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 f9bc 	bl	8014e42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aca:	e01d      	b.n	8014b08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	7bfa      	ldrb	r2, [r7, #15]
 8014ad0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014ad4:	7bfb      	ldrb	r3, [r7, #15]
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f000 ff35 	bl	8015948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f000 fa7a 	bl	8014fd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014ae4:	7bfb      	ldrb	r3, [r7, #15]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d004      	beq.n	8014af4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	2202      	movs	r2, #2
 8014aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014af2:	e009      	b.n	8014b08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	2201      	movs	r2, #1
 8014af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014afc:	e004      	b.n	8014b08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014afe:	6839      	ldr	r1, [r7, #0]
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f000 f99e 	bl	8014e42 <USBD_CtlError>
  }
}
 8014b06:	bf00      	nop
 8014b08:	bf00      	nop
 8014b0a:	3710      	adds	r7, #16
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	885b      	ldrh	r3, [r3, #2]
 8014b22:	b2da      	uxtb	r2, r3
 8014b24:	4b4e      	ldr	r3, [pc, #312]	; (8014c60 <USBD_SetConfig+0x150>)
 8014b26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014b28:	4b4d      	ldr	r3, [pc, #308]	; (8014c60 <USBD_SetConfig+0x150>)
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	d905      	bls.n	8014b3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014b30:	6839      	ldr	r1, [r7, #0]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 f985 	bl	8014e42 <USBD_CtlError>
    return USBD_FAIL;
 8014b38:	2303      	movs	r3, #3
 8014b3a:	e08c      	b.n	8014c56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	2b02      	cmp	r3, #2
 8014b46:	d002      	beq.n	8014b4e <USBD_SetConfig+0x3e>
 8014b48:	2b03      	cmp	r3, #3
 8014b4a:	d029      	beq.n	8014ba0 <USBD_SetConfig+0x90>
 8014b4c:	e075      	b.n	8014c3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014b4e:	4b44      	ldr	r3, [pc, #272]	; (8014c60 <USBD_SetConfig+0x150>)
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d020      	beq.n	8014b98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014b56:	4b42      	ldr	r3, [pc, #264]	; (8014c60 <USBD_SetConfig+0x150>)
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b60:	4b3f      	ldr	r3, [pc, #252]	; (8014c60 <USBD_SetConfig+0x150>)
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	4619      	mov	r1, r3
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f7fe ffe1 	bl	8013b2e <USBD_SetClassConfig>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014b70:	7bfb      	ldrb	r3, [r7, #15]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d008      	beq.n	8014b88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014b76:	6839      	ldr	r1, [r7, #0]
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f000 f962 	bl	8014e42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2202      	movs	r2, #2
 8014b82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014b86:	e065      	b.n	8014c54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 fa25 	bl	8014fd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2203      	movs	r2, #3
 8014b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014b96:	e05d      	b.n	8014c54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014b98:	6878      	ldr	r0, [r7, #4]
 8014b9a:	f000 fa1d 	bl	8014fd8 <USBD_CtlSendStatus>
      break;
 8014b9e:	e059      	b.n	8014c54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014ba0:	4b2f      	ldr	r3, [pc, #188]	; (8014c60 <USBD_SetConfig+0x150>)
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d112      	bne.n	8014bce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2202      	movs	r2, #2
 8014bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014bb0:	4b2b      	ldr	r3, [pc, #172]	; (8014c60 <USBD_SetConfig+0x150>)
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014bba:	4b29      	ldr	r3, [pc, #164]	; (8014c60 <USBD_SetConfig+0x150>)
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f7fe ffd0 	bl	8013b66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f000 fa06 	bl	8014fd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014bcc:	e042      	b.n	8014c54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014bce:	4b24      	ldr	r3, [pc, #144]	; (8014c60 <USBD_SetConfig+0x150>)
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	685b      	ldr	r3, [r3, #4]
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d02a      	beq.n	8014c32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	685b      	ldr	r3, [r3, #4]
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	4619      	mov	r1, r3
 8014be4:	6878      	ldr	r0, [r7, #4]
 8014be6:	f7fe ffbe 	bl	8013b66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014bea:	4b1d      	ldr	r3, [pc, #116]	; (8014c60 <USBD_SetConfig+0x150>)
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	461a      	mov	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014bf4:	4b1a      	ldr	r3, [pc, #104]	; (8014c60 <USBD_SetConfig+0x150>)
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f7fe ff97 	bl	8013b2e <USBD_SetClassConfig>
 8014c00:	4603      	mov	r3, r0
 8014c02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014c04:	7bfb      	ldrb	r3, [r7, #15]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00f      	beq.n	8014c2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 f918 	bl	8014e42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	4619      	mov	r1, r3
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f7fe ffa3 	bl	8013b66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2202      	movs	r2, #2
 8014c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014c28:	e014      	b.n	8014c54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 f9d4 	bl	8014fd8 <USBD_CtlSendStatus>
      break;
 8014c30:	e010      	b.n	8014c54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 f9d0 	bl	8014fd8 <USBD_CtlSendStatus>
      break;
 8014c38:	e00c      	b.n	8014c54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014c3a:	6839      	ldr	r1, [r7, #0]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 f900 	bl	8014e42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014c42:	4b07      	ldr	r3, [pc, #28]	; (8014c60 <USBD_SetConfig+0x150>)
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	4619      	mov	r1, r3
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7fe ff8c 	bl	8013b66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	73fb      	strb	r3, [r7, #15]
      break;
 8014c52:	bf00      	nop
  }

  return ret;
 8014c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3710      	adds	r7, #16
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	240015e8 	.word	0x240015e8

08014c64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
 8014c6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	88db      	ldrh	r3, [r3, #6]
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d004      	beq.n	8014c80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014c76:	6839      	ldr	r1, [r7, #0]
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f000 f8e2 	bl	8014e42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014c7e:	e023      	b.n	8014cc8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	2b02      	cmp	r3, #2
 8014c8a:	dc02      	bgt.n	8014c92 <USBD_GetConfig+0x2e>
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	dc03      	bgt.n	8014c98 <USBD_GetConfig+0x34>
 8014c90:	e015      	b.n	8014cbe <USBD_GetConfig+0x5a>
 8014c92:	2b03      	cmp	r3, #3
 8014c94:	d00b      	beq.n	8014cae <USBD_GetConfig+0x4a>
 8014c96:	e012      	b.n	8014cbe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	3308      	adds	r3, #8
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 f93c 	bl	8014f24 <USBD_CtlSendData>
        break;
 8014cac:	e00c      	b.n	8014cc8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	3304      	adds	r3, #4
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f000 f934 	bl	8014f24 <USBD_CtlSendData>
        break;
 8014cbc:	e004      	b.n	8014cc8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014cbe:	6839      	ldr	r1, [r7, #0]
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f000 f8be 	bl	8014e42 <USBD_CtlError>
        break;
 8014cc6:	bf00      	nop
}
 8014cc8:	bf00      	nop
 8014cca:	3708      	adds	r7, #8
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ce0:	b2db      	uxtb	r3, r3
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	2b02      	cmp	r3, #2
 8014ce6:	d81e      	bhi.n	8014d26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	88db      	ldrh	r3, [r3, #6]
 8014cec:	2b02      	cmp	r3, #2
 8014cee:	d004      	beq.n	8014cfa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014cf0:	6839      	ldr	r1, [r7, #0]
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f000 f8a5 	bl	8014e42 <USBD_CtlError>
        break;
 8014cf8:	e01a      	b.n	8014d30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d005      	beq.n	8014d16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	f043 0202 	orr.w	r2, r3, #2
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	330c      	adds	r3, #12
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 f900 	bl	8014f24 <USBD_CtlSendData>
      break;
 8014d24:	e004      	b.n	8014d30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014d26:	6839      	ldr	r1, [r7, #0]
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f000 f88a 	bl	8014e42 <USBD_CtlError>
      break;
 8014d2e:	bf00      	nop
  }
}
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	885b      	ldrh	r3, [r3, #2]
 8014d46:	2b01      	cmp	r3, #1
 8014d48:	d107      	bne.n	8014d5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f000 f940 	bl	8014fd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014d58:	e013      	b.n	8014d82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	885b      	ldrh	r3, [r3, #2]
 8014d5e:	2b02      	cmp	r3, #2
 8014d60:	d10b      	bne.n	8014d7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	889b      	ldrh	r3, [r3, #4]
 8014d66:	0a1b      	lsrs	r3, r3, #8
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	b2da      	uxtb	r2, r3
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 f930 	bl	8014fd8 <USBD_CtlSendStatus>
}
 8014d78:	e003      	b.n	8014d82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014d7a:	6839      	ldr	r1, [r7, #0]
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f000 f860 	bl	8014e42 <USBD_CtlError>
}
 8014d82:	bf00      	nop
 8014d84:	3708      	adds	r7, #8
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b082      	sub	sp, #8
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
 8014d92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	2b02      	cmp	r3, #2
 8014da0:	d80b      	bhi.n	8014dba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	885b      	ldrh	r3, [r3, #2]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d10c      	bne.n	8014dc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2200      	movs	r2, #0
 8014dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f000 f910 	bl	8014fd8 <USBD_CtlSendStatus>
      }
      break;
 8014db8:	e004      	b.n	8014dc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014dba:	6839      	ldr	r1, [r7, #0]
 8014dbc:	6878      	ldr	r0, [r7, #4]
 8014dbe:	f000 f840 	bl	8014e42 <USBD_CtlError>
      break;
 8014dc2:	e000      	b.n	8014dc6 <USBD_ClrFeature+0x3c>
      break;
 8014dc4:	bf00      	nop
  }
}
 8014dc6:	bf00      	nop
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b084      	sub	sp, #16
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
 8014dd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	781a      	ldrb	r2, [r3, #0]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	3301      	adds	r3, #1
 8014de8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	781a      	ldrb	r2, [r3, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	3301      	adds	r3, #1
 8014df6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f7ff fa41 	bl	8014280 <SWAPBYTE>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	461a      	mov	r2, r3
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	f7ff fa34 	bl	8014280 <SWAPBYTE>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	3301      	adds	r3, #1
 8014e24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014e2c:	68f8      	ldr	r0, [r7, #12]
 8014e2e:	f7ff fa27 	bl	8014280 <SWAPBYTE>
 8014e32:	4603      	mov	r3, r0
 8014e34:	461a      	mov	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	80da      	strh	r2, [r3, #6]
}
 8014e3a:	bf00      	nop
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b082      	sub	sp, #8
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
 8014e4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e4c:	2180      	movs	r1, #128	; 0x80
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f000 fd10 	bl	8015874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014e54:	2100      	movs	r1, #0
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 fd0c 	bl	8015874 <USBD_LL_StallEP>
}
 8014e5c:	bf00      	nop
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b086      	sub	sp, #24
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014e70:	2300      	movs	r3, #0
 8014e72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d036      	beq.n	8014ee8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014e7e:	6938      	ldr	r0, [r7, #16]
 8014e80:	f000 f836 	bl	8014ef0 <USBD_GetLen>
 8014e84:	4603      	mov	r3, r0
 8014e86:	3301      	adds	r3, #1
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	005b      	lsls	r3, r3, #1
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014e92:	7dfb      	ldrb	r3, [r7, #23]
 8014e94:	68ba      	ldr	r2, [r7, #8]
 8014e96:	4413      	add	r3, r2
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	7812      	ldrb	r2, [r2, #0]
 8014e9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8014e9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014ea4:	7dfb      	ldrb	r3, [r7, #23]
 8014ea6:	68ba      	ldr	r2, [r7, #8]
 8014ea8:	4413      	add	r3, r2
 8014eaa:	2203      	movs	r2, #3
 8014eac:	701a      	strb	r2, [r3, #0]
  idx++;
 8014eae:	7dfb      	ldrb	r3, [r7, #23]
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014eb4:	e013      	b.n	8014ede <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014eb6:	7dfb      	ldrb	r3, [r7, #23]
 8014eb8:	68ba      	ldr	r2, [r7, #8]
 8014eba:	4413      	add	r3, r2
 8014ebc:	693a      	ldr	r2, [r7, #16]
 8014ebe:	7812      	ldrb	r2, [r2, #0]
 8014ec0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	3301      	adds	r3, #1
 8014ec6:	613b      	str	r3, [r7, #16]
    idx++;
 8014ec8:	7dfb      	ldrb	r3, [r7, #23]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014ece:	7dfb      	ldrb	r3, [r7, #23]
 8014ed0:	68ba      	ldr	r2, [r7, #8]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	701a      	strb	r2, [r3, #0]
    idx++;
 8014ed8:	7dfb      	ldrb	r3, [r7, #23]
 8014eda:	3301      	adds	r3, #1
 8014edc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014ede:	693b      	ldr	r3, [r7, #16]
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1e7      	bne.n	8014eb6 <USBD_GetString+0x52>
 8014ee6:	e000      	b.n	8014eea <USBD_GetString+0x86>
    return;
 8014ee8:	bf00      	nop
  }
}
 8014eea:	3718      	adds	r7, #24
 8014eec:	46bd      	mov	sp, r7
 8014eee:	bd80      	pop	{r7, pc}

08014ef0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b085      	sub	sp, #20
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014f00:	e005      	b.n	8014f0e <USBD_GetLen+0x1e>
  {
    len++;
 8014f02:	7bfb      	ldrb	r3, [r7, #15]
 8014f04:	3301      	adds	r3, #1
 8014f06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	3301      	adds	r3, #1
 8014f0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1f5      	bne.n	8014f02 <USBD_GetLen+0x12>
  }

  return len;
 8014f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	3714      	adds	r7, #20
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr

08014f24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2202      	movs	r2, #2
 8014f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	68ba      	ldr	r2, [r7, #8]
 8014f48:	2100      	movs	r1, #0
 8014f4a:	68f8      	ldr	r0, [r7, #12]
 8014f4c:	f000 fd1b 	bl	8015986 <USBD_LL_Transmit>

  return USBD_OK;
 8014f50:	2300      	movs	r3, #0
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3710      	adds	r7, #16
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}

08014f5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014f5a:	b580      	push	{r7, lr}
 8014f5c:	b084      	sub	sp, #16
 8014f5e:	af00      	add	r7, sp, #0
 8014f60:	60f8      	str	r0, [r7, #12]
 8014f62:	60b9      	str	r1, [r7, #8]
 8014f64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	68ba      	ldr	r2, [r7, #8]
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	f000 fd0a 	bl	8015986 <USBD_LL_Transmit>

  return USBD_OK;
 8014f72:	2300      	movs	r3, #0
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3710      	adds	r7, #16
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	60f8      	str	r0, [r7, #12]
 8014f84:	60b9      	str	r1, [r7, #8]
 8014f86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2203      	movs	r2, #3
 8014f8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	68ba      	ldr	r2, [r7, #8]
 8014fa4:	2100      	movs	r1, #0
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 fd0e 	bl	80159c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014fac:	2300      	movs	r3, #0
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b084      	sub	sp, #16
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	60f8      	str	r0, [r7, #12]
 8014fbe:	60b9      	str	r1, [r7, #8]
 8014fc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	68ba      	ldr	r2, [r7, #8]
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	68f8      	ldr	r0, [r7, #12]
 8014fca:	f000 fcfd 	bl	80159c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014fce:	2300      	movs	r3, #0
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3710      	adds	r7, #16
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b082      	sub	sp, #8
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2204      	movs	r2, #4
 8014fe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014fe8:	2300      	movs	r3, #0
 8014fea:	2200      	movs	r2, #0
 8014fec:	2100      	movs	r1, #0
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 fcc9 	bl	8015986 <USBD_LL_Transmit>

  return USBD_OK;
 8014ff4:	2300      	movs	r3, #0
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3708      	adds	r7, #8
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}

08014ffe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014ffe:	b580      	push	{r7, lr}
 8015000:	b082      	sub	sp, #8
 8015002:	af00      	add	r7, sp, #0
 8015004:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2205      	movs	r2, #5
 801500a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801500e:	2300      	movs	r3, #0
 8015010:	2200      	movs	r2, #0
 8015012:	2100      	movs	r1, #0
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 fcd7 	bl	80159c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801501a:	2300      	movs	r3, #0
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015024:	b480      	push	{r7}
 8015026:	b087      	sub	sp, #28
 8015028:	af00      	add	r7, sp, #0
 801502a:	60f8      	str	r0, [r7, #12]
 801502c:	60b9      	str	r1, [r7, #8]
 801502e:	4613      	mov	r3, r2
 8015030:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015032:	2301      	movs	r3, #1
 8015034:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015036:	2300      	movs	r3, #0
 8015038:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801503a:	4b1f      	ldr	r3, [pc, #124]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 801503c:	7a5b      	ldrb	r3, [r3, #9]
 801503e:	b2db      	uxtb	r3, r3
 8015040:	2b00      	cmp	r3, #0
 8015042:	d131      	bne.n	80150a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015044:	4b1c      	ldr	r3, [pc, #112]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 8015046:	7a5b      	ldrb	r3, [r3, #9]
 8015048:	b2db      	uxtb	r3, r3
 801504a:	461a      	mov	r2, r3
 801504c:	4b1a      	ldr	r3, [pc, #104]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 801504e:	2100      	movs	r1, #0
 8015050:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015052:	4b19      	ldr	r3, [pc, #100]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 8015054:	7a5b      	ldrb	r3, [r3, #9]
 8015056:	b2db      	uxtb	r3, r3
 8015058:	4a17      	ldr	r2, [pc, #92]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	4413      	add	r3, r2
 801505e:	68fa      	ldr	r2, [r7, #12]
 8015060:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015062:	4b15      	ldr	r3, [pc, #84]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 8015064:	7a5b      	ldrb	r3, [r3, #9]
 8015066:	b2db      	uxtb	r3, r3
 8015068:	461a      	mov	r2, r3
 801506a:	4b13      	ldr	r3, [pc, #76]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 801506c:	4413      	add	r3, r2
 801506e:	79fa      	ldrb	r2, [r7, #7]
 8015070:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015072:	4b11      	ldr	r3, [pc, #68]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 8015074:	7a5b      	ldrb	r3, [r3, #9]
 8015076:	b2db      	uxtb	r3, r3
 8015078:	1c5a      	adds	r2, r3, #1
 801507a:	b2d1      	uxtb	r1, r2
 801507c:	4a0e      	ldr	r2, [pc, #56]	; (80150b8 <FATFS_LinkDriverEx+0x94>)
 801507e:	7251      	strb	r1, [r2, #9]
 8015080:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015082:	7dbb      	ldrb	r3, [r7, #22]
 8015084:	3330      	adds	r3, #48	; 0x30
 8015086:	b2da      	uxtb	r2, r3
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	3301      	adds	r3, #1
 8015090:	223a      	movs	r2, #58	; 0x3a
 8015092:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	3302      	adds	r3, #2
 8015098:	222f      	movs	r2, #47	; 0x2f
 801509a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	3303      	adds	r3, #3
 80150a0:	2200      	movs	r2, #0
 80150a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80150a4:	2300      	movs	r3, #0
 80150a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80150a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	371c      	adds	r7, #28
 80150ae:	46bd      	mov	sp, r7
 80150b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	240015ec 	.word	0x240015ec

080150bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80150c6:	2200      	movs	r2, #0
 80150c8:	6839      	ldr	r1, [r7, #0]
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff ffaa 	bl	8015024 <FATFS_LinkDriverEx>
 80150d0:	4603      	mov	r3, r0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3708      	adds	r7, #8
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
	...

080150dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80150e0:	2201      	movs	r2, #1
 80150e2:	4913      	ldr	r1, [pc, #76]	; (8015130 <MX_USB_DEVICE_Init+0x54>)
 80150e4:	4813      	ldr	r0, [pc, #76]	; (8015134 <MX_USB_DEVICE_Init+0x58>)
 80150e6:	f7fe fca5 	bl	8013a34 <USBD_Init>
 80150ea:	4603      	mov	r3, r0
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d001      	beq.n	80150f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80150f0:	f7ec feaa 	bl	8001e48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80150f4:	4910      	ldr	r1, [pc, #64]	; (8015138 <MX_USB_DEVICE_Init+0x5c>)
 80150f6:	480f      	ldr	r0, [pc, #60]	; (8015134 <MX_USB_DEVICE_Init+0x58>)
 80150f8:	f7fe fccc 	bl	8013a94 <USBD_RegisterClass>
 80150fc:	4603      	mov	r3, r0
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d001      	beq.n	8015106 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015102:	f7ec fea1 	bl	8001e48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8015106:	490d      	ldr	r1, [pc, #52]	; (801513c <MX_USB_DEVICE_Init+0x60>)
 8015108:	480a      	ldr	r0, [pc, #40]	; (8015134 <MX_USB_DEVICE_Init+0x58>)
 801510a:	f7fe fc03 	bl	8013914 <USBD_CDC_RegisterInterface>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015114:	f7ec fe98 	bl	8001e48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8015118:	4806      	ldr	r0, [pc, #24]	; (8015134 <MX_USB_DEVICE_Init+0x58>)
 801511a:	f7fe fcf1 	bl	8013b00 <USBD_Start>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d001      	beq.n	8015128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015124:	f7ec fe90 	bl	8001e48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8015128:	f7f3 febe 	bl	8008ea8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801512c:	bf00      	nop
 801512e:	bd80      	pop	{r7, pc}
 8015130:	240000b0 	.word	0x240000b0
 8015134:	240015f8 	.word	0x240015f8
 8015138:	2400001c 	.word	0x2400001c
 801513c:	2400009c 	.word	0x2400009c

08015140 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8015144:	2200      	movs	r2, #0
 8015146:	4905      	ldr	r1, [pc, #20]	; (801515c <CDC_Init_HS+0x1c>)
 8015148:	4805      	ldr	r0, [pc, #20]	; (8015160 <CDC_Init_HS+0x20>)
 801514a:	f7fe fbfd 	bl	8013948 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801514e:	4905      	ldr	r1, [pc, #20]	; (8015164 <CDC_Init_HS+0x24>)
 8015150:	4803      	ldr	r0, [pc, #12]	; (8015160 <CDC_Init_HS+0x20>)
 8015152:	f7fe fc1b 	bl	801398c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015156:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015158:	4618      	mov	r0, r3
 801515a:	bd80      	pop	{r7, pc}
 801515c:	240020d4 	.word	0x240020d4
 8015160:	240015f8 	.word	0x240015f8
 8015164:	240018d4 	.word	0x240018d4

08015168 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8015168:	b480      	push	{r7}
 801516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801516c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801516e:	4618      	mov	r0, r3
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr

08015178 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015178:	b480      	push	{r7}
 801517a:	b083      	sub	sp, #12
 801517c:	af00      	add	r7, sp, #0
 801517e:	4603      	mov	r3, r0
 8015180:	6039      	str	r1, [r7, #0]
 8015182:	71fb      	strb	r3, [r7, #7]
 8015184:	4613      	mov	r3, r2
 8015186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8015188:	79fb      	ldrb	r3, [r7, #7]
 801518a:	2b23      	cmp	r3, #35	; 0x23
 801518c:	d84a      	bhi.n	8015224 <CDC_Control_HS+0xac>
 801518e:	a201      	add	r2, pc, #4	; (adr r2, 8015194 <CDC_Control_HS+0x1c>)
 8015190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015194:	08015225 	.word	0x08015225
 8015198:	08015225 	.word	0x08015225
 801519c:	08015225 	.word	0x08015225
 80151a0:	08015225 	.word	0x08015225
 80151a4:	08015225 	.word	0x08015225
 80151a8:	08015225 	.word	0x08015225
 80151ac:	08015225 	.word	0x08015225
 80151b0:	08015225 	.word	0x08015225
 80151b4:	08015225 	.word	0x08015225
 80151b8:	08015225 	.word	0x08015225
 80151bc:	08015225 	.word	0x08015225
 80151c0:	08015225 	.word	0x08015225
 80151c4:	08015225 	.word	0x08015225
 80151c8:	08015225 	.word	0x08015225
 80151cc:	08015225 	.word	0x08015225
 80151d0:	08015225 	.word	0x08015225
 80151d4:	08015225 	.word	0x08015225
 80151d8:	08015225 	.word	0x08015225
 80151dc:	08015225 	.word	0x08015225
 80151e0:	08015225 	.word	0x08015225
 80151e4:	08015225 	.word	0x08015225
 80151e8:	08015225 	.word	0x08015225
 80151ec:	08015225 	.word	0x08015225
 80151f0:	08015225 	.word	0x08015225
 80151f4:	08015225 	.word	0x08015225
 80151f8:	08015225 	.word	0x08015225
 80151fc:	08015225 	.word	0x08015225
 8015200:	08015225 	.word	0x08015225
 8015204:	08015225 	.word	0x08015225
 8015208:	08015225 	.word	0x08015225
 801520c:	08015225 	.word	0x08015225
 8015210:	08015225 	.word	0x08015225
 8015214:	08015225 	.word	0x08015225
 8015218:	08015225 	.word	0x08015225
 801521c:	08015225 	.word	0x08015225
 8015220:	08015225 	.word	0x08015225
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015224:	bf00      	nop
  }

  return (USBD_OK);
 8015226:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8015228:	4618      	mov	r0, r3
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b082      	sub	sp, #8
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801523e:	6879      	ldr	r1, [r7, #4]
 8015240:	4805      	ldr	r0, [pc, #20]	; (8015258 <CDC_Receive_HS+0x24>)
 8015242:	f7fe fba3 	bl	801398c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8015246:	4804      	ldr	r0, [pc, #16]	; (8015258 <CDC_Receive_HS+0x24>)
 8015248:	f7fe fbbe 	bl	80139c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801524c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801524e:	4618      	mov	r0, r3
 8015250:	3708      	adds	r7, #8
 8015252:	46bd      	mov	sp, r7
 8015254:	bd80      	pop	{r7, pc}
 8015256:	bf00      	nop
 8015258:	240015f8 	.word	0x240015f8

0801525c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801525c:	b480      	push	{r7}
 801525e:	b087      	sub	sp, #28
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	4613      	mov	r3, r2
 8015268:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801526a:	2300      	movs	r3, #0
 801526c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801526e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015272:	4618      	mov	r0, r3
 8015274:	371c      	adds	r7, #28
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
	...

08015280 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	6039      	str	r1, [r7, #0]
 801528a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	2212      	movs	r2, #18
 8015290:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8015292:	4b03      	ldr	r3, [pc, #12]	; (80152a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	240000cc 	.word	0x240000cc

080152a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	4603      	mov	r3, r0
 80152ac:	6039      	str	r1, [r7, #0]
 80152ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	2204      	movs	r2, #4
 80152b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80152b6:	4b03      	ldr	r3, [pc, #12]	; (80152c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr
 80152c4:	240000e0 	.word	0x240000e0

080152c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	4603      	mov	r3, r0
 80152d0:	6039      	str	r1, [r7, #0]
 80152d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80152d4:	79fb      	ldrb	r3, [r7, #7]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d105      	bne.n	80152e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80152da:	683a      	ldr	r2, [r7, #0]
 80152dc:	4907      	ldr	r1, [pc, #28]	; (80152fc <USBD_HS_ProductStrDescriptor+0x34>)
 80152de:	4808      	ldr	r0, [pc, #32]	; (8015300 <USBD_HS_ProductStrDescriptor+0x38>)
 80152e0:	f7ff fdc0 	bl	8014e64 <USBD_GetString>
 80152e4:	e004      	b.n	80152f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80152e6:	683a      	ldr	r2, [r7, #0]
 80152e8:	4904      	ldr	r1, [pc, #16]	; (80152fc <USBD_HS_ProductStrDescriptor+0x34>)
 80152ea:	4805      	ldr	r0, [pc, #20]	; (8015300 <USBD_HS_ProductStrDescriptor+0x38>)
 80152ec:	f7ff fdba 	bl	8014e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80152f0:	4b02      	ldr	r3, [pc, #8]	; (80152fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80152f2:	4618      	mov	r0, r3
 80152f4:	3708      	adds	r7, #8
 80152f6:	46bd      	mov	sp, r7
 80152f8:	bd80      	pop	{r7, pc}
 80152fa:	bf00      	nop
 80152fc:	240028d4 	.word	0x240028d4
 8015300:	0801a280 	.word	0x0801a280

08015304 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b082      	sub	sp, #8
 8015308:	af00      	add	r7, sp, #0
 801530a:	4603      	mov	r3, r0
 801530c:	6039      	str	r1, [r7, #0]
 801530e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015310:	683a      	ldr	r2, [r7, #0]
 8015312:	4904      	ldr	r1, [pc, #16]	; (8015324 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8015314:	4804      	ldr	r0, [pc, #16]	; (8015328 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8015316:	f7ff fda5 	bl	8014e64 <USBD_GetString>
  return USBD_StrDesc;
 801531a:	4b02      	ldr	r3, [pc, #8]	; (8015324 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801531c:	4618      	mov	r0, r3
 801531e:	3708      	adds	r7, #8
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	240028d4 	.word	0x240028d4
 8015328:	0801a29c 	.word	0x0801a29c

0801532c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	4603      	mov	r3, r0
 8015334:	6039      	str	r1, [r7, #0]
 8015336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	221a      	movs	r2, #26
 801533c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801533e:	f000 f843 	bl	80153c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015342:	4b02      	ldr	r3, [pc, #8]	; (801534c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8015344:	4618      	mov	r0, r3
 8015346:	3708      	adds	r7, #8
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	240000e4 	.word	0x240000e4

08015350 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	4603      	mov	r3, r0
 8015358:	6039      	str	r1, [r7, #0]
 801535a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801535c:	79fb      	ldrb	r3, [r7, #7]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d105      	bne.n	801536e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015362:	683a      	ldr	r2, [r7, #0]
 8015364:	4907      	ldr	r1, [pc, #28]	; (8015384 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015366:	4808      	ldr	r0, [pc, #32]	; (8015388 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015368:	f7ff fd7c 	bl	8014e64 <USBD_GetString>
 801536c:	e004      	b.n	8015378 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801536e:	683a      	ldr	r2, [r7, #0]
 8015370:	4904      	ldr	r1, [pc, #16]	; (8015384 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015372:	4805      	ldr	r0, [pc, #20]	; (8015388 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015374:	f7ff fd76 	bl	8014e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015378:	4b02      	ldr	r3, [pc, #8]	; (8015384 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801537a:	4618      	mov	r0, r3
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	240028d4 	.word	0x240028d4
 8015388:	0801a2a0 	.word	0x0801a2a0

0801538c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	4603      	mov	r3, r0
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d105      	bne.n	80153aa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801539e:	683a      	ldr	r2, [r7, #0]
 80153a0:	4907      	ldr	r1, [pc, #28]	; (80153c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80153a2:	4808      	ldr	r0, [pc, #32]	; (80153c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80153a4:	f7ff fd5e 	bl	8014e64 <USBD_GetString>
 80153a8:	e004      	b.n	80153b4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80153aa:	683a      	ldr	r2, [r7, #0]
 80153ac:	4904      	ldr	r1, [pc, #16]	; (80153c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80153ae:	4805      	ldr	r0, [pc, #20]	; (80153c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80153b0:	f7ff fd58 	bl	8014e64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80153b4:	4b02      	ldr	r3, [pc, #8]	; (80153c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3708      	adds	r7, #8
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	240028d4 	.word	0x240028d4
 80153c4:	0801a2ac 	.word	0x0801a2ac

080153c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80153c8:	b580      	push	{r7, lr}
 80153ca:	b084      	sub	sp, #16
 80153cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80153ce:	4b0f      	ldr	r3, [pc, #60]	; (801540c <Get_SerialNum+0x44>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80153d4:	4b0e      	ldr	r3, [pc, #56]	; (8015410 <Get_SerialNum+0x48>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80153da:	4b0e      	ldr	r3, [pc, #56]	; (8015414 <Get_SerialNum+0x4c>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80153e0:	68fa      	ldr	r2, [r7, #12]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	4413      	add	r3, r2
 80153e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d009      	beq.n	8015402 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80153ee:	2208      	movs	r2, #8
 80153f0:	4909      	ldr	r1, [pc, #36]	; (8015418 <Get_SerialNum+0x50>)
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f000 f814 	bl	8015420 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80153f8:	2204      	movs	r2, #4
 80153fa:	4908      	ldr	r1, [pc, #32]	; (801541c <Get_SerialNum+0x54>)
 80153fc:	68b8      	ldr	r0, [r7, #8]
 80153fe:	f000 f80f 	bl	8015420 <IntToUnicode>
  }
}
 8015402:	bf00      	nop
 8015404:	3710      	adds	r7, #16
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	1ff1e800 	.word	0x1ff1e800
 8015410:	1ff1e804 	.word	0x1ff1e804
 8015414:	1ff1e808 	.word	0x1ff1e808
 8015418:	240000e6 	.word	0x240000e6
 801541c:	240000f6 	.word	0x240000f6

08015420 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015420:	b480      	push	{r7}
 8015422:	b087      	sub	sp, #28
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	4613      	mov	r3, r2
 801542c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015432:	2300      	movs	r3, #0
 8015434:	75fb      	strb	r3, [r7, #23]
 8015436:	e027      	b.n	8015488 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	0f1b      	lsrs	r3, r3, #28
 801543c:	2b09      	cmp	r3, #9
 801543e:	d80b      	bhi.n	8015458 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	0f1b      	lsrs	r3, r3, #28
 8015444:	b2da      	uxtb	r2, r3
 8015446:	7dfb      	ldrb	r3, [r7, #23]
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	4619      	mov	r1, r3
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	440b      	add	r3, r1
 8015450:	3230      	adds	r2, #48	; 0x30
 8015452:	b2d2      	uxtb	r2, r2
 8015454:	701a      	strb	r2, [r3, #0]
 8015456:	e00a      	b.n	801546e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	0f1b      	lsrs	r3, r3, #28
 801545c:	b2da      	uxtb	r2, r3
 801545e:	7dfb      	ldrb	r3, [r7, #23]
 8015460:	005b      	lsls	r3, r3, #1
 8015462:	4619      	mov	r1, r3
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	440b      	add	r3, r1
 8015468:	3237      	adds	r2, #55	; 0x37
 801546a:	b2d2      	uxtb	r2, r2
 801546c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	011b      	lsls	r3, r3, #4
 8015472:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015474:	7dfb      	ldrb	r3, [r7, #23]
 8015476:	005b      	lsls	r3, r3, #1
 8015478:	3301      	adds	r3, #1
 801547a:	68ba      	ldr	r2, [r7, #8]
 801547c:	4413      	add	r3, r2
 801547e:	2200      	movs	r2, #0
 8015480:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015482:	7dfb      	ldrb	r3, [r7, #23]
 8015484:	3301      	adds	r3, #1
 8015486:	75fb      	strb	r3, [r7, #23]
 8015488:	7dfa      	ldrb	r2, [r7, #23]
 801548a:	79fb      	ldrb	r3, [r7, #7]
 801548c:	429a      	cmp	r2, r3
 801548e:	d3d3      	bcc.n	8015438 <IntToUnicode+0x18>
  }
}
 8015490:	bf00      	nop
 8015492:	bf00      	nop
 8015494:	371c      	adds	r7, #28
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr
	...

080154a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b0b2      	sub	sp, #200	; 0xc8
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80154a8:	f107 0310 	add.w	r3, r7, #16
 80154ac:	22b8      	movs	r2, #184	; 0xb8
 80154ae:	2100      	movs	r1, #0
 80154b0:	4618      	mov	r0, r3
 80154b2:	f000 fb39 	bl	8015b28 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	4a1a      	ldr	r2, [pc, #104]	; (8015524 <HAL_PCD_MspInit+0x84>)
 80154bc:	4293      	cmp	r3, r2
 80154be:	d12c      	bne.n	801551a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80154c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80154c4:	f04f 0300 	mov.w	r3, #0
 80154c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80154cc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80154d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80154d4:	f107 0310 	add.w	r3, r7, #16
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f4 fcc5 	bl	8009e68 <HAL_RCCEx_PeriphCLKConfig>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d001      	beq.n	80154e8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80154e4:	f7ec fcb0 	bl	8001e48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80154e8:	f7f3 fcde 	bl	8008ea8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80154ec:	4b0e      	ldr	r3, [pc, #56]	; (8015528 <HAL_PCD_MspInit+0x88>)
 80154ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80154f2:	4a0d      	ldr	r2, [pc, #52]	; (8015528 <HAL_PCD_MspInit+0x88>)
 80154f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80154f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80154fc:	4b0a      	ldr	r3, [pc, #40]	; (8015528 <HAL_PCD_MspInit+0x88>)
 80154fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015506:	60fb      	str	r3, [r7, #12]
 8015508:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801550a:	2200      	movs	r2, #0
 801550c:	2100      	movs	r1, #0
 801550e:	204d      	movs	r0, #77	; 0x4d
 8015510:	f7ef fa4d 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015514:	204d      	movs	r0, #77	; 0x4d
 8015516:	f7ef fa64 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801551a:	bf00      	nop
 801551c:	37c8      	adds	r7, #200	; 0xc8
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}
 8015522:	bf00      	nop
 8015524:	40040000 	.word	0x40040000
 8015528:	58024400 	.word	0x58024400

0801552c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015540:	4619      	mov	r1, r3
 8015542:	4610      	mov	r0, r2
 8015544:	f7fe fb29 	bl	8013b9a <USBD_LL_SetupStage>
}
 8015548:	bf00      	nop
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	460b      	mov	r3, r1
 801555a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015562:	78fa      	ldrb	r2, [r7, #3]
 8015564:	6879      	ldr	r1, [r7, #4]
 8015566:	4613      	mov	r3, r2
 8015568:	00db      	lsls	r3, r3, #3
 801556a:	4413      	add	r3, r2
 801556c:	009b      	lsls	r3, r3, #2
 801556e:	440b      	add	r3, r1
 8015570:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	78fb      	ldrb	r3, [r7, #3]
 8015578:	4619      	mov	r1, r3
 801557a:	f7fe fb63 	bl	8013c44 <USBD_LL_DataOutStage>
}
 801557e:	bf00      	nop
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
 801558e:	460b      	mov	r3, r1
 8015590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015598:	78fa      	ldrb	r2, [r7, #3]
 801559a:	6879      	ldr	r1, [r7, #4]
 801559c:	4613      	mov	r3, r2
 801559e:	00db      	lsls	r3, r3, #3
 80155a0:	4413      	add	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	440b      	add	r3, r1
 80155a6:	3348      	adds	r3, #72	; 0x48
 80155a8:	681a      	ldr	r2, [r3, #0]
 80155aa:	78fb      	ldrb	r3, [r7, #3]
 80155ac:	4619      	mov	r1, r3
 80155ae:	f7fe fbfc 	bl	8013daa <USBD_LL_DataInStage>
}
 80155b2:	bf00      	nop
 80155b4:	3708      	adds	r7, #8
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}

080155ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155ba:	b580      	push	{r7, lr}
 80155bc:	b082      	sub	sp, #8
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80155c8:	4618      	mov	r0, r3
 80155ca:	f7fe fd36 	bl	801403a <USBD_LL_SOF>
}
 80155ce:	bf00      	nop
 80155d0:	3708      	adds	r7, #8
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b084      	sub	sp, #16
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80155de:	2301      	movs	r3, #1
 80155e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	691b      	ldr	r3, [r3, #16]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d102      	bne.n	80155f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80155ea:	2300      	movs	r3, #0
 80155ec:	73fb      	strb	r3, [r7, #15]
 80155ee:	e008      	b.n	8015602 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	691b      	ldr	r3, [r3, #16]
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d102      	bne.n	80155fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80155f8:	2301      	movs	r3, #1
 80155fa:	73fb      	strb	r3, [r7, #15]
 80155fc:	e001      	b.n	8015602 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80155fe:	f7ec fc23 	bl	8001e48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015608:	7bfa      	ldrb	r2, [r7, #15]
 801560a:	4611      	mov	r1, r2
 801560c:	4618      	mov	r0, r3
 801560e:	f7fe fcd0 	bl	8013fb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015618:	4618      	mov	r0, r3
 801561a:	f7fe fc78 	bl	8013f0e <USBD_LL_Reset>
}
 801561e:	bf00      	nop
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
	...

08015628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015636:	4618      	mov	r0, r3
 8015638:	f7fe fccb 	bl	8013fd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	6812      	ldr	r2, [r2, #0]
 801564a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801564e:	f043 0301 	orr.w	r3, r3, #1
 8015652:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6a1b      	ldr	r3, [r3, #32]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d005      	beq.n	8015668 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801565c:	4b04      	ldr	r3, [pc, #16]	; (8015670 <HAL_PCD_SuspendCallback+0x48>)
 801565e:	691b      	ldr	r3, [r3, #16]
 8015660:	4a03      	ldr	r2, [pc, #12]	; (8015670 <HAL_PCD_SuspendCallback+0x48>)
 8015662:	f043 0306 	orr.w	r3, r3, #6
 8015666:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015668:	bf00      	nop
 801566a:	3708      	adds	r7, #8
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	e000ed00 	.word	0xe000ed00

08015674 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015682:	4618      	mov	r0, r3
 8015684:	f7fe fcc1 	bl	801400a <USBD_LL_Resume>
}
 8015688:	bf00      	nop
 801568a:	3708      	adds	r7, #8
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	460b      	mov	r3, r1
 801569a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80156a2:	78fa      	ldrb	r2, [r7, #3]
 80156a4:	4611      	mov	r1, r2
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7fe fd19 	bl	80140de <USBD_LL_IsoOUTIncomplete>
}
 80156ac:	bf00      	nop
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	460b      	mov	r3, r1
 80156be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80156c6:	78fa      	ldrb	r2, [r7, #3]
 80156c8:	4611      	mov	r1, r2
 80156ca:	4618      	mov	r0, r3
 80156cc:	f7fe fcd5 	bl	801407a <USBD_LL_IsoINIncomplete>
}
 80156d0:	bf00      	nop
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7fe fd2b 	bl	8014142 <USBD_LL_DevConnected>
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015702:	4618      	mov	r0, r3
 8015704:	f7fe fd28 	bl	8014158 <USBD_LL_DevDisconnected>
}
 8015708:	bf00      	nop
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}

08015710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	2b01      	cmp	r3, #1
 801571e:	d140      	bne.n	80157a2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015720:	4a22      	ldr	r2, [pc, #136]	; (80157ac <USBD_LL_Init+0x9c>)
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4a20      	ldr	r2, [pc, #128]	; (80157ac <USBD_LL_Init+0x9c>)
 801572c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015730:	4b1e      	ldr	r3, [pc, #120]	; (80157ac <USBD_LL_Init+0x9c>)
 8015732:	4a1f      	ldr	r2, [pc, #124]	; (80157b0 <USBD_LL_Init+0xa0>)
 8015734:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8015736:	4b1d      	ldr	r3, [pc, #116]	; (80157ac <USBD_LL_Init+0x9c>)
 8015738:	2209      	movs	r2, #9
 801573a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801573c:	4b1b      	ldr	r3, [pc, #108]	; (80157ac <USBD_LL_Init+0x9c>)
 801573e:	2202      	movs	r2, #2
 8015740:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8015742:	4b1a      	ldr	r3, [pc, #104]	; (80157ac <USBD_LL_Init+0x9c>)
 8015744:	2200      	movs	r2, #0
 8015746:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015748:	4b18      	ldr	r3, [pc, #96]	; (80157ac <USBD_LL_Init+0x9c>)
 801574a:	2202      	movs	r2, #2
 801574c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801574e:	4b17      	ldr	r3, [pc, #92]	; (80157ac <USBD_LL_Init+0x9c>)
 8015750:	2200      	movs	r2, #0
 8015752:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015754:	4b15      	ldr	r3, [pc, #84]	; (80157ac <USBD_LL_Init+0x9c>)
 8015756:	2200      	movs	r2, #0
 8015758:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801575a:	4b14      	ldr	r3, [pc, #80]	; (80157ac <USBD_LL_Init+0x9c>)
 801575c:	2200      	movs	r2, #0
 801575e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015760:	4b12      	ldr	r3, [pc, #72]	; (80157ac <USBD_LL_Init+0x9c>)
 8015762:	2200      	movs	r2, #0
 8015764:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015766:	4b11      	ldr	r3, [pc, #68]	; (80157ac <USBD_LL_Init+0x9c>)
 8015768:	2200      	movs	r2, #0
 801576a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801576c:	4b0f      	ldr	r3, [pc, #60]	; (80157ac <USBD_LL_Init+0x9c>)
 801576e:	2200      	movs	r2, #0
 8015770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8015772:	480e      	ldr	r0, [pc, #56]	; (80157ac <USBD_LL_Init+0x9c>)
 8015774:	f7f2 f8a5 	bl	80078c2 <HAL_PCD_Init>
 8015778:	4603      	mov	r3, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	d001      	beq.n	8015782 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801577e:	f7ec fb63 	bl	8001e48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8015782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015786:	4809      	ldr	r0, [pc, #36]	; (80157ac <USBD_LL_Init+0x9c>)
 8015788:	f7f3 fb13 	bl	8008db2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801578c:	2280      	movs	r2, #128	; 0x80
 801578e:	2100      	movs	r1, #0
 8015790:	4806      	ldr	r0, [pc, #24]	; (80157ac <USBD_LL_Init+0x9c>)
 8015792:	f7f3 fac7 	bl	8008d24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8015796:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801579a:	2101      	movs	r1, #1
 801579c:	4803      	ldr	r0, [pc, #12]	; (80157ac <USBD_LL_Init+0x9c>)
 801579e:	f7f3 fac1 	bl	8008d24 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80157a2:	2300      	movs	r3, #0
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	24002ad4 	.word	0x24002ad4
 80157b0:	40040000 	.word	0x40040000

080157b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157bc:	2300      	movs	r3, #0
 80157be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157c0:	2300      	movs	r3, #0
 80157c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7f2 f99d 	bl	8007b0a <HAL_PCD_Start>
 80157d0:	4603      	mov	r3, r0
 80157d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157d4:	7bfb      	ldrb	r3, [r7, #15]
 80157d6:	4618      	mov	r0, r3
 80157d8:	f000 f942 	bl	8015a60 <USBD_Get_USB_Status>
 80157dc:	4603      	mov	r3, r0
 80157de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3710      	adds	r7, #16
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b084      	sub	sp, #16
 80157ee:	af00      	add	r7, sp, #0
 80157f0:	6078      	str	r0, [r7, #4]
 80157f2:	4608      	mov	r0, r1
 80157f4:	4611      	mov	r1, r2
 80157f6:	461a      	mov	r2, r3
 80157f8:	4603      	mov	r3, r0
 80157fa:	70fb      	strb	r3, [r7, #3]
 80157fc:	460b      	mov	r3, r1
 80157fe:	70bb      	strb	r3, [r7, #2]
 8015800:	4613      	mov	r3, r2
 8015802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015804:	2300      	movs	r3, #0
 8015806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015808:	2300      	movs	r3, #0
 801580a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015812:	78bb      	ldrb	r3, [r7, #2]
 8015814:	883a      	ldrh	r2, [r7, #0]
 8015816:	78f9      	ldrb	r1, [r7, #3]
 8015818:	f7f2 fe9d 	bl	8008556 <HAL_PCD_EP_Open>
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015820:	7bfb      	ldrb	r3, [r7, #15]
 8015822:	4618      	mov	r0, r3
 8015824:	f000 f91c 	bl	8015a60 <USBD_Get_USB_Status>
 8015828:	4603      	mov	r3, r0
 801582a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801582c:	7bbb      	ldrb	r3, [r7, #14]
}
 801582e:	4618      	mov	r0, r3
 8015830:	3710      	adds	r7, #16
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}

08015836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b084      	sub	sp, #16
 801583a:	af00      	add	r7, sp, #0
 801583c:	6078      	str	r0, [r7, #4]
 801583e:	460b      	mov	r3, r1
 8015840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015842:	2300      	movs	r3, #0
 8015844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015846:	2300      	movs	r3, #0
 8015848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015850:	78fa      	ldrb	r2, [r7, #3]
 8015852:	4611      	mov	r1, r2
 8015854:	4618      	mov	r0, r3
 8015856:	f7f2 fee6 	bl	8008626 <HAL_PCD_EP_Close>
 801585a:	4603      	mov	r3, r0
 801585c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801585e:	7bfb      	ldrb	r3, [r7, #15]
 8015860:	4618      	mov	r0, r3
 8015862:	f000 f8fd 	bl	8015a60 <USBD_Get_USB_Status>
 8015866:	4603      	mov	r3, r0
 8015868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801586a:	7bbb      	ldrb	r3, [r7, #14]
}
 801586c:	4618      	mov	r0, r3
 801586e:	3710      	adds	r7, #16
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	460b      	mov	r3, r1
 801587e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015880:	2300      	movs	r3, #0
 8015882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015884:	2300      	movs	r3, #0
 8015886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801588e:	78fa      	ldrb	r2, [r7, #3]
 8015890:	4611      	mov	r1, r2
 8015892:	4618      	mov	r0, r3
 8015894:	f7f2 ffa0 	bl	80087d8 <HAL_PCD_EP_SetStall>
 8015898:	4603      	mov	r3, r0
 801589a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801589c:	7bfb      	ldrb	r3, [r7, #15]
 801589e:	4618      	mov	r0, r3
 80158a0:	f000 f8de 	bl	8015a60 <USBD_Get_USB_Status>
 80158a4:	4603      	mov	r3, r0
 80158a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3710      	adds	r7, #16
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}

080158b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158b2:	b580      	push	{r7, lr}
 80158b4:	b084      	sub	sp, #16
 80158b6:	af00      	add	r7, sp, #0
 80158b8:	6078      	str	r0, [r7, #4]
 80158ba:	460b      	mov	r3, r1
 80158bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158be:	2300      	movs	r3, #0
 80158c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158c2:	2300      	movs	r3, #0
 80158c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158cc:	78fa      	ldrb	r2, [r7, #3]
 80158ce:	4611      	mov	r1, r2
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f2 ffe5 	bl	80088a0 <HAL_PCD_EP_ClrStall>
 80158d6:	4603      	mov	r3, r0
 80158d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158da:	7bfb      	ldrb	r3, [r7, #15]
 80158dc:	4618      	mov	r0, r3
 80158de:	f000 f8bf 	bl	8015a60 <USBD_Get_USB_Status>
 80158e2:	4603      	mov	r3, r0
 80158e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80158e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80158e8:	4618      	mov	r0, r3
 80158ea:	3710      	adds	r7, #16
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b085      	sub	sp, #20
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	460b      	mov	r3, r1
 80158fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015908:	2b00      	cmp	r3, #0
 801590a:	da0b      	bge.n	8015924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801590c:	78fb      	ldrb	r3, [r7, #3]
 801590e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015912:	68f9      	ldr	r1, [r7, #12]
 8015914:	4613      	mov	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	4413      	add	r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	440b      	add	r3, r1
 801591e:	333e      	adds	r3, #62	; 0x3e
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	e00b      	b.n	801593c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015924:	78fb      	ldrb	r3, [r7, #3]
 8015926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801592a:	68f9      	ldr	r1, [r7, #12]
 801592c:	4613      	mov	r3, r2
 801592e:	00db      	lsls	r3, r3, #3
 8015930:	4413      	add	r3, r2
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	440b      	add	r3, r1
 8015936:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801593a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801593c:	4618      	mov	r0, r3
 801593e:	3714      	adds	r7, #20
 8015940:	46bd      	mov	sp, r7
 8015942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015946:	4770      	bx	lr

08015948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	460b      	mov	r3, r1
 8015952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015954:	2300      	movs	r3, #0
 8015956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015958:	2300      	movs	r3, #0
 801595a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015962:	78fa      	ldrb	r2, [r7, #3]
 8015964:	4611      	mov	r1, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f7f2 fdd0 	bl	800850c <HAL_PCD_SetAddress>
 801596c:	4603      	mov	r3, r0
 801596e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015970:	7bfb      	ldrb	r3, [r7, #15]
 8015972:	4618      	mov	r0, r3
 8015974:	f000 f874 	bl	8015a60 <USBD_Get_USB_Status>
 8015978:	4603      	mov	r3, r0
 801597a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801597c:	7bbb      	ldrb	r3, [r7, #14]
}
 801597e:	4618      	mov	r0, r3
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b086      	sub	sp, #24
 801598a:	af00      	add	r7, sp, #0
 801598c:	60f8      	str	r0, [r7, #12]
 801598e:	607a      	str	r2, [r7, #4]
 8015990:	603b      	str	r3, [r7, #0]
 8015992:	460b      	mov	r3, r1
 8015994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015996:	2300      	movs	r3, #0
 8015998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801599a:	2300      	movs	r3, #0
 801599c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80159a4:	7af9      	ldrb	r1, [r7, #11]
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	f7f2 feda 	bl	8008762 <HAL_PCD_EP_Transmit>
 80159ae:	4603      	mov	r3, r0
 80159b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159b2:	7dfb      	ldrb	r3, [r7, #23]
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 f853 	bl	8015a60 <USBD_Get_USB_Status>
 80159ba:	4603      	mov	r3, r0
 80159bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80159be:	7dbb      	ldrb	r3, [r7, #22]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3718      	adds	r7, #24
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}

080159c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	607a      	str	r2, [r7, #4]
 80159d2:	603b      	str	r3, [r7, #0]
 80159d4:	460b      	mov	r3, r1
 80159d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159d8:	2300      	movs	r3, #0
 80159da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159dc:	2300      	movs	r3, #0
 80159de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80159e6:	7af9      	ldrb	r1, [r7, #11]
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	f7f2 fe65 	bl	80086ba <HAL_PCD_EP_Receive>
 80159f0:	4603      	mov	r3, r0
 80159f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159f4:	7dfb      	ldrb	r3, [r7, #23]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f000 f832 	bl	8015a60 <USBD_Get_USB_Status>
 80159fc:	4603      	mov	r3, r0
 80159fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3718      	adds	r7, #24
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}

08015a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b082      	sub	sp, #8
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
 8015a12:	460b      	mov	r3, r1
 8015a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a1c:	78fa      	ldrb	r2, [r7, #3]
 8015a1e:	4611      	mov	r1, r2
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f2 fe86 	bl	8008732 <HAL_PCD_EP_GetRxCount>
 8015a26:	4603      	mov	r3, r0
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3708      	adds	r7, #8
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015a30:	b480      	push	{r7}
 8015a32:	b083      	sub	sp, #12
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015a38:	4b03      	ldr	r3, [pc, #12]	; (8015a48 <USBD_static_malloc+0x18>)
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	370c      	adds	r7, #12
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a44:	4770      	bx	lr
 8015a46:	bf00      	nop
 8015a48:	24002fe0 	.word	0x24002fe0

08015a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015a54:	bf00      	nop
 8015a56:	370c      	adds	r7, #12
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr

08015a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a60:	b480      	push	{r7}
 8015a62:	b085      	sub	sp, #20
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	4603      	mov	r3, r0
 8015a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015a6e:	79fb      	ldrb	r3, [r7, #7]
 8015a70:	2b03      	cmp	r3, #3
 8015a72:	d817      	bhi.n	8015aa4 <USBD_Get_USB_Status+0x44>
 8015a74:	a201      	add	r2, pc, #4	; (adr r2, 8015a7c <USBD_Get_USB_Status+0x1c>)
 8015a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a7a:	bf00      	nop
 8015a7c:	08015a8d 	.word	0x08015a8d
 8015a80:	08015a93 	.word	0x08015a93
 8015a84:	08015a99 	.word	0x08015a99
 8015a88:	08015a9f 	.word	0x08015a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8015a90:	e00b      	b.n	8015aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015a92:	2303      	movs	r3, #3
 8015a94:	73fb      	strb	r3, [r7, #15]
    break;
 8015a96:	e008      	b.n	8015aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8015a9c:	e005      	b.n	8015aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015a9e:	2303      	movs	r3, #3
 8015aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa2:	e002      	b.n	8015aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015aa4:	2303      	movs	r3, #3
 8015aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8015aa8:	bf00      	nop
  }
  return usb_status;
 8015aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3714      	adds	r7, #20
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <__errno>:
 8015ab8:	4b01      	ldr	r3, [pc, #4]	; (8015ac0 <__errno+0x8>)
 8015aba:	6818      	ldr	r0, [r3, #0]
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	24000100 	.word	0x24000100

08015ac4 <__libc_init_array>:
 8015ac4:	b570      	push	{r4, r5, r6, lr}
 8015ac6:	4d0d      	ldr	r5, [pc, #52]	; (8015afc <__libc_init_array+0x38>)
 8015ac8:	4c0d      	ldr	r4, [pc, #52]	; (8015b00 <__libc_init_array+0x3c>)
 8015aca:	1b64      	subs	r4, r4, r5
 8015acc:	10a4      	asrs	r4, r4, #2
 8015ace:	2600      	movs	r6, #0
 8015ad0:	42a6      	cmp	r6, r4
 8015ad2:	d109      	bne.n	8015ae8 <__libc_init_array+0x24>
 8015ad4:	4d0b      	ldr	r5, [pc, #44]	; (8015b04 <__libc_init_array+0x40>)
 8015ad6:	4c0c      	ldr	r4, [pc, #48]	; (8015b08 <__libc_init_array+0x44>)
 8015ad8:	f004 fb86 	bl	801a1e8 <_init>
 8015adc:	1b64      	subs	r4, r4, r5
 8015ade:	10a4      	asrs	r4, r4, #2
 8015ae0:	2600      	movs	r6, #0
 8015ae2:	42a6      	cmp	r6, r4
 8015ae4:	d105      	bne.n	8015af2 <__libc_init_array+0x2e>
 8015ae6:	bd70      	pop	{r4, r5, r6, pc}
 8015ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015aec:	4798      	blx	r3
 8015aee:	3601      	adds	r6, #1
 8015af0:	e7ee      	b.n	8015ad0 <__libc_init_array+0xc>
 8015af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015af6:	4798      	blx	r3
 8015af8:	3601      	adds	r6, #1
 8015afa:	e7f2      	b.n	8015ae2 <__libc_init_array+0x1e>
 8015afc:	0801a82c 	.word	0x0801a82c
 8015b00:	0801a82c 	.word	0x0801a82c
 8015b04:	0801a82c 	.word	0x0801a82c
 8015b08:	0801a830 	.word	0x0801a830

08015b0c <memcpy>:
 8015b0c:	440a      	add	r2, r1
 8015b0e:	4291      	cmp	r1, r2
 8015b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8015b14:	d100      	bne.n	8015b18 <memcpy+0xc>
 8015b16:	4770      	bx	lr
 8015b18:	b510      	push	{r4, lr}
 8015b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b22:	4291      	cmp	r1, r2
 8015b24:	d1f9      	bne.n	8015b1a <memcpy+0xe>
 8015b26:	bd10      	pop	{r4, pc}

08015b28 <memset>:
 8015b28:	4402      	add	r2, r0
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d100      	bne.n	8015b32 <memset+0xa>
 8015b30:	4770      	bx	lr
 8015b32:	f803 1b01 	strb.w	r1, [r3], #1
 8015b36:	e7f9      	b.n	8015b2c <memset+0x4>

08015b38 <__cvt>:
 8015b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b3a:	ed2d 8b02 	vpush	{d8}
 8015b3e:	eeb0 8b40 	vmov.f64	d8, d0
 8015b42:	b085      	sub	sp, #20
 8015b44:	4617      	mov	r7, r2
 8015b46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015b48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015b4a:	ee18 2a90 	vmov	r2, s17
 8015b4e:	f025 0520 	bic.w	r5, r5, #32
 8015b52:	2a00      	cmp	r2, #0
 8015b54:	bfb6      	itet	lt
 8015b56:	222d      	movlt	r2, #45	; 0x2d
 8015b58:	2200      	movge	r2, #0
 8015b5a:	eeb1 8b40 	vneglt.f64	d8, d0
 8015b5e:	2d46      	cmp	r5, #70	; 0x46
 8015b60:	460c      	mov	r4, r1
 8015b62:	701a      	strb	r2, [r3, #0]
 8015b64:	d004      	beq.n	8015b70 <__cvt+0x38>
 8015b66:	2d45      	cmp	r5, #69	; 0x45
 8015b68:	d100      	bne.n	8015b6c <__cvt+0x34>
 8015b6a:	3401      	adds	r4, #1
 8015b6c:	2102      	movs	r1, #2
 8015b6e:	e000      	b.n	8015b72 <__cvt+0x3a>
 8015b70:	2103      	movs	r1, #3
 8015b72:	ab03      	add	r3, sp, #12
 8015b74:	9301      	str	r3, [sp, #4]
 8015b76:	ab02      	add	r3, sp, #8
 8015b78:	9300      	str	r3, [sp, #0]
 8015b7a:	4622      	mov	r2, r4
 8015b7c:	4633      	mov	r3, r6
 8015b7e:	eeb0 0b48 	vmov.f64	d0, d8
 8015b82:	f001 fd95 	bl	80176b0 <_dtoa_r>
 8015b86:	2d47      	cmp	r5, #71	; 0x47
 8015b88:	d101      	bne.n	8015b8e <__cvt+0x56>
 8015b8a:	07fb      	lsls	r3, r7, #31
 8015b8c:	d51a      	bpl.n	8015bc4 <__cvt+0x8c>
 8015b8e:	2d46      	cmp	r5, #70	; 0x46
 8015b90:	eb00 0204 	add.w	r2, r0, r4
 8015b94:	d10c      	bne.n	8015bb0 <__cvt+0x78>
 8015b96:	7803      	ldrb	r3, [r0, #0]
 8015b98:	2b30      	cmp	r3, #48	; 0x30
 8015b9a:	d107      	bne.n	8015bac <__cvt+0x74>
 8015b9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ba4:	bf1c      	itt	ne
 8015ba6:	f1c4 0401 	rsbne	r4, r4, #1
 8015baa:	6034      	strne	r4, [r6, #0]
 8015bac:	6833      	ldr	r3, [r6, #0]
 8015bae:	441a      	add	r2, r3
 8015bb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bb8:	bf08      	it	eq
 8015bba:	9203      	streq	r2, [sp, #12]
 8015bbc:	2130      	movs	r1, #48	; 0x30
 8015bbe:	9b03      	ldr	r3, [sp, #12]
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	d307      	bcc.n	8015bd4 <__cvt+0x9c>
 8015bc4:	9b03      	ldr	r3, [sp, #12]
 8015bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bc8:	1a1b      	subs	r3, r3, r0
 8015bca:	6013      	str	r3, [r2, #0]
 8015bcc:	b005      	add	sp, #20
 8015bce:	ecbd 8b02 	vpop	{d8}
 8015bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bd4:	1c5c      	adds	r4, r3, #1
 8015bd6:	9403      	str	r4, [sp, #12]
 8015bd8:	7019      	strb	r1, [r3, #0]
 8015bda:	e7f0      	b.n	8015bbe <__cvt+0x86>

08015bdc <__exponent>:
 8015bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bde:	4603      	mov	r3, r0
 8015be0:	2900      	cmp	r1, #0
 8015be2:	bfb8      	it	lt
 8015be4:	4249      	neglt	r1, r1
 8015be6:	f803 2b02 	strb.w	r2, [r3], #2
 8015bea:	bfb4      	ite	lt
 8015bec:	222d      	movlt	r2, #45	; 0x2d
 8015bee:	222b      	movge	r2, #43	; 0x2b
 8015bf0:	2909      	cmp	r1, #9
 8015bf2:	7042      	strb	r2, [r0, #1]
 8015bf4:	dd2a      	ble.n	8015c4c <__exponent+0x70>
 8015bf6:	f10d 0407 	add.w	r4, sp, #7
 8015bfa:	46a4      	mov	ip, r4
 8015bfc:	270a      	movs	r7, #10
 8015bfe:	46a6      	mov	lr, r4
 8015c00:	460a      	mov	r2, r1
 8015c02:	fb91 f6f7 	sdiv	r6, r1, r7
 8015c06:	fb07 1516 	mls	r5, r7, r6, r1
 8015c0a:	3530      	adds	r5, #48	; 0x30
 8015c0c:	2a63      	cmp	r2, #99	; 0x63
 8015c0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015c12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015c16:	4631      	mov	r1, r6
 8015c18:	dcf1      	bgt.n	8015bfe <__exponent+0x22>
 8015c1a:	3130      	adds	r1, #48	; 0x30
 8015c1c:	f1ae 0502 	sub.w	r5, lr, #2
 8015c20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015c24:	1c44      	adds	r4, r0, #1
 8015c26:	4629      	mov	r1, r5
 8015c28:	4561      	cmp	r1, ip
 8015c2a:	d30a      	bcc.n	8015c42 <__exponent+0x66>
 8015c2c:	f10d 0209 	add.w	r2, sp, #9
 8015c30:	eba2 020e 	sub.w	r2, r2, lr
 8015c34:	4565      	cmp	r5, ip
 8015c36:	bf88      	it	hi
 8015c38:	2200      	movhi	r2, #0
 8015c3a:	4413      	add	r3, r2
 8015c3c:	1a18      	subs	r0, r3, r0
 8015c3e:	b003      	add	sp, #12
 8015c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015c4a:	e7ed      	b.n	8015c28 <__exponent+0x4c>
 8015c4c:	2330      	movs	r3, #48	; 0x30
 8015c4e:	3130      	adds	r1, #48	; 0x30
 8015c50:	7083      	strb	r3, [r0, #2]
 8015c52:	70c1      	strb	r1, [r0, #3]
 8015c54:	1d03      	adds	r3, r0, #4
 8015c56:	e7f1      	b.n	8015c3c <__exponent+0x60>

08015c58 <_printf_float>:
 8015c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5c:	b08b      	sub	sp, #44	; 0x2c
 8015c5e:	460c      	mov	r4, r1
 8015c60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015c64:	4616      	mov	r6, r2
 8015c66:	461f      	mov	r7, r3
 8015c68:	4605      	mov	r5, r0
 8015c6a:	f002 fdff 	bl	801886c <_localeconv_r>
 8015c6e:	f8d0 b000 	ldr.w	fp, [r0]
 8015c72:	4658      	mov	r0, fp
 8015c74:	f7ea fb4c 	bl	8000310 <strlen>
 8015c78:	2300      	movs	r3, #0
 8015c7a:	9308      	str	r3, [sp, #32]
 8015c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8015c80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015c84:	6822      	ldr	r2, [r4, #0]
 8015c86:	3307      	adds	r3, #7
 8015c88:	f023 0307 	bic.w	r3, r3, #7
 8015c8c:	f103 0108 	add.w	r1, r3, #8
 8015c90:	f8c8 1000 	str.w	r1, [r8]
 8015c94:	4682      	mov	sl, r0
 8015c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015c9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8015f00 <_printf_float+0x2a8>
 8015ca2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8015ca6:	eeb0 6bc0 	vabs.f64	d6, d0
 8015caa:	eeb4 6b47 	vcmp.f64	d6, d7
 8015cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb2:	dd24      	ble.n	8015cfe <_printf_float+0xa6>
 8015cb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cbc:	d502      	bpl.n	8015cc4 <_printf_float+0x6c>
 8015cbe:	232d      	movs	r3, #45	; 0x2d
 8015cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc4:	4b90      	ldr	r3, [pc, #576]	; (8015f08 <_printf_float+0x2b0>)
 8015cc6:	4891      	ldr	r0, [pc, #580]	; (8015f0c <_printf_float+0x2b4>)
 8015cc8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015ccc:	bf94      	ite	ls
 8015cce:	4698      	movls	r8, r3
 8015cd0:	4680      	movhi	r8, r0
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	6123      	str	r3, [r4, #16]
 8015cd6:	f022 0204 	bic.w	r2, r2, #4
 8015cda:	2300      	movs	r3, #0
 8015cdc:	6022      	str	r2, [r4, #0]
 8015cde:	9304      	str	r3, [sp, #16]
 8015ce0:	9700      	str	r7, [sp, #0]
 8015ce2:	4633      	mov	r3, r6
 8015ce4:	aa09      	add	r2, sp, #36	; 0x24
 8015ce6:	4621      	mov	r1, r4
 8015ce8:	4628      	mov	r0, r5
 8015cea:	f000 f9d3 	bl	8016094 <_printf_common>
 8015cee:	3001      	adds	r0, #1
 8015cf0:	f040 808a 	bne.w	8015e08 <_printf_float+0x1b0>
 8015cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cf8:	b00b      	add	sp, #44	; 0x2c
 8015cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cfe:	eeb4 0b40 	vcmp.f64	d0, d0
 8015d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d06:	d709      	bvc.n	8015d1c <_printf_float+0xc4>
 8015d08:	ee10 3a90 	vmov	r3, s1
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	bfbc      	itt	lt
 8015d10:	232d      	movlt	r3, #45	; 0x2d
 8015d12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015d16:	487e      	ldr	r0, [pc, #504]	; (8015f10 <_printf_float+0x2b8>)
 8015d18:	4b7e      	ldr	r3, [pc, #504]	; (8015f14 <_printf_float+0x2bc>)
 8015d1a:	e7d5      	b.n	8015cc8 <_printf_float+0x70>
 8015d1c:	6863      	ldr	r3, [r4, #4]
 8015d1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8015d22:	9104      	str	r1, [sp, #16]
 8015d24:	1c59      	adds	r1, r3, #1
 8015d26:	d13c      	bne.n	8015da2 <_printf_float+0x14a>
 8015d28:	2306      	movs	r3, #6
 8015d2a:	6063      	str	r3, [r4, #4]
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	9303      	str	r3, [sp, #12]
 8015d30:	ab08      	add	r3, sp, #32
 8015d32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8015d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015d3a:	ab07      	add	r3, sp, #28
 8015d3c:	6861      	ldr	r1, [r4, #4]
 8015d3e:	9300      	str	r3, [sp, #0]
 8015d40:	6022      	str	r2, [r4, #0]
 8015d42:	f10d 031b 	add.w	r3, sp, #27
 8015d46:	4628      	mov	r0, r5
 8015d48:	f7ff fef6 	bl	8015b38 <__cvt>
 8015d4c:	9b04      	ldr	r3, [sp, #16]
 8015d4e:	9907      	ldr	r1, [sp, #28]
 8015d50:	2b47      	cmp	r3, #71	; 0x47
 8015d52:	4680      	mov	r8, r0
 8015d54:	d108      	bne.n	8015d68 <_printf_float+0x110>
 8015d56:	1cc8      	adds	r0, r1, #3
 8015d58:	db02      	blt.n	8015d60 <_printf_float+0x108>
 8015d5a:	6863      	ldr	r3, [r4, #4]
 8015d5c:	4299      	cmp	r1, r3
 8015d5e:	dd41      	ble.n	8015de4 <_printf_float+0x18c>
 8015d60:	f1a9 0902 	sub.w	r9, r9, #2
 8015d64:	fa5f f989 	uxtb.w	r9, r9
 8015d68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015d6c:	d820      	bhi.n	8015db0 <_printf_float+0x158>
 8015d6e:	3901      	subs	r1, #1
 8015d70:	464a      	mov	r2, r9
 8015d72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015d76:	9107      	str	r1, [sp, #28]
 8015d78:	f7ff ff30 	bl	8015bdc <__exponent>
 8015d7c:	9a08      	ldr	r2, [sp, #32]
 8015d7e:	9004      	str	r0, [sp, #16]
 8015d80:	1813      	adds	r3, r2, r0
 8015d82:	2a01      	cmp	r2, #1
 8015d84:	6123      	str	r3, [r4, #16]
 8015d86:	dc02      	bgt.n	8015d8e <_printf_float+0x136>
 8015d88:	6822      	ldr	r2, [r4, #0]
 8015d8a:	07d2      	lsls	r2, r2, #31
 8015d8c:	d501      	bpl.n	8015d92 <_printf_float+0x13a>
 8015d8e:	3301      	adds	r3, #1
 8015d90:	6123      	str	r3, [r4, #16]
 8015d92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d0a2      	beq.n	8015ce0 <_printf_float+0x88>
 8015d9a:	232d      	movs	r3, #45	; 0x2d
 8015d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015da0:	e79e      	b.n	8015ce0 <_printf_float+0x88>
 8015da2:	9904      	ldr	r1, [sp, #16]
 8015da4:	2947      	cmp	r1, #71	; 0x47
 8015da6:	d1c1      	bne.n	8015d2c <_printf_float+0xd4>
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d1bf      	bne.n	8015d2c <_printf_float+0xd4>
 8015dac:	2301      	movs	r3, #1
 8015dae:	e7bc      	b.n	8015d2a <_printf_float+0xd2>
 8015db0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8015db4:	d118      	bne.n	8015de8 <_printf_float+0x190>
 8015db6:	2900      	cmp	r1, #0
 8015db8:	6863      	ldr	r3, [r4, #4]
 8015dba:	dd0b      	ble.n	8015dd4 <_printf_float+0x17c>
 8015dbc:	6121      	str	r1, [r4, #16]
 8015dbe:	b913      	cbnz	r3, 8015dc6 <_printf_float+0x16e>
 8015dc0:	6822      	ldr	r2, [r4, #0]
 8015dc2:	07d0      	lsls	r0, r2, #31
 8015dc4:	d502      	bpl.n	8015dcc <_printf_float+0x174>
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	440b      	add	r3, r1
 8015dca:	6123      	str	r3, [r4, #16]
 8015dcc:	2300      	movs	r3, #0
 8015dce:	65a1      	str	r1, [r4, #88]	; 0x58
 8015dd0:	9304      	str	r3, [sp, #16]
 8015dd2:	e7de      	b.n	8015d92 <_printf_float+0x13a>
 8015dd4:	b913      	cbnz	r3, 8015ddc <_printf_float+0x184>
 8015dd6:	6822      	ldr	r2, [r4, #0]
 8015dd8:	07d2      	lsls	r2, r2, #31
 8015dda:	d501      	bpl.n	8015de0 <_printf_float+0x188>
 8015ddc:	3302      	adds	r3, #2
 8015dde:	e7f4      	b.n	8015dca <_printf_float+0x172>
 8015de0:	2301      	movs	r3, #1
 8015de2:	e7f2      	b.n	8015dca <_printf_float+0x172>
 8015de4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8015de8:	9b08      	ldr	r3, [sp, #32]
 8015dea:	4299      	cmp	r1, r3
 8015dec:	db05      	blt.n	8015dfa <_printf_float+0x1a2>
 8015dee:	6823      	ldr	r3, [r4, #0]
 8015df0:	6121      	str	r1, [r4, #16]
 8015df2:	07d8      	lsls	r0, r3, #31
 8015df4:	d5ea      	bpl.n	8015dcc <_printf_float+0x174>
 8015df6:	1c4b      	adds	r3, r1, #1
 8015df8:	e7e7      	b.n	8015dca <_printf_float+0x172>
 8015dfa:	2900      	cmp	r1, #0
 8015dfc:	bfd4      	ite	le
 8015dfe:	f1c1 0202 	rsble	r2, r1, #2
 8015e02:	2201      	movgt	r2, #1
 8015e04:	4413      	add	r3, r2
 8015e06:	e7e0      	b.n	8015dca <_printf_float+0x172>
 8015e08:	6823      	ldr	r3, [r4, #0]
 8015e0a:	055a      	lsls	r2, r3, #21
 8015e0c:	d407      	bmi.n	8015e1e <_printf_float+0x1c6>
 8015e0e:	6923      	ldr	r3, [r4, #16]
 8015e10:	4642      	mov	r2, r8
 8015e12:	4631      	mov	r1, r6
 8015e14:	4628      	mov	r0, r5
 8015e16:	47b8      	blx	r7
 8015e18:	3001      	adds	r0, #1
 8015e1a:	d12a      	bne.n	8015e72 <_printf_float+0x21a>
 8015e1c:	e76a      	b.n	8015cf4 <_printf_float+0x9c>
 8015e1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8015e22:	f240 80e2 	bls.w	8015fea <_printf_float+0x392>
 8015e26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8015e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e32:	d133      	bne.n	8015e9c <_printf_float+0x244>
 8015e34:	4a38      	ldr	r2, [pc, #224]	; (8015f18 <_printf_float+0x2c0>)
 8015e36:	2301      	movs	r3, #1
 8015e38:	4631      	mov	r1, r6
 8015e3a:	4628      	mov	r0, r5
 8015e3c:	47b8      	blx	r7
 8015e3e:	3001      	adds	r0, #1
 8015e40:	f43f af58 	beq.w	8015cf4 <_printf_float+0x9c>
 8015e44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	db02      	blt.n	8015e52 <_printf_float+0x1fa>
 8015e4c:	6823      	ldr	r3, [r4, #0]
 8015e4e:	07d8      	lsls	r0, r3, #31
 8015e50:	d50f      	bpl.n	8015e72 <_printf_float+0x21a>
 8015e52:	4653      	mov	r3, sl
 8015e54:	465a      	mov	r2, fp
 8015e56:	4631      	mov	r1, r6
 8015e58:	4628      	mov	r0, r5
 8015e5a:	47b8      	blx	r7
 8015e5c:	3001      	adds	r0, #1
 8015e5e:	f43f af49 	beq.w	8015cf4 <_printf_float+0x9c>
 8015e62:	f04f 0800 	mov.w	r8, #0
 8015e66:	f104 091a 	add.w	r9, r4, #26
 8015e6a:	9b08      	ldr	r3, [sp, #32]
 8015e6c:	3b01      	subs	r3, #1
 8015e6e:	4543      	cmp	r3, r8
 8015e70:	dc09      	bgt.n	8015e86 <_printf_float+0x22e>
 8015e72:	6823      	ldr	r3, [r4, #0]
 8015e74:	079b      	lsls	r3, r3, #30
 8015e76:	f100 8108 	bmi.w	801608a <_printf_float+0x432>
 8015e7a:	68e0      	ldr	r0, [r4, #12]
 8015e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e7e:	4298      	cmp	r0, r3
 8015e80:	bfb8      	it	lt
 8015e82:	4618      	movlt	r0, r3
 8015e84:	e738      	b.n	8015cf8 <_printf_float+0xa0>
 8015e86:	2301      	movs	r3, #1
 8015e88:	464a      	mov	r2, r9
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	47b8      	blx	r7
 8015e90:	3001      	adds	r0, #1
 8015e92:	f43f af2f 	beq.w	8015cf4 <_printf_float+0x9c>
 8015e96:	f108 0801 	add.w	r8, r8, #1
 8015e9a:	e7e6      	b.n	8015e6a <_printf_float+0x212>
 8015e9c:	9b07      	ldr	r3, [sp, #28]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	dc3c      	bgt.n	8015f1c <_printf_float+0x2c4>
 8015ea2:	4a1d      	ldr	r2, [pc, #116]	; (8015f18 <_printf_float+0x2c0>)
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	4631      	mov	r1, r6
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	47b8      	blx	r7
 8015eac:	3001      	adds	r0, #1
 8015eae:	f43f af21 	beq.w	8015cf4 <_printf_float+0x9c>
 8015eb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015eb6:	4313      	orrs	r3, r2
 8015eb8:	d102      	bne.n	8015ec0 <_printf_float+0x268>
 8015eba:	6823      	ldr	r3, [r4, #0]
 8015ebc:	07d9      	lsls	r1, r3, #31
 8015ebe:	d5d8      	bpl.n	8015e72 <_printf_float+0x21a>
 8015ec0:	4653      	mov	r3, sl
 8015ec2:	465a      	mov	r2, fp
 8015ec4:	4631      	mov	r1, r6
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	47b8      	blx	r7
 8015eca:	3001      	adds	r0, #1
 8015ecc:	f43f af12 	beq.w	8015cf4 <_printf_float+0x9c>
 8015ed0:	f04f 0900 	mov.w	r9, #0
 8015ed4:	f104 0a1a 	add.w	sl, r4, #26
 8015ed8:	9b07      	ldr	r3, [sp, #28]
 8015eda:	425b      	negs	r3, r3
 8015edc:	454b      	cmp	r3, r9
 8015ede:	dc01      	bgt.n	8015ee4 <_printf_float+0x28c>
 8015ee0:	9b08      	ldr	r3, [sp, #32]
 8015ee2:	e795      	b.n	8015e10 <_printf_float+0x1b8>
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	4652      	mov	r2, sl
 8015ee8:	4631      	mov	r1, r6
 8015eea:	4628      	mov	r0, r5
 8015eec:	47b8      	blx	r7
 8015eee:	3001      	adds	r0, #1
 8015ef0:	f43f af00 	beq.w	8015cf4 <_printf_float+0x9c>
 8015ef4:	f109 0901 	add.w	r9, r9, #1
 8015ef8:	e7ee      	b.n	8015ed8 <_printf_float+0x280>
 8015efa:	bf00      	nop
 8015efc:	f3af 8000 	nop.w
 8015f00:	ffffffff 	.word	0xffffffff
 8015f04:	7fefffff 	.word	0x7fefffff
 8015f08:	0801a384 	.word	0x0801a384
 8015f0c:	0801a388 	.word	0x0801a388
 8015f10:	0801a390 	.word	0x0801a390
 8015f14:	0801a38c 	.word	0x0801a38c
 8015f18:	0801a394 	.word	0x0801a394
 8015f1c:	9a08      	ldr	r2, [sp, #32]
 8015f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015f20:	429a      	cmp	r2, r3
 8015f22:	bfa8      	it	ge
 8015f24:	461a      	movge	r2, r3
 8015f26:	2a00      	cmp	r2, #0
 8015f28:	4691      	mov	r9, r2
 8015f2a:	dc38      	bgt.n	8015f9e <_printf_float+0x346>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	9305      	str	r3, [sp, #20]
 8015f30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015f34:	f104 021a 	add.w	r2, r4, #26
 8015f38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015f3a:	9905      	ldr	r1, [sp, #20]
 8015f3c:	9304      	str	r3, [sp, #16]
 8015f3e:	eba3 0309 	sub.w	r3, r3, r9
 8015f42:	428b      	cmp	r3, r1
 8015f44:	dc33      	bgt.n	8015fae <_printf_float+0x356>
 8015f46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	db3c      	blt.n	8015fc8 <_printf_float+0x370>
 8015f4e:	6823      	ldr	r3, [r4, #0]
 8015f50:	07da      	lsls	r2, r3, #31
 8015f52:	d439      	bmi.n	8015fc8 <_printf_float+0x370>
 8015f54:	9b08      	ldr	r3, [sp, #32]
 8015f56:	9a04      	ldr	r2, [sp, #16]
 8015f58:	9907      	ldr	r1, [sp, #28]
 8015f5a:	1a9a      	subs	r2, r3, r2
 8015f5c:	eba3 0901 	sub.w	r9, r3, r1
 8015f60:	4591      	cmp	r9, r2
 8015f62:	bfa8      	it	ge
 8015f64:	4691      	movge	r9, r2
 8015f66:	f1b9 0f00 	cmp.w	r9, #0
 8015f6a:	dc35      	bgt.n	8015fd8 <_printf_float+0x380>
 8015f6c:	f04f 0800 	mov.w	r8, #0
 8015f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015f74:	f104 0a1a 	add.w	sl, r4, #26
 8015f78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015f7c:	1a9b      	subs	r3, r3, r2
 8015f7e:	eba3 0309 	sub.w	r3, r3, r9
 8015f82:	4543      	cmp	r3, r8
 8015f84:	f77f af75 	ble.w	8015e72 <_printf_float+0x21a>
 8015f88:	2301      	movs	r3, #1
 8015f8a:	4652      	mov	r2, sl
 8015f8c:	4631      	mov	r1, r6
 8015f8e:	4628      	mov	r0, r5
 8015f90:	47b8      	blx	r7
 8015f92:	3001      	adds	r0, #1
 8015f94:	f43f aeae 	beq.w	8015cf4 <_printf_float+0x9c>
 8015f98:	f108 0801 	add.w	r8, r8, #1
 8015f9c:	e7ec      	b.n	8015f78 <_printf_float+0x320>
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	4631      	mov	r1, r6
 8015fa2:	4642      	mov	r2, r8
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	47b8      	blx	r7
 8015fa8:	3001      	adds	r0, #1
 8015faa:	d1bf      	bne.n	8015f2c <_printf_float+0x2d4>
 8015fac:	e6a2      	b.n	8015cf4 <_printf_float+0x9c>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	4631      	mov	r1, r6
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	9204      	str	r2, [sp, #16]
 8015fb6:	47b8      	blx	r7
 8015fb8:	3001      	adds	r0, #1
 8015fba:	f43f ae9b 	beq.w	8015cf4 <_printf_float+0x9c>
 8015fbe:	9b05      	ldr	r3, [sp, #20]
 8015fc0:	9a04      	ldr	r2, [sp, #16]
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	9305      	str	r3, [sp, #20]
 8015fc6:	e7b7      	b.n	8015f38 <_printf_float+0x2e0>
 8015fc8:	4653      	mov	r3, sl
 8015fca:	465a      	mov	r2, fp
 8015fcc:	4631      	mov	r1, r6
 8015fce:	4628      	mov	r0, r5
 8015fd0:	47b8      	blx	r7
 8015fd2:	3001      	adds	r0, #1
 8015fd4:	d1be      	bne.n	8015f54 <_printf_float+0x2fc>
 8015fd6:	e68d      	b.n	8015cf4 <_printf_float+0x9c>
 8015fd8:	9a04      	ldr	r2, [sp, #16]
 8015fda:	464b      	mov	r3, r9
 8015fdc:	4442      	add	r2, r8
 8015fde:	4631      	mov	r1, r6
 8015fe0:	4628      	mov	r0, r5
 8015fe2:	47b8      	blx	r7
 8015fe4:	3001      	adds	r0, #1
 8015fe6:	d1c1      	bne.n	8015f6c <_printf_float+0x314>
 8015fe8:	e684      	b.n	8015cf4 <_printf_float+0x9c>
 8015fea:	9a08      	ldr	r2, [sp, #32]
 8015fec:	2a01      	cmp	r2, #1
 8015fee:	dc01      	bgt.n	8015ff4 <_printf_float+0x39c>
 8015ff0:	07db      	lsls	r3, r3, #31
 8015ff2:	d537      	bpl.n	8016064 <_printf_float+0x40c>
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	4642      	mov	r2, r8
 8015ff8:	4631      	mov	r1, r6
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	47b8      	blx	r7
 8015ffe:	3001      	adds	r0, #1
 8016000:	f43f ae78 	beq.w	8015cf4 <_printf_float+0x9c>
 8016004:	4653      	mov	r3, sl
 8016006:	465a      	mov	r2, fp
 8016008:	4631      	mov	r1, r6
 801600a:	4628      	mov	r0, r5
 801600c:	47b8      	blx	r7
 801600e:	3001      	adds	r0, #1
 8016010:	f43f ae70 	beq.w	8015cf4 <_printf_float+0x9c>
 8016014:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016018:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016020:	d01b      	beq.n	801605a <_printf_float+0x402>
 8016022:	9b08      	ldr	r3, [sp, #32]
 8016024:	f108 0201 	add.w	r2, r8, #1
 8016028:	3b01      	subs	r3, #1
 801602a:	4631      	mov	r1, r6
 801602c:	4628      	mov	r0, r5
 801602e:	47b8      	blx	r7
 8016030:	3001      	adds	r0, #1
 8016032:	d10e      	bne.n	8016052 <_printf_float+0x3fa>
 8016034:	e65e      	b.n	8015cf4 <_printf_float+0x9c>
 8016036:	2301      	movs	r3, #1
 8016038:	464a      	mov	r2, r9
 801603a:	4631      	mov	r1, r6
 801603c:	4628      	mov	r0, r5
 801603e:	47b8      	blx	r7
 8016040:	3001      	adds	r0, #1
 8016042:	f43f ae57 	beq.w	8015cf4 <_printf_float+0x9c>
 8016046:	f108 0801 	add.w	r8, r8, #1
 801604a:	9b08      	ldr	r3, [sp, #32]
 801604c:	3b01      	subs	r3, #1
 801604e:	4543      	cmp	r3, r8
 8016050:	dcf1      	bgt.n	8016036 <_printf_float+0x3de>
 8016052:	9b04      	ldr	r3, [sp, #16]
 8016054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016058:	e6db      	b.n	8015e12 <_printf_float+0x1ba>
 801605a:	f04f 0800 	mov.w	r8, #0
 801605e:	f104 091a 	add.w	r9, r4, #26
 8016062:	e7f2      	b.n	801604a <_printf_float+0x3f2>
 8016064:	2301      	movs	r3, #1
 8016066:	4642      	mov	r2, r8
 8016068:	e7df      	b.n	801602a <_printf_float+0x3d2>
 801606a:	2301      	movs	r3, #1
 801606c:	464a      	mov	r2, r9
 801606e:	4631      	mov	r1, r6
 8016070:	4628      	mov	r0, r5
 8016072:	47b8      	blx	r7
 8016074:	3001      	adds	r0, #1
 8016076:	f43f ae3d 	beq.w	8015cf4 <_printf_float+0x9c>
 801607a:	f108 0801 	add.w	r8, r8, #1
 801607e:	68e3      	ldr	r3, [r4, #12]
 8016080:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016082:	1a5b      	subs	r3, r3, r1
 8016084:	4543      	cmp	r3, r8
 8016086:	dcf0      	bgt.n	801606a <_printf_float+0x412>
 8016088:	e6f7      	b.n	8015e7a <_printf_float+0x222>
 801608a:	f04f 0800 	mov.w	r8, #0
 801608e:	f104 0919 	add.w	r9, r4, #25
 8016092:	e7f4      	b.n	801607e <_printf_float+0x426>

08016094 <_printf_common>:
 8016094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016098:	4616      	mov	r6, r2
 801609a:	4699      	mov	r9, r3
 801609c:	688a      	ldr	r2, [r1, #8]
 801609e:	690b      	ldr	r3, [r1, #16]
 80160a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160a4:	4293      	cmp	r3, r2
 80160a6:	bfb8      	it	lt
 80160a8:	4613      	movlt	r3, r2
 80160aa:	6033      	str	r3, [r6, #0]
 80160ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80160b0:	4607      	mov	r7, r0
 80160b2:	460c      	mov	r4, r1
 80160b4:	b10a      	cbz	r2, 80160ba <_printf_common+0x26>
 80160b6:	3301      	adds	r3, #1
 80160b8:	6033      	str	r3, [r6, #0]
 80160ba:	6823      	ldr	r3, [r4, #0]
 80160bc:	0699      	lsls	r1, r3, #26
 80160be:	bf42      	ittt	mi
 80160c0:	6833      	ldrmi	r3, [r6, #0]
 80160c2:	3302      	addmi	r3, #2
 80160c4:	6033      	strmi	r3, [r6, #0]
 80160c6:	6825      	ldr	r5, [r4, #0]
 80160c8:	f015 0506 	ands.w	r5, r5, #6
 80160cc:	d106      	bne.n	80160dc <_printf_common+0x48>
 80160ce:	f104 0a19 	add.w	sl, r4, #25
 80160d2:	68e3      	ldr	r3, [r4, #12]
 80160d4:	6832      	ldr	r2, [r6, #0]
 80160d6:	1a9b      	subs	r3, r3, r2
 80160d8:	42ab      	cmp	r3, r5
 80160da:	dc26      	bgt.n	801612a <_printf_common+0x96>
 80160dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80160e0:	1e13      	subs	r3, r2, #0
 80160e2:	6822      	ldr	r2, [r4, #0]
 80160e4:	bf18      	it	ne
 80160e6:	2301      	movne	r3, #1
 80160e8:	0692      	lsls	r2, r2, #26
 80160ea:	d42b      	bmi.n	8016144 <_printf_common+0xb0>
 80160ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160f0:	4649      	mov	r1, r9
 80160f2:	4638      	mov	r0, r7
 80160f4:	47c0      	blx	r8
 80160f6:	3001      	adds	r0, #1
 80160f8:	d01e      	beq.n	8016138 <_printf_common+0xa4>
 80160fa:	6823      	ldr	r3, [r4, #0]
 80160fc:	68e5      	ldr	r5, [r4, #12]
 80160fe:	6832      	ldr	r2, [r6, #0]
 8016100:	f003 0306 	and.w	r3, r3, #6
 8016104:	2b04      	cmp	r3, #4
 8016106:	bf08      	it	eq
 8016108:	1aad      	subeq	r5, r5, r2
 801610a:	68a3      	ldr	r3, [r4, #8]
 801610c:	6922      	ldr	r2, [r4, #16]
 801610e:	bf0c      	ite	eq
 8016110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016114:	2500      	movne	r5, #0
 8016116:	4293      	cmp	r3, r2
 8016118:	bfc4      	itt	gt
 801611a:	1a9b      	subgt	r3, r3, r2
 801611c:	18ed      	addgt	r5, r5, r3
 801611e:	2600      	movs	r6, #0
 8016120:	341a      	adds	r4, #26
 8016122:	42b5      	cmp	r5, r6
 8016124:	d11a      	bne.n	801615c <_printf_common+0xc8>
 8016126:	2000      	movs	r0, #0
 8016128:	e008      	b.n	801613c <_printf_common+0xa8>
 801612a:	2301      	movs	r3, #1
 801612c:	4652      	mov	r2, sl
 801612e:	4649      	mov	r1, r9
 8016130:	4638      	mov	r0, r7
 8016132:	47c0      	blx	r8
 8016134:	3001      	adds	r0, #1
 8016136:	d103      	bne.n	8016140 <_printf_common+0xac>
 8016138:	f04f 30ff 	mov.w	r0, #4294967295
 801613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016140:	3501      	adds	r5, #1
 8016142:	e7c6      	b.n	80160d2 <_printf_common+0x3e>
 8016144:	18e1      	adds	r1, r4, r3
 8016146:	1c5a      	adds	r2, r3, #1
 8016148:	2030      	movs	r0, #48	; 0x30
 801614a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801614e:	4422      	add	r2, r4
 8016150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016158:	3302      	adds	r3, #2
 801615a:	e7c7      	b.n	80160ec <_printf_common+0x58>
 801615c:	2301      	movs	r3, #1
 801615e:	4622      	mov	r2, r4
 8016160:	4649      	mov	r1, r9
 8016162:	4638      	mov	r0, r7
 8016164:	47c0      	blx	r8
 8016166:	3001      	adds	r0, #1
 8016168:	d0e6      	beq.n	8016138 <_printf_common+0xa4>
 801616a:	3601      	adds	r6, #1
 801616c:	e7d9      	b.n	8016122 <_printf_common+0x8e>
	...

08016170 <_printf_i>:
 8016170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016174:	7e0f      	ldrb	r7, [r1, #24]
 8016176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016178:	2f78      	cmp	r7, #120	; 0x78
 801617a:	4691      	mov	r9, r2
 801617c:	4680      	mov	r8, r0
 801617e:	460c      	mov	r4, r1
 8016180:	469a      	mov	sl, r3
 8016182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016186:	d807      	bhi.n	8016198 <_printf_i+0x28>
 8016188:	2f62      	cmp	r7, #98	; 0x62
 801618a:	d80a      	bhi.n	80161a2 <_printf_i+0x32>
 801618c:	2f00      	cmp	r7, #0
 801618e:	f000 80d8 	beq.w	8016342 <_printf_i+0x1d2>
 8016192:	2f58      	cmp	r7, #88	; 0x58
 8016194:	f000 80a3 	beq.w	80162de <_printf_i+0x16e>
 8016198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801619c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80161a0:	e03a      	b.n	8016218 <_printf_i+0xa8>
 80161a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80161a6:	2b15      	cmp	r3, #21
 80161a8:	d8f6      	bhi.n	8016198 <_printf_i+0x28>
 80161aa:	a101      	add	r1, pc, #4	; (adr r1, 80161b0 <_printf_i+0x40>)
 80161ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161b0:	08016209 	.word	0x08016209
 80161b4:	0801621d 	.word	0x0801621d
 80161b8:	08016199 	.word	0x08016199
 80161bc:	08016199 	.word	0x08016199
 80161c0:	08016199 	.word	0x08016199
 80161c4:	08016199 	.word	0x08016199
 80161c8:	0801621d 	.word	0x0801621d
 80161cc:	08016199 	.word	0x08016199
 80161d0:	08016199 	.word	0x08016199
 80161d4:	08016199 	.word	0x08016199
 80161d8:	08016199 	.word	0x08016199
 80161dc:	08016329 	.word	0x08016329
 80161e0:	0801624d 	.word	0x0801624d
 80161e4:	0801630b 	.word	0x0801630b
 80161e8:	08016199 	.word	0x08016199
 80161ec:	08016199 	.word	0x08016199
 80161f0:	0801634b 	.word	0x0801634b
 80161f4:	08016199 	.word	0x08016199
 80161f8:	0801624d 	.word	0x0801624d
 80161fc:	08016199 	.word	0x08016199
 8016200:	08016199 	.word	0x08016199
 8016204:	08016313 	.word	0x08016313
 8016208:	682b      	ldr	r3, [r5, #0]
 801620a:	1d1a      	adds	r2, r3, #4
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	602a      	str	r2, [r5, #0]
 8016210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016218:	2301      	movs	r3, #1
 801621a:	e0a3      	b.n	8016364 <_printf_i+0x1f4>
 801621c:	6820      	ldr	r0, [r4, #0]
 801621e:	6829      	ldr	r1, [r5, #0]
 8016220:	0606      	lsls	r6, r0, #24
 8016222:	f101 0304 	add.w	r3, r1, #4
 8016226:	d50a      	bpl.n	801623e <_printf_i+0xce>
 8016228:	680e      	ldr	r6, [r1, #0]
 801622a:	602b      	str	r3, [r5, #0]
 801622c:	2e00      	cmp	r6, #0
 801622e:	da03      	bge.n	8016238 <_printf_i+0xc8>
 8016230:	232d      	movs	r3, #45	; 0x2d
 8016232:	4276      	negs	r6, r6
 8016234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016238:	485e      	ldr	r0, [pc, #376]	; (80163b4 <_printf_i+0x244>)
 801623a:	230a      	movs	r3, #10
 801623c:	e019      	b.n	8016272 <_printf_i+0x102>
 801623e:	680e      	ldr	r6, [r1, #0]
 8016240:	602b      	str	r3, [r5, #0]
 8016242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016246:	bf18      	it	ne
 8016248:	b236      	sxthne	r6, r6
 801624a:	e7ef      	b.n	801622c <_printf_i+0xbc>
 801624c:	682b      	ldr	r3, [r5, #0]
 801624e:	6820      	ldr	r0, [r4, #0]
 8016250:	1d19      	adds	r1, r3, #4
 8016252:	6029      	str	r1, [r5, #0]
 8016254:	0601      	lsls	r1, r0, #24
 8016256:	d501      	bpl.n	801625c <_printf_i+0xec>
 8016258:	681e      	ldr	r6, [r3, #0]
 801625a:	e002      	b.n	8016262 <_printf_i+0xf2>
 801625c:	0646      	lsls	r6, r0, #25
 801625e:	d5fb      	bpl.n	8016258 <_printf_i+0xe8>
 8016260:	881e      	ldrh	r6, [r3, #0]
 8016262:	4854      	ldr	r0, [pc, #336]	; (80163b4 <_printf_i+0x244>)
 8016264:	2f6f      	cmp	r7, #111	; 0x6f
 8016266:	bf0c      	ite	eq
 8016268:	2308      	moveq	r3, #8
 801626a:	230a      	movne	r3, #10
 801626c:	2100      	movs	r1, #0
 801626e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016272:	6865      	ldr	r5, [r4, #4]
 8016274:	60a5      	str	r5, [r4, #8]
 8016276:	2d00      	cmp	r5, #0
 8016278:	bfa2      	ittt	ge
 801627a:	6821      	ldrge	r1, [r4, #0]
 801627c:	f021 0104 	bicge.w	r1, r1, #4
 8016280:	6021      	strge	r1, [r4, #0]
 8016282:	b90e      	cbnz	r6, 8016288 <_printf_i+0x118>
 8016284:	2d00      	cmp	r5, #0
 8016286:	d04d      	beq.n	8016324 <_printf_i+0x1b4>
 8016288:	4615      	mov	r5, r2
 801628a:	fbb6 f1f3 	udiv	r1, r6, r3
 801628e:	fb03 6711 	mls	r7, r3, r1, r6
 8016292:	5dc7      	ldrb	r7, [r0, r7]
 8016294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016298:	4637      	mov	r7, r6
 801629a:	42bb      	cmp	r3, r7
 801629c:	460e      	mov	r6, r1
 801629e:	d9f4      	bls.n	801628a <_printf_i+0x11a>
 80162a0:	2b08      	cmp	r3, #8
 80162a2:	d10b      	bne.n	80162bc <_printf_i+0x14c>
 80162a4:	6823      	ldr	r3, [r4, #0]
 80162a6:	07de      	lsls	r6, r3, #31
 80162a8:	d508      	bpl.n	80162bc <_printf_i+0x14c>
 80162aa:	6923      	ldr	r3, [r4, #16]
 80162ac:	6861      	ldr	r1, [r4, #4]
 80162ae:	4299      	cmp	r1, r3
 80162b0:	bfde      	ittt	le
 80162b2:	2330      	movle	r3, #48	; 0x30
 80162b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80162b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80162bc:	1b52      	subs	r2, r2, r5
 80162be:	6122      	str	r2, [r4, #16]
 80162c0:	f8cd a000 	str.w	sl, [sp]
 80162c4:	464b      	mov	r3, r9
 80162c6:	aa03      	add	r2, sp, #12
 80162c8:	4621      	mov	r1, r4
 80162ca:	4640      	mov	r0, r8
 80162cc:	f7ff fee2 	bl	8016094 <_printf_common>
 80162d0:	3001      	adds	r0, #1
 80162d2:	d14c      	bne.n	801636e <_printf_i+0x1fe>
 80162d4:	f04f 30ff 	mov.w	r0, #4294967295
 80162d8:	b004      	add	sp, #16
 80162da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162de:	4835      	ldr	r0, [pc, #212]	; (80163b4 <_printf_i+0x244>)
 80162e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80162e4:	6829      	ldr	r1, [r5, #0]
 80162e6:	6823      	ldr	r3, [r4, #0]
 80162e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80162ec:	6029      	str	r1, [r5, #0]
 80162ee:	061d      	lsls	r5, r3, #24
 80162f0:	d514      	bpl.n	801631c <_printf_i+0x1ac>
 80162f2:	07df      	lsls	r7, r3, #31
 80162f4:	bf44      	itt	mi
 80162f6:	f043 0320 	orrmi.w	r3, r3, #32
 80162fa:	6023      	strmi	r3, [r4, #0]
 80162fc:	b91e      	cbnz	r6, 8016306 <_printf_i+0x196>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	f023 0320 	bic.w	r3, r3, #32
 8016304:	6023      	str	r3, [r4, #0]
 8016306:	2310      	movs	r3, #16
 8016308:	e7b0      	b.n	801626c <_printf_i+0xfc>
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	f043 0320 	orr.w	r3, r3, #32
 8016310:	6023      	str	r3, [r4, #0]
 8016312:	2378      	movs	r3, #120	; 0x78
 8016314:	4828      	ldr	r0, [pc, #160]	; (80163b8 <_printf_i+0x248>)
 8016316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801631a:	e7e3      	b.n	80162e4 <_printf_i+0x174>
 801631c:	0659      	lsls	r1, r3, #25
 801631e:	bf48      	it	mi
 8016320:	b2b6      	uxthmi	r6, r6
 8016322:	e7e6      	b.n	80162f2 <_printf_i+0x182>
 8016324:	4615      	mov	r5, r2
 8016326:	e7bb      	b.n	80162a0 <_printf_i+0x130>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	6826      	ldr	r6, [r4, #0]
 801632c:	6961      	ldr	r1, [r4, #20]
 801632e:	1d18      	adds	r0, r3, #4
 8016330:	6028      	str	r0, [r5, #0]
 8016332:	0635      	lsls	r5, r6, #24
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	d501      	bpl.n	801633c <_printf_i+0x1cc>
 8016338:	6019      	str	r1, [r3, #0]
 801633a:	e002      	b.n	8016342 <_printf_i+0x1d2>
 801633c:	0670      	lsls	r0, r6, #25
 801633e:	d5fb      	bpl.n	8016338 <_printf_i+0x1c8>
 8016340:	8019      	strh	r1, [r3, #0]
 8016342:	2300      	movs	r3, #0
 8016344:	6123      	str	r3, [r4, #16]
 8016346:	4615      	mov	r5, r2
 8016348:	e7ba      	b.n	80162c0 <_printf_i+0x150>
 801634a:	682b      	ldr	r3, [r5, #0]
 801634c:	1d1a      	adds	r2, r3, #4
 801634e:	602a      	str	r2, [r5, #0]
 8016350:	681d      	ldr	r5, [r3, #0]
 8016352:	6862      	ldr	r2, [r4, #4]
 8016354:	2100      	movs	r1, #0
 8016356:	4628      	mov	r0, r5
 8016358:	f7e9 ffe2 	bl	8000320 <memchr>
 801635c:	b108      	cbz	r0, 8016362 <_printf_i+0x1f2>
 801635e:	1b40      	subs	r0, r0, r5
 8016360:	6060      	str	r0, [r4, #4]
 8016362:	6863      	ldr	r3, [r4, #4]
 8016364:	6123      	str	r3, [r4, #16]
 8016366:	2300      	movs	r3, #0
 8016368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801636c:	e7a8      	b.n	80162c0 <_printf_i+0x150>
 801636e:	6923      	ldr	r3, [r4, #16]
 8016370:	462a      	mov	r2, r5
 8016372:	4649      	mov	r1, r9
 8016374:	4640      	mov	r0, r8
 8016376:	47d0      	blx	sl
 8016378:	3001      	adds	r0, #1
 801637a:	d0ab      	beq.n	80162d4 <_printf_i+0x164>
 801637c:	6823      	ldr	r3, [r4, #0]
 801637e:	079b      	lsls	r3, r3, #30
 8016380:	d413      	bmi.n	80163aa <_printf_i+0x23a>
 8016382:	68e0      	ldr	r0, [r4, #12]
 8016384:	9b03      	ldr	r3, [sp, #12]
 8016386:	4298      	cmp	r0, r3
 8016388:	bfb8      	it	lt
 801638a:	4618      	movlt	r0, r3
 801638c:	e7a4      	b.n	80162d8 <_printf_i+0x168>
 801638e:	2301      	movs	r3, #1
 8016390:	4632      	mov	r2, r6
 8016392:	4649      	mov	r1, r9
 8016394:	4640      	mov	r0, r8
 8016396:	47d0      	blx	sl
 8016398:	3001      	adds	r0, #1
 801639a:	d09b      	beq.n	80162d4 <_printf_i+0x164>
 801639c:	3501      	adds	r5, #1
 801639e:	68e3      	ldr	r3, [r4, #12]
 80163a0:	9903      	ldr	r1, [sp, #12]
 80163a2:	1a5b      	subs	r3, r3, r1
 80163a4:	42ab      	cmp	r3, r5
 80163a6:	dcf2      	bgt.n	801638e <_printf_i+0x21e>
 80163a8:	e7eb      	b.n	8016382 <_printf_i+0x212>
 80163aa:	2500      	movs	r5, #0
 80163ac:	f104 0619 	add.w	r6, r4, #25
 80163b0:	e7f5      	b.n	801639e <_printf_i+0x22e>
 80163b2:	bf00      	nop
 80163b4:	0801a396 	.word	0x0801a396
 80163b8:	0801a3a7 	.word	0x0801a3a7

080163bc <_scanf_float>:
 80163bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c0:	b087      	sub	sp, #28
 80163c2:	4617      	mov	r7, r2
 80163c4:	9303      	str	r3, [sp, #12]
 80163c6:	688b      	ldr	r3, [r1, #8]
 80163c8:	1e5a      	subs	r2, r3, #1
 80163ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80163ce:	bf83      	ittte	hi
 80163d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80163d4:	195b      	addhi	r3, r3, r5
 80163d6:	9302      	strhi	r3, [sp, #8]
 80163d8:	2300      	movls	r3, #0
 80163da:	bf86      	itte	hi
 80163dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80163e0:	608b      	strhi	r3, [r1, #8]
 80163e2:	9302      	strls	r3, [sp, #8]
 80163e4:	680b      	ldr	r3, [r1, #0]
 80163e6:	468b      	mov	fp, r1
 80163e8:	2500      	movs	r5, #0
 80163ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80163ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80163f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80163f6:	4680      	mov	r8, r0
 80163f8:	460c      	mov	r4, r1
 80163fa:	465e      	mov	r6, fp
 80163fc:	46aa      	mov	sl, r5
 80163fe:	46a9      	mov	r9, r5
 8016400:	9501      	str	r5, [sp, #4]
 8016402:	68a2      	ldr	r2, [r4, #8]
 8016404:	b152      	cbz	r2, 801641c <_scanf_float+0x60>
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	2b4e      	cmp	r3, #78	; 0x4e
 801640c:	d864      	bhi.n	80164d8 <_scanf_float+0x11c>
 801640e:	2b40      	cmp	r3, #64	; 0x40
 8016410:	d83c      	bhi.n	801648c <_scanf_float+0xd0>
 8016412:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016416:	b2c8      	uxtb	r0, r1
 8016418:	280e      	cmp	r0, #14
 801641a:	d93a      	bls.n	8016492 <_scanf_float+0xd6>
 801641c:	f1b9 0f00 	cmp.w	r9, #0
 8016420:	d003      	beq.n	801642a <_scanf_float+0x6e>
 8016422:	6823      	ldr	r3, [r4, #0]
 8016424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016428:	6023      	str	r3, [r4, #0]
 801642a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801642e:	f1ba 0f01 	cmp.w	sl, #1
 8016432:	f200 8113 	bhi.w	801665c <_scanf_float+0x2a0>
 8016436:	455e      	cmp	r6, fp
 8016438:	f200 8105 	bhi.w	8016646 <_scanf_float+0x28a>
 801643c:	2501      	movs	r5, #1
 801643e:	4628      	mov	r0, r5
 8016440:	b007      	add	sp, #28
 8016442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016446:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801644a:	2a0d      	cmp	r2, #13
 801644c:	d8e6      	bhi.n	801641c <_scanf_float+0x60>
 801644e:	a101      	add	r1, pc, #4	; (adr r1, 8016454 <_scanf_float+0x98>)
 8016450:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016454:	08016593 	.word	0x08016593
 8016458:	0801641d 	.word	0x0801641d
 801645c:	0801641d 	.word	0x0801641d
 8016460:	0801641d 	.word	0x0801641d
 8016464:	080165f3 	.word	0x080165f3
 8016468:	080165cb 	.word	0x080165cb
 801646c:	0801641d 	.word	0x0801641d
 8016470:	0801641d 	.word	0x0801641d
 8016474:	080165a1 	.word	0x080165a1
 8016478:	0801641d 	.word	0x0801641d
 801647c:	0801641d 	.word	0x0801641d
 8016480:	0801641d 	.word	0x0801641d
 8016484:	0801641d 	.word	0x0801641d
 8016488:	08016559 	.word	0x08016559
 801648c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016490:	e7db      	b.n	801644a <_scanf_float+0x8e>
 8016492:	290e      	cmp	r1, #14
 8016494:	d8c2      	bhi.n	801641c <_scanf_float+0x60>
 8016496:	a001      	add	r0, pc, #4	; (adr r0, 801649c <_scanf_float+0xe0>)
 8016498:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801649c:	0801654b 	.word	0x0801654b
 80164a0:	0801641d 	.word	0x0801641d
 80164a4:	0801654b 	.word	0x0801654b
 80164a8:	080165df 	.word	0x080165df
 80164ac:	0801641d 	.word	0x0801641d
 80164b0:	080164f9 	.word	0x080164f9
 80164b4:	08016535 	.word	0x08016535
 80164b8:	08016535 	.word	0x08016535
 80164bc:	08016535 	.word	0x08016535
 80164c0:	08016535 	.word	0x08016535
 80164c4:	08016535 	.word	0x08016535
 80164c8:	08016535 	.word	0x08016535
 80164cc:	08016535 	.word	0x08016535
 80164d0:	08016535 	.word	0x08016535
 80164d4:	08016535 	.word	0x08016535
 80164d8:	2b6e      	cmp	r3, #110	; 0x6e
 80164da:	d809      	bhi.n	80164f0 <_scanf_float+0x134>
 80164dc:	2b60      	cmp	r3, #96	; 0x60
 80164de:	d8b2      	bhi.n	8016446 <_scanf_float+0x8a>
 80164e0:	2b54      	cmp	r3, #84	; 0x54
 80164e2:	d077      	beq.n	80165d4 <_scanf_float+0x218>
 80164e4:	2b59      	cmp	r3, #89	; 0x59
 80164e6:	d199      	bne.n	801641c <_scanf_float+0x60>
 80164e8:	2d07      	cmp	r5, #7
 80164ea:	d197      	bne.n	801641c <_scanf_float+0x60>
 80164ec:	2508      	movs	r5, #8
 80164ee:	e029      	b.n	8016544 <_scanf_float+0x188>
 80164f0:	2b74      	cmp	r3, #116	; 0x74
 80164f2:	d06f      	beq.n	80165d4 <_scanf_float+0x218>
 80164f4:	2b79      	cmp	r3, #121	; 0x79
 80164f6:	e7f6      	b.n	80164e6 <_scanf_float+0x12a>
 80164f8:	6821      	ldr	r1, [r4, #0]
 80164fa:	05c8      	lsls	r0, r1, #23
 80164fc:	d51a      	bpl.n	8016534 <_scanf_float+0x178>
 80164fe:	9b02      	ldr	r3, [sp, #8]
 8016500:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016504:	6021      	str	r1, [r4, #0]
 8016506:	f109 0901 	add.w	r9, r9, #1
 801650a:	b11b      	cbz	r3, 8016514 <_scanf_float+0x158>
 801650c:	3b01      	subs	r3, #1
 801650e:	3201      	adds	r2, #1
 8016510:	9302      	str	r3, [sp, #8]
 8016512:	60a2      	str	r2, [r4, #8]
 8016514:	68a3      	ldr	r3, [r4, #8]
 8016516:	3b01      	subs	r3, #1
 8016518:	60a3      	str	r3, [r4, #8]
 801651a:	6923      	ldr	r3, [r4, #16]
 801651c:	3301      	adds	r3, #1
 801651e:	6123      	str	r3, [r4, #16]
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	3b01      	subs	r3, #1
 8016524:	2b00      	cmp	r3, #0
 8016526:	607b      	str	r3, [r7, #4]
 8016528:	f340 8084 	ble.w	8016634 <_scanf_float+0x278>
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	3301      	adds	r3, #1
 8016530:	603b      	str	r3, [r7, #0]
 8016532:	e766      	b.n	8016402 <_scanf_float+0x46>
 8016534:	eb1a 0f05 	cmn.w	sl, r5
 8016538:	f47f af70 	bne.w	801641c <_scanf_float+0x60>
 801653c:	6822      	ldr	r2, [r4, #0]
 801653e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016542:	6022      	str	r2, [r4, #0]
 8016544:	f806 3b01 	strb.w	r3, [r6], #1
 8016548:	e7e4      	b.n	8016514 <_scanf_float+0x158>
 801654a:	6822      	ldr	r2, [r4, #0]
 801654c:	0610      	lsls	r0, r2, #24
 801654e:	f57f af65 	bpl.w	801641c <_scanf_float+0x60>
 8016552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016556:	e7f4      	b.n	8016542 <_scanf_float+0x186>
 8016558:	f1ba 0f00 	cmp.w	sl, #0
 801655c:	d10e      	bne.n	801657c <_scanf_float+0x1c0>
 801655e:	f1b9 0f00 	cmp.w	r9, #0
 8016562:	d10e      	bne.n	8016582 <_scanf_float+0x1c6>
 8016564:	6822      	ldr	r2, [r4, #0]
 8016566:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801656a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801656e:	d108      	bne.n	8016582 <_scanf_float+0x1c6>
 8016570:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016574:	6022      	str	r2, [r4, #0]
 8016576:	f04f 0a01 	mov.w	sl, #1
 801657a:	e7e3      	b.n	8016544 <_scanf_float+0x188>
 801657c:	f1ba 0f02 	cmp.w	sl, #2
 8016580:	d055      	beq.n	801662e <_scanf_float+0x272>
 8016582:	2d01      	cmp	r5, #1
 8016584:	d002      	beq.n	801658c <_scanf_float+0x1d0>
 8016586:	2d04      	cmp	r5, #4
 8016588:	f47f af48 	bne.w	801641c <_scanf_float+0x60>
 801658c:	3501      	adds	r5, #1
 801658e:	b2ed      	uxtb	r5, r5
 8016590:	e7d8      	b.n	8016544 <_scanf_float+0x188>
 8016592:	f1ba 0f01 	cmp.w	sl, #1
 8016596:	f47f af41 	bne.w	801641c <_scanf_float+0x60>
 801659a:	f04f 0a02 	mov.w	sl, #2
 801659e:	e7d1      	b.n	8016544 <_scanf_float+0x188>
 80165a0:	b97d      	cbnz	r5, 80165c2 <_scanf_float+0x206>
 80165a2:	f1b9 0f00 	cmp.w	r9, #0
 80165a6:	f47f af3c 	bne.w	8016422 <_scanf_float+0x66>
 80165aa:	6822      	ldr	r2, [r4, #0]
 80165ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80165b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80165b4:	f47f af39 	bne.w	801642a <_scanf_float+0x6e>
 80165b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80165bc:	6022      	str	r2, [r4, #0]
 80165be:	2501      	movs	r5, #1
 80165c0:	e7c0      	b.n	8016544 <_scanf_float+0x188>
 80165c2:	2d03      	cmp	r5, #3
 80165c4:	d0e2      	beq.n	801658c <_scanf_float+0x1d0>
 80165c6:	2d05      	cmp	r5, #5
 80165c8:	e7de      	b.n	8016588 <_scanf_float+0x1cc>
 80165ca:	2d02      	cmp	r5, #2
 80165cc:	f47f af26 	bne.w	801641c <_scanf_float+0x60>
 80165d0:	2503      	movs	r5, #3
 80165d2:	e7b7      	b.n	8016544 <_scanf_float+0x188>
 80165d4:	2d06      	cmp	r5, #6
 80165d6:	f47f af21 	bne.w	801641c <_scanf_float+0x60>
 80165da:	2507      	movs	r5, #7
 80165dc:	e7b2      	b.n	8016544 <_scanf_float+0x188>
 80165de:	6822      	ldr	r2, [r4, #0]
 80165e0:	0591      	lsls	r1, r2, #22
 80165e2:	f57f af1b 	bpl.w	801641c <_scanf_float+0x60>
 80165e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80165ea:	6022      	str	r2, [r4, #0]
 80165ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80165f0:	e7a8      	b.n	8016544 <_scanf_float+0x188>
 80165f2:	6822      	ldr	r2, [r4, #0]
 80165f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80165f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80165fc:	d006      	beq.n	801660c <_scanf_float+0x250>
 80165fe:	0550      	lsls	r0, r2, #21
 8016600:	f57f af0c 	bpl.w	801641c <_scanf_float+0x60>
 8016604:	f1b9 0f00 	cmp.w	r9, #0
 8016608:	f43f af0f 	beq.w	801642a <_scanf_float+0x6e>
 801660c:	0591      	lsls	r1, r2, #22
 801660e:	bf58      	it	pl
 8016610:	9901      	ldrpl	r1, [sp, #4]
 8016612:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016616:	bf58      	it	pl
 8016618:	eba9 0101 	subpl.w	r1, r9, r1
 801661c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016620:	bf58      	it	pl
 8016622:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016626:	6022      	str	r2, [r4, #0]
 8016628:	f04f 0900 	mov.w	r9, #0
 801662c:	e78a      	b.n	8016544 <_scanf_float+0x188>
 801662e:	f04f 0a03 	mov.w	sl, #3
 8016632:	e787      	b.n	8016544 <_scanf_float+0x188>
 8016634:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016638:	4639      	mov	r1, r7
 801663a:	4640      	mov	r0, r8
 801663c:	4798      	blx	r3
 801663e:	2800      	cmp	r0, #0
 8016640:	f43f aedf 	beq.w	8016402 <_scanf_float+0x46>
 8016644:	e6ea      	b.n	801641c <_scanf_float+0x60>
 8016646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801664a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801664e:	463a      	mov	r2, r7
 8016650:	4640      	mov	r0, r8
 8016652:	4798      	blx	r3
 8016654:	6923      	ldr	r3, [r4, #16]
 8016656:	3b01      	subs	r3, #1
 8016658:	6123      	str	r3, [r4, #16]
 801665a:	e6ec      	b.n	8016436 <_scanf_float+0x7a>
 801665c:	1e6b      	subs	r3, r5, #1
 801665e:	2b06      	cmp	r3, #6
 8016660:	d825      	bhi.n	80166ae <_scanf_float+0x2f2>
 8016662:	2d02      	cmp	r5, #2
 8016664:	d836      	bhi.n	80166d4 <_scanf_float+0x318>
 8016666:	455e      	cmp	r6, fp
 8016668:	f67f aee8 	bls.w	801643c <_scanf_float+0x80>
 801666c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016670:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016674:	463a      	mov	r2, r7
 8016676:	4640      	mov	r0, r8
 8016678:	4798      	blx	r3
 801667a:	6923      	ldr	r3, [r4, #16]
 801667c:	3b01      	subs	r3, #1
 801667e:	6123      	str	r3, [r4, #16]
 8016680:	e7f1      	b.n	8016666 <_scanf_float+0x2aa>
 8016682:	9802      	ldr	r0, [sp, #8]
 8016684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016688:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801668c:	9002      	str	r0, [sp, #8]
 801668e:	463a      	mov	r2, r7
 8016690:	4640      	mov	r0, r8
 8016692:	4798      	blx	r3
 8016694:	6923      	ldr	r3, [r4, #16]
 8016696:	3b01      	subs	r3, #1
 8016698:	6123      	str	r3, [r4, #16]
 801669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801669e:	fa5f fa8a 	uxtb.w	sl, sl
 80166a2:	f1ba 0f02 	cmp.w	sl, #2
 80166a6:	d1ec      	bne.n	8016682 <_scanf_float+0x2c6>
 80166a8:	3d03      	subs	r5, #3
 80166aa:	b2ed      	uxtb	r5, r5
 80166ac:	1b76      	subs	r6, r6, r5
 80166ae:	6823      	ldr	r3, [r4, #0]
 80166b0:	05da      	lsls	r2, r3, #23
 80166b2:	d52f      	bpl.n	8016714 <_scanf_float+0x358>
 80166b4:	055b      	lsls	r3, r3, #21
 80166b6:	d510      	bpl.n	80166da <_scanf_float+0x31e>
 80166b8:	455e      	cmp	r6, fp
 80166ba:	f67f aebf 	bls.w	801643c <_scanf_float+0x80>
 80166be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80166c6:	463a      	mov	r2, r7
 80166c8:	4640      	mov	r0, r8
 80166ca:	4798      	blx	r3
 80166cc:	6923      	ldr	r3, [r4, #16]
 80166ce:	3b01      	subs	r3, #1
 80166d0:	6123      	str	r3, [r4, #16]
 80166d2:	e7f1      	b.n	80166b8 <_scanf_float+0x2fc>
 80166d4:	46aa      	mov	sl, r5
 80166d6:	9602      	str	r6, [sp, #8]
 80166d8:	e7df      	b.n	801669a <_scanf_float+0x2de>
 80166da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80166de:	6923      	ldr	r3, [r4, #16]
 80166e0:	2965      	cmp	r1, #101	; 0x65
 80166e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80166e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80166ea:	6123      	str	r3, [r4, #16]
 80166ec:	d00c      	beq.n	8016708 <_scanf_float+0x34c>
 80166ee:	2945      	cmp	r1, #69	; 0x45
 80166f0:	d00a      	beq.n	8016708 <_scanf_float+0x34c>
 80166f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166f6:	463a      	mov	r2, r7
 80166f8:	4640      	mov	r0, r8
 80166fa:	4798      	blx	r3
 80166fc:	6923      	ldr	r3, [r4, #16]
 80166fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016702:	3b01      	subs	r3, #1
 8016704:	1eb5      	subs	r5, r6, #2
 8016706:	6123      	str	r3, [r4, #16]
 8016708:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801670c:	463a      	mov	r2, r7
 801670e:	4640      	mov	r0, r8
 8016710:	4798      	blx	r3
 8016712:	462e      	mov	r6, r5
 8016714:	6825      	ldr	r5, [r4, #0]
 8016716:	f015 0510 	ands.w	r5, r5, #16
 801671a:	d14e      	bne.n	80167ba <_scanf_float+0x3fe>
 801671c:	7035      	strb	r5, [r6, #0]
 801671e:	6823      	ldr	r3, [r4, #0]
 8016720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016728:	d119      	bne.n	801675e <_scanf_float+0x3a2>
 801672a:	9b01      	ldr	r3, [sp, #4]
 801672c:	454b      	cmp	r3, r9
 801672e:	eba3 0209 	sub.w	r2, r3, r9
 8016732:	d121      	bne.n	8016778 <_scanf_float+0x3bc>
 8016734:	2200      	movs	r2, #0
 8016736:	4659      	mov	r1, fp
 8016738:	4640      	mov	r0, r8
 801673a:	f000 fe7f 	bl	801743c <_strtod_r>
 801673e:	6822      	ldr	r2, [r4, #0]
 8016740:	9b03      	ldr	r3, [sp, #12]
 8016742:	f012 0f02 	tst.w	r2, #2
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	d021      	beq.n	801678e <_scanf_float+0x3d2>
 801674a:	9903      	ldr	r1, [sp, #12]
 801674c:	1d1a      	adds	r2, r3, #4
 801674e:	600a      	str	r2, [r1, #0]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	ed83 0b00 	vstr	d0, [r3]
 8016756:	68e3      	ldr	r3, [r4, #12]
 8016758:	3301      	adds	r3, #1
 801675a:	60e3      	str	r3, [r4, #12]
 801675c:	e66f      	b.n	801643e <_scanf_float+0x82>
 801675e:	9b04      	ldr	r3, [sp, #16]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d0e7      	beq.n	8016734 <_scanf_float+0x378>
 8016764:	9905      	ldr	r1, [sp, #20]
 8016766:	230a      	movs	r3, #10
 8016768:	462a      	mov	r2, r5
 801676a:	3101      	adds	r1, #1
 801676c:	4640      	mov	r0, r8
 801676e:	f000 feed 	bl	801754c <_strtol_r>
 8016772:	9b04      	ldr	r3, [sp, #16]
 8016774:	9e05      	ldr	r6, [sp, #20]
 8016776:	1ac2      	subs	r2, r0, r3
 8016778:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801677c:	429e      	cmp	r6, r3
 801677e:	bf28      	it	cs
 8016780:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016784:	490e      	ldr	r1, [pc, #56]	; (80167c0 <_scanf_float+0x404>)
 8016786:	4630      	mov	r0, r6
 8016788:	f000 f824 	bl	80167d4 <siprintf>
 801678c:	e7d2      	b.n	8016734 <_scanf_float+0x378>
 801678e:	9903      	ldr	r1, [sp, #12]
 8016790:	f012 0f04 	tst.w	r2, #4
 8016794:	f103 0204 	add.w	r2, r3, #4
 8016798:	600a      	str	r2, [r1, #0]
 801679a:	d1d9      	bne.n	8016750 <_scanf_float+0x394>
 801679c:	eeb4 0b40 	vcmp.f64	d0, d0
 80167a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167a4:	681e      	ldr	r6, [r3, #0]
 80167a6:	d705      	bvc.n	80167b4 <_scanf_float+0x3f8>
 80167a8:	4806      	ldr	r0, [pc, #24]	; (80167c4 <_scanf_float+0x408>)
 80167aa:	f000 f80d 	bl	80167c8 <nanf>
 80167ae:	ed86 0a00 	vstr	s0, [r6]
 80167b2:	e7d0      	b.n	8016756 <_scanf_float+0x39a>
 80167b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80167b8:	e7f9      	b.n	80167ae <_scanf_float+0x3f2>
 80167ba:	2500      	movs	r5, #0
 80167bc:	e63f      	b.n	801643e <_scanf_float+0x82>
 80167be:	bf00      	nop
 80167c0:	0801a3b8 	.word	0x0801a3b8
 80167c4:	0801a7c0 	.word	0x0801a7c0

080167c8 <nanf>:
 80167c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80167d0 <nanf+0x8>
 80167cc:	4770      	bx	lr
 80167ce:	bf00      	nop
 80167d0:	7fc00000 	.word	0x7fc00000

080167d4 <siprintf>:
 80167d4:	b40e      	push	{r1, r2, r3}
 80167d6:	b500      	push	{lr}
 80167d8:	b09c      	sub	sp, #112	; 0x70
 80167da:	ab1d      	add	r3, sp, #116	; 0x74
 80167dc:	9002      	str	r0, [sp, #8]
 80167de:	9006      	str	r0, [sp, #24]
 80167e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80167e4:	4809      	ldr	r0, [pc, #36]	; (801680c <siprintf+0x38>)
 80167e6:	9107      	str	r1, [sp, #28]
 80167e8:	9104      	str	r1, [sp, #16]
 80167ea:	4909      	ldr	r1, [pc, #36]	; (8016810 <siprintf+0x3c>)
 80167ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80167f0:	9105      	str	r1, [sp, #20]
 80167f2:	6800      	ldr	r0, [r0, #0]
 80167f4:	9301      	str	r3, [sp, #4]
 80167f6:	a902      	add	r1, sp, #8
 80167f8:	f002 fe78 	bl	80194ec <_svfiprintf_r>
 80167fc:	9b02      	ldr	r3, [sp, #8]
 80167fe:	2200      	movs	r2, #0
 8016800:	701a      	strb	r2, [r3, #0]
 8016802:	b01c      	add	sp, #112	; 0x70
 8016804:	f85d eb04 	ldr.w	lr, [sp], #4
 8016808:	b003      	add	sp, #12
 801680a:	4770      	bx	lr
 801680c:	24000100 	.word	0x24000100
 8016810:	ffff0208 	.word	0xffff0208

08016814 <__sread>:
 8016814:	b510      	push	{r4, lr}
 8016816:	460c      	mov	r4, r1
 8016818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801681c:	f002 ff66 	bl	80196ec <_read_r>
 8016820:	2800      	cmp	r0, #0
 8016822:	bfab      	itete	ge
 8016824:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016826:	89a3      	ldrhlt	r3, [r4, #12]
 8016828:	181b      	addge	r3, r3, r0
 801682a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801682e:	bfac      	ite	ge
 8016830:	6563      	strge	r3, [r4, #84]	; 0x54
 8016832:	81a3      	strhlt	r3, [r4, #12]
 8016834:	bd10      	pop	{r4, pc}

08016836 <__swrite>:
 8016836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801683a:	461f      	mov	r7, r3
 801683c:	898b      	ldrh	r3, [r1, #12]
 801683e:	05db      	lsls	r3, r3, #23
 8016840:	4605      	mov	r5, r0
 8016842:	460c      	mov	r4, r1
 8016844:	4616      	mov	r6, r2
 8016846:	d505      	bpl.n	8016854 <__swrite+0x1e>
 8016848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801684c:	2302      	movs	r3, #2
 801684e:	2200      	movs	r2, #0
 8016850:	f002 f810 	bl	8018874 <_lseek_r>
 8016854:	89a3      	ldrh	r3, [r4, #12]
 8016856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801685a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801685e:	81a3      	strh	r3, [r4, #12]
 8016860:	4632      	mov	r2, r6
 8016862:	463b      	mov	r3, r7
 8016864:	4628      	mov	r0, r5
 8016866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801686a:	f000 be71 	b.w	8017550 <_write_r>

0801686e <__sseek>:
 801686e:	b510      	push	{r4, lr}
 8016870:	460c      	mov	r4, r1
 8016872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016876:	f001 fffd 	bl	8018874 <_lseek_r>
 801687a:	1c43      	adds	r3, r0, #1
 801687c:	89a3      	ldrh	r3, [r4, #12]
 801687e:	bf15      	itete	ne
 8016880:	6560      	strne	r0, [r4, #84]	; 0x54
 8016882:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016886:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801688a:	81a3      	strheq	r3, [r4, #12]
 801688c:	bf18      	it	ne
 801688e:	81a3      	strhne	r3, [r4, #12]
 8016890:	bd10      	pop	{r4, pc}

08016892 <__sclose>:
 8016892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016896:	f000 be6d 	b.w	8017574 <_close_r>

0801689a <sulp>:
 801689a:	b570      	push	{r4, r5, r6, lr}
 801689c:	4604      	mov	r4, r0
 801689e:	460d      	mov	r5, r1
 80168a0:	4616      	mov	r6, r2
 80168a2:	ec45 4b10 	vmov	d0, r4, r5
 80168a6:	f002 fb83 	bl	8018fb0 <__ulp>
 80168aa:	b17e      	cbz	r6, 80168cc <sulp+0x32>
 80168ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80168b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	dd09      	ble.n	80168cc <sulp+0x32>
 80168b8:	051b      	lsls	r3, r3, #20
 80168ba:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80168be:	2000      	movs	r0, #0
 80168c0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80168c4:	ec41 0b17 	vmov	d7, r0, r1
 80168c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80168cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080168d0 <_strtod_l>:
 80168d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168d4:	ed2d 8b0e 	vpush	{d8-d14}
 80168d8:	b097      	sub	sp, #92	; 0x5c
 80168da:	461f      	mov	r7, r3
 80168dc:	2300      	movs	r3, #0
 80168de:	9312      	str	r3, [sp, #72]	; 0x48
 80168e0:	4ba1      	ldr	r3, [pc, #644]	; (8016b68 <_strtod_l+0x298>)
 80168e2:	920d      	str	r2, [sp, #52]	; 0x34
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	9307      	str	r3, [sp, #28]
 80168e8:	4604      	mov	r4, r0
 80168ea:	4618      	mov	r0, r3
 80168ec:	468b      	mov	fp, r1
 80168ee:	f7e9 fd0f 	bl	8000310 <strlen>
 80168f2:	f04f 0800 	mov.w	r8, #0
 80168f6:	4605      	mov	r5, r0
 80168f8:	f04f 0900 	mov.w	r9, #0
 80168fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016900:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016902:	7813      	ldrb	r3, [r2, #0]
 8016904:	2b2b      	cmp	r3, #43	; 0x2b
 8016906:	d04d      	beq.n	80169a4 <_strtod_l+0xd4>
 8016908:	d83a      	bhi.n	8016980 <_strtod_l+0xb0>
 801690a:	2b0d      	cmp	r3, #13
 801690c:	d833      	bhi.n	8016976 <_strtod_l+0xa6>
 801690e:	2b08      	cmp	r3, #8
 8016910:	d833      	bhi.n	801697a <_strtod_l+0xaa>
 8016912:	2b00      	cmp	r3, #0
 8016914:	d03d      	beq.n	8016992 <_strtod_l+0xc2>
 8016916:	2300      	movs	r3, #0
 8016918:	9308      	str	r3, [sp, #32]
 801691a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801691c:	7833      	ldrb	r3, [r6, #0]
 801691e:	2b30      	cmp	r3, #48	; 0x30
 8016920:	f040 80b0 	bne.w	8016a84 <_strtod_l+0x1b4>
 8016924:	7873      	ldrb	r3, [r6, #1]
 8016926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801692a:	2b58      	cmp	r3, #88	; 0x58
 801692c:	d167      	bne.n	80169fe <_strtod_l+0x12e>
 801692e:	9b08      	ldr	r3, [sp, #32]
 8016930:	9301      	str	r3, [sp, #4]
 8016932:	ab12      	add	r3, sp, #72	; 0x48
 8016934:	9702      	str	r7, [sp, #8]
 8016936:	9300      	str	r3, [sp, #0]
 8016938:	4a8c      	ldr	r2, [pc, #560]	; (8016b6c <_strtod_l+0x29c>)
 801693a:	ab13      	add	r3, sp, #76	; 0x4c
 801693c:	a911      	add	r1, sp, #68	; 0x44
 801693e:	4620      	mov	r0, r4
 8016940:	f001 fc8c 	bl	801825c <__gethex>
 8016944:	f010 0507 	ands.w	r5, r0, #7
 8016948:	4607      	mov	r7, r0
 801694a:	d005      	beq.n	8016958 <_strtod_l+0x88>
 801694c:	2d06      	cmp	r5, #6
 801694e:	d12b      	bne.n	80169a8 <_strtod_l+0xd8>
 8016950:	3601      	adds	r6, #1
 8016952:	2300      	movs	r3, #0
 8016954:	9611      	str	r6, [sp, #68]	; 0x44
 8016956:	9308      	str	r3, [sp, #32]
 8016958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801695a:	2b00      	cmp	r3, #0
 801695c:	f040 854e 	bne.w	80173fc <_strtod_l+0xb2c>
 8016960:	9b08      	ldr	r3, [sp, #32]
 8016962:	b1e3      	cbz	r3, 801699e <_strtod_l+0xce>
 8016964:	ec49 8b17 	vmov	d7, r8, r9
 8016968:	eeb1 0b47 	vneg.f64	d0, d7
 801696c:	b017      	add	sp, #92	; 0x5c
 801696e:	ecbd 8b0e 	vpop	{d8-d14}
 8016972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016976:	2b20      	cmp	r3, #32
 8016978:	d1cd      	bne.n	8016916 <_strtod_l+0x46>
 801697a:	3201      	adds	r2, #1
 801697c:	9211      	str	r2, [sp, #68]	; 0x44
 801697e:	e7bf      	b.n	8016900 <_strtod_l+0x30>
 8016980:	2b2d      	cmp	r3, #45	; 0x2d
 8016982:	d1c8      	bne.n	8016916 <_strtod_l+0x46>
 8016984:	2301      	movs	r3, #1
 8016986:	9308      	str	r3, [sp, #32]
 8016988:	1c53      	adds	r3, r2, #1
 801698a:	9311      	str	r3, [sp, #68]	; 0x44
 801698c:	7853      	ldrb	r3, [r2, #1]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1c3      	bne.n	801691a <_strtod_l+0x4a>
 8016992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016994:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016998:	2b00      	cmp	r3, #0
 801699a:	f040 852d 	bne.w	80173f8 <_strtod_l+0xb28>
 801699e:	ec49 8b10 	vmov	d0, r8, r9
 80169a2:	e7e3      	b.n	801696c <_strtod_l+0x9c>
 80169a4:	2300      	movs	r3, #0
 80169a6:	e7ee      	b.n	8016986 <_strtod_l+0xb6>
 80169a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169aa:	b13a      	cbz	r2, 80169bc <_strtod_l+0xec>
 80169ac:	2135      	movs	r1, #53	; 0x35
 80169ae:	a814      	add	r0, sp, #80	; 0x50
 80169b0:	f002 fc06 	bl	80191c0 <__copybits>
 80169b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80169b6:	4620      	mov	r0, r4
 80169b8:	f001 ffc8 	bl	801894c <_Bfree>
 80169bc:	3d01      	subs	r5, #1
 80169be:	2d04      	cmp	r5, #4
 80169c0:	d806      	bhi.n	80169d0 <_strtod_l+0x100>
 80169c2:	e8df f005 	tbb	[pc, r5]
 80169c6:	030a      	.short	0x030a
 80169c8:	1714      	.short	0x1714
 80169ca:	0a          	.byte	0x0a
 80169cb:	00          	.byte	0x00
 80169cc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80169d0:	073f      	lsls	r7, r7, #28
 80169d2:	d5c1      	bpl.n	8016958 <_strtod_l+0x88>
 80169d4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80169d8:	e7be      	b.n	8016958 <_strtod_l+0x88>
 80169da:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80169de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80169e4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80169e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80169ec:	e7f0      	b.n	80169d0 <_strtod_l+0x100>
 80169ee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8016b70 <_strtod_l+0x2a0>
 80169f2:	e7ed      	b.n	80169d0 <_strtod_l+0x100>
 80169f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80169f8:	f04f 38ff 	mov.w	r8, #4294967295
 80169fc:	e7e8      	b.n	80169d0 <_strtod_l+0x100>
 80169fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a00:	1c5a      	adds	r2, r3, #1
 8016a02:	9211      	str	r2, [sp, #68]	; 0x44
 8016a04:	785b      	ldrb	r3, [r3, #1]
 8016a06:	2b30      	cmp	r3, #48	; 0x30
 8016a08:	d0f9      	beq.n	80169fe <_strtod_l+0x12e>
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d0a4      	beq.n	8016958 <_strtod_l+0x88>
 8016a0e:	2301      	movs	r3, #1
 8016a10:	f04f 0a00 	mov.w	sl, #0
 8016a14:	9304      	str	r3, [sp, #16]
 8016a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016a18:	930a      	str	r3, [sp, #40]	; 0x28
 8016a1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8016a1e:	f8cd a018 	str.w	sl, [sp, #24]
 8016a22:	220a      	movs	r2, #10
 8016a24:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016a26:	7807      	ldrb	r7, [r0, #0]
 8016a28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016a2c:	b2d9      	uxtb	r1, r3
 8016a2e:	2909      	cmp	r1, #9
 8016a30:	d92a      	bls.n	8016a88 <_strtod_l+0x1b8>
 8016a32:	9907      	ldr	r1, [sp, #28]
 8016a34:	462a      	mov	r2, r5
 8016a36:	f002 fe83 	bl	8019740 <strncmp>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d033      	beq.n	8016aa6 <_strtod_l+0x1d6>
 8016a3e:	2000      	movs	r0, #0
 8016a40:	9b06      	ldr	r3, [sp, #24]
 8016a42:	463a      	mov	r2, r7
 8016a44:	4601      	mov	r1, r0
 8016a46:	4607      	mov	r7, r0
 8016a48:	2a65      	cmp	r2, #101	; 0x65
 8016a4a:	d001      	beq.n	8016a50 <_strtod_l+0x180>
 8016a4c:	2a45      	cmp	r2, #69	; 0x45
 8016a4e:	d117      	bne.n	8016a80 <_strtod_l+0x1b0>
 8016a50:	b91b      	cbnz	r3, 8016a5a <_strtod_l+0x18a>
 8016a52:	9b04      	ldr	r3, [sp, #16]
 8016a54:	4303      	orrs	r3, r0
 8016a56:	d09c      	beq.n	8016992 <_strtod_l+0xc2>
 8016a58:	2300      	movs	r3, #0
 8016a5a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8016a5e:	f10b 0201 	add.w	r2, fp, #1
 8016a62:	9211      	str	r2, [sp, #68]	; 0x44
 8016a64:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8016a68:	2a2b      	cmp	r2, #43	; 0x2b
 8016a6a:	d071      	beq.n	8016b50 <_strtod_l+0x280>
 8016a6c:	2a2d      	cmp	r2, #45	; 0x2d
 8016a6e:	d077      	beq.n	8016b60 <_strtod_l+0x290>
 8016a70:	f04f 0e00 	mov.w	lr, #0
 8016a74:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8016a78:	2d09      	cmp	r5, #9
 8016a7a:	d97f      	bls.n	8016b7c <_strtod_l+0x2ac>
 8016a7c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016a80:	2500      	movs	r5, #0
 8016a82:	e09b      	b.n	8016bbc <_strtod_l+0x2ec>
 8016a84:	2300      	movs	r3, #0
 8016a86:	e7c3      	b.n	8016a10 <_strtod_l+0x140>
 8016a88:	9906      	ldr	r1, [sp, #24]
 8016a8a:	2908      	cmp	r1, #8
 8016a8c:	bfdd      	ittte	le
 8016a8e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016a90:	fb02 3301 	mlale	r3, r2, r1, r3
 8016a94:	9309      	strle	r3, [sp, #36]	; 0x24
 8016a96:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8016a9a:	9b06      	ldr	r3, [sp, #24]
 8016a9c:	3001      	adds	r0, #1
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	9306      	str	r3, [sp, #24]
 8016aa2:	9011      	str	r0, [sp, #68]	; 0x44
 8016aa4:	e7be      	b.n	8016a24 <_strtod_l+0x154>
 8016aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016aa8:	195a      	adds	r2, r3, r5
 8016aaa:	9211      	str	r2, [sp, #68]	; 0x44
 8016aac:	5d5a      	ldrb	r2, [r3, r5]
 8016aae:	9b06      	ldr	r3, [sp, #24]
 8016ab0:	b3a3      	cbz	r3, 8016b1c <_strtod_l+0x24c>
 8016ab2:	4607      	mov	r7, r0
 8016ab4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016ab8:	2909      	cmp	r1, #9
 8016aba:	d912      	bls.n	8016ae2 <_strtod_l+0x212>
 8016abc:	2101      	movs	r1, #1
 8016abe:	e7c3      	b.n	8016a48 <_strtod_l+0x178>
 8016ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ac2:	1c5a      	adds	r2, r3, #1
 8016ac4:	9211      	str	r2, [sp, #68]	; 0x44
 8016ac6:	785a      	ldrb	r2, [r3, #1]
 8016ac8:	3001      	adds	r0, #1
 8016aca:	2a30      	cmp	r2, #48	; 0x30
 8016acc:	d0f8      	beq.n	8016ac0 <_strtod_l+0x1f0>
 8016ace:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016ad2:	2b08      	cmp	r3, #8
 8016ad4:	f200 8497 	bhi.w	8017406 <_strtod_l+0xb36>
 8016ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016ada:	930a      	str	r3, [sp, #40]	; 0x28
 8016adc:	4607      	mov	r7, r0
 8016ade:	2000      	movs	r0, #0
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	3a30      	subs	r2, #48	; 0x30
 8016ae4:	f100 0101 	add.w	r1, r0, #1
 8016ae8:	d012      	beq.n	8016b10 <_strtod_l+0x240>
 8016aea:	440f      	add	r7, r1
 8016aec:	eb00 0c03 	add.w	ip, r0, r3
 8016af0:	4619      	mov	r1, r3
 8016af2:	250a      	movs	r5, #10
 8016af4:	4561      	cmp	r1, ip
 8016af6:	d113      	bne.n	8016b20 <_strtod_l+0x250>
 8016af8:	1819      	adds	r1, r3, r0
 8016afa:	2908      	cmp	r1, #8
 8016afc:	f103 0301 	add.w	r3, r3, #1
 8016b00:	4403      	add	r3, r0
 8016b02:	dc1c      	bgt.n	8016b3e <_strtod_l+0x26e>
 8016b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b06:	210a      	movs	r1, #10
 8016b08:	fb01 2200 	mla	r2, r1, r0, r2
 8016b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8016b0e:	2100      	movs	r1, #0
 8016b10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b12:	1c50      	adds	r0, r2, #1
 8016b14:	9011      	str	r0, [sp, #68]	; 0x44
 8016b16:	7852      	ldrb	r2, [r2, #1]
 8016b18:	4608      	mov	r0, r1
 8016b1a:	e7cb      	b.n	8016ab4 <_strtod_l+0x1e4>
 8016b1c:	9806      	ldr	r0, [sp, #24]
 8016b1e:	e7d4      	b.n	8016aca <_strtod_l+0x1fa>
 8016b20:	2908      	cmp	r1, #8
 8016b22:	dc04      	bgt.n	8016b2e <_strtod_l+0x25e>
 8016b24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016b26:	436e      	muls	r6, r5
 8016b28:	9609      	str	r6, [sp, #36]	; 0x24
 8016b2a:	3101      	adds	r1, #1
 8016b2c:	e7e2      	b.n	8016af4 <_strtod_l+0x224>
 8016b2e:	f101 0e01 	add.w	lr, r1, #1
 8016b32:	f1be 0f10 	cmp.w	lr, #16
 8016b36:	bfd8      	it	le
 8016b38:	fb05 fa0a 	mulle.w	sl, r5, sl
 8016b3c:	e7f5      	b.n	8016b2a <_strtod_l+0x25a>
 8016b3e:	2b10      	cmp	r3, #16
 8016b40:	bfdc      	itt	le
 8016b42:	210a      	movle	r1, #10
 8016b44:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8016b48:	e7e1      	b.n	8016b0e <_strtod_l+0x23e>
 8016b4a:	2700      	movs	r7, #0
 8016b4c:	2101      	movs	r1, #1
 8016b4e:	e780      	b.n	8016a52 <_strtod_l+0x182>
 8016b50:	f04f 0e00 	mov.w	lr, #0
 8016b54:	f10b 0202 	add.w	r2, fp, #2
 8016b58:	9211      	str	r2, [sp, #68]	; 0x44
 8016b5a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8016b5e:	e789      	b.n	8016a74 <_strtod_l+0x1a4>
 8016b60:	f04f 0e01 	mov.w	lr, #1
 8016b64:	e7f6      	b.n	8016b54 <_strtod_l+0x284>
 8016b66:	bf00      	nop
 8016b68:	0801a608 	.word	0x0801a608
 8016b6c:	0801a3c0 	.word	0x0801a3c0
 8016b70:	7ff00000 	.word	0x7ff00000
 8016b74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b76:	1c55      	adds	r5, r2, #1
 8016b78:	9511      	str	r5, [sp, #68]	; 0x44
 8016b7a:	7852      	ldrb	r2, [r2, #1]
 8016b7c:	2a30      	cmp	r2, #48	; 0x30
 8016b7e:	d0f9      	beq.n	8016b74 <_strtod_l+0x2a4>
 8016b80:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8016b84:	2d08      	cmp	r5, #8
 8016b86:	f63f af7b 	bhi.w	8016a80 <_strtod_l+0x1b0>
 8016b8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8016b8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b90:	9207      	str	r2, [sp, #28]
 8016b92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b94:	1c55      	adds	r5, r2, #1
 8016b96:	9511      	str	r5, [sp, #68]	; 0x44
 8016b98:	7852      	ldrb	r2, [r2, #1]
 8016b9a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8016b9e:	2e09      	cmp	r6, #9
 8016ba0:	d937      	bls.n	8016c12 <_strtod_l+0x342>
 8016ba2:	9e07      	ldr	r6, [sp, #28]
 8016ba4:	1bad      	subs	r5, r5, r6
 8016ba6:	2d08      	cmp	r5, #8
 8016ba8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016bac:	dc02      	bgt.n	8016bb4 <_strtod_l+0x2e4>
 8016bae:	4565      	cmp	r5, ip
 8016bb0:	bfa8      	it	ge
 8016bb2:	4665      	movge	r5, ip
 8016bb4:	f1be 0f00 	cmp.w	lr, #0
 8016bb8:	d000      	beq.n	8016bbc <_strtod_l+0x2ec>
 8016bba:	426d      	negs	r5, r5
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d14d      	bne.n	8016c5c <_strtod_l+0x38c>
 8016bc0:	9b04      	ldr	r3, [sp, #16]
 8016bc2:	4303      	orrs	r3, r0
 8016bc4:	f47f aec8 	bne.w	8016958 <_strtod_l+0x88>
 8016bc8:	2900      	cmp	r1, #0
 8016bca:	f47f aee2 	bne.w	8016992 <_strtod_l+0xc2>
 8016bce:	2a69      	cmp	r2, #105	; 0x69
 8016bd0:	d027      	beq.n	8016c22 <_strtod_l+0x352>
 8016bd2:	dc24      	bgt.n	8016c1e <_strtod_l+0x34e>
 8016bd4:	2a49      	cmp	r2, #73	; 0x49
 8016bd6:	d024      	beq.n	8016c22 <_strtod_l+0x352>
 8016bd8:	2a4e      	cmp	r2, #78	; 0x4e
 8016bda:	f47f aeda 	bne.w	8016992 <_strtod_l+0xc2>
 8016bde:	4996      	ldr	r1, [pc, #600]	; (8016e38 <_strtod_l+0x568>)
 8016be0:	a811      	add	r0, sp, #68	; 0x44
 8016be2:	f001 fd93 	bl	801870c <__match>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	f43f aed3 	beq.w	8016992 <_strtod_l+0xc2>
 8016bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	2b28      	cmp	r3, #40	; 0x28
 8016bf2:	d12d      	bne.n	8016c50 <_strtod_l+0x380>
 8016bf4:	4991      	ldr	r1, [pc, #580]	; (8016e3c <_strtod_l+0x56c>)
 8016bf6:	aa14      	add	r2, sp, #80	; 0x50
 8016bf8:	a811      	add	r0, sp, #68	; 0x44
 8016bfa:	f001 fd9b 	bl	8018734 <__hexnan>
 8016bfe:	2805      	cmp	r0, #5
 8016c00:	d126      	bne.n	8016c50 <_strtod_l+0x380>
 8016c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c04:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016c08:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016c0c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8016c10:	e6a2      	b.n	8016958 <_strtod_l+0x88>
 8016c12:	250a      	movs	r5, #10
 8016c14:	fb05 250c 	mla	r5, r5, ip, r2
 8016c18:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8016c1c:	e7b9      	b.n	8016b92 <_strtod_l+0x2c2>
 8016c1e:	2a6e      	cmp	r2, #110	; 0x6e
 8016c20:	e7db      	b.n	8016bda <_strtod_l+0x30a>
 8016c22:	4987      	ldr	r1, [pc, #540]	; (8016e40 <_strtod_l+0x570>)
 8016c24:	a811      	add	r0, sp, #68	; 0x44
 8016c26:	f001 fd71 	bl	801870c <__match>
 8016c2a:	2800      	cmp	r0, #0
 8016c2c:	f43f aeb1 	beq.w	8016992 <_strtod_l+0xc2>
 8016c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c32:	4984      	ldr	r1, [pc, #528]	; (8016e44 <_strtod_l+0x574>)
 8016c34:	3b01      	subs	r3, #1
 8016c36:	a811      	add	r0, sp, #68	; 0x44
 8016c38:	9311      	str	r3, [sp, #68]	; 0x44
 8016c3a:	f001 fd67 	bl	801870c <__match>
 8016c3e:	b910      	cbnz	r0, 8016c46 <_strtod_l+0x376>
 8016c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c42:	3301      	adds	r3, #1
 8016c44:	9311      	str	r3, [sp, #68]	; 0x44
 8016c46:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8016e58 <_strtod_l+0x588>
 8016c4a:	f04f 0800 	mov.w	r8, #0
 8016c4e:	e683      	b.n	8016958 <_strtod_l+0x88>
 8016c50:	487d      	ldr	r0, [pc, #500]	; (8016e48 <_strtod_l+0x578>)
 8016c52:	f002 fd5d 	bl	8019710 <nan>
 8016c56:	ec59 8b10 	vmov	r8, r9, d0
 8016c5a:	e67d      	b.n	8016958 <_strtod_l+0x88>
 8016c5c:	1bea      	subs	r2, r5, r7
 8016c5e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8016c62:	9207      	str	r2, [sp, #28]
 8016c64:	9a06      	ldr	r2, [sp, #24]
 8016c66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016c6a:	2a00      	cmp	r2, #0
 8016c6c:	bf08      	it	eq
 8016c6e:	461a      	moveq	r2, r3
 8016c70:	2b10      	cmp	r3, #16
 8016c72:	9206      	str	r2, [sp, #24]
 8016c74:	461a      	mov	r2, r3
 8016c76:	bfa8      	it	ge
 8016c78:	2210      	movge	r2, #16
 8016c7a:	2b09      	cmp	r3, #9
 8016c7c:	ec59 8b17 	vmov	r8, r9, d7
 8016c80:	dd0c      	ble.n	8016c9c <_strtod_l+0x3cc>
 8016c82:	4972      	ldr	r1, [pc, #456]	; (8016e4c <_strtod_l+0x57c>)
 8016c84:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016c88:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8016c8c:	ee06 aa90 	vmov	s13, sl
 8016c90:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016c94:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016c98:	ec59 8b16 	vmov	r8, r9, d6
 8016c9c:	2b0f      	cmp	r3, #15
 8016c9e:	dc36      	bgt.n	8016d0e <_strtod_l+0x43e>
 8016ca0:	9907      	ldr	r1, [sp, #28]
 8016ca2:	2900      	cmp	r1, #0
 8016ca4:	f43f ae58 	beq.w	8016958 <_strtod_l+0x88>
 8016ca8:	dd23      	ble.n	8016cf2 <_strtod_l+0x422>
 8016caa:	2916      	cmp	r1, #22
 8016cac:	dc0b      	bgt.n	8016cc6 <_strtod_l+0x3f6>
 8016cae:	4b67      	ldr	r3, [pc, #412]	; (8016e4c <_strtod_l+0x57c>)
 8016cb0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8016cb4:	ed93 7b00 	vldr	d7, [r3]
 8016cb8:	ec49 8b16 	vmov	d6, r8, r9
 8016cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016cc0:	ec59 8b17 	vmov	r8, r9, d7
 8016cc4:	e648      	b.n	8016958 <_strtod_l+0x88>
 8016cc6:	9807      	ldr	r0, [sp, #28]
 8016cc8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016ccc:	4281      	cmp	r1, r0
 8016cce:	db1e      	blt.n	8016d0e <_strtod_l+0x43e>
 8016cd0:	4a5e      	ldr	r2, [pc, #376]	; (8016e4c <_strtod_l+0x57c>)
 8016cd2:	f1c3 030f 	rsb	r3, r3, #15
 8016cd6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016cda:	ed91 7b00 	vldr	d7, [r1]
 8016cde:	ec49 8b16 	vmov	d6, r8, r9
 8016ce2:	1ac3      	subs	r3, r0, r3
 8016ce4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016cec:	ed92 6b00 	vldr	d6, [r2]
 8016cf0:	e7e4      	b.n	8016cbc <_strtod_l+0x3ec>
 8016cf2:	9907      	ldr	r1, [sp, #28]
 8016cf4:	3116      	adds	r1, #22
 8016cf6:	db0a      	blt.n	8016d0e <_strtod_l+0x43e>
 8016cf8:	4b54      	ldr	r3, [pc, #336]	; (8016e4c <_strtod_l+0x57c>)
 8016cfa:	1b7d      	subs	r5, r7, r5
 8016cfc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016d00:	ed95 7b00 	vldr	d7, [r5]
 8016d04:	ec49 8b16 	vmov	d6, r8, r9
 8016d08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016d0c:	e7d8      	b.n	8016cc0 <_strtod_l+0x3f0>
 8016d0e:	9907      	ldr	r1, [sp, #28]
 8016d10:	1a9a      	subs	r2, r3, r2
 8016d12:	440a      	add	r2, r1
 8016d14:	2a00      	cmp	r2, #0
 8016d16:	dd6f      	ble.n	8016df8 <_strtod_l+0x528>
 8016d18:	f012 000f 	ands.w	r0, r2, #15
 8016d1c:	d00a      	beq.n	8016d34 <_strtod_l+0x464>
 8016d1e:	494b      	ldr	r1, [pc, #300]	; (8016e4c <_strtod_l+0x57c>)
 8016d20:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016d24:	ed91 7b00 	vldr	d7, [r1]
 8016d28:	ec49 8b16 	vmov	d6, r8, r9
 8016d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016d30:	ec59 8b17 	vmov	r8, r9, d7
 8016d34:	f032 020f 	bics.w	r2, r2, #15
 8016d38:	d04f      	beq.n	8016dda <_strtod_l+0x50a>
 8016d3a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016d3e:	dd22      	ble.n	8016d86 <_strtod_l+0x4b6>
 8016d40:	2500      	movs	r5, #0
 8016d42:	462e      	mov	r6, r5
 8016d44:	9506      	str	r5, [sp, #24]
 8016d46:	462f      	mov	r7, r5
 8016d48:	2322      	movs	r3, #34	; 0x22
 8016d4a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8016e58 <_strtod_l+0x588>
 8016d4e:	6023      	str	r3, [r4, #0]
 8016d50:	f04f 0800 	mov.w	r8, #0
 8016d54:	9b06      	ldr	r3, [sp, #24]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f43f adfe 	beq.w	8016958 <_strtod_l+0x88>
 8016d5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f001 fdf4 	bl	801894c <_Bfree>
 8016d64:	4639      	mov	r1, r7
 8016d66:	4620      	mov	r0, r4
 8016d68:	f001 fdf0 	bl	801894c <_Bfree>
 8016d6c:	4631      	mov	r1, r6
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f001 fdec 	bl	801894c <_Bfree>
 8016d74:	9906      	ldr	r1, [sp, #24]
 8016d76:	4620      	mov	r0, r4
 8016d78:	f001 fde8 	bl	801894c <_Bfree>
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f001 fde4 	bl	801894c <_Bfree>
 8016d84:	e5e8      	b.n	8016958 <_strtod_l+0x88>
 8016d86:	2000      	movs	r0, #0
 8016d88:	ec49 8b17 	vmov	d7, r8, r9
 8016d8c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8016e50 <_strtod_l+0x580>
 8016d90:	1112      	asrs	r2, r2, #4
 8016d92:	4601      	mov	r1, r0
 8016d94:	2a01      	cmp	r2, #1
 8016d96:	dc23      	bgt.n	8016de0 <_strtod_l+0x510>
 8016d98:	b108      	cbz	r0, 8016d9e <_strtod_l+0x4ce>
 8016d9a:	ec59 8b17 	vmov	r8, r9, d7
 8016d9e:	4a2c      	ldr	r2, [pc, #176]	; (8016e50 <_strtod_l+0x580>)
 8016da0:	482c      	ldr	r0, [pc, #176]	; (8016e54 <_strtod_l+0x584>)
 8016da2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016da6:	ed92 7b00 	vldr	d7, [r2]
 8016daa:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016dae:	ec49 8b16 	vmov	d6, r8, r9
 8016db2:	4a29      	ldr	r2, [pc, #164]	; (8016e58 <_strtod_l+0x588>)
 8016db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016db8:	ee17 1a90 	vmov	r1, s15
 8016dbc:	400a      	ands	r2, r1
 8016dbe:	4282      	cmp	r2, r0
 8016dc0:	ec59 8b17 	vmov	r8, r9, d7
 8016dc4:	d8bc      	bhi.n	8016d40 <_strtod_l+0x470>
 8016dc6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016dca:	4282      	cmp	r2, r0
 8016dcc:	bf86      	itte	hi
 8016dce:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8016e5c <_strtod_l+0x58c>
 8016dd2:	f04f 38ff 	movhi.w	r8, #4294967295
 8016dd6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016dda:	2200      	movs	r2, #0
 8016ddc:	9204      	str	r2, [sp, #16]
 8016dde:	e078      	b.n	8016ed2 <_strtod_l+0x602>
 8016de0:	07d6      	lsls	r6, r2, #31
 8016de2:	d504      	bpl.n	8016dee <_strtod_l+0x51e>
 8016de4:	ed9c 6b00 	vldr	d6, [ip]
 8016de8:	2001      	movs	r0, #1
 8016dea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016dee:	3101      	adds	r1, #1
 8016df0:	1052      	asrs	r2, r2, #1
 8016df2:	f10c 0c08 	add.w	ip, ip, #8
 8016df6:	e7cd      	b.n	8016d94 <_strtod_l+0x4c4>
 8016df8:	d0ef      	beq.n	8016dda <_strtod_l+0x50a>
 8016dfa:	4252      	negs	r2, r2
 8016dfc:	f012 000f 	ands.w	r0, r2, #15
 8016e00:	d00a      	beq.n	8016e18 <_strtod_l+0x548>
 8016e02:	4912      	ldr	r1, [pc, #72]	; (8016e4c <_strtod_l+0x57c>)
 8016e04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016e08:	ed91 7b00 	vldr	d7, [r1]
 8016e0c:	ec49 8b16 	vmov	d6, r8, r9
 8016e10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016e14:	ec59 8b17 	vmov	r8, r9, d7
 8016e18:	1112      	asrs	r2, r2, #4
 8016e1a:	d0de      	beq.n	8016dda <_strtod_l+0x50a>
 8016e1c:	2a1f      	cmp	r2, #31
 8016e1e:	dd1f      	ble.n	8016e60 <_strtod_l+0x590>
 8016e20:	2500      	movs	r5, #0
 8016e22:	462e      	mov	r6, r5
 8016e24:	9506      	str	r5, [sp, #24]
 8016e26:	462f      	mov	r7, r5
 8016e28:	2322      	movs	r3, #34	; 0x22
 8016e2a:	f04f 0800 	mov.w	r8, #0
 8016e2e:	f04f 0900 	mov.w	r9, #0
 8016e32:	6023      	str	r3, [r4, #0]
 8016e34:	e78e      	b.n	8016d54 <_strtod_l+0x484>
 8016e36:	bf00      	nop
 8016e38:	0801a391 	.word	0x0801a391
 8016e3c:	0801a3d4 	.word	0x0801a3d4
 8016e40:	0801a389 	.word	0x0801a389
 8016e44:	0801a514 	.word	0x0801a514
 8016e48:	0801a7c0 	.word	0x0801a7c0
 8016e4c:	0801a6a0 	.word	0x0801a6a0
 8016e50:	0801a678 	.word	0x0801a678
 8016e54:	7ca00000 	.word	0x7ca00000
 8016e58:	7ff00000 	.word	0x7ff00000
 8016e5c:	7fefffff 	.word	0x7fefffff
 8016e60:	f012 0110 	ands.w	r1, r2, #16
 8016e64:	bf18      	it	ne
 8016e66:	216a      	movne	r1, #106	; 0x6a
 8016e68:	9104      	str	r1, [sp, #16]
 8016e6a:	ec49 8b17 	vmov	d7, r8, r9
 8016e6e:	49be      	ldr	r1, [pc, #760]	; (8017168 <_strtod_l+0x898>)
 8016e70:	2000      	movs	r0, #0
 8016e72:	07d6      	lsls	r6, r2, #31
 8016e74:	d504      	bpl.n	8016e80 <_strtod_l+0x5b0>
 8016e76:	ed91 6b00 	vldr	d6, [r1]
 8016e7a:	2001      	movs	r0, #1
 8016e7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e80:	1052      	asrs	r2, r2, #1
 8016e82:	f101 0108 	add.w	r1, r1, #8
 8016e86:	d1f4      	bne.n	8016e72 <_strtod_l+0x5a2>
 8016e88:	b108      	cbz	r0, 8016e8e <_strtod_l+0x5be>
 8016e8a:	ec59 8b17 	vmov	r8, r9, d7
 8016e8e:	9a04      	ldr	r2, [sp, #16]
 8016e90:	b1c2      	cbz	r2, 8016ec4 <_strtod_l+0x5f4>
 8016e92:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8016e96:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8016e9a:	2a00      	cmp	r2, #0
 8016e9c:	4648      	mov	r0, r9
 8016e9e:	dd11      	ble.n	8016ec4 <_strtod_l+0x5f4>
 8016ea0:	2a1f      	cmp	r2, #31
 8016ea2:	f340 812e 	ble.w	8017102 <_strtod_l+0x832>
 8016ea6:	2a34      	cmp	r2, #52	; 0x34
 8016ea8:	bfde      	ittt	le
 8016eaa:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8016eae:	f04f 32ff 	movle.w	r2, #4294967295
 8016eb2:	fa02 f101 	lslle.w	r1, r2, r1
 8016eb6:	f04f 0800 	mov.w	r8, #0
 8016eba:	bfcc      	ite	gt
 8016ebc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016ec0:	ea01 0900 	andle.w	r9, r1, r0
 8016ec4:	ec49 8b17 	vmov	d7, r8, r9
 8016ec8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed0:	d0a6      	beq.n	8016e20 <_strtod_l+0x550>
 8016ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ed4:	9200      	str	r2, [sp, #0]
 8016ed6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016ed8:	9a06      	ldr	r2, [sp, #24]
 8016eda:	4620      	mov	r0, r4
 8016edc:	f001 fd9e 	bl	8018a1c <__s2b>
 8016ee0:	9006      	str	r0, [sp, #24]
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	f43f af2c 	beq.w	8016d40 <_strtod_l+0x470>
 8016ee8:	9b07      	ldr	r3, [sp, #28]
 8016eea:	1b7d      	subs	r5, r7, r5
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	bfb4      	ite	lt
 8016ef0:	462b      	movlt	r3, r5
 8016ef2:	2300      	movge	r3, #0
 8016ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ef6:	9b07      	ldr	r3, [sp, #28]
 8016ef8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8017148 <_strtod_l+0x878>
 8016efc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8017150 <_strtod_l+0x880>
 8016f00:	ed9f bb95 	vldr	d11, [pc, #596]	; 8017158 <_strtod_l+0x888>
 8016f04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f08:	2500      	movs	r5, #0
 8016f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8016f0c:	462e      	mov	r6, r5
 8016f0e:	9b06      	ldr	r3, [sp, #24]
 8016f10:	4620      	mov	r0, r4
 8016f12:	6859      	ldr	r1, [r3, #4]
 8016f14:	f001 fcda 	bl	80188cc <_Balloc>
 8016f18:	4607      	mov	r7, r0
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	f43f af14 	beq.w	8016d48 <_strtod_l+0x478>
 8016f20:	9b06      	ldr	r3, [sp, #24]
 8016f22:	691a      	ldr	r2, [r3, #16]
 8016f24:	3202      	adds	r2, #2
 8016f26:	f103 010c 	add.w	r1, r3, #12
 8016f2a:	0092      	lsls	r2, r2, #2
 8016f2c:	300c      	adds	r0, #12
 8016f2e:	f7fe fded 	bl	8015b0c <memcpy>
 8016f32:	ec49 8b10 	vmov	d0, r8, r9
 8016f36:	aa14      	add	r2, sp, #80	; 0x50
 8016f38:	a913      	add	r1, sp, #76	; 0x4c
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	f002 f8b4 	bl	80190a8 <__d2b>
 8016f40:	ec49 8b18 	vmov	d8, r8, r9
 8016f44:	9012      	str	r0, [sp, #72]	; 0x48
 8016f46:	2800      	cmp	r0, #0
 8016f48:	f43f aefe 	beq.w	8016d48 <_strtod_l+0x478>
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	4620      	mov	r0, r4
 8016f50:	f001 fdfe 	bl	8018b50 <__i2b>
 8016f54:	4606      	mov	r6, r0
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f43f aef6 	beq.w	8016d48 <_strtod_l+0x478>
 8016f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f5e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	bfab      	itete	ge
 8016f64:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8016f66:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8016f68:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8016f6c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8016f70:	bfac      	ite	ge
 8016f72:	eb03 0b02 	addge.w	fp, r3, r2
 8016f76:	eba2 0a03 	sublt.w	sl, r2, r3
 8016f7a:	9a04      	ldr	r2, [sp, #16]
 8016f7c:	1a9b      	subs	r3, r3, r2
 8016f7e:	440b      	add	r3, r1
 8016f80:	4a7a      	ldr	r2, [pc, #488]	; (801716c <_strtod_l+0x89c>)
 8016f82:	3b01      	subs	r3, #1
 8016f84:	4293      	cmp	r3, r2
 8016f86:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8016f8a:	f280 80cd 	bge.w	8017128 <_strtod_l+0x858>
 8016f8e:	1ad2      	subs	r2, r2, r3
 8016f90:	2a1f      	cmp	r2, #31
 8016f92:	eba1 0102 	sub.w	r1, r1, r2
 8016f96:	f04f 0001 	mov.w	r0, #1
 8016f9a:	f300 80b9 	bgt.w	8017110 <_strtod_l+0x840>
 8016f9e:	fa00 f302 	lsl.w	r3, r0, r2
 8016fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8016fa8:	eb0b 0301 	add.w	r3, fp, r1
 8016fac:	9a04      	ldr	r2, [sp, #16]
 8016fae:	459b      	cmp	fp, r3
 8016fb0:	448a      	add	sl, r1
 8016fb2:	4492      	add	sl, r2
 8016fb4:	465a      	mov	r2, fp
 8016fb6:	bfa8      	it	ge
 8016fb8:	461a      	movge	r2, r3
 8016fba:	4552      	cmp	r2, sl
 8016fbc:	bfa8      	it	ge
 8016fbe:	4652      	movge	r2, sl
 8016fc0:	2a00      	cmp	r2, #0
 8016fc2:	bfc2      	ittt	gt
 8016fc4:	1a9b      	subgt	r3, r3, r2
 8016fc6:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016fca:	ebab 0b02 	subgt.w	fp, fp, r2
 8016fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fd0:	2a00      	cmp	r2, #0
 8016fd2:	dd18      	ble.n	8017006 <_strtod_l+0x736>
 8016fd4:	4631      	mov	r1, r6
 8016fd6:	4620      	mov	r0, r4
 8016fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fda:	f001 fe79 	bl	8018cd0 <__pow5mult>
 8016fde:	4606      	mov	r6, r0
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	f43f aeb1 	beq.w	8016d48 <_strtod_l+0x478>
 8016fe6:	4601      	mov	r1, r0
 8016fe8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016fea:	4620      	mov	r0, r4
 8016fec:	f001 fdc6 	bl	8018b7c <__multiply>
 8016ff0:	900e      	str	r0, [sp, #56]	; 0x38
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	f43f aea8 	beq.w	8016d48 <_strtod_l+0x478>
 8016ff8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f001 fca6 	bl	801894c <_Bfree>
 8017000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017004:	9212      	str	r2, [sp, #72]	; 0x48
 8017006:	2b00      	cmp	r3, #0
 8017008:	f300 8093 	bgt.w	8017132 <_strtod_l+0x862>
 801700c:	9b07      	ldr	r3, [sp, #28]
 801700e:	2b00      	cmp	r3, #0
 8017010:	dd08      	ble.n	8017024 <_strtod_l+0x754>
 8017012:	4639      	mov	r1, r7
 8017014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017016:	4620      	mov	r0, r4
 8017018:	f001 fe5a 	bl	8018cd0 <__pow5mult>
 801701c:	4607      	mov	r7, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	f43f ae92 	beq.w	8016d48 <_strtod_l+0x478>
 8017024:	f1ba 0f00 	cmp.w	sl, #0
 8017028:	dd08      	ble.n	801703c <_strtod_l+0x76c>
 801702a:	4639      	mov	r1, r7
 801702c:	4652      	mov	r2, sl
 801702e:	4620      	mov	r0, r4
 8017030:	f001 fea8 	bl	8018d84 <__lshift>
 8017034:	4607      	mov	r7, r0
 8017036:	2800      	cmp	r0, #0
 8017038:	f43f ae86 	beq.w	8016d48 <_strtod_l+0x478>
 801703c:	f1bb 0f00 	cmp.w	fp, #0
 8017040:	dd08      	ble.n	8017054 <_strtod_l+0x784>
 8017042:	4631      	mov	r1, r6
 8017044:	465a      	mov	r2, fp
 8017046:	4620      	mov	r0, r4
 8017048:	f001 fe9c 	bl	8018d84 <__lshift>
 801704c:	4606      	mov	r6, r0
 801704e:	2800      	cmp	r0, #0
 8017050:	f43f ae7a 	beq.w	8016d48 <_strtod_l+0x478>
 8017054:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017056:	463a      	mov	r2, r7
 8017058:	4620      	mov	r0, r4
 801705a:	f001 ff1f 	bl	8018e9c <__mdiff>
 801705e:	4605      	mov	r5, r0
 8017060:	2800      	cmp	r0, #0
 8017062:	f43f ae71 	beq.w	8016d48 <_strtod_l+0x478>
 8017066:	2300      	movs	r3, #0
 8017068:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801706c:	60c3      	str	r3, [r0, #12]
 801706e:	4631      	mov	r1, r6
 8017070:	f001 fef8 	bl	8018e64 <__mcmp>
 8017074:	2800      	cmp	r0, #0
 8017076:	da7d      	bge.n	8017174 <_strtod_l+0x8a4>
 8017078:	ea5a 0308 	orrs.w	r3, sl, r8
 801707c:	f040 80a3 	bne.w	80171c6 <_strtod_l+0x8f6>
 8017080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017084:	2b00      	cmp	r3, #0
 8017086:	f040 809e 	bne.w	80171c6 <_strtod_l+0x8f6>
 801708a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801708e:	0d1b      	lsrs	r3, r3, #20
 8017090:	051b      	lsls	r3, r3, #20
 8017092:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017096:	f240 8096 	bls.w	80171c6 <_strtod_l+0x8f6>
 801709a:	696b      	ldr	r3, [r5, #20]
 801709c:	b91b      	cbnz	r3, 80170a6 <_strtod_l+0x7d6>
 801709e:	692b      	ldr	r3, [r5, #16]
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	f340 8090 	ble.w	80171c6 <_strtod_l+0x8f6>
 80170a6:	4629      	mov	r1, r5
 80170a8:	2201      	movs	r2, #1
 80170aa:	4620      	mov	r0, r4
 80170ac:	f001 fe6a 	bl	8018d84 <__lshift>
 80170b0:	4631      	mov	r1, r6
 80170b2:	4605      	mov	r5, r0
 80170b4:	f001 fed6 	bl	8018e64 <__mcmp>
 80170b8:	2800      	cmp	r0, #0
 80170ba:	f340 8084 	ble.w	80171c6 <_strtod_l+0x8f6>
 80170be:	9904      	ldr	r1, [sp, #16]
 80170c0:	4a2b      	ldr	r2, [pc, #172]	; (8017170 <_strtod_l+0x8a0>)
 80170c2:	464b      	mov	r3, r9
 80170c4:	2900      	cmp	r1, #0
 80170c6:	f000 809d 	beq.w	8017204 <_strtod_l+0x934>
 80170ca:	ea02 0109 	and.w	r1, r2, r9
 80170ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80170d2:	f300 8097 	bgt.w	8017204 <_strtod_l+0x934>
 80170d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80170da:	f77f aea5 	ble.w	8016e28 <_strtod_l+0x558>
 80170de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017160 <_strtod_l+0x890>
 80170e2:	ec49 8b16 	vmov	d6, r8, r9
 80170e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80170ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80170ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80170f2:	4313      	orrs	r3, r2
 80170f4:	bf08      	it	eq
 80170f6:	2322      	moveq	r3, #34	; 0x22
 80170f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80170fc:	bf08      	it	eq
 80170fe:	6023      	streq	r3, [r4, #0]
 8017100:	e62c      	b.n	8016d5c <_strtod_l+0x48c>
 8017102:	f04f 31ff 	mov.w	r1, #4294967295
 8017106:	fa01 f202 	lsl.w	r2, r1, r2
 801710a:	ea02 0808 	and.w	r8, r2, r8
 801710e:	e6d9      	b.n	8016ec4 <_strtod_l+0x5f4>
 8017110:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017114:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017118:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801711c:	33e2      	adds	r3, #226	; 0xe2
 801711e:	fa00 f303 	lsl.w	r3, r0, r3
 8017122:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8017126:	e73f      	b.n	8016fa8 <_strtod_l+0x6d8>
 8017128:	2200      	movs	r2, #0
 801712a:	2301      	movs	r3, #1
 801712c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017130:	e73a      	b.n	8016fa8 <_strtod_l+0x6d8>
 8017132:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017134:	461a      	mov	r2, r3
 8017136:	4620      	mov	r0, r4
 8017138:	f001 fe24 	bl	8018d84 <__lshift>
 801713c:	9012      	str	r0, [sp, #72]	; 0x48
 801713e:	2800      	cmp	r0, #0
 8017140:	f47f af64 	bne.w	801700c <_strtod_l+0x73c>
 8017144:	e600      	b.n	8016d48 <_strtod_l+0x478>
 8017146:	bf00      	nop
 8017148:	94a03595 	.word	0x94a03595
 801714c:	3fcfffff 	.word	0x3fcfffff
 8017150:	94a03595 	.word	0x94a03595
 8017154:	3fdfffff 	.word	0x3fdfffff
 8017158:	35afe535 	.word	0x35afe535
 801715c:	3fe00000 	.word	0x3fe00000
 8017160:	00000000 	.word	0x00000000
 8017164:	39500000 	.word	0x39500000
 8017168:	0801a3e8 	.word	0x0801a3e8
 801716c:	fffffc02 	.word	0xfffffc02
 8017170:	7ff00000 	.word	0x7ff00000
 8017174:	46cb      	mov	fp, r9
 8017176:	d15f      	bne.n	8017238 <_strtod_l+0x968>
 8017178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801717c:	f1ba 0f00 	cmp.w	sl, #0
 8017180:	d02a      	beq.n	80171d8 <_strtod_l+0x908>
 8017182:	4aa7      	ldr	r2, [pc, #668]	; (8017420 <_strtod_l+0xb50>)
 8017184:	4293      	cmp	r3, r2
 8017186:	d12b      	bne.n	80171e0 <_strtod_l+0x910>
 8017188:	9b04      	ldr	r3, [sp, #16]
 801718a:	4642      	mov	r2, r8
 801718c:	b1fb      	cbz	r3, 80171ce <_strtod_l+0x8fe>
 801718e:	4ba5      	ldr	r3, [pc, #660]	; (8017424 <_strtod_l+0xb54>)
 8017190:	ea09 0303 	and.w	r3, r9, r3
 8017194:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017198:	f04f 31ff 	mov.w	r1, #4294967295
 801719c:	d81a      	bhi.n	80171d4 <_strtod_l+0x904>
 801719e:	0d1b      	lsrs	r3, r3, #20
 80171a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80171a4:	fa01 f303 	lsl.w	r3, r1, r3
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d119      	bne.n	80171e0 <_strtod_l+0x910>
 80171ac:	4b9e      	ldr	r3, [pc, #632]	; (8017428 <_strtod_l+0xb58>)
 80171ae:	459b      	cmp	fp, r3
 80171b0:	d102      	bne.n	80171b8 <_strtod_l+0x8e8>
 80171b2:	3201      	adds	r2, #1
 80171b4:	f43f adc8 	beq.w	8016d48 <_strtod_l+0x478>
 80171b8:	4b9a      	ldr	r3, [pc, #616]	; (8017424 <_strtod_l+0xb54>)
 80171ba:	ea0b 0303 	and.w	r3, fp, r3
 80171be:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80171c2:	f04f 0800 	mov.w	r8, #0
 80171c6:	9b04      	ldr	r3, [sp, #16]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d188      	bne.n	80170de <_strtod_l+0x80e>
 80171cc:	e5c6      	b.n	8016d5c <_strtod_l+0x48c>
 80171ce:	f04f 33ff 	mov.w	r3, #4294967295
 80171d2:	e7e9      	b.n	80171a8 <_strtod_l+0x8d8>
 80171d4:	460b      	mov	r3, r1
 80171d6:	e7e7      	b.n	80171a8 <_strtod_l+0x8d8>
 80171d8:	ea53 0308 	orrs.w	r3, r3, r8
 80171dc:	f43f af6f 	beq.w	80170be <_strtod_l+0x7ee>
 80171e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171e2:	b1cb      	cbz	r3, 8017218 <_strtod_l+0x948>
 80171e4:	ea13 0f0b 	tst.w	r3, fp
 80171e8:	d0ed      	beq.n	80171c6 <_strtod_l+0x8f6>
 80171ea:	9a04      	ldr	r2, [sp, #16]
 80171ec:	4640      	mov	r0, r8
 80171ee:	4649      	mov	r1, r9
 80171f0:	f1ba 0f00 	cmp.w	sl, #0
 80171f4:	d014      	beq.n	8017220 <_strtod_l+0x950>
 80171f6:	f7ff fb50 	bl	801689a <sulp>
 80171fa:	ee38 7b00 	vadd.f64	d7, d8, d0
 80171fe:	ec59 8b17 	vmov	r8, r9, d7
 8017202:	e7e0      	b.n	80171c6 <_strtod_l+0x8f6>
 8017204:	4013      	ands	r3, r2
 8017206:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801720a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801720e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017212:	f04f 38ff 	mov.w	r8, #4294967295
 8017216:	e7d6      	b.n	80171c6 <_strtod_l+0x8f6>
 8017218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801721a:	ea13 0f08 	tst.w	r3, r8
 801721e:	e7e3      	b.n	80171e8 <_strtod_l+0x918>
 8017220:	f7ff fb3b 	bl	801689a <sulp>
 8017224:	ee38 0b40 	vsub.f64	d0, d8, d0
 8017228:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017230:	ec59 8b10 	vmov	r8, r9, d0
 8017234:	d1c7      	bne.n	80171c6 <_strtod_l+0x8f6>
 8017236:	e5f7      	b.n	8016e28 <_strtod_l+0x558>
 8017238:	4631      	mov	r1, r6
 801723a:	4628      	mov	r0, r5
 801723c:	f001 ff90 	bl	8019160 <__ratio>
 8017240:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8017244:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801724c:	d865      	bhi.n	801731a <_strtod_l+0xa4a>
 801724e:	f1ba 0f00 	cmp.w	sl, #0
 8017252:	d042      	beq.n	80172da <_strtod_l+0xa0a>
 8017254:	4b75      	ldr	r3, [pc, #468]	; (801742c <_strtod_l+0xb5c>)
 8017256:	2200      	movs	r2, #0
 8017258:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801725c:	4871      	ldr	r0, [pc, #452]	; (8017424 <_strtod_l+0xb54>)
 801725e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017438 <_strtod_l+0xb68>
 8017262:	ea0b 0100 	and.w	r1, fp, r0
 8017266:	4561      	cmp	r1, ip
 8017268:	f040 808e 	bne.w	8017388 <_strtod_l+0xab8>
 801726c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8017270:	ec49 8b10 	vmov	d0, r8, r9
 8017274:	ec43 2b1c 	vmov	d12, r2, r3
 8017278:	910a      	str	r1, [sp, #40]	; 0x28
 801727a:	f001 fe99 	bl	8018fb0 <__ulp>
 801727e:	ec49 8b1e 	vmov	d14, r8, r9
 8017282:	4868      	ldr	r0, [pc, #416]	; (8017424 <_strtod_l+0xb54>)
 8017284:	eeac eb00 	vfma.f64	d14, d12, d0
 8017288:	ee1e 3a90 	vmov	r3, s29
 801728c:	4a68      	ldr	r2, [pc, #416]	; (8017430 <_strtod_l+0xb60>)
 801728e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017290:	4018      	ands	r0, r3
 8017292:	4290      	cmp	r0, r2
 8017294:	ec59 8b1e 	vmov	r8, r9, d14
 8017298:	d94e      	bls.n	8017338 <_strtod_l+0xa68>
 801729a:	ee18 3a90 	vmov	r3, s17
 801729e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d104      	bne.n	80172b0 <_strtod_l+0x9e0>
 80172a6:	ee18 3a10 	vmov	r3, s16
 80172aa:	3301      	adds	r3, #1
 80172ac:	f43f ad4c 	beq.w	8016d48 <_strtod_l+0x478>
 80172b0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8017428 <_strtod_l+0xb58>
 80172b4:	f04f 38ff 	mov.w	r8, #4294967295
 80172b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80172ba:	4620      	mov	r0, r4
 80172bc:	f001 fb46 	bl	801894c <_Bfree>
 80172c0:	4639      	mov	r1, r7
 80172c2:	4620      	mov	r0, r4
 80172c4:	f001 fb42 	bl	801894c <_Bfree>
 80172c8:	4631      	mov	r1, r6
 80172ca:	4620      	mov	r0, r4
 80172cc:	f001 fb3e 	bl	801894c <_Bfree>
 80172d0:	4629      	mov	r1, r5
 80172d2:	4620      	mov	r0, r4
 80172d4:	f001 fb3a 	bl	801894c <_Bfree>
 80172d8:	e619      	b.n	8016f0e <_strtod_l+0x63e>
 80172da:	f1b8 0f00 	cmp.w	r8, #0
 80172de:	d112      	bne.n	8017306 <_strtod_l+0xa36>
 80172e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80172e4:	b9b3      	cbnz	r3, 8017314 <_strtod_l+0xa44>
 80172e6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80172ea:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80172ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80172f6:	bf58      	it	pl
 80172f8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80172fc:	eeb1 7b4d 	vneg.f64	d7, d13
 8017300:	ec53 2b17 	vmov	r2, r3, d7
 8017304:	e7aa      	b.n	801725c <_strtod_l+0x98c>
 8017306:	f1b8 0f01 	cmp.w	r8, #1
 801730a:	d103      	bne.n	8017314 <_strtod_l+0xa44>
 801730c:	f1b9 0f00 	cmp.w	r9, #0
 8017310:	f43f ad8a 	beq.w	8016e28 <_strtod_l+0x558>
 8017314:	4b47      	ldr	r3, [pc, #284]	; (8017434 <_strtod_l+0xb64>)
 8017316:	2200      	movs	r2, #0
 8017318:	e79e      	b.n	8017258 <_strtod_l+0x988>
 801731a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801731e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017322:	f1ba 0f00 	cmp.w	sl, #0
 8017326:	d104      	bne.n	8017332 <_strtod_l+0xa62>
 8017328:	eeb1 7b4d 	vneg.f64	d7, d13
 801732c:	ec53 2b17 	vmov	r2, r3, d7
 8017330:	e794      	b.n	801725c <_strtod_l+0x98c>
 8017332:	eeb0 7b4d 	vmov.f64	d7, d13
 8017336:	e7f9      	b.n	801732c <_strtod_l+0xa5c>
 8017338:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801733c:	9b04      	ldr	r3, [sp, #16]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d1ba      	bne.n	80172b8 <_strtod_l+0x9e8>
 8017342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017346:	0d1b      	lsrs	r3, r3, #20
 8017348:	051b      	lsls	r3, r3, #20
 801734a:	4299      	cmp	r1, r3
 801734c:	d1b4      	bne.n	80172b8 <_strtod_l+0x9e8>
 801734e:	ec51 0b1d 	vmov	r0, r1, d13
 8017352:	f7e9 fa09 	bl	8000768 <__aeabi_d2lz>
 8017356:	f7e9 f9c1 	bl	80006dc <__aeabi_l2d>
 801735a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801735e:	ec41 0b17 	vmov	d7, r0, r1
 8017362:	ea43 0308 	orr.w	r3, r3, r8
 8017366:	ea53 030a 	orrs.w	r3, r3, sl
 801736a:	ee3d db47 	vsub.f64	d13, d13, d7
 801736e:	d03c      	beq.n	80173ea <_strtod_l+0xb1a>
 8017370:	eeb4 dbca 	vcmpe.f64	d13, d10
 8017374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017378:	f53f acf0 	bmi.w	8016d5c <_strtod_l+0x48c>
 801737c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8017380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017384:	dd98      	ble.n	80172b8 <_strtod_l+0x9e8>
 8017386:	e4e9      	b.n	8016d5c <_strtod_l+0x48c>
 8017388:	9804      	ldr	r0, [sp, #16]
 801738a:	b1f0      	cbz	r0, 80173ca <_strtod_l+0xafa>
 801738c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017390:	d81b      	bhi.n	80173ca <_strtod_l+0xafa>
 8017392:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017418 <_strtod_l+0xb48>
 8017396:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801739a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801739e:	d811      	bhi.n	80173c4 <_strtod_l+0xaf4>
 80173a0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80173a4:	ee1d 3a10 	vmov	r3, s26
 80173a8:	2b01      	cmp	r3, #1
 80173aa:	bf38      	it	cc
 80173ac:	2301      	movcc	r3, #1
 80173ae:	ee0d 3a10 	vmov	s26, r3
 80173b2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80173b6:	f1ba 0f00 	cmp.w	sl, #0
 80173ba:	d113      	bne.n	80173e4 <_strtod_l+0xb14>
 80173bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80173c0:	ec53 2b17 	vmov	r2, r3, d7
 80173c4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80173c8:	1a43      	subs	r3, r0, r1
 80173ca:	eeb0 0b48 	vmov.f64	d0, d8
 80173ce:	ec43 2b1c 	vmov	d12, r2, r3
 80173d2:	910a      	str	r1, [sp, #40]	; 0x28
 80173d4:	f001 fdec 	bl	8018fb0 <__ulp>
 80173d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80173da:	eeac 8b00 	vfma.f64	d8, d12, d0
 80173de:	ec59 8b18 	vmov	r8, r9, d8
 80173e2:	e7ab      	b.n	801733c <_strtod_l+0xa6c>
 80173e4:	eeb0 7b4d 	vmov.f64	d7, d13
 80173e8:	e7ea      	b.n	80173c0 <_strtod_l+0xaf0>
 80173ea:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80173ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f2:	f57f af61 	bpl.w	80172b8 <_strtod_l+0x9e8>
 80173f6:	e4b1      	b.n	8016d5c <_strtod_l+0x48c>
 80173f8:	2300      	movs	r3, #0
 80173fa:	9308      	str	r3, [sp, #32]
 80173fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80173fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017400:	6013      	str	r3, [r2, #0]
 8017402:	f7ff baad 	b.w	8016960 <_strtod_l+0x90>
 8017406:	2a65      	cmp	r2, #101	; 0x65
 8017408:	f43f ab9f 	beq.w	8016b4a <_strtod_l+0x27a>
 801740c:	2a45      	cmp	r2, #69	; 0x45
 801740e:	f43f ab9c 	beq.w	8016b4a <_strtod_l+0x27a>
 8017412:	2101      	movs	r1, #1
 8017414:	f7ff bbd4 	b.w	8016bc0 <_strtod_l+0x2f0>
 8017418:	ffc00000 	.word	0xffc00000
 801741c:	41dfffff 	.word	0x41dfffff
 8017420:	000fffff 	.word	0x000fffff
 8017424:	7ff00000 	.word	0x7ff00000
 8017428:	7fefffff 	.word	0x7fefffff
 801742c:	3ff00000 	.word	0x3ff00000
 8017430:	7c9fffff 	.word	0x7c9fffff
 8017434:	bff00000 	.word	0xbff00000
 8017438:	7fe00000 	.word	0x7fe00000

0801743c <_strtod_r>:
 801743c:	4b01      	ldr	r3, [pc, #4]	; (8017444 <_strtod_r+0x8>)
 801743e:	f7ff ba47 	b.w	80168d0 <_strtod_l>
 8017442:	bf00      	nop
 8017444:	24000168 	.word	0x24000168

08017448 <_strtol_l.constprop.0>:
 8017448:	2b01      	cmp	r3, #1
 801744a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801744e:	d001      	beq.n	8017454 <_strtol_l.constprop.0+0xc>
 8017450:	2b24      	cmp	r3, #36	; 0x24
 8017452:	d906      	bls.n	8017462 <_strtol_l.constprop.0+0x1a>
 8017454:	f7fe fb30 	bl	8015ab8 <__errno>
 8017458:	2316      	movs	r3, #22
 801745a:	6003      	str	r3, [r0, #0]
 801745c:	2000      	movs	r0, #0
 801745e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017462:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017548 <_strtol_l.constprop.0+0x100>
 8017466:	460d      	mov	r5, r1
 8017468:	462e      	mov	r6, r5
 801746a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801746e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017472:	f017 0708 	ands.w	r7, r7, #8
 8017476:	d1f7      	bne.n	8017468 <_strtol_l.constprop.0+0x20>
 8017478:	2c2d      	cmp	r4, #45	; 0x2d
 801747a:	d132      	bne.n	80174e2 <_strtol_l.constprop.0+0x9a>
 801747c:	782c      	ldrb	r4, [r5, #0]
 801747e:	2701      	movs	r7, #1
 8017480:	1cb5      	adds	r5, r6, #2
 8017482:	2b00      	cmp	r3, #0
 8017484:	d05b      	beq.n	801753e <_strtol_l.constprop.0+0xf6>
 8017486:	2b10      	cmp	r3, #16
 8017488:	d109      	bne.n	801749e <_strtol_l.constprop.0+0x56>
 801748a:	2c30      	cmp	r4, #48	; 0x30
 801748c:	d107      	bne.n	801749e <_strtol_l.constprop.0+0x56>
 801748e:	782c      	ldrb	r4, [r5, #0]
 8017490:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017494:	2c58      	cmp	r4, #88	; 0x58
 8017496:	d14d      	bne.n	8017534 <_strtol_l.constprop.0+0xec>
 8017498:	786c      	ldrb	r4, [r5, #1]
 801749a:	2310      	movs	r3, #16
 801749c:	3502      	adds	r5, #2
 801749e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80174a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80174a6:	f04f 0c00 	mov.w	ip, #0
 80174aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80174ae:	4666      	mov	r6, ip
 80174b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80174b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80174b8:	f1be 0f09 	cmp.w	lr, #9
 80174bc:	d816      	bhi.n	80174ec <_strtol_l.constprop.0+0xa4>
 80174be:	4674      	mov	r4, lr
 80174c0:	42a3      	cmp	r3, r4
 80174c2:	dd24      	ble.n	801750e <_strtol_l.constprop.0+0xc6>
 80174c4:	f1bc 0f00 	cmp.w	ip, #0
 80174c8:	db1e      	blt.n	8017508 <_strtol_l.constprop.0+0xc0>
 80174ca:	45b1      	cmp	r9, r6
 80174cc:	d31c      	bcc.n	8017508 <_strtol_l.constprop.0+0xc0>
 80174ce:	d101      	bne.n	80174d4 <_strtol_l.constprop.0+0x8c>
 80174d0:	45a2      	cmp	sl, r4
 80174d2:	db19      	blt.n	8017508 <_strtol_l.constprop.0+0xc0>
 80174d4:	fb06 4603 	mla	r6, r6, r3, r4
 80174d8:	f04f 0c01 	mov.w	ip, #1
 80174dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80174e0:	e7e8      	b.n	80174b4 <_strtol_l.constprop.0+0x6c>
 80174e2:	2c2b      	cmp	r4, #43	; 0x2b
 80174e4:	bf04      	itt	eq
 80174e6:	782c      	ldrbeq	r4, [r5, #0]
 80174e8:	1cb5      	addeq	r5, r6, #2
 80174ea:	e7ca      	b.n	8017482 <_strtol_l.constprop.0+0x3a>
 80174ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80174f0:	f1be 0f19 	cmp.w	lr, #25
 80174f4:	d801      	bhi.n	80174fa <_strtol_l.constprop.0+0xb2>
 80174f6:	3c37      	subs	r4, #55	; 0x37
 80174f8:	e7e2      	b.n	80174c0 <_strtol_l.constprop.0+0x78>
 80174fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80174fe:	f1be 0f19 	cmp.w	lr, #25
 8017502:	d804      	bhi.n	801750e <_strtol_l.constprop.0+0xc6>
 8017504:	3c57      	subs	r4, #87	; 0x57
 8017506:	e7db      	b.n	80174c0 <_strtol_l.constprop.0+0x78>
 8017508:	f04f 3cff 	mov.w	ip, #4294967295
 801750c:	e7e6      	b.n	80174dc <_strtol_l.constprop.0+0x94>
 801750e:	f1bc 0f00 	cmp.w	ip, #0
 8017512:	da05      	bge.n	8017520 <_strtol_l.constprop.0+0xd8>
 8017514:	2322      	movs	r3, #34	; 0x22
 8017516:	6003      	str	r3, [r0, #0]
 8017518:	4646      	mov	r6, r8
 801751a:	b942      	cbnz	r2, 801752e <_strtol_l.constprop.0+0xe6>
 801751c:	4630      	mov	r0, r6
 801751e:	e79e      	b.n	801745e <_strtol_l.constprop.0+0x16>
 8017520:	b107      	cbz	r7, 8017524 <_strtol_l.constprop.0+0xdc>
 8017522:	4276      	negs	r6, r6
 8017524:	2a00      	cmp	r2, #0
 8017526:	d0f9      	beq.n	801751c <_strtol_l.constprop.0+0xd4>
 8017528:	f1bc 0f00 	cmp.w	ip, #0
 801752c:	d000      	beq.n	8017530 <_strtol_l.constprop.0+0xe8>
 801752e:	1e69      	subs	r1, r5, #1
 8017530:	6011      	str	r1, [r2, #0]
 8017532:	e7f3      	b.n	801751c <_strtol_l.constprop.0+0xd4>
 8017534:	2430      	movs	r4, #48	; 0x30
 8017536:	2b00      	cmp	r3, #0
 8017538:	d1b1      	bne.n	801749e <_strtol_l.constprop.0+0x56>
 801753a:	2308      	movs	r3, #8
 801753c:	e7af      	b.n	801749e <_strtol_l.constprop.0+0x56>
 801753e:	2c30      	cmp	r4, #48	; 0x30
 8017540:	d0a5      	beq.n	801748e <_strtol_l.constprop.0+0x46>
 8017542:	230a      	movs	r3, #10
 8017544:	e7ab      	b.n	801749e <_strtol_l.constprop.0+0x56>
 8017546:	bf00      	nop
 8017548:	0801a411 	.word	0x0801a411

0801754c <_strtol_r>:
 801754c:	f7ff bf7c 	b.w	8017448 <_strtol_l.constprop.0>

08017550 <_write_r>:
 8017550:	b538      	push	{r3, r4, r5, lr}
 8017552:	4d07      	ldr	r5, [pc, #28]	; (8017570 <_write_r+0x20>)
 8017554:	4604      	mov	r4, r0
 8017556:	4608      	mov	r0, r1
 8017558:	4611      	mov	r1, r2
 801755a:	2200      	movs	r2, #0
 801755c:	602a      	str	r2, [r5, #0]
 801755e:	461a      	mov	r2, r3
 8017560:	f7eb fbe5 	bl	8002d2e <_write>
 8017564:	1c43      	adds	r3, r0, #1
 8017566:	d102      	bne.n	801756e <_write_r+0x1e>
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	b103      	cbz	r3, 801756e <_write_r+0x1e>
 801756c:	6023      	str	r3, [r4, #0]
 801756e:	bd38      	pop	{r3, r4, r5, pc}
 8017570:	24003208 	.word	0x24003208

08017574 <_close_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d06      	ldr	r5, [pc, #24]	; (8017590 <_close_r+0x1c>)
 8017578:	2300      	movs	r3, #0
 801757a:	4604      	mov	r4, r0
 801757c:	4608      	mov	r0, r1
 801757e:	602b      	str	r3, [r5, #0]
 8017580:	f7eb fbf1 	bl	8002d66 <_close>
 8017584:	1c43      	adds	r3, r0, #1
 8017586:	d102      	bne.n	801758e <_close_r+0x1a>
 8017588:	682b      	ldr	r3, [r5, #0]
 801758a:	b103      	cbz	r3, 801758e <_close_r+0x1a>
 801758c:	6023      	str	r3, [r4, #0]
 801758e:	bd38      	pop	{r3, r4, r5, pc}
 8017590:	24003208 	.word	0x24003208

08017594 <quorem>:
 8017594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017598:	6903      	ldr	r3, [r0, #16]
 801759a:	690c      	ldr	r4, [r1, #16]
 801759c:	42a3      	cmp	r3, r4
 801759e:	4607      	mov	r7, r0
 80175a0:	f2c0 8081 	blt.w	80176a6 <quorem+0x112>
 80175a4:	3c01      	subs	r4, #1
 80175a6:	f101 0814 	add.w	r8, r1, #20
 80175aa:	f100 0514 	add.w	r5, r0, #20
 80175ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80175b2:	9301      	str	r3, [sp, #4]
 80175b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80175b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80175bc:	3301      	adds	r3, #1
 80175be:	429a      	cmp	r2, r3
 80175c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80175c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80175c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80175cc:	d331      	bcc.n	8017632 <quorem+0x9e>
 80175ce:	f04f 0e00 	mov.w	lr, #0
 80175d2:	4640      	mov	r0, r8
 80175d4:	46ac      	mov	ip, r5
 80175d6:	46f2      	mov	sl, lr
 80175d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80175dc:	b293      	uxth	r3, r2
 80175de:	fb06 e303 	mla	r3, r6, r3, lr
 80175e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80175e6:	b29b      	uxth	r3, r3
 80175e8:	ebaa 0303 	sub.w	r3, sl, r3
 80175ec:	f8dc a000 	ldr.w	sl, [ip]
 80175f0:	0c12      	lsrs	r2, r2, #16
 80175f2:	fa13 f38a 	uxtah	r3, r3, sl
 80175f6:	fb06 e202 	mla	r2, r6, r2, lr
 80175fa:	9300      	str	r3, [sp, #0]
 80175fc:	9b00      	ldr	r3, [sp, #0]
 80175fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017602:	b292      	uxth	r2, r2
 8017604:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801760c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017610:	4581      	cmp	r9, r0
 8017612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017616:	f84c 3b04 	str.w	r3, [ip], #4
 801761a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801761e:	d2db      	bcs.n	80175d8 <quorem+0x44>
 8017620:	f855 300b 	ldr.w	r3, [r5, fp]
 8017624:	b92b      	cbnz	r3, 8017632 <quorem+0x9e>
 8017626:	9b01      	ldr	r3, [sp, #4]
 8017628:	3b04      	subs	r3, #4
 801762a:	429d      	cmp	r5, r3
 801762c:	461a      	mov	r2, r3
 801762e:	d32e      	bcc.n	801768e <quorem+0xfa>
 8017630:	613c      	str	r4, [r7, #16]
 8017632:	4638      	mov	r0, r7
 8017634:	f001 fc16 	bl	8018e64 <__mcmp>
 8017638:	2800      	cmp	r0, #0
 801763a:	db24      	blt.n	8017686 <quorem+0xf2>
 801763c:	3601      	adds	r6, #1
 801763e:	4628      	mov	r0, r5
 8017640:	f04f 0c00 	mov.w	ip, #0
 8017644:	f858 2b04 	ldr.w	r2, [r8], #4
 8017648:	f8d0 e000 	ldr.w	lr, [r0]
 801764c:	b293      	uxth	r3, r2
 801764e:	ebac 0303 	sub.w	r3, ip, r3
 8017652:	0c12      	lsrs	r2, r2, #16
 8017654:	fa13 f38e 	uxtah	r3, r3, lr
 8017658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801765c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017660:	b29b      	uxth	r3, r3
 8017662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017666:	45c1      	cmp	r9, r8
 8017668:	f840 3b04 	str.w	r3, [r0], #4
 801766c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017670:	d2e8      	bcs.n	8017644 <quorem+0xb0>
 8017672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801767a:	b922      	cbnz	r2, 8017686 <quorem+0xf2>
 801767c:	3b04      	subs	r3, #4
 801767e:	429d      	cmp	r5, r3
 8017680:	461a      	mov	r2, r3
 8017682:	d30a      	bcc.n	801769a <quorem+0x106>
 8017684:	613c      	str	r4, [r7, #16]
 8017686:	4630      	mov	r0, r6
 8017688:	b003      	add	sp, #12
 801768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801768e:	6812      	ldr	r2, [r2, #0]
 8017690:	3b04      	subs	r3, #4
 8017692:	2a00      	cmp	r2, #0
 8017694:	d1cc      	bne.n	8017630 <quorem+0x9c>
 8017696:	3c01      	subs	r4, #1
 8017698:	e7c7      	b.n	801762a <quorem+0x96>
 801769a:	6812      	ldr	r2, [r2, #0]
 801769c:	3b04      	subs	r3, #4
 801769e:	2a00      	cmp	r2, #0
 80176a0:	d1f0      	bne.n	8017684 <quorem+0xf0>
 80176a2:	3c01      	subs	r4, #1
 80176a4:	e7eb      	b.n	801767e <quorem+0xea>
 80176a6:	2000      	movs	r0, #0
 80176a8:	e7ee      	b.n	8017688 <quorem+0xf4>
 80176aa:	0000      	movs	r0, r0
 80176ac:	0000      	movs	r0, r0
	...

080176b0 <_dtoa_r>:
 80176b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b4:	ed2d 8b02 	vpush	{d8}
 80176b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80176ba:	b091      	sub	sp, #68	; 0x44
 80176bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80176c0:	ec59 8b10 	vmov	r8, r9, d0
 80176c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80176c6:	9106      	str	r1, [sp, #24]
 80176c8:	4606      	mov	r6, r0
 80176ca:	9208      	str	r2, [sp, #32]
 80176cc:	930c      	str	r3, [sp, #48]	; 0x30
 80176ce:	b975      	cbnz	r5, 80176ee <_dtoa_r+0x3e>
 80176d0:	2010      	movs	r0, #16
 80176d2:	f001 f8e1 	bl	8018898 <malloc>
 80176d6:	4602      	mov	r2, r0
 80176d8:	6270      	str	r0, [r6, #36]	; 0x24
 80176da:	b920      	cbnz	r0, 80176e6 <_dtoa_r+0x36>
 80176dc:	4baa      	ldr	r3, [pc, #680]	; (8017988 <_dtoa_r+0x2d8>)
 80176de:	21ea      	movs	r1, #234	; 0xea
 80176e0:	48aa      	ldr	r0, [pc, #680]	; (801798c <_dtoa_r+0x2dc>)
 80176e2:	f002 f84f 	bl	8019784 <__assert_func>
 80176e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80176ea:	6005      	str	r5, [r0, #0]
 80176ec:	60c5      	str	r5, [r0, #12]
 80176ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80176f0:	6819      	ldr	r1, [r3, #0]
 80176f2:	b151      	cbz	r1, 801770a <_dtoa_r+0x5a>
 80176f4:	685a      	ldr	r2, [r3, #4]
 80176f6:	604a      	str	r2, [r1, #4]
 80176f8:	2301      	movs	r3, #1
 80176fa:	4093      	lsls	r3, r2
 80176fc:	608b      	str	r3, [r1, #8]
 80176fe:	4630      	mov	r0, r6
 8017700:	f001 f924 	bl	801894c <_Bfree>
 8017704:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017706:	2200      	movs	r2, #0
 8017708:	601a      	str	r2, [r3, #0]
 801770a:	f1b9 0300 	subs.w	r3, r9, #0
 801770e:	bfbb      	ittet	lt
 8017710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017714:	9303      	strlt	r3, [sp, #12]
 8017716:	2300      	movge	r3, #0
 8017718:	2201      	movlt	r2, #1
 801771a:	bfac      	ite	ge
 801771c:	6023      	strge	r3, [r4, #0]
 801771e:	6022      	strlt	r2, [r4, #0]
 8017720:	4b9b      	ldr	r3, [pc, #620]	; (8017990 <_dtoa_r+0x2e0>)
 8017722:	9c03      	ldr	r4, [sp, #12]
 8017724:	43a3      	bics	r3, r4
 8017726:	d11c      	bne.n	8017762 <_dtoa_r+0xb2>
 8017728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801772a:	f242 730f 	movw	r3, #9999	; 0x270f
 801772e:	6013      	str	r3, [r2, #0]
 8017730:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017734:	ea53 0308 	orrs.w	r3, r3, r8
 8017738:	f000 84fd 	beq.w	8018136 <_dtoa_r+0xa86>
 801773c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801773e:	b963      	cbnz	r3, 801775a <_dtoa_r+0xaa>
 8017740:	4b94      	ldr	r3, [pc, #592]	; (8017994 <_dtoa_r+0x2e4>)
 8017742:	e01f      	b.n	8017784 <_dtoa_r+0xd4>
 8017744:	4b94      	ldr	r3, [pc, #592]	; (8017998 <_dtoa_r+0x2e8>)
 8017746:	9301      	str	r3, [sp, #4]
 8017748:	3308      	adds	r3, #8
 801774a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801774c:	6013      	str	r3, [r2, #0]
 801774e:	9801      	ldr	r0, [sp, #4]
 8017750:	b011      	add	sp, #68	; 0x44
 8017752:	ecbd 8b02 	vpop	{d8}
 8017756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801775a:	4b8e      	ldr	r3, [pc, #568]	; (8017994 <_dtoa_r+0x2e4>)
 801775c:	9301      	str	r3, [sp, #4]
 801775e:	3303      	adds	r3, #3
 8017760:	e7f3      	b.n	801774a <_dtoa_r+0x9a>
 8017762:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017766:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801776a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801776e:	d10b      	bne.n	8017788 <_dtoa_r+0xd8>
 8017770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017772:	2301      	movs	r3, #1
 8017774:	6013      	str	r3, [r2, #0]
 8017776:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017778:	2b00      	cmp	r3, #0
 801777a:	f000 84d9 	beq.w	8018130 <_dtoa_r+0xa80>
 801777e:	4887      	ldr	r0, [pc, #540]	; (801799c <_dtoa_r+0x2ec>)
 8017780:	6018      	str	r0, [r3, #0]
 8017782:	1e43      	subs	r3, r0, #1
 8017784:	9301      	str	r3, [sp, #4]
 8017786:	e7e2      	b.n	801774e <_dtoa_r+0x9e>
 8017788:	a90f      	add	r1, sp, #60	; 0x3c
 801778a:	aa0e      	add	r2, sp, #56	; 0x38
 801778c:	4630      	mov	r0, r6
 801778e:	eeb0 0b48 	vmov.f64	d0, d8
 8017792:	f001 fc89 	bl	80190a8 <__d2b>
 8017796:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801779a:	4605      	mov	r5, r0
 801779c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801779e:	2900      	cmp	r1, #0
 80177a0:	d046      	beq.n	8017830 <_dtoa_r+0x180>
 80177a2:	ee18 4a90 	vmov	r4, s17
 80177a6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80177aa:	ec53 2b18 	vmov	r2, r3, d8
 80177ae:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80177b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80177b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80177ba:	2400      	movs	r4, #0
 80177bc:	ec43 2b16 	vmov	d6, r2, r3
 80177c0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80177c4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017970 <_dtoa_r+0x2c0>
 80177c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80177cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8017978 <_dtoa_r+0x2c8>
 80177d0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80177d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017980 <_dtoa_r+0x2d0>
 80177d8:	ee07 1a90 	vmov	s15, r1
 80177dc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80177e0:	eeb0 7b46 	vmov.f64	d7, d6
 80177e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80177e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80177ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80177f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177f4:	ee16 ba90 	vmov	fp, s13
 80177f8:	940a      	str	r4, [sp, #40]	; 0x28
 80177fa:	d508      	bpl.n	801780e <_dtoa_r+0x15e>
 80177fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017800:	eeb4 6b47 	vcmp.f64	d6, d7
 8017804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017808:	bf18      	it	ne
 801780a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801780e:	f1bb 0f16 	cmp.w	fp, #22
 8017812:	d82f      	bhi.n	8017874 <_dtoa_r+0x1c4>
 8017814:	4b62      	ldr	r3, [pc, #392]	; (80179a0 <_dtoa_r+0x2f0>)
 8017816:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801781a:	ed93 7b00 	vldr	d7, [r3]
 801781e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017826:	d501      	bpl.n	801782c <_dtoa_r+0x17c>
 8017828:	f10b 3bff 	add.w	fp, fp, #4294967295
 801782c:	2300      	movs	r3, #0
 801782e:	e022      	b.n	8017876 <_dtoa_r+0x1c6>
 8017830:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017832:	4401      	add	r1, r0
 8017834:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017838:	2b20      	cmp	r3, #32
 801783a:	bfc1      	itttt	gt
 801783c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017840:	fa04 f303 	lslgt.w	r3, r4, r3
 8017844:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017848:	fa28 f804 	lsrgt.w	r8, r8, r4
 801784c:	bfd6      	itet	le
 801784e:	f1c3 0320 	rsble	r3, r3, #32
 8017852:	ea43 0808 	orrgt.w	r8, r3, r8
 8017856:	fa08 f803 	lslle.w	r8, r8, r3
 801785a:	ee07 8a90 	vmov	s15, r8
 801785e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017862:	3901      	subs	r1, #1
 8017864:	ee17 4a90 	vmov	r4, s15
 8017868:	ec53 2b17 	vmov	r2, r3, d7
 801786c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017870:	2401      	movs	r4, #1
 8017872:	e7a3      	b.n	80177bc <_dtoa_r+0x10c>
 8017874:	2301      	movs	r3, #1
 8017876:	930b      	str	r3, [sp, #44]	; 0x2c
 8017878:	1a43      	subs	r3, r0, r1
 801787a:	1e5a      	subs	r2, r3, #1
 801787c:	bf45      	ittet	mi
 801787e:	f1c3 0301 	rsbmi	r3, r3, #1
 8017882:	9304      	strmi	r3, [sp, #16]
 8017884:	2300      	movpl	r3, #0
 8017886:	2300      	movmi	r3, #0
 8017888:	9205      	str	r2, [sp, #20]
 801788a:	bf54      	ite	pl
 801788c:	9304      	strpl	r3, [sp, #16]
 801788e:	9305      	strmi	r3, [sp, #20]
 8017890:	f1bb 0f00 	cmp.w	fp, #0
 8017894:	db18      	blt.n	80178c8 <_dtoa_r+0x218>
 8017896:	9b05      	ldr	r3, [sp, #20]
 8017898:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801789c:	445b      	add	r3, fp
 801789e:	9305      	str	r3, [sp, #20]
 80178a0:	2300      	movs	r3, #0
 80178a2:	9a06      	ldr	r2, [sp, #24]
 80178a4:	2a09      	cmp	r2, #9
 80178a6:	d849      	bhi.n	801793c <_dtoa_r+0x28c>
 80178a8:	2a05      	cmp	r2, #5
 80178aa:	bfc4      	itt	gt
 80178ac:	3a04      	subgt	r2, #4
 80178ae:	9206      	strgt	r2, [sp, #24]
 80178b0:	9a06      	ldr	r2, [sp, #24]
 80178b2:	f1a2 0202 	sub.w	r2, r2, #2
 80178b6:	bfcc      	ite	gt
 80178b8:	2400      	movgt	r4, #0
 80178ba:	2401      	movle	r4, #1
 80178bc:	2a03      	cmp	r2, #3
 80178be:	d848      	bhi.n	8017952 <_dtoa_r+0x2a2>
 80178c0:	e8df f002 	tbb	[pc, r2]
 80178c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80178c8:	9b04      	ldr	r3, [sp, #16]
 80178ca:	2200      	movs	r2, #0
 80178cc:	eba3 030b 	sub.w	r3, r3, fp
 80178d0:	9304      	str	r3, [sp, #16]
 80178d2:	9209      	str	r2, [sp, #36]	; 0x24
 80178d4:	f1cb 0300 	rsb	r3, fp, #0
 80178d8:	e7e3      	b.n	80178a2 <_dtoa_r+0x1f2>
 80178da:	2200      	movs	r2, #0
 80178dc:	9207      	str	r2, [sp, #28]
 80178de:	9a08      	ldr	r2, [sp, #32]
 80178e0:	2a00      	cmp	r2, #0
 80178e2:	dc39      	bgt.n	8017958 <_dtoa_r+0x2a8>
 80178e4:	f04f 0a01 	mov.w	sl, #1
 80178e8:	46d1      	mov	r9, sl
 80178ea:	4652      	mov	r2, sl
 80178ec:	f8cd a020 	str.w	sl, [sp, #32]
 80178f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80178f2:	2100      	movs	r1, #0
 80178f4:	6079      	str	r1, [r7, #4]
 80178f6:	2004      	movs	r0, #4
 80178f8:	f100 0c14 	add.w	ip, r0, #20
 80178fc:	4594      	cmp	ip, r2
 80178fe:	6879      	ldr	r1, [r7, #4]
 8017900:	d92f      	bls.n	8017962 <_dtoa_r+0x2b2>
 8017902:	4630      	mov	r0, r6
 8017904:	930d      	str	r3, [sp, #52]	; 0x34
 8017906:	f000 ffe1 	bl	80188cc <_Balloc>
 801790a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801790c:	9001      	str	r0, [sp, #4]
 801790e:	4602      	mov	r2, r0
 8017910:	2800      	cmp	r0, #0
 8017912:	d149      	bne.n	80179a8 <_dtoa_r+0x2f8>
 8017914:	4b23      	ldr	r3, [pc, #140]	; (80179a4 <_dtoa_r+0x2f4>)
 8017916:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801791a:	e6e1      	b.n	80176e0 <_dtoa_r+0x30>
 801791c:	2201      	movs	r2, #1
 801791e:	e7dd      	b.n	80178dc <_dtoa_r+0x22c>
 8017920:	2200      	movs	r2, #0
 8017922:	9207      	str	r2, [sp, #28]
 8017924:	9a08      	ldr	r2, [sp, #32]
 8017926:	eb0b 0a02 	add.w	sl, fp, r2
 801792a:	f10a 0901 	add.w	r9, sl, #1
 801792e:	464a      	mov	r2, r9
 8017930:	2a01      	cmp	r2, #1
 8017932:	bfb8      	it	lt
 8017934:	2201      	movlt	r2, #1
 8017936:	e7db      	b.n	80178f0 <_dtoa_r+0x240>
 8017938:	2201      	movs	r2, #1
 801793a:	e7f2      	b.n	8017922 <_dtoa_r+0x272>
 801793c:	2401      	movs	r4, #1
 801793e:	2200      	movs	r2, #0
 8017940:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8017944:	f04f 3aff 	mov.w	sl, #4294967295
 8017948:	2100      	movs	r1, #0
 801794a:	46d1      	mov	r9, sl
 801794c:	2212      	movs	r2, #18
 801794e:	9108      	str	r1, [sp, #32]
 8017950:	e7ce      	b.n	80178f0 <_dtoa_r+0x240>
 8017952:	2201      	movs	r2, #1
 8017954:	9207      	str	r2, [sp, #28]
 8017956:	e7f5      	b.n	8017944 <_dtoa_r+0x294>
 8017958:	f8dd a020 	ldr.w	sl, [sp, #32]
 801795c:	46d1      	mov	r9, sl
 801795e:	4652      	mov	r2, sl
 8017960:	e7c6      	b.n	80178f0 <_dtoa_r+0x240>
 8017962:	3101      	adds	r1, #1
 8017964:	6079      	str	r1, [r7, #4]
 8017966:	0040      	lsls	r0, r0, #1
 8017968:	e7c6      	b.n	80178f8 <_dtoa_r+0x248>
 801796a:	bf00      	nop
 801796c:	f3af 8000 	nop.w
 8017970:	636f4361 	.word	0x636f4361
 8017974:	3fd287a7 	.word	0x3fd287a7
 8017978:	8b60c8b3 	.word	0x8b60c8b3
 801797c:	3fc68a28 	.word	0x3fc68a28
 8017980:	509f79fb 	.word	0x509f79fb
 8017984:	3fd34413 	.word	0x3fd34413
 8017988:	0801a51e 	.word	0x0801a51e
 801798c:	0801a535 	.word	0x0801a535
 8017990:	7ff00000 	.word	0x7ff00000
 8017994:	0801a51a 	.word	0x0801a51a
 8017998:	0801a511 	.word	0x0801a511
 801799c:	0801a395 	.word	0x0801a395
 80179a0:	0801a6a0 	.word	0x0801a6a0
 80179a4:	0801a590 	.word	0x0801a590
 80179a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80179aa:	9901      	ldr	r1, [sp, #4]
 80179ac:	6011      	str	r1, [r2, #0]
 80179ae:	f1b9 0f0e 	cmp.w	r9, #14
 80179b2:	d86c      	bhi.n	8017a8e <_dtoa_r+0x3de>
 80179b4:	2c00      	cmp	r4, #0
 80179b6:	d06a      	beq.n	8017a8e <_dtoa_r+0x3de>
 80179b8:	f1bb 0f00 	cmp.w	fp, #0
 80179bc:	f340 80a0 	ble.w	8017b00 <_dtoa_r+0x450>
 80179c0:	49c1      	ldr	r1, [pc, #772]	; (8017cc8 <_dtoa_r+0x618>)
 80179c2:	f00b 020f 	and.w	r2, fp, #15
 80179c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80179ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80179ce:	ed92 7b00 	vldr	d7, [r2]
 80179d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80179d6:	f000 8087 	beq.w	8017ae8 <_dtoa_r+0x438>
 80179da:	4abc      	ldr	r2, [pc, #752]	; (8017ccc <_dtoa_r+0x61c>)
 80179dc:	ed92 6b08 	vldr	d6, [r2, #32]
 80179e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80179e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80179e8:	f001 010f 	and.w	r1, r1, #15
 80179ec:	2203      	movs	r2, #3
 80179ee:	48b7      	ldr	r0, [pc, #732]	; (8017ccc <_dtoa_r+0x61c>)
 80179f0:	2900      	cmp	r1, #0
 80179f2:	d17b      	bne.n	8017aec <_dtoa_r+0x43c>
 80179f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80179f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80179fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017a02:	2900      	cmp	r1, #0
 8017a04:	f000 80a2 	beq.w	8017b4c <_dtoa_r+0x49c>
 8017a08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a10:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a18:	f140 8098 	bpl.w	8017b4c <_dtoa_r+0x49c>
 8017a1c:	f1b9 0f00 	cmp.w	r9, #0
 8017a20:	f000 8094 	beq.w	8017b4c <_dtoa_r+0x49c>
 8017a24:	f1ba 0f00 	cmp.w	sl, #0
 8017a28:	dd2f      	ble.n	8017a8a <_dtoa_r+0x3da>
 8017a2a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017a2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a32:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017a36:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017a3a:	3201      	adds	r2, #1
 8017a3c:	4650      	mov	r0, sl
 8017a3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017a42:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8017a46:	ee07 2a90 	vmov	s15, r2
 8017a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a4e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017a52:	ee15 4a90 	vmov	r4, s11
 8017a56:	ec52 1b15 	vmov	r1, r2, d5
 8017a5a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017a5e:	2800      	cmp	r0, #0
 8017a60:	d177      	bne.n	8017b52 <_dtoa_r+0x4a2>
 8017a62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017a66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017a6a:	ec42 1b17 	vmov	d7, r1, r2
 8017a6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a76:	f300 8263 	bgt.w	8017f40 <_dtoa_r+0x890>
 8017a7a:	eeb1 7b47 	vneg.f64	d7, d7
 8017a7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a86:	f100 8258 	bmi.w	8017f3a <_dtoa_r+0x88a>
 8017a8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a90:	2a00      	cmp	r2, #0
 8017a92:	f2c0 811d 	blt.w	8017cd0 <_dtoa_r+0x620>
 8017a96:	f1bb 0f0e 	cmp.w	fp, #14
 8017a9a:	f300 8119 	bgt.w	8017cd0 <_dtoa_r+0x620>
 8017a9e:	4b8a      	ldr	r3, [pc, #552]	; (8017cc8 <_dtoa_r+0x618>)
 8017aa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017aa4:	ed93 6b00 	vldr	d6, [r3]
 8017aa8:	9b08      	ldr	r3, [sp, #32]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	f280 80b7 	bge.w	8017c1e <_dtoa_r+0x56e>
 8017ab0:	f1b9 0f00 	cmp.w	r9, #0
 8017ab4:	f300 80b3 	bgt.w	8017c1e <_dtoa_r+0x56e>
 8017ab8:	f040 823f 	bne.w	8017f3a <_dtoa_r+0x88a>
 8017abc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017ac0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017ac4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017ac8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ad0:	464c      	mov	r4, r9
 8017ad2:	464f      	mov	r7, r9
 8017ad4:	f280 8215 	bge.w	8017f02 <_dtoa_r+0x852>
 8017ad8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017adc:	2331      	movs	r3, #49	; 0x31
 8017ade:	f808 3b01 	strb.w	r3, [r8], #1
 8017ae2:	f10b 0b01 	add.w	fp, fp, #1
 8017ae6:	e211      	b.n	8017f0c <_dtoa_r+0x85c>
 8017ae8:	2202      	movs	r2, #2
 8017aea:	e780      	b.n	80179ee <_dtoa_r+0x33e>
 8017aec:	07cc      	lsls	r4, r1, #31
 8017aee:	d504      	bpl.n	8017afa <_dtoa_r+0x44a>
 8017af0:	ed90 6b00 	vldr	d6, [r0]
 8017af4:	3201      	adds	r2, #1
 8017af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017afa:	1049      	asrs	r1, r1, #1
 8017afc:	3008      	adds	r0, #8
 8017afe:	e777      	b.n	80179f0 <_dtoa_r+0x340>
 8017b00:	d022      	beq.n	8017b48 <_dtoa_r+0x498>
 8017b02:	f1cb 0100 	rsb	r1, fp, #0
 8017b06:	4a70      	ldr	r2, [pc, #448]	; (8017cc8 <_dtoa_r+0x618>)
 8017b08:	f001 000f 	and.w	r0, r1, #15
 8017b0c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017b10:	ed92 7b00 	vldr	d7, [r2]
 8017b14:	ee28 7b07 	vmul.f64	d7, d8, d7
 8017b18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017b1c:	486b      	ldr	r0, [pc, #428]	; (8017ccc <_dtoa_r+0x61c>)
 8017b1e:	1109      	asrs	r1, r1, #4
 8017b20:	2400      	movs	r4, #0
 8017b22:	2202      	movs	r2, #2
 8017b24:	b929      	cbnz	r1, 8017b32 <_dtoa_r+0x482>
 8017b26:	2c00      	cmp	r4, #0
 8017b28:	f43f af6a 	beq.w	8017a00 <_dtoa_r+0x350>
 8017b2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017b30:	e766      	b.n	8017a00 <_dtoa_r+0x350>
 8017b32:	07cf      	lsls	r7, r1, #31
 8017b34:	d505      	bpl.n	8017b42 <_dtoa_r+0x492>
 8017b36:	ed90 6b00 	vldr	d6, [r0]
 8017b3a:	3201      	adds	r2, #1
 8017b3c:	2401      	movs	r4, #1
 8017b3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017b42:	1049      	asrs	r1, r1, #1
 8017b44:	3008      	adds	r0, #8
 8017b46:	e7ed      	b.n	8017b24 <_dtoa_r+0x474>
 8017b48:	2202      	movs	r2, #2
 8017b4a:	e759      	b.n	8017a00 <_dtoa_r+0x350>
 8017b4c:	465f      	mov	r7, fp
 8017b4e:	4648      	mov	r0, r9
 8017b50:	e775      	b.n	8017a3e <_dtoa_r+0x38e>
 8017b52:	ec42 1b17 	vmov	d7, r1, r2
 8017b56:	4a5c      	ldr	r2, [pc, #368]	; (8017cc8 <_dtoa_r+0x618>)
 8017b58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017b5c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017b60:	9a01      	ldr	r2, [sp, #4]
 8017b62:	1814      	adds	r4, r2, r0
 8017b64:	9a07      	ldr	r2, [sp, #28]
 8017b66:	b352      	cbz	r2, 8017bbe <_dtoa_r+0x50e>
 8017b68:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017b6c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017b70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017b74:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017b78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017b7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017b80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017b84:	ee14 2a90 	vmov	r2, s9
 8017b88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017b8c:	3230      	adds	r2, #48	; 0x30
 8017b8e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017b92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b9a:	f808 2b01 	strb.w	r2, [r8], #1
 8017b9e:	d439      	bmi.n	8017c14 <_dtoa_r+0x564>
 8017ba0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017ba4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bac:	d472      	bmi.n	8017c94 <_dtoa_r+0x5e4>
 8017bae:	45a0      	cmp	r8, r4
 8017bb0:	f43f af6b 	beq.w	8017a8a <_dtoa_r+0x3da>
 8017bb4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017bb8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017bbc:	e7e0      	b.n	8017b80 <_dtoa_r+0x4d0>
 8017bbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017bc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017bc6:	4621      	mov	r1, r4
 8017bc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017bcc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017bd0:	ee14 2a90 	vmov	r2, s9
 8017bd4:	3230      	adds	r2, #48	; 0x30
 8017bd6:	f808 2b01 	strb.w	r2, [r8], #1
 8017bda:	45a0      	cmp	r8, r4
 8017bdc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017be0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017be4:	d118      	bne.n	8017c18 <_dtoa_r+0x568>
 8017be6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017bea:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017bee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bf6:	dc4d      	bgt.n	8017c94 <_dtoa_r+0x5e4>
 8017bf8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017bfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c04:	f57f af41 	bpl.w	8017a8a <_dtoa_r+0x3da>
 8017c08:	4688      	mov	r8, r1
 8017c0a:	3901      	subs	r1, #1
 8017c0c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017c10:	2b30      	cmp	r3, #48	; 0x30
 8017c12:	d0f9      	beq.n	8017c08 <_dtoa_r+0x558>
 8017c14:	46bb      	mov	fp, r7
 8017c16:	e02a      	b.n	8017c6e <_dtoa_r+0x5be>
 8017c18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017c1c:	e7d6      	b.n	8017bcc <_dtoa_r+0x51c>
 8017c1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017c22:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017c26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017c2a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017c2e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017c32:	ee15 3a10 	vmov	r3, s10
 8017c36:	3330      	adds	r3, #48	; 0x30
 8017c38:	f808 3b01 	strb.w	r3, [r8], #1
 8017c3c:	9b01      	ldr	r3, [sp, #4]
 8017c3e:	eba8 0303 	sub.w	r3, r8, r3
 8017c42:	4599      	cmp	r9, r3
 8017c44:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017c48:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017c4c:	d133      	bne.n	8017cb6 <_dtoa_r+0x606>
 8017c4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017c52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c5a:	dc1a      	bgt.n	8017c92 <_dtoa_r+0x5e2>
 8017c5c:	eeb4 7b46 	vcmp.f64	d7, d6
 8017c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c64:	d103      	bne.n	8017c6e <_dtoa_r+0x5be>
 8017c66:	ee15 3a10 	vmov	r3, s10
 8017c6a:	07d9      	lsls	r1, r3, #31
 8017c6c:	d411      	bmi.n	8017c92 <_dtoa_r+0x5e2>
 8017c6e:	4629      	mov	r1, r5
 8017c70:	4630      	mov	r0, r6
 8017c72:	f000 fe6b 	bl	801894c <_Bfree>
 8017c76:	2300      	movs	r3, #0
 8017c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c7a:	f888 3000 	strb.w	r3, [r8]
 8017c7e:	f10b 0301 	add.w	r3, fp, #1
 8017c82:	6013      	str	r3, [r2, #0]
 8017c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f43f ad61 	beq.w	801774e <_dtoa_r+0x9e>
 8017c8c:	f8c3 8000 	str.w	r8, [r3]
 8017c90:	e55d      	b.n	801774e <_dtoa_r+0x9e>
 8017c92:	465f      	mov	r7, fp
 8017c94:	4643      	mov	r3, r8
 8017c96:	4698      	mov	r8, r3
 8017c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017c9c:	2a39      	cmp	r2, #57	; 0x39
 8017c9e:	d106      	bne.n	8017cae <_dtoa_r+0x5fe>
 8017ca0:	9a01      	ldr	r2, [sp, #4]
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d1f7      	bne.n	8017c96 <_dtoa_r+0x5e6>
 8017ca6:	9901      	ldr	r1, [sp, #4]
 8017ca8:	2230      	movs	r2, #48	; 0x30
 8017caa:	3701      	adds	r7, #1
 8017cac:	700a      	strb	r2, [r1, #0]
 8017cae:	781a      	ldrb	r2, [r3, #0]
 8017cb0:	3201      	adds	r2, #1
 8017cb2:	701a      	strb	r2, [r3, #0]
 8017cb4:	e7ae      	b.n	8017c14 <_dtoa_r+0x564>
 8017cb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017cba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc2:	d1b2      	bne.n	8017c2a <_dtoa_r+0x57a>
 8017cc4:	e7d3      	b.n	8017c6e <_dtoa_r+0x5be>
 8017cc6:	bf00      	nop
 8017cc8:	0801a6a0 	.word	0x0801a6a0
 8017ccc:	0801a678 	.word	0x0801a678
 8017cd0:	9907      	ldr	r1, [sp, #28]
 8017cd2:	2900      	cmp	r1, #0
 8017cd4:	f000 80d0 	beq.w	8017e78 <_dtoa_r+0x7c8>
 8017cd8:	9906      	ldr	r1, [sp, #24]
 8017cda:	2901      	cmp	r1, #1
 8017cdc:	f300 80b4 	bgt.w	8017e48 <_dtoa_r+0x798>
 8017ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017ce2:	2900      	cmp	r1, #0
 8017ce4:	f000 80ac 	beq.w	8017e40 <_dtoa_r+0x790>
 8017ce8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017cec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017cf0:	461c      	mov	r4, r3
 8017cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8017cf4:	9b04      	ldr	r3, [sp, #16]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	9304      	str	r3, [sp, #16]
 8017cfa:	9b05      	ldr	r3, [sp, #20]
 8017cfc:	2101      	movs	r1, #1
 8017cfe:	4413      	add	r3, r2
 8017d00:	4630      	mov	r0, r6
 8017d02:	9305      	str	r3, [sp, #20]
 8017d04:	f000 ff24 	bl	8018b50 <__i2b>
 8017d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d0a:	4607      	mov	r7, r0
 8017d0c:	f1b8 0f00 	cmp.w	r8, #0
 8017d10:	dd0d      	ble.n	8017d2e <_dtoa_r+0x67e>
 8017d12:	9a05      	ldr	r2, [sp, #20]
 8017d14:	2a00      	cmp	r2, #0
 8017d16:	dd0a      	ble.n	8017d2e <_dtoa_r+0x67e>
 8017d18:	4542      	cmp	r2, r8
 8017d1a:	9904      	ldr	r1, [sp, #16]
 8017d1c:	bfa8      	it	ge
 8017d1e:	4642      	movge	r2, r8
 8017d20:	1a89      	subs	r1, r1, r2
 8017d22:	9104      	str	r1, [sp, #16]
 8017d24:	9905      	ldr	r1, [sp, #20]
 8017d26:	eba8 0802 	sub.w	r8, r8, r2
 8017d2a:	1a8a      	subs	r2, r1, r2
 8017d2c:	9205      	str	r2, [sp, #20]
 8017d2e:	b303      	cbz	r3, 8017d72 <_dtoa_r+0x6c2>
 8017d30:	9a07      	ldr	r2, [sp, #28]
 8017d32:	2a00      	cmp	r2, #0
 8017d34:	f000 80a5 	beq.w	8017e82 <_dtoa_r+0x7d2>
 8017d38:	2c00      	cmp	r4, #0
 8017d3a:	dd13      	ble.n	8017d64 <_dtoa_r+0x6b4>
 8017d3c:	4639      	mov	r1, r7
 8017d3e:	4622      	mov	r2, r4
 8017d40:	4630      	mov	r0, r6
 8017d42:	930d      	str	r3, [sp, #52]	; 0x34
 8017d44:	f000 ffc4 	bl	8018cd0 <__pow5mult>
 8017d48:	462a      	mov	r2, r5
 8017d4a:	4601      	mov	r1, r0
 8017d4c:	4607      	mov	r7, r0
 8017d4e:	4630      	mov	r0, r6
 8017d50:	f000 ff14 	bl	8018b7c <__multiply>
 8017d54:	4629      	mov	r1, r5
 8017d56:	900a      	str	r0, [sp, #40]	; 0x28
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f000 fdf7 	bl	801894c <_Bfree>
 8017d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d62:	4615      	mov	r5, r2
 8017d64:	1b1a      	subs	r2, r3, r4
 8017d66:	d004      	beq.n	8017d72 <_dtoa_r+0x6c2>
 8017d68:	4629      	mov	r1, r5
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f000 ffb0 	bl	8018cd0 <__pow5mult>
 8017d70:	4605      	mov	r5, r0
 8017d72:	2101      	movs	r1, #1
 8017d74:	4630      	mov	r0, r6
 8017d76:	f000 feeb 	bl	8018b50 <__i2b>
 8017d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	4604      	mov	r4, r0
 8017d80:	f340 8081 	ble.w	8017e86 <_dtoa_r+0x7d6>
 8017d84:	461a      	mov	r2, r3
 8017d86:	4601      	mov	r1, r0
 8017d88:	4630      	mov	r0, r6
 8017d8a:	f000 ffa1 	bl	8018cd0 <__pow5mult>
 8017d8e:	9b06      	ldr	r3, [sp, #24]
 8017d90:	2b01      	cmp	r3, #1
 8017d92:	4604      	mov	r4, r0
 8017d94:	dd7a      	ble.n	8017e8c <_dtoa_r+0x7dc>
 8017d96:	2300      	movs	r3, #0
 8017d98:	930a      	str	r3, [sp, #40]	; 0x28
 8017d9a:	6922      	ldr	r2, [r4, #16]
 8017d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017da0:	6910      	ldr	r0, [r2, #16]
 8017da2:	f000 fe85 	bl	8018ab0 <__hi0bits>
 8017da6:	f1c0 0020 	rsb	r0, r0, #32
 8017daa:	9b05      	ldr	r3, [sp, #20]
 8017dac:	4418      	add	r0, r3
 8017dae:	f010 001f 	ands.w	r0, r0, #31
 8017db2:	f000 808c 	beq.w	8017ece <_dtoa_r+0x81e>
 8017db6:	f1c0 0220 	rsb	r2, r0, #32
 8017dba:	2a04      	cmp	r2, #4
 8017dbc:	f340 8085 	ble.w	8017eca <_dtoa_r+0x81a>
 8017dc0:	f1c0 001c 	rsb	r0, r0, #28
 8017dc4:	9b04      	ldr	r3, [sp, #16]
 8017dc6:	4403      	add	r3, r0
 8017dc8:	9304      	str	r3, [sp, #16]
 8017dca:	9b05      	ldr	r3, [sp, #20]
 8017dcc:	4403      	add	r3, r0
 8017dce:	4480      	add	r8, r0
 8017dd0:	9305      	str	r3, [sp, #20]
 8017dd2:	9b04      	ldr	r3, [sp, #16]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	dd05      	ble.n	8017de4 <_dtoa_r+0x734>
 8017dd8:	4629      	mov	r1, r5
 8017dda:	461a      	mov	r2, r3
 8017ddc:	4630      	mov	r0, r6
 8017dde:	f000 ffd1 	bl	8018d84 <__lshift>
 8017de2:	4605      	mov	r5, r0
 8017de4:	9b05      	ldr	r3, [sp, #20]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	dd05      	ble.n	8017df6 <_dtoa_r+0x746>
 8017dea:	4621      	mov	r1, r4
 8017dec:	461a      	mov	r2, r3
 8017dee:	4630      	mov	r0, r6
 8017df0:	f000 ffc8 	bl	8018d84 <__lshift>
 8017df4:	4604      	mov	r4, r0
 8017df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d06a      	beq.n	8017ed2 <_dtoa_r+0x822>
 8017dfc:	4621      	mov	r1, r4
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f001 f830 	bl	8018e64 <__mcmp>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	da64      	bge.n	8017ed2 <_dtoa_r+0x822>
 8017e08:	2300      	movs	r3, #0
 8017e0a:	4629      	mov	r1, r5
 8017e0c:	220a      	movs	r2, #10
 8017e0e:	4630      	mov	r0, r6
 8017e10:	f000 fdbe 	bl	8018990 <__multadd>
 8017e14:	9b07      	ldr	r3, [sp, #28]
 8017e16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e1a:	4605      	mov	r5, r0
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	f000 8191 	beq.w	8018144 <_dtoa_r+0xa94>
 8017e22:	4639      	mov	r1, r7
 8017e24:	2300      	movs	r3, #0
 8017e26:	220a      	movs	r2, #10
 8017e28:	4630      	mov	r0, r6
 8017e2a:	f000 fdb1 	bl	8018990 <__multadd>
 8017e2e:	f1ba 0f00 	cmp.w	sl, #0
 8017e32:	4607      	mov	r7, r0
 8017e34:	f300 808d 	bgt.w	8017f52 <_dtoa_r+0x8a2>
 8017e38:	9b06      	ldr	r3, [sp, #24]
 8017e3a:	2b02      	cmp	r3, #2
 8017e3c:	dc50      	bgt.n	8017ee0 <_dtoa_r+0x830>
 8017e3e:	e088      	b.n	8017f52 <_dtoa_r+0x8a2>
 8017e40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017e46:	e751      	b.n	8017cec <_dtoa_r+0x63c>
 8017e48:	f109 34ff 	add.w	r4, r9, #4294967295
 8017e4c:	42a3      	cmp	r3, r4
 8017e4e:	bfbf      	itttt	lt
 8017e50:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8017e52:	1ae3      	sublt	r3, r4, r3
 8017e54:	18d2      	addlt	r2, r2, r3
 8017e56:	9209      	strlt	r2, [sp, #36]	; 0x24
 8017e58:	bfb6      	itet	lt
 8017e5a:	4623      	movlt	r3, r4
 8017e5c:	1b1c      	subge	r4, r3, r4
 8017e5e:	2400      	movlt	r4, #0
 8017e60:	f1b9 0f00 	cmp.w	r9, #0
 8017e64:	bfb5      	itete	lt
 8017e66:	9a04      	ldrlt	r2, [sp, #16]
 8017e68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8017e6c:	eba2 0809 	sublt.w	r8, r2, r9
 8017e70:	464a      	movge	r2, r9
 8017e72:	bfb8      	it	lt
 8017e74:	2200      	movlt	r2, #0
 8017e76:	e73c      	b.n	8017cf2 <_dtoa_r+0x642>
 8017e78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017e7c:	9f07      	ldr	r7, [sp, #28]
 8017e7e:	461c      	mov	r4, r3
 8017e80:	e744      	b.n	8017d0c <_dtoa_r+0x65c>
 8017e82:	461a      	mov	r2, r3
 8017e84:	e770      	b.n	8017d68 <_dtoa_r+0x6b8>
 8017e86:	9b06      	ldr	r3, [sp, #24]
 8017e88:	2b01      	cmp	r3, #1
 8017e8a:	dc18      	bgt.n	8017ebe <_dtoa_r+0x80e>
 8017e8c:	9b02      	ldr	r3, [sp, #8]
 8017e8e:	b9b3      	cbnz	r3, 8017ebe <_dtoa_r+0x80e>
 8017e90:	9b03      	ldr	r3, [sp, #12]
 8017e92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017e96:	b9a2      	cbnz	r2, 8017ec2 <_dtoa_r+0x812>
 8017e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017e9c:	0d12      	lsrs	r2, r2, #20
 8017e9e:	0512      	lsls	r2, r2, #20
 8017ea0:	b18a      	cbz	r2, 8017ec6 <_dtoa_r+0x816>
 8017ea2:	9b04      	ldr	r3, [sp, #16]
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	9304      	str	r3, [sp, #16]
 8017ea8:	9b05      	ldr	r3, [sp, #20]
 8017eaa:	3301      	adds	r3, #1
 8017eac:	9305      	str	r3, [sp, #20]
 8017eae:	2301      	movs	r3, #1
 8017eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8017eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	f47f af70 	bne.w	8017d9a <_dtoa_r+0x6ea>
 8017eba:	2001      	movs	r0, #1
 8017ebc:	e775      	b.n	8017daa <_dtoa_r+0x6fa>
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	e7f6      	b.n	8017eb0 <_dtoa_r+0x800>
 8017ec2:	9b02      	ldr	r3, [sp, #8]
 8017ec4:	e7f4      	b.n	8017eb0 <_dtoa_r+0x800>
 8017ec6:	920a      	str	r2, [sp, #40]	; 0x28
 8017ec8:	e7f3      	b.n	8017eb2 <_dtoa_r+0x802>
 8017eca:	d082      	beq.n	8017dd2 <_dtoa_r+0x722>
 8017ecc:	4610      	mov	r0, r2
 8017ece:	301c      	adds	r0, #28
 8017ed0:	e778      	b.n	8017dc4 <_dtoa_r+0x714>
 8017ed2:	f1b9 0f00 	cmp.w	r9, #0
 8017ed6:	dc37      	bgt.n	8017f48 <_dtoa_r+0x898>
 8017ed8:	9b06      	ldr	r3, [sp, #24]
 8017eda:	2b02      	cmp	r3, #2
 8017edc:	dd34      	ble.n	8017f48 <_dtoa_r+0x898>
 8017ede:	46ca      	mov	sl, r9
 8017ee0:	f1ba 0f00 	cmp.w	sl, #0
 8017ee4:	d10d      	bne.n	8017f02 <_dtoa_r+0x852>
 8017ee6:	4621      	mov	r1, r4
 8017ee8:	4653      	mov	r3, sl
 8017eea:	2205      	movs	r2, #5
 8017eec:	4630      	mov	r0, r6
 8017eee:	f000 fd4f 	bl	8018990 <__multadd>
 8017ef2:	4601      	mov	r1, r0
 8017ef4:	4604      	mov	r4, r0
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f000 ffb4 	bl	8018e64 <__mcmp>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	f73f adeb 	bgt.w	8017ad8 <_dtoa_r+0x428>
 8017f02:	9b08      	ldr	r3, [sp, #32]
 8017f04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017f08:	ea6f 0b03 	mvn.w	fp, r3
 8017f0c:	f04f 0900 	mov.w	r9, #0
 8017f10:	4621      	mov	r1, r4
 8017f12:	4630      	mov	r0, r6
 8017f14:	f000 fd1a 	bl	801894c <_Bfree>
 8017f18:	2f00      	cmp	r7, #0
 8017f1a:	f43f aea8 	beq.w	8017c6e <_dtoa_r+0x5be>
 8017f1e:	f1b9 0f00 	cmp.w	r9, #0
 8017f22:	d005      	beq.n	8017f30 <_dtoa_r+0x880>
 8017f24:	45b9      	cmp	r9, r7
 8017f26:	d003      	beq.n	8017f30 <_dtoa_r+0x880>
 8017f28:	4649      	mov	r1, r9
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	f000 fd0e 	bl	801894c <_Bfree>
 8017f30:	4639      	mov	r1, r7
 8017f32:	4630      	mov	r0, r6
 8017f34:	f000 fd0a 	bl	801894c <_Bfree>
 8017f38:	e699      	b.n	8017c6e <_dtoa_r+0x5be>
 8017f3a:	2400      	movs	r4, #0
 8017f3c:	4627      	mov	r7, r4
 8017f3e:	e7e0      	b.n	8017f02 <_dtoa_r+0x852>
 8017f40:	46bb      	mov	fp, r7
 8017f42:	4604      	mov	r4, r0
 8017f44:	4607      	mov	r7, r0
 8017f46:	e5c7      	b.n	8017ad8 <_dtoa_r+0x428>
 8017f48:	9b07      	ldr	r3, [sp, #28]
 8017f4a:	46ca      	mov	sl, r9
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	f000 8100 	beq.w	8018152 <_dtoa_r+0xaa2>
 8017f52:	f1b8 0f00 	cmp.w	r8, #0
 8017f56:	dd05      	ble.n	8017f64 <_dtoa_r+0x8b4>
 8017f58:	4639      	mov	r1, r7
 8017f5a:	4642      	mov	r2, r8
 8017f5c:	4630      	mov	r0, r6
 8017f5e:	f000 ff11 	bl	8018d84 <__lshift>
 8017f62:	4607      	mov	r7, r0
 8017f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d05d      	beq.n	8018026 <_dtoa_r+0x976>
 8017f6a:	6879      	ldr	r1, [r7, #4]
 8017f6c:	4630      	mov	r0, r6
 8017f6e:	f000 fcad 	bl	80188cc <_Balloc>
 8017f72:	4680      	mov	r8, r0
 8017f74:	b928      	cbnz	r0, 8017f82 <_dtoa_r+0x8d2>
 8017f76:	4b82      	ldr	r3, [pc, #520]	; (8018180 <_dtoa_r+0xad0>)
 8017f78:	4602      	mov	r2, r0
 8017f7a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017f7e:	f7ff bbaf 	b.w	80176e0 <_dtoa_r+0x30>
 8017f82:	693a      	ldr	r2, [r7, #16]
 8017f84:	3202      	adds	r2, #2
 8017f86:	0092      	lsls	r2, r2, #2
 8017f88:	f107 010c 	add.w	r1, r7, #12
 8017f8c:	300c      	adds	r0, #12
 8017f8e:	f7fd fdbd 	bl	8015b0c <memcpy>
 8017f92:	2201      	movs	r2, #1
 8017f94:	4641      	mov	r1, r8
 8017f96:	4630      	mov	r0, r6
 8017f98:	f000 fef4 	bl	8018d84 <__lshift>
 8017f9c:	9b01      	ldr	r3, [sp, #4]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	9304      	str	r3, [sp, #16]
 8017fa2:	9b01      	ldr	r3, [sp, #4]
 8017fa4:	4453      	add	r3, sl
 8017fa6:	9308      	str	r3, [sp, #32]
 8017fa8:	9b02      	ldr	r3, [sp, #8]
 8017faa:	f003 0301 	and.w	r3, r3, #1
 8017fae:	46b9      	mov	r9, r7
 8017fb0:	9307      	str	r3, [sp, #28]
 8017fb2:	4607      	mov	r7, r0
 8017fb4:	9b04      	ldr	r3, [sp, #16]
 8017fb6:	4621      	mov	r1, r4
 8017fb8:	3b01      	subs	r3, #1
 8017fba:	4628      	mov	r0, r5
 8017fbc:	9302      	str	r3, [sp, #8]
 8017fbe:	f7ff fae9 	bl	8017594 <quorem>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	3330      	adds	r3, #48	; 0x30
 8017fc6:	9005      	str	r0, [sp, #20]
 8017fc8:	4649      	mov	r1, r9
 8017fca:	4628      	mov	r0, r5
 8017fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8017fce:	f000 ff49 	bl	8018e64 <__mcmp>
 8017fd2:	463a      	mov	r2, r7
 8017fd4:	4682      	mov	sl, r0
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	4630      	mov	r0, r6
 8017fda:	f000 ff5f 	bl	8018e9c <__mdiff>
 8017fde:	68c2      	ldr	r2, [r0, #12]
 8017fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fe2:	4680      	mov	r8, r0
 8017fe4:	bb0a      	cbnz	r2, 801802a <_dtoa_r+0x97a>
 8017fe6:	4601      	mov	r1, r0
 8017fe8:	4628      	mov	r0, r5
 8017fea:	f000 ff3b 	bl	8018e64 <__mcmp>
 8017fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	4641      	mov	r1, r8
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8017ffa:	f000 fca7 	bl	801894c <_Bfree>
 8017ffe:	9b06      	ldr	r3, [sp, #24]
 8018000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018002:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018006:	ea43 0102 	orr.w	r1, r3, r2
 801800a:	9b07      	ldr	r3, [sp, #28]
 801800c:	430b      	orrs	r3, r1
 801800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018010:	d10d      	bne.n	801802e <_dtoa_r+0x97e>
 8018012:	2b39      	cmp	r3, #57	; 0x39
 8018014:	d029      	beq.n	801806a <_dtoa_r+0x9ba>
 8018016:	f1ba 0f00 	cmp.w	sl, #0
 801801a:	dd01      	ble.n	8018020 <_dtoa_r+0x970>
 801801c:	9b05      	ldr	r3, [sp, #20]
 801801e:	3331      	adds	r3, #49	; 0x31
 8018020:	9a02      	ldr	r2, [sp, #8]
 8018022:	7013      	strb	r3, [r2, #0]
 8018024:	e774      	b.n	8017f10 <_dtoa_r+0x860>
 8018026:	4638      	mov	r0, r7
 8018028:	e7b8      	b.n	8017f9c <_dtoa_r+0x8ec>
 801802a:	2201      	movs	r2, #1
 801802c:	e7e1      	b.n	8017ff2 <_dtoa_r+0x942>
 801802e:	f1ba 0f00 	cmp.w	sl, #0
 8018032:	db06      	blt.n	8018042 <_dtoa_r+0x992>
 8018034:	9906      	ldr	r1, [sp, #24]
 8018036:	ea41 0a0a 	orr.w	sl, r1, sl
 801803a:	9907      	ldr	r1, [sp, #28]
 801803c:	ea5a 0101 	orrs.w	r1, sl, r1
 8018040:	d120      	bne.n	8018084 <_dtoa_r+0x9d4>
 8018042:	2a00      	cmp	r2, #0
 8018044:	ddec      	ble.n	8018020 <_dtoa_r+0x970>
 8018046:	4629      	mov	r1, r5
 8018048:	2201      	movs	r2, #1
 801804a:	4630      	mov	r0, r6
 801804c:	9304      	str	r3, [sp, #16]
 801804e:	f000 fe99 	bl	8018d84 <__lshift>
 8018052:	4621      	mov	r1, r4
 8018054:	4605      	mov	r5, r0
 8018056:	f000 ff05 	bl	8018e64 <__mcmp>
 801805a:	2800      	cmp	r0, #0
 801805c:	9b04      	ldr	r3, [sp, #16]
 801805e:	dc02      	bgt.n	8018066 <_dtoa_r+0x9b6>
 8018060:	d1de      	bne.n	8018020 <_dtoa_r+0x970>
 8018062:	07da      	lsls	r2, r3, #31
 8018064:	d5dc      	bpl.n	8018020 <_dtoa_r+0x970>
 8018066:	2b39      	cmp	r3, #57	; 0x39
 8018068:	d1d8      	bne.n	801801c <_dtoa_r+0x96c>
 801806a:	9a02      	ldr	r2, [sp, #8]
 801806c:	2339      	movs	r3, #57	; 0x39
 801806e:	7013      	strb	r3, [r2, #0]
 8018070:	4643      	mov	r3, r8
 8018072:	4698      	mov	r8, r3
 8018074:	3b01      	subs	r3, #1
 8018076:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801807a:	2a39      	cmp	r2, #57	; 0x39
 801807c:	d051      	beq.n	8018122 <_dtoa_r+0xa72>
 801807e:	3201      	adds	r2, #1
 8018080:	701a      	strb	r2, [r3, #0]
 8018082:	e745      	b.n	8017f10 <_dtoa_r+0x860>
 8018084:	2a00      	cmp	r2, #0
 8018086:	dd03      	ble.n	8018090 <_dtoa_r+0x9e0>
 8018088:	2b39      	cmp	r3, #57	; 0x39
 801808a:	d0ee      	beq.n	801806a <_dtoa_r+0x9ba>
 801808c:	3301      	adds	r3, #1
 801808e:	e7c7      	b.n	8018020 <_dtoa_r+0x970>
 8018090:	9a04      	ldr	r2, [sp, #16]
 8018092:	9908      	ldr	r1, [sp, #32]
 8018094:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018098:	428a      	cmp	r2, r1
 801809a:	d02b      	beq.n	80180f4 <_dtoa_r+0xa44>
 801809c:	4629      	mov	r1, r5
 801809e:	2300      	movs	r3, #0
 80180a0:	220a      	movs	r2, #10
 80180a2:	4630      	mov	r0, r6
 80180a4:	f000 fc74 	bl	8018990 <__multadd>
 80180a8:	45b9      	cmp	r9, r7
 80180aa:	4605      	mov	r5, r0
 80180ac:	f04f 0300 	mov.w	r3, #0
 80180b0:	f04f 020a 	mov.w	r2, #10
 80180b4:	4649      	mov	r1, r9
 80180b6:	4630      	mov	r0, r6
 80180b8:	d107      	bne.n	80180ca <_dtoa_r+0xa1a>
 80180ba:	f000 fc69 	bl	8018990 <__multadd>
 80180be:	4681      	mov	r9, r0
 80180c0:	4607      	mov	r7, r0
 80180c2:	9b04      	ldr	r3, [sp, #16]
 80180c4:	3301      	adds	r3, #1
 80180c6:	9304      	str	r3, [sp, #16]
 80180c8:	e774      	b.n	8017fb4 <_dtoa_r+0x904>
 80180ca:	f000 fc61 	bl	8018990 <__multadd>
 80180ce:	4639      	mov	r1, r7
 80180d0:	4681      	mov	r9, r0
 80180d2:	2300      	movs	r3, #0
 80180d4:	220a      	movs	r2, #10
 80180d6:	4630      	mov	r0, r6
 80180d8:	f000 fc5a 	bl	8018990 <__multadd>
 80180dc:	4607      	mov	r7, r0
 80180de:	e7f0      	b.n	80180c2 <_dtoa_r+0xa12>
 80180e0:	f1ba 0f00 	cmp.w	sl, #0
 80180e4:	9a01      	ldr	r2, [sp, #4]
 80180e6:	bfcc      	ite	gt
 80180e8:	46d0      	movgt	r8, sl
 80180ea:	f04f 0801 	movle.w	r8, #1
 80180ee:	4490      	add	r8, r2
 80180f0:	f04f 0900 	mov.w	r9, #0
 80180f4:	4629      	mov	r1, r5
 80180f6:	2201      	movs	r2, #1
 80180f8:	4630      	mov	r0, r6
 80180fa:	9302      	str	r3, [sp, #8]
 80180fc:	f000 fe42 	bl	8018d84 <__lshift>
 8018100:	4621      	mov	r1, r4
 8018102:	4605      	mov	r5, r0
 8018104:	f000 feae 	bl	8018e64 <__mcmp>
 8018108:	2800      	cmp	r0, #0
 801810a:	dcb1      	bgt.n	8018070 <_dtoa_r+0x9c0>
 801810c:	d102      	bne.n	8018114 <_dtoa_r+0xa64>
 801810e:	9b02      	ldr	r3, [sp, #8]
 8018110:	07db      	lsls	r3, r3, #31
 8018112:	d4ad      	bmi.n	8018070 <_dtoa_r+0x9c0>
 8018114:	4643      	mov	r3, r8
 8018116:	4698      	mov	r8, r3
 8018118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801811c:	2a30      	cmp	r2, #48	; 0x30
 801811e:	d0fa      	beq.n	8018116 <_dtoa_r+0xa66>
 8018120:	e6f6      	b.n	8017f10 <_dtoa_r+0x860>
 8018122:	9a01      	ldr	r2, [sp, #4]
 8018124:	429a      	cmp	r2, r3
 8018126:	d1a4      	bne.n	8018072 <_dtoa_r+0x9c2>
 8018128:	f10b 0b01 	add.w	fp, fp, #1
 801812c:	2331      	movs	r3, #49	; 0x31
 801812e:	e778      	b.n	8018022 <_dtoa_r+0x972>
 8018130:	4b14      	ldr	r3, [pc, #80]	; (8018184 <_dtoa_r+0xad4>)
 8018132:	f7ff bb27 	b.w	8017784 <_dtoa_r+0xd4>
 8018136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018138:	2b00      	cmp	r3, #0
 801813a:	f47f ab03 	bne.w	8017744 <_dtoa_r+0x94>
 801813e:	4b12      	ldr	r3, [pc, #72]	; (8018188 <_dtoa_r+0xad8>)
 8018140:	f7ff bb20 	b.w	8017784 <_dtoa_r+0xd4>
 8018144:	f1ba 0f00 	cmp.w	sl, #0
 8018148:	dc03      	bgt.n	8018152 <_dtoa_r+0xaa2>
 801814a:	9b06      	ldr	r3, [sp, #24]
 801814c:	2b02      	cmp	r3, #2
 801814e:	f73f aec7 	bgt.w	8017ee0 <_dtoa_r+0x830>
 8018152:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018156:	4621      	mov	r1, r4
 8018158:	4628      	mov	r0, r5
 801815a:	f7ff fa1b 	bl	8017594 <quorem>
 801815e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018162:	f808 3b01 	strb.w	r3, [r8], #1
 8018166:	9a01      	ldr	r2, [sp, #4]
 8018168:	eba8 0202 	sub.w	r2, r8, r2
 801816c:	4592      	cmp	sl, r2
 801816e:	ddb7      	ble.n	80180e0 <_dtoa_r+0xa30>
 8018170:	4629      	mov	r1, r5
 8018172:	2300      	movs	r3, #0
 8018174:	220a      	movs	r2, #10
 8018176:	4630      	mov	r0, r6
 8018178:	f000 fc0a 	bl	8018990 <__multadd>
 801817c:	4605      	mov	r5, r0
 801817e:	e7ea      	b.n	8018156 <_dtoa_r+0xaa6>
 8018180:	0801a590 	.word	0x0801a590
 8018184:	0801a394 	.word	0x0801a394
 8018188:	0801a511 	.word	0x0801a511

0801818c <rshift>:
 801818c:	6903      	ldr	r3, [r0, #16]
 801818e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018196:	ea4f 1261 	mov.w	r2, r1, asr #5
 801819a:	f100 0414 	add.w	r4, r0, #20
 801819e:	dd45      	ble.n	801822c <rshift+0xa0>
 80181a0:	f011 011f 	ands.w	r1, r1, #31
 80181a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80181a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80181ac:	d10c      	bne.n	80181c8 <rshift+0x3c>
 80181ae:	f100 0710 	add.w	r7, r0, #16
 80181b2:	4629      	mov	r1, r5
 80181b4:	42b1      	cmp	r1, r6
 80181b6:	d334      	bcc.n	8018222 <rshift+0x96>
 80181b8:	1a9b      	subs	r3, r3, r2
 80181ba:	009b      	lsls	r3, r3, #2
 80181bc:	1eea      	subs	r2, r5, #3
 80181be:	4296      	cmp	r6, r2
 80181c0:	bf38      	it	cc
 80181c2:	2300      	movcc	r3, #0
 80181c4:	4423      	add	r3, r4
 80181c6:	e015      	b.n	80181f4 <rshift+0x68>
 80181c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80181cc:	f1c1 0820 	rsb	r8, r1, #32
 80181d0:	40cf      	lsrs	r7, r1
 80181d2:	f105 0e04 	add.w	lr, r5, #4
 80181d6:	46a1      	mov	r9, r4
 80181d8:	4576      	cmp	r6, lr
 80181da:	46f4      	mov	ip, lr
 80181dc:	d815      	bhi.n	801820a <rshift+0x7e>
 80181de:	1a9a      	subs	r2, r3, r2
 80181e0:	0092      	lsls	r2, r2, #2
 80181e2:	3a04      	subs	r2, #4
 80181e4:	3501      	adds	r5, #1
 80181e6:	42ae      	cmp	r6, r5
 80181e8:	bf38      	it	cc
 80181ea:	2200      	movcc	r2, #0
 80181ec:	18a3      	adds	r3, r4, r2
 80181ee:	50a7      	str	r7, [r4, r2]
 80181f0:	b107      	cbz	r7, 80181f4 <rshift+0x68>
 80181f2:	3304      	adds	r3, #4
 80181f4:	1b1a      	subs	r2, r3, r4
 80181f6:	42a3      	cmp	r3, r4
 80181f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80181fc:	bf08      	it	eq
 80181fe:	2300      	moveq	r3, #0
 8018200:	6102      	str	r2, [r0, #16]
 8018202:	bf08      	it	eq
 8018204:	6143      	streq	r3, [r0, #20]
 8018206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801820a:	f8dc c000 	ldr.w	ip, [ip]
 801820e:	fa0c fc08 	lsl.w	ip, ip, r8
 8018212:	ea4c 0707 	orr.w	r7, ip, r7
 8018216:	f849 7b04 	str.w	r7, [r9], #4
 801821a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801821e:	40cf      	lsrs	r7, r1
 8018220:	e7da      	b.n	80181d8 <rshift+0x4c>
 8018222:	f851 cb04 	ldr.w	ip, [r1], #4
 8018226:	f847 cf04 	str.w	ip, [r7, #4]!
 801822a:	e7c3      	b.n	80181b4 <rshift+0x28>
 801822c:	4623      	mov	r3, r4
 801822e:	e7e1      	b.n	80181f4 <rshift+0x68>

08018230 <__hexdig_fun>:
 8018230:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018234:	2b09      	cmp	r3, #9
 8018236:	d802      	bhi.n	801823e <__hexdig_fun+0xe>
 8018238:	3820      	subs	r0, #32
 801823a:	b2c0      	uxtb	r0, r0
 801823c:	4770      	bx	lr
 801823e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018242:	2b05      	cmp	r3, #5
 8018244:	d801      	bhi.n	801824a <__hexdig_fun+0x1a>
 8018246:	3847      	subs	r0, #71	; 0x47
 8018248:	e7f7      	b.n	801823a <__hexdig_fun+0xa>
 801824a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801824e:	2b05      	cmp	r3, #5
 8018250:	d801      	bhi.n	8018256 <__hexdig_fun+0x26>
 8018252:	3827      	subs	r0, #39	; 0x27
 8018254:	e7f1      	b.n	801823a <__hexdig_fun+0xa>
 8018256:	2000      	movs	r0, #0
 8018258:	4770      	bx	lr
	...

0801825c <__gethex>:
 801825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018260:	ed2d 8b02 	vpush	{d8}
 8018264:	b089      	sub	sp, #36	; 0x24
 8018266:	ee08 0a10 	vmov	s16, r0
 801826a:	9304      	str	r3, [sp, #16]
 801826c:	4bb4      	ldr	r3, [pc, #720]	; (8018540 <__gethex+0x2e4>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	9301      	str	r3, [sp, #4]
 8018272:	4618      	mov	r0, r3
 8018274:	468b      	mov	fp, r1
 8018276:	4690      	mov	r8, r2
 8018278:	f7e8 f84a 	bl	8000310 <strlen>
 801827c:	9b01      	ldr	r3, [sp, #4]
 801827e:	f8db 2000 	ldr.w	r2, [fp]
 8018282:	4403      	add	r3, r0
 8018284:	4682      	mov	sl, r0
 8018286:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801828a:	9305      	str	r3, [sp, #20]
 801828c:	1c93      	adds	r3, r2, #2
 801828e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018292:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018296:	32fe      	adds	r2, #254	; 0xfe
 8018298:	18d1      	adds	r1, r2, r3
 801829a:	461f      	mov	r7, r3
 801829c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80182a0:	9100      	str	r1, [sp, #0]
 80182a2:	2830      	cmp	r0, #48	; 0x30
 80182a4:	d0f8      	beq.n	8018298 <__gethex+0x3c>
 80182a6:	f7ff ffc3 	bl	8018230 <__hexdig_fun>
 80182aa:	4604      	mov	r4, r0
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d13a      	bne.n	8018326 <__gethex+0xca>
 80182b0:	9901      	ldr	r1, [sp, #4]
 80182b2:	4652      	mov	r2, sl
 80182b4:	4638      	mov	r0, r7
 80182b6:	f001 fa43 	bl	8019740 <strncmp>
 80182ba:	4605      	mov	r5, r0
 80182bc:	2800      	cmp	r0, #0
 80182be:	d168      	bne.n	8018392 <__gethex+0x136>
 80182c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80182c4:	eb07 060a 	add.w	r6, r7, sl
 80182c8:	f7ff ffb2 	bl	8018230 <__hexdig_fun>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d062      	beq.n	8018396 <__gethex+0x13a>
 80182d0:	4633      	mov	r3, r6
 80182d2:	7818      	ldrb	r0, [r3, #0]
 80182d4:	2830      	cmp	r0, #48	; 0x30
 80182d6:	461f      	mov	r7, r3
 80182d8:	f103 0301 	add.w	r3, r3, #1
 80182dc:	d0f9      	beq.n	80182d2 <__gethex+0x76>
 80182de:	f7ff ffa7 	bl	8018230 <__hexdig_fun>
 80182e2:	2301      	movs	r3, #1
 80182e4:	fab0 f480 	clz	r4, r0
 80182e8:	0964      	lsrs	r4, r4, #5
 80182ea:	4635      	mov	r5, r6
 80182ec:	9300      	str	r3, [sp, #0]
 80182ee:	463a      	mov	r2, r7
 80182f0:	4616      	mov	r6, r2
 80182f2:	3201      	adds	r2, #1
 80182f4:	7830      	ldrb	r0, [r6, #0]
 80182f6:	f7ff ff9b 	bl	8018230 <__hexdig_fun>
 80182fa:	2800      	cmp	r0, #0
 80182fc:	d1f8      	bne.n	80182f0 <__gethex+0x94>
 80182fe:	9901      	ldr	r1, [sp, #4]
 8018300:	4652      	mov	r2, sl
 8018302:	4630      	mov	r0, r6
 8018304:	f001 fa1c 	bl	8019740 <strncmp>
 8018308:	b980      	cbnz	r0, 801832c <__gethex+0xd0>
 801830a:	b94d      	cbnz	r5, 8018320 <__gethex+0xc4>
 801830c:	eb06 050a 	add.w	r5, r6, sl
 8018310:	462a      	mov	r2, r5
 8018312:	4616      	mov	r6, r2
 8018314:	3201      	adds	r2, #1
 8018316:	7830      	ldrb	r0, [r6, #0]
 8018318:	f7ff ff8a 	bl	8018230 <__hexdig_fun>
 801831c:	2800      	cmp	r0, #0
 801831e:	d1f8      	bne.n	8018312 <__gethex+0xb6>
 8018320:	1bad      	subs	r5, r5, r6
 8018322:	00ad      	lsls	r5, r5, #2
 8018324:	e004      	b.n	8018330 <__gethex+0xd4>
 8018326:	2400      	movs	r4, #0
 8018328:	4625      	mov	r5, r4
 801832a:	e7e0      	b.n	80182ee <__gethex+0x92>
 801832c:	2d00      	cmp	r5, #0
 801832e:	d1f7      	bne.n	8018320 <__gethex+0xc4>
 8018330:	7833      	ldrb	r3, [r6, #0]
 8018332:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018336:	2b50      	cmp	r3, #80	; 0x50
 8018338:	d13b      	bne.n	80183b2 <__gethex+0x156>
 801833a:	7873      	ldrb	r3, [r6, #1]
 801833c:	2b2b      	cmp	r3, #43	; 0x2b
 801833e:	d02c      	beq.n	801839a <__gethex+0x13e>
 8018340:	2b2d      	cmp	r3, #45	; 0x2d
 8018342:	d02e      	beq.n	80183a2 <__gethex+0x146>
 8018344:	1c71      	adds	r1, r6, #1
 8018346:	f04f 0900 	mov.w	r9, #0
 801834a:	7808      	ldrb	r0, [r1, #0]
 801834c:	f7ff ff70 	bl	8018230 <__hexdig_fun>
 8018350:	1e43      	subs	r3, r0, #1
 8018352:	b2db      	uxtb	r3, r3
 8018354:	2b18      	cmp	r3, #24
 8018356:	d82c      	bhi.n	80183b2 <__gethex+0x156>
 8018358:	f1a0 0210 	sub.w	r2, r0, #16
 801835c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018360:	f7ff ff66 	bl	8018230 <__hexdig_fun>
 8018364:	1e43      	subs	r3, r0, #1
 8018366:	b2db      	uxtb	r3, r3
 8018368:	2b18      	cmp	r3, #24
 801836a:	d91d      	bls.n	80183a8 <__gethex+0x14c>
 801836c:	f1b9 0f00 	cmp.w	r9, #0
 8018370:	d000      	beq.n	8018374 <__gethex+0x118>
 8018372:	4252      	negs	r2, r2
 8018374:	4415      	add	r5, r2
 8018376:	f8cb 1000 	str.w	r1, [fp]
 801837a:	b1e4      	cbz	r4, 80183b6 <__gethex+0x15a>
 801837c:	9b00      	ldr	r3, [sp, #0]
 801837e:	2b00      	cmp	r3, #0
 8018380:	bf14      	ite	ne
 8018382:	2700      	movne	r7, #0
 8018384:	2706      	moveq	r7, #6
 8018386:	4638      	mov	r0, r7
 8018388:	b009      	add	sp, #36	; 0x24
 801838a:	ecbd 8b02 	vpop	{d8}
 801838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018392:	463e      	mov	r6, r7
 8018394:	4625      	mov	r5, r4
 8018396:	2401      	movs	r4, #1
 8018398:	e7ca      	b.n	8018330 <__gethex+0xd4>
 801839a:	f04f 0900 	mov.w	r9, #0
 801839e:	1cb1      	adds	r1, r6, #2
 80183a0:	e7d3      	b.n	801834a <__gethex+0xee>
 80183a2:	f04f 0901 	mov.w	r9, #1
 80183a6:	e7fa      	b.n	801839e <__gethex+0x142>
 80183a8:	230a      	movs	r3, #10
 80183aa:	fb03 0202 	mla	r2, r3, r2, r0
 80183ae:	3a10      	subs	r2, #16
 80183b0:	e7d4      	b.n	801835c <__gethex+0x100>
 80183b2:	4631      	mov	r1, r6
 80183b4:	e7df      	b.n	8018376 <__gethex+0x11a>
 80183b6:	1bf3      	subs	r3, r6, r7
 80183b8:	3b01      	subs	r3, #1
 80183ba:	4621      	mov	r1, r4
 80183bc:	2b07      	cmp	r3, #7
 80183be:	dc0b      	bgt.n	80183d8 <__gethex+0x17c>
 80183c0:	ee18 0a10 	vmov	r0, s16
 80183c4:	f000 fa82 	bl	80188cc <_Balloc>
 80183c8:	4604      	mov	r4, r0
 80183ca:	b940      	cbnz	r0, 80183de <__gethex+0x182>
 80183cc:	4b5d      	ldr	r3, [pc, #372]	; (8018544 <__gethex+0x2e8>)
 80183ce:	4602      	mov	r2, r0
 80183d0:	21de      	movs	r1, #222	; 0xde
 80183d2:	485d      	ldr	r0, [pc, #372]	; (8018548 <__gethex+0x2ec>)
 80183d4:	f001 f9d6 	bl	8019784 <__assert_func>
 80183d8:	3101      	adds	r1, #1
 80183da:	105b      	asrs	r3, r3, #1
 80183dc:	e7ee      	b.n	80183bc <__gethex+0x160>
 80183de:	f100 0914 	add.w	r9, r0, #20
 80183e2:	f04f 0b00 	mov.w	fp, #0
 80183e6:	f1ca 0301 	rsb	r3, sl, #1
 80183ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80183ee:	f8cd b000 	str.w	fp, [sp]
 80183f2:	9306      	str	r3, [sp, #24]
 80183f4:	42b7      	cmp	r7, r6
 80183f6:	d340      	bcc.n	801847a <__gethex+0x21e>
 80183f8:	9802      	ldr	r0, [sp, #8]
 80183fa:	9b00      	ldr	r3, [sp, #0]
 80183fc:	f840 3b04 	str.w	r3, [r0], #4
 8018400:	eba0 0009 	sub.w	r0, r0, r9
 8018404:	1080      	asrs	r0, r0, #2
 8018406:	0146      	lsls	r6, r0, #5
 8018408:	6120      	str	r0, [r4, #16]
 801840a:	4618      	mov	r0, r3
 801840c:	f000 fb50 	bl	8018ab0 <__hi0bits>
 8018410:	1a30      	subs	r0, r6, r0
 8018412:	f8d8 6000 	ldr.w	r6, [r8]
 8018416:	42b0      	cmp	r0, r6
 8018418:	dd63      	ble.n	80184e2 <__gethex+0x286>
 801841a:	1b87      	subs	r7, r0, r6
 801841c:	4639      	mov	r1, r7
 801841e:	4620      	mov	r0, r4
 8018420:	f000 fef1 	bl	8019206 <__any_on>
 8018424:	4682      	mov	sl, r0
 8018426:	b1a8      	cbz	r0, 8018454 <__gethex+0x1f8>
 8018428:	1e7b      	subs	r3, r7, #1
 801842a:	1159      	asrs	r1, r3, #5
 801842c:	f003 021f 	and.w	r2, r3, #31
 8018430:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018434:	f04f 0a01 	mov.w	sl, #1
 8018438:	fa0a f202 	lsl.w	r2, sl, r2
 801843c:	420a      	tst	r2, r1
 801843e:	d009      	beq.n	8018454 <__gethex+0x1f8>
 8018440:	4553      	cmp	r3, sl
 8018442:	dd05      	ble.n	8018450 <__gethex+0x1f4>
 8018444:	1eb9      	subs	r1, r7, #2
 8018446:	4620      	mov	r0, r4
 8018448:	f000 fedd 	bl	8019206 <__any_on>
 801844c:	2800      	cmp	r0, #0
 801844e:	d145      	bne.n	80184dc <__gethex+0x280>
 8018450:	f04f 0a02 	mov.w	sl, #2
 8018454:	4639      	mov	r1, r7
 8018456:	4620      	mov	r0, r4
 8018458:	f7ff fe98 	bl	801818c <rshift>
 801845c:	443d      	add	r5, r7
 801845e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018462:	42ab      	cmp	r3, r5
 8018464:	da4c      	bge.n	8018500 <__gethex+0x2a4>
 8018466:	ee18 0a10 	vmov	r0, s16
 801846a:	4621      	mov	r1, r4
 801846c:	f000 fa6e 	bl	801894c <_Bfree>
 8018470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018472:	2300      	movs	r3, #0
 8018474:	6013      	str	r3, [r2, #0]
 8018476:	27a3      	movs	r7, #163	; 0xa3
 8018478:	e785      	b.n	8018386 <__gethex+0x12a>
 801847a:	1e73      	subs	r3, r6, #1
 801847c:	9a05      	ldr	r2, [sp, #20]
 801847e:	9303      	str	r3, [sp, #12]
 8018480:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018484:	4293      	cmp	r3, r2
 8018486:	d019      	beq.n	80184bc <__gethex+0x260>
 8018488:	f1bb 0f20 	cmp.w	fp, #32
 801848c:	d107      	bne.n	801849e <__gethex+0x242>
 801848e:	9b02      	ldr	r3, [sp, #8]
 8018490:	9a00      	ldr	r2, [sp, #0]
 8018492:	f843 2b04 	str.w	r2, [r3], #4
 8018496:	9302      	str	r3, [sp, #8]
 8018498:	2300      	movs	r3, #0
 801849a:	9300      	str	r3, [sp, #0]
 801849c:	469b      	mov	fp, r3
 801849e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80184a2:	f7ff fec5 	bl	8018230 <__hexdig_fun>
 80184a6:	9b00      	ldr	r3, [sp, #0]
 80184a8:	f000 000f 	and.w	r0, r0, #15
 80184ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80184b0:	4303      	orrs	r3, r0
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	f10b 0b04 	add.w	fp, fp, #4
 80184b8:	9b03      	ldr	r3, [sp, #12]
 80184ba:	e00d      	b.n	80184d8 <__gethex+0x27c>
 80184bc:	9b03      	ldr	r3, [sp, #12]
 80184be:	9a06      	ldr	r2, [sp, #24]
 80184c0:	4413      	add	r3, r2
 80184c2:	42bb      	cmp	r3, r7
 80184c4:	d3e0      	bcc.n	8018488 <__gethex+0x22c>
 80184c6:	4618      	mov	r0, r3
 80184c8:	9901      	ldr	r1, [sp, #4]
 80184ca:	9307      	str	r3, [sp, #28]
 80184cc:	4652      	mov	r2, sl
 80184ce:	f001 f937 	bl	8019740 <strncmp>
 80184d2:	9b07      	ldr	r3, [sp, #28]
 80184d4:	2800      	cmp	r0, #0
 80184d6:	d1d7      	bne.n	8018488 <__gethex+0x22c>
 80184d8:	461e      	mov	r6, r3
 80184da:	e78b      	b.n	80183f4 <__gethex+0x198>
 80184dc:	f04f 0a03 	mov.w	sl, #3
 80184e0:	e7b8      	b.n	8018454 <__gethex+0x1f8>
 80184e2:	da0a      	bge.n	80184fa <__gethex+0x29e>
 80184e4:	1a37      	subs	r7, r6, r0
 80184e6:	4621      	mov	r1, r4
 80184e8:	ee18 0a10 	vmov	r0, s16
 80184ec:	463a      	mov	r2, r7
 80184ee:	f000 fc49 	bl	8018d84 <__lshift>
 80184f2:	1bed      	subs	r5, r5, r7
 80184f4:	4604      	mov	r4, r0
 80184f6:	f100 0914 	add.w	r9, r0, #20
 80184fa:	f04f 0a00 	mov.w	sl, #0
 80184fe:	e7ae      	b.n	801845e <__gethex+0x202>
 8018500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018504:	42a8      	cmp	r0, r5
 8018506:	dd72      	ble.n	80185ee <__gethex+0x392>
 8018508:	1b45      	subs	r5, r0, r5
 801850a:	42ae      	cmp	r6, r5
 801850c:	dc36      	bgt.n	801857c <__gethex+0x320>
 801850e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018512:	2b02      	cmp	r3, #2
 8018514:	d02a      	beq.n	801856c <__gethex+0x310>
 8018516:	2b03      	cmp	r3, #3
 8018518:	d02c      	beq.n	8018574 <__gethex+0x318>
 801851a:	2b01      	cmp	r3, #1
 801851c:	d11c      	bne.n	8018558 <__gethex+0x2fc>
 801851e:	42ae      	cmp	r6, r5
 8018520:	d11a      	bne.n	8018558 <__gethex+0x2fc>
 8018522:	2e01      	cmp	r6, #1
 8018524:	d112      	bne.n	801854c <__gethex+0x2f0>
 8018526:	9a04      	ldr	r2, [sp, #16]
 8018528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801852c:	6013      	str	r3, [r2, #0]
 801852e:	2301      	movs	r3, #1
 8018530:	6123      	str	r3, [r4, #16]
 8018532:	f8c9 3000 	str.w	r3, [r9]
 8018536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018538:	2762      	movs	r7, #98	; 0x62
 801853a:	601c      	str	r4, [r3, #0]
 801853c:	e723      	b.n	8018386 <__gethex+0x12a>
 801853e:	bf00      	nop
 8018540:	0801a608 	.word	0x0801a608
 8018544:	0801a590 	.word	0x0801a590
 8018548:	0801a5a1 	.word	0x0801a5a1
 801854c:	1e71      	subs	r1, r6, #1
 801854e:	4620      	mov	r0, r4
 8018550:	f000 fe59 	bl	8019206 <__any_on>
 8018554:	2800      	cmp	r0, #0
 8018556:	d1e6      	bne.n	8018526 <__gethex+0x2ca>
 8018558:	ee18 0a10 	vmov	r0, s16
 801855c:	4621      	mov	r1, r4
 801855e:	f000 f9f5 	bl	801894c <_Bfree>
 8018562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018564:	2300      	movs	r3, #0
 8018566:	6013      	str	r3, [r2, #0]
 8018568:	2750      	movs	r7, #80	; 0x50
 801856a:	e70c      	b.n	8018386 <__gethex+0x12a>
 801856c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801856e:	2b00      	cmp	r3, #0
 8018570:	d1f2      	bne.n	8018558 <__gethex+0x2fc>
 8018572:	e7d8      	b.n	8018526 <__gethex+0x2ca>
 8018574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018576:	2b00      	cmp	r3, #0
 8018578:	d1d5      	bne.n	8018526 <__gethex+0x2ca>
 801857a:	e7ed      	b.n	8018558 <__gethex+0x2fc>
 801857c:	1e6f      	subs	r7, r5, #1
 801857e:	f1ba 0f00 	cmp.w	sl, #0
 8018582:	d131      	bne.n	80185e8 <__gethex+0x38c>
 8018584:	b127      	cbz	r7, 8018590 <__gethex+0x334>
 8018586:	4639      	mov	r1, r7
 8018588:	4620      	mov	r0, r4
 801858a:	f000 fe3c 	bl	8019206 <__any_on>
 801858e:	4682      	mov	sl, r0
 8018590:	117b      	asrs	r3, r7, #5
 8018592:	2101      	movs	r1, #1
 8018594:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018598:	f007 071f 	and.w	r7, r7, #31
 801859c:	fa01 f707 	lsl.w	r7, r1, r7
 80185a0:	421f      	tst	r7, r3
 80185a2:	4629      	mov	r1, r5
 80185a4:	4620      	mov	r0, r4
 80185a6:	bf18      	it	ne
 80185a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80185ac:	1b76      	subs	r6, r6, r5
 80185ae:	f7ff fded 	bl	801818c <rshift>
 80185b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80185b6:	2702      	movs	r7, #2
 80185b8:	f1ba 0f00 	cmp.w	sl, #0
 80185bc:	d048      	beq.n	8018650 <__gethex+0x3f4>
 80185be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d015      	beq.n	80185f2 <__gethex+0x396>
 80185c6:	2b03      	cmp	r3, #3
 80185c8:	d017      	beq.n	80185fa <__gethex+0x39e>
 80185ca:	2b01      	cmp	r3, #1
 80185cc:	d109      	bne.n	80185e2 <__gethex+0x386>
 80185ce:	f01a 0f02 	tst.w	sl, #2
 80185d2:	d006      	beq.n	80185e2 <__gethex+0x386>
 80185d4:	f8d9 0000 	ldr.w	r0, [r9]
 80185d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80185dc:	f01a 0f01 	tst.w	sl, #1
 80185e0:	d10e      	bne.n	8018600 <__gethex+0x3a4>
 80185e2:	f047 0710 	orr.w	r7, r7, #16
 80185e6:	e033      	b.n	8018650 <__gethex+0x3f4>
 80185e8:	f04f 0a01 	mov.w	sl, #1
 80185ec:	e7d0      	b.n	8018590 <__gethex+0x334>
 80185ee:	2701      	movs	r7, #1
 80185f0:	e7e2      	b.n	80185b8 <__gethex+0x35c>
 80185f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185f4:	f1c3 0301 	rsb	r3, r3, #1
 80185f8:	9315      	str	r3, [sp, #84]	; 0x54
 80185fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d0f0      	beq.n	80185e2 <__gethex+0x386>
 8018600:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018604:	f104 0314 	add.w	r3, r4, #20
 8018608:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801860c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018610:	f04f 0c00 	mov.w	ip, #0
 8018614:	4618      	mov	r0, r3
 8018616:	f853 2b04 	ldr.w	r2, [r3], #4
 801861a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801861e:	d01c      	beq.n	801865a <__gethex+0x3fe>
 8018620:	3201      	adds	r2, #1
 8018622:	6002      	str	r2, [r0, #0]
 8018624:	2f02      	cmp	r7, #2
 8018626:	f104 0314 	add.w	r3, r4, #20
 801862a:	d13f      	bne.n	80186ac <__gethex+0x450>
 801862c:	f8d8 2000 	ldr.w	r2, [r8]
 8018630:	3a01      	subs	r2, #1
 8018632:	42b2      	cmp	r2, r6
 8018634:	d10a      	bne.n	801864c <__gethex+0x3f0>
 8018636:	1171      	asrs	r1, r6, #5
 8018638:	2201      	movs	r2, #1
 801863a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801863e:	f006 061f 	and.w	r6, r6, #31
 8018642:	fa02 f606 	lsl.w	r6, r2, r6
 8018646:	421e      	tst	r6, r3
 8018648:	bf18      	it	ne
 801864a:	4617      	movne	r7, r2
 801864c:	f047 0720 	orr.w	r7, r7, #32
 8018650:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018652:	601c      	str	r4, [r3, #0]
 8018654:	9b04      	ldr	r3, [sp, #16]
 8018656:	601d      	str	r5, [r3, #0]
 8018658:	e695      	b.n	8018386 <__gethex+0x12a>
 801865a:	4299      	cmp	r1, r3
 801865c:	f843 cc04 	str.w	ip, [r3, #-4]
 8018660:	d8d8      	bhi.n	8018614 <__gethex+0x3b8>
 8018662:	68a3      	ldr	r3, [r4, #8]
 8018664:	459b      	cmp	fp, r3
 8018666:	db19      	blt.n	801869c <__gethex+0x440>
 8018668:	6861      	ldr	r1, [r4, #4]
 801866a:	ee18 0a10 	vmov	r0, s16
 801866e:	3101      	adds	r1, #1
 8018670:	f000 f92c 	bl	80188cc <_Balloc>
 8018674:	4681      	mov	r9, r0
 8018676:	b918      	cbnz	r0, 8018680 <__gethex+0x424>
 8018678:	4b1a      	ldr	r3, [pc, #104]	; (80186e4 <__gethex+0x488>)
 801867a:	4602      	mov	r2, r0
 801867c:	2184      	movs	r1, #132	; 0x84
 801867e:	e6a8      	b.n	80183d2 <__gethex+0x176>
 8018680:	6922      	ldr	r2, [r4, #16]
 8018682:	3202      	adds	r2, #2
 8018684:	f104 010c 	add.w	r1, r4, #12
 8018688:	0092      	lsls	r2, r2, #2
 801868a:	300c      	adds	r0, #12
 801868c:	f7fd fa3e 	bl	8015b0c <memcpy>
 8018690:	4621      	mov	r1, r4
 8018692:	ee18 0a10 	vmov	r0, s16
 8018696:	f000 f959 	bl	801894c <_Bfree>
 801869a:	464c      	mov	r4, r9
 801869c:	6923      	ldr	r3, [r4, #16]
 801869e:	1c5a      	adds	r2, r3, #1
 80186a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80186a4:	6122      	str	r2, [r4, #16]
 80186a6:	2201      	movs	r2, #1
 80186a8:	615a      	str	r2, [r3, #20]
 80186aa:	e7bb      	b.n	8018624 <__gethex+0x3c8>
 80186ac:	6922      	ldr	r2, [r4, #16]
 80186ae:	455a      	cmp	r2, fp
 80186b0:	dd0b      	ble.n	80186ca <__gethex+0x46e>
 80186b2:	2101      	movs	r1, #1
 80186b4:	4620      	mov	r0, r4
 80186b6:	f7ff fd69 	bl	801818c <rshift>
 80186ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186be:	3501      	adds	r5, #1
 80186c0:	42ab      	cmp	r3, r5
 80186c2:	f6ff aed0 	blt.w	8018466 <__gethex+0x20a>
 80186c6:	2701      	movs	r7, #1
 80186c8:	e7c0      	b.n	801864c <__gethex+0x3f0>
 80186ca:	f016 061f 	ands.w	r6, r6, #31
 80186ce:	d0fa      	beq.n	80186c6 <__gethex+0x46a>
 80186d0:	4453      	add	r3, sl
 80186d2:	f1c6 0620 	rsb	r6, r6, #32
 80186d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80186da:	f000 f9e9 	bl	8018ab0 <__hi0bits>
 80186de:	42b0      	cmp	r0, r6
 80186e0:	dbe7      	blt.n	80186b2 <__gethex+0x456>
 80186e2:	e7f0      	b.n	80186c6 <__gethex+0x46a>
 80186e4:	0801a590 	.word	0x0801a590

080186e8 <L_shift>:
 80186e8:	f1c2 0208 	rsb	r2, r2, #8
 80186ec:	0092      	lsls	r2, r2, #2
 80186ee:	b570      	push	{r4, r5, r6, lr}
 80186f0:	f1c2 0620 	rsb	r6, r2, #32
 80186f4:	6843      	ldr	r3, [r0, #4]
 80186f6:	6804      	ldr	r4, [r0, #0]
 80186f8:	fa03 f506 	lsl.w	r5, r3, r6
 80186fc:	432c      	orrs	r4, r5
 80186fe:	40d3      	lsrs	r3, r2
 8018700:	6004      	str	r4, [r0, #0]
 8018702:	f840 3f04 	str.w	r3, [r0, #4]!
 8018706:	4288      	cmp	r0, r1
 8018708:	d3f4      	bcc.n	80186f4 <L_shift+0xc>
 801870a:	bd70      	pop	{r4, r5, r6, pc}

0801870c <__match>:
 801870c:	b530      	push	{r4, r5, lr}
 801870e:	6803      	ldr	r3, [r0, #0]
 8018710:	3301      	adds	r3, #1
 8018712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018716:	b914      	cbnz	r4, 801871e <__match+0x12>
 8018718:	6003      	str	r3, [r0, #0]
 801871a:	2001      	movs	r0, #1
 801871c:	bd30      	pop	{r4, r5, pc}
 801871e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018722:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018726:	2d19      	cmp	r5, #25
 8018728:	bf98      	it	ls
 801872a:	3220      	addls	r2, #32
 801872c:	42a2      	cmp	r2, r4
 801872e:	d0f0      	beq.n	8018712 <__match+0x6>
 8018730:	2000      	movs	r0, #0
 8018732:	e7f3      	b.n	801871c <__match+0x10>

08018734 <__hexnan>:
 8018734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018738:	680b      	ldr	r3, [r1, #0]
 801873a:	115e      	asrs	r6, r3, #5
 801873c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018740:	f013 031f 	ands.w	r3, r3, #31
 8018744:	b087      	sub	sp, #28
 8018746:	bf18      	it	ne
 8018748:	3604      	addne	r6, #4
 801874a:	2500      	movs	r5, #0
 801874c:	1f37      	subs	r7, r6, #4
 801874e:	4690      	mov	r8, r2
 8018750:	6802      	ldr	r2, [r0, #0]
 8018752:	9301      	str	r3, [sp, #4]
 8018754:	4682      	mov	sl, r0
 8018756:	f846 5c04 	str.w	r5, [r6, #-4]
 801875a:	46b9      	mov	r9, r7
 801875c:	463c      	mov	r4, r7
 801875e:	9502      	str	r5, [sp, #8]
 8018760:	46ab      	mov	fp, r5
 8018762:	7851      	ldrb	r1, [r2, #1]
 8018764:	1c53      	adds	r3, r2, #1
 8018766:	9303      	str	r3, [sp, #12]
 8018768:	b341      	cbz	r1, 80187bc <__hexnan+0x88>
 801876a:	4608      	mov	r0, r1
 801876c:	9205      	str	r2, [sp, #20]
 801876e:	9104      	str	r1, [sp, #16]
 8018770:	f7ff fd5e 	bl	8018230 <__hexdig_fun>
 8018774:	2800      	cmp	r0, #0
 8018776:	d14f      	bne.n	8018818 <__hexnan+0xe4>
 8018778:	9904      	ldr	r1, [sp, #16]
 801877a:	9a05      	ldr	r2, [sp, #20]
 801877c:	2920      	cmp	r1, #32
 801877e:	d818      	bhi.n	80187b2 <__hexnan+0x7e>
 8018780:	9b02      	ldr	r3, [sp, #8]
 8018782:	459b      	cmp	fp, r3
 8018784:	dd13      	ble.n	80187ae <__hexnan+0x7a>
 8018786:	454c      	cmp	r4, r9
 8018788:	d206      	bcs.n	8018798 <__hexnan+0x64>
 801878a:	2d07      	cmp	r5, #7
 801878c:	dc04      	bgt.n	8018798 <__hexnan+0x64>
 801878e:	462a      	mov	r2, r5
 8018790:	4649      	mov	r1, r9
 8018792:	4620      	mov	r0, r4
 8018794:	f7ff ffa8 	bl	80186e8 <L_shift>
 8018798:	4544      	cmp	r4, r8
 801879a:	d950      	bls.n	801883e <__hexnan+0x10a>
 801879c:	2300      	movs	r3, #0
 801879e:	f1a4 0904 	sub.w	r9, r4, #4
 80187a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80187a6:	f8cd b008 	str.w	fp, [sp, #8]
 80187aa:	464c      	mov	r4, r9
 80187ac:	461d      	mov	r5, r3
 80187ae:	9a03      	ldr	r2, [sp, #12]
 80187b0:	e7d7      	b.n	8018762 <__hexnan+0x2e>
 80187b2:	2929      	cmp	r1, #41	; 0x29
 80187b4:	d156      	bne.n	8018864 <__hexnan+0x130>
 80187b6:	3202      	adds	r2, #2
 80187b8:	f8ca 2000 	str.w	r2, [sl]
 80187bc:	f1bb 0f00 	cmp.w	fp, #0
 80187c0:	d050      	beq.n	8018864 <__hexnan+0x130>
 80187c2:	454c      	cmp	r4, r9
 80187c4:	d206      	bcs.n	80187d4 <__hexnan+0xa0>
 80187c6:	2d07      	cmp	r5, #7
 80187c8:	dc04      	bgt.n	80187d4 <__hexnan+0xa0>
 80187ca:	462a      	mov	r2, r5
 80187cc:	4649      	mov	r1, r9
 80187ce:	4620      	mov	r0, r4
 80187d0:	f7ff ff8a 	bl	80186e8 <L_shift>
 80187d4:	4544      	cmp	r4, r8
 80187d6:	d934      	bls.n	8018842 <__hexnan+0x10e>
 80187d8:	f1a8 0204 	sub.w	r2, r8, #4
 80187dc:	4623      	mov	r3, r4
 80187de:	f853 1b04 	ldr.w	r1, [r3], #4
 80187e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80187e6:	429f      	cmp	r7, r3
 80187e8:	d2f9      	bcs.n	80187de <__hexnan+0xaa>
 80187ea:	1b3b      	subs	r3, r7, r4
 80187ec:	f023 0303 	bic.w	r3, r3, #3
 80187f0:	3304      	adds	r3, #4
 80187f2:	3401      	adds	r4, #1
 80187f4:	3e03      	subs	r6, #3
 80187f6:	42b4      	cmp	r4, r6
 80187f8:	bf88      	it	hi
 80187fa:	2304      	movhi	r3, #4
 80187fc:	4443      	add	r3, r8
 80187fe:	2200      	movs	r2, #0
 8018800:	f843 2b04 	str.w	r2, [r3], #4
 8018804:	429f      	cmp	r7, r3
 8018806:	d2fb      	bcs.n	8018800 <__hexnan+0xcc>
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	b91b      	cbnz	r3, 8018814 <__hexnan+0xe0>
 801880c:	4547      	cmp	r7, r8
 801880e:	d127      	bne.n	8018860 <__hexnan+0x12c>
 8018810:	2301      	movs	r3, #1
 8018812:	603b      	str	r3, [r7, #0]
 8018814:	2005      	movs	r0, #5
 8018816:	e026      	b.n	8018866 <__hexnan+0x132>
 8018818:	3501      	adds	r5, #1
 801881a:	2d08      	cmp	r5, #8
 801881c:	f10b 0b01 	add.w	fp, fp, #1
 8018820:	dd06      	ble.n	8018830 <__hexnan+0xfc>
 8018822:	4544      	cmp	r4, r8
 8018824:	d9c3      	bls.n	80187ae <__hexnan+0x7a>
 8018826:	2300      	movs	r3, #0
 8018828:	f844 3c04 	str.w	r3, [r4, #-4]
 801882c:	2501      	movs	r5, #1
 801882e:	3c04      	subs	r4, #4
 8018830:	6822      	ldr	r2, [r4, #0]
 8018832:	f000 000f 	and.w	r0, r0, #15
 8018836:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801883a:	6022      	str	r2, [r4, #0]
 801883c:	e7b7      	b.n	80187ae <__hexnan+0x7a>
 801883e:	2508      	movs	r5, #8
 8018840:	e7b5      	b.n	80187ae <__hexnan+0x7a>
 8018842:	9b01      	ldr	r3, [sp, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d0df      	beq.n	8018808 <__hexnan+0xd4>
 8018848:	f04f 32ff 	mov.w	r2, #4294967295
 801884c:	f1c3 0320 	rsb	r3, r3, #32
 8018850:	fa22 f303 	lsr.w	r3, r2, r3
 8018854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018858:	401a      	ands	r2, r3
 801885a:	f846 2c04 	str.w	r2, [r6, #-4]
 801885e:	e7d3      	b.n	8018808 <__hexnan+0xd4>
 8018860:	3f04      	subs	r7, #4
 8018862:	e7d1      	b.n	8018808 <__hexnan+0xd4>
 8018864:	2004      	movs	r0, #4
 8018866:	b007      	add	sp, #28
 8018868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801886c <_localeconv_r>:
 801886c:	4800      	ldr	r0, [pc, #0]	; (8018870 <_localeconv_r+0x4>)
 801886e:	4770      	bx	lr
 8018870:	24000258 	.word	0x24000258

08018874 <_lseek_r>:
 8018874:	b538      	push	{r3, r4, r5, lr}
 8018876:	4d07      	ldr	r5, [pc, #28]	; (8018894 <_lseek_r+0x20>)
 8018878:	4604      	mov	r4, r0
 801887a:	4608      	mov	r0, r1
 801887c:	4611      	mov	r1, r2
 801887e:	2200      	movs	r2, #0
 8018880:	602a      	str	r2, [r5, #0]
 8018882:	461a      	mov	r2, r3
 8018884:	f7ea fa96 	bl	8002db4 <_lseek>
 8018888:	1c43      	adds	r3, r0, #1
 801888a:	d102      	bne.n	8018892 <_lseek_r+0x1e>
 801888c:	682b      	ldr	r3, [r5, #0]
 801888e:	b103      	cbz	r3, 8018892 <_lseek_r+0x1e>
 8018890:	6023      	str	r3, [r4, #0]
 8018892:	bd38      	pop	{r3, r4, r5, pc}
 8018894:	24003208 	.word	0x24003208

08018898 <malloc>:
 8018898:	4b02      	ldr	r3, [pc, #8]	; (80188a4 <malloc+0xc>)
 801889a:	4601      	mov	r1, r0
 801889c:	6818      	ldr	r0, [r3, #0]
 801889e:	f000 bd55 	b.w	801934c <_malloc_r>
 80188a2:	bf00      	nop
 80188a4:	24000100 	.word	0x24000100

080188a8 <__ascii_mbtowc>:
 80188a8:	b082      	sub	sp, #8
 80188aa:	b901      	cbnz	r1, 80188ae <__ascii_mbtowc+0x6>
 80188ac:	a901      	add	r1, sp, #4
 80188ae:	b142      	cbz	r2, 80188c2 <__ascii_mbtowc+0x1a>
 80188b0:	b14b      	cbz	r3, 80188c6 <__ascii_mbtowc+0x1e>
 80188b2:	7813      	ldrb	r3, [r2, #0]
 80188b4:	600b      	str	r3, [r1, #0]
 80188b6:	7812      	ldrb	r2, [r2, #0]
 80188b8:	1e10      	subs	r0, r2, #0
 80188ba:	bf18      	it	ne
 80188bc:	2001      	movne	r0, #1
 80188be:	b002      	add	sp, #8
 80188c0:	4770      	bx	lr
 80188c2:	4610      	mov	r0, r2
 80188c4:	e7fb      	b.n	80188be <__ascii_mbtowc+0x16>
 80188c6:	f06f 0001 	mvn.w	r0, #1
 80188ca:	e7f8      	b.n	80188be <__ascii_mbtowc+0x16>

080188cc <_Balloc>:
 80188cc:	b570      	push	{r4, r5, r6, lr}
 80188ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80188d0:	4604      	mov	r4, r0
 80188d2:	460d      	mov	r5, r1
 80188d4:	b976      	cbnz	r6, 80188f4 <_Balloc+0x28>
 80188d6:	2010      	movs	r0, #16
 80188d8:	f7ff ffde 	bl	8018898 <malloc>
 80188dc:	4602      	mov	r2, r0
 80188de:	6260      	str	r0, [r4, #36]	; 0x24
 80188e0:	b920      	cbnz	r0, 80188ec <_Balloc+0x20>
 80188e2:	4b18      	ldr	r3, [pc, #96]	; (8018944 <_Balloc+0x78>)
 80188e4:	4818      	ldr	r0, [pc, #96]	; (8018948 <_Balloc+0x7c>)
 80188e6:	2166      	movs	r1, #102	; 0x66
 80188e8:	f000 ff4c 	bl	8019784 <__assert_func>
 80188ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188f0:	6006      	str	r6, [r0, #0]
 80188f2:	60c6      	str	r6, [r0, #12]
 80188f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80188f6:	68f3      	ldr	r3, [r6, #12]
 80188f8:	b183      	cbz	r3, 801891c <_Balloc+0x50>
 80188fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188fc:	68db      	ldr	r3, [r3, #12]
 80188fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018902:	b9b8      	cbnz	r0, 8018934 <_Balloc+0x68>
 8018904:	2101      	movs	r1, #1
 8018906:	fa01 f605 	lsl.w	r6, r1, r5
 801890a:	1d72      	adds	r2, r6, #5
 801890c:	0092      	lsls	r2, r2, #2
 801890e:	4620      	mov	r0, r4
 8018910:	f000 fc9a 	bl	8019248 <_calloc_r>
 8018914:	b160      	cbz	r0, 8018930 <_Balloc+0x64>
 8018916:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801891a:	e00e      	b.n	801893a <_Balloc+0x6e>
 801891c:	2221      	movs	r2, #33	; 0x21
 801891e:	2104      	movs	r1, #4
 8018920:	4620      	mov	r0, r4
 8018922:	f000 fc91 	bl	8019248 <_calloc_r>
 8018926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018928:	60f0      	str	r0, [r6, #12]
 801892a:	68db      	ldr	r3, [r3, #12]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d1e4      	bne.n	80188fa <_Balloc+0x2e>
 8018930:	2000      	movs	r0, #0
 8018932:	bd70      	pop	{r4, r5, r6, pc}
 8018934:	6802      	ldr	r2, [r0, #0]
 8018936:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801893a:	2300      	movs	r3, #0
 801893c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018940:	e7f7      	b.n	8018932 <_Balloc+0x66>
 8018942:	bf00      	nop
 8018944:	0801a51e 	.word	0x0801a51e
 8018948:	0801a61c 	.word	0x0801a61c

0801894c <_Bfree>:
 801894c:	b570      	push	{r4, r5, r6, lr}
 801894e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018950:	4605      	mov	r5, r0
 8018952:	460c      	mov	r4, r1
 8018954:	b976      	cbnz	r6, 8018974 <_Bfree+0x28>
 8018956:	2010      	movs	r0, #16
 8018958:	f7ff ff9e 	bl	8018898 <malloc>
 801895c:	4602      	mov	r2, r0
 801895e:	6268      	str	r0, [r5, #36]	; 0x24
 8018960:	b920      	cbnz	r0, 801896c <_Bfree+0x20>
 8018962:	4b09      	ldr	r3, [pc, #36]	; (8018988 <_Bfree+0x3c>)
 8018964:	4809      	ldr	r0, [pc, #36]	; (801898c <_Bfree+0x40>)
 8018966:	218a      	movs	r1, #138	; 0x8a
 8018968:	f000 ff0c 	bl	8019784 <__assert_func>
 801896c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018970:	6006      	str	r6, [r0, #0]
 8018972:	60c6      	str	r6, [r0, #12]
 8018974:	b13c      	cbz	r4, 8018986 <_Bfree+0x3a>
 8018976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018978:	6862      	ldr	r2, [r4, #4]
 801897a:	68db      	ldr	r3, [r3, #12]
 801897c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018980:	6021      	str	r1, [r4, #0]
 8018982:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018986:	bd70      	pop	{r4, r5, r6, pc}
 8018988:	0801a51e 	.word	0x0801a51e
 801898c:	0801a61c 	.word	0x0801a61c

08018990 <__multadd>:
 8018990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018994:	690d      	ldr	r5, [r1, #16]
 8018996:	4607      	mov	r7, r0
 8018998:	460c      	mov	r4, r1
 801899a:	461e      	mov	r6, r3
 801899c:	f101 0c14 	add.w	ip, r1, #20
 80189a0:	2000      	movs	r0, #0
 80189a2:	f8dc 3000 	ldr.w	r3, [ip]
 80189a6:	b299      	uxth	r1, r3
 80189a8:	fb02 6101 	mla	r1, r2, r1, r6
 80189ac:	0c1e      	lsrs	r6, r3, #16
 80189ae:	0c0b      	lsrs	r3, r1, #16
 80189b0:	fb02 3306 	mla	r3, r2, r6, r3
 80189b4:	b289      	uxth	r1, r1
 80189b6:	3001      	adds	r0, #1
 80189b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80189bc:	4285      	cmp	r5, r0
 80189be:	f84c 1b04 	str.w	r1, [ip], #4
 80189c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80189c6:	dcec      	bgt.n	80189a2 <__multadd+0x12>
 80189c8:	b30e      	cbz	r6, 8018a0e <__multadd+0x7e>
 80189ca:	68a3      	ldr	r3, [r4, #8]
 80189cc:	42ab      	cmp	r3, r5
 80189ce:	dc19      	bgt.n	8018a04 <__multadd+0x74>
 80189d0:	6861      	ldr	r1, [r4, #4]
 80189d2:	4638      	mov	r0, r7
 80189d4:	3101      	adds	r1, #1
 80189d6:	f7ff ff79 	bl	80188cc <_Balloc>
 80189da:	4680      	mov	r8, r0
 80189dc:	b928      	cbnz	r0, 80189ea <__multadd+0x5a>
 80189de:	4602      	mov	r2, r0
 80189e0:	4b0c      	ldr	r3, [pc, #48]	; (8018a14 <__multadd+0x84>)
 80189e2:	480d      	ldr	r0, [pc, #52]	; (8018a18 <__multadd+0x88>)
 80189e4:	21b5      	movs	r1, #181	; 0xb5
 80189e6:	f000 fecd 	bl	8019784 <__assert_func>
 80189ea:	6922      	ldr	r2, [r4, #16]
 80189ec:	3202      	adds	r2, #2
 80189ee:	f104 010c 	add.w	r1, r4, #12
 80189f2:	0092      	lsls	r2, r2, #2
 80189f4:	300c      	adds	r0, #12
 80189f6:	f7fd f889 	bl	8015b0c <memcpy>
 80189fa:	4621      	mov	r1, r4
 80189fc:	4638      	mov	r0, r7
 80189fe:	f7ff ffa5 	bl	801894c <_Bfree>
 8018a02:	4644      	mov	r4, r8
 8018a04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a08:	3501      	adds	r5, #1
 8018a0a:	615e      	str	r6, [r3, #20]
 8018a0c:	6125      	str	r5, [r4, #16]
 8018a0e:	4620      	mov	r0, r4
 8018a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a14:	0801a590 	.word	0x0801a590
 8018a18:	0801a61c 	.word	0x0801a61c

08018a1c <__s2b>:
 8018a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a20:	460c      	mov	r4, r1
 8018a22:	4615      	mov	r5, r2
 8018a24:	461f      	mov	r7, r3
 8018a26:	2209      	movs	r2, #9
 8018a28:	3308      	adds	r3, #8
 8018a2a:	4606      	mov	r6, r0
 8018a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a30:	2100      	movs	r1, #0
 8018a32:	2201      	movs	r2, #1
 8018a34:	429a      	cmp	r2, r3
 8018a36:	db09      	blt.n	8018a4c <__s2b+0x30>
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7ff ff47 	bl	80188cc <_Balloc>
 8018a3e:	b940      	cbnz	r0, 8018a52 <__s2b+0x36>
 8018a40:	4602      	mov	r2, r0
 8018a42:	4b19      	ldr	r3, [pc, #100]	; (8018aa8 <__s2b+0x8c>)
 8018a44:	4819      	ldr	r0, [pc, #100]	; (8018aac <__s2b+0x90>)
 8018a46:	21ce      	movs	r1, #206	; 0xce
 8018a48:	f000 fe9c 	bl	8019784 <__assert_func>
 8018a4c:	0052      	lsls	r2, r2, #1
 8018a4e:	3101      	adds	r1, #1
 8018a50:	e7f0      	b.n	8018a34 <__s2b+0x18>
 8018a52:	9b08      	ldr	r3, [sp, #32]
 8018a54:	6143      	str	r3, [r0, #20]
 8018a56:	2d09      	cmp	r5, #9
 8018a58:	f04f 0301 	mov.w	r3, #1
 8018a5c:	6103      	str	r3, [r0, #16]
 8018a5e:	dd16      	ble.n	8018a8e <__s2b+0x72>
 8018a60:	f104 0909 	add.w	r9, r4, #9
 8018a64:	46c8      	mov	r8, r9
 8018a66:	442c      	add	r4, r5
 8018a68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018a6c:	4601      	mov	r1, r0
 8018a6e:	3b30      	subs	r3, #48	; 0x30
 8018a70:	220a      	movs	r2, #10
 8018a72:	4630      	mov	r0, r6
 8018a74:	f7ff ff8c 	bl	8018990 <__multadd>
 8018a78:	45a0      	cmp	r8, r4
 8018a7a:	d1f5      	bne.n	8018a68 <__s2b+0x4c>
 8018a7c:	f1a5 0408 	sub.w	r4, r5, #8
 8018a80:	444c      	add	r4, r9
 8018a82:	1b2d      	subs	r5, r5, r4
 8018a84:	1963      	adds	r3, r4, r5
 8018a86:	42bb      	cmp	r3, r7
 8018a88:	db04      	blt.n	8018a94 <__s2b+0x78>
 8018a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a8e:	340a      	adds	r4, #10
 8018a90:	2509      	movs	r5, #9
 8018a92:	e7f6      	b.n	8018a82 <__s2b+0x66>
 8018a94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a98:	4601      	mov	r1, r0
 8018a9a:	3b30      	subs	r3, #48	; 0x30
 8018a9c:	220a      	movs	r2, #10
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	f7ff ff76 	bl	8018990 <__multadd>
 8018aa4:	e7ee      	b.n	8018a84 <__s2b+0x68>
 8018aa6:	bf00      	nop
 8018aa8:	0801a590 	.word	0x0801a590
 8018aac:	0801a61c 	.word	0x0801a61c

08018ab0 <__hi0bits>:
 8018ab0:	0c03      	lsrs	r3, r0, #16
 8018ab2:	041b      	lsls	r3, r3, #16
 8018ab4:	b9d3      	cbnz	r3, 8018aec <__hi0bits+0x3c>
 8018ab6:	0400      	lsls	r0, r0, #16
 8018ab8:	2310      	movs	r3, #16
 8018aba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018abe:	bf04      	itt	eq
 8018ac0:	0200      	lsleq	r0, r0, #8
 8018ac2:	3308      	addeq	r3, #8
 8018ac4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018ac8:	bf04      	itt	eq
 8018aca:	0100      	lsleq	r0, r0, #4
 8018acc:	3304      	addeq	r3, #4
 8018ace:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018ad2:	bf04      	itt	eq
 8018ad4:	0080      	lsleq	r0, r0, #2
 8018ad6:	3302      	addeq	r3, #2
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	db05      	blt.n	8018ae8 <__hi0bits+0x38>
 8018adc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018ae0:	f103 0301 	add.w	r3, r3, #1
 8018ae4:	bf08      	it	eq
 8018ae6:	2320      	moveq	r3, #32
 8018ae8:	4618      	mov	r0, r3
 8018aea:	4770      	bx	lr
 8018aec:	2300      	movs	r3, #0
 8018aee:	e7e4      	b.n	8018aba <__hi0bits+0xa>

08018af0 <__lo0bits>:
 8018af0:	6803      	ldr	r3, [r0, #0]
 8018af2:	f013 0207 	ands.w	r2, r3, #7
 8018af6:	4601      	mov	r1, r0
 8018af8:	d00b      	beq.n	8018b12 <__lo0bits+0x22>
 8018afa:	07da      	lsls	r2, r3, #31
 8018afc:	d423      	bmi.n	8018b46 <__lo0bits+0x56>
 8018afe:	0798      	lsls	r0, r3, #30
 8018b00:	bf49      	itett	mi
 8018b02:	085b      	lsrmi	r3, r3, #1
 8018b04:	089b      	lsrpl	r3, r3, #2
 8018b06:	2001      	movmi	r0, #1
 8018b08:	600b      	strmi	r3, [r1, #0]
 8018b0a:	bf5c      	itt	pl
 8018b0c:	600b      	strpl	r3, [r1, #0]
 8018b0e:	2002      	movpl	r0, #2
 8018b10:	4770      	bx	lr
 8018b12:	b298      	uxth	r0, r3
 8018b14:	b9a8      	cbnz	r0, 8018b42 <__lo0bits+0x52>
 8018b16:	0c1b      	lsrs	r3, r3, #16
 8018b18:	2010      	movs	r0, #16
 8018b1a:	b2da      	uxtb	r2, r3
 8018b1c:	b90a      	cbnz	r2, 8018b22 <__lo0bits+0x32>
 8018b1e:	3008      	adds	r0, #8
 8018b20:	0a1b      	lsrs	r3, r3, #8
 8018b22:	071a      	lsls	r2, r3, #28
 8018b24:	bf04      	itt	eq
 8018b26:	091b      	lsreq	r3, r3, #4
 8018b28:	3004      	addeq	r0, #4
 8018b2a:	079a      	lsls	r2, r3, #30
 8018b2c:	bf04      	itt	eq
 8018b2e:	089b      	lsreq	r3, r3, #2
 8018b30:	3002      	addeq	r0, #2
 8018b32:	07da      	lsls	r2, r3, #31
 8018b34:	d403      	bmi.n	8018b3e <__lo0bits+0x4e>
 8018b36:	085b      	lsrs	r3, r3, #1
 8018b38:	f100 0001 	add.w	r0, r0, #1
 8018b3c:	d005      	beq.n	8018b4a <__lo0bits+0x5a>
 8018b3e:	600b      	str	r3, [r1, #0]
 8018b40:	4770      	bx	lr
 8018b42:	4610      	mov	r0, r2
 8018b44:	e7e9      	b.n	8018b1a <__lo0bits+0x2a>
 8018b46:	2000      	movs	r0, #0
 8018b48:	4770      	bx	lr
 8018b4a:	2020      	movs	r0, #32
 8018b4c:	4770      	bx	lr
	...

08018b50 <__i2b>:
 8018b50:	b510      	push	{r4, lr}
 8018b52:	460c      	mov	r4, r1
 8018b54:	2101      	movs	r1, #1
 8018b56:	f7ff feb9 	bl	80188cc <_Balloc>
 8018b5a:	4602      	mov	r2, r0
 8018b5c:	b928      	cbnz	r0, 8018b6a <__i2b+0x1a>
 8018b5e:	4b05      	ldr	r3, [pc, #20]	; (8018b74 <__i2b+0x24>)
 8018b60:	4805      	ldr	r0, [pc, #20]	; (8018b78 <__i2b+0x28>)
 8018b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018b66:	f000 fe0d 	bl	8019784 <__assert_func>
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	6144      	str	r4, [r0, #20]
 8018b6e:	6103      	str	r3, [r0, #16]
 8018b70:	bd10      	pop	{r4, pc}
 8018b72:	bf00      	nop
 8018b74:	0801a590 	.word	0x0801a590
 8018b78:	0801a61c 	.word	0x0801a61c

08018b7c <__multiply>:
 8018b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b80:	4691      	mov	r9, r2
 8018b82:	690a      	ldr	r2, [r1, #16]
 8018b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	bfb8      	it	lt
 8018b8c:	460b      	movlt	r3, r1
 8018b8e:	460c      	mov	r4, r1
 8018b90:	bfbc      	itt	lt
 8018b92:	464c      	movlt	r4, r9
 8018b94:	4699      	movlt	r9, r3
 8018b96:	6927      	ldr	r7, [r4, #16]
 8018b98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018b9c:	68a3      	ldr	r3, [r4, #8]
 8018b9e:	6861      	ldr	r1, [r4, #4]
 8018ba0:	eb07 060a 	add.w	r6, r7, sl
 8018ba4:	42b3      	cmp	r3, r6
 8018ba6:	b085      	sub	sp, #20
 8018ba8:	bfb8      	it	lt
 8018baa:	3101      	addlt	r1, #1
 8018bac:	f7ff fe8e 	bl	80188cc <_Balloc>
 8018bb0:	b930      	cbnz	r0, 8018bc0 <__multiply+0x44>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	4b44      	ldr	r3, [pc, #272]	; (8018cc8 <__multiply+0x14c>)
 8018bb6:	4845      	ldr	r0, [pc, #276]	; (8018ccc <__multiply+0x150>)
 8018bb8:	f240 115d 	movw	r1, #349	; 0x15d
 8018bbc:	f000 fde2 	bl	8019784 <__assert_func>
 8018bc0:	f100 0514 	add.w	r5, r0, #20
 8018bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018bc8:	462b      	mov	r3, r5
 8018bca:	2200      	movs	r2, #0
 8018bcc:	4543      	cmp	r3, r8
 8018bce:	d321      	bcc.n	8018c14 <__multiply+0x98>
 8018bd0:	f104 0314 	add.w	r3, r4, #20
 8018bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018bd8:	f109 0314 	add.w	r3, r9, #20
 8018bdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018be0:	9202      	str	r2, [sp, #8]
 8018be2:	1b3a      	subs	r2, r7, r4
 8018be4:	3a15      	subs	r2, #21
 8018be6:	f022 0203 	bic.w	r2, r2, #3
 8018bea:	3204      	adds	r2, #4
 8018bec:	f104 0115 	add.w	r1, r4, #21
 8018bf0:	428f      	cmp	r7, r1
 8018bf2:	bf38      	it	cc
 8018bf4:	2204      	movcc	r2, #4
 8018bf6:	9201      	str	r2, [sp, #4]
 8018bf8:	9a02      	ldr	r2, [sp, #8]
 8018bfa:	9303      	str	r3, [sp, #12]
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d80c      	bhi.n	8018c1a <__multiply+0x9e>
 8018c00:	2e00      	cmp	r6, #0
 8018c02:	dd03      	ble.n	8018c0c <__multiply+0x90>
 8018c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d05a      	beq.n	8018cc2 <__multiply+0x146>
 8018c0c:	6106      	str	r6, [r0, #16]
 8018c0e:	b005      	add	sp, #20
 8018c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c14:	f843 2b04 	str.w	r2, [r3], #4
 8018c18:	e7d8      	b.n	8018bcc <__multiply+0x50>
 8018c1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018c1e:	f1ba 0f00 	cmp.w	sl, #0
 8018c22:	d024      	beq.n	8018c6e <__multiply+0xf2>
 8018c24:	f104 0e14 	add.w	lr, r4, #20
 8018c28:	46a9      	mov	r9, r5
 8018c2a:	f04f 0c00 	mov.w	ip, #0
 8018c2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018c32:	f8d9 1000 	ldr.w	r1, [r9]
 8018c36:	fa1f fb82 	uxth.w	fp, r2
 8018c3a:	b289      	uxth	r1, r1
 8018c3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8018c40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018c44:	f8d9 2000 	ldr.w	r2, [r9]
 8018c48:	4461      	add	r1, ip
 8018c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8018c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c56:	b289      	uxth	r1, r1
 8018c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018c5c:	4577      	cmp	r7, lr
 8018c5e:	f849 1b04 	str.w	r1, [r9], #4
 8018c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018c66:	d8e2      	bhi.n	8018c2e <__multiply+0xb2>
 8018c68:	9a01      	ldr	r2, [sp, #4]
 8018c6a:	f845 c002 	str.w	ip, [r5, r2]
 8018c6e:	9a03      	ldr	r2, [sp, #12]
 8018c70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018c74:	3304      	adds	r3, #4
 8018c76:	f1b9 0f00 	cmp.w	r9, #0
 8018c7a:	d020      	beq.n	8018cbe <__multiply+0x142>
 8018c7c:	6829      	ldr	r1, [r5, #0]
 8018c7e:	f104 0c14 	add.w	ip, r4, #20
 8018c82:	46ae      	mov	lr, r5
 8018c84:	f04f 0a00 	mov.w	sl, #0
 8018c88:	f8bc b000 	ldrh.w	fp, [ip]
 8018c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018c90:	fb09 220b 	mla	r2, r9, fp, r2
 8018c94:	4492      	add	sl, r2
 8018c96:	b289      	uxth	r1, r1
 8018c98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8018ca0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018ca4:	f8be 1000 	ldrh.w	r1, [lr]
 8018ca8:	0c12      	lsrs	r2, r2, #16
 8018caa:	fb09 1102 	mla	r1, r9, r2, r1
 8018cae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018cb2:	4567      	cmp	r7, ip
 8018cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018cb8:	d8e6      	bhi.n	8018c88 <__multiply+0x10c>
 8018cba:	9a01      	ldr	r2, [sp, #4]
 8018cbc:	50a9      	str	r1, [r5, r2]
 8018cbe:	3504      	adds	r5, #4
 8018cc0:	e79a      	b.n	8018bf8 <__multiply+0x7c>
 8018cc2:	3e01      	subs	r6, #1
 8018cc4:	e79c      	b.n	8018c00 <__multiply+0x84>
 8018cc6:	bf00      	nop
 8018cc8:	0801a590 	.word	0x0801a590
 8018ccc:	0801a61c 	.word	0x0801a61c

08018cd0 <__pow5mult>:
 8018cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cd4:	4615      	mov	r5, r2
 8018cd6:	f012 0203 	ands.w	r2, r2, #3
 8018cda:	4606      	mov	r6, r0
 8018cdc:	460f      	mov	r7, r1
 8018cde:	d007      	beq.n	8018cf0 <__pow5mult+0x20>
 8018ce0:	4c25      	ldr	r4, [pc, #148]	; (8018d78 <__pow5mult+0xa8>)
 8018ce2:	3a01      	subs	r2, #1
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018cea:	f7ff fe51 	bl	8018990 <__multadd>
 8018cee:	4607      	mov	r7, r0
 8018cf0:	10ad      	asrs	r5, r5, #2
 8018cf2:	d03d      	beq.n	8018d70 <__pow5mult+0xa0>
 8018cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018cf6:	b97c      	cbnz	r4, 8018d18 <__pow5mult+0x48>
 8018cf8:	2010      	movs	r0, #16
 8018cfa:	f7ff fdcd 	bl	8018898 <malloc>
 8018cfe:	4602      	mov	r2, r0
 8018d00:	6270      	str	r0, [r6, #36]	; 0x24
 8018d02:	b928      	cbnz	r0, 8018d10 <__pow5mult+0x40>
 8018d04:	4b1d      	ldr	r3, [pc, #116]	; (8018d7c <__pow5mult+0xac>)
 8018d06:	481e      	ldr	r0, [pc, #120]	; (8018d80 <__pow5mult+0xb0>)
 8018d08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018d0c:	f000 fd3a 	bl	8019784 <__assert_func>
 8018d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d14:	6004      	str	r4, [r0, #0]
 8018d16:	60c4      	str	r4, [r0, #12]
 8018d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018d20:	b94c      	cbnz	r4, 8018d36 <__pow5mult+0x66>
 8018d22:	f240 2171 	movw	r1, #625	; 0x271
 8018d26:	4630      	mov	r0, r6
 8018d28:	f7ff ff12 	bl	8018b50 <__i2b>
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d32:	4604      	mov	r4, r0
 8018d34:	6003      	str	r3, [r0, #0]
 8018d36:	f04f 0900 	mov.w	r9, #0
 8018d3a:	07eb      	lsls	r3, r5, #31
 8018d3c:	d50a      	bpl.n	8018d54 <__pow5mult+0x84>
 8018d3e:	4639      	mov	r1, r7
 8018d40:	4622      	mov	r2, r4
 8018d42:	4630      	mov	r0, r6
 8018d44:	f7ff ff1a 	bl	8018b7c <__multiply>
 8018d48:	4639      	mov	r1, r7
 8018d4a:	4680      	mov	r8, r0
 8018d4c:	4630      	mov	r0, r6
 8018d4e:	f7ff fdfd 	bl	801894c <_Bfree>
 8018d52:	4647      	mov	r7, r8
 8018d54:	106d      	asrs	r5, r5, #1
 8018d56:	d00b      	beq.n	8018d70 <__pow5mult+0xa0>
 8018d58:	6820      	ldr	r0, [r4, #0]
 8018d5a:	b938      	cbnz	r0, 8018d6c <__pow5mult+0x9c>
 8018d5c:	4622      	mov	r2, r4
 8018d5e:	4621      	mov	r1, r4
 8018d60:	4630      	mov	r0, r6
 8018d62:	f7ff ff0b 	bl	8018b7c <__multiply>
 8018d66:	6020      	str	r0, [r4, #0]
 8018d68:	f8c0 9000 	str.w	r9, [r0]
 8018d6c:	4604      	mov	r4, r0
 8018d6e:	e7e4      	b.n	8018d3a <__pow5mult+0x6a>
 8018d70:	4638      	mov	r0, r7
 8018d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d76:	bf00      	nop
 8018d78:	0801a768 	.word	0x0801a768
 8018d7c:	0801a51e 	.word	0x0801a51e
 8018d80:	0801a61c 	.word	0x0801a61c

08018d84 <__lshift>:
 8018d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d88:	460c      	mov	r4, r1
 8018d8a:	6849      	ldr	r1, [r1, #4]
 8018d8c:	6923      	ldr	r3, [r4, #16]
 8018d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018d92:	68a3      	ldr	r3, [r4, #8]
 8018d94:	4607      	mov	r7, r0
 8018d96:	4691      	mov	r9, r2
 8018d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d9c:	f108 0601 	add.w	r6, r8, #1
 8018da0:	42b3      	cmp	r3, r6
 8018da2:	db0b      	blt.n	8018dbc <__lshift+0x38>
 8018da4:	4638      	mov	r0, r7
 8018da6:	f7ff fd91 	bl	80188cc <_Balloc>
 8018daa:	4605      	mov	r5, r0
 8018dac:	b948      	cbnz	r0, 8018dc2 <__lshift+0x3e>
 8018dae:	4602      	mov	r2, r0
 8018db0:	4b2a      	ldr	r3, [pc, #168]	; (8018e5c <__lshift+0xd8>)
 8018db2:	482b      	ldr	r0, [pc, #172]	; (8018e60 <__lshift+0xdc>)
 8018db4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018db8:	f000 fce4 	bl	8019784 <__assert_func>
 8018dbc:	3101      	adds	r1, #1
 8018dbe:	005b      	lsls	r3, r3, #1
 8018dc0:	e7ee      	b.n	8018da0 <__lshift+0x1c>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f100 0114 	add.w	r1, r0, #20
 8018dc8:	f100 0210 	add.w	r2, r0, #16
 8018dcc:	4618      	mov	r0, r3
 8018dce:	4553      	cmp	r3, sl
 8018dd0:	db37      	blt.n	8018e42 <__lshift+0xbe>
 8018dd2:	6920      	ldr	r0, [r4, #16]
 8018dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018dd8:	f104 0314 	add.w	r3, r4, #20
 8018ddc:	f019 091f 	ands.w	r9, r9, #31
 8018de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018de8:	d02f      	beq.n	8018e4a <__lshift+0xc6>
 8018dea:	f1c9 0e20 	rsb	lr, r9, #32
 8018dee:	468a      	mov	sl, r1
 8018df0:	f04f 0c00 	mov.w	ip, #0
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	fa02 f209 	lsl.w	r2, r2, r9
 8018dfa:	ea42 020c 	orr.w	r2, r2, ip
 8018dfe:	f84a 2b04 	str.w	r2, [sl], #4
 8018e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e06:	4298      	cmp	r0, r3
 8018e08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018e0c:	d8f2      	bhi.n	8018df4 <__lshift+0x70>
 8018e0e:	1b03      	subs	r3, r0, r4
 8018e10:	3b15      	subs	r3, #21
 8018e12:	f023 0303 	bic.w	r3, r3, #3
 8018e16:	3304      	adds	r3, #4
 8018e18:	f104 0215 	add.w	r2, r4, #21
 8018e1c:	4290      	cmp	r0, r2
 8018e1e:	bf38      	it	cc
 8018e20:	2304      	movcc	r3, #4
 8018e22:	f841 c003 	str.w	ip, [r1, r3]
 8018e26:	f1bc 0f00 	cmp.w	ip, #0
 8018e2a:	d001      	beq.n	8018e30 <__lshift+0xac>
 8018e2c:	f108 0602 	add.w	r6, r8, #2
 8018e30:	3e01      	subs	r6, #1
 8018e32:	4638      	mov	r0, r7
 8018e34:	612e      	str	r6, [r5, #16]
 8018e36:	4621      	mov	r1, r4
 8018e38:	f7ff fd88 	bl	801894c <_Bfree>
 8018e3c:	4628      	mov	r0, r5
 8018e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8018e46:	3301      	adds	r3, #1
 8018e48:	e7c1      	b.n	8018dce <__lshift+0x4a>
 8018e4a:	3904      	subs	r1, #4
 8018e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e54:	4298      	cmp	r0, r3
 8018e56:	d8f9      	bhi.n	8018e4c <__lshift+0xc8>
 8018e58:	e7ea      	b.n	8018e30 <__lshift+0xac>
 8018e5a:	bf00      	nop
 8018e5c:	0801a590 	.word	0x0801a590
 8018e60:	0801a61c 	.word	0x0801a61c

08018e64 <__mcmp>:
 8018e64:	b530      	push	{r4, r5, lr}
 8018e66:	6902      	ldr	r2, [r0, #16]
 8018e68:	690c      	ldr	r4, [r1, #16]
 8018e6a:	1b12      	subs	r2, r2, r4
 8018e6c:	d10e      	bne.n	8018e8c <__mcmp+0x28>
 8018e6e:	f100 0314 	add.w	r3, r0, #20
 8018e72:	3114      	adds	r1, #20
 8018e74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018e7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018e80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018e84:	42a5      	cmp	r5, r4
 8018e86:	d003      	beq.n	8018e90 <__mcmp+0x2c>
 8018e88:	d305      	bcc.n	8018e96 <__mcmp+0x32>
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	4610      	mov	r0, r2
 8018e8e:	bd30      	pop	{r4, r5, pc}
 8018e90:	4283      	cmp	r3, r0
 8018e92:	d3f3      	bcc.n	8018e7c <__mcmp+0x18>
 8018e94:	e7fa      	b.n	8018e8c <__mcmp+0x28>
 8018e96:	f04f 32ff 	mov.w	r2, #4294967295
 8018e9a:	e7f7      	b.n	8018e8c <__mcmp+0x28>

08018e9c <__mdiff>:
 8018e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	460c      	mov	r4, r1
 8018ea2:	4606      	mov	r6, r0
 8018ea4:	4611      	mov	r1, r2
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	4690      	mov	r8, r2
 8018eaa:	f7ff ffdb 	bl	8018e64 <__mcmp>
 8018eae:	1e05      	subs	r5, r0, #0
 8018eb0:	d110      	bne.n	8018ed4 <__mdiff+0x38>
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	4630      	mov	r0, r6
 8018eb6:	f7ff fd09 	bl	80188cc <_Balloc>
 8018eba:	b930      	cbnz	r0, 8018eca <__mdiff+0x2e>
 8018ebc:	4b3a      	ldr	r3, [pc, #232]	; (8018fa8 <__mdiff+0x10c>)
 8018ebe:	4602      	mov	r2, r0
 8018ec0:	f240 2132 	movw	r1, #562	; 0x232
 8018ec4:	4839      	ldr	r0, [pc, #228]	; (8018fac <__mdiff+0x110>)
 8018ec6:	f000 fc5d 	bl	8019784 <__assert_func>
 8018eca:	2301      	movs	r3, #1
 8018ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ed4:	bfa4      	itt	ge
 8018ed6:	4643      	movge	r3, r8
 8018ed8:	46a0      	movge	r8, r4
 8018eda:	4630      	mov	r0, r6
 8018edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018ee0:	bfa6      	itte	ge
 8018ee2:	461c      	movge	r4, r3
 8018ee4:	2500      	movge	r5, #0
 8018ee6:	2501      	movlt	r5, #1
 8018ee8:	f7ff fcf0 	bl	80188cc <_Balloc>
 8018eec:	b920      	cbnz	r0, 8018ef8 <__mdiff+0x5c>
 8018eee:	4b2e      	ldr	r3, [pc, #184]	; (8018fa8 <__mdiff+0x10c>)
 8018ef0:	4602      	mov	r2, r0
 8018ef2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018ef6:	e7e5      	b.n	8018ec4 <__mdiff+0x28>
 8018ef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018efc:	6926      	ldr	r6, [r4, #16]
 8018efe:	60c5      	str	r5, [r0, #12]
 8018f00:	f104 0914 	add.w	r9, r4, #20
 8018f04:	f108 0514 	add.w	r5, r8, #20
 8018f08:	f100 0e14 	add.w	lr, r0, #20
 8018f0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018f14:	f108 0210 	add.w	r2, r8, #16
 8018f18:	46f2      	mov	sl, lr
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018f24:	fa1f f883 	uxth.w	r8, r3
 8018f28:	fa11 f18b 	uxtah	r1, r1, fp
 8018f2c:	0c1b      	lsrs	r3, r3, #16
 8018f2e:	eba1 0808 	sub.w	r8, r1, r8
 8018f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018f3a:	fa1f f888 	uxth.w	r8, r8
 8018f3e:	1419      	asrs	r1, r3, #16
 8018f40:	454e      	cmp	r6, r9
 8018f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018f46:	f84a 3b04 	str.w	r3, [sl], #4
 8018f4a:	d8e7      	bhi.n	8018f1c <__mdiff+0x80>
 8018f4c:	1b33      	subs	r3, r6, r4
 8018f4e:	3b15      	subs	r3, #21
 8018f50:	f023 0303 	bic.w	r3, r3, #3
 8018f54:	3304      	adds	r3, #4
 8018f56:	3415      	adds	r4, #21
 8018f58:	42a6      	cmp	r6, r4
 8018f5a:	bf38      	it	cc
 8018f5c:	2304      	movcc	r3, #4
 8018f5e:	441d      	add	r5, r3
 8018f60:	4473      	add	r3, lr
 8018f62:	469e      	mov	lr, r3
 8018f64:	462e      	mov	r6, r5
 8018f66:	4566      	cmp	r6, ip
 8018f68:	d30e      	bcc.n	8018f88 <__mdiff+0xec>
 8018f6a:	f10c 0203 	add.w	r2, ip, #3
 8018f6e:	1b52      	subs	r2, r2, r5
 8018f70:	f022 0203 	bic.w	r2, r2, #3
 8018f74:	3d03      	subs	r5, #3
 8018f76:	45ac      	cmp	ip, r5
 8018f78:	bf38      	it	cc
 8018f7a:	2200      	movcc	r2, #0
 8018f7c:	441a      	add	r2, r3
 8018f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018f82:	b17b      	cbz	r3, 8018fa4 <__mdiff+0x108>
 8018f84:	6107      	str	r7, [r0, #16]
 8018f86:	e7a3      	b.n	8018ed0 <__mdiff+0x34>
 8018f88:	f856 8b04 	ldr.w	r8, [r6], #4
 8018f8c:	fa11 f288 	uxtah	r2, r1, r8
 8018f90:	1414      	asrs	r4, r2, #16
 8018f92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018f96:	b292      	uxth	r2, r2
 8018f98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018f9c:	f84e 2b04 	str.w	r2, [lr], #4
 8018fa0:	1421      	asrs	r1, r4, #16
 8018fa2:	e7e0      	b.n	8018f66 <__mdiff+0xca>
 8018fa4:	3f01      	subs	r7, #1
 8018fa6:	e7ea      	b.n	8018f7e <__mdiff+0xe2>
 8018fa8:	0801a590 	.word	0x0801a590
 8018fac:	0801a61c 	.word	0x0801a61c

08018fb0 <__ulp>:
 8018fb0:	b082      	sub	sp, #8
 8018fb2:	ed8d 0b00 	vstr	d0, [sp]
 8018fb6:	9b01      	ldr	r3, [sp, #4]
 8018fb8:	4912      	ldr	r1, [pc, #72]	; (8019004 <__ulp+0x54>)
 8018fba:	4019      	ands	r1, r3
 8018fbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018fc0:	2900      	cmp	r1, #0
 8018fc2:	dd05      	ble.n	8018fd0 <__ulp+0x20>
 8018fc4:	2200      	movs	r2, #0
 8018fc6:	460b      	mov	r3, r1
 8018fc8:	ec43 2b10 	vmov	d0, r2, r3
 8018fcc:	b002      	add	sp, #8
 8018fce:	4770      	bx	lr
 8018fd0:	4249      	negs	r1, r1
 8018fd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018fd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018fda:	f04f 0200 	mov.w	r2, #0
 8018fde:	f04f 0300 	mov.w	r3, #0
 8018fe2:	da04      	bge.n	8018fee <__ulp+0x3e>
 8018fe4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018fe8:	fa41 f300 	asr.w	r3, r1, r0
 8018fec:	e7ec      	b.n	8018fc8 <__ulp+0x18>
 8018fee:	f1a0 0114 	sub.w	r1, r0, #20
 8018ff2:	291e      	cmp	r1, #30
 8018ff4:	bfda      	itte	le
 8018ff6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018ffa:	fa20 f101 	lsrle.w	r1, r0, r1
 8018ffe:	2101      	movgt	r1, #1
 8019000:	460a      	mov	r2, r1
 8019002:	e7e1      	b.n	8018fc8 <__ulp+0x18>
 8019004:	7ff00000 	.word	0x7ff00000

08019008 <__b2d>:
 8019008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801900a:	6905      	ldr	r5, [r0, #16]
 801900c:	f100 0714 	add.w	r7, r0, #20
 8019010:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019014:	1f2e      	subs	r6, r5, #4
 8019016:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801901a:	4620      	mov	r0, r4
 801901c:	f7ff fd48 	bl	8018ab0 <__hi0bits>
 8019020:	f1c0 0320 	rsb	r3, r0, #32
 8019024:	280a      	cmp	r0, #10
 8019026:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80190a4 <__b2d+0x9c>
 801902a:	600b      	str	r3, [r1, #0]
 801902c:	dc14      	bgt.n	8019058 <__b2d+0x50>
 801902e:	f1c0 0e0b 	rsb	lr, r0, #11
 8019032:	fa24 f10e 	lsr.w	r1, r4, lr
 8019036:	42b7      	cmp	r7, r6
 8019038:	ea41 030c 	orr.w	r3, r1, ip
 801903c:	bf34      	ite	cc
 801903e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019042:	2100      	movcs	r1, #0
 8019044:	3015      	adds	r0, #21
 8019046:	fa04 f000 	lsl.w	r0, r4, r0
 801904a:	fa21 f10e 	lsr.w	r1, r1, lr
 801904e:	ea40 0201 	orr.w	r2, r0, r1
 8019052:	ec43 2b10 	vmov	d0, r2, r3
 8019056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019058:	42b7      	cmp	r7, r6
 801905a:	bf3a      	itte	cc
 801905c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019060:	f1a5 0608 	subcc.w	r6, r5, #8
 8019064:	2100      	movcs	r1, #0
 8019066:	380b      	subs	r0, #11
 8019068:	d017      	beq.n	801909a <__b2d+0x92>
 801906a:	f1c0 0c20 	rsb	ip, r0, #32
 801906e:	fa04 f500 	lsl.w	r5, r4, r0
 8019072:	42be      	cmp	r6, r7
 8019074:	fa21 f40c 	lsr.w	r4, r1, ip
 8019078:	ea45 0504 	orr.w	r5, r5, r4
 801907c:	bf8c      	ite	hi
 801907e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019082:	2400      	movls	r4, #0
 8019084:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019088:	fa01 f000 	lsl.w	r0, r1, r0
 801908c:	fa24 f40c 	lsr.w	r4, r4, ip
 8019090:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019094:	ea40 0204 	orr.w	r2, r0, r4
 8019098:	e7db      	b.n	8019052 <__b2d+0x4a>
 801909a:	ea44 030c 	orr.w	r3, r4, ip
 801909e:	460a      	mov	r2, r1
 80190a0:	e7d7      	b.n	8019052 <__b2d+0x4a>
 80190a2:	bf00      	nop
 80190a4:	3ff00000 	.word	0x3ff00000

080190a8 <__d2b>:
 80190a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80190ac:	4689      	mov	r9, r1
 80190ae:	2101      	movs	r1, #1
 80190b0:	ec57 6b10 	vmov	r6, r7, d0
 80190b4:	4690      	mov	r8, r2
 80190b6:	f7ff fc09 	bl	80188cc <_Balloc>
 80190ba:	4604      	mov	r4, r0
 80190bc:	b930      	cbnz	r0, 80190cc <__d2b+0x24>
 80190be:	4602      	mov	r2, r0
 80190c0:	4b25      	ldr	r3, [pc, #148]	; (8019158 <__d2b+0xb0>)
 80190c2:	4826      	ldr	r0, [pc, #152]	; (801915c <__d2b+0xb4>)
 80190c4:	f240 310a 	movw	r1, #778	; 0x30a
 80190c8:	f000 fb5c 	bl	8019784 <__assert_func>
 80190cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80190d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80190d4:	bb35      	cbnz	r5, 8019124 <__d2b+0x7c>
 80190d6:	2e00      	cmp	r6, #0
 80190d8:	9301      	str	r3, [sp, #4]
 80190da:	d028      	beq.n	801912e <__d2b+0x86>
 80190dc:	4668      	mov	r0, sp
 80190de:	9600      	str	r6, [sp, #0]
 80190e0:	f7ff fd06 	bl	8018af0 <__lo0bits>
 80190e4:	9900      	ldr	r1, [sp, #0]
 80190e6:	b300      	cbz	r0, 801912a <__d2b+0x82>
 80190e8:	9a01      	ldr	r2, [sp, #4]
 80190ea:	f1c0 0320 	rsb	r3, r0, #32
 80190ee:	fa02 f303 	lsl.w	r3, r2, r3
 80190f2:	430b      	orrs	r3, r1
 80190f4:	40c2      	lsrs	r2, r0
 80190f6:	6163      	str	r3, [r4, #20]
 80190f8:	9201      	str	r2, [sp, #4]
 80190fa:	9b01      	ldr	r3, [sp, #4]
 80190fc:	61a3      	str	r3, [r4, #24]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	bf14      	ite	ne
 8019102:	2202      	movne	r2, #2
 8019104:	2201      	moveq	r2, #1
 8019106:	6122      	str	r2, [r4, #16]
 8019108:	b1d5      	cbz	r5, 8019140 <__d2b+0x98>
 801910a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801910e:	4405      	add	r5, r0
 8019110:	f8c9 5000 	str.w	r5, [r9]
 8019114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019118:	f8c8 0000 	str.w	r0, [r8]
 801911c:	4620      	mov	r0, r4
 801911e:	b003      	add	sp, #12
 8019120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019128:	e7d5      	b.n	80190d6 <__d2b+0x2e>
 801912a:	6161      	str	r1, [r4, #20]
 801912c:	e7e5      	b.n	80190fa <__d2b+0x52>
 801912e:	a801      	add	r0, sp, #4
 8019130:	f7ff fcde 	bl	8018af0 <__lo0bits>
 8019134:	9b01      	ldr	r3, [sp, #4]
 8019136:	6163      	str	r3, [r4, #20]
 8019138:	2201      	movs	r2, #1
 801913a:	6122      	str	r2, [r4, #16]
 801913c:	3020      	adds	r0, #32
 801913e:	e7e3      	b.n	8019108 <__d2b+0x60>
 8019140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019148:	f8c9 0000 	str.w	r0, [r9]
 801914c:	6918      	ldr	r0, [r3, #16]
 801914e:	f7ff fcaf 	bl	8018ab0 <__hi0bits>
 8019152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019156:	e7df      	b.n	8019118 <__d2b+0x70>
 8019158:	0801a590 	.word	0x0801a590
 801915c:	0801a61c 	.word	0x0801a61c

08019160 <__ratio>:
 8019160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019164:	4688      	mov	r8, r1
 8019166:	4669      	mov	r1, sp
 8019168:	4681      	mov	r9, r0
 801916a:	f7ff ff4d 	bl	8019008 <__b2d>
 801916e:	a901      	add	r1, sp, #4
 8019170:	4640      	mov	r0, r8
 8019172:	ec55 4b10 	vmov	r4, r5, d0
 8019176:	ee10 aa10 	vmov	sl, s0
 801917a:	f7ff ff45 	bl	8019008 <__b2d>
 801917e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019182:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019186:	1a59      	subs	r1, r3, r1
 8019188:	e9dd 2300 	ldrd	r2, r3, [sp]
 801918c:	1ad3      	subs	r3, r2, r3
 801918e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019192:	ec57 6b10 	vmov	r6, r7, d0
 8019196:	2b00      	cmp	r3, #0
 8019198:	bfd6      	itet	le
 801919a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801919e:	462a      	movgt	r2, r5
 80191a0:	463a      	movle	r2, r7
 80191a2:	46ab      	mov	fp, r5
 80191a4:	bfd6      	itet	le
 80191a6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80191aa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80191ae:	ee00 3a90 	vmovle	s1, r3
 80191b2:	ec4b ab17 	vmov	d7, sl, fp
 80191b6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80191ba:	b003      	add	sp, #12
 80191bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191c0 <__copybits>:
 80191c0:	3901      	subs	r1, #1
 80191c2:	b570      	push	{r4, r5, r6, lr}
 80191c4:	1149      	asrs	r1, r1, #5
 80191c6:	6914      	ldr	r4, [r2, #16]
 80191c8:	3101      	adds	r1, #1
 80191ca:	f102 0314 	add.w	r3, r2, #20
 80191ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80191d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80191d6:	1f05      	subs	r5, r0, #4
 80191d8:	42a3      	cmp	r3, r4
 80191da:	d30c      	bcc.n	80191f6 <__copybits+0x36>
 80191dc:	1aa3      	subs	r3, r4, r2
 80191de:	3b11      	subs	r3, #17
 80191e0:	f023 0303 	bic.w	r3, r3, #3
 80191e4:	3211      	adds	r2, #17
 80191e6:	42a2      	cmp	r2, r4
 80191e8:	bf88      	it	hi
 80191ea:	2300      	movhi	r3, #0
 80191ec:	4418      	add	r0, r3
 80191ee:	2300      	movs	r3, #0
 80191f0:	4288      	cmp	r0, r1
 80191f2:	d305      	bcc.n	8019200 <__copybits+0x40>
 80191f4:	bd70      	pop	{r4, r5, r6, pc}
 80191f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80191fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80191fe:	e7eb      	b.n	80191d8 <__copybits+0x18>
 8019200:	f840 3b04 	str.w	r3, [r0], #4
 8019204:	e7f4      	b.n	80191f0 <__copybits+0x30>

08019206 <__any_on>:
 8019206:	f100 0214 	add.w	r2, r0, #20
 801920a:	6900      	ldr	r0, [r0, #16]
 801920c:	114b      	asrs	r3, r1, #5
 801920e:	4298      	cmp	r0, r3
 8019210:	b510      	push	{r4, lr}
 8019212:	db11      	blt.n	8019238 <__any_on+0x32>
 8019214:	dd0a      	ble.n	801922c <__any_on+0x26>
 8019216:	f011 011f 	ands.w	r1, r1, #31
 801921a:	d007      	beq.n	801922c <__any_on+0x26>
 801921c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019220:	fa24 f001 	lsr.w	r0, r4, r1
 8019224:	fa00 f101 	lsl.w	r1, r0, r1
 8019228:	428c      	cmp	r4, r1
 801922a:	d10b      	bne.n	8019244 <__any_on+0x3e>
 801922c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019230:	4293      	cmp	r3, r2
 8019232:	d803      	bhi.n	801923c <__any_on+0x36>
 8019234:	2000      	movs	r0, #0
 8019236:	bd10      	pop	{r4, pc}
 8019238:	4603      	mov	r3, r0
 801923a:	e7f7      	b.n	801922c <__any_on+0x26>
 801923c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019240:	2900      	cmp	r1, #0
 8019242:	d0f5      	beq.n	8019230 <__any_on+0x2a>
 8019244:	2001      	movs	r0, #1
 8019246:	e7f6      	b.n	8019236 <__any_on+0x30>

08019248 <_calloc_r>:
 8019248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801924a:	fba1 2402 	umull	r2, r4, r1, r2
 801924e:	b94c      	cbnz	r4, 8019264 <_calloc_r+0x1c>
 8019250:	4611      	mov	r1, r2
 8019252:	9201      	str	r2, [sp, #4]
 8019254:	f000 f87a 	bl	801934c <_malloc_r>
 8019258:	9a01      	ldr	r2, [sp, #4]
 801925a:	4605      	mov	r5, r0
 801925c:	b930      	cbnz	r0, 801926c <_calloc_r+0x24>
 801925e:	4628      	mov	r0, r5
 8019260:	b003      	add	sp, #12
 8019262:	bd30      	pop	{r4, r5, pc}
 8019264:	220c      	movs	r2, #12
 8019266:	6002      	str	r2, [r0, #0]
 8019268:	2500      	movs	r5, #0
 801926a:	e7f8      	b.n	801925e <_calloc_r+0x16>
 801926c:	4621      	mov	r1, r4
 801926e:	f7fc fc5b 	bl	8015b28 <memset>
 8019272:	e7f4      	b.n	801925e <_calloc_r+0x16>

08019274 <_free_r>:
 8019274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019276:	2900      	cmp	r1, #0
 8019278:	d044      	beq.n	8019304 <_free_r+0x90>
 801927a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801927e:	9001      	str	r0, [sp, #4]
 8019280:	2b00      	cmp	r3, #0
 8019282:	f1a1 0404 	sub.w	r4, r1, #4
 8019286:	bfb8      	it	lt
 8019288:	18e4      	addlt	r4, r4, r3
 801928a:	f000 fc7f 	bl	8019b8c <__malloc_lock>
 801928e:	4a1e      	ldr	r2, [pc, #120]	; (8019308 <_free_r+0x94>)
 8019290:	9801      	ldr	r0, [sp, #4]
 8019292:	6813      	ldr	r3, [r2, #0]
 8019294:	b933      	cbnz	r3, 80192a4 <_free_r+0x30>
 8019296:	6063      	str	r3, [r4, #4]
 8019298:	6014      	str	r4, [r2, #0]
 801929a:	b003      	add	sp, #12
 801929c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80192a0:	f000 bc7a 	b.w	8019b98 <__malloc_unlock>
 80192a4:	42a3      	cmp	r3, r4
 80192a6:	d908      	bls.n	80192ba <_free_r+0x46>
 80192a8:	6825      	ldr	r5, [r4, #0]
 80192aa:	1961      	adds	r1, r4, r5
 80192ac:	428b      	cmp	r3, r1
 80192ae:	bf01      	itttt	eq
 80192b0:	6819      	ldreq	r1, [r3, #0]
 80192b2:	685b      	ldreq	r3, [r3, #4]
 80192b4:	1949      	addeq	r1, r1, r5
 80192b6:	6021      	streq	r1, [r4, #0]
 80192b8:	e7ed      	b.n	8019296 <_free_r+0x22>
 80192ba:	461a      	mov	r2, r3
 80192bc:	685b      	ldr	r3, [r3, #4]
 80192be:	b10b      	cbz	r3, 80192c4 <_free_r+0x50>
 80192c0:	42a3      	cmp	r3, r4
 80192c2:	d9fa      	bls.n	80192ba <_free_r+0x46>
 80192c4:	6811      	ldr	r1, [r2, #0]
 80192c6:	1855      	adds	r5, r2, r1
 80192c8:	42a5      	cmp	r5, r4
 80192ca:	d10b      	bne.n	80192e4 <_free_r+0x70>
 80192cc:	6824      	ldr	r4, [r4, #0]
 80192ce:	4421      	add	r1, r4
 80192d0:	1854      	adds	r4, r2, r1
 80192d2:	42a3      	cmp	r3, r4
 80192d4:	6011      	str	r1, [r2, #0]
 80192d6:	d1e0      	bne.n	801929a <_free_r+0x26>
 80192d8:	681c      	ldr	r4, [r3, #0]
 80192da:	685b      	ldr	r3, [r3, #4]
 80192dc:	6053      	str	r3, [r2, #4]
 80192de:	4421      	add	r1, r4
 80192e0:	6011      	str	r1, [r2, #0]
 80192e2:	e7da      	b.n	801929a <_free_r+0x26>
 80192e4:	d902      	bls.n	80192ec <_free_r+0x78>
 80192e6:	230c      	movs	r3, #12
 80192e8:	6003      	str	r3, [r0, #0]
 80192ea:	e7d6      	b.n	801929a <_free_r+0x26>
 80192ec:	6825      	ldr	r5, [r4, #0]
 80192ee:	1961      	adds	r1, r4, r5
 80192f0:	428b      	cmp	r3, r1
 80192f2:	bf04      	itt	eq
 80192f4:	6819      	ldreq	r1, [r3, #0]
 80192f6:	685b      	ldreq	r3, [r3, #4]
 80192f8:	6063      	str	r3, [r4, #4]
 80192fa:	bf04      	itt	eq
 80192fc:	1949      	addeq	r1, r1, r5
 80192fe:	6021      	streq	r1, [r4, #0]
 8019300:	6054      	str	r4, [r2, #4]
 8019302:	e7ca      	b.n	801929a <_free_r+0x26>
 8019304:	b003      	add	sp, #12
 8019306:	bd30      	pop	{r4, r5, pc}
 8019308:	24003200 	.word	0x24003200

0801930c <sbrk_aligned>:
 801930c:	b570      	push	{r4, r5, r6, lr}
 801930e:	4e0e      	ldr	r6, [pc, #56]	; (8019348 <sbrk_aligned+0x3c>)
 8019310:	460c      	mov	r4, r1
 8019312:	6831      	ldr	r1, [r6, #0]
 8019314:	4605      	mov	r5, r0
 8019316:	b911      	cbnz	r1, 801931e <sbrk_aligned+0x12>
 8019318:	f000 fa02 	bl	8019720 <_sbrk_r>
 801931c:	6030      	str	r0, [r6, #0]
 801931e:	4621      	mov	r1, r4
 8019320:	4628      	mov	r0, r5
 8019322:	f000 f9fd 	bl	8019720 <_sbrk_r>
 8019326:	1c43      	adds	r3, r0, #1
 8019328:	d00a      	beq.n	8019340 <sbrk_aligned+0x34>
 801932a:	1cc4      	adds	r4, r0, #3
 801932c:	f024 0403 	bic.w	r4, r4, #3
 8019330:	42a0      	cmp	r0, r4
 8019332:	d007      	beq.n	8019344 <sbrk_aligned+0x38>
 8019334:	1a21      	subs	r1, r4, r0
 8019336:	4628      	mov	r0, r5
 8019338:	f000 f9f2 	bl	8019720 <_sbrk_r>
 801933c:	3001      	adds	r0, #1
 801933e:	d101      	bne.n	8019344 <sbrk_aligned+0x38>
 8019340:	f04f 34ff 	mov.w	r4, #4294967295
 8019344:	4620      	mov	r0, r4
 8019346:	bd70      	pop	{r4, r5, r6, pc}
 8019348:	24003204 	.word	0x24003204

0801934c <_malloc_r>:
 801934c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019350:	1ccd      	adds	r5, r1, #3
 8019352:	f025 0503 	bic.w	r5, r5, #3
 8019356:	3508      	adds	r5, #8
 8019358:	2d0c      	cmp	r5, #12
 801935a:	bf38      	it	cc
 801935c:	250c      	movcc	r5, #12
 801935e:	2d00      	cmp	r5, #0
 8019360:	4607      	mov	r7, r0
 8019362:	db01      	blt.n	8019368 <_malloc_r+0x1c>
 8019364:	42a9      	cmp	r1, r5
 8019366:	d905      	bls.n	8019374 <_malloc_r+0x28>
 8019368:	230c      	movs	r3, #12
 801936a:	603b      	str	r3, [r7, #0]
 801936c:	2600      	movs	r6, #0
 801936e:	4630      	mov	r0, r6
 8019370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019374:	4e2e      	ldr	r6, [pc, #184]	; (8019430 <_malloc_r+0xe4>)
 8019376:	f000 fc09 	bl	8019b8c <__malloc_lock>
 801937a:	6833      	ldr	r3, [r6, #0]
 801937c:	461c      	mov	r4, r3
 801937e:	bb34      	cbnz	r4, 80193ce <_malloc_r+0x82>
 8019380:	4629      	mov	r1, r5
 8019382:	4638      	mov	r0, r7
 8019384:	f7ff ffc2 	bl	801930c <sbrk_aligned>
 8019388:	1c43      	adds	r3, r0, #1
 801938a:	4604      	mov	r4, r0
 801938c:	d14d      	bne.n	801942a <_malloc_r+0xde>
 801938e:	6834      	ldr	r4, [r6, #0]
 8019390:	4626      	mov	r6, r4
 8019392:	2e00      	cmp	r6, #0
 8019394:	d140      	bne.n	8019418 <_malloc_r+0xcc>
 8019396:	6823      	ldr	r3, [r4, #0]
 8019398:	4631      	mov	r1, r6
 801939a:	4638      	mov	r0, r7
 801939c:	eb04 0803 	add.w	r8, r4, r3
 80193a0:	f000 f9be 	bl	8019720 <_sbrk_r>
 80193a4:	4580      	cmp	r8, r0
 80193a6:	d13a      	bne.n	801941e <_malloc_r+0xd2>
 80193a8:	6821      	ldr	r1, [r4, #0]
 80193aa:	3503      	adds	r5, #3
 80193ac:	1a6d      	subs	r5, r5, r1
 80193ae:	f025 0503 	bic.w	r5, r5, #3
 80193b2:	3508      	adds	r5, #8
 80193b4:	2d0c      	cmp	r5, #12
 80193b6:	bf38      	it	cc
 80193b8:	250c      	movcc	r5, #12
 80193ba:	4629      	mov	r1, r5
 80193bc:	4638      	mov	r0, r7
 80193be:	f7ff ffa5 	bl	801930c <sbrk_aligned>
 80193c2:	3001      	adds	r0, #1
 80193c4:	d02b      	beq.n	801941e <_malloc_r+0xd2>
 80193c6:	6823      	ldr	r3, [r4, #0]
 80193c8:	442b      	add	r3, r5
 80193ca:	6023      	str	r3, [r4, #0]
 80193cc:	e00e      	b.n	80193ec <_malloc_r+0xa0>
 80193ce:	6822      	ldr	r2, [r4, #0]
 80193d0:	1b52      	subs	r2, r2, r5
 80193d2:	d41e      	bmi.n	8019412 <_malloc_r+0xc6>
 80193d4:	2a0b      	cmp	r2, #11
 80193d6:	d916      	bls.n	8019406 <_malloc_r+0xba>
 80193d8:	1961      	adds	r1, r4, r5
 80193da:	42a3      	cmp	r3, r4
 80193dc:	6025      	str	r5, [r4, #0]
 80193de:	bf18      	it	ne
 80193e0:	6059      	strne	r1, [r3, #4]
 80193e2:	6863      	ldr	r3, [r4, #4]
 80193e4:	bf08      	it	eq
 80193e6:	6031      	streq	r1, [r6, #0]
 80193e8:	5162      	str	r2, [r4, r5]
 80193ea:	604b      	str	r3, [r1, #4]
 80193ec:	4638      	mov	r0, r7
 80193ee:	f104 060b 	add.w	r6, r4, #11
 80193f2:	f000 fbd1 	bl	8019b98 <__malloc_unlock>
 80193f6:	f026 0607 	bic.w	r6, r6, #7
 80193fa:	1d23      	adds	r3, r4, #4
 80193fc:	1af2      	subs	r2, r6, r3
 80193fe:	d0b6      	beq.n	801936e <_malloc_r+0x22>
 8019400:	1b9b      	subs	r3, r3, r6
 8019402:	50a3      	str	r3, [r4, r2]
 8019404:	e7b3      	b.n	801936e <_malloc_r+0x22>
 8019406:	6862      	ldr	r2, [r4, #4]
 8019408:	42a3      	cmp	r3, r4
 801940a:	bf0c      	ite	eq
 801940c:	6032      	streq	r2, [r6, #0]
 801940e:	605a      	strne	r2, [r3, #4]
 8019410:	e7ec      	b.n	80193ec <_malloc_r+0xa0>
 8019412:	4623      	mov	r3, r4
 8019414:	6864      	ldr	r4, [r4, #4]
 8019416:	e7b2      	b.n	801937e <_malloc_r+0x32>
 8019418:	4634      	mov	r4, r6
 801941a:	6876      	ldr	r6, [r6, #4]
 801941c:	e7b9      	b.n	8019392 <_malloc_r+0x46>
 801941e:	230c      	movs	r3, #12
 8019420:	603b      	str	r3, [r7, #0]
 8019422:	4638      	mov	r0, r7
 8019424:	f000 fbb8 	bl	8019b98 <__malloc_unlock>
 8019428:	e7a1      	b.n	801936e <_malloc_r+0x22>
 801942a:	6025      	str	r5, [r4, #0]
 801942c:	e7de      	b.n	80193ec <_malloc_r+0xa0>
 801942e:	bf00      	nop
 8019430:	24003200 	.word	0x24003200

08019434 <__ssputs_r>:
 8019434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019438:	688e      	ldr	r6, [r1, #8]
 801943a:	429e      	cmp	r6, r3
 801943c:	4682      	mov	sl, r0
 801943e:	460c      	mov	r4, r1
 8019440:	4690      	mov	r8, r2
 8019442:	461f      	mov	r7, r3
 8019444:	d838      	bhi.n	80194b8 <__ssputs_r+0x84>
 8019446:	898a      	ldrh	r2, [r1, #12]
 8019448:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801944c:	d032      	beq.n	80194b4 <__ssputs_r+0x80>
 801944e:	6825      	ldr	r5, [r4, #0]
 8019450:	6909      	ldr	r1, [r1, #16]
 8019452:	eba5 0901 	sub.w	r9, r5, r1
 8019456:	6965      	ldr	r5, [r4, #20]
 8019458:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801945c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019460:	3301      	adds	r3, #1
 8019462:	444b      	add	r3, r9
 8019464:	106d      	asrs	r5, r5, #1
 8019466:	429d      	cmp	r5, r3
 8019468:	bf38      	it	cc
 801946a:	461d      	movcc	r5, r3
 801946c:	0553      	lsls	r3, r2, #21
 801946e:	d531      	bpl.n	80194d4 <__ssputs_r+0xa0>
 8019470:	4629      	mov	r1, r5
 8019472:	f7ff ff6b 	bl	801934c <_malloc_r>
 8019476:	4606      	mov	r6, r0
 8019478:	b950      	cbnz	r0, 8019490 <__ssputs_r+0x5c>
 801947a:	230c      	movs	r3, #12
 801947c:	f8ca 3000 	str.w	r3, [sl]
 8019480:	89a3      	ldrh	r3, [r4, #12]
 8019482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019486:	81a3      	strh	r3, [r4, #12]
 8019488:	f04f 30ff 	mov.w	r0, #4294967295
 801948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019490:	6921      	ldr	r1, [r4, #16]
 8019492:	464a      	mov	r2, r9
 8019494:	f7fc fb3a 	bl	8015b0c <memcpy>
 8019498:	89a3      	ldrh	r3, [r4, #12]
 801949a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801949e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194a2:	81a3      	strh	r3, [r4, #12]
 80194a4:	6126      	str	r6, [r4, #16]
 80194a6:	6165      	str	r5, [r4, #20]
 80194a8:	444e      	add	r6, r9
 80194aa:	eba5 0509 	sub.w	r5, r5, r9
 80194ae:	6026      	str	r6, [r4, #0]
 80194b0:	60a5      	str	r5, [r4, #8]
 80194b2:	463e      	mov	r6, r7
 80194b4:	42be      	cmp	r6, r7
 80194b6:	d900      	bls.n	80194ba <__ssputs_r+0x86>
 80194b8:	463e      	mov	r6, r7
 80194ba:	6820      	ldr	r0, [r4, #0]
 80194bc:	4632      	mov	r2, r6
 80194be:	4641      	mov	r1, r8
 80194c0:	f000 fb4a 	bl	8019b58 <memmove>
 80194c4:	68a3      	ldr	r3, [r4, #8]
 80194c6:	1b9b      	subs	r3, r3, r6
 80194c8:	60a3      	str	r3, [r4, #8]
 80194ca:	6823      	ldr	r3, [r4, #0]
 80194cc:	4433      	add	r3, r6
 80194ce:	6023      	str	r3, [r4, #0]
 80194d0:	2000      	movs	r0, #0
 80194d2:	e7db      	b.n	801948c <__ssputs_r+0x58>
 80194d4:	462a      	mov	r2, r5
 80194d6:	f000 fb65 	bl	8019ba4 <_realloc_r>
 80194da:	4606      	mov	r6, r0
 80194dc:	2800      	cmp	r0, #0
 80194de:	d1e1      	bne.n	80194a4 <__ssputs_r+0x70>
 80194e0:	6921      	ldr	r1, [r4, #16]
 80194e2:	4650      	mov	r0, sl
 80194e4:	f7ff fec6 	bl	8019274 <_free_r>
 80194e8:	e7c7      	b.n	801947a <__ssputs_r+0x46>
	...

080194ec <_svfiprintf_r>:
 80194ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f0:	4698      	mov	r8, r3
 80194f2:	898b      	ldrh	r3, [r1, #12]
 80194f4:	061b      	lsls	r3, r3, #24
 80194f6:	b09d      	sub	sp, #116	; 0x74
 80194f8:	4607      	mov	r7, r0
 80194fa:	460d      	mov	r5, r1
 80194fc:	4614      	mov	r4, r2
 80194fe:	d50e      	bpl.n	801951e <_svfiprintf_r+0x32>
 8019500:	690b      	ldr	r3, [r1, #16]
 8019502:	b963      	cbnz	r3, 801951e <_svfiprintf_r+0x32>
 8019504:	2140      	movs	r1, #64	; 0x40
 8019506:	f7ff ff21 	bl	801934c <_malloc_r>
 801950a:	6028      	str	r0, [r5, #0]
 801950c:	6128      	str	r0, [r5, #16]
 801950e:	b920      	cbnz	r0, 801951a <_svfiprintf_r+0x2e>
 8019510:	230c      	movs	r3, #12
 8019512:	603b      	str	r3, [r7, #0]
 8019514:	f04f 30ff 	mov.w	r0, #4294967295
 8019518:	e0d1      	b.n	80196be <_svfiprintf_r+0x1d2>
 801951a:	2340      	movs	r3, #64	; 0x40
 801951c:	616b      	str	r3, [r5, #20]
 801951e:	2300      	movs	r3, #0
 8019520:	9309      	str	r3, [sp, #36]	; 0x24
 8019522:	2320      	movs	r3, #32
 8019524:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019528:	f8cd 800c 	str.w	r8, [sp, #12]
 801952c:	2330      	movs	r3, #48	; 0x30
 801952e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80196d8 <_svfiprintf_r+0x1ec>
 8019532:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019536:	f04f 0901 	mov.w	r9, #1
 801953a:	4623      	mov	r3, r4
 801953c:	469a      	mov	sl, r3
 801953e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019542:	b10a      	cbz	r2, 8019548 <_svfiprintf_r+0x5c>
 8019544:	2a25      	cmp	r2, #37	; 0x25
 8019546:	d1f9      	bne.n	801953c <_svfiprintf_r+0x50>
 8019548:	ebba 0b04 	subs.w	fp, sl, r4
 801954c:	d00b      	beq.n	8019566 <_svfiprintf_r+0x7a>
 801954e:	465b      	mov	r3, fp
 8019550:	4622      	mov	r2, r4
 8019552:	4629      	mov	r1, r5
 8019554:	4638      	mov	r0, r7
 8019556:	f7ff ff6d 	bl	8019434 <__ssputs_r>
 801955a:	3001      	adds	r0, #1
 801955c:	f000 80aa 	beq.w	80196b4 <_svfiprintf_r+0x1c8>
 8019560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019562:	445a      	add	r2, fp
 8019564:	9209      	str	r2, [sp, #36]	; 0x24
 8019566:	f89a 3000 	ldrb.w	r3, [sl]
 801956a:	2b00      	cmp	r3, #0
 801956c:	f000 80a2 	beq.w	80196b4 <_svfiprintf_r+0x1c8>
 8019570:	2300      	movs	r3, #0
 8019572:	f04f 32ff 	mov.w	r2, #4294967295
 8019576:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801957a:	f10a 0a01 	add.w	sl, sl, #1
 801957e:	9304      	str	r3, [sp, #16]
 8019580:	9307      	str	r3, [sp, #28]
 8019582:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019586:	931a      	str	r3, [sp, #104]	; 0x68
 8019588:	4654      	mov	r4, sl
 801958a:	2205      	movs	r2, #5
 801958c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019590:	4851      	ldr	r0, [pc, #324]	; (80196d8 <_svfiprintf_r+0x1ec>)
 8019592:	f7e6 fec5 	bl	8000320 <memchr>
 8019596:	9a04      	ldr	r2, [sp, #16]
 8019598:	b9d8      	cbnz	r0, 80195d2 <_svfiprintf_r+0xe6>
 801959a:	06d0      	lsls	r0, r2, #27
 801959c:	bf44      	itt	mi
 801959e:	2320      	movmi	r3, #32
 80195a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195a4:	0711      	lsls	r1, r2, #28
 80195a6:	bf44      	itt	mi
 80195a8:	232b      	movmi	r3, #43	; 0x2b
 80195aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195ae:	f89a 3000 	ldrb.w	r3, [sl]
 80195b2:	2b2a      	cmp	r3, #42	; 0x2a
 80195b4:	d015      	beq.n	80195e2 <_svfiprintf_r+0xf6>
 80195b6:	9a07      	ldr	r2, [sp, #28]
 80195b8:	4654      	mov	r4, sl
 80195ba:	2000      	movs	r0, #0
 80195bc:	f04f 0c0a 	mov.w	ip, #10
 80195c0:	4621      	mov	r1, r4
 80195c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195c6:	3b30      	subs	r3, #48	; 0x30
 80195c8:	2b09      	cmp	r3, #9
 80195ca:	d94e      	bls.n	801966a <_svfiprintf_r+0x17e>
 80195cc:	b1b0      	cbz	r0, 80195fc <_svfiprintf_r+0x110>
 80195ce:	9207      	str	r2, [sp, #28]
 80195d0:	e014      	b.n	80195fc <_svfiprintf_r+0x110>
 80195d2:	eba0 0308 	sub.w	r3, r0, r8
 80195d6:	fa09 f303 	lsl.w	r3, r9, r3
 80195da:	4313      	orrs	r3, r2
 80195dc:	9304      	str	r3, [sp, #16]
 80195de:	46a2      	mov	sl, r4
 80195e0:	e7d2      	b.n	8019588 <_svfiprintf_r+0x9c>
 80195e2:	9b03      	ldr	r3, [sp, #12]
 80195e4:	1d19      	adds	r1, r3, #4
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	9103      	str	r1, [sp, #12]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	bfbb      	ittet	lt
 80195ee:	425b      	neglt	r3, r3
 80195f0:	f042 0202 	orrlt.w	r2, r2, #2
 80195f4:	9307      	strge	r3, [sp, #28]
 80195f6:	9307      	strlt	r3, [sp, #28]
 80195f8:	bfb8      	it	lt
 80195fa:	9204      	strlt	r2, [sp, #16]
 80195fc:	7823      	ldrb	r3, [r4, #0]
 80195fe:	2b2e      	cmp	r3, #46	; 0x2e
 8019600:	d10c      	bne.n	801961c <_svfiprintf_r+0x130>
 8019602:	7863      	ldrb	r3, [r4, #1]
 8019604:	2b2a      	cmp	r3, #42	; 0x2a
 8019606:	d135      	bne.n	8019674 <_svfiprintf_r+0x188>
 8019608:	9b03      	ldr	r3, [sp, #12]
 801960a:	1d1a      	adds	r2, r3, #4
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	9203      	str	r2, [sp, #12]
 8019610:	2b00      	cmp	r3, #0
 8019612:	bfb8      	it	lt
 8019614:	f04f 33ff 	movlt.w	r3, #4294967295
 8019618:	3402      	adds	r4, #2
 801961a:	9305      	str	r3, [sp, #20]
 801961c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80196e8 <_svfiprintf_r+0x1fc>
 8019620:	7821      	ldrb	r1, [r4, #0]
 8019622:	2203      	movs	r2, #3
 8019624:	4650      	mov	r0, sl
 8019626:	f7e6 fe7b 	bl	8000320 <memchr>
 801962a:	b140      	cbz	r0, 801963e <_svfiprintf_r+0x152>
 801962c:	2340      	movs	r3, #64	; 0x40
 801962e:	eba0 000a 	sub.w	r0, r0, sl
 8019632:	fa03 f000 	lsl.w	r0, r3, r0
 8019636:	9b04      	ldr	r3, [sp, #16]
 8019638:	4303      	orrs	r3, r0
 801963a:	3401      	adds	r4, #1
 801963c:	9304      	str	r3, [sp, #16]
 801963e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019642:	4826      	ldr	r0, [pc, #152]	; (80196dc <_svfiprintf_r+0x1f0>)
 8019644:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019648:	2206      	movs	r2, #6
 801964a:	f7e6 fe69 	bl	8000320 <memchr>
 801964e:	2800      	cmp	r0, #0
 8019650:	d038      	beq.n	80196c4 <_svfiprintf_r+0x1d8>
 8019652:	4b23      	ldr	r3, [pc, #140]	; (80196e0 <_svfiprintf_r+0x1f4>)
 8019654:	bb1b      	cbnz	r3, 801969e <_svfiprintf_r+0x1b2>
 8019656:	9b03      	ldr	r3, [sp, #12]
 8019658:	3307      	adds	r3, #7
 801965a:	f023 0307 	bic.w	r3, r3, #7
 801965e:	3308      	adds	r3, #8
 8019660:	9303      	str	r3, [sp, #12]
 8019662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019664:	4433      	add	r3, r6
 8019666:	9309      	str	r3, [sp, #36]	; 0x24
 8019668:	e767      	b.n	801953a <_svfiprintf_r+0x4e>
 801966a:	fb0c 3202 	mla	r2, ip, r2, r3
 801966e:	460c      	mov	r4, r1
 8019670:	2001      	movs	r0, #1
 8019672:	e7a5      	b.n	80195c0 <_svfiprintf_r+0xd4>
 8019674:	2300      	movs	r3, #0
 8019676:	3401      	adds	r4, #1
 8019678:	9305      	str	r3, [sp, #20]
 801967a:	4619      	mov	r1, r3
 801967c:	f04f 0c0a 	mov.w	ip, #10
 8019680:	4620      	mov	r0, r4
 8019682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019686:	3a30      	subs	r2, #48	; 0x30
 8019688:	2a09      	cmp	r2, #9
 801968a:	d903      	bls.n	8019694 <_svfiprintf_r+0x1a8>
 801968c:	2b00      	cmp	r3, #0
 801968e:	d0c5      	beq.n	801961c <_svfiprintf_r+0x130>
 8019690:	9105      	str	r1, [sp, #20]
 8019692:	e7c3      	b.n	801961c <_svfiprintf_r+0x130>
 8019694:	fb0c 2101 	mla	r1, ip, r1, r2
 8019698:	4604      	mov	r4, r0
 801969a:	2301      	movs	r3, #1
 801969c:	e7f0      	b.n	8019680 <_svfiprintf_r+0x194>
 801969e:	ab03      	add	r3, sp, #12
 80196a0:	9300      	str	r3, [sp, #0]
 80196a2:	462a      	mov	r2, r5
 80196a4:	4b0f      	ldr	r3, [pc, #60]	; (80196e4 <_svfiprintf_r+0x1f8>)
 80196a6:	a904      	add	r1, sp, #16
 80196a8:	4638      	mov	r0, r7
 80196aa:	f7fc fad5 	bl	8015c58 <_printf_float>
 80196ae:	1c42      	adds	r2, r0, #1
 80196b0:	4606      	mov	r6, r0
 80196b2:	d1d6      	bne.n	8019662 <_svfiprintf_r+0x176>
 80196b4:	89ab      	ldrh	r3, [r5, #12]
 80196b6:	065b      	lsls	r3, r3, #25
 80196b8:	f53f af2c 	bmi.w	8019514 <_svfiprintf_r+0x28>
 80196bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196be:	b01d      	add	sp, #116	; 0x74
 80196c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c4:	ab03      	add	r3, sp, #12
 80196c6:	9300      	str	r3, [sp, #0]
 80196c8:	462a      	mov	r2, r5
 80196ca:	4b06      	ldr	r3, [pc, #24]	; (80196e4 <_svfiprintf_r+0x1f8>)
 80196cc:	a904      	add	r1, sp, #16
 80196ce:	4638      	mov	r0, r7
 80196d0:	f7fc fd4e 	bl	8016170 <_printf_i>
 80196d4:	e7eb      	b.n	80196ae <_svfiprintf_r+0x1c2>
 80196d6:	bf00      	nop
 80196d8:	0801a774 	.word	0x0801a774
 80196dc:	0801a77e 	.word	0x0801a77e
 80196e0:	08015c59 	.word	0x08015c59
 80196e4:	08019435 	.word	0x08019435
 80196e8:	0801a77a 	.word	0x0801a77a

080196ec <_read_r>:
 80196ec:	b538      	push	{r3, r4, r5, lr}
 80196ee:	4d07      	ldr	r5, [pc, #28]	; (801970c <_read_r+0x20>)
 80196f0:	4604      	mov	r4, r0
 80196f2:	4608      	mov	r0, r1
 80196f4:	4611      	mov	r1, r2
 80196f6:	2200      	movs	r2, #0
 80196f8:	602a      	str	r2, [r5, #0]
 80196fa:	461a      	mov	r2, r3
 80196fc:	f7e9 fafa 	bl	8002cf4 <_read>
 8019700:	1c43      	adds	r3, r0, #1
 8019702:	d102      	bne.n	801970a <_read_r+0x1e>
 8019704:	682b      	ldr	r3, [r5, #0]
 8019706:	b103      	cbz	r3, 801970a <_read_r+0x1e>
 8019708:	6023      	str	r3, [r4, #0]
 801970a:	bd38      	pop	{r3, r4, r5, pc}
 801970c:	24003208 	.word	0x24003208

08019710 <nan>:
 8019710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019718 <nan+0x8>
 8019714:	4770      	bx	lr
 8019716:	bf00      	nop
 8019718:	00000000 	.word	0x00000000
 801971c:	7ff80000 	.word	0x7ff80000

08019720 <_sbrk_r>:
 8019720:	b538      	push	{r3, r4, r5, lr}
 8019722:	4d06      	ldr	r5, [pc, #24]	; (801973c <_sbrk_r+0x1c>)
 8019724:	2300      	movs	r3, #0
 8019726:	4604      	mov	r4, r0
 8019728:	4608      	mov	r0, r1
 801972a:	602b      	str	r3, [r5, #0]
 801972c:	f7e9 fb50 	bl	8002dd0 <_sbrk>
 8019730:	1c43      	adds	r3, r0, #1
 8019732:	d102      	bne.n	801973a <_sbrk_r+0x1a>
 8019734:	682b      	ldr	r3, [r5, #0]
 8019736:	b103      	cbz	r3, 801973a <_sbrk_r+0x1a>
 8019738:	6023      	str	r3, [r4, #0]
 801973a:	bd38      	pop	{r3, r4, r5, pc}
 801973c:	24003208 	.word	0x24003208

08019740 <strncmp>:
 8019740:	b510      	push	{r4, lr}
 8019742:	b17a      	cbz	r2, 8019764 <strncmp+0x24>
 8019744:	4603      	mov	r3, r0
 8019746:	3901      	subs	r1, #1
 8019748:	1884      	adds	r4, r0, r2
 801974a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801974e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019752:	4290      	cmp	r0, r2
 8019754:	d101      	bne.n	801975a <strncmp+0x1a>
 8019756:	42a3      	cmp	r3, r4
 8019758:	d101      	bne.n	801975e <strncmp+0x1e>
 801975a:	1a80      	subs	r0, r0, r2
 801975c:	bd10      	pop	{r4, pc}
 801975e:	2800      	cmp	r0, #0
 8019760:	d1f3      	bne.n	801974a <strncmp+0xa>
 8019762:	e7fa      	b.n	801975a <strncmp+0x1a>
 8019764:	4610      	mov	r0, r2
 8019766:	e7f9      	b.n	801975c <strncmp+0x1c>

08019768 <__ascii_wctomb>:
 8019768:	b149      	cbz	r1, 801977e <__ascii_wctomb+0x16>
 801976a:	2aff      	cmp	r2, #255	; 0xff
 801976c:	bf85      	ittet	hi
 801976e:	238a      	movhi	r3, #138	; 0x8a
 8019770:	6003      	strhi	r3, [r0, #0]
 8019772:	700a      	strbls	r2, [r1, #0]
 8019774:	f04f 30ff 	movhi.w	r0, #4294967295
 8019778:	bf98      	it	ls
 801977a:	2001      	movls	r0, #1
 801977c:	4770      	bx	lr
 801977e:	4608      	mov	r0, r1
 8019780:	4770      	bx	lr
	...

08019784 <__assert_func>:
 8019784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019786:	4614      	mov	r4, r2
 8019788:	461a      	mov	r2, r3
 801978a:	4b09      	ldr	r3, [pc, #36]	; (80197b0 <__assert_func+0x2c>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4605      	mov	r5, r0
 8019790:	68d8      	ldr	r0, [r3, #12]
 8019792:	b14c      	cbz	r4, 80197a8 <__assert_func+0x24>
 8019794:	4b07      	ldr	r3, [pc, #28]	; (80197b4 <__assert_func+0x30>)
 8019796:	9100      	str	r1, [sp, #0]
 8019798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801979c:	4906      	ldr	r1, [pc, #24]	; (80197b8 <__assert_func+0x34>)
 801979e:	462b      	mov	r3, r5
 80197a0:	f000 f9a6 	bl	8019af0 <fiprintf>
 80197a4:	f000 fc46 	bl	801a034 <abort>
 80197a8:	4b04      	ldr	r3, [pc, #16]	; (80197bc <__assert_func+0x38>)
 80197aa:	461c      	mov	r4, r3
 80197ac:	e7f3      	b.n	8019796 <__assert_func+0x12>
 80197ae:	bf00      	nop
 80197b0:	24000100 	.word	0x24000100
 80197b4:	0801a785 	.word	0x0801a785
 80197b8:	0801a792 	.word	0x0801a792
 80197bc:	0801a7c0 	.word	0x0801a7c0

080197c0 <__sflush_r>:
 80197c0:	898a      	ldrh	r2, [r1, #12]
 80197c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197c6:	4605      	mov	r5, r0
 80197c8:	0710      	lsls	r0, r2, #28
 80197ca:	460c      	mov	r4, r1
 80197cc:	d458      	bmi.n	8019880 <__sflush_r+0xc0>
 80197ce:	684b      	ldr	r3, [r1, #4]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	dc05      	bgt.n	80197e0 <__sflush_r+0x20>
 80197d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	dc02      	bgt.n	80197e0 <__sflush_r+0x20>
 80197da:	2000      	movs	r0, #0
 80197dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80197e2:	2e00      	cmp	r6, #0
 80197e4:	d0f9      	beq.n	80197da <__sflush_r+0x1a>
 80197e6:	2300      	movs	r3, #0
 80197e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80197ec:	682f      	ldr	r7, [r5, #0]
 80197ee:	602b      	str	r3, [r5, #0]
 80197f0:	d032      	beq.n	8019858 <__sflush_r+0x98>
 80197f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80197f4:	89a3      	ldrh	r3, [r4, #12]
 80197f6:	075a      	lsls	r2, r3, #29
 80197f8:	d505      	bpl.n	8019806 <__sflush_r+0x46>
 80197fa:	6863      	ldr	r3, [r4, #4]
 80197fc:	1ac0      	subs	r0, r0, r3
 80197fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019800:	b10b      	cbz	r3, 8019806 <__sflush_r+0x46>
 8019802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019804:	1ac0      	subs	r0, r0, r3
 8019806:	2300      	movs	r3, #0
 8019808:	4602      	mov	r2, r0
 801980a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801980c:	6a21      	ldr	r1, [r4, #32]
 801980e:	4628      	mov	r0, r5
 8019810:	47b0      	blx	r6
 8019812:	1c43      	adds	r3, r0, #1
 8019814:	89a3      	ldrh	r3, [r4, #12]
 8019816:	d106      	bne.n	8019826 <__sflush_r+0x66>
 8019818:	6829      	ldr	r1, [r5, #0]
 801981a:	291d      	cmp	r1, #29
 801981c:	d82c      	bhi.n	8019878 <__sflush_r+0xb8>
 801981e:	4a2a      	ldr	r2, [pc, #168]	; (80198c8 <__sflush_r+0x108>)
 8019820:	40ca      	lsrs	r2, r1
 8019822:	07d6      	lsls	r6, r2, #31
 8019824:	d528      	bpl.n	8019878 <__sflush_r+0xb8>
 8019826:	2200      	movs	r2, #0
 8019828:	6062      	str	r2, [r4, #4]
 801982a:	04d9      	lsls	r1, r3, #19
 801982c:	6922      	ldr	r2, [r4, #16]
 801982e:	6022      	str	r2, [r4, #0]
 8019830:	d504      	bpl.n	801983c <__sflush_r+0x7c>
 8019832:	1c42      	adds	r2, r0, #1
 8019834:	d101      	bne.n	801983a <__sflush_r+0x7a>
 8019836:	682b      	ldr	r3, [r5, #0]
 8019838:	b903      	cbnz	r3, 801983c <__sflush_r+0x7c>
 801983a:	6560      	str	r0, [r4, #84]	; 0x54
 801983c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801983e:	602f      	str	r7, [r5, #0]
 8019840:	2900      	cmp	r1, #0
 8019842:	d0ca      	beq.n	80197da <__sflush_r+0x1a>
 8019844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019848:	4299      	cmp	r1, r3
 801984a:	d002      	beq.n	8019852 <__sflush_r+0x92>
 801984c:	4628      	mov	r0, r5
 801984e:	f7ff fd11 	bl	8019274 <_free_r>
 8019852:	2000      	movs	r0, #0
 8019854:	6360      	str	r0, [r4, #52]	; 0x34
 8019856:	e7c1      	b.n	80197dc <__sflush_r+0x1c>
 8019858:	6a21      	ldr	r1, [r4, #32]
 801985a:	2301      	movs	r3, #1
 801985c:	4628      	mov	r0, r5
 801985e:	47b0      	blx	r6
 8019860:	1c41      	adds	r1, r0, #1
 8019862:	d1c7      	bne.n	80197f4 <__sflush_r+0x34>
 8019864:	682b      	ldr	r3, [r5, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d0c4      	beq.n	80197f4 <__sflush_r+0x34>
 801986a:	2b1d      	cmp	r3, #29
 801986c:	d001      	beq.n	8019872 <__sflush_r+0xb2>
 801986e:	2b16      	cmp	r3, #22
 8019870:	d101      	bne.n	8019876 <__sflush_r+0xb6>
 8019872:	602f      	str	r7, [r5, #0]
 8019874:	e7b1      	b.n	80197da <__sflush_r+0x1a>
 8019876:	89a3      	ldrh	r3, [r4, #12]
 8019878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801987c:	81a3      	strh	r3, [r4, #12]
 801987e:	e7ad      	b.n	80197dc <__sflush_r+0x1c>
 8019880:	690f      	ldr	r7, [r1, #16]
 8019882:	2f00      	cmp	r7, #0
 8019884:	d0a9      	beq.n	80197da <__sflush_r+0x1a>
 8019886:	0793      	lsls	r3, r2, #30
 8019888:	680e      	ldr	r6, [r1, #0]
 801988a:	bf08      	it	eq
 801988c:	694b      	ldreq	r3, [r1, #20]
 801988e:	600f      	str	r7, [r1, #0]
 8019890:	bf18      	it	ne
 8019892:	2300      	movne	r3, #0
 8019894:	eba6 0807 	sub.w	r8, r6, r7
 8019898:	608b      	str	r3, [r1, #8]
 801989a:	f1b8 0f00 	cmp.w	r8, #0
 801989e:	dd9c      	ble.n	80197da <__sflush_r+0x1a>
 80198a0:	6a21      	ldr	r1, [r4, #32]
 80198a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80198a4:	4643      	mov	r3, r8
 80198a6:	463a      	mov	r2, r7
 80198a8:	4628      	mov	r0, r5
 80198aa:	47b0      	blx	r6
 80198ac:	2800      	cmp	r0, #0
 80198ae:	dc06      	bgt.n	80198be <__sflush_r+0xfe>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198b6:	81a3      	strh	r3, [r4, #12]
 80198b8:	f04f 30ff 	mov.w	r0, #4294967295
 80198bc:	e78e      	b.n	80197dc <__sflush_r+0x1c>
 80198be:	4407      	add	r7, r0
 80198c0:	eba8 0800 	sub.w	r8, r8, r0
 80198c4:	e7e9      	b.n	801989a <__sflush_r+0xda>
 80198c6:	bf00      	nop
 80198c8:	20400001 	.word	0x20400001

080198cc <_fflush_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	690b      	ldr	r3, [r1, #16]
 80198d0:	4605      	mov	r5, r0
 80198d2:	460c      	mov	r4, r1
 80198d4:	b913      	cbnz	r3, 80198dc <_fflush_r+0x10>
 80198d6:	2500      	movs	r5, #0
 80198d8:	4628      	mov	r0, r5
 80198da:	bd38      	pop	{r3, r4, r5, pc}
 80198dc:	b118      	cbz	r0, 80198e6 <_fflush_r+0x1a>
 80198de:	6983      	ldr	r3, [r0, #24]
 80198e0:	b90b      	cbnz	r3, 80198e6 <_fflush_r+0x1a>
 80198e2:	f000 f887 	bl	80199f4 <__sinit>
 80198e6:	4b14      	ldr	r3, [pc, #80]	; (8019938 <_fflush_r+0x6c>)
 80198e8:	429c      	cmp	r4, r3
 80198ea:	d11b      	bne.n	8019924 <_fflush_r+0x58>
 80198ec:	686c      	ldr	r4, [r5, #4]
 80198ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d0ef      	beq.n	80198d6 <_fflush_r+0xa>
 80198f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80198f8:	07d0      	lsls	r0, r2, #31
 80198fa:	d404      	bmi.n	8019906 <_fflush_r+0x3a>
 80198fc:	0599      	lsls	r1, r3, #22
 80198fe:	d402      	bmi.n	8019906 <_fflush_r+0x3a>
 8019900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019902:	f000 f927 	bl	8019b54 <__retarget_lock_acquire_recursive>
 8019906:	4628      	mov	r0, r5
 8019908:	4621      	mov	r1, r4
 801990a:	f7ff ff59 	bl	80197c0 <__sflush_r>
 801990e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019910:	07da      	lsls	r2, r3, #31
 8019912:	4605      	mov	r5, r0
 8019914:	d4e0      	bmi.n	80198d8 <_fflush_r+0xc>
 8019916:	89a3      	ldrh	r3, [r4, #12]
 8019918:	059b      	lsls	r3, r3, #22
 801991a:	d4dd      	bmi.n	80198d8 <_fflush_r+0xc>
 801991c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801991e:	f000 f91a 	bl	8019b56 <__retarget_lock_release_recursive>
 8019922:	e7d9      	b.n	80198d8 <_fflush_r+0xc>
 8019924:	4b05      	ldr	r3, [pc, #20]	; (801993c <_fflush_r+0x70>)
 8019926:	429c      	cmp	r4, r3
 8019928:	d101      	bne.n	801992e <_fflush_r+0x62>
 801992a:	68ac      	ldr	r4, [r5, #8]
 801992c:	e7df      	b.n	80198ee <_fflush_r+0x22>
 801992e:	4b04      	ldr	r3, [pc, #16]	; (8019940 <_fflush_r+0x74>)
 8019930:	429c      	cmp	r4, r3
 8019932:	bf08      	it	eq
 8019934:	68ec      	ldreq	r4, [r5, #12]
 8019936:	e7da      	b.n	80198ee <_fflush_r+0x22>
 8019938:	0801a7e4 	.word	0x0801a7e4
 801993c:	0801a804 	.word	0x0801a804
 8019940:	0801a7c4 	.word	0x0801a7c4

08019944 <std>:
 8019944:	2300      	movs	r3, #0
 8019946:	b510      	push	{r4, lr}
 8019948:	4604      	mov	r4, r0
 801994a:	e9c0 3300 	strd	r3, r3, [r0]
 801994e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019952:	6083      	str	r3, [r0, #8]
 8019954:	8181      	strh	r1, [r0, #12]
 8019956:	6643      	str	r3, [r0, #100]	; 0x64
 8019958:	81c2      	strh	r2, [r0, #14]
 801995a:	6183      	str	r3, [r0, #24]
 801995c:	4619      	mov	r1, r3
 801995e:	2208      	movs	r2, #8
 8019960:	305c      	adds	r0, #92	; 0x5c
 8019962:	f7fc f8e1 	bl	8015b28 <memset>
 8019966:	4b05      	ldr	r3, [pc, #20]	; (801997c <std+0x38>)
 8019968:	6263      	str	r3, [r4, #36]	; 0x24
 801996a:	4b05      	ldr	r3, [pc, #20]	; (8019980 <std+0x3c>)
 801996c:	62a3      	str	r3, [r4, #40]	; 0x28
 801996e:	4b05      	ldr	r3, [pc, #20]	; (8019984 <std+0x40>)
 8019970:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019972:	4b05      	ldr	r3, [pc, #20]	; (8019988 <std+0x44>)
 8019974:	6224      	str	r4, [r4, #32]
 8019976:	6323      	str	r3, [r4, #48]	; 0x30
 8019978:	bd10      	pop	{r4, pc}
 801997a:	bf00      	nop
 801997c:	08016815 	.word	0x08016815
 8019980:	08016837 	.word	0x08016837
 8019984:	0801686f 	.word	0x0801686f
 8019988:	08016893 	.word	0x08016893

0801998c <_cleanup_r>:
 801998c:	4901      	ldr	r1, [pc, #4]	; (8019994 <_cleanup_r+0x8>)
 801998e:	f000 b8c1 	b.w	8019b14 <_fwalk_reent>
 8019992:	bf00      	nop
 8019994:	080198cd 	.word	0x080198cd

08019998 <__sfmoreglue>:
 8019998:	b570      	push	{r4, r5, r6, lr}
 801999a:	2268      	movs	r2, #104	; 0x68
 801999c:	1e4d      	subs	r5, r1, #1
 801999e:	4355      	muls	r5, r2
 80199a0:	460e      	mov	r6, r1
 80199a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80199a6:	f7ff fcd1 	bl	801934c <_malloc_r>
 80199aa:	4604      	mov	r4, r0
 80199ac:	b140      	cbz	r0, 80199c0 <__sfmoreglue+0x28>
 80199ae:	2100      	movs	r1, #0
 80199b0:	e9c0 1600 	strd	r1, r6, [r0]
 80199b4:	300c      	adds	r0, #12
 80199b6:	60a0      	str	r0, [r4, #8]
 80199b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80199bc:	f7fc f8b4 	bl	8015b28 <memset>
 80199c0:	4620      	mov	r0, r4
 80199c2:	bd70      	pop	{r4, r5, r6, pc}

080199c4 <__sfp_lock_acquire>:
 80199c4:	4801      	ldr	r0, [pc, #4]	; (80199cc <__sfp_lock_acquire+0x8>)
 80199c6:	f000 b8c5 	b.w	8019b54 <__retarget_lock_acquire_recursive>
 80199ca:	bf00      	nop
 80199cc:	2400320d 	.word	0x2400320d

080199d0 <__sfp_lock_release>:
 80199d0:	4801      	ldr	r0, [pc, #4]	; (80199d8 <__sfp_lock_release+0x8>)
 80199d2:	f000 b8c0 	b.w	8019b56 <__retarget_lock_release_recursive>
 80199d6:	bf00      	nop
 80199d8:	2400320d 	.word	0x2400320d

080199dc <__sinit_lock_acquire>:
 80199dc:	4801      	ldr	r0, [pc, #4]	; (80199e4 <__sinit_lock_acquire+0x8>)
 80199de:	f000 b8b9 	b.w	8019b54 <__retarget_lock_acquire_recursive>
 80199e2:	bf00      	nop
 80199e4:	2400320e 	.word	0x2400320e

080199e8 <__sinit_lock_release>:
 80199e8:	4801      	ldr	r0, [pc, #4]	; (80199f0 <__sinit_lock_release+0x8>)
 80199ea:	f000 b8b4 	b.w	8019b56 <__retarget_lock_release_recursive>
 80199ee:	bf00      	nop
 80199f0:	2400320e 	.word	0x2400320e

080199f4 <__sinit>:
 80199f4:	b510      	push	{r4, lr}
 80199f6:	4604      	mov	r4, r0
 80199f8:	f7ff fff0 	bl	80199dc <__sinit_lock_acquire>
 80199fc:	69a3      	ldr	r3, [r4, #24]
 80199fe:	b11b      	cbz	r3, 8019a08 <__sinit+0x14>
 8019a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a04:	f7ff bff0 	b.w	80199e8 <__sinit_lock_release>
 8019a08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8019a0e:	4b13      	ldr	r3, [pc, #76]	; (8019a5c <__sinit+0x68>)
 8019a10:	4a13      	ldr	r2, [pc, #76]	; (8019a60 <__sinit+0x6c>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a16:	42a3      	cmp	r3, r4
 8019a18:	bf04      	itt	eq
 8019a1a:	2301      	moveq	r3, #1
 8019a1c:	61a3      	streq	r3, [r4, #24]
 8019a1e:	4620      	mov	r0, r4
 8019a20:	f000 f820 	bl	8019a64 <__sfp>
 8019a24:	6060      	str	r0, [r4, #4]
 8019a26:	4620      	mov	r0, r4
 8019a28:	f000 f81c 	bl	8019a64 <__sfp>
 8019a2c:	60a0      	str	r0, [r4, #8]
 8019a2e:	4620      	mov	r0, r4
 8019a30:	f000 f818 	bl	8019a64 <__sfp>
 8019a34:	2200      	movs	r2, #0
 8019a36:	60e0      	str	r0, [r4, #12]
 8019a38:	2104      	movs	r1, #4
 8019a3a:	6860      	ldr	r0, [r4, #4]
 8019a3c:	f7ff ff82 	bl	8019944 <std>
 8019a40:	68a0      	ldr	r0, [r4, #8]
 8019a42:	2201      	movs	r2, #1
 8019a44:	2109      	movs	r1, #9
 8019a46:	f7ff ff7d 	bl	8019944 <std>
 8019a4a:	68e0      	ldr	r0, [r4, #12]
 8019a4c:	2202      	movs	r2, #2
 8019a4e:	2112      	movs	r1, #18
 8019a50:	f7ff ff78 	bl	8019944 <std>
 8019a54:	2301      	movs	r3, #1
 8019a56:	61a3      	str	r3, [r4, #24]
 8019a58:	e7d2      	b.n	8019a00 <__sinit+0xc>
 8019a5a:	bf00      	nop
 8019a5c:	0801a380 	.word	0x0801a380
 8019a60:	0801998d 	.word	0x0801998d

08019a64 <__sfp>:
 8019a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a66:	4607      	mov	r7, r0
 8019a68:	f7ff ffac 	bl	80199c4 <__sfp_lock_acquire>
 8019a6c:	4b1e      	ldr	r3, [pc, #120]	; (8019ae8 <__sfp+0x84>)
 8019a6e:	681e      	ldr	r6, [r3, #0]
 8019a70:	69b3      	ldr	r3, [r6, #24]
 8019a72:	b913      	cbnz	r3, 8019a7a <__sfp+0x16>
 8019a74:	4630      	mov	r0, r6
 8019a76:	f7ff ffbd 	bl	80199f4 <__sinit>
 8019a7a:	3648      	adds	r6, #72	; 0x48
 8019a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019a80:	3b01      	subs	r3, #1
 8019a82:	d503      	bpl.n	8019a8c <__sfp+0x28>
 8019a84:	6833      	ldr	r3, [r6, #0]
 8019a86:	b30b      	cbz	r3, 8019acc <__sfp+0x68>
 8019a88:	6836      	ldr	r6, [r6, #0]
 8019a8a:	e7f7      	b.n	8019a7c <__sfp+0x18>
 8019a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019a90:	b9d5      	cbnz	r5, 8019ac8 <__sfp+0x64>
 8019a92:	4b16      	ldr	r3, [pc, #88]	; (8019aec <__sfp+0x88>)
 8019a94:	60e3      	str	r3, [r4, #12]
 8019a96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019a9a:	6665      	str	r5, [r4, #100]	; 0x64
 8019a9c:	f000 f859 	bl	8019b52 <__retarget_lock_init_recursive>
 8019aa0:	f7ff ff96 	bl	80199d0 <__sfp_lock_release>
 8019aa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019aa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019aac:	6025      	str	r5, [r4, #0]
 8019aae:	61a5      	str	r5, [r4, #24]
 8019ab0:	2208      	movs	r2, #8
 8019ab2:	4629      	mov	r1, r5
 8019ab4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ab8:	f7fc f836 	bl	8015b28 <memset>
 8019abc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ac0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ac8:	3468      	adds	r4, #104	; 0x68
 8019aca:	e7d9      	b.n	8019a80 <__sfp+0x1c>
 8019acc:	2104      	movs	r1, #4
 8019ace:	4638      	mov	r0, r7
 8019ad0:	f7ff ff62 	bl	8019998 <__sfmoreglue>
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	6030      	str	r0, [r6, #0]
 8019ad8:	2800      	cmp	r0, #0
 8019ada:	d1d5      	bne.n	8019a88 <__sfp+0x24>
 8019adc:	f7ff ff78 	bl	80199d0 <__sfp_lock_release>
 8019ae0:	230c      	movs	r3, #12
 8019ae2:	603b      	str	r3, [r7, #0]
 8019ae4:	e7ee      	b.n	8019ac4 <__sfp+0x60>
 8019ae6:	bf00      	nop
 8019ae8:	0801a380 	.word	0x0801a380
 8019aec:	ffff0001 	.word	0xffff0001

08019af0 <fiprintf>:
 8019af0:	b40e      	push	{r1, r2, r3}
 8019af2:	b503      	push	{r0, r1, lr}
 8019af4:	4601      	mov	r1, r0
 8019af6:	ab03      	add	r3, sp, #12
 8019af8:	4805      	ldr	r0, [pc, #20]	; (8019b10 <fiprintf+0x20>)
 8019afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019afe:	6800      	ldr	r0, [r0, #0]
 8019b00:	9301      	str	r3, [sp, #4]
 8019b02:	f000 f8a7 	bl	8019c54 <_vfiprintf_r>
 8019b06:	b002      	add	sp, #8
 8019b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b0c:	b003      	add	sp, #12
 8019b0e:	4770      	bx	lr
 8019b10:	24000100 	.word	0x24000100

08019b14 <_fwalk_reent>:
 8019b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b18:	4606      	mov	r6, r0
 8019b1a:	4688      	mov	r8, r1
 8019b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b20:	2700      	movs	r7, #0
 8019b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b26:	f1b9 0901 	subs.w	r9, r9, #1
 8019b2a:	d505      	bpl.n	8019b38 <_fwalk_reent+0x24>
 8019b2c:	6824      	ldr	r4, [r4, #0]
 8019b2e:	2c00      	cmp	r4, #0
 8019b30:	d1f7      	bne.n	8019b22 <_fwalk_reent+0xe>
 8019b32:	4638      	mov	r0, r7
 8019b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b38:	89ab      	ldrh	r3, [r5, #12]
 8019b3a:	2b01      	cmp	r3, #1
 8019b3c:	d907      	bls.n	8019b4e <_fwalk_reent+0x3a>
 8019b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b42:	3301      	adds	r3, #1
 8019b44:	d003      	beq.n	8019b4e <_fwalk_reent+0x3a>
 8019b46:	4629      	mov	r1, r5
 8019b48:	4630      	mov	r0, r6
 8019b4a:	47c0      	blx	r8
 8019b4c:	4307      	orrs	r7, r0
 8019b4e:	3568      	adds	r5, #104	; 0x68
 8019b50:	e7e9      	b.n	8019b26 <_fwalk_reent+0x12>

08019b52 <__retarget_lock_init_recursive>:
 8019b52:	4770      	bx	lr

08019b54 <__retarget_lock_acquire_recursive>:
 8019b54:	4770      	bx	lr

08019b56 <__retarget_lock_release_recursive>:
 8019b56:	4770      	bx	lr

08019b58 <memmove>:
 8019b58:	4288      	cmp	r0, r1
 8019b5a:	b510      	push	{r4, lr}
 8019b5c:	eb01 0402 	add.w	r4, r1, r2
 8019b60:	d902      	bls.n	8019b68 <memmove+0x10>
 8019b62:	4284      	cmp	r4, r0
 8019b64:	4623      	mov	r3, r4
 8019b66:	d807      	bhi.n	8019b78 <memmove+0x20>
 8019b68:	1e43      	subs	r3, r0, #1
 8019b6a:	42a1      	cmp	r1, r4
 8019b6c:	d008      	beq.n	8019b80 <memmove+0x28>
 8019b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b76:	e7f8      	b.n	8019b6a <memmove+0x12>
 8019b78:	4402      	add	r2, r0
 8019b7a:	4601      	mov	r1, r0
 8019b7c:	428a      	cmp	r2, r1
 8019b7e:	d100      	bne.n	8019b82 <memmove+0x2a>
 8019b80:	bd10      	pop	{r4, pc}
 8019b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b8a:	e7f7      	b.n	8019b7c <memmove+0x24>

08019b8c <__malloc_lock>:
 8019b8c:	4801      	ldr	r0, [pc, #4]	; (8019b94 <__malloc_lock+0x8>)
 8019b8e:	f7ff bfe1 	b.w	8019b54 <__retarget_lock_acquire_recursive>
 8019b92:	bf00      	nop
 8019b94:	2400320c 	.word	0x2400320c

08019b98 <__malloc_unlock>:
 8019b98:	4801      	ldr	r0, [pc, #4]	; (8019ba0 <__malloc_unlock+0x8>)
 8019b9a:	f7ff bfdc 	b.w	8019b56 <__retarget_lock_release_recursive>
 8019b9e:	bf00      	nop
 8019ba0:	2400320c 	.word	0x2400320c

08019ba4 <_realloc_r>:
 8019ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ba8:	4680      	mov	r8, r0
 8019baa:	4614      	mov	r4, r2
 8019bac:	460e      	mov	r6, r1
 8019bae:	b921      	cbnz	r1, 8019bba <_realloc_r+0x16>
 8019bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019bb4:	4611      	mov	r1, r2
 8019bb6:	f7ff bbc9 	b.w	801934c <_malloc_r>
 8019bba:	b92a      	cbnz	r2, 8019bc8 <_realloc_r+0x24>
 8019bbc:	f7ff fb5a 	bl	8019274 <_free_r>
 8019bc0:	4625      	mov	r5, r4
 8019bc2:	4628      	mov	r0, r5
 8019bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bc8:	f000 faa0 	bl	801a10c <_malloc_usable_size_r>
 8019bcc:	4284      	cmp	r4, r0
 8019bce:	4607      	mov	r7, r0
 8019bd0:	d802      	bhi.n	8019bd8 <_realloc_r+0x34>
 8019bd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019bd6:	d812      	bhi.n	8019bfe <_realloc_r+0x5a>
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4640      	mov	r0, r8
 8019bdc:	f7ff fbb6 	bl	801934c <_malloc_r>
 8019be0:	4605      	mov	r5, r0
 8019be2:	2800      	cmp	r0, #0
 8019be4:	d0ed      	beq.n	8019bc2 <_realloc_r+0x1e>
 8019be6:	42bc      	cmp	r4, r7
 8019be8:	4622      	mov	r2, r4
 8019bea:	4631      	mov	r1, r6
 8019bec:	bf28      	it	cs
 8019bee:	463a      	movcs	r2, r7
 8019bf0:	f7fb ff8c 	bl	8015b0c <memcpy>
 8019bf4:	4631      	mov	r1, r6
 8019bf6:	4640      	mov	r0, r8
 8019bf8:	f7ff fb3c 	bl	8019274 <_free_r>
 8019bfc:	e7e1      	b.n	8019bc2 <_realloc_r+0x1e>
 8019bfe:	4635      	mov	r5, r6
 8019c00:	e7df      	b.n	8019bc2 <_realloc_r+0x1e>

08019c02 <__sfputc_r>:
 8019c02:	6893      	ldr	r3, [r2, #8]
 8019c04:	3b01      	subs	r3, #1
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	b410      	push	{r4}
 8019c0a:	6093      	str	r3, [r2, #8]
 8019c0c:	da08      	bge.n	8019c20 <__sfputc_r+0x1e>
 8019c0e:	6994      	ldr	r4, [r2, #24]
 8019c10:	42a3      	cmp	r3, r4
 8019c12:	db01      	blt.n	8019c18 <__sfputc_r+0x16>
 8019c14:	290a      	cmp	r1, #10
 8019c16:	d103      	bne.n	8019c20 <__sfputc_r+0x1e>
 8019c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c1c:	f000 b94a 	b.w	8019eb4 <__swbuf_r>
 8019c20:	6813      	ldr	r3, [r2, #0]
 8019c22:	1c58      	adds	r0, r3, #1
 8019c24:	6010      	str	r0, [r2, #0]
 8019c26:	7019      	strb	r1, [r3, #0]
 8019c28:	4608      	mov	r0, r1
 8019c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c2e:	4770      	bx	lr

08019c30 <__sfputs_r>:
 8019c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c32:	4606      	mov	r6, r0
 8019c34:	460f      	mov	r7, r1
 8019c36:	4614      	mov	r4, r2
 8019c38:	18d5      	adds	r5, r2, r3
 8019c3a:	42ac      	cmp	r4, r5
 8019c3c:	d101      	bne.n	8019c42 <__sfputs_r+0x12>
 8019c3e:	2000      	movs	r0, #0
 8019c40:	e007      	b.n	8019c52 <__sfputs_r+0x22>
 8019c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c46:	463a      	mov	r2, r7
 8019c48:	4630      	mov	r0, r6
 8019c4a:	f7ff ffda 	bl	8019c02 <__sfputc_r>
 8019c4e:	1c43      	adds	r3, r0, #1
 8019c50:	d1f3      	bne.n	8019c3a <__sfputs_r+0xa>
 8019c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019c54 <_vfiprintf_r>:
 8019c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c58:	460d      	mov	r5, r1
 8019c5a:	b09d      	sub	sp, #116	; 0x74
 8019c5c:	4614      	mov	r4, r2
 8019c5e:	4698      	mov	r8, r3
 8019c60:	4606      	mov	r6, r0
 8019c62:	b118      	cbz	r0, 8019c6c <_vfiprintf_r+0x18>
 8019c64:	6983      	ldr	r3, [r0, #24]
 8019c66:	b90b      	cbnz	r3, 8019c6c <_vfiprintf_r+0x18>
 8019c68:	f7ff fec4 	bl	80199f4 <__sinit>
 8019c6c:	4b89      	ldr	r3, [pc, #548]	; (8019e94 <_vfiprintf_r+0x240>)
 8019c6e:	429d      	cmp	r5, r3
 8019c70:	d11b      	bne.n	8019caa <_vfiprintf_r+0x56>
 8019c72:	6875      	ldr	r5, [r6, #4]
 8019c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c76:	07d9      	lsls	r1, r3, #31
 8019c78:	d405      	bmi.n	8019c86 <_vfiprintf_r+0x32>
 8019c7a:	89ab      	ldrh	r3, [r5, #12]
 8019c7c:	059a      	lsls	r2, r3, #22
 8019c7e:	d402      	bmi.n	8019c86 <_vfiprintf_r+0x32>
 8019c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019c82:	f7ff ff67 	bl	8019b54 <__retarget_lock_acquire_recursive>
 8019c86:	89ab      	ldrh	r3, [r5, #12]
 8019c88:	071b      	lsls	r3, r3, #28
 8019c8a:	d501      	bpl.n	8019c90 <_vfiprintf_r+0x3c>
 8019c8c:	692b      	ldr	r3, [r5, #16]
 8019c8e:	b9eb      	cbnz	r3, 8019ccc <_vfiprintf_r+0x78>
 8019c90:	4629      	mov	r1, r5
 8019c92:	4630      	mov	r0, r6
 8019c94:	f000 f960 	bl	8019f58 <__swsetup_r>
 8019c98:	b1c0      	cbz	r0, 8019ccc <_vfiprintf_r+0x78>
 8019c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c9c:	07dc      	lsls	r4, r3, #31
 8019c9e:	d50e      	bpl.n	8019cbe <_vfiprintf_r+0x6a>
 8019ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca4:	b01d      	add	sp, #116	; 0x74
 8019ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019caa:	4b7b      	ldr	r3, [pc, #492]	; (8019e98 <_vfiprintf_r+0x244>)
 8019cac:	429d      	cmp	r5, r3
 8019cae:	d101      	bne.n	8019cb4 <_vfiprintf_r+0x60>
 8019cb0:	68b5      	ldr	r5, [r6, #8]
 8019cb2:	e7df      	b.n	8019c74 <_vfiprintf_r+0x20>
 8019cb4:	4b79      	ldr	r3, [pc, #484]	; (8019e9c <_vfiprintf_r+0x248>)
 8019cb6:	429d      	cmp	r5, r3
 8019cb8:	bf08      	it	eq
 8019cba:	68f5      	ldreq	r5, [r6, #12]
 8019cbc:	e7da      	b.n	8019c74 <_vfiprintf_r+0x20>
 8019cbe:	89ab      	ldrh	r3, [r5, #12]
 8019cc0:	0598      	lsls	r0, r3, #22
 8019cc2:	d4ed      	bmi.n	8019ca0 <_vfiprintf_r+0x4c>
 8019cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cc6:	f7ff ff46 	bl	8019b56 <__retarget_lock_release_recursive>
 8019cca:	e7e9      	b.n	8019ca0 <_vfiprintf_r+0x4c>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	9309      	str	r3, [sp, #36]	; 0x24
 8019cd0:	2320      	movs	r3, #32
 8019cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019cda:	2330      	movs	r3, #48	; 0x30
 8019cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019ea0 <_vfiprintf_r+0x24c>
 8019ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ce4:	f04f 0901 	mov.w	r9, #1
 8019ce8:	4623      	mov	r3, r4
 8019cea:	469a      	mov	sl, r3
 8019cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019cf0:	b10a      	cbz	r2, 8019cf6 <_vfiprintf_r+0xa2>
 8019cf2:	2a25      	cmp	r2, #37	; 0x25
 8019cf4:	d1f9      	bne.n	8019cea <_vfiprintf_r+0x96>
 8019cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8019cfa:	d00b      	beq.n	8019d14 <_vfiprintf_r+0xc0>
 8019cfc:	465b      	mov	r3, fp
 8019cfe:	4622      	mov	r2, r4
 8019d00:	4629      	mov	r1, r5
 8019d02:	4630      	mov	r0, r6
 8019d04:	f7ff ff94 	bl	8019c30 <__sfputs_r>
 8019d08:	3001      	adds	r0, #1
 8019d0a:	f000 80aa 	beq.w	8019e62 <_vfiprintf_r+0x20e>
 8019d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d10:	445a      	add	r2, fp
 8019d12:	9209      	str	r2, [sp, #36]	; 0x24
 8019d14:	f89a 3000 	ldrb.w	r3, [sl]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	f000 80a2 	beq.w	8019e62 <_vfiprintf_r+0x20e>
 8019d1e:	2300      	movs	r3, #0
 8019d20:	f04f 32ff 	mov.w	r2, #4294967295
 8019d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d28:	f10a 0a01 	add.w	sl, sl, #1
 8019d2c:	9304      	str	r3, [sp, #16]
 8019d2e:	9307      	str	r3, [sp, #28]
 8019d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d34:	931a      	str	r3, [sp, #104]	; 0x68
 8019d36:	4654      	mov	r4, sl
 8019d38:	2205      	movs	r2, #5
 8019d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d3e:	4858      	ldr	r0, [pc, #352]	; (8019ea0 <_vfiprintf_r+0x24c>)
 8019d40:	f7e6 faee 	bl	8000320 <memchr>
 8019d44:	9a04      	ldr	r2, [sp, #16]
 8019d46:	b9d8      	cbnz	r0, 8019d80 <_vfiprintf_r+0x12c>
 8019d48:	06d1      	lsls	r1, r2, #27
 8019d4a:	bf44      	itt	mi
 8019d4c:	2320      	movmi	r3, #32
 8019d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d52:	0713      	lsls	r3, r2, #28
 8019d54:	bf44      	itt	mi
 8019d56:	232b      	movmi	r3, #43	; 0x2b
 8019d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8019d60:	2b2a      	cmp	r3, #42	; 0x2a
 8019d62:	d015      	beq.n	8019d90 <_vfiprintf_r+0x13c>
 8019d64:	9a07      	ldr	r2, [sp, #28]
 8019d66:	4654      	mov	r4, sl
 8019d68:	2000      	movs	r0, #0
 8019d6a:	f04f 0c0a 	mov.w	ip, #10
 8019d6e:	4621      	mov	r1, r4
 8019d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d74:	3b30      	subs	r3, #48	; 0x30
 8019d76:	2b09      	cmp	r3, #9
 8019d78:	d94e      	bls.n	8019e18 <_vfiprintf_r+0x1c4>
 8019d7a:	b1b0      	cbz	r0, 8019daa <_vfiprintf_r+0x156>
 8019d7c:	9207      	str	r2, [sp, #28]
 8019d7e:	e014      	b.n	8019daa <_vfiprintf_r+0x156>
 8019d80:	eba0 0308 	sub.w	r3, r0, r8
 8019d84:	fa09 f303 	lsl.w	r3, r9, r3
 8019d88:	4313      	orrs	r3, r2
 8019d8a:	9304      	str	r3, [sp, #16]
 8019d8c:	46a2      	mov	sl, r4
 8019d8e:	e7d2      	b.n	8019d36 <_vfiprintf_r+0xe2>
 8019d90:	9b03      	ldr	r3, [sp, #12]
 8019d92:	1d19      	adds	r1, r3, #4
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	9103      	str	r1, [sp, #12]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	bfbb      	ittet	lt
 8019d9c:	425b      	neglt	r3, r3
 8019d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8019da2:	9307      	strge	r3, [sp, #28]
 8019da4:	9307      	strlt	r3, [sp, #28]
 8019da6:	bfb8      	it	lt
 8019da8:	9204      	strlt	r2, [sp, #16]
 8019daa:	7823      	ldrb	r3, [r4, #0]
 8019dac:	2b2e      	cmp	r3, #46	; 0x2e
 8019dae:	d10c      	bne.n	8019dca <_vfiprintf_r+0x176>
 8019db0:	7863      	ldrb	r3, [r4, #1]
 8019db2:	2b2a      	cmp	r3, #42	; 0x2a
 8019db4:	d135      	bne.n	8019e22 <_vfiprintf_r+0x1ce>
 8019db6:	9b03      	ldr	r3, [sp, #12]
 8019db8:	1d1a      	adds	r2, r3, #4
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	9203      	str	r2, [sp, #12]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	bfb8      	it	lt
 8019dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8019dc6:	3402      	adds	r4, #2
 8019dc8:	9305      	str	r3, [sp, #20]
 8019dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019eb0 <_vfiprintf_r+0x25c>
 8019dce:	7821      	ldrb	r1, [r4, #0]
 8019dd0:	2203      	movs	r2, #3
 8019dd2:	4650      	mov	r0, sl
 8019dd4:	f7e6 faa4 	bl	8000320 <memchr>
 8019dd8:	b140      	cbz	r0, 8019dec <_vfiprintf_r+0x198>
 8019dda:	2340      	movs	r3, #64	; 0x40
 8019ddc:	eba0 000a 	sub.w	r0, r0, sl
 8019de0:	fa03 f000 	lsl.w	r0, r3, r0
 8019de4:	9b04      	ldr	r3, [sp, #16]
 8019de6:	4303      	orrs	r3, r0
 8019de8:	3401      	adds	r4, #1
 8019dea:	9304      	str	r3, [sp, #16]
 8019dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019df0:	482c      	ldr	r0, [pc, #176]	; (8019ea4 <_vfiprintf_r+0x250>)
 8019df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019df6:	2206      	movs	r2, #6
 8019df8:	f7e6 fa92 	bl	8000320 <memchr>
 8019dfc:	2800      	cmp	r0, #0
 8019dfe:	d03f      	beq.n	8019e80 <_vfiprintf_r+0x22c>
 8019e00:	4b29      	ldr	r3, [pc, #164]	; (8019ea8 <_vfiprintf_r+0x254>)
 8019e02:	bb1b      	cbnz	r3, 8019e4c <_vfiprintf_r+0x1f8>
 8019e04:	9b03      	ldr	r3, [sp, #12]
 8019e06:	3307      	adds	r3, #7
 8019e08:	f023 0307 	bic.w	r3, r3, #7
 8019e0c:	3308      	adds	r3, #8
 8019e0e:	9303      	str	r3, [sp, #12]
 8019e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e12:	443b      	add	r3, r7
 8019e14:	9309      	str	r3, [sp, #36]	; 0x24
 8019e16:	e767      	b.n	8019ce8 <_vfiprintf_r+0x94>
 8019e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e1c:	460c      	mov	r4, r1
 8019e1e:	2001      	movs	r0, #1
 8019e20:	e7a5      	b.n	8019d6e <_vfiprintf_r+0x11a>
 8019e22:	2300      	movs	r3, #0
 8019e24:	3401      	adds	r4, #1
 8019e26:	9305      	str	r3, [sp, #20]
 8019e28:	4619      	mov	r1, r3
 8019e2a:	f04f 0c0a 	mov.w	ip, #10
 8019e2e:	4620      	mov	r0, r4
 8019e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e34:	3a30      	subs	r2, #48	; 0x30
 8019e36:	2a09      	cmp	r2, #9
 8019e38:	d903      	bls.n	8019e42 <_vfiprintf_r+0x1ee>
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d0c5      	beq.n	8019dca <_vfiprintf_r+0x176>
 8019e3e:	9105      	str	r1, [sp, #20]
 8019e40:	e7c3      	b.n	8019dca <_vfiprintf_r+0x176>
 8019e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e46:	4604      	mov	r4, r0
 8019e48:	2301      	movs	r3, #1
 8019e4a:	e7f0      	b.n	8019e2e <_vfiprintf_r+0x1da>
 8019e4c:	ab03      	add	r3, sp, #12
 8019e4e:	9300      	str	r3, [sp, #0]
 8019e50:	462a      	mov	r2, r5
 8019e52:	4b16      	ldr	r3, [pc, #88]	; (8019eac <_vfiprintf_r+0x258>)
 8019e54:	a904      	add	r1, sp, #16
 8019e56:	4630      	mov	r0, r6
 8019e58:	f7fb fefe 	bl	8015c58 <_printf_float>
 8019e5c:	4607      	mov	r7, r0
 8019e5e:	1c78      	adds	r0, r7, #1
 8019e60:	d1d6      	bne.n	8019e10 <_vfiprintf_r+0x1bc>
 8019e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e64:	07d9      	lsls	r1, r3, #31
 8019e66:	d405      	bmi.n	8019e74 <_vfiprintf_r+0x220>
 8019e68:	89ab      	ldrh	r3, [r5, #12]
 8019e6a:	059a      	lsls	r2, r3, #22
 8019e6c:	d402      	bmi.n	8019e74 <_vfiprintf_r+0x220>
 8019e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e70:	f7ff fe71 	bl	8019b56 <__retarget_lock_release_recursive>
 8019e74:	89ab      	ldrh	r3, [r5, #12]
 8019e76:	065b      	lsls	r3, r3, #25
 8019e78:	f53f af12 	bmi.w	8019ca0 <_vfiprintf_r+0x4c>
 8019e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019e7e:	e711      	b.n	8019ca4 <_vfiprintf_r+0x50>
 8019e80:	ab03      	add	r3, sp, #12
 8019e82:	9300      	str	r3, [sp, #0]
 8019e84:	462a      	mov	r2, r5
 8019e86:	4b09      	ldr	r3, [pc, #36]	; (8019eac <_vfiprintf_r+0x258>)
 8019e88:	a904      	add	r1, sp, #16
 8019e8a:	4630      	mov	r0, r6
 8019e8c:	f7fc f970 	bl	8016170 <_printf_i>
 8019e90:	e7e4      	b.n	8019e5c <_vfiprintf_r+0x208>
 8019e92:	bf00      	nop
 8019e94:	0801a7e4 	.word	0x0801a7e4
 8019e98:	0801a804 	.word	0x0801a804
 8019e9c:	0801a7c4 	.word	0x0801a7c4
 8019ea0:	0801a774 	.word	0x0801a774
 8019ea4:	0801a77e 	.word	0x0801a77e
 8019ea8:	08015c59 	.word	0x08015c59
 8019eac:	08019c31 	.word	0x08019c31
 8019eb0:	0801a77a 	.word	0x0801a77a

08019eb4 <__swbuf_r>:
 8019eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eb6:	460e      	mov	r6, r1
 8019eb8:	4614      	mov	r4, r2
 8019eba:	4605      	mov	r5, r0
 8019ebc:	b118      	cbz	r0, 8019ec6 <__swbuf_r+0x12>
 8019ebe:	6983      	ldr	r3, [r0, #24]
 8019ec0:	b90b      	cbnz	r3, 8019ec6 <__swbuf_r+0x12>
 8019ec2:	f7ff fd97 	bl	80199f4 <__sinit>
 8019ec6:	4b21      	ldr	r3, [pc, #132]	; (8019f4c <__swbuf_r+0x98>)
 8019ec8:	429c      	cmp	r4, r3
 8019eca:	d12b      	bne.n	8019f24 <__swbuf_r+0x70>
 8019ecc:	686c      	ldr	r4, [r5, #4]
 8019ece:	69a3      	ldr	r3, [r4, #24]
 8019ed0:	60a3      	str	r3, [r4, #8]
 8019ed2:	89a3      	ldrh	r3, [r4, #12]
 8019ed4:	071a      	lsls	r2, r3, #28
 8019ed6:	d52f      	bpl.n	8019f38 <__swbuf_r+0x84>
 8019ed8:	6923      	ldr	r3, [r4, #16]
 8019eda:	b36b      	cbz	r3, 8019f38 <__swbuf_r+0x84>
 8019edc:	6923      	ldr	r3, [r4, #16]
 8019ede:	6820      	ldr	r0, [r4, #0]
 8019ee0:	1ac0      	subs	r0, r0, r3
 8019ee2:	6963      	ldr	r3, [r4, #20]
 8019ee4:	b2f6      	uxtb	r6, r6
 8019ee6:	4283      	cmp	r3, r0
 8019ee8:	4637      	mov	r7, r6
 8019eea:	dc04      	bgt.n	8019ef6 <__swbuf_r+0x42>
 8019eec:	4621      	mov	r1, r4
 8019eee:	4628      	mov	r0, r5
 8019ef0:	f7ff fcec 	bl	80198cc <_fflush_r>
 8019ef4:	bb30      	cbnz	r0, 8019f44 <__swbuf_r+0x90>
 8019ef6:	68a3      	ldr	r3, [r4, #8]
 8019ef8:	3b01      	subs	r3, #1
 8019efa:	60a3      	str	r3, [r4, #8]
 8019efc:	6823      	ldr	r3, [r4, #0]
 8019efe:	1c5a      	adds	r2, r3, #1
 8019f00:	6022      	str	r2, [r4, #0]
 8019f02:	701e      	strb	r6, [r3, #0]
 8019f04:	6963      	ldr	r3, [r4, #20]
 8019f06:	3001      	adds	r0, #1
 8019f08:	4283      	cmp	r3, r0
 8019f0a:	d004      	beq.n	8019f16 <__swbuf_r+0x62>
 8019f0c:	89a3      	ldrh	r3, [r4, #12]
 8019f0e:	07db      	lsls	r3, r3, #31
 8019f10:	d506      	bpl.n	8019f20 <__swbuf_r+0x6c>
 8019f12:	2e0a      	cmp	r6, #10
 8019f14:	d104      	bne.n	8019f20 <__swbuf_r+0x6c>
 8019f16:	4621      	mov	r1, r4
 8019f18:	4628      	mov	r0, r5
 8019f1a:	f7ff fcd7 	bl	80198cc <_fflush_r>
 8019f1e:	b988      	cbnz	r0, 8019f44 <__swbuf_r+0x90>
 8019f20:	4638      	mov	r0, r7
 8019f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f24:	4b0a      	ldr	r3, [pc, #40]	; (8019f50 <__swbuf_r+0x9c>)
 8019f26:	429c      	cmp	r4, r3
 8019f28:	d101      	bne.n	8019f2e <__swbuf_r+0x7a>
 8019f2a:	68ac      	ldr	r4, [r5, #8]
 8019f2c:	e7cf      	b.n	8019ece <__swbuf_r+0x1a>
 8019f2e:	4b09      	ldr	r3, [pc, #36]	; (8019f54 <__swbuf_r+0xa0>)
 8019f30:	429c      	cmp	r4, r3
 8019f32:	bf08      	it	eq
 8019f34:	68ec      	ldreq	r4, [r5, #12]
 8019f36:	e7ca      	b.n	8019ece <__swbuf_r+0x1a>
 8019f38:	4621      	mov	r1, r4
 8019f3a:	4628      	mov	r0, r5
 8019f3c:	f000 f80c 	bl	8019f58 <__swsetup_r>
 8019f40:	2800      	cmp	r0, #0
 8019f42:	d0cb      	beq.n	8019edc <__swbuf_r+0x28>
 8019f44:	f04f 37ff 	mov.w	r7, #4294967295
 8019f48:	e7ea      	b.n	8019f20 <__swbuf_r+0x6c>
 8019f4a:	bf00      	nop
 8019f4c:	0801a7e4 	.word	0x0801a7e4
 8019f50:	0801a804 	.word	0x0801a804
 8019f54:	0801a7c4 	.word	0x0801a7c4

08019f58 <__swsetup_r>:
 8019f58:	4b32      	ldr	r3, [pc, #200]	; (801a024 <__swsetup_r+0xcc>)
 8019f5a:	b570      	push	{r4, r5, r6, lr}
 8019f5c:	681d      	ldr	r5, [r3, #0]
 8019f5e:	4606      	mov	r6, r0
 8019f60:	460c      	mov	r4, r1
 8019f62:	b125      	cbz	r5, 8019f6e <__swsetup_r+0x16>
 8019f64:	69ab      	ldr	r3, [r5, #24]
 8019f66:	b913      	cbnz	r3, 8019f6e <__swsetup_r+0x16>
 8019f68:	4628      	mov	r0, r5
 8019f6a:	f7ff fd43 	bl	80199f4 <__sinit>
 8019f6e:	4b2e      	ldr	r3, [pc, #184]	; (801a028 <__swsetup_r+0xd0>)
 8019f70:	429c      	cmp	r4, r3
 8019f72:	d10f      	bne.n	8019f94 <__swsetup_r+0x3c>
 8019f74:	686c      	ldr	r4, [r5, #4]
 8019f76:	89a3      	ldrh	r3, [r4, #12]
 8019f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f7c:	0719      	lsls	r1, r3, #28
 8019f7e:	d42c      	bmi.n	8019fda <__swsetup_r+0x82>
 8019f80:	06dd      	lsls	r5, r3, #27
 8019f82:	d411      	bmi.n	8019fa8 <__swsetup_r+0x50>
 8019f84:	2309      	movs	r3, #9
 8019f86:	6033      	str	r3, [r6, #0]
 8019f88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019f8c:	81a3      	strh	r3, [r4, #12]
 8019f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019f92:	e03e      	b.n	801a012 <__swsetup_r+0xba>
 8019f94:	4b25      	ldr	r3, [pc, #148]	; (801a02c <__swsetup_r+0xd4>)
 8019f96:	429c      	cmp	r4, r3
 8019f98:	d101      	bne.n	8019f9e <__swsetup_r+0x46>
 8019f9a:	68ac      	ldr	r4, [r5, #8]
 8019f9c:	e7eb      	b.n	8019f76 <__swsetup_r+0x1e>
 8019f9e:	4b24      	ldr	r3, [pc, #144]	; (801a030 <__swsetup_r+0xd8>)
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	bf08      	it	eq
 8019fa4:	68ec      	ldreq	r4, [r5, #12]
 8019fa6:	e7e6      	b.n	8019f76 <__swsetup_r+0x1e>
 8019fa8:	0758      	lsls	r0, r3, #29
 8019faa:	d512      	bpl.n	8019fd2 <__swsetup_r+0x7a>
 8019fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fae:	b141      	cbz	r1, 8019fc2 <__swsetup_r+0x6a>
 8019fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fb4:	4299      	cmp	r1, r3
 8019fb6:	d002      	beq.n	8019fbe <__swsetup_r+0x66>
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7ff f95b 	bl	8019274 <_free_r>
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	6363      	str	r3, [r4, #52]	; 0x34
 8019fc2:	89a3      	ldrh	r3, [r4, #12]
 8019fc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019fc8:	81a3      	strh	r3, [r4, #12]
 8019fca:	2300      	movs	r3, #0
 8019fcc:	6063      	str	r3, [r4, #4]
 8019fce:	6923      	ldr	r3, [r4, #16]
 8019fd0:	6023      	str	r3, [r4, #0]
 8019fd2:	89a3      	ldrh	r3, [r4, #12]
 8019fd4:	f043 0308 	orr.w	r3, r3, #8
 8019fd8:	81a3      	strh	r3, [r4, #12]
 8019fda:	6923      	ldr	r3, [r4, #16]
 8019fdc:	b94b      	cbnz	r3, 8019ff2 <__swsetup_r+0x9a>
 8019fde:	89a3      	ldrh	r3, [r4, #12]
 8019fe0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fe8:	d003      	beq.n	8019ff2 <__swsetup_r+0x9a>
 8019fea:	4621      	mov	r1, r4
 8019fec:	4630      	mov	r0, r6
 8019fee:	f000 f84d 	bl	801a08c <__smakebuf_r>
 8019ff2:	89a0      	ldrh	r0, [r4, #12]
 8019ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ff8:	f010 0301 	ands.w	r3, r0, #1
 8019ffc:	d00a      	beq.n	801a014 <__swsetup_r+0xbc>
 8019ffe:	2300      	movs	r3, #0
 801a000:	60a3      	str	r3, [r4, #8]
 801a002:	6963      	ldr	r3, [r4, #20]
 801a004:	425b      	negs	r3, r3
 801a006:	61a3      	str	r3, [r4, #24]
 801a008:	6923      	ldr	r3, [r4, #16]
 801a00a:	b943      	cbnz	r3, 801a01e <__swsetup_r+0xc6>
 801a00c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a010:	d1ba      	bne.n	8019f88 <__swsetup_r+0x30>
 801a012:	bd70      	pop	{r4, r5, r6, pc}
 801a014:	0781      	lsls	r1, r0, #30
 801a016:	bf58      	it	pl
 801a018:	6963      	ldrpl	r3, [r4, #20]
 801a01a:	60a3      	str	r3, [r4, #8]
 801a01c:	e7f4      	b.n	801a008 <__swsetup_r+0xb0>
 801a01e:	2000      	movs	r0, #0
 801a020:	e7f7      	b.n	801a012 <__swsetup_r+0xba>
 801a022:	bf00      	nop
 801a024:	24000100 	.word	0x24000100
 801a028:	0801a7e4 	.word	0x0801a7e4
 801a02c:	0801a804 	.word	0x0801a804
 801a030:	0801a7c4 	.word	0x0801a7c4

0801a034 <abort>:
 801a034:	b508      	push	{r3, lr}
 801a036:	2006      	movs	r0, #6
 801a038:	f000 f898 	bl	801a16c <raise>
 801a03c:	2001      	movs	r0, #1
 801a03e:	f7e8 fe4f 	bl	8002ce0 <_exit>

0801a042 <__swhatbuf_r>:
 801a042:	b570      	push	{r4, r5, r6, lr}
 801a044:	460e      	mov	r6, r1
 801a046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a04a:	2900      	cmp	r1, #0
 801a04c:	b096      	sub	sp, #88	; 0x58
 801a04e:	4614      	mov	r4, r2
 801a050:	461d      	mov	r5, r3
 801a052:	da08      	bge.n	801a066 <__swhatbuf_r+0x24>
 801a054:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a058:	2200      	movs	r2, #0
 801a05a:	602a      	str	r2, [r5, #0]
 801a05c:	061a      	lsls	r2, r3, #24
 801a05e:	d410      	bmi.n	801a082 <__swhatbuf_r+0x40>
 801a060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a064:	e00e      	b.n	801a084 <__swhatbuf_r+0x42>
 801a066:	466a      	mov	r2, sp
 801a068:	f000 f89c 	bl	801a1a4 <_fstat_r>
 801a06c:	2800      	cmp	r0, #0
 801a06e:	dbf1      	blt.n	801a054 <__swhatbuf_r+0x12>
 801a070:	9a01      	ldr	r2, [sp, #4]
 801a072:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a076:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a07a:	425a      	negs	r2, r3
 801a07c:	415a      	adcs	r2, r3
 801a07e:	602a      	str	r2, [r5, #0]
 801a080:	e7ee      	b.n	801a060 <__swhatbuf_r+0x1e>
 801a082:	2340      	movs	r3, #64	; 0x40
 801a084:	2000      	movs	r0, #0
 801a086:	6023      	str	r3, [r4, #0]
 801a088:	b016      	add	sp, #88	; 0x58
 801a08a:	bd70      	pop	{r4, r5, r6, pc}

0801a08c <__smakebuf_r>:
 801a08c:	898b      	ldrh	r3, [r1, #12]
 801a08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a090:	079d      	lsls	r5, r3, #30
 801a092:	4606      	mov	r6, r0
 801a094:	460c      	mov	r4, r1
 801a096:	d507      	bpl.n	801a0a8 <__smakebuf_r+0x1c>
 801a098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a09c:	6023      	str	r3, [r4, #0]
 801a09e:	6123      	str	r3, [r4, #16]
 801a0a0:	2301      	movs	r3, #1
 801a0a2:	6163      	str	r3, [r4, #20]
 801a0a4:	b002      	add	sp, #8
 801a0a6:	bd70      	pop	{r4, r5, r6, pc}
 801a0a8:	ab01      	add	r3, sp, #4
 801a0aa:	466a      	mov	r2, sp
 801a0ac:	f7ff ffc9 	bl	801a042 <__swhatbuf_r>
 801a0b0:	9900      	ldr	r1, [sp, #0]
 801a0b2:	4605      	mov	r5, r0
 801a0b4:	4630      	mov	r0, r6
 801a0b6:	f7ff f949 	bl	801934c <_malloc_r>
 801a0ba:	b948      	cbnz	r0, 801a0d0 <__smakebuf_r+0x44>
 801a0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0c0:	059a      	lsls	r2, r3, #22
 801a0c2:	d4ef      	bmi.n	801a0a4 <__smakebuf_r+0x18>
 801a0c4:	f023 0303 	bic.w	r3, r3, #3
 801a0c8:	f043 0302 	orr.w	r3, r3, #2
 801a0cc:	81a3      	strh	r3, [r4, #12]
 801a0ce:	e7e3      	b.n	801a098 <__smakebuf_r+0xc>
 801a0d0:	4b0d      	ldr	r3, [pc, #52]	; (801a108 <__smakebuf_r+0x7c>)
 801a0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a0d4:	89a3      	ldrh	r3, [r4, #12]
 801a0d6:	6020      	str	r0, [r4, #0]
 801a0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a0dc:	81a3      	strh	r3, [r4, #12]
 801a0de:	9b00      	ldr	r3, [sp, #0]
 801a0e0:	6163      	str	r3, [r4, #20]
 801a0e2:	9b01      	ldr	r3, [sp, #4]
 801a0e4:	6120      	str	r0, [r4, #16]
 801a0e6:	b15b      	cbz	r3, 801a100 <__smakebuf_r+0x74>
 801a0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	f000 f86b 	bl	801a1c8 <_isatty_r>
 801a0f2:	b128      	cbz	r0, 801a100 <__smakebuf_r+0x74>
 801a0f4:	89a3      	ldrh	r3, [r4, #12]
 801a0f6:	f023 0303 	bic.w	r3, r3, #3
 801a0fa:	f043 0301 	orr.w	r3, r3, #1
 801a0fe:	81a3      	strh	r3, [r4, #12]
 801a100:	89a0      	ldrh	r0, [r4, #12]
 801a102:	4305      	orrs	r5, r0
 801a104:	81a5      	strh	r5, [r4, #12]
 801a106:	e7cd      	b.n	801a0a4 <__smakebuf_r+0x18>
 801a108:	0801998d 	.word	0x0801998d

0801a10c <_malloc_usable_size_r>:
 801a10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a110:	1f18      	subs	r0, r3, #4
 801a112:	2b00      	cmp	r3, #0
 801a114:	bfbc      	itt	lt
 801a116:	580b      	ldrlt	r3, [r1, r0]
 801a118:	18c0      	addlt	r0, r0, r3
 801a11a:	4770      	bx	lr

0801a11c <_raise_r>:
 801a11c:	291f      	cmp	r1, #31
 801a11e:	b538      	push	{r3, r4, r5, lr}
 801a120:	4604      	mov	r4, r0
 801a122:	460d      	mov	r5, r1
 801a124:	d904      	bls.n	801a130 <_raise_r+0x14>
 801a126:	2316      	movs	r3, #22
 801a128:	6003      	str	r3, [r0, #0]
 801a12a:	f04f 30ff 	mov.w	r0, #4294967295
 801a12e:	bd38      	pop	{r3, r4, r5, pc}
 801a130:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a132:	b112      	cbz	r2, 801a13a <_raise_r+0x1e>
 801a134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a138:	b94b      	cbnz	r3, 801a14e <_raise_r+0x32>
 801a13a:	4620      	mov	r0, r4
 801a13c:	f000 f830 	bl	801a1a0 <_getpid_r>
 801a140:	462a      	mov	r2, r5
 801a142:	4601      	mov	r1, r0
 801a144:	4620      	mov	r0, r4
 801a146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a14a:	f000 b817 	b.w	801a17c <_kill_r>
 801a14e:	2b01      	cmp	r3, #1
 801a150:	d00a      	beq.n	801a168 <_raise_r+0x4c>
 801a152:	1c59      	adds	r1, r3, #1
 801a154:	d103      	bne.n	801a15e <_raise_r+0x42>
 801a156:	2316      	movs	r3, #22
 801a158:	6003      	str	r3, [r0, #0]
 801a15a:	2001      	movs	r0, #1
 801a15c:	e7e7      	b.n	801a12e <_raise_r+0x12>
 801a15e:	2400      	movs	r4, #0
 801a160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a164:	4628      	mov	r0, r5
 801a166:	4798      	blx	r3
 801a168:	2000      	movs	r0, #0
 801a16a:	e7e0      	b.n	801a12e <_raise_r+0x12>

0801a16c <raise>:
 801a16c:	4b02      	ldr	r3, [pc, #8]	; (801a178 <raise+0xc>)
 801a16e:	4601      	mov	r1, r0
 801a170:	6818      	ldr	r0, [r3, #0]
 801a172:	f7ff bfd3 	b.w	801a11c <_raise_r>
 801a176:	bf00      	nop
 801a178:	24000100 	.word	0x24000100

0801a17c <_kill_r>:
 801a17c:	b538      	push	{r3, r4, r5, lr}
 801a17e:	4d07      	ldr	r5, [pc, #28]	; (801a19c <_kill_r+0x20>)
 801a180:	2300      	movs	r3, #0
 801a182:	4604      	mov	r4, r0
 801a184:	4608      	mov	r0, r1
 801a186:	4611      	mov	r1, r2
 801a188:	602b      	str	r3, [r5, #0]
 801a18a:	f7e8 fd99 	bl	8002cc0 <_kill>
 801a18e:	1c43      	adds	r3, r0, #1
 801a190:	d102      	bne.n	801a198 <_kill_r+0x1c>
 801a192:	682b      	ldr	r3, [r5, #0]
 801a194:	b103      	cbz	r3, 801a198 <_kill_r+0x1c>
 801a196:	6023      	str	r3, [r4, #0]
 801a198:	bd38      	pop	{r3, r4, r5, pc}
 801a19a:	bf00      	nop
 801a19c:	24003208 	.word	0x24003208

0801a1a0 <_getpid_r>:
 801a1a0:	f7e8 bd86 	b.w	8002cb0 <_getpid>

0801a1a4 <_fstat_r>:
 801a1a4:	b538      	push	{r3, r4, r5, lr}
 801a1a6:	4d07      	ldr	r5, [pc, #28]	; (801a1c4 <_fstat_r+0x20>)
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	4608      	mov	r0, r1
 801a1ae:	4611      	mov	r1, r2
 801a1b0:	602b      	str	r3, [r5, #0]
 801a1b2:	f7e8 fde4 	bl	8002d7e <_fstat>
 801a1b6:	1c43      	adds	r3, r0, #1
 801a1b8:	d102      	bne.n	801a1c0 <_fstat_r+0x1c>
 801a1ba:	682b      	ldr	r3, [r5, #0]
 801a1bc:	b103      	cbz	r3, 801a1c0 <_fstat_r+0x1c>
 801a1be:	6023      	str	r3, [r4, #0]
 801a1c0:	bd38      	pop	{r3, r4, r5, pc}
 801a1c2:	bf00      	nop
 801a1c4:	24003208 	.word	0x24003208

0801a1c8 <_isatty_r>:
 801a1c8:	b538      	push	{r3, r4, r5, lr}
 801a1ca:	4d06      	ldr	r5, [pc, #24]	; (801a1e4 <_isatty_r+0x1c>)
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	4604      	mov	r4, r0
 801a1d0:	4608      	mov	r0, r1
 801a1d2:	602b      	str	r3, [r5, #0]
 801a1d4:	f7e8 fde3 	bl	8002d9e <_isatty>
 801a1d8:	1c43      	adds	r3, r0, #1
 801a1da:	d102      	bne.n	801a1e2 <_isatty_r+0x1a>
 801a1dc:	682b      	ldr	r3, [r5, #0]
 801a1de:	b103      	cbz	r3, 801a1e2 <_isatty_r+0x1a>
 801a1e0:	6023      	str	r3, [r4, #0]
 801a1e2:	bd38      	pop	{r3, r4, r5, pc}
 801a1e4:	24003208 	.word	0x24003208

0801a1e8 <_init>:
 801a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ea:	bf00      	nop
 801a1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1ee:	bc08      	pop	{r3}
 801a1f0:	469e      	mov	lr, r3
 801a1f2:	4770      	bx	lr

0801a1f4 <_fini>:
 801a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1f6:	bf00      	nop
 801a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1fa:	bc08      	pop	{r3}
 801a1fc:	469e      	mov	lr, r3
 801a1fe:	4770      	bx	lr
