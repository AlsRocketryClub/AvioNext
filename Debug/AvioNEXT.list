
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b21c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0801b4f0  0801b4f0  0002b4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bc5c  0801bc5c  0002bc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bc64  0801bc64  0002bc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bc68  0801bc68  0002bc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002fc  24000000  0801bc6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002650  24000300  0801bf68  00030300  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24002950  0801bf68  00032950  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000391f4  00000000  00000000  0003032a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000064b9  00000000  00000000  0006951e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bf0  00000000  00000000  0006f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002998  00000000  00000000  000725c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f498  00000000  00000000  00074f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ac48  00000000  00000000  000b43f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ecc9  00000000  00000000  000ef040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026dd09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d35c  00000000  00000000  0026dd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000300 	.word	0x24000300
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801b4d4 	.word	0x0801b4d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000304 	.word	0x24000304
 800030c:	0801b4d4 	.word	0x0801b4d4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ac4:	f006 fe66 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000ad0:	f00e f808 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000ad4:	1db9      	adds	r1, r7, #6
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000adc:	f00e f802 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ae8:	f006 fe54 	bl	8007794 <HAL_GPIO_WritePin>

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58020c00 	.word	0x58020c00
 8000af8:	240006e4 	.word	0x240006e4

08000afc <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b18:	f006 fe3c 	bl	8007794 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b1c:	1df9      	adds	r1, r7, #7
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2201      	movs	r2, #1
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b24:	f00d ffde 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b28:	f107 010f 	add.w	r1, r7, #15
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b32:	f00e f9d3 	bl	800eedc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b3e:	f006 fe29 	bl	8007794 <HAL_GPIO_WritePin>

	return reg_value;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58020c00 	.word	0x58020c00
 8000b50:	240006e4 	.word	0x240006e4

08000b54 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b6c:	f006 fe12 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2201      	movs	r2, #1
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b78:	f00d ffb4 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b7c:	1db9      	adds	r1, r7, #6
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b84:	f00d ffae 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b90:	f006 fe00 	bl	8007794 <HAL_GPIO_WritePin>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	240006e4 	.word	0x240006e4
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bae:	2022      	movs	r0, #34	; 0x22
 8000bb0:	f7ff ffa4 	bl	8000afc <LG2_Read_Register>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bb8:	2023      	movs	r0, #35	; 0x23
 8000bba:	f7ff ff9f 	bl	8000afc <LG2_Read_Register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c08 <LG2_Get_Gyro_X+0x60>
 8000be4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c10 <LG2_Get_Gyro_X+0x68>
 8000bec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	ee07 3a90 	vmov	s15, r3
}
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40418000 	.word	0x40418000
 8000c10:	00000000 	.word	0x00000000
 8000c14:	408f4000 	.word	0x408f4000

08000c18 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c1e:	2024      	movs	r0, #36	; 0x24
 8000c20:	f7ff ff6c 	bl	8000afc <LG2_Read_Register>
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f7ff ff67 	bl	8000afc <LG2_Read_Register>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c50:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c78 <LG2_Get_Gyro_Y+0x60>
 8000c54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c58:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c80 <LG2_Get_Gyro_Y+0x68>
 8000c5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c64:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	ee07 3a90 	vmov	s15, r3
}
 8000c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	40418000 	.word	0x40418000
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000

08000c88 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f7ff ff34 	bl	8000afc <LG2_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c98:	2027      	movs	r0, #39	; 0x27
 8000c9a:	f7ff ff2f 	bl	8000afc <LG2_Read_Register>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000cb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x60>
 8000cc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cc8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000cf0 <LG2_Get_Gyro_Z+0x68>
 8000ccc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	ee07 3a90 	vmov	s15, r3
}
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40418000 	.word	0x40418000
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	408f4000 	.word	0x408f4000

08000cf8 <LoRA_Read_Register>:





uint8_t LoRA_Read_Register(uint8_t addr){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoRA_Read_Register+0x48>)
 8000d0a:	f006 fd43 	bl	8007794 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d0e:	1df9      	adds	r1, r7, #7
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	2201      	movs	r2, #1
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <LoRA_Read_Register+0x4c>)
 8000d16:	f00d fee5 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d1a:	f107 010f 	add.w	r1, r7, #15
 8000d1e:	2364      	movs	r3, #100	; 0x64
 8000d20:	2201      	movs	r2, #1
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <LoRA_Read_Register+0x4c>)
 8000d24:	f00e f8da 	bl	800eedc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <LoRA_Read_Register+0x48>)
 8000d30:	f006 fd30 	bl	8007794 <HAL_GPIO_WritePin>

	return reg_value;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	58020000 	.word	0x58020000
 8000d44:	2400076c 	.word	0x2400076c

08000d48 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <LoRA_Write_Register+0x54>)
 8000d6a:	f006 fd13 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d6e:	1df9      	adds	r1, r7, #7
 8000d70:	2364      	movs	r3, #100	; 0x64
 8000d72:	2201      	movs	r2, #1
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <LoRA_Write_Register+0x58>)
 8000d76:	f00d feb5 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d7a:	1db9      	adds	r1, r7, #6
 8000d7c:	2364      	movs	r3, #100	; 0x64
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <LoRA_Write_Register+0x58>)
 8000d82:	f00d feaf 	bl	800eae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <LoRA_Write_Register+0x54>)
 8000d8e:	f006 fd01 	bl	8007794 <HAL_GPIO_WritePin>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58020000 	.word	0x58020000
 8000da0:	2400076c 	.word	0x2400076c

08000da4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff ffcc 	bl	8000d48 <LoRA_Write_Register>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	17c8      	asrs	r0, r1, #31
 8000dc0:	460a      	mov	r2, r1
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	1355      	asrs	r5, r2, #13
 8000dc6:	04d4      	lsls	r4, r2, #19
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <LoRA_set_frequency+0x78>)
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	4620      	mov	r0, r4
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff fcb1 	bl	8000738 <__aeabi_uldivmod>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	0c02      	lsrs	r2, r0, #16
 8000dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df0:	0c0b      	lsrs	r3, r1, #16
 8000df2:	b2d3      	uxtb	r3, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	2006      	movs	r0, #6
 8000df8:	f7ff ffa6 	bl	8000d48 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000dfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	0a02      	lsrs	r2, r0, #8
 8000e0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e0e:	0a0b      	lsrs	r3, r1, #8
 8000e10:	b2d3      	uxtb	r3, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	2007      	movs	r0, #7
 8000e16:	f7ff ff97 	bl	8000d48 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e1a:	7a3b      	ldrb	r3, [r7, #8]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f7ff ff92 	bl	8000d48 <LoRA_Write_Register>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2c:	01e84800 	.word	0x01e84800

08000e30 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e3a:	231b      	movs	r3, #27
 8000e3c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b78      	cmp	r3, #120	; 0x78
 8000e42:	d809      	bhi.n	8000e58 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	3b2d      	subs	r3, #45	; 0x2d
 8000e48:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <LoRA_setOCP+0x60>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1052      	asrs	r2, r2, #1
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e00b      	b.n	8000e70 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e5c:	d808      	bhi.n	8000e70 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	331e      	adds	r3, #30
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoRA_setOCP+0x60>)
 8000e64:	fb82 1203 	smull	r1, r2, r2, r3
 8000e68:	1092      	asrs	r2, r2, #2
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4619      	mov	r1, r3
 8000e80:	200b      	movs	r0, #11
 8000e82:	f7ff ff61 	bl	8000d48 <LoRA_Write_Register>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	66666667 	.word	0x66666667

08000e94 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b11      	cmp	r3, #17
 8000ea0:	dd0f      	ble.n	8000ec2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b14      	cmp	r3, #20
 8000ea6:	dd01      	ble.n	8000eac <LoRA_setTxPower+0x18>
        level = 20;
 8000ea8:	2314      	movs	r3, #20
 8000eaa:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b03      	subs	r3, #3
 8000eb0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000eb2:	2187      	movs	r1, #135	; 0x87
 8000eb4:	204d      	movs	r0, #77	; 0x4d
 8000eb6:	f7ff ff47 	bl	8000d48 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eba:	208c      	movs	r0, #140	; 0x8c
 8000ebc:	f7ff ffb8 	bl	8000e30 <LoRA_setOCP>
 8000ec0:	e00b      	b.n	8000eda <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	dc01      	bgt.n	8000ecc <LoRA_setTxPower+0x38>
        level = 2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000ecc:	2184      	movs	r1, #132	; 0x84
 8000ece:	204d      	movs	r0, #77	; 0x4d
 8000ed0:	f7ff ff3a 	bl	8000d48 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f7ff ffab 	bl	8000e30 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	2009      	movs	r0, #9
 8000ef0:	f7ff ff2a 	bl	8000d48 <LoRA_Write_Register>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LoRA_begin>:

void LoRA_explicit_header_mode(){
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09c      	sub	sp, #112	; 0x70
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2101      	movs	r1, #1
 8000f08:	4822      	ldr	r0, [pc, #136]	; (8000f94 <LoRA_begin+0x98>)
 8000f0a:	f006 fc43 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <LoRA_begin+0x9c>)
 8000f16:	f006 fc3d 	bl	8007794 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f1a:	2042      	movs	r0, #66	; 0x42
 8000f1c:	f7ff feec 	bl	8000cf8 <LoRA_Read_Register>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f26:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	491b      	ldr	r1, [pc, #108]	; (8000f9c <LoRA_begin+0xa0>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f016 fc5f 	bl	80177f4 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f9e8 	bl	8000310 <strlen>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f015 f971 	bl	8016230 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f4e:	f7ff ff29 	bl	8000da4 <LoRA_sleep>
	LoRA_set_frequency(frequency);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff2e 	bl	8000db4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff fef4 	bl	8000d48 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	200e      	movs	r0, #14
 8000f64:	f7ff fef0 	bl	8000d48 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000f68:	200c      	movs	r0, #12
 8000f6a:	f7ff fec5 	bl	8000cf8 <LoRA_Read_Register>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f043 0303 	orr.w	r3, r3, #3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f7ff fee5 	bl	8000d48 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000f7e:	2104      	movs	r1, #4
 8000f80:	2026      	movs	r0, #38	; 0x26
 8000f82:	f7ff fee1 	bl	8000d48 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000f86:	2011      	movs	r0, #17
 8000f88:	f7ff ff84 	bl	8000e94 <LoRA_setTxPower>

}
 8000f8c:	bf00      	nop
 8000f8e:	3770      	adds	r7, #112	; 0x70
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	58020c00 	.word	0x58020c00
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	0801b4f0 	.word	0x0801b4f0

08000fa0 <setServo>:

		//delay
	}
}

void setServo(int servoNum, float angle) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 180)));
 8000fac:	ed97 7a00 	vldr	s14, [r7]
 8000fb0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001020 <setServo+0x80>
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001024 <setServo+0x84>
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001028 <setServo+0x88>
 8000fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fcc:	ee17 3a90 	vmov	r3, s15
 8000fd0:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d81a      	bhi.n	8001010 <setServo+0x70>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <setServo+0x40>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	08000ff9 	.word	0x08000ff9
 8000fe8:	08001001 	.word	0x08001001
 8000fec:	08001009 	.word	0x08001009
	case 1:
		TIM4->CCR4 = timerVal;
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <setServo+0x8c>)
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000ff6:	e00c      	b.n	8001012 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <setServo+0x8c>)
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000ffe:	e008      	b.n	8001012 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <setServo+0x8c>)
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8001006:	e004      	b.n	8001012 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <setServo+0x8c>)
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800100e:	e000      	b.n	8001012 <setServo+0x72>

	default:
		break;
 8001010:	bf00      	nop
	}
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	43340000 	.word	0x43340000
 8001024:	457a0000 	.word	0x457a0000
 8001028:	453b8000 	.word	0x453b8000
 800102c:	40000800 	.word	0x40000800

08001030 <multiplyQuat>:
	setLEDs();
	return 0;
}

double x[4];
void multiplyQuat(double r[4], double s[4]) {
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	float temp[4];
	temp[0] = r[0] * s[0] - r[1] * s[1] - r[2] * s[2] - r[3] * s[3];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 6b00 	vldr	d6, [r3]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	ed93 7b00 	vldr	d7, [r3]
 8001046:	ee26 6b07 	vmul.f64	d6, d6, d7
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3308      	adds	r3, #8
 800104e:	ed93 5b00 	vldr	d5, [r3]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	3308      	adds	r3, #8
 8001056:	ed93 7b00 	vldr	d7, [r3]
 800105a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800105e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3310      	adds	r3, #16
 8001066:	ed93 5b00 	vldr	d5, [r3]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	3310      	adds	r3, #16
 800106e:	ed93 7b00 	vldr	d7, [r3]
 8001072:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001076:	ee36 6b47 	vsub.f64	d6, d6, d7
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3318      	adds	r3, #24
 800107e:	ed93 5b00 	vldr	d5, [r3]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3318      	adds	r3, #24
 8001086:	ed93 7b00 	vldr	d7, [r3]
 800108a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800108e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001092:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001096:	edc7 7a03 	vstr	s15, [r7, #12]
	temp[1] = r[0] * s[1] + r[1] * s[0] - r[2] * s[3] + r[3] * s[2];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ed93 6b00 	vldr	d6, [r3]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	3308      	adds	r3, #8
 80010a4:	ed93 7b00 	vldr	d7, [r3]
 80010a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3308      	adds	r3, #8
 80010b0:	ed93 5b00 	vldr	d5, [r3]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	ed93 7b00 	vldr	d7, [r3]
 80010ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3310      	adds	r3, #16
 80010c6:	ed93 5b00 	vldr	d5, [r3]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3318      	adds	r3, #24
 80010ce:	ed93 7b00 	vldr	d7, [r3]
 80010d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3318      	adds	r3, #24
 80010de:	ed93 5b00 	vldr	d5, [r3]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3310      	adds	r3, #16
 80010e6:	ed93 7b00 	vldr	d7, [r3]
 80010ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f6:	edc7 7a04 	vstr	s15, [r7, #16]
	temp[2] = r[0] * s[2] + r[1] * s[3] + r[2] * s[0] - r[3] * s[1];
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	ed93 6b00 	vldr	d6, [r3]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3310      	adds	r3, #16
 8001104:	ed93 7b00 	vldr	d7, [r3]
 8001108:	ee26 6b07 	vmul.f64	d6, d6, d7
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3308      	adds	r3, #8
 8001110:	ed93 5b00 	vldr	d5, [r3]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3318      	adds	r3, #24
 8001118:	ed93 7b00 	vldr	d7, [r3]
 800111c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001120:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3310      	adds	r3, #16
 8001128:	ed93 5b00 	vldr	d5, [r3]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	ed93 7b00 	vldr	d7, [r3]
 8001132:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001136:	ee36 6b07 	vadd.f64	d6, d6, d7
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3318      	adds	r3, #24
 800113e:	ed93 5b00 	vldr	d5, [r3]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	3308      	adds	r3, #8
 8001146:	ed93 7b00 	vldr	d7, [r3]
 800114a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800114e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001152:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001156:	edc7 7a05 	vstr	s15, [r7, #20]
	temp[3] = r[0] * s[3] - r[1] * s[2] + r[2] * s[1] + r[3] * s[0];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	ed93 6b00 	vldr	d6, [r3]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3318      	adds	r3, #24
 8001164:	ed93 7b00 	vldr	d7, [r3]
 8001168:	ee26 6b07 	vmul.f64	d6, d6, d7
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3308      	adds	r3, #8
 8001170:	ed93 5b00 	vldr	d5, [r3]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3310      	adds	r3, #16
 8001178:	ed93 7b00 	vldr	d7, [r3]
 800117c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001180:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3310      	adds	r3, #16
 8001188:	ed93 5b00 	vldr	d5, [r3]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3308      	adds	r3, #8
 8001190:	ed93 7b00 	vldr	d7, [r3]
 8001194:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001198:	ee36 6b07 	vadd.f64	d6, d6, d7
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3318      	adds	r3, #24
 80011a0:	ed93 5b00 	vldr	d5, [r3]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	ed93 7b00 	vldr	d7, [r3]
 80011aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b6:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0; i < 4; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	e011      	b.n	80011e4 <multiplyQuat+0x1b4>
		x[i] = temp[i];
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	3320      	adds	r3, #32
 80011c6:	443b      	add	r3, r7
 80011c8:	3b14      	subs	r3, #20
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <multiplyQuat+0x1c8>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 4; i++) {
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	ddea      	ble.n	80011c0 <multiplyQuat+0x190>
	}
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	24000cf0 	.word	0x24000cf0
 80011fc:	00000000 	.word	0x00000000

08001200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8001206:	af06      	add	r7, sp, #24
	/* USER CODE BEGIN 1 */

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <main+0x140>)
 800120a:	f507 7465 	add.w	r4, r7, #916	; 0x394
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	c403      	stmia	r4!, {r0, r1}
 800121a:	7022      	strb	r2, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800121c:	f002 fb8a 	bl	8003934 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001220:	f000 fb00 	bl	8001824 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001224:	f000 fb82 	bl	800192c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001228:	f001 f90a 	bl	8002440 <MX_GPIO_Init>
	MX_DMA_Init();
 800122c:	f001 f8a8 	bl	8002380 <MX_DMA_Init>
	MX_SPI3_Init();
 8001230:	f000 fe02 	bl	8001e38 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001234:	f000 fc92 	bl	8001b5c <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001238:	f001 f856 	bl	80022e8 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 800123c:	f000 fba8 	bl	8001990 <MX_ADC1_Init>
	MX_TIM4_Init();
 8001240:	f000 ff0c 	bl	800205c <MX_TIM4_Init>
	MX_ADC3_Init();
 8001244:	f000 fc1c 	bl	8001a80 <MX_ADC3_Init>
	MX_SPI2_Init();
 8001248:	f000 fda0 	bl	8001d8c <MX_SPI2_Init>
	MX_I2C2_Init();
 800124c:	f000 fcea 	bl	8001c24 <MX_I2C2_Init>
	MX_TIM2_Init();
 8001250:	f000 fe48 	bl	8001ee4 <MX_TIM2_Init>
	MX_TIM5_Init();
 8001254:	f000 ff7e 	bl	8002154 <MX_TIM5_Init>
	MX_TIM3_Init();
 8001258:	f000 fe9c 	bl	8001f94 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 800125c:	f014 ff28 	bl	80160b0 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 8001260:	f000 fd3e 	bl	8001ce0 <MX_SPI1_Init>
	MX_UART4_Init();
 8001264:	f000 fff4 	bl	8002250 <MX_UART4_Init>
	MX_FATFS_Init();
 8001268:	f012 fcb6 	bl	8013bd8 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 800126c:	f000 fd1a 	bl	8001ca4 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 8001270:	f000 ffca 	bl	8002208 <MX_TIM13_Init>
	/* USER CODE BEGIN 2 */

	if (MAX_M10s_init(&hi2c2))
 8001274:	4833      	ldr	r0, [pc, #204]	; (8001344 <main+0x144>)
 8001276:	f001 fa83 	bl	8002780 <MAX_M10s_init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <main+0x84>
		Error_Handler();
 8001280:	f001 fa42 	bl	8002708 <Error_Handler>

	//MAX_M10S_init(&hi2c2);
	const int MAX = 50;
 8001284:	2332      	movs	r3, #50	; 0x32
 8001286:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	const double SPEED = 2.0 / 2000;
 800128a:	a32b      	add	r3, pc, #172	; (adr r3, 8001338 <main+0x138>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
	const double g_offset = 1;
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <main+0x148>)
 80012aa:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
	const double b_offset = 2;
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b6:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80012ba:	213c      	movs	r1, #60	; 0x3c
 80012bc:	2010      	movs	r0, #16
 80012be:	f7ff fc49 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01101000); //Gyroscope setup - CTRL2_G
 80012c2:	2168      	movs	r1, #104	; 0x68
 80012c4:	2011      	movs	r0, #17
 80012c6:	f7ff fc45 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00001100); //disables I2C - CTRL4_C
 80012ca:	210c      	movs	r1, #12
 80012cc:	2013      	movs	r0, #19
 80012ce:	f7ff fc41 	bl	8000b54 <LG2_Write_Register>

	HAL_Delay(3000);
 80012d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012d6:	f002 fbbf 	bl	8003a58 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80012da:	21bf      	movs	r1, #191	; 0xbf
 80012dc:	201c      	movs	r0, #28
 80012de:	f7ff fbe5 	bl	8000aac <HG2_Write_Register>
	HAL_Delay(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f002 fbb8 	bl	8003a58 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80012e8:	2158      	movs	r1, #88	; 0x58
 80012ea:	201b      	movs	r0, #27
 80012ec:	f7ff fbde 	bl	8000aac <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80012f0:	21d8      	movs	r1, #216	; 0xd8
 80012f2:	201b      	movs	r0, #27
 80012f4:	f7ff fbda 	bl	8000aac <HG2_Write_Register>

	float rotZ = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
	uint32_t lastTime = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

	float calOmegaX = 0;
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 800130e:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001310:	f04f 0300 	mov.w	r3, #0
 8001314:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001318:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001322:	6013      	str	r3, [r2, #0]
	HAL_Delay(2000);
 8001324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001328:	f002 fb96 	bl	8003a58 <HAL_Delay>
	for (int i = 0; i < 500; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8001332:	e03f      	b.n	80013b4 <main+0x1b4>
 8001334:	f3af 8000 	nop.w
 8001338:	d2f1a9fc 	.word	0xd2f1a9fc
 800133c:	3f50624d 	.word	0x3f50624d
 8001340:	0801b518 	.word	0x0801b518
 8001344:	2400058c 	.word	0x2400058c
 8001348:	3ff00000 	.word	0x3ff00000
 800134c:	43fa0000 	.word	0x43fa0000
		if (LG2_Read_Register(0x1E) | (1 << 1)) {
 8001350:	201e      	movs	r0, #30
 8001352:	f7ff fbd3 	bl	8000afc <LG2_Read_Register>
			calOmegaX += LG2_Get_Gyro_X();
 8001356:	f7ff fc27 	bl	8000ba8 <LG2_Get_Gyro_X>
 800135a:	eeb0 7a40 	vmov.f32	s14, s0
 800135e:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800136e:	edc3 7a00 	vstr	s15, [r3]
			calOmegaY += LG2_Get_Gyro_Y();
 8001372:	f7ff fc51 	bl	8000c18 <LG2_Get_Gyro_Y>
 8001376:	eeb0 7a40 	vmov.f32	s14, s0
 800137a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001386:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800138a:	edc3 7a00 	vstr	s15, [r3]
			calOmegaZ += LG2_Get_Gyro_Z();
 800138e:	f7ff fc7b 	bl	8000c88 <LG2_Get_Gyro_Z>
 8001392:	eeb0 7a40 	vmov.f32	s14, s0
 8001396:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80013a6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 500; i++) {
 80013aa:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80013ae:	3301      	adds	r3, #1
 80013b0:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80013b4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80013b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013bc:	dbc8      	blt.n	8001350 <main+0x150>
		}

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80013be:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 800134c <main+0x14c>
 80013ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ce:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80013d2:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80013d6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 800134c <main+0x14c>
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80013ea:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80013ee:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 800134c <main+0x14c>
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001402:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2101      	movs	r1, #1
 800140a:	48e5      	ldr	r0, [pc, #916]	; (80017a0 <main+0x5a0>)
 800140c:	f006 f9c2 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001410:	20c8      	movs	r0, #200	; 0xc8
 8001412:	f002 fb21 	bl	8003a58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2101      	movs	r1, #1
 800141a:	48e1      	ldr	r0, [pc, #900]	; (80017a0 <main+0x5a0>)
 800141c:	f006 f9ba 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001420:	20c8      	movs	r0, #200	; 0xc8
 8001422:	f002 fb19 	bl	8003a58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	2101      	movs	r1, #1
 800142a:	48dd      	ldr	r0, [pc, #884]	; (80017a0 <main+0x5a0>)
 800142c:	f006 f9b2 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001430:	20c8      	movs	r0, #200	; 0xc8
 8001432:	f002 fb11 	bl	8003a58 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	2104      	movs	r1, #4
 800143a:	48da      	ldr	r0, [pc, #872]	; (80017a4 <main+0x5a4>)
 800143c:	f006 f9aa 	bl	8007794 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	2108      	movs	r1, #8
 8001444:	48d7      	ldr	r0, [pc, #860]	; (80017a4 <main+0x5a4>)
 8001446:	f006 f9a5 	bl	8007794 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800144a:	2100      	movs	r1, #0
 800144c:	48d6      	ldr	r0, [pc, #856]	; (80017a8 <main+0x5a8>)
 800144e:	f00e f8eb 	bl	800f628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001452:	2104      	movs	r1, #4
 8001454:	48d4      	ldr	r0, [pc, #848]	; (80017a8 <main+0x5a8>)
 8001456:	f00e f8e7 	bl	800f628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800145a:	2108      	movs	r1, #8
 800145c:	48d2      	ldr	r0, [pc, #840]	; (80017a8 <main+0x5a8>)
 800145e:	f00e f8e3 	bl	800f628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001462:	210c      	movs	r1, #12
 8001464:	48d0      	ldr	r0, [pc, #832]	; (80017a8 <main+0x5a8>)
 8001466:	f00e f8df 	bl	800f628 <HAL_TIM_PWM_Start>

	setServo(1, 90);
 800146a:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 80017ac <main+0x5ac>
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fd96 	bl	8000fa0 <setServo>
	setServo(2, 180);
 8001474:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80017b0 <main+0x5b0>
 8001478:	2002      	movs	r0, #2
 800147a:	f7ff fd91 	bl	8000fa0 <setServo>
	setServo(3, 0);
 800147e:	ed9f 0acd 	vldr	s0, [pc, #820]	; 80017b4 <main+0x5b4>
 8001482:	2003      	movs	r0, #3
 8001484:	f7ff fd8c 	bl	8000fa0 <setServo>
	setServo(4, 45);
 8001488:	ed9f 0acb 	vldr	s0, [pc, #812]	; 80017b8 <main+0x5b8>
 800148c:	2004      	movs	r0, #4
 800148e:	f7ff fd87 	bl	8000fa0 <setServo>

	LoRA_begin(868000000);
 8001492:	48ca      	ldr	r0, [pc, #808]	; (80017bc <main+0x5bc>)
 8001494:	f7ff fd32 	bl	8000efc <LoRA_begin>
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);

	int connected = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
	long last_packet = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
	int ARMED = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	while (1) {

		char state[50] = "DISARMED";
 80014aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014ae:	f5a3 747f 	sub.w	r4, r3, #1020	; 0x3fc
 80014b2:	4ac3      	ldr	r2, [pc, #780]	; (80017c0 <main+0x5c0>)
 80014b4:	4623      	mov	r3, r4
 80014b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b8:	c303      	stmia	r3!, {r0, r1}
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	f104 0309 	add.w	r3, r4, #9
 80014c0:	2229      	movs	r2, #41	; 0x29
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f015 fb3f 	bl	8016b48 <memset>
		char command[50];
		char acknowledge[50];
		char recieved_packet[50];
		char response_packet[50];
		char sendMessage[50];
		int last = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		int packetId;
		char communication_state[50] = "RECIEVING";
 80014d0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014d4:	f5a3 7472 	sub.w	r4, r3, #968	; 0x3c8
 80014d8:	4aba      	ldr	r2, [pc, #744]	; (80017c4 <main+0x5c4>)
 80014da:	4623      	mov	r3, r4
 80014dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80014de:	c303      	stmia	r3!, {r0, r1}
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	f104 030a 	add.w	r3, r4, #10
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f015 fb2c 	bl	8016b48 <memset>
		int isReceived = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

		x[0] = 0;
 80014f6:	49b4      	ldr	r1, [pc, #720]	; (80017c8 <main+0x5c8>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c1 2300 	strd	r2, r3, [r1]
		x[1] = 1;
 8001504:	49b0      	ldr	r1, [pc, #704]	; (80017c8 <main+0x5c8>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4bb0      	ldr	r3, [pc, #704]	; (80017cc <main+0x5cc>)
 800150c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		x[2] = 0;
 8001510:	49ad      	ldr	r1, [pc, #692]	; (80017c8 <main+0x5c8>)
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		x[3] = 0;
 800151e:	49aa      	ldr	r1, [pc, #680]	; (80017c8 <main+0x5c8>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9c1 2306 	strd	r2, r3, [r1, #24]
		double rotQuaternion[4];
		uint16_t lastMeasure = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
		rotQuaternion[0] = 1;
 8001532:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001536:	f5a3 6184 	sub.w	r1, r3, #1056	; 0x420
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4ba3      	ldr	r3, [pc, #652]	; (80017cc <main+0x5cc>)
 8001540:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_TIM_Base_Start(&htim13);
 8001544:	48a2      	ldr	r0, [pc, #648]	; (80017d0 <main+0x5d0>)
 8001546:	f00d ff99 	bl	800f47c <HAL_TIM_Base_Start>
		TIM13->CNT = 0;
 800154a:	4ba2      	ldr	r3, [pc, #648]	; (80017d4 <main+0x5d4>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
		double elapsedTime = 0;
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
		int counter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		while (1) {
			float Gx;
			float Gy;
			float Gz;
			if (LG2_Read_Register(0x1E) & (1 << 1)) {
 8001562:	201e      	movs	r0, #30
 8001564:	f7ff faca 	bl	8000afc <LG2_Read_Register>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80df 	beq.w	8001732 <main+0x532>
				elapsedTime = (TIM13->CNT / 1000.0);
 8001574:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <main+0x5d4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001580:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8001780 <main+0x580>
 8001584:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001588:	ed87 7bf0 	vstr	d7, [r7, #960]	; 0x3c0
				TIM13->CNT = 0;
 800158c:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <main+0x5d4>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
				Gx = LG2_Get_Gyro_X();
 8001592:	f7ff fb09 	bl	8000ba8 <LG2_Get_Gyro_X>
 8001596:	ed87 0aef 	vstr	s0, [r7, #956]	; 0x3bc
				Gy = LG2_Get_Gyro_Y();
 800159a:	f7ff fb3d 	bl	8000c18 <LG2_Get_Gyro_Y>
 800159e:	ed87 0aee 	vstr	s0, [r7, #952]	; 0x3b8
				Gz = LG2_Get_Gyro_Z();
 80015a2:	f7ff fb71 	bl	8000c88 <LG2_Get_Gyro_Z>
 80015a6:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
				rotQuaternion[1] = (Gx - calOmegaX) * (3.1415 / 360000)
 80015aa:	ed97 7aef 	vldr	s14, [r7, #956]	; 0x3bc
 80015ae:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015be:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8001788 <main+0x588>
 80015c2:	ee27 6b06 	vmul.f64	d6, d7, d6
						* elapsedTime;
 80015c6:	ed97 7bf0 	vldr	d7, [r7, #960]	; 0x3c0
 80015ca:	ee26 7b07 	vmul.f64	d7, d6, d7
				rotQuaternion[1] = (Gx - calOmegaX) * (3.1415 / 360000)
 80015ce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015d2:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80015d6:	ed83 7b02 	vstr	d7, [r3, #8]
				rotQuaternion[2] = (Gy - calOmegaY) * (3.1415 / 360000)
 80015da:	ed97 7aee 	vldr	s14, [r7, #952]	; 0x3b8
 80015de:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8001788 <main+0x588>
 80015f2:	ee27 6b06 	vmul.f64	d6, d7, d6
						* elapsedTime;
 80015f6:	ed97 7bf0 	vldr	d7, [r7, #960]	; 0x3c0
 80015fa:	ee26 7b07 	vmul.f64	d7, d6, d7
				rotQuaternion[2] = (Gy - calOmegaY) * (3.1415 / 360000)
 80015fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001602:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001606:	ed83 7b04 	vstr	d7, [r3, #16]
				rotQuaternion[3] = (Gz - calOmegaZ) * (3.1415 / 360000)
 800160a:	ed97 7aed 	vldr	s14, [r7, #948]	; 0x3b4
 800160e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001788 <main+0x588>
 8001622:	ee27 6b06 	vmul.f64	d6, d7, d6
						* elapsedTime;
 8001626:	ed97 7bf0 	vldr	d7, [r7, #960]	; 0x3c0
 800162a:	ee26 7b07 	vmul.f64	d7, d6, d7
				rotQuaternion[3] = (Gz - calOmegaZ) * (3.1415 / 360000)
 800162e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001632:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001636:	ed83 7b06 	vstr	d7, [r3, #24]
				rotQuaternion[0] = sqrt(
						1 - (rotQuaternion[1] * rotQuaternion[1])
 800163a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800163e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001642:	ed93 6b02 	vldr	d6, [r3, #8]
 8001646:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800164a:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 800164e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001652:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001656:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800165a:	ee36 6b47 	vsub.f64	d6, d6, d7
								- (rotQuaternion[2] * rotQuaternion[2])
 800165e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001662:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001666:	ed93 5b04 	vldr	d5, [r3, #16]
 800166a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800166e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001672:	ed93 7b04 	vldr	d7, [r3, #16]
 8001676:	ee25 7b07 	vmul.f64	d7, d5, d7
 800167a:	ee36 6b47 	vsub.f64	d6, d6, d7
								- (rotQuaternion[3] * rotQuaternion[3]));
 800167e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001682:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001686:	ed93 5b06 	vldr	d5, [r3, #24]
 800168a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800168e:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001692:	ed93 7b06 	vldr	d7, [r3, #24]
 8001696:	ee25 7b07 	vmul.f64	d7, d5, d7
				rotQuaternion[0] = sqrt(
 800169a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800169e:	eeb0 0b47 	vmov.f64	d0, d7
 80016a2:	f019 fddd 	bl	801b260 <sqrt>
 80016a6:	eeb0 7b40 	vmov.f64	d7, d0
 80016aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016ae:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80016b2:	ed83 7b00 	vstr	d7, [r3]
				counter++;
 80016b6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80016ba:	3301      	adds	r3, #1
 80016bc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				lastMeasure = HAL_GetTick();
 80016c0:	f002 f9be 	bl	8003a40 <HAL_GetTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
				multiplyQuat(rotQuaternion, x);
 80016ca:	463b      	mov	r3, r7
 80016cc:	493e      	ldr	r1, [pc, #248]	; (80017c8 <main+0x5c8>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fcae 	bl	8001030 <multiplyQuat>
				rotQuaternion[1] = -rotQuaternion[1];
 80016d4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016d8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80016dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80016e0:	eeb1 7b47 	vneg.f64	d7, d7
 80016e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016e8:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80016ec:	ed83 7b02 	vstr	d7, [r3, #8]
				rotQuaternion[2] = -rotQuaternion[2];
 80016f0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016f4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80016f8:	ed93 7b04 	vldr	d7, [r3, #16]
 80016fc:	eeb1 7b47 	vneg.f64	d7, d7
 8001700:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001704:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001708:	ed83 7b04 	vstr	d7, [r3, #16]
				rotQuaternion[3] = -rotQuaternion[3];
 800170c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001710:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001714:	ed93 7b06 	vldr	d7, [r3, #24]
 8001718:	eeb1 7b47 	vneg.f64	d7, d7
 800171c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001720:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 8001724:	ed83 7b06 	vstr	d7, [r3, #24]
				multiplyQuat(x, rotQuaternion);
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4826      	ldr	r0, [pc, #152]	; (80017c8 <main+0x5c8>)
 800172e:	f7ff fc7f 	bl	8001030 <multiplyQuat>

			}
			if (counter > 50) {
 8001732:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001736:	2b32      	cmp	r3, #50	; 0x32
 8001738:	f77f af13 	ble.w	8001562 <main+0x362>
				counter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				float pitch = 180 * (asin(x[3]) / 3.1415);
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <main+0x5c8>)
 8001744:	ed93 7b06 	vldr	d7, [r3, #24]
 8001748:	eeb0 0b47 	vmov.f64	d0, d7
 800174c:	f019 fd5c 	bl	801b208 <asin>
 8001750:	eeb0 6b40 	vmov.f64	d6, d0
 8001754:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8001790 <main+0x590>
 8001758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800175c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001798 <main+0x598>
 8001760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001764:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001768:	edc7 7aec 	vstr	s15, [r7, #944]	; 0x3b0
				//float magnitude = sqrt((x[1]*x[1]) + (x[2]*x[2]) + x[3] * x[3]);
				char data_gyro[50];
				sprintf(data_gyro, "%f, %f, %f, %f\n", pitch, x[1], x[2], x[3]);
 800176c:	edd7 7aec 	vldr	s15, [r7, #944]	; 0x3b0
 8001770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <main+0x5c8>)
 8001776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800177a:	e02d      	b.n	80017d8 <main+0x5d8>
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	408f4000 	.word	0x408f4000
 8001788:	c1a89480 	.word	0xc1a89480
 800178c:	3ee24cf1 	.word	0x3ee24cf1
 8001790:	c083126f 	.word	0xc083126f
 8001794:	400921ca 	.word	0x400921ca
 8001798:	00000000 	.word	0x00000000
 800179c:	40668000 	.word	0x40668000
 80017a0:	58020c00 	.word	0x58020c00
 80017a4:	58021800 	.word	0x58021800
 80017a8:	2400088c 	.word	0x2400088c
 80017ac:	42b40000 	.word	0x42b40000
 80017b0:	43340000 	.word	0x43340000
 80017b4:	00000000 	.word	0x00000000
 80017b8:	42340000 	.word	0x42340000
 80017bc:	33bca100 	.word	0x33bca100
 80017c0:	0801b534 	.word	0x0801b534
 80017c4:	0801b568 	.word	0x0801b568
 80017c8:	24000cf0 	.word	0x24000cf0
 80017cc:	3ff00000 	.word	0x3ff00000
 80017d0:	24000924 	.word	0x24000924
 80017d4:	40001c00 	.word	0x40001c00
 80017d8:	4910      	ldr	r1, [pc, #64]	; (800181c <main+0x61c>)
 80017da:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80017de:	4c0f      	ldr	r4, [pc, #60]	; (800181c <main+0x61c>)
 80017e0:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 80017e4:	f107 068c 	add.w	r6, r7, #140	; 0x8c
 80017e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80017ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017f0:	e9cd 2300 	strd	r2, r3, [sp]
 80017f4:	ec53 2b17 	vmov	r2, r3, d7
 80017f8:	4909      	ldr	r1, [pc, #36]	; (8001820 <main+0x620>)
 80017fa:	4630      	mov	r0, r6
 80017fc:	f015 fffa 	bl	80177f4 <siprintf>
				CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001800:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fd83 	bl	8000310 <strlen>
 800180a:	4602      	mov	r2, r0
 800180c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f014 fd0c 	bl	8016230 <CDC_Transmit_HS>
		while (1) {
 8001818:	e6a3      	b.n	8001562 <main+0x362>
 800181a:	bf00      	nop
 800181c:	24000cf0 	.word	0x24000cf0
 8001820:	0801b508 	.word	0x0801b508

08001824 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b09c      	sub	sp, #112	; 0x70
 8001828:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	224c      	movs	r2, #76	; 0x4c
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f015 f988 	bl	8016b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2220      	movs	r2, #32
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f015 f982 	bl	8016b48 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001844:	2002      	movs	r0, #2
 8001846:	f007 ffc5 	bl	80097d4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <SystemClock_Config+0x104>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001856:	4a34      	ldr	r2, [pc, #208]	; (8001928 <SystemClock_Config+0x104>)
 8001858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <SystemClock_Config+0x104>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800186a:	bf00      	nop
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <SystemClock_Config+0x104>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001878:	d1f8      	bne.n	800186c <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800187a:	2322      	movs	r3, #34	; 0x22
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800187e:	2301      	movs	r3, #1
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001882:	2340      	movs	r3, #64	; 0x40
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001886:	2301      	movs	r3, #1
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188a:	2302      	movs	r3, #2
 800188c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800188e:	2300      	movs	r3, #0
 8001890:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001892:	2304      	movs	r3, #4
 8001894:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001896:	230c      	movs	r3, #12
 8001898:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 12;
 800189a:	230c      	movs	r3, #12
 800189c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 12;
 80018a2:	230c      	movs	r3, #12
 80018a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018aa:	230c      	movs	r3, #12
 80018ac:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4618      	mov	r0, r3
 80018bc:	f007 ffd4 	bl	8009868 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xa6>
		Error_Handler();
 80018c6:	f000 ff1f 	bl	8002708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018ca:	233f      	movs	r3, #63	; 0x3f
 80018cc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2303      	movs	r3, #3
 80018d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018d6:	2308      	movs	r3, #8
 80018d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018e2:	2340      	movs	r3, #64	; 0x40
 80018e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ea:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f008 fb91 	bl	800a01c <HAL_RCC_ClockConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <SystemClock_Config+0xf0>
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f008 fb89 	bl	800a01c <HAL_RCC_ClockConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0xf0>
				!= HAL_OK) {
			Error_Handler();
 8001910:	f000 fefa 	bl	8002708 <Error_Handler>
		}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001914:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001918:	2100      	movs	r1, #0
 800191a:	2000      	movs	r0, #0
 800191c:	f008 fd34 	bl	800a388 <HAL_RCC_MCOConfig>
}
 8001920:	bf00      	nop
 8001922:	3770      	adds	r7, #112	; 0x70
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58024800 	.word	0x58024800

0800192c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b0ae      	sub	sp, #184	; 0xb8
 8001930:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001932:	463b      	mov	r3, r7
 8001934:	22b8      	movs	r2, #184	; 0xb8
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f015 f905 	bl	8016b48 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 800193e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 800194a:	2304      	movs	r3, #4
 800194c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 800194e:	230c      	movs	r3, #12
 8001950:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001952:	2304      	movs	r3, #4
 8001954:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001956:	2302      	movs	r3, #2
 8001958:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001976:	463b      	mov	r3, r7
 8001978:	4618      	mov	r0, r3
 800197a:	f008 ff45 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8001984:	f000 fec0 	bl	8002708 <Error_Handler>
	}
}
 8001988:	bf00      	nop
 800198a:	37b8      	adds	r7, #184	; 0xb8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80019a2:	463b      	mov	r3, r7
 80019a4:	2224      	movs	r2, #36	; 0x24
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f015 f8cd 	bl	8016b48 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80019ae:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019b0:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <MX_ADC1_Init+0xe8>)
 80019b2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019b6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80019ba:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019dc:	2201      	movs	r2, #1
 80019de:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_ADC1_Init+0xe4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_ADC1_Init+0xe4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_ADC1_Init+0xe4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a0e:	4819      	ldr	r0, [pc, #100]	; (8001a74 <MX_ADC1_Init+0xe4>)
 8001a10:	f002 faa2 	bl	8003f58 <HAL_ADC_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0x8e>
		Error_Handler();
 8001a1a:	f000 fe75 	bl	8002708 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <MX_ADC1_Init+0xe4>)
 8001a2a:	f003 fadd 	bl	8004fe8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8001a34:	f000 fe68 	bl	8002708 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_ADC1_Init+0xec>)
 8001a3a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a3c:	2306      	movs	r3, #6
 8001a3e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001a40:	2303      	movs	r3, #3
 8001a42:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a44:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a48:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_ADC1_Init+0xe4>)
 8001a5e:	f002 fc83 	bl	8004368 <HAL_ADC_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_ADC1_Init+0xdc>
		Error_Handler();
 8001a68:	f000 fe4e 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2400031c 	.word	0x2400031c
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	2a000400 	.word	0x2a000400

08001a80 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2224      	movs	r2, #36	; 0x24
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f015 f85b 	bl	8016b48 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001a94:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <MX_ADC3_Init+0xd4>)
 8001a96:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001a9a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001a9e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8001b06:	4812      	ldr	r0, [pc, #72]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001b08:	f002 fa26 	bl	8003f58 <HAL_ADC_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_ADC3_Init+0x96>
		Error_Handler();
 8001b12:	f000 fdf9 	bl	8002708 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_ADC3_Init+0xd8>)
 8001b18:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b26:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_ADC3_Init+0xd0>)
 8001b3a:	f002 fc15 	bl	8004368 <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8001b44:	f000 fde0 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2400038c 	.word	0x2400038c
 8001b54:	58026000 	.word	0x58026000
 8001b58:	04300002 	.word	0x04300002

08001b5c <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 8001b60:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b62:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <MX_FDCAN3_Init+0xc4>)
 8001b64:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b86:	2210      	movs	r2, #16
 8001b88:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b92:	2202      	movs	r2, #2
 8001b94:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bda:	2204      	movs	r2, #4
 8001bdc:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001c04:	2204      	movs	r2, #4
 8001c06:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_FDCAN3_Init+0xc0>)
 8001c0a:	f005 f89f 	bl	8006d4c <HAL_FDCAN_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8001c14:	f000 fd78 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	240004ec 	.word	0x240004ec
 8001c20:	4000d400 	.word	0x4000d400

08001c24 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <MX_I2C2_Init+0x78>)
 8001c2c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <MX_I2C2_Init+0x7c>)
 8001c32:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c60:	f005 fdb2 	bl	80077c8 <HAL_I2C_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001c6a:	f000 fd4d 	bl	8002708 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c72:	f006 fa5f 	bl	8008134 <HAL_I2CEx_ConfigAnalogFilter>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001c7c:	f000 fd44 	bl	8002708 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001c80:	2100      	movs	r1, #0
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_I2C2_Init+0x74>)
 8001c84:	f006 faa1 	bl	80081ca <HAL_I2CEx_ConfigDigitalFilter>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C2_Init+0x6e>
		Error_Handler();
 8001c8e:	f000 fd3b 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2400058c 	.word	0x2400058c
 8001c9c:	40005800 	.word	0x40005800
 8001ca0:	20303e5d 	.word	0x20303e5d

08001ca4 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <MX_SDMMC2_SD_Init+0x38>)
 8001cac:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001cbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc0:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 0;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <MX_SDMMC2_SD_Init+0x34>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	240005e0 	.word	0x240005e0
 8001cdc:	48022400 	.word	0x48022400

08001ce0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001ce6:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <MX_SPI1_Init+0xa8>)
 8001ce8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001cec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cf0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d10:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d14:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d18:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness =
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_SPI1_Init+0xa4>)
 8001d72:	f00c fd93 	bl	800e89c <HAL_SPI_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_SPI1_Init+0xa0>
		Error_Handler();
 8001d7c:	f000 fcc4 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2400065c 	.word	0x2400065c
 8001d88:	40013000 	.word	0x40013000

08001d8c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001d90:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <MX_SPI2_Init+0xa8>)
 8001d94:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001d98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d9c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001da6:	2207      	movs	r2, #7
 8001da8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001db8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dbc:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dc0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001dc4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001de4:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness =
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_SPI2_Init+0xa4>)
 8001e1e:	f00c fd3d 	bl	800e89c <HAL_SPI_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_SPI2_Init+0xa0>
		Error_Handler();
 8001e28:	f000 fc6e 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	240006e4 	.word	0x240006e4
 8001e34:	40003800 	.word	0x40003800

08001e38 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <MX_SPI3_Init+0xa8>)
 8001e40:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e48:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e50:	4b22      	ldr	r3, [pc, #136]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e52:	2207      	movs	r2, #7
 8001e54:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e68:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e6c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e70:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness =
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	64da      	str	r2, [r3, #76]	; 0x4c
	SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <MX_SPI3_Init+0xa4>)
 8001eca:	f00c fce7 	bl	800e89c <HAL_SPI_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8001ed4:	f000 fc18 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2400076c 	.word	0x2400076c
 8001ee0:	40003c00 	.word	0x40003c00

08001ee4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ef6:	463b      	mov	r3, r7
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f1e:	225a      	movs	r2, #90	; 0x5a
 8001f20:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001f2e:	4818      	ldr	r0, [pc, #96]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f30:	f00d fb22 	bl	800f578 <HAL_TIM_PWM_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001f3a:	f000 fbe5 	bl	8002708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4810      	ldr	r0, [pc, #64]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f4e:	f00e fa8f 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001f58:	f000 fbd6 	bl	8002708 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5c:	2360      	movs	r3, #96	; 0x60
 8001f5e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	2208      	movs	r2, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f74:	f00d fd94 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001f7e:	f000 fbc3 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM2_Init+0xac>)
 8001f84:	f001 f958 	bl	8003238 <HAL_TIM_MspPostInit>

}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	240007f4 	.word	0x240007f4

08001f94 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <MX_TIM3_Init+0xc4>)
 8001fbc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fcc:	225a      	movs	r2, #90	; 0x5a
 8001fce:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001fdc:	481d      	ldr	r0, [pc, #116]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001fde:	f00d facb 	bl	800f578 <HAL_TIM_PWM_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM3_Init+0x58>
		Error_Handler();
 8001fe8:	f000 fb8e 	bl	8002708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4816      	ldr	r0, [pc, #88]	; (8002054 <MX_TIM3_Init+0xc0>)
 8001ffc:	f00e fa38 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002006:	f000 fb7f 	bl	8002708 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200a:	2360      	movs	r3, #96	; 0x60
 800200c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800201a:	463b      	mov	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	4619      	mov	r1, r3
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <MX_TIM3_Init+0xc0>)
 8002022:	f00d fd3d 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800202c:	f000 fb6c 	bl	8002708 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002030:	463b      	mov	r3, r7
 8002032:	2204      	movs	r2, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <MX_TIM3_Init+0xc0>)
 8002038:	f00d fd32 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002042:	f000 fb61 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <MX_TIM3_Init+0xc0>)
 8002048:	f001 f8f6 	bl	8003238 <HAL_TIM_MspPostInit>

}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	24000840 	.word	0x24000840
 8002058:	40000400 	.word	0x40000400

0800205c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800206e:	463b      	mov	r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002080:	4b32      	ldr	r3, [pc, #200]	; (800214c <MX_TIM4_Init+0xf0>)
 8002082:	4a33      	ldr	r2, [pc, #204]	; (8002150 <MX_TIM4_Init+0xf4>)
 8002084:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 28;
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <MX_TIM4_Init+0xf0>)
 8002088:	221c      	movs	r2, #28
 800208a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <MX_TIM4_Init+0xf0>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <MX_TIM4_Init+0xf0>)
 8002094:	f242 720f 	movw	r2, #9999	; 0x270f
 8002098:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <MX_TIM4_Init+0xf0>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <MX_TIM4_Init+0xf0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80020a6:	4829      	ldr	r0, [pc, #164]	; (800214c <MX_TIM4_Init+0xf0>)
 80020a8:	f00d fa66 	bl	800f578 <HAL_TIM_PWM_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM4_Init+0x5a>
		Error_Handler();
 80020b2:	f000 fb29 	bl	8002708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4821      	ldr	r0, [pc, #132]	; (800214c <MX_TIM4_Init+0xf0>)
 80020c6:	f00e f9d3 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80020d0:	f000 fb1a 	bl	8002708 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d4:	2360      	movs	r3, #96	; 0x60
 80020d6:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4818      	ldr	r0, [pc, #96]	; (800214c <MX_TIM4_Init+0xf0>)
 80020ec:	f00d fcd8 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80020f6:	f000 fb07 	bl	8002708 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80020fa:	463b      	mov	r3, r7
 80020fc:	2204      	movs	r2, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4812      	ldr	r0, [pc, #72]	; (800214c <MX_TIM4_Init+0xf0>)
 8002102:	f00d fccd 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800210c:	f000 fafc 	bl	8002708 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002110:	463b      	mov	r3, r7
 8002112:	2208      	movs	r2, #8
 8002114:	4619      	mov	r1, r3
 8002116:	480d      	ldr	r0, [pc, #52]	; (800214c <MX_TIM4_Init+0xf0>)
 8002118:	f00d fcc2 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002122:	f000 faf1 	bl	8002708 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002126:	463b      	mov	r3, r7
 8002128:	220c      	movs	r2, #12
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM4_Init+0xf0>)
 800212e:	f00d fcb7 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002138:	f000 fae6 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM4_Init+0xf0>)
 800213e:	f001 f87b 	bl	8003238 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	; 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2400088c 	.word	0x2400088c
 8002150:	40000800 	.word	0x40000800

08002154 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002166:	463b      	mov	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_TIM5_Init+0xac>)
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <MX_TIM5_Init+0xb0>)
 800217c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_TIM5_Init+0xac>)
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <MX_TIM5_Init+0xac>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_TIM5_Init+0xac>)
 800218c:	225a      	movs	r2, #90	; 0x5a
 800218e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_TIM5_Init+0xac>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_TIM5_Init+0xac>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 800219c:	4818      	ldr	r0, [pc, #96]	; (8002200 <MX_TIM5_Init+0xac>)
 800219e:	f00d f9eb 	bl	800f578 <HAL_TIM_PWM_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM5_Init+0x58>
		Error_Handler();
 80021a8:	f000 faae 	bl	8002708 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	4811      	ldr	r0, [pc, #68]	; (8002200 <MX_TIM5_Init+0xac>)
 80021bc:	f00e f958 	bl	8010470 <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80021c6:	f000 fa9f 	bl	8002708 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ca:	2360      	movs	r3, #96	; 0x60
 80021cc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 80021da:	463b      	mov	r3, r7
 80021dc:	220c      	movs	r2, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4807      	ldr	r0, [pc, #28]	; (8002200 <MX_TIM5_Init+0xac>)
 80021e2:	f00d fc5d 	bl	800faa0 <HAL_TIM_PWM_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80021ec:	f000 fa8c 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <MX_TIM5_Init+0xac>)
 80021f2:	f001 f821 	bl	8003238 <HAL_TIM_MspPostInit>

}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	240008d8 	.word	0x240008d8
 8002204:	40000c00 	.word	0x40000c00

08002208 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_TIM13_Init+0x40>)
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <MX_TIM13_Init+0x44>)
 8002210:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 95;
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <MX_TIM13_Init+0x40>)
 8002214:	225f      	movs	r2, #95	; 0x5f
 8002216:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_TIM13_Init+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_TIM13_Init+0x40>)
 8002220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002224:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <MX_TIM13_Init+0x40>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_TIM13_Init+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_TIM13_Init+0x40>)
 8002234:	f00d f8cb 	bl	800f3ce <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800223e:	f000 fa63 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	24000924 	.word	0x24000924
 800224c:	40001c00 	.word	0x40001c00

08002250 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <MX_UART4_Init+0x90>)
 8002256:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <MX_UART4_Init+0x94>)
 8002258:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <MX_UART4_Init+0x90>)
 800225c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002260:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <MX_UART4_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MX_UART4_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <MX_UART4_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_UART4_Init+0x90>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <MX_UART4_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_UART4_Init+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_UART4_Init+0x90>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_UART4_Init+0x90>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_UART4_Init+0x90>)
 8002294:	2200      	movs	r2, #0
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002298:	4811      	ldr	r0, [pc, #68]	; (80022e0 <MX_UART4_Init+0x90>)
 800229a:	f00e f9a3 	bl	80105e4 <HAL_UART_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_UART4_Init+0x58>
		Error_Handler();
 80022a4:	f000 fa30 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 80022a8:	2100      	movs	r1, #0
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_UART4_Init+0x90>)
 80022ac:	f00f faa9 	bl	8011802 <HAL_UARTEx_SetTxFifoThreshold>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80022b6:	f000 fa27 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 80022ba:	2100      	movs	r1, #0
 80022bc:	4808      	ldr	r0, [pc, #32]	; (80022e0 <MX_UART4_Init+0x90>)
 80022be:	f00f fade 	bl	801187e <HAL_UARTEx_SetRxFifoThreshold>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80022c8:	f000 fa1e 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MX_UART4_Init+0x90>)
 80022ce:	f00f fa5f 	bl	8011790 <HAL_UARTEx_DisableFifoMode>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_UART4_Init+0x8c>
		Error_Handler();
 80022d8:	f000 fa16 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	24000bc8 	.word	0x24000bc8
 80022e4:	40004c00 	.word	0x40004c00

080022e8 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <MX_USART6_UART_Init+0x90>)
 80022ee:	4a23      	ldr	r2, [pc, #140]	; (800237c <MX_USART6_UART_Init+0x94>)
 80022f0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_USART6_UART_Init+0x90>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_USART6_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_USART6_UART_Init+0x90>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MX_USART6_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART6_UART_Init+0x90>)
 800232c:	2200      	movs	r2, #0
 800232e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8002330:	4811      	ldr	r0, [pc, #68]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002332:	f00e f957 	bl	80105e4 <HAL_UART_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 800233c:	f000 f9e4 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 8002340:	2100      	movs	r1, #0
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002344:	f00f fa5d 	bl	8011802 <HAL_UARTEx_SetTxFifoThreshold>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800234e:	f000 f9db 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 8002352:	2100      	movs	r1, #0
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002356:	f00f fa92 	bl	801187e <HAL_UARTEx_SetRxFifoThreshold>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002360:	f000 f9d2 	bl	8002708 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 8002364:	4804      	ldr	r0, [pc, #16]	; (8002378 <MX_USART6_UART_Init+0x90>)
 8002366:	f00f fa13 	bl	8011790 <HAL_UARTEx_DisableFifoMode>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002370:	f000 f9ca 	bl	8002708 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	24000c5c 	.word	0x24000c5c
 800237c:	40011400 	.word	0x40011400

08002380 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <MX_DMA_Init+0xbc>)
 8002388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800238c:	4a2b      	ldr	r2, [pc, #172]	; (800243c <MX_DMA_Init+0xbc>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <MX_DMA_Init+0xbc>)
 8002398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <MX_DMA_Init+0xbc>)
 80023a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <MX_DMA_Init+0xbc>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <MX_DMA_Init+0xbc>)
 80023b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	200b      	movs	r0, #11
 80023c8:	f002 ffcb 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023cc:	200b      	movs	r0, #11
 80023ce:	f002 ffe2 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	200c      	movs	r0, #12
 80023d8:	f002 ffc3 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023dc:	200c      	movs	r0, #12
 80023de:	f002 ffda 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	200d      	movs	r0, #13
 80023e8:	f002 ffbb 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023ec:	200d      	movs	r0, #13
 80023ee:	f002 ffd2 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	200e      	movs	r0, #14
 80023f8:	f002 ffb3 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80023fc:	200e      	movs	r0, #14
 80023fe:	f002 ffca 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	200f      	movs	r0, #15
 8002408:	f002 ffab 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800240c:	200f      	movs	r0, #15
 800240e:	f002 ffc2 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2010      	movs	r0, #16
 8002418:	f002 ffa3 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800241c:	2010      	movs	r0, #16
 800241e:	f002 ffba 	bl	8005396 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2046      	movs	r0, #70	; 0x46
 8002428:	f002 ff9b 	bl	8005362 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800242c:	2046      	movs	r0, #70	; 0x46
 800242e:	f002 ffb2 	bl	8005396 <HAL_NVIC_EnableIRQ>

}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	58024400 	.word	0x58024400

08002440 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b08c      	sub	sp, #48	; 0x30
 8002444:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002456:	4ba4      	ldr	r3, [pc, #656]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800245c:	4aa2      	ldr	r2, [pc, #648]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002466:	4ba0      	ldr	r3, [pc, #640]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002474:	4b9c      	ldr	r3, [pc, #624]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247a:	4a9b      	ldr	r2, [pc, #620]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002484:	4b98      	ldr	r3, [pc, #608]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	4b95      	ldr	r3, [pc, #596]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a93      	ldr	r2, [pc, #588]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b91      	ldr	r3, [pc, #580]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024b0:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b6:	4a8c      	ldr	r2, [pc, #560]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c0:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	4b86      	ldr	r3, [pc, #536]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d4:	4a84      	ldr	r2, [pc, #528]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024de:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	4a7d      	ldr	r2, [pc, #500]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fc:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800250a:	4b77      	ldr	r3, [pc, #476]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <MX_GPIO_Init+0x2a8>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002528:	2200      	movs	r2, #0
 800252a:	f241 5104 	movw	r1, #5380	; 0x1504
 800252e:	486f      	ldr	r0, [pc, #444]	; (80026ec <MX_GPIO_Init+0x2ac>)
 8002530:	f005 f930 	bl	8007794 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | ARM2_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	f248 0106 	movw	r1, #32774	; 0x8006
 800253a:	486d      	ldr	r0, [pc, #436]	; (80026f0 <MX_GPIO_Init+0x2b0>)
 800253c:	f005 f92a 	bl	8007794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	2130      	movs	r1, #48	; 0x30
 8002544:	486b      	ldr	r0, [pc, #428]	; (80026f4 <MX_GPIO_Init+0x2b4>)
 8002546:	f005 f925 	bl	8007794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800254a:	2200      	movs	r2, #0
 800254c:	2102      	movs	r1, #2
 800254e:	486a      	ldr	r0, [pc, #424]	; (80026f8 <MX_GPIO_Init+0x2b8>)
 8002550:	f005 f920 	bl	8007794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800255a:	4868      	ldr	r0, [pc, #416]	; (80026fc <MX_GPIO_Init+0x2bc>)
 800255c:	f005 f91a 	bl	8007794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002560:	2200      	movs	r2, #0
 8002562:	210e      	movs	r1, #14
 8002564:	4866      	ldr	r0, [pc, #408]	; (8002700 <MX_GPIO_Init+0x2c0>)
 8002566:	f005 f915 	bl	8007794 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 800256a:	2200      	movs	r2, #0
 800256c:	f240 3101 	movw	r1, #769	; 0x301
 8002570:	4864      	ldr	r0, [pc, #400]	; (8002704 <MX_GPIO_Init+0x2c4>)
 8002572:	f005 f90f 	bl	8007794 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002576:	f241 5304 	movw	r3, #5380	; 0x1504
 800257a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	4619      	mov	r1, r3
 800258e:	4857      	ldr	r0, [pc, #348]	; (80026ec <MX_GPIO_Init+0x2ac>)
 8002590:	f004 ff40 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | ARM2_Pin | GPIO_PIN_15;
 8002594:	f248 0306 	movw	r3, #32774	; 0x8006
 8002598:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259a:	2301      	movs	r3, #1
 800259c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4850      	ldr	r0, [pc, #320]	; (80026f0 <MX_GPIO_Init+0x2b0>)
 80025ae:	f004 ff31 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80025b2:	2330      	movs	r3, #48	; 0x30
 80025b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	4619      	mov	r1, r3
 80025c8:	484a      	ldr	r0, [pc, #296]	; (80026f4 <MX_GPIO_Init+0x2b4>)
 80025ca:	f004 ff23 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 80025ce:	2302      	movs	r3, #2
 80025d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025da:	2300      	movs	r3, #0
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	4844      	ldr	r0, [pc, #272]	; (80026f8 <MX_GPIO_Init+0x2b8>)
 80025e6:	f004 ff15 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 80025ea:	2304      	movs	r3, #4
 80025ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	483e      	ldr	r0, [pc, #248]	; (80026f8 <MX_GPIO_Init+0x2b8>)
 80025fe:	f004 ff09 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002602:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002606:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002608:	2301      	movs	r3, #1
 800260a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4838      	ldr	r0, [pc, #224]	; (80026fc <MX_GPIO_Init+0x2bc>)
 800261c:	f004 fefa 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002620:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002624:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4831      	ldr	r0, [pc, #196]	; (80026fc <MX_GPIO_Init+0x2bc>)
 8002636:	f004 feed 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 800263a:	2301      	movs	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002642:	2301      	movs	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	482c      	ldr	r0, [pc, #176]	; (8002700 <MX_GPIO_Init+0x2c0>)
 800264e:	f004 fee1 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002652:	230e      	movs	r3, #14
 8002654:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4825      	ldr	r0, [pc, #148]	; (8002700 <MX_GPIO_Init+0x2c0>)
 800266a:	f004 fed3 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 800266e:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002672:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	4619      	mov	r1, r3
 8002682:	481a      	ldr	r0, [pc, #104]	; (80026ec <MX_GPIO_Init+0x2ac>)
 8002684:	f004 fec6 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002688:	f240 3301 	movw	r3, #769	; 0x301
 800268c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268e:	2301      	movs	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	4619      	mov	r1, r3
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <MX_GPIO_Init+0x2c4>)
 80026a2:	f004 feb7 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80026a6:	2310      	movs	r3, #16
 80026a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	2300      	movs	r3, #0
 80026ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	4811      	ldr	r0, [pc, #68]	; (8002700 <MX_GPIO_Init+0x2c0>)
 80026ba:	f004 feab 	bl	8007414 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_GPIO_Init+0x2b0>)
 80026dc:	f004 fe9a 	bl	8007414 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80026e0:	bf00      	nop
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58021000 	.word	0x58021000
 80026f0:	58020000 	.word	0x58020000
 80026f4:	58020800 	.word	0x58020800
 80026f8:	58020400 	.word	0x58020400
 80026fc:	58021400 	.word	0x58021400
 8002700:	58021800 	.word	0x58021800
 8002704:	58020c00 	.word	0x58020c00

08002708 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002710:	e7fe      	b.n	8002710 <Error_Handler+0x8>
	...

08002714 <MAX_M10s_msgsOff>:
bool invalidPacket[2] = {false};
int writeHead = 0;

uint8_t byte = 0;

bool MAX_M10s_msgsOff(I2C_HandleTypeDef* i2c) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	6078      	str	r0, [r7, #4]
    size_t i = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
    bool ok = false;
 8002720:	2300      	movs	r3, #0
 8002722:	74fb      	strb	r3, [r7, #19]
    do {
        const char* msg = msgsOff[i];
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <MAX_M10s_msgsOff+0x64>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	60fb      	str	r3, [r7, #12]
        ok = HAL_OK == HAL_I2C_Master_Transmit(i2c, MAX_M10S_I2C_ADDR, (void*)msg, strlen(msg), 100000000);
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7fd fdee 	bl	8000310 <strlen>
 8002734:	4603      	mov	r3, r0
 8002736:	b29b      	uxth	r3, r3
 8002738:	4a10      	ldr	r2, [pc, #64]	; (800277c <MAX_M10s_msgsOff+0x68>)
 800273a:	9200      	str	r2, [sp, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	2184      	movs	r1, #132	; 0x84
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f005 f8d1 	bl	80078e8 <HAL_I2C_Master_Transmit>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	74fb      	strb	r3, [r7, #19]
        i++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
        if (!msgsOff[i]) break;
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <MAX_M10s_msgsOff+0x64>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <MAX_M10s_msgsOff+0x58>
    } while(ok);
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1dc      	bne.n	8002724 <MAX_M10s_msgsOff+0x10>
 800276a:	e000      	b.n	800276e <MAX_M10s_msgsOff+0x5a>
        if (!msgsOff[i]) break;
 800276c:	bf00      	nop
    return ok;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	24000000 	.word	0x24000000
 800277c:	05f5e100 	.word	0x05f5e100

08002780 <MAX_M10s_init>:

bool MAX_M10s_init(I2C_HandleTypeDef* i2c) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af02      	add	r7, sp, #8
 8002786:	6078      	str	r0, [r7, #4]
    if (!MAX_M10s_check_if_exists(i2c)) return false; // @INFO: We don't see the GPS.
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f827 	bl	80027dc <MAX_M10s_check_if_exists>
 800278e:	4603      	mov	r3, r0
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MAX_M10s_init+0x1e>
 800279a:	2300      	movs	r3, #0
 800279c:	e015      	b.n	80027ca <MAX_M10s_init+0x4a>
    
    if (MAX_M10s_msgsOff(i2c)) return false; // @INFO: We failed to send the messages.
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffb8 	bl	8002714 <MAX_M10s_msgsOff>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MAX_M10s_init+0x2e>
 80027aa:	2300      	movs	r3, #0
 80027ac:	e00d      	b.n	80027ca <MAX_M10s_init+0x4a>
    
    // @INFO: Enable the G*RMC NMEA message.
    return HAL_OK != HAL_I2C_Master_Transmit(i2c, MAX_M10S_I2C_ADDR, (void*)enRMCMsg, strlen(enRMCMsg), 100000000);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MAX_M10s_init+0x54>)
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2319      	movs	r3, #25
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <MAX_M10s_init+0x58>)
 80027b6:	2184      	movs	r1, #132	; 0x84
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f005 f895 	bl	80078e8 <HAL_I2C_Master_Transmit>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf14      	ite	ne
 80027c4:	2301      	movne	r3, #1
 80027c6:	2300      	moveq	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	05f5e100 	.word	0x05f5e100
 80027d8:	0801b744 	.word	0x0801b744

080027dc <MAX_M10s_check_if_exists>:

inline NMEA_RMC MAX_M10s_getRMC() { return grmc; }

// @NOTE: This checks if MAX M10s is on the I2C bus, and returs true if so.
//        It works on my(m1cha1s) dev board so...
bool MAX_M10s_check_if_exists(I2C_HandleTypeDef* i2c) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    return HAL_I2C_IsDeviceReady (i2c, MAX_M10S_I2C_ADDR, 10, 10000) == HAL_OK;
 80027e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80027e8:	220a      	movs	r2, #10
 80027ea:	2184      	movs	r1, #132	; 0x84
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f005 f96f 	bl	8007ad0 <HAL_I2C_IsDeviceReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_MspInit+0x30>)
 8002810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002814:	4a08      	ldr	r2, [pc, #32]	; (8002838 <HAL_MspInit+0x30>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_MspInit+0x30>)
 8002820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	58024400 	.word	0x58024400

0800283c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 031c 	add.w	r3, r7, #28
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_ADC_MspInit+0x194>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d159      	bne.n	8002912 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800285e:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002864:	4a5b      	ldr	r2, [pc, #364]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002866:	f043 0320 	orr.w	r3, r3, #32
 800286a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800286e:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287c:	4b55      	ldr	r3, [pc, #340]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	4a54      	ldr	r2, [pc, #336]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288c:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	484a      	ldr	r0, [pc, #296]	; (80029d8 <HAL_ADC_MspInit+0x19c>)
 80028ae:	f004 fdb1 	bl	8007414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028b4:	4a4a      	ldr	r2, [pc, #296]	; (80029e0 <HAL_ADC_MspInit+0x1a4>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028ba:	2209      	movs	r2, #9
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b45      	ldr	r3, [pc, #276]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80028e2:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028f4:	4839      	ldr	r0, [pc, #228]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 80028f6:	f002 fd69 	bl	80053cc <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002900:	f7ff ff02 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a35      	ldr	r2, [pc, #212]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 8002908:	659a      	str	r2, [r3, #88]	; 0x58
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_ADC_MspInit+0x1a0>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002910:	e059      	b.n	80029c6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a33      	ldr	r2, [pc, #204]	; (80029e4 <HAL_ADC_MspInit+0x1a8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d154      	bne.n	80029c6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002924:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_ADC_MspInit+0x198>)
 800294c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002958:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800295c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002960:	f001 f89e 	bl	8003aa0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_ADC_MspInit+0x1b0>)
 8002968:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 800296c:	2273      	movs	r2, #115	; 0x73
 800296e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 8002978:	2200      	movs	r2, #0
 800297a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 800297e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002982:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 8002986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 800298e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002992:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 8002996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800299a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 800299e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80029aa:	480f      	ldr	r0, [pc, #60]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 80029ac:	f002 fd0e 	bl	80053cc <HAL_DMA_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80029b6:	f7ff fea7 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
 80029c0:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_ADC_MspInit+0x1ac>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029c6:	bf00      	nop
 80029c8:	3730      	adds	r7, #48	; 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	58024400 	.word	0x58024400
 80029d8:	58020800 	.word	0x58020800
 80029dc:	240003fc 	.word	0x240003fc
 80029e0:	40020088 	.word	0x40020088
 80029e4:	58026000 	.word	0x58026000
 80029e8:	24000474 	.word	0x24000474
 80029ec:	400204b8 	.word	0x400204b8

080029f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0b8      	sub	sp, #224	; 0xe0
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a08:	f107 0310 	add.w	r3, r7, #16
 8002a0c:	22b8      	movs	r2, #184	; 0xb8
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f014 f899 	bl	8016b48 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_FDCAN_MspInit+0xc4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d144      	bne.n	8002aaa <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4618      	mov	r0, r3
 8002a36:	f007 fee7 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002a40:	f7ff fe62 	bl	8002708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a4a:	4a1b      	ldr	r2, [pc, #108]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_FDCAN_MspInit+0xc8>)
 8002a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4805      	ldr	r0, [pc, #20]	; (8002abc <HAL_FDCAN_MspInit+0xcc>)
 8002aa6:	f004 fcb5 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	37e0      	adds	r7, #224	; 0xe0
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	4000d400 	.word	0x4000d400
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58021400 	.word	0x58021400

08002ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0b8      	sub	sp, #224	; 0xe0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	22b8      	movs	r2, #184	; 0xb8
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f014 f831 	bl	8016b48 <memset>
  if(hi2c->Instance==I2C2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_I2C_MspInit+0xd4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d14d      	bne.n	8002b8c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002af0:	f04f 0208 	mov.w	r2, #8
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b02:	f107 0310 	add.w	r3, r7, #16
 8002b06:	4618      	mov	r0, r3
 8002b08:	f007 fe7e 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b12:	f7ff fdf9 	bl	8002708 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b1e:	f043 0320 	orr.w	r3, r3, #32
 8002b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b34:	2303      	movs	r3, #3
 8002b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b56:	4619      	mov	r1, r3
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <HAL_I2C_MspInit+0xdc>)
 8002b5a:	f004 fc5b 	bl	8007414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_I2C_MspInit+0xd8>)
 8002b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	2021      	movs	r0, #33	; 0x21
 8002b82:	f002 fbee 	bl	8005362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002b86:	2021      	movs	r0, #33	; 0x21
 8002b88:	f002 fc05 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b8c:	bf00      	nop
 8002b8e:	37e0      	adds	r7, #224	; 0xe0
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40005800 	.word	0x40005800
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	58021400 	.word	0x58021400

08002ba0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b0ba      	sub	sp, #232	; 0xe8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	22b8      	movs	r2, #184	; 0xb8
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f013 ffc1 	bl	8016b48 <memset>
  if(hsd->Instance==SDMMC2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <HAL_SD_MspInit+0x1a0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f040 80b3 	bne.w	8002d38 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002bd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be2:	f107 0318 	add.w	r3, r7, #24
 8002be6:	4618      	mov	r0, r3
 8002be8:	f007 fe0e 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002bf2:	f7ff fd89 	bl	8002708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002bf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bfc:	4a51      	ldr	r2, [pc, #324]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c06:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1a:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c24:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c38:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c42:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <HAL_SD_MspInit+0x1a4>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c50:	2340      	movs	r3, #64	; 0x40
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c68:	230b      	movs	r3, #11
 8002c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4834      	ldr	r0, [pc, #208]	; (8002d48 <HAL_SD_MspInit+0x1a8>)
 8002c76:	f004 fbcd 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c92:	230b      	movs	r3, #11
 8002c94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	482a      	ldr	r0, [pc, #168]	; (8002d48 <HAL_SD_MspInit+0x1a8>)
 8002ca0:	f004 fbb8 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002cbe:	230b      	movs	r3, #11
 8002cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4820      	ldr	r0, [pc, #128]	; (8002d4c <HAL_SD_MspInit+0x1ac>)
 8002ccc:	f004 fba2 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002cea:	230b      	movs	r3, #11
 8002cec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cf0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4815      	ldr	r0, [pc, #84]	; (8002d4c <HAL_SD_MspInit+0x1ac>)
 8002cf8:	f004 fb8c 	bl	8007414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cfc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002d16:	230a      	movs	r3, #10
 8002d18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d20:	4619      	mov	r1, r3
 8002d22:	480a      	ldr	r0, [pc, #40]	; (8002d4c <HAL_SD_MspInit+0x1ac>)
 8002d24:	f004 fb76 	bl	8007414 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	207c      	movs	r0, #124	; 0x7c
 8002d2e:	f002 fb18 	bl	8005362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002d32:	207c      	movs	r0, #124	; 0x7c
 8002d34:	f002 fb2f 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	37e8      	adds	r7, #232	; 0xe8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	48022400 	.word	0x48022400
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58020c00 	.word	0x58020c00
 8002d4c:	58021800 	.word	0x58021800

08002d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4f      	ldr	r2, [pc, #316]	; (8002eac <HAL_SPI_MspInit+0x15c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d12e      	bne.n	8002dd0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002d7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dae:	23e0      	movs	r3, #224	; 0xe0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dbe:	2305      	movs	r3, #5
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	483a      	ldr	r0, [pc, #232]	; (8002eb4 <HAL_SPI_MspInit+0x164>)
 8002dca:	f004 fb23 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dce:	e068      	b.n	8002ea2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a38      	ldr	r2, [pc, #224]	; (8002eb8 <HAL_SPI_MspInit+0x168>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12f      	bne.n	8002e3a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dda:	4b35      	ldr	r3, [pc, #212]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de0:	4a33      	ldr	r2, [pc, #204]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e28:	2305      	movs	r3, #5
 8002e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e30:	4619      	mov	r1, r3
 8002e32:	4822      	ldr	r0, [pc, #136]	; (8002ebc <HAL_SPI_MspInit+0x16c>)
 8002e34:	f004 faee 	bl	8007414 <HAL_GPIO_Init>
}
 8002e38:	e033      	b.n	8002ea2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a20      	ldr	r2, [pc, #128]	; (8002ec0 <HAL_SPI_MspInit+0x170>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d12e      	bne.n	8002ea2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4a:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e54:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_SPI_MspInit+0x160>)
 8002e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e80:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e92:	2306      	movs	r3, #6
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <HAL_SPI_MspInit+0x174>)
 8002e9e:	f004 fab9 	bl	8007414 <HAL_GPIO_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	3738      	adds	r7, #56	; 0x38
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013000 	.word	0x40013000
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58020000 	.word	0x58020000
 8002eb8:	40003800 	.word	0x40003800
 8002ebc:	58020400 	.word	0x58020400
 8002ec0:	40003c00 	.word	0x40003c00
 8002ec4:	58020800 	.word	0x58020800

08002ec8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d15d      	bne.n	8002fa6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b8e      	ldr	r3, [pc, #568]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef0:	4a8c      	ldr	r2, [pc, #560]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002efa:	4b8a      	ldr	r3, [pc, #552]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b86      	ldr	r3, [pc, #536]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f0e:	4a85      	ldr	r2, [pc, #532]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f18:	4b82      	ldr	r3, [pc, #520]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4879      	ldr	r0, [pc, #484]	; (8003128 <HAL_TIM_PWM_MspInit+0x260>)
 8002f42:	f004 fa67 	bl	8007414 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f48:	4a79      	ldr	r2, [pc, #484]	; (8003130 <HAL_TIM_PWM_MspInit+0x268>)
 8002f4a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002f4c:	4b77      	ldr	r3, [pc, #476]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f4e:	2214      	movs	r2, #20
 8002f50:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f54:	2240      	movs	r2, #64	; 0x40
 8002f56:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f58:	4b74      	ldr	r3, [pc, #464]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002f5e:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f64:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f66:	4b71      	ldr	r3, [pc, #452]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f6c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f6e:	4b6f      	ldr	r3, [pc, #444]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f74:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b6b      	ldr	r3, [pc, #428]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002f88:	4868      	ldr	r0, [pc, #416]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f8a:	f002 fa1f 	bl	80053cc <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002f94:	f7ff fbb8 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a64      	ldr	r2, [pc, #400]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f9e:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_TIM_PWM_MspInit+0x264>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002fa4:	e119      	b.n	80031da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a62      	ldr	r2, [pc, #392]	; (8003134 <HAL_TIM_PWM_MspInit+0x26c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d16d      	bne.n	800308c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fb0:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fb8:	f043 0302 	orr.w	r3, r3, #2
 8002fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc0:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8002fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002fd0:	4a5a      	ldr	r2, [pc, #360]	; (800313c <HAL_TIM_PWM_MspInit+0x274>)
 8002fd2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002fd6:	2218      	movs	r2, #24
 8002fd8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fda:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002fdc:	2240      	movs	r2, #64	; 0x40
 8002fde:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe0:	4b55      	ldr	r3, [pc, #340]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fee:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8002ff8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ffc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002ffe:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8003000:	2200      	movs	r2, #0
 8003002:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8003006:	2200      	movs	r2, #0
 8003008:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 800300c:	2200      	movs	r2, #0
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003010:	4849      	ldr	r0, [pc, #292]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8003012:	f002 f9db 	bl	80053cc <HAL_DMA_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800301c:	f7ff fb74 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a45      	ldr	r2, [pc, #276]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8003024:	629a      	str	r2, [r3, #40]	; 0x28
 8003026:	4a44      	ldr	r2, [pc, #272]	; (8003138 <HAL_TIM_PWM_MspInit+0x270>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800302c:	4b44      	ldr	r3, [pc, #272]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 800302e:	4a45      	ldr	r2, [pc, #276]	; (8003144 <HAL_TIM_PWM_MspInit+0x27c>)
 8003030:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003032:	4b43      	ldr	r3, [pc, #268]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003034:	2217      	movs	r2, #23
 8003036:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003038:	4b41      	ldr	r3, [pc, #260]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800304c:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 800304e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003052:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800305c:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003064:	2200      	movs	r2, #0
 8003066:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800306e:	4834      	ldr	r0, [pc, #208]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003070:	f002 f9ac 	bl	80053cc <HAL_DMA_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800307a:	f7ff fb45 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
 8003084:	4a2e      	ldr	r2, [pc, #184]	; (8003140 <HAL_TIM_PWM_MspInit+0x278>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6393      	str	r3, [r2, #56]	; 0x38
}
 800308a:	e0a6      	b.n	80031da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <HAL_TIM_PWM_MspInit+0x280>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d15e      	bne.n	8003154 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 8003098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_TIM_PWM_MspInit+0x25c>)
 80030a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030b6:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_TIM_PWM_MspInit+0x288>)
 80030b8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030bc:	221f      	movs	r2, #31
 80030be:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c6:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030da:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 80030f8:	f002 f968 	bl	80053cc <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003102:	f7ff fb01 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
 800310c:	4a0f      	ldr	r2, [pc, #60]	; (800314c <HAL_TIM_PWM_MspInit+0x284>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	201e      	movs	r0, #30
 8003118:	f002 f923 	bl	8005362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800311c:	201e      	movs	r0, #30
 800311e:	f002 f93a 	bl	8005396 <HAL_NVIC_EnableIRQ>
}
 8003122:	e05a      	b.n	80031da <HAL_TIM_PWM_MspInit+0x312>
 8003124:	58024400 	.word	0x58024400
 8003128:	58020000 	.word	0x58020000
 800312c:	24000970 	.word	0x24000970
 8003130:	40020028 	.word	0x40020028
 8003134:	40000400 	.word	0x40000400
 8003138:	240009e8 	.word	0x240009e8
 800313c:	40020058 	.word	0x40020058
 8003140:	24000a60 	.word	0x24000a60
 8003144:	40020070 	.word	0x40020070
 8003148:	40000800 	.word	0x40000800
 800314c:	24000ad8 	.word	0x24000ad8
 8003150:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <HAL_TIM_PWM_MspInit+0x31c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d13d      	bne.n	80031da <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003164:	4a20      	ldr	r2, [pc, #128]	; (80031e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_TIM_PWM_MspInit+0x328>)
 8003180:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 8003184:	223a      	movs	r2, #58	; 0x3a
 8003186:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 8003196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800319a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 800319e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031a2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031aa:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80031be:	480b      	ldr	r0, [pc, #44]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031c0:	f002 f904 	bl	80053cc <HAL_DMA_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80031ca:	f7ff fa9d 	bl	8002708 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a06      	ldr	r2, [pc, #24]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
 80031d4:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_TIM_PWM_MspInit+0x324>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031da:	bf00      	nop
 80031dc:	3730      	adds	r7, #48	; 0x30
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	58024400 	.word	0x58024400
 80031ec:	24000b50 	.word	0x24000b50
 80031f0:	40020040 	.word	0x40020040

080031f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_TIM_Base_MspInit+0x3c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10e      	bne.n	8003224 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_TIM_Base_MspInit+0x40>)
 8003208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_TIM_Base_MspInit+0x40>)
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_TIM_Base_MspInit+0x40>)
 8003218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40001c00 	.word	0x40001c00
 8003234:	58024400 	.word	0x58024400

08003238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d120      	bne.n	800329c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	4b52      	ldr	r3, [pc, #328]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003260:	4a50      	ldr	r2, [pc, #320]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326a:	4b4e      	ldr	r3, [pc, #312]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 800326c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800327c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003282:	2302      	movs	r3, #2
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2300      	movs	r3, #0
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800328a:	2301      	movs	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	4619      	mov	r1, r3
 8003294:	4844      	ldr	r0, [pc, #272]	; (80033a8 <HAL_TIM_MspPostInit+0x170>)
 8003296:	f004 f8bd 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800329a:	e07f      	b.n	800339c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a42      	ldr	r2, [pc, #264]	; (80033ac <HAL_TIM_MspPostInit+0x174>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d11f      	bne.n	80032e6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 80032a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ac:	4a3d      	ldr	r2, [pc, #244]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 80032b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032c4:	2330      	movs	r3, #48	; 0x30
 80032c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032cc:	2302      	movs	r3, #2
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032d4:	2302      	movs	r3, #2
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 031c 	add.w	r3, r7, #28
 80032dc:	4619      	mov	r1, r3
 80032de:	4832      	ldr	r0, [pc, #200]	; (80033a8 <HAL_TIM_MspPostInit+0x170>)
 80032e0:	f004 f898 	bl	8007414 <HAL_GPIO_Init>
}
 80032e4:	e05a      	b.n	800339c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <HAL_TIM_MspPostInit+0x178>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d131      	bne.n	8003354 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f0:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 80032f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800330e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003320:	2302      	movs	r3, #2
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4619      	mov	r1, r3
 800332a:	4822      	ldr	r0, [pc, #136]	; (80033b4 <HAL_TIM_MspPostInit+0x17c>)
 800332c:	f004 f872 	bl	8007414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800333a:	2302      	movs	r3, #2
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003342:	2302      	movs	r3, #2
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	4819      	ldr	r0, [pc, #100]	; (80033b4 <HAL_TIM_MspPostInit+0x17c>)
 800334e:	f004 f861 	bl	8007414 <HAL_GPIO_Init>
}
 8003352:	e023      	b.n	800339c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a17      	ldr	r2, [pc, #92]	; (80033b8 <HAL_TIM_MspPostInit+0x180>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d11e      	bne.n	800339c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_TIM_MspPostInit+0x16c>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800337c:	2308      	movs	r3, #8
 800337e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003384:	2302      	movs	r3, #2
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	2300      	movs	r3, #0
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800338c:	2302      	movs	r3, #2
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003390:	f107 031c 	add.w	r3, r7, #28
 8003394:	4619      	mov	r1, r3
 8003396:	4809      	ldr	r0, [pc, #36]	; (80033bc <HAL_TIM_MspPostInit+0x184>)
 8003398:	f004 f83c 	bl	8007414 <HAL_GPIO_Init>
}
 800339c:	bf00      	nop
 800339e:	3730      	adds	r7, #48	; 0x30
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	58024400 	.word	0x58024400
 80033a8:	58020400 	.word	0x58020400
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	58020c00 	.word	0x58020c00
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	58020000 	.word	0x58020000

080033c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0ba      	sub	sp, #232	; 0xe8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	22b8      	movs	r2, #184	; 0xb8
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f013 fbb1 	bl	8016b48 <memset>
  if(huart->Instance==UART4)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_UART_MspInit+0x160>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d147      	bne.n	8003480 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80033f0:	f04f 0202 	mov.w	r2, #2
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003402:	f107 0318 	add.w	r3, r7, #24
 8003406:	4618      	mov	r0, r3
 8003408:	f007 f9fe 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003412:	f7ff f979 	bl	8002708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_UART_MspInit+0x164>)
 8003418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_UART_MspInit+0x164>)
 800341e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003426:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_UART_MspInit+0x164>)
 8003428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800342c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <HAL_UART_MspInit+0x164>)
 8003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343a:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <HAL_UART_MspInit+0x164>)
 800343c:	f043 0302 	orr.w	r3, r3, #2
 8003440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003444:	4b37      	ldr	r3, [pc, #220]	; (8003524 <HAL_UART_MspInit+0x164>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800346c:	2308      	movs	r3, #8
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003476:	4619      	mov	r1, r3
 8003478:	482b      	ldr	r0, [pc, #172]	; (8003528 <HAL_UART_MspInit+0x168>)
 800347a:	f003 ffcb 	bl	8007414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800347e:	e04a      	b.n	8003516 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a29      	ldr	r2, [pc, #164]	; (800352c <HAL_UART_MspInit+0x16c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d145      	bne.n	8003516 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800348a:	f04f 0201 	mov.w	r2, #1
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349c:	f107 0318 	add.w	r3, r7, #24
 80034a0:	4618      	mov	r0, r3
 80034a2:	f007 f9b1 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80034ac:	f7ff f92c 	bl	8002708 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034b0:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b6:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034d6:	f043 0304 	orr.w	r3, r3, #4
 80034da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_UART_MspInit+0x164>)
 80034e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ec:	23c0      	movs	r3, #192	; 0xc0
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003504:	2307      	movs	r3, #7
 8003506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800350e:	4619      	mov	r1, r3
 8003510:	4807      	ldr	r0, [pc, #28]	; (8003530 <HAL_UART_MspInit+0x170>)
 8003512:	f003 ff7f 	bl	8007414 <HAL_GPIO_Init>
}
 8003516:	bf00      	nop
 8003518:	37e8      	adds	r7, #232	; 0xe8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40004c00 	.word	0x40004c00
 8003524:	58024400 	.word	0x58024400
 8003528:	58020400 	.word	0x58020400
 800352c:	40011400 	.word	0x40011400
 8003530:	58020800 	.word	0x58020800

08003534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003538:	e7fe      	b.n	8003538 <NMI_Handler+0x4>

0800353a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <HardFault_Handler+0x4>

08003540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <MemManage_Handler+0x4>

08003546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354a:	e7fe      	b.n	800354a <BusFault_Handler+0x4>

0800354c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <UsageFault_Handler+0x4>

08003552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003580:	f000 fa4a 	bl	8003a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800358c:	4802      	ldr	r0, [pc, #8]	; (8003598 <DMA1_Stream0_IRQHandler+0x10>)
 800358e:	f002 fa77 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	24000ad8 	.word	0x24000ad8

0800359c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <DMA1_Stream1_IRQHandler+0x10>)
 80035a2:	f002 fa6d 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	24000970 	.word	0x24000970

080035b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Stream2_IRQHandler+0x10>)
 80035b6:	f002 fa63 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	24000b50 	.word	0x24000b50

080035c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA1_Stream3_IRQHandler+0x10>)
 80035ca:	f002 fa59 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	240009e8 	.word	0x240009e8

080035d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA1_Stream4_IRQHandler+0x10>)
 80035de:	f002 fa4f 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	24000a60 	.word	0x24000a60

080035ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <DMA1_Stream5_IRQHandler+0x10>)
 80035f2:	f002 fa45 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	240003fc 	.word	0x240003fc

08003600 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <TIM4_IRQHandler+0x10>)
 8003606:	f00c f92b 	bl	800f860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2400088c 	.word	0x2400088c

08003614 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <I2C2_EV_IRQHandler+0x10>)
 800361a:	f004 fb61 	bl	8007ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2400058c 	.word	0x2400058c

08003628 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <DMA2_Stream7_IRQHandler+0x10>)
 800362e:	f002 fa27 	bl	8005a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	24000474 	.word	0x24000474

0800363c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <OTG_HS_IRQHandler+0x10>)
 8003642:	f004 ff67 	bl	8008514 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	24002214 	.word	0x24002214

08003650 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <SDMMC2_IRQHandler+0x10>)
 8003656:	f009 ff2d 	bl	800d4b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	240005e0 	.word	0x240005e0

08003664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return 1;
 8003668:	2301      	movs	r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_kill>:

int _kill(int pid, int sig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800367e:	f013 fa2b 	bl	8016ad8 <__errno>
 8003682:	4603      	mov	r3, r0
 8003684:	2216      	movs	r2, #22
 8003686:	601a      	str	r2, [r3, #0]
  return -1;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_exit>:

void _exit (int status)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffe7 	bl	8003674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036a6:	e7fe      	b.n	80036a6 <_exit+0x12>

080036a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e00a      	b.n	80036d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036ba:	f3af 8000 	nop.w
 80036be:	4601      	mov	r1, r0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	60ba      	str	r2, [r7, #8]
 80036c6:	b2ca      	uxtb	r2, r1
 80036c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	dbf0      	blt.n	80036ba <_read+0x12>
  }

  return len;
 80036d8:	687b      	ldr	r3, [r7, #4]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e009      	b.n	8003708 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	dbf1      	blt.n	80036f4 <_write+0x12>
  }
  return len;
 8003710:	687b      	ldr	r3, [r7, #4]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_close>:

int _close(int file)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003742:	605a      	str	r2, [r3, #4]
  return 0;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <_isatty>:

int _isatty(int file)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800375a:	2301      	movs	r3, #1
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <_sbrk+0x5c>)
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <_sbrk+0x60>)
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <_sbrk+0x64>)
 80037a2:	4a12      	ldr	r2, [pc, #72]	; (80037ec <_sbrk+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a6:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b4:	f013 f990 	bl	8016ad8 <__errno>
 80037b8:	4603      	mov	r3, r0
 80037ba:	220c      	movs	r2, #12
 80037bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	e009      	b.n	80037d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <_sbrk+0x64>)
 80037d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	24050000 	.word	0x24050000
 80037e4:	00000800 	.word	0x00000800
 80037e8:	24000d10 	.word	0x24000d10
 80037ec:	24002950 	.word	0x24002950

080037f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037f4:	4b32      	ldr	r3, [pc, #200]	; (80038c0 <SystemInit+0xd0>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	4a31      	ldr	r2, [pc, #196]	; (80038c0 <SystemInit+0xd0>)
 80037fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <SystemInit+0xd4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	2b06      	cmp	r3, #6
 800380e:	d807      	bhi.n	8003820 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <SystemInit+0xd4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <SystemInit+0xd4>)
 800381a:	f043 0307 	orr.w	r3, r3, #7
 800381e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <SystemInit+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <SystemInit+0xd8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <SystemInit+0xd8>)
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <SystemInit+0xd8>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4924      	ldr	r1, [pc, #144]	; (80038c8 <SystemInit+0xd8>)
 8003838:	4b24      	ldr	r3, [pc, #144]	; (80038cc <SystemInit+0xdc>)
 800383a:	4013      	ands	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <SystemInit+0xd4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800384a:	4b1e      	ldr	r3, [pc, #120]	; (80038c4 <SystemInit+0xd4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 030f 	bic.w	r3, r3, #15
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <SystemInit+0xd4>)
 8003854:	f043 0307 	orr.w	r3, r3, #7
 8003858:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <SystemInit+0xd8>)
 800385c:	2200      	movs	r2, #0
 800385e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <SystemInit+0xd8>)
 8003862:	2200      	movs	r2, #0
 8003864:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <SystemInit+0xd8>)
 8003868:	2200      	movs	r2, #0
 800386a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <SystemInit+0xd8>)
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <SystemInit+0xe0>)
 8003870:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <SystemInit+0xd8>)
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <SystemInit+0xe4>)
 8003876:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <SystemInit+0xd8>)
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <SystemInit+0xe8>)
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <SystemInit+0xd8>)
 8003880:	2200      	movs	r2, #0
 8003882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <SystemInit+0xd8>)
 8003886:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <SystemInit+0xe8>)
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <SystemInit+0xd8>)
 800388c:	2200      	movs	r2, #0
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <SystemInit+0xd8>)
 8003892:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <SystemInit+0xe8>)
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <SystemInit+0xd8>)
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <SystemInit+0xd8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <SystemInit+0xd8>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038a8:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <SystemInit+0xd8>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <SystemInit+0xec>)
 80038b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00
 80038c4:	52002000 	.word	0x52002000
 80038c8:	58024400 	.word	0x58024400
 80038cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80038d0:	02020200 	.word	0x02020200
 80038d4:	01ff0000 	.word	0x01ff0000
 80038d8:	01010280 	.word	0x01010280
 80038dc:	52004000 	.word	0x52004000

080038e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80038e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003918 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038e4:	f7ff ff84 	bl	80037f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ea:	490d      	ldr	r1, [pc, #52]	; (8003920 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f0:	e002      	b.n	80038f8 <LoopCopyDataInit>

080038f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f6:	3304      	adds	r3, #4

080038f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038fc:	d3f9      	bcc.n	80038f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003900:	4c0a      	ldr	r4, [pc, #40]	; (800392c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003904:	e001      	b.n	800390a <LoopFillZerobss>

08003906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003908:	3204      	adds	r2, #4

0800390a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800390c:	d3fb      	bcc.n	8003906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800390e:	f013 f8e9 	bl	8016ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003912:	f7fd fc75 	bl	8001200 <main>
  bx  lr
 8003916:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003918:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800391c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003920:	240002fc 	.word	0x240002fc
  ldr r2, =_sidata
 8003924:	0801bc6c 	.word	0x0801bc6c
  ldr r2, =_sbss
 8003928:	24000300 	.word	0x24000300
  ldr r4, =_ebss
 800392c:	24002950 	.word	0x24002950

08003930 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003930:	e7fe      	b.n	8003930 <ADC3_IRQHandler>
	...

08003934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800393a:	2003      	movs	r0, #3
 800393c:	f001 fd06 	bl	800534c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003940:	f006 fd8c 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_Init+0x68>)
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4913      	ldr	r1, [pc, #76]	; (80039a0 <HAL_Init+0x6c>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800395e:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_Init+0x68>)
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <HAL_Init+0x6c>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
 8003974:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_Init+0x70>)
 8003976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <HAL_Init+0x74>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800397e:	200f      	movs	r0, #15
 8003980:	f000 f814 	bl	80039ac <HAL_InitTick>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e002      	b.n	8003994 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800398e:	f7fe ff3b 	bl	8002808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	58024400 	.word	0x58024400
 80039a0:	0801b760 	.word	0x0801b760
 80039a4:	2400002c 	.word	0x2400002c
 80039a8:	24000028 	.word	0x24000028

080039ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <HAL_InitTick+0x60>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e021      	b.n	8003a04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_InitTick+0x64>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <HAL_InitTick+0x60>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fceb 	bl	80053b2 <HAL_SYSTICK_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00e      	b.n	8003a04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0f      	cmp	r3, #15
 80039ea:	d80a      	bhi.n	8003a02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ec:	2200      	movs	r2, #0
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	f001 fcb5 	bl	8005362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <HAL_InitTick+0x68>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	24000034 	.word	0x24000034
 8003a10:	24000028 	.word	0x24000028
 8003a14:	24000030 	.word	0x24000030

08003a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x20>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_IncTick+0x24>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_IncTick+0x24>)
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	24000034 	.word	0x24000034
 8003a3c:	24000d14 	.word	0x24000d14

08003a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return uwTick;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_GetTick+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	24000d14 	.word	0x24000d14

08003a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7ff ffee 	bl	8003a40 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d005      	beq.n	8003a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_Delay+0x44>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a7e:	bf00      	nop
 8003a80:	f7ff ffde 	bl	8003a40 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d8f7      	bhi.n	8003a80 <HAL_Delay+0x28>
  {
  }
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	24000034 	.word	0x24000034

08003aa0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58000400 	.word	0x58000400

08003acc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <LL_ADC_SetOffset+0x60>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10b      	bne.n	8003b70 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b6e:	e00b      	b.n	8003b88 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	430b      	orrs	r3, r1
 8003b82:	431a      	orrs	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	58026000 	.word	0x58026000

08003b98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3360      	adds	r3, #96	; 0x60
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	611a      	str	r2, [r3, #16]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00e      	beq.n	8003c2a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3360      	adds	r3, #96	; 0x60
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	601a      	str	r2, [r3, #0]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	58026000 	.word	0x58026000

08003c3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <LL_ADC_SetOffsetSaturation+0x40>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10e      	bne.n	8003c6e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58026000 	.word	0x58026000

08003c80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	; (8003cc0 <LL_ADC_SetOffsetSign+0x40>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10e      	bne.n	8003cb2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3360      	adds	r3, #96	; 0x60
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58026000 	.word	0x58026000

08003cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3360      	adds	r3, #96	; 0x60
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <LL_ADC_SetOffsetState+0x50>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003cf6:	e007      	b.n	8003d08 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	58026000 	.word	0x58026000

08003d18 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3330      	adds	r3, #48	; 0x30
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	4413      	add	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	211f      	movs	r1, #31
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0e9b      	lsrs	r3, r3, #26
 8003d50:	f003 011f 	and.w	r1, r3, #31
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	0e5b      	lsrs	r3, r3, #25
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	0d1b      	lsrs	r3, r3, #20
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2107      	movs	r1, #7
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	401a      	ands	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0d1b      	lsrs	r3, r3, #20
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	431a      	orrs	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d115      	bne.n	8003e08 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0318 	and.w	r3, r3, #24
 8003df2:	4914      	ldr	r1, [pc, #80]	; (8003e44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003df4:	40d9      	lsrs	r1, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	400b      	ands	r3, r1
 8003dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e06:	e014      	b.n	8003e32 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0318 	and.w	r3, r3, #24
 8003e1e:	4909      	ldr	r1, [pc, #36]	; (8003e44 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e20:	40d9      	lsrs	r1, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	400b      	ands	r3, r1
 8003e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	58026000 	.word	0x58026000
 8003e44:	000fffff 	.word	0x000fffff

08003e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6093      	str	r3, [r2, #8]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	5fffffc0 	.word	0x5fffffc0

08003e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e80:	d101      	bne.n	8003e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	6fffffc0 	.word	0x6fffffc0

08003ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ed0:	d101      	bne.n	8003ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <LL_ADC_IsEnabled+0x18>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <LL_ADC_IsEnabled+0x1a>
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d101      	bne.n	8003f22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d101      	bne.n	8003f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1ee      	b.n	8004350 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fc5b 	bl	800283c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff67 	bl	8003e6c <LL_ADC_IsDeepPowerDownEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff4d 	bl	8003e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff82 	bl	8003ebc <LL_ADC_IsInternalRegulatorEnabled>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d114      	bne.n	8003fe8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff66 	bl	8003e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fc8:	4b8e      	ldr	r3, [pc, #568]	; (8004204 <HAL_ADC_Init+0x2ac>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	4a8e      	ldr	r2, [pc, #568]	; (8004208 <HAL_ADC_Init+0x2b0>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	099b      	lsrs	r3, r3, #6
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fda:	e002      	b.n	8003fe2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f9      	bne.n	8003fdc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ff65 	bl	8003ebc <LL_ADC_IsInternalRegulatorEnabled>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff76 	bl	8003f0a <LL_ADC_REG_IsConversionOngoing>
 800401e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 8188 	bne.w	800433e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8184 	bne.w	800433e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff4a 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d136      	bne.n	80040c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6c      	ldr	r2, [pc, #432]	; (800420c <HAL_ADC_Init+0x2b4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_ADC_Init+0x112>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6a      	ldr	r2, [pc, #424]	; (8004210 <HAL_ADC_Init+0x2b8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10e      	bne.n	8004088 <HAL_ADC_Init+0x130>
 800406a:	4868      	ldr	r0, [pc, #416]	; (800420c <HAL_ADC_Init+0x2b4>)
 800406c:	f7ff ff3a 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004070:	4604      	mov	r4, r0
 8004072:	4867      	ldr	r0, [pc, #412]	; (8004210 <HAL_ADC_Init+0x2b8>)
 8004074:	f7ff ff36 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004078:	4603      	mov	r3, r0
 800407a:	4323      	orrs	r3, r4
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e008      	b.n	800409a <HAL_ADC_Init+0x142>
 8004088:	4862      	ldr	r0, [pc, #392]	; (8004214 <HAL_ADC_Init+0x2bc>)
 800408a:	f7ff ff2b 	bl	8003ee4 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d012      	beq.n	80040c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a5a      	ldr	r2, [pc, #360]	; (800420c <HAL_ADC_Init+0x2b4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_ADC_Init+0x15a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a58      	ldr	r2, [pc, #352]	; (8004210 <HAL_ADC_Init+0x2b8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_Init+0x15e>
 80040b2:	4a59      	ldr	r2, [pc, #356]	; (8004218 <HAL_ADC_Init+0x2c0>)
 80040b4:	e000      	b.n	80040b8 <HAL_ADC_Init+0x160>
 80040b6:	4a59      	ldr	r2, [pc, #356]	; (800421c <HAL_ADC_Init+0x2c4>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f7ff fd04 	bl	8003acc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_ADC_Init+0x2bc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d129      	bne.n	8004122 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7e5b      	ldrb	r3, [r3, #25]
 80040d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040d8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80040de:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d013      	beq.n	8004110 <HAL_ADC_Init+0x1b8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d00d      	beq.n	800410c <HAL_ADC_Init+0x1b4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b1c      	cmp	r3, #28
 80040f6:	d007      	beq.n	8004108 <HAL_ADC_Init+0x1b0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b18      	cmp	r3, #24
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_Init+0x1ac>
 8004100:	2318      	movs	r3, #24
 8004102:	e006      	b.n	8004112 <HAL_ADC_Init+0x1ba>
 8004104:	2300      	movs	r3, #0
 8004106:	e004      	b.n	8004112 <HAL_ADC_Init+0x1ba>
 8004108:	2310      	movs	r3, #16
 800410a:	e002      	b.n	8004112 <HAL_ADC_Init+0x1ba>
 800410c:	2308      	movs	r3, #8
 800410e:	e000      	b.n	8004112 <HAL_ADC_Init+0x1ba>
 8004110:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004112:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e00e      	b.n	8004140 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7e5b      	ldrb	r3, [r3, #25]
 8004126:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800412c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004132:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d106      	bne.n	8004158 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	3b01      	subs	r3, #1
 8004150:	045b      	lsls	r3, r3, #17
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <HAL_ADC_Init+0x2bc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d115      	bne.n	80041aa <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_ADC_Init+0x2c8>)
 8004186:	4013      	ands	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	611a      	str	r2, [r3, #16]
 80041a8:	e009      	b.n	80041be <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <HAL_ADC_Init+0x2cc>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	69b9      	ldr	r1, [r7, #24]
 80041ba:	430b      	orrs	r3, r1
 80041bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fea1 	bl	8003f0a <LL_ADC_REG_IsConversionOngoing>
 80041c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff feae 	bl	8003f30 <LL_ADC_INJ_IsConversionOngoing>
 80041d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 808e 	bne.w	80042fa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 808a 	bne.w	80042fa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <HAL_ADC_Init+0x2bc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d11b      	bne.n	8004228 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7e1b      	ldrb	r3, [r3, #24]
 80041f4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041fc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e018      	b.n	8004236 <HAL_ADC_Init+0x2de>
 8004204:	24000028 	.word	0x24000028
 8004208:	053e2d63 	.word	0x053e2d63
 800420c:	40022000 	.word	0x40022000
 8004210:	40022100 	.word	0x40022100
 8004214:	58026000 	.word	0x58026000
 8004218:	40022300 	.word	0x40022300
 800421c:	58026300 	.word	0x58026300
 8004220:	fff04007 	.word	0xfff04007
 8004224:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7e1b      	ldrb	r3, [r3, #24]
 800422c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	4b46      	ldr	r3, [pc, #280]	; (8004358 <HAL_ADC_Init+0x400>)
 800423e:	4013      	ands	r3, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	430b      	orrs	r3, r1
 8004248:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004250:	2b01      	cmp	r3, #1
 8004252:	d137      	bne.n	80042c4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3f      	ldr	r2, [pc, #252]	; (800435c <HAL_ADC_Init+0x404>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d116      	bne.n	8004292 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <HAL_ADC_Init+0x408>)
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004276:	4311      	orrs	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004282:	430a      	orrs	r2, r1
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	611a      	str	r2, [r3, #16]
 8004290:	e020      	b.n	80042d4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <HAL_ADC_Init+0x40c>)
 800429a:	4013      	ands	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042a0:	3a01      	subs	r2, #1
 80042a2:	0411      	lsls	r1, r2, #16
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042a8:	4311      	orrs	r1, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042b4:	430a      	orrs	r2, r1
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	611a      	str	r2, [r3, #16]
 80042c2:	e007      	b.n	80042d4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1b      	ldr	r2, [pc, #108]	; (800435c <HAL_ADC_Init+0x404>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d002      	beq.n	80042fa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fd63 	bl	8004dc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10c      	bne.n	800431c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	f023 010f 	bic.w	r1, r3, #15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
 800431a:	e007      	b.n	800432c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 020f 	bic.w	r2, r2, #15
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	f023 0303 	bic.w	r3, r3, #3
 8004334:	f043 0201 	orr.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	661a      	str	r2, [r3, #96]	; 0x60
 800433c:	e007      	b.n	800434e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800434e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3724      	adds	r7, #36	; 0x24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	ffffbffc 	.word	0xffffbffc
 800435c:	58026000 	.word	0x58026000
 8004360:	fc00f81f 	.word	0xfc00f81f
 8004364:	fc00f81e 	.word	0xfc00f81e

08004368 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b0b9      	sub	sp, #228	; 0xe4
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004382:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4aa9      	ldr	r2, [pc, #676]	; (8004630 <HAL_ADC_ConfigChannel+0x2c8>)
 800438a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <HAL_ADC_ConfigChannel+0x34>
 8004396:	2302      	movs	r3, #2
 8004398:	f000 bcfa 	b.w	8004d90 <HAL_ADC_ConfigChannel+0xa28>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fdae 	bl	8003f0a <LL_ADC_REG_IsConversionOngoing>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 84de 	bne.w	8004d72 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a9e      	ldr	r2, [pc, #632]	; (8004634 <HAL_ADC_ConfigChannel+0x2cc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d033      	beq.n	8004428 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <HAL_ADC_ConfigChannel+0x76>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2201      	movs	r2, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	e01d      	b.n	800441a <HAL_ADC_ConfigChannel+0xb2>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e004      	b.n	8004410 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2201      	movs	r2, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	69d1      	ldr	r1, [r2, #28]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	430b      	orrs	r3, r1
 8004426:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f7ff fc6f 	bl	8003d18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fd63 	bl	8003f0a <LL_ADC_REG_IsConversionOngoing>
 8004444:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fd6f 	bl	8003f30 <LL_ADC_INJ_IsConversionOngoing>
 8004452:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445a:	2b00      	cmp	r3, #0
 800445c:	f040 8270 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004460:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004464:	2b00      	cmp	r3, #0
 8004466:	f040 826b 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	461a      	mov	r2, r3
 8004478:	f7ff fc7a 	bl	8003d70 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a6c      	ldr	r2, [pc, #432]	; (8004634 <HAL_ADC_ConfigChannel+0x2cc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10d      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044a0:	e032      	b.n	8004508 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044a2:	4b65      	ldr	r3, [pc, #404]	; (8004638 <HAL_ADC_ConfigChannel+0x2d0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ae:	d10b      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x160>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	e01d      	b.n	8004504 <HAL_ADC_ConfigChannel+0x19c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x186>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	e00a      	b.n	8004504 <HAL_ADC_ConfigChannel+0x19c>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d048      	beq.n	80045a2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6919      	ldr	r1, [r3, #16]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004520:	f7ff fb08 	bl	8003b34 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a42      	ldr	r2, [pc, #264]	; (8004634 <HAL_ADC_ConfigChannel+0x2cc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d119      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6919      	ldr	r1, [r3, #16]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	461a      	mov	r2, r3
 800453c:	f7ff fba0 	bl	8003c80 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6919      	ldr	r1, [r3, #16]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d102      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x1f0>
 8004552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004556:	e000      	b.n	800455a <HAL_ADC_ConfigChannel+0x1f2>
 8004558:	2300      	movs	r3, #0
 800455a:	461a      	mov	r2, r3
 800455c:	f7ff fb6e 	bl	8003c3c <LL_ADC_SetOffsetSaturation>
 8004560:	e1ee      	b.n	8004940 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6919      	ldr	r1, [r3, #16]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <HAL_ADC_ConfigChannel+0x212>
 8004574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004578:	e000      	b.n	800457c <HAL_ADC_ConfigChannel+0x214>
 800457a:	2300      	movs	r3, #0
 800457c:	461a      	mov	r2, r3
 800457e:	f7ff fb3b 	bl	8003bf8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6919      	ldr	r1, [r3, #16]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	7e1b      	ldrb	r3, [r3, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d102      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x230>
 8004592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004596:	e000      	b.n	800459a <HAL_ADC_ConfigChannel+0x232>
 8004598:	2300      	movs	r3, #0
 800459a:	461a      	mov	r2, r3
 800459c:	f7ff fb12 	bl	8003bc4 <LL_ADC_SetDataRightShift>
 80045a0:	e1ce      	b.n	8004940 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a23      	ldr	r2, [pc, #140]	; (8004634 <HAL_ADC_ConfigChannel+0x2cc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	f040 8181 	bne.w	80048b0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff faef 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <HAL_ADC_ConfigChannel+0x272>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fae4 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 80045d0:	4603      	mov	r3, r0
 80045d2:	0e9b      	lsrs	r3, r3, #26
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	e01e      	b.n	8004618 <HAL_ADC_ConfigChannel+0x2b0>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2100      	movs	r1, #0
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fad9 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80045f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004608:	2320      	movs	r3, #32
 800460a:	e004      	b.n	8004616 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800460c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <HAL_ADC_ConfigChannel+0x2d4>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	e01e      	b.n	800466e <HAL_ADC_ConfigChannel+0x306>
 8004630:	47ff0000 	.word	0x47ff0000
 8004634:	58026000 	.word	0x58026000
 8004638:	5c001000 	.word	0x5c001000
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004660:	2320      	movs	r3, #32
 8004662:	e004      	b.n	800466e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004664:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004668:	fab3 f383 	clz	r3, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	429a      	cmp	r2, r3
 8004670:	d106      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fb22 	bl	8003cc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fa86 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x344>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fa7b 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 80046a2:	4603      	mov	r3, r0
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	f003 021f 	and.w	r2, r3, #31
 80046aa:	e01e      	b.n	80046ea <HAL_ADC_ConfigChannel+0x382>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2101      	movs	r1, #1
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fa70 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80046ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80046d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80046da:	2320      	movs	r3, #32
 80046dc:	e004      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80046de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x39a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	0e9b      	lsrs	r3, r3, #26
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	e018      	b.n	8004734 <HAL_ADC_ConfigChannel+0x3cc>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800471a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800471e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004726:	2320      	movs	r3, #32
 8004728:	e004      	b.n	8004734 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800472a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	429a      	cmp	r2, r3
 8004736:	d106      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2200      	movs	r2, #0
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fabf 	bl	8003cc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2102      	movs	r1, #2
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fa23 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 8004752:	4603      	mov	r3, r0
 8004754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x40a>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fa18 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 8004768:	4603      	mov	r3, r0
 800476a:	0e9b      	lsrs	r3, r3, #26
 800476c:	f003 021f 	and.w	r2, r3, #31
 8004770:	e01e      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x448>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2102      	movs	r1, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fa0d 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004790:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047a0:	2320      	movs	r3, #32
 80047a2:	e004      	b.n	80047ae <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d105      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x460>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	0e9b      	lsrs	r3, r3, #26
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	e014      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x48a>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80047d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80047dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80047e4:	2320      	movs	r3, #32
 80047e6:	e004      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80047e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d106      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2102      	movs	r1, #2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fa60 	bl	8003cc4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2103      	movs	r1, #3
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff f9c4 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x4c8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2103      	movs	r1, #3
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f9b9 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	0e9b      	lsrs	r3, r3, #26
 800482a:	f003 021f 	and.w	r2, r3, #31
 800482e:	e017      	b.n	8004860 <HAL_ADC_ConfigChannel+0x4f8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2103      	movs	r1, #3
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff f9ae 	bl	8003b98 <LL_ADC_GetOffsetChannel>
 800483c:	4603      	mov	r3, r0
 800483e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800484c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e003      	b.n	800485e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x510>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	e011      	b.n	800489c <HAL_ADC_ConfigChannel+0x534>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800488a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e003      	b.n	800489c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	429a      	cmp	r2, r3
 800489e:	d14f      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2103      	movs	r1, #3
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fa0b 	bl	8003cc4 <LL_ADC_SetOffsetState>
 80048ae:	e047      	b.n	8004940 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	069b      	lsls	r3, r3, #26
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	069b      	lsls	r3, r3, #26
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048f6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	069b      	lsls	r3, r3, #26
 8004908:	429a      	cmp	r2, r3
 800490a:	d107      	bne.n	800491c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800491a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	069b      	lsls	r3, r3, #26
 800492c:	429a      	cmp	r2, r3
 800492e:	d107      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800493e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff facd 	bl	8003ee4 <LL_ADC_IsEnabled>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	f040 8219 	bne.w	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	461a      	mov	r2, r3
 8004960:	f7ff fa32 	bl	8003dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4aa1      	ldr	r2, [pc, #644]	; (8004bf0 <HAL_ADC_ConfigChannel+0x888>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f040 812e 	bne.w	8004bcc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x630>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	3301      	adds	r3, #1
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b09      	cmp	r3, #9
 800498e:	bf94      	ite	ls
 8004990:	2301      	movls	r3, #1
 8004992:	2300      	movhi	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e019      	b.n	80049cc <HAL_ADC_ConfigChannel+0x664>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049b0:	2320      	movs	r3, #32
 80049b2:	e003      	b.n	80049bc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	fab3 f383 	clz	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	bf94      	ite	ls
 80049c6:	2301      	movls	r3, #1
 80049c8:	2300      	movhi	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d079      	beq.n	8004ac4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x684>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	0e9b      	lsrs	r3, r3, #26
 80049e2:	3301      	adds	r3, #1
 80049e4:	069b      	lsls	r3, r3, #26
 80049e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ea:	e015      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x6b0>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a04:	2320      	movs	r3, #32
 8004a06:	e003      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	3301      	adds	r3, #1
 8004a12:	069b      	lsls	r3, r3, #26
 8004a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x6d0>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0e9b      	lsrs	r3, r3, #26
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2101      	movs	r1, #1
 8004a32:	fa01 f303 	lsl.w	r3, r1, r3
 8004a36:	e017      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x700>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a50:	2320      	movs	r3, #32
 8004a52:	e003      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2101      	movs	r1, #1
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	ea42 0103 	orr.w	r1, r2, r3
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x726>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0e9b      	lsrs	r3, r3, #26
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f003 021f 	and.w	r2, r3, #31
 8004a84:	4613      	mov	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	4413      	add	r3, r2
 8004a8a:	051b      	lsls	r3, r3, #20
 8004a8c:	e018      	b.n	8004ac0 <HAL_ADC_ConfigChannel+0x758>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	fa93 f3a3 	rbit	r3, r3
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	e003      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	e07e      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x778>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	069b      	lsls	r3, r3, #26
 8004ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ade:	e015      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x7a4>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	fa93 f3a3 	rbit	r3, r3
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004af8:	2320      	movs	r3, #32
 8004afa:	e003      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	3301      	adds	r3, #1
 8004b06:	069b      	lsls	r3, r3, #26
 8004b08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x7c4>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	e017      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x7f4>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	61bb      	str	r3, [r7, #24]
  return result;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b44:	2320      	movs	r3, #32
 8004b46:	e003      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2101      	movs	r1, #1
 8004b58:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5c:	ea42 0103 	orr.w	r1, r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10d      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x820>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	0e9b      	lsrs	r3, r3, #26
 8004b72:	3301      	adds	r3, #1
 8004b74:	f003 021f 	and.w	r2, r3, #31
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3b1e      	subs	r3, #30
 8004b80:	051b      	lsls	r3, r3, #20
 8004b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b86:	e01b      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x858>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	fa93 f3a3 	rbit	r3, r3
 8004b94:	60fb      	str	r3, [r7, #12]
  return result;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	e003      	b.n	8004bac <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	3301      	adds	r3, #1
 8004bae:	f003 021f 	and.w	r2, r3, #31
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b1e      	subs	r3, #30
 8004bba:	051b      	lsls	r3, r3, #20
 8004bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	6892      	ldr	r2, [r2, #8]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f7ff f8d2 	bl	8003d70 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f280 80d7 	bge.w	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_ADC_ConfigChannel+0x88c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_ADC_ConfigChannel+0x882>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <HAL_ADC_ConfigChannel+0x890>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10a      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x898>
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_ADC_ConfigChannel+0x894>)
 8004bec:	e009      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x89a>
 8004bee:	bf00      	nop
 8004bf0:	47ff0000 	.word	0x47ff0000
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40022100 	.word	0x40022100
 8004bfc:	40022300 	.word	0x40022300
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_ADC_ConfigChannel+0xa30>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fe ff88 	bl	8003b18 <LL_ADC_GetCommonPathInternalCh>
 8004c08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a62      	ldr	r2, [pc, #392]	; (8004d9c <HAL_ADC_ConfigChannel+0xa34>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_ADC_ConfigChannel+0x8b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a61      	ldr	r2, [pc, #388]	; (8004da0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10e      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x8d6>
 8004c20:	485e      	ldr	r0, [pc, #376]	; (8004d9c <HAL_ADC_ConfigChannel+0xa34>)
 8004c22:	f7ff f95f 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004c26:	4604      	mov	r4, r0
 8004c28:	485d      	ldr	r0, [pc, #372]	; (8004da0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c2a:	f7ff f95b 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4323      	orrs	r3, r4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	e008      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x8e8>
 8004c3e:	4859      	ldr	r0, [pc, #356]	; (8004da4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c40:	f7ff f950 	bl	8003ee4 <LL_ADC_IsEnabled>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8084 	beq.w	8004d5e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a53      	ldr	r2, [pc, #332]	; (8004da8 <HAL_ADC_ConfigChannel+0xa40>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d132      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x95e>
 8004c60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d12c      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a4c      	ldr	r2, [pc, #304]	; (8004da4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f040 8086 	bne.w	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a47      	ldr	r2, [pc, #284]	; (8004d9c <HAL_ADC_ConfigChannel+0xa34>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_ADC_ConfigChannel+0x924>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a46      	ldr	r2, [pc, #280]	; (8004da0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x928>
 8004c8c:	4a47      	ldr	r2, [pc, #284]	; (8004dac <HAL_ADC_ConfigChannel+0xa44>)
 8004c8e:	e000      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x92a>
 8004c90:	4a41      	ldr	r2, [pc, #260]	; (8004d98 <HAL_ADC_ConfigChannel+0xa30>)
 8004c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fe ff28 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ca2:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_ADC_ConfigChannel+0xa48>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	4a42      	ldr	r2, [pc, #264]	; (8004db4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cb6:	e002      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f9      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cc4:	e05e      	b.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3b      	ldr	r2, [pc, #236]	; (8004db8 <HAL_ADC_ConfigChannel+0xa50>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x9aa>
 8004cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11a      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a30      	ldr	r2, [pc, #192]	; (8004da4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d14e      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <HAL_ADC_ConfigChannel+0xa34>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_ADC_ConfigChannel+0x992>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <HAL_ADC_ConfigChannel+0xa38>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x996>
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_ADC_ConfigChannel+0xa44>)
 8004cfc:	e000      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x998>
 8004cfe:	4a26      	ldr	r2, [pc, #152]	; (8004d98 <HAL_ADC_ConfigChannel+0xa30>)
 8004d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fe fef1 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d10:	e038      	b.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <HAL_ADC_ConfigChannel+0xa54>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d133      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
 8004d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d12d      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d128      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_ADC_ConfigChannel+0xa34>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADC_ConfigChannel+0x9de>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <HAL_ADC_ConfigChannel+0xa38>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x9e2>
 8004d46:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_ADC_ConfigChannel+0xa44>)
 8004d48:	e000      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x9e4>
 8004d4a:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <HAL_ADC_ConfigChannel+0xa30>)
 8004d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fecb 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
 8004d5c:	e012      	b.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004d70:	e008      	b.n	8004d84 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d8c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	37e4      	adds	r7, #228	; 0xe4
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	58026300 	.word	0x58026300
 8004d9c:	40022000 	.word	0x40022000
 8004da0:	40022100 	.word	0x40022100
 8004da4:	58026000 	.word	0x58026000
 8004da8:	c7520000 	.word	0xc7520000
 8004dac:	40022300 	.word	0x40022300
 8004db0:	24000028 	.word	0x24000028
 8004db4:	053e2d63 	.word	0x053e2d63
 8004db8:	c3210000 	.word	0xc3210000
 8004dbc:	cb840000 	.word	0xcb840000

08004dc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a6c      	ldr	r2, [pc, #432]	; (8004f80 <ADC_ConfigureBoostMode+0x1c0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <ADC_ConfigureBoostMode+0x1c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6b      	ldr	r2, [pc, #428]	; (8004f84 <ADC_ConfigureBoostMode+0x1c4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d109      	bne.n	8004df0 <ADC_ConfigureBoostMode+0x30>
 8004ddc:	4b6a      	ldr	r3, [pc, #424]	; (8004f88 <ADC_ConfigureBoostMode+0x1c8>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e008      	b.n	8004e02 <ADC_ConfigureBoostMode+0x42>
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <ADC_ConfigureBoostMode+0x1cc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01c      	beq.n	8004e40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e06:	f005 fca3 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 8004e0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e14:	d010      	beq.n	8004e38 <ADC_ConfigureBoostMode+0x78>
 8004e16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e1a:	d873      	bhi.n	8004f04 <ADC_ConfigureBoostMode+0x144>
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d002      	beq.n	8004e28 <ADC_ConfigureBoostMode+0x68>
 8004e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e26:	d16d      	bne.n	8004f04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	60fb      	str	r3, [r7, #12]
        break;
 8004e36:	e068      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	089b      	lsrs	r3, r3, #2
 8004e3c:	60fb      	str	r3, [r7, #12]
        break;
 8004e3e:	e064      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e40:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	f006 fe7e 	bl	800bb48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e56:	d051      	beq.n	8004efc <ADC_ConfigureBoostMode+0x13c>
 8004e58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e5c:	d854      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e62:	d047      	beq.n	8004ef4 <ADC_ConfigureBoostMode+0x134>
 8004e64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e68:	d84e      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e6e:	d03d      	beq.n	8004eec <ADC_ConfigureBoostMode+0x12c>
 8004e70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e74:	d848      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7a:	d033      	beq.n	8004ee4 <ADC_ConfigureBoostMode+0x124>
 8004e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e80:	d842      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e86:	d029      	beq.n	8004edc <ADC_ConfigureBoostMode+0x11c>
 8004e88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e8c:	d83c      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e92:	d01a      	beq.n	8004eca <ADC_ConfigureBoostMode+0x10a>
 8004e94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e98:	d836      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004e9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e9e:	d014      	beq.n	8004eca <ADC_ConfigureBoostMode+0x10a>
 8004ea0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ea4:	d830      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eaa:	d00e      	beq.n	8004eca <ADC_ConfigureBoostMode+0x10a>
 8004eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eb0:	d82a      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004eb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eb6:	d008      	beq.n	8004eca <ADC_ConfigureBoostMode+0x10a>
 8004eb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ebc:	d824      	bhi.n	8004f08 <ADC_ConfigureBoostMode+0x148>
 8004ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ec2:	d002      	beq.n	8004eca <ADC_ConfigureBoostMode+0x10a>
 8004ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ec8:	d11e      	bne.n	8004f08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	0c9b      	lsrs	r3, r3, #18
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
        break;
 8004eda:	e016      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]
        break;
 8004ee2:	e012      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	60fb      	str	r3, [r7, #12]
        break;
 8004eea:	e00e      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	60fb      	str	r3, [r7, #12]
        break;
 8004ef2:	e00a      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
        break;
 8004efa:	e006      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	60fb      	str	r3, [r7, #12]
        break;
 8004f02:	e002      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <ADC_ConfigureBoostMode+0x1d0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d808      	bhi.n	8004f2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f28:	e025      	b.n	8004f76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <ADC_ConfigureBoostMode+0x1d4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d80a      	bhi.n	8004f48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	e016      	b.n	8004f76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <ADC_ConfigureBoostMode+0x1d8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d80a      	bhi.n	8004f66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	e007      	b.n	8004f76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	bf00      	nop
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40022000 	.word	0x40022000
 8004f84:	40022100 	.word	0x40022100
 8004f88:	40022300 	.word	0x40022300
 8004f8c:	58026300 	.word	0x58026300
 8004f90:	005f5e10 	.word	0x005f5e10
 8004f94:	00bebc20 	.word	0x00bebc20
 8004f98:	017d7840 	.word	0x017d7840

08004f9c <LL_ADC_IsEnabled>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <LL_ADC_IsEnabled+0x18>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <LL_ADC_IsEnabled+0x1a>
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d101      	bne.n	8004fda <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b0a3      	sub	sp, #140	; 0x8c
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005002:	2302      	movs	r3, #2
 8005004:	e0c1      	b.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800500e:	2300      	movs	r3, #0
 8005010:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005012:	2300      	movs	r3, #0
 8005014:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5e      	ldr	r2, [pc, #376]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d102      	bne.n	8005026 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005020:	4b5d      	ldr	r3, [pc, #372]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	e001      	b.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0a0      	b.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ffb9 	bl	8004fc2 <LL_ADC_REG_IsConversionOngoing>
 8005050:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff ffb2 	bl	8004fc2 <LL_ADC_REG_IsConversionOngoing>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	f040 8081 	bne.w	8005168 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005066:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d17c      	bne.n	8005168 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a48      	ldr	r2, [pc, #288]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a46      	ldr	r2, [pc, #280]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d101      	bne.n	8005086 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005082:	4b46      	ldr	r3, [pc, #280]	; (800519c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005084:	e000      	b.n	8005088 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005086:	4b46      	ldr	r3, [pc, #280]	; (80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005088:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d039      	beq.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	431a      	orrs	r2, r3
 80050a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3a      	ldr	r2, [pc, #232]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a39      	ldr	r2, [pc, #228]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d10e      	bne.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050b8:	4836      	ldr	r0, [pc, #216]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ba:	f7ff ff6f 	bl	8004f9c <LL_ADC_IsEnabled>
 80050be:	4604      	mov	r4, r0
 80050c0:	4835      	ldr	r0, [pc, #212]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050c2:	f7ff ff6b 	bl	8004f9c <LL_ADC_IsEnabled>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4323      	orrs	r3, r4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e008      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80050d6:	4833      	ldr	r0, [pc, #204]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050d8:	f7ff ff60 	bl	8004f9c <LL_ADC_IsEnabled>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf0c      	ite	eq
 80050e2:	2301      	moveq	r3, #1
 80050e4:	2300      	movne	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d047      	beq.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	6811      	ldr	r1, [r2, #0]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	6892      	ldr	r2, [r2, #8]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	431a      	orrs	r2, r3
 8005100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005102:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005104:	e03a      	b.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800510e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d004      	beq.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d10e      	bne.n	8005144 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005126:	481b      	ldr	r0, [pc, #108]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005128:	f7ff ff38 	bl	8004f9c <LL_ADC_IsEnabled>
 800512c:	4604      	mov	r4, r0
 800512e:	481a      	ldr	r0, [pc, #104]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005130:	f7ff ff34 	bl	8004f9c <LL_ADC_IsEnabled>
 8005134:	4603      	mov	r3, r0
 8005136:	4323      	orrs	r3, r4
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	e008      	b.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005144:	4817      	ldr	r0, [pc, #92]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005146:	f7ff ff29 	bl	8004f9c <LL_ADC_IsEnabled>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d010      	beq.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800515a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005160:	4013      	ands	r3, r2
 8005162:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005164:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005166:	e009      	b.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800517a:	e000      	b.n	800517e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800517c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005186:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800518a:	4618      	mov	r0, r3
 800518c:	378c      	adds	r7, #140	; 0x8c
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}
 8005192:	bf00      	nop
 8005194:	40022000 	.word	0x40022000
 8005198:	40022100 	.word	0x40022100
 800519c:	40022300 	.word	0x40022300
 80051a0:	58026300 	.word	0x58026300
 80051a4:	58026000 	.word	0x58026000
 80051a8:	fffff0e0 	.word	0xfffff0e0

080051ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <__NVIC_SetPriorityGrouping+0x40>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c8:	4013      	ands	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <__NVIC_SetPriorityGrouping+0x44>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <__NVIC_SetPriorityGrouping+0x40>)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	60d3      	str	r3, [r2, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	e000ed00 	.word	0xe000ed00
 80051f0:	05fa0000 	.word	0x05fa0000

080051f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__NVIC_GetPriorityGrouping+0x18>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	f003 0307 	and.w	r3, r3, #7
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800521a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	db0b      	blt.n	800523a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	f003 021f 	and.w	r2, r3, #31
 8005228:	4907      	ldr	r1, [pc, #28]	; (8005248 <__NVIC_EnableIRQ+0x38>)
 800522a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2001      	movs	r0, #1
 8005232:	fa00 f202 	lsl.w	r2, r0, r2
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e100 	.word	0xe000e100

0800524c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	6039      	str	r1, [r7, #0]
 8005256:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db0a      	blt.n	8005276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	490c      	ldr	r1, [pc, #48]	; (8005298 <__NVIC_SetPriority+0x4c>)
 8005266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526a:	0112      	lsls	r2, r2, #4
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	440b      	add	r3, r1
 8005270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005274:	e00a      	b.n	800528c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <__NVIC_SetPriority+0x50>)
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	3b04      	subs	r3, #4
 8005284:	0112      	lsls	r2, r2, #4
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	440b      	add	r3, r1
 800528a:	761a      	strb	r2, [r3, #24]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000e100 	.word	0xe000e100
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f1c3 0307 	rsb	r3, r3, #7
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	bf28      	it	cs
 80052be:	2304      	movcs	r3, #4
 80052c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d902      	bls.n	80052d0 <NVIC_EncodePriority+0x30>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3b03      	subs	r3, #3
 80052ce:	e000      	b.n	80052d2 <NVIC_EncodePriority+0x32>
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d4:	f04f 32ff 	mov.w	r2, #4294967295
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	401a      	ands	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e8:	f04f 31ff 	mov.w	r1, #4294967295
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	43d9      	mvns	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f8:	4313      	orrs	r3, r2
         );
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3b01      	subs	r3, #1
 8005314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005318:	d301      	bcc.n	800531e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800531a:	2301      	movs	r3, #1
 800531c:	e00f      	b.n	800533e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800531e:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <SysTick_Config+0x40>)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005326:	210f      	movs	r1, #15
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	f7ff ff8e 	bl	800524c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <SysTick_Config+0x40>)
 8005332:	2200      	movs	r2, #0
 8005334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005336:	4b04      	ldr	r3, [pc, #16]	; (8005348 <SysTick_Config+0x40>)
 8005338:	2207      	movs	r2, #7
 800533a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	e000e010 	.word	0xe000e010

0800534c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff29 	bl	80051ac <__NVIC_SetPriorityGrouping>
}
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	4603      	mov	r3, r0
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005370:	f7ff ff40 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 8005374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	6978      	ldr	r0, [r7, #20]
 800537c:	f7ff ff90 	bl	80052a0 <NVIC_EncodePriority>
 8005380:	4602      	mov	r2, r0
 8005382:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff5f 	bl	800524c <__NVIC_SetPriority>
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	4603      	mov	r3, r0
 800539e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff33 	bl	8005210 <__NVIC_EnableIRQ>
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ffa4 	bl	8005308 <SysTick_Config>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053d4:	f7fe fb34 	bl	8003a40 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e314      	b.n	8005a0e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a66      	ldr	r2, [pc, #408]	; (8005584 <HAL_DMA_Init+0x1b8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d04a      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a65      	ldr	r2, [pc, #404]	; (8005588 <HAL_DMA_Init+0x1bc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d045      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a63      	ldr	r2, [pc, #396]	; (800558c <HAL_DMA_Init+0x1c0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d040      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a62      	ldr	r2, [pc, #392]	; (8005590 <HAL_DMA_Init+0x1c4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d03b      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a60      	ldr	r2, [pc, #384]	; (8005594 <HAL_DMA_Init+0x1c8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d036      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5f      	ldr	r2, [pc, #380]	; (8005598 <HAL_DMA_Init+0x1cc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d031      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a5d      	ldr	r2, [pc, #372]	; (800559c <HAL_DMA_Init+0x1d0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d02c      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <HAL_DMA_Init+0x1d4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d027      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5a      	ldr	r2, [pc, #360]	; (80055a4 <HAL_DMA_Init+0x1d8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a59      	ldr	r2, [pc, #356]	; (80055a8 <HAL_DMA_Init+0x1dc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01d      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a57      	ldr	r2, [pc, #348]	; (80055ac <HAL_DMA_Init+0x1e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a56      	ldr	r2, [pc, #344]	; (80055b0 <HAL_DMA_Init+0x1e4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a54      	ldr	r2, [pc, #336]	; (80055b4 <HAL_DMA_Init+0x1e8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a53      	ldr	r2, [pc, #332]	; (80055b8 <HAL_DMA_Init+0x1ec>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a51      	ldr	r2, [pc, #324]	; (80055bc <HAL_DMA_Init+0x1f0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_DMA_Init+0xb8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a50      	ldr	r2, [pc, #320]	; (80055c0 <HAL_DMA_Init+0x1f4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_DMA_Init+0xbc>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_DMA_Init+0xbe>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 813c 	beq.w	8005708 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a37      	ldr	r2, [pc, #220]	; (8005584 <HAL_DMA_Init+0x1b8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d04a      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a36      	ldr	r2, [pc, #216]	; (8005588 <HAL_DMA_Init+0x1bc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d045      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a34      	ldr	r2, [pc, #208]	; (800558c <HAL_DMA_Init+0x1c0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d040      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a33      	ldr	r2, [pc, #204]	; (8005590 <HAL_DMA_Init+0x1c4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d03b      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a31      	ldr	r2, [pc, #196]	; (8005594 <HAL_DMA_Init+0x1c8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d036      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a30      	ldr	r2, [pc, #192]	; (8005598 <HAL_DMA_Init+0x1cc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d031      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2e      	ldr	r2, [pc, #184]	; (800559c <HAL_DMA_Init+0x1d0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02c      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_DMA_Init+0x1d4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d027      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2b      	ldr	r2, [pc, #172]	; (80055a4 <HAL_DMA_Init+0x1d8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d022      	beq.n	8005540 <HAL_DMA_Init+0x174>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2a      	ldr	r2, [pc, #168]	; (80055a8 <HAL_DMA_Init+0x1dc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d01d      	beq.n	8005540 <HAL_DMA_Init+0x174>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a28      	ldr	r2, [pc, #160]	; (80055ac <HAL_DMA_Init+0x1e0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d018      	beq.n	8005540 <HAL_DMA_Init+0x174>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a27      	ldr	r2, [pc, #156]	; (80055b0 <HAL_DMA_Init+0x1e4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <HAL_DMA_Init+0x174>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a25      	ldr	r2, [pc, #148]	; (80055b4 <HAL_DMA_Init+0x1e8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00e      	beq.n	8005540 <HAL_DMA_Init+0x174>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a24      	ldr	r2, [pc, #144]	; (80055b8 <HAL_DMA_Init+0x1ec>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d009      	beq.n	8005540 <HAL_DMA_Init+0x174>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <HAL_DMA_Init+0x1f0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_DMA_Init+0x174>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <HAL_DMA_Init+0x1f4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <HAL_DMA_Init+0x186>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e007      	b.n	8005562 <HAL_DMA_Init+0x196>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0201 	bic.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005562:	e02f      	b.n	80055c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005564:	f7fe fa6c 	bl	8003a40 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b05      	cmp	r3, #5
 8005570:	d928      	bls.n	80055c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2203      	movs	r2, #3
 800557c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e244      	b.n	8005a0e <HAL_DMA_Init+0x642>
 8005584:	40020010 	.word	0x40020010
 8005588:	40020028 	.word	0x40020028
 800558c:	40020040 	.word	0x40020040
 8005590:	40020058 	.word	0x40020058
 8005594:	40020070 	.word	0x40020070
 8005598:	40020088 	.word	0x40020088
 800559c:	400200a0 	.word	0x400200a0
 80055a0:	400200b8 	.word	0x400200b8
 80055a4:	40020410 	.word	0x40020410
 80055a8:	40020428 	.word	0x40020428
 80055ac:	40020440 	.word	0x40020440
 80055b0:	40020458 	.word	0x40020458
 80055b4:	40020470 	.word	0x40020470
 80055b8:	40020488 	.word	0x40020488
 80055bc:	400204a0 	.word	0x400204a0
 80055c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1c8      	bne.n	8005564 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4b84      	ldr	r3, [pc, #528]	; (80057f0 <HAL_DMA_Init+0x424>)
 80055de:	4013      	ands	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80055ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005602:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b04      	cmp	r3, #4
 8005616:	d107      	bne.n	8005628 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	4313      	orrs	r3, r2
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b28      	cmp	r3, #40	; 0x28
 800562e:	d903      	bls.n	8005638 <HAL_DMA_Init+0x26c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b2e      	cmp	r3, #46	; 0x2e
 8005636:	d91f      	bls.n	8005678 <HAL_DMA_Init+0x2ac>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b3e      	cmp	r3, #62	; 0x3e
 800563e:	d903      	bls.n	8005648 <HAL_DMA_Init+0x27c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b42      	cmp	r3, #66	; 0x42
 8005646:	d917      	bls.n	8005678 <HAL_DMA_Init+0x2ac>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b46      	cmp	r3, #70	; 0x46
 800564e:	d903      	bls.n	8005658 <HAL_DMA_Init+0x28c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b48      	cmp	r3, #72	; 0x48
 8005656:	d90f      	bls.n	8005678 <HAL_DMA_Init+0x2ac>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b4e      	cmp	r3, #78	; 0x4e
 800565e:	d903      	bls.n	8005668 <HAL_DMA_Init+0x29c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b52      	cmp	r3, #82	; 0x52
 8005666:	d907      	bls.n	8005678 <HAL_DMA_Init+0x2ac>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b73      	cmp	r3, #115	; 0x73
 800566e:	d905      	bls.n	800567c <HAL_DMA_Init+0x2b0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b77      	cmp	r3, #119	; 0x77
 8005676:	d801      	bhi.n	800567c <HAL_DMA_Init+0x2b0>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_DMA_Init+0x2b2>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005688:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0307 	bic.w	r3, r3, #7
 80056a0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d117      	bne.n	80056e4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 f9b6 	bl	8006a38 <DMA_CheckFifoParam>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d008      	beq.n	80056e4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2240      	movs	r2, #64	; 0x40
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e194      	b.n	8005a0e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 f8f1 	bl	80068d4 <DMA_CalcBaseAndBitshift>
 80056f2:	4603      	mov	r3, r0
 80056f4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	223f      	movs	r2, #63	; 0x3f
 8005700:	409a      	lsls	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	609a      	str	r2, [r3, #8]
 8005706:	e0ca      	b.n	800589e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a39      	ldr	r2, [pc, #228]	; (80057f4 <HAL_DMA_Init+0x428>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d022      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_DMA_Init+0x42c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d01d      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a36      	ldr	r2, [pc, #216]	; (80057fc <HAL_DMA_Init+0x430>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_DMA_Init+0x434>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a33      	ldr	r2, [pc, #204]	; (8005804 <HAL_DMA_Init+0x438>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a32      	ldr	r2, [pc, #200]	; (8005808 <HAL_DMA_Init+0x43c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a30      	ldr	r2, [pc, #192]	; (800580c <HAL_DMA_Init+0x440>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_DMA_Init+0x38c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <HAL_DMA_Init+0x444>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <HAL_DMA_Init+0x390>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <HAL_DMA_Init+0x392>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8094 	beq.w	800588c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_DMA_Init+0x428>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d021      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a21      	ldr	r2, [pc, #132]	; (80057f8 <HAL_DMA_Init+0x42c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d01c      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_DMA_Init+0x430>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d017      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_DMA_Init+0x434>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d012      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_DMA_Init+0x438>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00d      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_DMA_Init+0x43c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d008      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_DMA_Init+0x440>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d003      	beq.n	80057b2 <HAL_DMA_Init+0x3e6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_DMA_Init+0x444>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_DMA_Init+0x448>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d01d      	beq.n	8005818 <HAL_DMA_Init+0x44c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b80      	cmp	r3, #128	; 0x80
 80057e2:	d102      	bne.n	80057ea <HAL_DMA_Init+0x41e>
 80057e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057e8:	e017      	b.n	800581a <HAL_DMA_Init+0x44e>
 80057ea:	2300      	movs	r3, #0
 80057ec:	e015      	b.n	800581a <HAL_DMA_Init+0x44e>
 80057ee:	bf00      	nop
 80057f0:	fe10803f 	.word	0xfe10803f
 80057f4:	58025408 	.word	0x58025408
 80057f8:	5802541c 	.word	0x5802541c
 80057fc:	58025430 	.word	0x58025430
 8005800:	58025444 	.word	0x58025444
 8005804:	58025458 	.word	0x58025458
 8005808:	5802546c 	.word	0x5802546c
 800580c:	58025480 	.word	0x58025480
 8005810:	58025494 	.word	0x58025494
 8005814:	fffe000f 	.word	0xfffe000f
 8005818:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68d2      	ldr	r2, [r2, #12]
 800581e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005848:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	4b6e      	ldr	r3, [pc, #440]	; (8005a18 <HAL_DMA_Init+0x64c>)
 8005860:	4413      	add	r3, r2
 8005862:	4a6e      	ldr	r2, [pc, #440]	; (8005a1c <HAL_DMA_Init+0x650>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	009a      	lsls	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 f82f 	bl	80068d4 <DMA_CalcBaseAndBitshift>
 8005876:	4603      	mov	r3, r0
 8005878:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	2201      	movs	r2, #1
 8005884:	409a      	lsls	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	e008      	b.n	800589e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2240      	movs	r2, #64	; 0x40
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2203      	movs	r2, #3
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e0b7      	b.n	8005a0e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5f      	ldr	r2, [pc, #380]	; (8005a20 <HAL_DMA_Init+0x654>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d072      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5d      	ldr	r2, [pc, #372]	; (8005a24 <HAL_DMA_Init+0x658>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d06d      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5c      	ldr	r2, [pc, #368]	; (8005a28 <HAL_DMA_Init+0x65c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d068      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5a      	ldr	r2, [pc, #360]	; (8005a2c <HAL_DMA_Init+0x660>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d063      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a59      	ldr	r2, [pc, #356]	; (8005a30 <HAL_DMA_Init+0x664>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d05e      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a57      	ldr	r2, [pc, #348]	; (8005a34 <HAL_DMA_Init+0x668>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d059      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a56      	ldr	r2, [pc, #344]	; (8005a38 <HAL_DMA_Init+0x66c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d054      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a54      	ldr	r2, [pc, #336]	; (8005a3c <HAL_DMA_Init+0x670>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d04f      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a53      	ldr	r2, [pc, #332]	; (8005a40 <HAL_DMA_Init+0x674>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a51      	ldr	r2, [pc, #324]	; (8005a44 <HAL_DMA_Init+0x678>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a50      	ldr	r2, [pc, #320]	; (8005a48 <HAL_DMA_Init+0x67c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4e      	ldr	r2, [pc, #312]	; (8005a4c <HAL_DMA_Init+0x680>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a4d      	ldr	r2, [pc, #308]	; (8005a50 <HAL_DMA_Init+0x684>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a4b      	ldr	r2, [pc, #300]	; (8005a54 <HAL_DMA_Init+0x688>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a4a      	ldr	r2, [pc, #296]	; (8005a58 <HAL_DMA_Init+0x68c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a48      	ldr	r2, [pc, #288]	; (8005a5c <HAL_DMA_Init+0x690>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a47      	ldr	r2, [pc, #284]	; (8005a60 <HAL_DMA_Init+0x694>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a45      	ldr	r2, [pc, #276]	; (8005a64 <HAL_DMA_Init+0x698>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a44      	ldr	r2, [pc, #272]	; (8005a68 <HAL_DMA_Init+0x69c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a42      	ldr	r2, [pc, #264]	; (8005a6c <HAL_DMA_Init+0x6a0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a41      	ldr	r2, [pc, #260]	; (8005a70 <HAL_DMA_Init+0x6a4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a3f      	ldr	r2, [pc, #252]	; (8005a74 <HAL_DMA_Init+0x6a8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3e      	ldr	r2, [pc, #248]	; (8005a78 <HAL_DMA_Init+0x6ac>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_DMA_Init+0x5c2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <HAL_DMA_Init+0x6b0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_DMA_Init+0x5c6>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_DMA_Init+0x5c8>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d032      	beq.n	80059fe <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f8c9 	bl	8006b30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d102      	bne.n	80059ac <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_DMA_Init+0x620>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d80c      	bhi.n	80059ec <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 f946 	bl	8006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	e008      	b.n	80059fe <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	a7fdabf8 	.word	0xa7fdabf8
 8005a1c:	cccccccd 	.word	0xcccccccd
 8005a20:	40020010 	.word	0x40020010
 8005a24:	40020028 	.word	0x40020028
 8005a28:	40020040 	.word	0x40020040
 8005a2c:	40020058 	.word	0x40020058
 8005a30:	40020070 	.word	0x40020070
 8005a34:	40020088 	.word	0x40020088
 8005a38:	400200a0 	.word	0x400200a0
 8005a3c:	400200b8 	.word	0x400200b8
 8005a40:	40020410 	.word	0x40020410
 8005a44:	40020428 	.word	0x40020428
 8005a48:	40020440 	.word	0x40020440
 8005a4c:	40020458 	.word	0x40020458
 8005a50:	40020470 	.word	0x40020470
 8005a54:	40020488 	.word	0x40020488
 8005a58:	400204a0 	.word	0x400204a0
 8005a5c:	400204b8 	.word	0x400204b8
 8005a60:	58025408 	.word	0x58025408
 8005a64:	5802541c 	.word	0x5802541c
 8005a68:	58025430 	.word	0x58025430
 8005a6c:	58025444 	.word	0x58025444
 8005a70:	58025458 	.word	0x58025458
 8005a74:	5802546c 	.word	0x5802546c
 8005a78:	58025480 	.word	0x58025480
 8005a7c:	58025494 	.word	0x58025494

08005a80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a8c:	4b67      	ldr	r3, [pc, #412]	; (8005c2c <HAL_DMA_IRQHandler+0x1ac>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a67      	ldr	r2, [pc, #412]	; (8005c30 <HAL_DMA_IRQHandler+0x1b0>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	0a9b      	lsrs	r3, r3, #10
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a5f      	ldr	r2, [pc, #380]	; (8005c34 <HAL_DMA_IRQHandler+0x1b4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d04a      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5d      	ldr	r2, [pc, #372]	; (8005c38 <HAL_DMA_IRQHandler+0x1b8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d045      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a5c      	ldr	r2, [pc, #368]	; (8005c3c <HAL_DMA_IRQHandler+0x1bc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d040      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5a      	ldr	r2, [pc, #360]	; (8005c40 <HAL_DMA_IRQHandler+0x1c0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d03b      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a59      	ldr	r2, [pc, #356]	; (8005c44 <HAL_DMA_IRQHandler+0x1c4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d036      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a57      	ldr	r2, [pc, #348]	; (8005c48 <HAL_DMA_IRQHandler+0x1c8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <HAL_DMA_IRQHandler+0x1cc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d02c      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a54      	ldr	r2, [pc, #336]	; (8005c50 <HAL_DMA_IRQHandler+0x1d0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d027      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a53      	ldr	r2, [pc, #332]	; (8005c54 <HAL_DMA_IRQHandler+0x1d4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_DMA_IRQHandler+0x1d8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_DMA_IRQHandler+0x1dc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4e      	ldr	r2, [pc, #312]	; (8005c60 <HAL_DMA_IRQHandler+0x1e0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4d      	ldr	r2, [pc, #308]	; (8005c64 <HAL_DMA_IRQHandler+0x1e4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a4b      	ldr	r2, [pc, #300]	; (8005c68 <HAL_DMA_IRQHandler+0x1e8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4a      	ldr	r2, [pc, #296]	; (8005c6c <HAL_DMA_IRQHandler+0x1ec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_DMA_IRQHandler+0xd2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a48      	ldr	r2, [pc, #288]	; (8005c70 <HAL_DMA_IRQHandler+0x1f0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_DMA_IRQHandler+0xd6>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <HAL_DMA_IRQHandler+0xd8>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 842b 	beq.w	80063b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2208      	movs	r2, #8
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80a2 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a2e      	ldr	r2, [pc, #184]	; (8005c34 <HAL_DMA_IRQHandler+0x1b4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d04a      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_DMA_IRQHandler+0x1b8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d045      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_DMA_IRQHandler+0x1bc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d040      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <HAL_DMA_IRQHandler+0x1c0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d03b      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_DMA_IRQHandler+0x1c4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d036      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <HAL_DMA_IRQHandler+0x1c8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d031      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a25      	ldr	r2, [pc, #148]	; (8005c4c <HAL_DMA_IRQHandler+0x1cc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d02c      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a24      	ldr	r2, [pc, #144]	; (8005c50 <HAL_DMA_IRQHandler+0x1d0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d027      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_DMA_IRQHandler+0x1d4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d022      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a21      	ldr	r2, [pc, #132]	; (8005c58 <HAL_DMA_IRQHandler+0x1d8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01d      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_DMA_IRQHandler+0x1dc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d018      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <HAL_DMA_IRQHandler+0x1e0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <HAL_DMA_IRQHandler+0x1e4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <HAL_DMA_IRQHandler+0x1e8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <HAL_DMA_IRQHandler+0x1ec>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x194>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <HAL_DMA_IRQHandler+0x1f0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d12f      	bne.n	8005c74 <HAL_DMA_IRQHandler+0x1f4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	e02e      	b.n	8005c88 <HAL_DMA_IRQHandler+0x208>
 8005c2a:	bf00      	nop
 8005c2c:	24000028 	.word	0x24000028
 8005c30:	1b4e81b5 	.word	0x1b4e81b5
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	f043 0201 	orr.w	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d06e      	beq.n	8005dac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a69      	ldr	r2, [pc, #420]	; (8005e78 <HAL_DMA_IRQHandler+0x3f8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d04a      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a67      	ldr	r2, [pc, #412]	; (8005e7c <HAL_DMA_IRQHandler+0x3fc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d045      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a66      	ldr	r2, [pc, #408]	; (8005e80 <HAL_DMA_IRQHandler+0x400>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d040      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a64      	ldr	r2, [pc, #400]	; (8005e84 <HAL_DMA_IRQHandler+0x404>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d03b      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a63      	ldr	r2, [pc, #396]	; (8005e88 <HAL_DMA_IRQHandler+0x408>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d036      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a61      	ldr	r2, [pc, #388]	; (8005e8c <HAL_DMA_IRQHandler+0x40c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d031      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a60      	ldr	r2, [pc, #384]	; (8005e90 <HAL_DMA_IRQHandler+0x410>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d02c      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a5e      	ldr	r2, [pc, #376]	; (8005e94 <HAL_DMA_IRQHandler+0x414>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d027      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a5d      	ldr	r2, [pc, #372]	; (8005e98 <HAL_DMA_IRQHandler+0x418>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5b      	ldr	r2, [pc, #364]	; (8005e9c <HAL_DMA_IRQHandler+0x41c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01d      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a5a      	ldr	r2, [pc, #360]	; (8005ea0 <HAL_DMA_IRQHandler+0x420>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a58      	ldr	r2, [pc, #352]	; (8005ea4 <HAL_DMA_IRQHandler+0x424>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a57      	ldr	r2, [pc, #348]	; (8005ea8 <HAL_DMA_IRQHandler+0x428>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a55      	ldr	r2, [pc, #340]	; (8005eac <HAL_DMA_IRQHandler+0x42c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a54      	ldr	r2, [pc, #336]	; (8005eb0 <HAL_DMA_IRQHandler+0x430>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2ee>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a52      	ldr	r2, [pc, #328]	; (8005eb4 <HAL_DMA_IRQHandler+0x434>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d10a      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x304>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf14      	ite	ne
 8005d7c:	2301      	movne	r3, #1
 8005d7e:	2300      	moveq	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e003      	b.n	8005d8c <HAL_DMA_IRQHandler+0x30c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	f043 0202 	orr.w	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2204      	movs	r2, #4
 8005db6:	409a      	lsls	r2, r3
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 808f 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a2c      	ldr	r2, [pc, #176]	; (8005e78 <HAL_DMA_IRQHandler+0x3f8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d04a      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_DMA_IRQHandler+0x3fc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d045      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a29      	ldr	r2, [pc, #164]	; (8005e80 <HAL_DMA_IRQHandler+0x400>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d040      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_DMA_IRQHandler+0x404>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d03b      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <HAL_DMA_IRQHandler+0x408>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d036      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <HAL_DMA_IRQHandler+0x40c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d031      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <HAL_DMA_IRQHandler+0x410>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d02c      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_DMA_IRQHandler+0x414>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d027      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a20      	ldr	r2, [pc, #128]	; (8005e98 <HAL_DMA_IRQHandler+0x418>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d022      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <HAL_DMA_IRQHandler+0x41c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01d      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <HAL_DMA_IRQHandler+0x420>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <HAL_DMA_IRQHandler+0x424>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <HAL_DMA_IRQHandler+0x428>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a18      	ldr	r2, [pc, #96]	; (8005eac <HAL_DMA_IRQHandler+0x42c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_DMA_IRQHandler+0x430>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_DMA_IRQHandler+0x3e2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <HAL_DMA_IRQHandler+0x434>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12a      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0x438>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf14      	ite	ne
 8005e70:	2301      	movne	r3, #1
 8005e72:	2300      	moveq	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	e023      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x440>
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec8:	f003 031f 	and.w	r3, r3, #31
 8005ecc:	2204      	movs	r2, #4
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	f043 0204 	orr.w	r2, r3, #4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	2210      	movs	r2, #16
 8005eea:	409a      	lsls	r2, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80a6 	beq.w	8006042 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a85      	ldr	r2, [pc, #532]	; (8006110 <HAL_DMA_IRQHandler+0x690>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a83      	ldr	r2, [pc, #524]	; (8006114 <HAL_DMA_IRQHandler+0x694>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a82      	ldr	r2, [pc, #520]	; (8006118 <HAL_DMA_IRQHandler+0x698>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a80      	ldr	r2, [pc, #512]	; (800611c <HAL_DMA_IRQHandler+0x69c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a7f      	ldr	r2, [pc, #508]	; (8006120 <HAL_DMA_IRQHandler+0x6a0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a7d      	ldr	r2, [pc, #500]	; (8006124 <HAL_DMA_IRQHandler+0x6a4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a7c      	ldr	r2, [pc, #496]	; (8006128 <HAL_DMA_IRQHandler+0x6a8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a7a      	ldr	r2, [pc, #488]	; (800612c <HAL_DMA_IRQHandler+0x6ac>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a79      	ldr	r2, [pc, #484]	; (8006130 <HAL_DMA_IRQHandler+0x6b0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a77      	ldr	r2, [pc, #476]	; (8006134 <HAL_DMA_IRQHandler+0x6b4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a76      	ldr	r2, [pc, #472]	; (8006138 <HAL_DMA_IRQHandler+0x6b8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a74      	ldr	r2, [pc, #464]	; (800613c <HAL_DMA_IRQHandler+0x6bc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_DMA_IRQHandler+0x6c0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a71      	ldr	r2, [pc, #452]	; (8006144 <HAL_DMA_IRQHandler+0x6c4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a70      	ldr	r2, [pc, #448]	; (8006148 <HAL_DMA_IRQHandler+0x6c8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x516>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6e      	ldr	r2, [pc, #440]	; (800614c <HAL_DMA_IRQHandler+0x6cc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10a      	bne.n	8005fac <HAL_DMA_IRQHandler+0x52c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	e009      	b.n	8005fc0 <HAL_DMA_IRQHandler+0x540>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bf14      	ite	ne
 8005fba:	2301      	movne	r3, #1
 8005fbc:	2300      	moveq	r3, #0
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d03e      	beq.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2210      	movs	r2, #16
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d024      	beq.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	e01f      	b.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01b      	beq.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	e016      	b.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d107      	bne.n	8006032 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0208 	bic.w	r2, r2, #8
 8006030:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2220      	movs	r2, #32
 800604c:	409a      	lsls	r2, r3
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4013      	ands	r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8110 	beq.w	8006278 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2c      	ldr	r2, [pc, #176]	; (8006110 <HAL_DMA_IRQHandler+0x690>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d04a      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2b      	ldr	r2, [pc, #172]	; (8006114 <HAL_DMA_IRQHandler+0x694>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d045      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a29      	ldr	r2, [pc, #164]	; (8006118 <HAL_DMA_IRQHandler+0x698>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d040      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a28      	ldr	r2, [pc, #160]	; (800611c <HAL_DMA_IRQHandler+0x69c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d03b      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <HAL_DMA_IRQHandler+0x6a0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d036      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a25      	ldr	r2, [pc, #148]	; (8006124 <HAL_DMA_IRQHandler+0x6a4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d031      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <HAL_DMA_IRQHandler+0x6a8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d02c      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a22      	ldr	r2, [pc, #136]	; (800612c <HAL_DMA_IRQHandler+0x6ac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d027      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a20      	ldr	r2, [pc, #128]	; (8006130 <HAL_DMA_IRQHandler+0x6b0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d022      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <HAL_DMA_IRQHandler+0x6b4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d01d      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_DMA_IRQHandler+0x6b8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d018      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1c      	ldr	r2, [pc, #112]	; (800613c <HAL_DMA_IRQHandler+0x6bc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <HAL_DMA_IRQHandler+0x6c0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00e      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a19      	ldr	r2, [pc, #100]	; (8006144 <HAL_DMA_IRQHandler+0x6c4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d009      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a17      	ldr	r2, [pc, #92]	; (8006148 <HAL_DMA_IRQHandler+0x6c8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d004      	beq.n	80060f8 <HAL_DMA_IRQHandler+0x678>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a16      	ldr	r2, [pc, #88]	; (800614c <HAL_DMA_IRQHandler+0x6cc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d12b      	bne.n	8006150 <HAL_DMA_IRQHandler+0x6d0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	e02a      	b.n	8006164 <HAL_DMA_IRQHandler+0x6e4>
 800610e:	bf00      	nop
 8006110:	40020010 	.word	0x40020010
 8006114:	40020028 	.word	0x40020028
 8006118:	40020040 	.word	0x40020040
 800611c:	40020058 	.word	0x40020058
 8006120:	40020070 	.word	0x40020070
 8006124:	40020088 	.word	0x40020088
 8006128:	400200a0 	.word	0x400200a0
 800612c:	400200b8 	.word	0x400200b8
 8006130:	40020410 	.word	0x40020410
 8006134:	40020428 	.word	0x40020428
 8006138:	40020440 	.word	0x40020440
 800613c:	40020458 	.word	0x40020458
 8006140:	40020470 	.word	0x40020470
 8006144:	40020488 	.word	0x40020488
 8006148:	400204a0 	.word	0x400204a0
 800614c:	400204b8 	.word	0x400204b8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8087 	beq.w	8006278 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	f003 031f 	and.w	r3, r3, #31
 8006172:	2220      	movs	r2, #32
 8006174:	409a      	lsls	r2, r3
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b04      	cmp	r3, #4
 8006184:	d139      	bne.n	80061fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0216 	bic.w	r2, r2, #22
 8006194:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695a      	ldr	r2, [r3, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <HAL_DMA_IRQHandler+0x736>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0208 	bic.w	r2, r2, #8
 80061c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	223f      	movs	r2, #63	; 0x3f
 80061d0:	409a      	lsls	r2, r3
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 834a 	beq.w	8006884 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	4798      	blx	r3
          }
          return;
 80061f8:	e344      	b.n	8006884 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d018      	beq.n	800623a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02c      	beq.n	8006278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
 8006226:	e027      	b.n	8006278 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d023      	beq.n	8006278 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	e01e      	b.n	8006278 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10f      	bne.n	8006268 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0210 	bic.w	r2, r2, #16
 8006256:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8306 	beq.w	800688e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 8088 	beq.w	80063a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2204      	movs	r2, #4
 8006294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7a      	ldr	r2, [pc, #488]	; (8006488 <HAL_DMA_IRQHandler+0xa08>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04a      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a79      	ldr	r2, [pc, #484]	; (800648c <HAL_DMA_IRQHandler+0xa0c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d045      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a77      	ldr	r2, [pc, #476]	; (8006490 <HAL_DMA_IRQHandler+0xa10>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d040      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a76      	ldr	r2, [pc, #472]	; (8006494 <HAL_DMA_IRQHandler+0xa14>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d03b      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a74      	ldr	r2, [pc, #464]	; (8006498 <HAL_DMA_IRQHandler+0xa18>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d036      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a73      	ldr	r2, [pc, #460]	; (800649c <HAL_DMA_IRQHandler+0xa1c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d031      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a71      	ldr	r2, [pc, #452]	; (80064a0 <HAL_DMA_IRQHandler+0xa20>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a70      	ldr	r2, [pc, #448]	; (80064a4 <HAL_DMA_IRQHandler+0xa24>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d027      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a6e      	ldr	r2, [pc, #440]	; (80064a8 <HAL_DMA_IRQHandler+0xa28>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a6d      	ldr	r2, [pc, #436]	; (80064ac <HAL_DMA_IRQHandler+0xa2c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d01d      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6b      	ldr	r2, [pc, #428]	; (80064b0 <HAL_DMA_IRQHandler+0xa30>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d018      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a6a      	ldr	r2, [pc, #424]	; (80064b4 <HAL_DMA_IRQHandler+0xa34>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a68      	ldr	r2, [pc, #416]	; (80064b8 <HAL_DMA_IRQHandler+0xa38>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00e      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a67      	ldr	r2, [pc, #412]	; (80064bc <HAL_DMA_IRQHandler+0xa3c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d009      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a65      	ldr	r2, [pc, #404]	; (80064c0 <HAL_DMA_IRQHandler+0xa40>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_DMA_IRQHandler+0x8b8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a64      	ldr	r2, [pc, #400]	; (80064c4 <HAL_DMA_IRQHandler+0xa44>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d108      	bne.n	800634a <HAL_DMA_IRQHandler+0x8ca>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e007      	b.n	800635a <HAL_DMA_IRQHandler+0x8da>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	3301      	adds	r3, #1
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006362:	429a      	cmp	r2, r3
 8006364:	d307      	bcc.n	8006376 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f2      	bne.n	800635a <HAL_DMA_IRQHandler+0x8da>
 8006374:	e000      	b.n	8006378 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006376:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800638e:	e003      	b.n	8006398 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8272 	beq.w	800688e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
 80063b2:	e26c      	b.n	800688e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a43      	ldr	r2, [pc, #268]	; (80064c8 <HAL_DMA_IRQHandler+0xa48>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a42      	ldr	r2, [pc, #264]	; (80064cc <HAL_DMA_IRQHandler+0xa4c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d01d      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a40      	ldr	r2, [pc, #256]	; (80064d0 <HAL_DMA_IRQHandler+0xa50>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <HAL_DMA_IRQHandler+0xa54>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a3d      	ldr	r2, [pc, #244]	; (80064d8 <HAL_DMA_IRQHandler+0xa58>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a3c      	ldr	r2, [pc, #240]	; (80064dc <HAL_DMA_IRQHandler+0xa5c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3a      	ldr	r2, [pc, #232]	; (80064e0 <HAL_DMA_IRQHandler+0xa60>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_DMA_IRQHandler+0x984>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a39      	ldr	r2, [pc, #228]	; (80064e4 <HAL_DMA_IRQHandler+0xa64>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d101      	bne.n	8006408 <HAL_DMA_IRQHandler+0x988>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <HAL_DMA_IRQHandler+0x98a>
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 823f 	beq.w	800688e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	f003 031f 	and.w	r3, r3, #31
 8006420:	2204      	movs	r2, #4
 8006422:	409a      	lsls	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4013      	ands	r3, r2
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80cd 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xb48>
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80c7 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2204      	movs	r2, #4
 8006444:	409a      	lsls	r2, r3
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d049      	beq.n	80064e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 8210 	beq.w	8006888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006470:	e20a      	b.n	8006888 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8206 	beq.w	8006888 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006484:	e200      	b.n	8006888 <HAL_DMA_IRQHandler+0xe08>
 8006486:	bf00      	nop
 8006488:	40020010 	.word	0x40020010
 800648c:	40020028 	.word	0x40020028
 8006490:	40020040 	.word	0x40020040
 8006494:	40020058 	.word	0x40020058
 8006498:	40020070 	.word	0x40020070
 800649c:	40020088 	.word	0x40020088
 80064a0:	400200a0 	.word	0x400200a0
 80064a4:	400200b8 	.word	0x400200b8
 80064a8:	40020410 	.word	0x40020410
 80064ac:	40020428 	.word	0x40020428
 80064b0:	40020440 	.word	0x40020440
 80064b4:	40020458 	.word	0x40020458
 80064b8:	40020470 	.word	0x40020470
 80064bc:	40020488 	.word	0x40020488
 80064c0:	400204a0 	.word	0x400204a0
 80064c4:	400204b8 	.word	0x400204b8
 80064c8:	58025408 	.word	0x58025408
 80064cc:	5802541c 	.word	0x5802541c
 80064d0:	58025430 	.word	0x58025430
 80064d4:	58025444 	.word	0x58025444
 80064d8:	58025458 	.word	0x58025458
 80064dc:	5802546c 	.word	0x5802546c
 80064e0:	58025480 	.word	0x58025480
 80064e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d160      	bne.n	80065b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a7f      	ldr	r2, [pc, #508]	; (80066f4 <HAL_DMA_IRQHandler+0xc74>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d04a      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a7d      	ldr	r2, [pc, #500]	; (80066f8 <HAL_DMA_IRQHandler+0xc78>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d045      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a7c      	ldr	r2, [pc, #496]	; (80066fc <HAL_DMA_IRQHandler+0xc7c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d040      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a7a      	ldr	r2, [pc, #488]	; (8006700 <HAL_DMA_IRQHandler+0xc80>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d03b      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a79      	ldr	r2, [pc, #484]	; (8006704 <HAL_DMA_IRQHandler+0xc84>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d036      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a77      	ldr	r2, [pc, #476]	; (8006708 <HAL_DMA_IRQHandler+0xc88>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d031      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a76      	ldr	r2, [pc, #472]	; (800670c <HAL_DMA_IRQHandler+0xc8c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d02c      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a74      	ldr	r2, [pc, #464]	; (8006710 <HAL_DMA_IRQHandler+0xc90>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d027      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a73      	ldr	r2, [pc, #460]	; (8006714 <HAL_DMA_IRQHandler+0xc94>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d022      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a71      	ldr	r2, [pc, #452]	; (8006718 <HAL_DMA_IRQHandler+0xc98>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01d      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a70      	ldr	r2, [pc, #448]	; (800671c <HAL_DMA_IRQHandler+0xc9c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d018      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a6e      	ldr	r2, [pc, #440]	; (8006720 <HAL_DMA_IRQHandler+0xca0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6d      	ldr	r2, [pc, #436]	; (8006724 <HAL_DMA_IRQHandler+0xca4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00e      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6b      	ldr	r2, [pc, #428]	; (8006728 <HAL_DMA_IRQHandler+0xca8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d009      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6a      	ldr	r2, [pc, #424]	; (800672c <HAL_DMA_IRQHandler+0xcac>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_DMA_IRQHandler+0xb12>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a68      	ldr	r2, [pc, #416]	; (8006730 <HAL_DMA_IRQHandler+0xcb0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d108      	bne.n	80065a4 <HAL_DMA_IRQHandler+0xb24>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0208 	bic.w	r2, r2, #8
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e007      	b.n	80065b4 <HAL_DMA_IRQHandler+0xb34>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8165 	beq.w	8006888 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c6:	e15f      	b.n	8006888 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2202      	movs	r2, #2
 80065d2:	409a      	lsls	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80c5 	beq.w	8006768 <HAL_DMA_IRQHandler+0xce8>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80bf 	beq.w	8006768 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ee:	f003 031f 	and.w	r3, r3, #31
 80065f2:	2202      	movs	r2, #2
 80065f4:	409a      	lsls	r2, r3
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d018      	beq.n	8006636 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d109      	bne.n	8006622 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 813a 	beq.w	800688c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006620:	e134      	b.n	800688c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8130 	beq.w	800688c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006634:	e12a      	b.n	800688c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 8089 	bne.w	8006754 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2b      	ldr	r2, [pc, #172]	; (80066f4 <HAL_DMA_IRQHandler+0xc74>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d04a      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a29      	ldr	r2, [pc, #164]	; (80066f8 <HAL_DMA_IRQHandler+0xc78>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d045      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a28      	ldr	r2, [pc, #160]	; (80066fc <HAL_DMA_IRQHandler+0xc7c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d040      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a26      	ldr	r2, [pc, #152]	; (8006700 <HAL_DMA_IRQHandler+0xc80>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d03b      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a25      	ldr	r2, [pc, #148]	; (8006704 <HAL_DMA_IRQHandler+0xc84>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d036      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a23      	ldr	r2, [pc, #140]	; (8006708 <HAL_DMA_IRQHandler+0xc88>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d031      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_DMA_IRQHandler+0xc8c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d02c      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a20      	ldr	r2, [pc, #128]	; (8006710 <HAL_DMA_IRQHandler+0xc90>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d027      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_DMA_IRQHandler+0xc94>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d022      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1d      	ldr	r2, [pc, #116]	; (8006718 <HAL_DMA_IRQHandler+0xc98>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01d      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_DMA_IRQHandler+0xc9c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1a      	ldr	r2, [pc, #104]	; (8006720 <HAL_DMA_IRQHandler+0xca0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_DMA_IRQHandler+0xca4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a17      	ldr	r2, [pc, #92]	; (8006728 <HAL_DMA_IRQHandler+0xca8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a16      	ldr	r2, [pc, #88]	; (800672c <HAL_DMA_IRQHandler+0xcac>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_DMA_IRQHandler+0xc62>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a14      	ldr	r2, [pc, #80]	; (8006730 <HAL_DMA_IRQHandler+0xcb0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d128      	bne.n	8006734 <HAL_DMA_IRQHandler+0xcb4>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0214 	bic.w	r2, r2, #20
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e027      	b.n	8006744 <HAL_DMA_IRQHandler+0xcc4>
 80066f4:	40020010 	.word	0x40020010
 80066f8:	40020028 	.word	0x40020028
 80066fc:	40020040 	.word	0x40020040
 8006700:	40020058 	.word	0x40020058
 8006704:	40020070 	.word	0x40020070
 8006708:	40020088 	.word	0x40020088
 800670c:	400200a0 	.word	0x400200a0
 8006710:	400200b8 	.word	0x400200b8
 8006714:	40020410 	.word	0x40020410
 8006718:	40020428 	.word	0x40020428
 800671c:	40020440 	.word	0x40020440
 8006720:	40020458 	.word	0x40020458
 8006724:	40020470 	.word	0x40020470
 8006728:	40020488 	.word	0x40020488
 800672c:	400204a0 	.word	0x400204a0
 8006730:	400204b8 	.word	0x400204b8
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 020a 	bic.w	r2, r2, #10
 8006742:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8097 	beq.w	800688c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006766:	e091      	b.n	800688c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2208      	movs	r2, #8
 8006772:	409a      	lsls	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8088 	beq.w	800688e <HAL_DMA_IRQHandler+0xe0e>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8082 	beq.w	800688e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a41      	ldr	r2, [pc, #260]	; (8006894 <HAL_DMA_IRQHandler+0xe14>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d04a      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <HAL_DMA_IRQHandler+0xe18>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d045      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3e      	ldr	r2, [pc, #248]	; (800689c <HAL_DMA_IRQHandler+0xe1c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d040      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3c      	ldr	r2, [pc, #240]	; (80068a0 <HAL_DMA_IRQHandler+0xe20>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3b      	ldr	r2, [pc, #236]	; (80068a4 <HAL_DMA_IRQHandler+0xe24>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d036      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a39      	ldr	r2, [pc, #228]	; (80068a8 <HAL_DMA_IRQHandler+0xe28>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d031      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a38      	ldr	r2, [pc, #224]	; (80068ac <HAL_DMA_IRQHandler+0xe2c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d02c      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a36      	ldr	r2, [pc, #216]	; (80068b0 <HAL_DMA_IRQHandler+0xe30>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d027      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a35      	ldr	r2, [pc, #212]	; (80068b4 <HAL_DMA_IRQHandler+0xe34>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d022      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a33      	ldr	r2, [pc, #204]	; (80068b8 <HAL_DMA_IRQHandler+0xe38>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01d      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a32      	ldr	r2, [pc, #200]	; (80068bc <HAL_DMA_IRQHandler+0xe3c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d018      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a30      	ldr	r2, [pc, #192]	; (80068c0 <HAL_DMA_IRQHandler+0xe40>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2f      	ldr	r2, [pc, #188]	; (80068c4 <HAL_DMA_IRQHandler+0xe44>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00e      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2d      	ldr	r2, [pc, #180]	; (80068c8 <HAL_DMA_IRQHandler+0xe48>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d009      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2c      	ldr	r2, [pc, #176]	; (80068cc <HAL_DMA_IRQHandler+0xe4c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d004      	beq.n	800682a <HAL_DMA_IRQHandler+0xdaa>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <HAL_DMA_IRQHandler+0xe50>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <HAL_DMA_IRQHandler+0xdbc>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 021c 	bic.w	r2, r2, #28
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e007      	b.n	800684c <HAL_DMA_IRQHandler+0xdcc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 020e 	bic.w	r2, r2, #14
 800684a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2201      	movs	r2, #1
 8006856:	409a      	lsls	r2, r3
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
 8006882:	e004      	b.n	800688e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006884:	bf00      	nop
 8006886:	e002      	b.n	800688e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800688c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800688e:	3728      	adds	r7, #40	; 0x28
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40020010 	.word	0x40020010
 8006898:	40020028 	.word	0x40020028
 800689c:	40020040 	.word	0x40020040
 80068a0:	40020058 	.word	0x40020058
 80068a4:	40020070 	.word	0x40020070
 80068a8:	40020088 	.word	0x40020088
 80068ac:	400200a0 	.word	0x400200a0
 80068b0:	400200b8 	.word	0x400200b8
 80068b4:	40020410 	.word	0x40020410
 80068b8:	40020428 	.word	0x40020428
 80068bc:	40020440 	.word	0x40020440
 80068c0:	40020458 	.word	0x40020458
 80068c4:	40020470 	.word	0x40020470
 80068c8:	40020488 	.word	0x40020488
 80068cc:	400204a0 	.word	0x400204a0
 80068d0:	400204b8 	.word	0x400204b8

080068d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a42      	ldr	r2, [pc, #264]	; (80069ec <DMA_CalcBaseAndBitshift+0x118>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a41      	ldr	r2, [pc, #260]	; (80069f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3f      	ldr	r2, [pc, #252]	; (80069f4 <DMA_CalcBaseAndBitshift+0x120>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d040      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3e      	ldr	r2, [pc, #248]	; (80069f8 <DMA_CalcBaseAndBitshift+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d03b      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a3c      	ldr	r2, [pc, #240]	; (80069fc <DMA_CalcBaseAndBitshift+0x128>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a3b      	ldr	r2, [pc, #236]	; (8006a00 <DMA_CalcBaseAndBitshift+0x12c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a39      	ldr	r2, [pc, #228]	; (8006a04 <DMA_CalcBaseAndBitshift+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <DMA_CalcBaseAndBitshift+0x134>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a36      	ldr	r2, [pc, #216]	; (8006a0c <DMA_CalcBaseAndBitshift+0x138>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a35      	ldr	r2, [pc, #212]	; (8006a10 <DMA_CalcBaseAndBitshift+0x13c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a33      	ldr	r2, [pc, #204]	; (8006a14 <DMA_CalcBaseAndBitshift+0x140>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a32      	ldr	r2, [pc, #200]	; (8006a18 <DMA_CalcBaseAndBitshift+0x144>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a30      	ldr	r2, [pc, #192]	; (8006a1c <DMA_CalcBaseAndBitshift+0x148>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2f      	ldr	r2, [pc, #188]	; (8006a20 <DMA_CalcBaseAndBitshift+0x14c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <DMA_CalcBaseAndBitshift+0x150>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <DMA_CalcBaseAndBitshift+0xa8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <DMA_CalcBaseAndBitshift+0x154>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d101      	bne.n	8006980 <DMA_CalcBaseAndBitshift+0xac>
 800697c:	2301      	movs	r3, #1
 800697e:	e000      	b.n	8006982 <DMA_CalcBaseAndBitshift+0xae>
 8006980:	2300      	movs	r3, #0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d024      	beq.n	80069d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	3b10      	subs	r3, #16
 800698e:	4a27      	ldr	r2, [pc, #156]	; (8006a2c <DMA_CalcBaseAndBitshift+0x158>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	091b      	lsrs	r3, r3, #4
 8006996:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <DMA_CalcBaseAndBitshift+0x15c>)
 80069a0:	5cd3      	ldrb	r3, [r2, r3]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d908      	bls.n	80069c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	461a      	mov	r2, r3
 80069b4:	4b1f      	ldr	r3, [pc, #124]	; (8006a34 <DMA_CalcBaseAndBitshift+0x160>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	659a      	str	r2, [r3, #88]	; 0x58
 80069be:	e00d      	b.n	80069dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <DMA_CalcBaseAndBitshift+0x160>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6593      	str	r3, [r2, #88]	; 0x58
 80069ce:	e005      	b.n	80069dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40020010 	.word	0x40020010
 80069f0:	40020028 	.word	0x40020028
 80069f4:	40020040 	.word	0x40020040
 80069f8:	40020058 	.word	0x40020058
 80069fc:	40020070 	.word	0x40020070
 8006a00:	40020088 	.word	0x40020088
 8006a04:	400200a0 	.word	0x400200a0
 8006a08:	400200b8 	.word	0x400200b8
 8006a0c:	40020410 	.word	0x40020410
 8006a10:	40020428 	.word	0x40020428
 8006a14:	40020440 	.word	0x40020440
 8006a18:	40020458 	.word	0x40020458
 8006a1c:	40020470 	.word	0x40020470
 8006a20:	40020488 	.word	0x40020488
 8006a24:	400204a0 	.word	0x400204a0
 8006a28:	400204b8 	.word	0x400204b8
 8006a2c:	aaaaaaab 	.word	0xaaaaaaab
 8006a30:	0801b770 	.word	0x0801b770
 8006a34:	fffffc00 	.word	0xfffffc00

08006a38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d120      	bne.n	8006a8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d858      	bhi.n	8006b06 <DMA_CheckFifoParam+0xce>
 8006a54:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <DMA_CheckFifoParam+0x24>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a7f 	.word	0x08006a7f
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08006b07 	.word	0x08006b07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d048      	beq.n	8006b0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a7c:	e045      	b.n	8006b0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a86:	d142      	bne.n	8006b0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a8c:	e03f      	b.n	8006b0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a96:	d123      	bne.n	8006ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d838      	bhi.n	8006b12 <DMA_CheckFifoParam+0xda>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <DMA_CheckFifoParam+0x70>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006ab9 	.word	0x08006ab9
 8006aac:	08006abf 	.word	0x08006abf
 8006ab0:	08006ab9 	.word	0x08006ab9
 8006ab4:	08006ad1 	.word	0x08006ad1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
        break;
 8006abc:	e030      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d025      	beq.n	8006b16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ace:	e022      	b.n	8006b16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ad8:	d11f      	bne.n	8006b1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ade:	e01c      	b.n	8006b1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d902      	bls.n	8006aee <DMA_CheckFifoParam+0xb6>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d003      	beq.n	8006af4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006aec:	e018      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	73fb      	strb	r3, [r7, #15]
        break;
 8006af2:	e015      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]
    break;
 8006b04:	e00b      	b.n	8006b1e <DMA_CheckFifoParam+0xe6>
        break;
 8006b06:	bf00      	nop
 8006b08:	e00a      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        break;
 8006b0a:	bf00      	nop
 8006b0c:	e008      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        break;
 8006b0e:	bf00      	nop
 8006b10:	e006      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        break;
 8006b12:	bf00      	nop
 8006b14:	e004      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        break;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
        break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <DMA_CheckFifoParam+0xe8>
    break;
 8006b1e:	bf00      	nop
    }
  }

  return status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop

08006b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a38      	ldr	r2, [pc, #224]	; (8006c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d022      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a36      	ldr	r2, [pc, #216]	; (8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d01d      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a35      	ldr	r2, [pc, #212]	; (8006c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d018      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a33      	ldr	r2, [pc, #204]	; (8006c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a32      	ldr	r2, [pc, #200]	; (8006c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00e      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a30      	ldr	r2, [pc, #192]	; (8006c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d009      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2f      	ldr	r2, [pc, #188]	; (8006c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d004      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2d      	ldr	r2, [pc, #180]	; (8006c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d101      	bne.n	8006b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01a      	beq.n	8006bce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	3b08      	subs	r3, #8
 8006ba0:	4a28      	ldr	r2, [pc, #160]	; (8006c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006bbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006bcc:	e024      	b.n	8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	3b10      	subs	r3, #16
 8006bd6:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d806      	bhi.n	8006bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a1b      	ldr	r2, [pc, #108]	; (8006c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d902      	bls.n	8006bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2201      	movs	r2, #1
 8006c12:	409a      	lsls	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	58025408 	.word	0x58025408
 8006c28:	5802541c 	.word	0x5802541c
 8006c2c:	58025430 	.word	0x58025430
 8006c30:	58025444 	.word	0x58025444
 8006c34:	58025458 	.word	0x58025458
 8006c38:	5802546c 	.word	0x5802546c
 8006c3c:	58025480 	.word	0x58025480
 8006c40:	58025494 	.word	0x58025494
 8006c44:	cccccccd 	.word	0xcccccccd
 8006c48:	16009600 	.word	0x16009600
 8006c4c:	58025880 	.word	0x58025880
 8006c50:	aaaaaaab 	.word	0xaaaaaaab
 8006c54:	400204b8 	.word	0x400204b8
 8006c58:	4002040f 	.word	0x4002040f
 8006c5c:	10008200 	.word	0x10008200
 8006c60:	40020880 	.word	0x40020880

08006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d04a      	beq.n	8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d847      	bhi.n	8006d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a25      	ldr	r2, [pc, #148]	; (8006d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d022      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a24      	ldr	r2, [pc, #144]	; (8006d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d01d      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d018      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00e      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d101      	bne.n	8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006cec:	671a      	str	r2, [r3, #112]	; 0x70
 8006cee:	e009      	b.n	8006d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d02:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	2201      	movs	r2, #1
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	58025408 	.word	0x58025408
 8006d20:	5802541c 	.word	0x5802541c
 8006d24:	58025430 	.word	0x58025430
 8006d28:	58025444 	.word	0x58025444
 8006d2c:	58025458 	.word	0x58025458
 8006d30:	5802546c 	.word	0x5802546c
 8006d34:	58025480 	.word	0x58025480
 8006d38:	58025494 	.word	0x58025494
 8006d3c:	1600963f 	.word	0x1600963f
 8006d40:	58025940 	.word	0x58025940
 8006d44:	1000823f 	.word	0x1000823f
 8006d48:	40020940 	.word	0x40020940

08006d4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b098      	sub	sp, #96	; 0x60
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006d54:	4a84      	ldr	r2, [pc, #528]	; (8006f68 <HAL_FDCAN_Init+0x21c>)
 8006d56:	f107 030c 	add.w	r3, r7, #12
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	224c      	movs	r2, #76	; 0x4c
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f00f fee4 	bl	8016b2c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e1c6      	b.n	80070fc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a7e      	ldr	r2, [pc, #504]	; (8006f6c <HAL_FDCAN_Init+0x220>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d106      	bne.n	8006d86 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fb fe28 	bl	80029f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0210 	bic.w	r2, r2, #16
 8006dae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006db0:	f7fc fe46 	bl	8003a40 <HAL_GetTick>
 8006db4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006db6:	e014      	b.n	8006de2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006db8:	f7fc fe42 	bl	8003a40 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b0a      	cmp	r3, #10
 8006dc4:	d90d      	bls.n	8006de2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e18c      	b.n	80070fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d0e3      	beq.n	8006db8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699a      	ldr	r2, [r3, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f042 0201 	orr.w	r2, r2, #1
 8006dfe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e00:	f7fc fe1e 	bl	8003a40 <HAL_GetTick>
 8006e04:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e06:	e014      	b.n	8006e32 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e08:	f7fc fe1a 	bl	8003a40 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b0a      	cmp	r3, #10
 8006e14:	d90d      	bls.n	8006e32 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e1c:	f043 0201 	orr.w	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2203      	movs	r2, #3
 8006e2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e164      	b.n	80070fc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0e3      	beq.n	8006e08 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0202 	orr.w	r2, r2, #2
 8006e4e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7c1b      	ldrb	r3, [r3, #16]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d108      	bne.n	8006e6a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e66:	619a      	str	r2, [r3, #24]
 8006e68:	e007      	b.n	8006e7a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699a      	ldr	r2, [r3, #24]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e78:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c5b      	ldrb	r3, [r3, #17]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d108      	bne.n	8006e94 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e90:	619a      	str	r2, [r3, #24]
 8006e92:	e007      	b.n	8006ea4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ea2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7c9b      	ldrb	r3, [r3, #18]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d108      	bne.n	8006ebe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eba:	619a      	str	r2, [r3, #24]
 8006ebc:	e007      	b.n	8006ece <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ecc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699a      	ldr	r2, [r3, #24]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006ef2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0210 	bic.w	r2, r2, #16
 8006f02:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d108      	bne.n	8006f1e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0204 	orr.w	r2, r2, #4
 8006f1a:	619a      	str	r2, [r3, #24]
 8006f1c:	e030      	b.n	8006f80 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d02c      	beq.n	8006f80 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d020      	beq.n	8006f70 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f3c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0210 	orr.w	r2, r2, #16
 8006f4c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d114      	bne.n	8006f80 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699a      	ldr	r2, [r3, #24]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0220 	orr.w	r2, r2, #32
 8006f64:	619a      	str	r2, [r3, #24]
 8006f66:	e00b      	b.n	8006f80 <HAL_FDCAN_Init+0x234>
 8006f68:	0801b6bc 	.word	0x0801b6bc
 8006f6c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0220 	orr.w	r2, r2, #32
 8006f7e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f90:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f98:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006fa8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006faa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb4:	d115      	bne.n	8006fe2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006fc4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006fce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006fde:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006fe0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007008:	4413      	add	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d011      	beq.n	8007032 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007016:	f023 0107 	bic.w	r1, r3, #7
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	3360      	adds	r3, #96	; 0x60
 8007022:	443b      	add	r3, r7
 8007024:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d011      	beq.n	800705e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007042:	f023 0107 	bic.w	r1, r3, #7
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	3360      	adds	r3, #96	; 0x60
 800704e:	443b      	add	r3, r7
 8007050:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007062:	2b00      	cmp	r3, #0
 8007064:	d012      	beq.n	800708c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800706e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	3360      	adds	r3, #96	; 0x60
 800707a:	443b      	add	r3, r7
 800707c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007080:	011a      	lsls	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800709c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	3360      	adds	r3, #96	; 0x60
 80070a8:	443b      	add	r3, r7
 80070aa:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80070ae:	021a      	lsls	r2, r3, #8
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a11      	ldr	r2, [pc, #68]	; (8007104 <HAL_FDCAN_Init+0x3b8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d107      	bne.n	80070d4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f022 0203 	bic.w	r2, r2, #3
 80070d2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f80b 	bl	8007108 <FDCAN_CalcultateRamBlockAddresses>
 80070f2:	4603      	mov	r3, r0
 80070f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80070f8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3760      	adds	r7, #96	; 0x60
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	4000a000 	.word	0x4000a000

08007108 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800711e:	4ba7      	ldr	r3, [pc, #668]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007120:	4013      	ands	r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	0091      	lsls	r1, r2, #2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	430b      	orrs	r3, r1
 800712c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007138:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	041a      	lsls	r2, r3, #16
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4413      	add	r3, r2
 8007154:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800715e:	4b97      	ldr	r3, [pc, #604]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007160:	4013      	ands	r3, r2
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0091      	lsls	r1, r2, #2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	430b      	orrs	r3, r1
 800716c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	041a      	lsls	r2, r3, #16
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80071a0:	4b86      	ldr	r3, [pc, #536]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	0091      	lsls	r1, r2, #2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	430b      	orrs	r3, r1
 80071ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071ba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	041a      	lsls	r2, r3, #16
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	4413      	add	r3, r2
 80071de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80071e8:	4b74      	ldr	r3, [pc, #464]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	0091      	lsls	r1, r2, #2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007202:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	041a      	lsls	r2, r3, #16
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800721e:	fb02 f303 	mul.w	r3, r2, r3
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	4413      	add	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007230:	4b62      	ldr	r3, [pc, #392]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007232:	4013      	ands	r3, r2
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	0091      	lsls	r1, r2, #2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	430b      	orrs	r3, r1
 800723e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4413      	add	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800725c:	4b57      	ldr	r3, [pc, #348]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800725e:	4013      	ands	r3, r2
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	0091      	lsls	r1, r2, #2
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	430b      	orrs	r3, r1
 800726a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007276:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727e:	041a      	lsls	r2, r3, #16
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	4413      	add	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800729e:	4b47      	ldr	r3, [pc, #284]	; (80073bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0091      	lsls	r1, r2, #2
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	430b      	orrs	r3, r1
 80072ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072b8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c0:	041a      	lsls	r2, r3, #16
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072d4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072dc:	061a      	lsls	r2, r3, #24
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ec:	4b34      	ldr	r3, [pc, #208]	; (80073c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80072ee:	4413      	add	r3, r2
 80072f0:	009a      	lsls	r2, r3, #2
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	441a      	add	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800733a:	fb01 f303 	mul.w	r3, r1, r3
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	441a      	add	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007352:	fb01 f303 	mul.w	r3, r1, r3
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	441a      	add	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007382:	fb01 f303 	mul.w	r3, r1, r3
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d915      	bls.n	80073e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80073b8:	e006      	b.n	80073c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80073ba:	bf00      	nop
 80073bc:	ffff0003 	.word	0xffff0003
 80073c0:	10002b00 	.word	0x10002b00
 80073c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ce:	f043 0220 	orr.w	r2, r3, #32
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2203      	movs	r2, #3
 80073dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e010      	b.n	8007406 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	e005      	b.n	80073f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	429a      	cmp	r2, r3
 8007402:	d3f3      	bcc.n	80073ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007422:	4b86      	ldr	r3, [pc, #536]	; (800763c <HAL_GPIO_Init+0x228>)
 8007424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007426:	e18c      	b.n	8007742 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	4013      	ands	r3, r2
 8007436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 817e 	beq.w	800773c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	2b01      	cmp	r3, #1
 800744a:	d005      	beq.n	8007458 <HAL_GPIO_Init+0x44>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d130      	bne.n	80074ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	2203      	movs	r2, #3
 8007464:	fa02 f303 	lsl.w	r3, r2, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4013      	ands	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4313      	orrs	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800748e:	2201      	movs	r2, #1
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0201 	and.w	r2, r3, #1
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d017      	beq.n	80074f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	2203      	movs	r2, #3
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	4013      	ands	r3, r2
 80074dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d123      	bne.n	800754a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	08da      	lsrs	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3208      	adds	r2, #8
 800750a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	220f      	movs	r2, #15
 800751a:	fa02 f303 	lsl.w	r3, r2, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	4313      	orrs	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	08da      	lsrs	r2, r3, #3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3208      	adds	r2, #8
 8007544:	69b9      	ldr	r1, [r7, #24]
 8007546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	2203      	movs	r2, #3
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	43db      	mvns	r3, r3
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4013      	ands	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f003 0203 	and.w	r2, r3, #3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80d8 	beq.w	800773c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800758c:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <HAL_GPIO_Init+0x22c>)
 800758e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007592:	4a2b      	ldr	r2, [pc, #172]	; (8007640 <HAL_GPIO_Init+0x22c>)
 8007594:	f043 0302 	orr.w	r3, r3, #2
 8007598:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800759c:	4b28      	ldr	r3, [pc, #160]	; (8007640 <HAL_GPIO_Init+0x22c>)
 800759e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <HAL_GPIO_Init+0x230>)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	3302      	adds	r3, #2
 80075b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	220f      	movs	r2, #15
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	43db      	mvns	r3, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4013      	ands	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <HAL_GPIO_Init+0x234>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d04a      	beq.n	800766c <HAL_GPIO_Init+0x258>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <HAL_GPIO_Init+0x238>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02b      	beq.n	8007636 <HAL_GPIO_Init+0x222>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <HAL_GPIO_Init+0x23c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d025      	beq.n	8007632 <HAL_GPIO_Init+0x21e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <HAL_GPIO_Init+0x240>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01f      	beq.n	800762e <HAL_GPIO_Init+0x21a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_GPIO_Init+0x244>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d019      	beq.n	800762a <HAL_GPIO_Init+0x216>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a18      	ldr	r2, [pc, #96]	; (800765c <HAL_GPIO_Init+0x248>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_GPIO_Init+0x212>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a17      	ldr	r2, [pc, #92]	; (8007660 <HAL_GPIO_Init+0x24c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00d      	beq.n	8007622 <HAL_GPIO_Init+0x20e>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a16      	ldr	r2, [pc, #88]	; (8007664 <HAL_GPIO_Init+0x250>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d007      	beq.n	800761e <HAL_GPIO_Init+0x20a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a15      	ldr	r2, [pc, #84]	; (8007668 <HAL_GPIO_Init+0x254>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d101      	bne.n	800761a <HAL_GPIO_Init+0x206>
 8007616:	2309      	movs	r3, #9
 8007618:	e029      	b.n	800766e <HAL_GPIO_Init+0x25a>
 800761a:	230a      	movs	r3, #10
 800761c:	e027      	b.n	800766e <HAL_GPIO_Init+0x25a>
 800761e:	2307      	movs	r3, #7
 8007620:	e025      	b.n	800766e <HAL_GPIO_Init+0x25a>
 8007622:	2306      	movs	r3, #6
 8007624:	e023      	b.n	800766e <HAL_GPIO_Init+0x25a>
 8007626:	2305      	movs	r3, #5
 8007628:	e021      	b.n	800766e <HAL_GPIO_Init+0x25a>
 800762a:	2304      	movs	r3, #4
 800762c:	e01f      	b.n	800766e <HAL_GPIO_Init+0x25a>
 800762e:	2303      	movs	r3, #3
 8007630:	e01d      	b.n	800766e <HAL_GPIO_Init+0x25a>
 8007632:	2302      	movs	r3, #2
 8007634:	e01b      	b.n	800766e <HAL_GPIO_Init+0x25a>
 8007636:	2301      	movs	r3, #1
 8007638:	e019      	b.n	800766e <HAL_GPIO_Init+0x25a>
 800763a:	bf00      	nop
 800763c:	58000080 	.word	0x58000080
 8007640:	58024400 	.word	0x58024400
 8007644:	58000400 	.word	0x58000400
 8007648:	58020000 	.word	0x58020000
 800764c:	58020400 	.word	0x58020400
 8007650:	58020800 	.word	0x58020800
 8007654:	58020c00 	.word	0x58020c00
 8007658:	58021000 	.word	0x58021000
 800765c:	58021400 	.word	0x58021400
 8007660:	58021800 	.word	0x58021800
 8007664:	58021c00 	.word	0x58021c00
 8007668:	58022400 	.word	0x58022400
 800766c:	2300      	movs	r3, #0
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	f002 0203 	and.w	r2, r2, #3
 8007674:	0092      	lsls	r2, r2, #2
 8007676:	4093      	lsls	r3, r2
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4313      	orrs	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800767e:	4938      	ldr	r1, [pc, #224]	; (8007760 <HAL_GPIO_Init+0x34c>)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	3302      	adds	r3, #2
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800768c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	43db      	mvns	r3, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	43db      	mvns	r3, r3
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	4013      	ands	r3, r2
 80076ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80076e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	43db      	mvns	r3, r3
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	4013      	ands	r3, r2
 8007720:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	3301      	adds	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f ae6b 	bne.w	8007428 <HAL_GPIO_Init+0x14>
  }
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	3724      	adds	r7, #36	; 0x24
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	58000400 	.word	0x58000400

08007764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	887b      	ldrh	r3, [r7, #2]
 8007776:	4013      	ands	r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
 8007780:	e001      	b.n	8007786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	807b      	strh	r3, [r7, #2]
 80077a0:	4613      	mov	r3, r2
 80077a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077a4:	787b      	ldrb	r3, [r7, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077aa:	887a      	ldrh	r2, [r7, #2]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077b0:	e003      	b.n	80077ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077b2:	887b      	ldrh	r3, [r7, #2]
 80077b4:	041a      	lsls	r2, r3, #16
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	619a      	str	r2, [r3, #24]
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07f      	b.n	80078da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fb f966 	bl	8002ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2224      	movs	r2, #36	; 0x24
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0201 	bic.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007818:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007828:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d107      	bne.n	8007842 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	e006      	b.n	8007850 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800784e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d104      	bne.n	8007862 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007860:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6859      	ldr	r1, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <HAL_I2C_Init+0x11c>)
 800786e:	430b      	orrs	r3, r1
 8007870:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007880:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69d9      	ldr	r1, [r3, #28]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1a      	ldr	r2, [r3, #32]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2220      	movs	r2, #32
 80078c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	02008000 	.word	0x02008000

080078e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	461a      	mov	r2, r3
 80078f4:	460b      	mov	r3, r1
 80078f6:	817b      	strh	r3, [r7, #10]
 80078f8:	4613      	mov	r3, r2
 80078fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	f040 80da 	bne.w	8007abe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_I2C_Master_Transmit+0x30>
 8007914:	2302      	movs	r3, #2
 8007916:	e0d3      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007920:	f7fc f88e 	bl	8003a40 <HAL_GetTick>
 8007924:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2319      	movs	r3, #25
 800792c:	2201      	movs	r2, #1
 800792e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fa12 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0be      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2221      	movs	r2, #33	; 0x21
 8007946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2210      	movs	r2, #16
 800794e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	893a      	ldrh	r2, [r7, #8]
 8007962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796e:	b29b      	uxth	r3, r3
 8007970:	2bff      	cmp	r3, #255	; 0xff
 8007972:	d90e      	bls.n	8007992 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	22ff      	movs	r2, #255	; 0xff
 8007978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797e:	b2da      	uxtb	r2, r3
 8007980:	8979      	ldrh	r1, [r7, #10]
 8007982:	4b51      	ldr	r3, [pc, #324]	; (8007ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fba0 	bl	80080d0 <I2C_TransferConfig>
 8007990:	e06c      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	8979      	ldrh	r1, [r7, #10]
 80079a4:	4b48      	ldr	r3, [pc, #288]	; (8007ac8 <HAL_I2C_Master_Transmit+0x1e0>)
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fb8f 	bl	80080d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80079b2:	e05b      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	6a39      	ldr	r1, [r7, #32]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 fa1e 	bl	8007dfa <I2C_WaitOnTXISFlagUntilTimeout>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e07b      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d034      	beq.n	8007a6c <HAL_I2C_Master_Transmit+0x184>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d130      	bne.n	8007a6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	2200      	movs	r2, #0
 8007a12:	2180      	movs	r1, #128	; 0x80
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 f9a1 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e04d      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2bff      	cmp	r3, #255	; 0xff
 8007a2c:	d90e      	bls.n	8007a4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	8979      	ldrh	r1, [r7, #10]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fb43 	bl	80080d0 <I2C_TransferConfig>
 8007a4a:	e00f      	b.n	8007a6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	8979      	ldrh	r1, [r7, #10]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fb32 	bl	80080d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d19e      	bne.n	80079b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa04 	bl	8007e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e01a      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6859      	ldr	r1, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <HAL_I2C_Master_Transmit+0x1e4>)
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	80002000 	.word	0x80002000
 8007acc:	fe00e800 	.word	0xfe00e800

08007ad0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	; 0x28
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	460b      	mov	r3, r1
 8007ade:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	f040 80ef 	bne.w	8007cd0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b00:	d101      	bne.n	8007b06 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007b02:	2302      	movs	r3, #2
 8007b04:	e0e5      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_I2C_IsDeviceReady+0x44>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0de      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d105      	bne.n	8007b3e <HAL_I2C_IsDeviceReady+0x6e>
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b38:	4b68      	ldr	r3, [pc, #416]	; (8007cdc <HAL_I2C_IsDeviceReady+0x20c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	e004      	b.n	8007b48 <HAL_I2C_IsDeviceReady+0x78>
 8007b3e:	897b      	ldrh	r3, [r7, #10]
 8007b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b44:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007b4e:	f7fb ff77 	bl	8003a40 <HAL_GetTick>
 8007b52:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007b80:	e034      	b.n	8007bec <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d01a      	beq.n	8007bc0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fb ff59 	bl	8003a40 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <HAL_I2C_IsDeviceReady+0xd0>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10f      	bne.n	8007bc0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e088      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b20      	cmp	r3, #32
 8007bcc:	bf0c      	ite	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b10      	cmp	r3, #16
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <HAL_I2C_IsDeviceReady+0x128>
 8007bf2:	7fbb      	ldrb	r3, [r7, #30]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0c4      	beq.n	8007b82 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d01a      	beq.n	8007c3c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2120      	movs	r1, #32
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f8a3 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e058      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2220      	movs	r2, #32
 8007c26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e04a      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2200      	movs	r2, #0
 8007c44:	2120      	movs	r1, #32
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f888 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e03d      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2220      	movs	r2, #32
 8007c64:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d118      	bne.n	8007ca0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c7c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2200      	movs	r2, #0
 8007c86:	2120      	movs	r1, #32
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f867 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e01c      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	f63f af3d 	bhi.w	8007b2a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	02002000 	.word	0x02002000

08007ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
  }
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d103      	bne.n	8007d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d007      	beq.n	8007d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	619a      	str	r2, [r3, #24]
  }
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d6c:	e031      	b.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d74:	d02d      	beq.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d76:	f7fb fe63 	bl	8003a40 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d122      	bne.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	4013      	ands	r3, r2
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d113      	bne.n	8007dd2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dae:	f043 0220 	orr.w	r2, r3, #32
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e00f      	b.n	8007df2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d0be      	beq.n	8007d6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e06:	e033      	b.n	8007e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f87f 	bl	8007f10 <I2C_IsErrorOccurred>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e031      	b.n	8007e80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e22:	d025      	beq.n	8007e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e24:	f7fb fe0c 	bl	8003a40 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d302      	bcc.n	8007e3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11a      	bne.n	8007e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d013      	beq.n	8007e70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4c:	f043 0220 	orr.w	r2, r3, #32
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e007      	b.n	8007e80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d1c4      	bne.n	8007e08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e94:	e02f      	b.n	8007ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f838 	bl	8007f10 <I2C_IsErrorOccurred>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e02d      	b.n	8007f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eaa:	f7fb fdc9 	bl	8003a40 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d11a      	bne.n	8007ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f003 0320 	and.w	r3, r3, #32
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d013      	beq.n	8007ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	f043 0220 	orr.w	r2, r3, #32
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e007      	b.n	8007f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d1c8      	bne.n	8007e96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f003 0310 	and.w	r3, r3, #16
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d068      	beq.n	800800e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2210      	movs	r2, #16
 8007f42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f44:	e049      	b.n	8007fda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d045      	beq.n	8007fda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f4e:	f7fb fd77 	bl	8003a40 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d302      	bcc.n	8007f64 <I2C_IsErrorOccurred+0x54>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d13a      	bne.n	8007fda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f86:	d121      	bne.n	8007fcc <I2C_IsErrorOccurred+0xbc>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f8e:	d01d      	beq.n	8007fcc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f90:	7cfb      	ldrb	r3, [r7, #19]
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d01a      	beq.n	8007fcc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fa4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fa6:	f7fb fd4b 	bl	8003a40 <HAL_GetTick>
 8007faa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fac:	e00e      	b.n	8007fcc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fae:	f7fb fd47 	bl	8003a40 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b19      	cmp	r3, #25
 8007fba:	d907      	bls.n	8007fcc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	f043 0320 	orr.w	r3, r3, #32
 8007fc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007fca:	e006      	b.n	8007fda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b20      	cmp	r3, #32
 8007fd8:	d1e9      	bne.n	8007fae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d003      	beq.n	8007ff0 <I2C_IsErrorOccurred+0xe0>
 8007fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0aa      	beq.n	8007f46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d103      	bne.n	8008000 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	f043 0304 	orr.w	r3, r3, #4
 8008006:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008020:	6a3b      	ldr	r3, [r7, #32]
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00b      	beq.n	800805a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f043 0308 	orr.w	r3, r3, #8
 8008048:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	f043 0302 	orr.w	r3, r3, #2
 800806a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800807c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008080:	2b00      	cmp	r3, #0
 8008082:	d01c      	beq.n	80080be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fe45 	bl	8007d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6859      	ldr	r1, [r3, #4]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <I2C_IsErrorOccurred+0x1bc>)
 8008096:	400b      	ands	r3, r1
 8008098:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80080be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3728      	adds	r7, #40	; 0x28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	fe00e800 	.word	0xfe00e800

080080d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	607b      	str	r3, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	817b      	strh	r3, [r7, #10]
 80080de:	4613      	mov	r3, r2
 80080e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080e2:	897b      	ldrh	r3, [r7, #10]
 80080e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080e8:	7a7b      	ldrb	r3, [r7, #9]
 80080ea:	041b      	lsls	r3, r3, #16
 80080ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	0d5b      	lsrs	r3, r3, #21
 800810a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <I2C_TransferConfig+0x60>)
 8008110:	430b      	orrs	r3, r1
 8008112:	43db      	mvns	r3, r3
 8008114:	ea02 0103 	and.w	r1, r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	03ff63ff 	.word	0x03ff63ff

08008134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b20      	cmp	r3, #32
 8008148:	d138      	bne.n	80081bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008154:	2302      	movs	r3, #2
 8008156:	e032      	b.n	80081be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6819      	ldr	r1, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	430a      	orrs	r2, r1
 8008196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d139      	bne.n	8008254 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d101      	bne.n	80081ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081ea:	2302      	movs	r3, #2
 80081ec:	e033      	b.n	8008256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2224      	movs	r2, #36	; 0x24
 80081fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 0201 	bic.w	r2, r2, #1
 800820c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800821c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2220      	movs	r2, #32
 8008244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	e000      	b.n	8008256 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008254:	2302      	movs	r3, #2
  }
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008264:	b08f      	sub	sp, #60	; 0x3c
 8008266:	af0a      	add	r7, sp, #40	; 0x28
 8008268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e116      	b.n	80084a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f00e f916 	bl	80164c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2203      	movs	r2, #3
 8008298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f00a fa5b 	bl	801276e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	603b      	str	r3, [r7, #0]
 80082be:	687e      	ldr	r6, [r7, #4]
 80082c0:	466d      	mov	r5, sp
 80082c2:	f106 0410 	add.w	r4, r6, #16
 80082c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80082d6:	1d33      	adds	r3, r6, #4
 80082d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082da:	6838      	ldr	r0, [r7, #0]
 80082dc:	f00a f926 	bl	801252c <USB_CoreInit>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e0d7      	b.n	80084a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f00a fa49 	bl	8012790 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]
 8008302:	e04a      	b.n	800839a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008304:	7bfa      	ldrb	r2, [r7, #15]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	333d      	adds	r3, #61	; 0x3d
 8008314:	2201      	movs	r2, #1
 8008316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	333c      	adds	r3, #60	; 0x3c
 8008328:	7bfa      	ldrb	r2, [r7, #15]
 800832a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800832c:	7bfa      	ldrb	r2, [r7, #15]
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	b298      	uxth	r0, r3
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	3356      	adds	r3, #86	; 0x56
 8008340:	4602      	mov	r2, r0
 8008342:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008344:	7bfa      	ldrb	r2, [r7, #15]
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4613      	mov	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	440b      	add	r3, r1
 8008352:	3340      	adds	r3, #64	; 0x40
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008358:	7bfa      	ldrb	r2, [r7, #15]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	3344      	adds	r3, #68	; 0x44
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3348      	adds	r3, #72	; 0x48
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008380:	7bfa      	ldrb	r2, [r7, #15]
 8008382:	6879      	ldr	r1, [r7, #4]
 8008384:	4613      	mov	r3, r2
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	440b      	add	r3, r1
 800838e:	334c      	adds	r3, #76	; 0x4c
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	3301      	adds	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
 800839a:	7bfa      	ldrb	r2, [r7, #15]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d3af      	bcc.n	8008304 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
 80083a8:	e044      	b.n	8008434 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80083aa:	7bfa      	ldrb	r2, [r7, #15]
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	00db      	lsls	r3, r3, #3
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80083c0:	7bfa      	ldrb	r2, [r7, #15]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	440b      	add	r3, r1
 80083ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80083d2:	7bfa      	ldrb	r2, [r7, #15]
 80083d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80083d6:	7bfa      	ldrb	r2, [r7, #15]
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80083e8:	2200      	movs	r2, #0
 80083ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80083ec:	7bfa      	ldrb	r2, [r7, #15]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008402:	7bfa      	ldrb	r2, [r7, #15]
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008418:	7bfa      	ldrb	r2, [r7, #15]
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	3301      	adds	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d3b5      	bcc.n	80083aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	687e      	ldr	r6, [r7, #4]
 8008446:	466d      	mov	r5, sp
 8008448:	f106 0410 	add.w	r4, r6, #16
 800844c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800844e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008458:	e885 0003 	stmia.w	r5, {r0, r1}
 800845c:	1d33      	adds	r3, r6, #4
 800845e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008460:	6838      	ldr	r0, [r7, #0]
 8008462:	f00a f9e1 	bl	8012828 <USB_DevInit>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e014      	b.n	80084a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b01      	cmp	r3, #1
 800848e:	d102      	bne.n	8008496 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 f96f 	bl	8009774 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f00b fa23 	bl	80138e6 <USB_DevDisconnect>

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_PCD_Start+0x1c>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e022      	b.n	800850c <HAL_PCD_Start+0x62>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d105      	bne.n	80084ee <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f00a f92a 	bl	801274c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f00b f9d1 	bl	80138a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b08d      	sub	sp, #52	; 0x34
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f00b fa8f 	bl	8013a4e <USB_GetMode>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f040 84b7 	bne.w	8008ea6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f00b f9f3 	bl	8013928 <USB_ReadInterrupts>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 84ad 	beq.w	8008ea4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f00b f9e0 	bl	8013928 <USB_ReadInterrupts>
 8008568:	4603      	mov	r3, r0
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b02      	cmp	r3, #2
 8008570:	d107      	bne.n	8008582 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695a      	ldr	r2, [r3, #20]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f002 0202 	and.w	r2, r2, #2
 8008580:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f00b f9ce 	bl	8013928 <USB_ReadInterrupts>
 800858c:	4603      	mov	r3, r0
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b10      	cmp	r3, #16
 8008594:	d161      	bne.n	800865a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699a      	ldr	r2, [r3, #24]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0210 	bic.w	r2, r2, #16
 80085a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f003 020f 	and.w	r2, r3, #15
 80085b2:	4613      	mov	r3, r2
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	3304      	adds	r3, #4
 80085c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	0c5b      	lsrs	r3, r3, #17
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d124      	bne.n	800861c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80085d8:	4013      	ands	r3, r2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d035      	beq.n	800864a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	091b      	lsrs	r3, r3, #4
 80085e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	461a      	mov	r2, r3
 80085f0:	6a38      	ldr	r0, [r7, #32]
 80085f2:	f00b f805 	bl	8013600 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	091b      	lsrs	r3, r3, #4
 80085fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008602:	441a      	add	r2, r3
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	695a      	ldr	r2, [r3, #20]
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	091b      	lsrs	r3, r3, #4
 8008610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008614:	441a      	add	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	615a      	str	r2, [r3, #20]
 800861a:	e016      	b.n	800864a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	0c5b      	lsrs	r3, r3, #17
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	2b06      	cmp	r3, #6
 8008626:	d110      	bne.n	800864a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800862e:	2208      	movs	r2, #8
 8008630:	4619      	mov	r1, r3
 8008632:	6a38      	ldr	r0, [r7, #32]
 8008634:	f00a ffe4 	bl	8013600 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	695a      	ldr	r2, [r3, #20]
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	091b      	lsrs	r3, r3, #4
 8008640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008644:	441a      	add	r2, r3
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0210 	orr.w	r2, r2, #16
 8008658:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f00b f962 	bl	8013928 <USB_ReadInterrupts>
 8008664:	4603      	mov	r3, r0
 8008666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800866e:	f040 80a7 	bne.w	80087c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f00b f967 	bl	801394e <USB_ReadDevAllOutEpInterrupt>
 8008680:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008682:	e099      	b.n	80087b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 808e 	beq.w	80087ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	4611      	mov	r1, r2
 800869a:	4618      	mov	r0, r3
 800869c:	f00b f98b 	bl	80139b6 <USB_ReadDevOutEPInterrupt>
 80086a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	461a      	mov	r2, r3
 80086ba:	2301      	movs	r3, #1
 80086bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80086be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fed1 	bl	8009468 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f003 0308 	and.w	r3, r3, #8
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00c      	beq.n	80086ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	461a      	mov	r2, r3
 80086de:	2308      	movs	r3, #8
 80086e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80086e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 ffa7 	bl	8009638 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	461a      	mov	r2, r3
 8008702:	2310      	movs	r3, #16
 8008704:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d030      	beq.n	8008772 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d109      	bne.n	8008730 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800872e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008732:	4613      	mov	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	4413      	add	r3, r2
 8008742:	3304      	adds	r3, #4
 8008744:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	78db      	ldrb	r3, [r3, #3]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d108      	bne.n	8008760 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	b2db      	uxtb	r3, r3
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f00d ffa8 	bl	80166b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	2302      	movs	r3, #2
 8008770:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f003 0320 	and.w	r3, r3, #32
 8008778:	2b00      	cmp	r3, #0
 800877a:	d008      	beq.n	800878e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008788:	461a      	mov	r2, r3
 800878a:	2320      	movs	r3, #32
 800878c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a4:	461a      	mov	r2, r3
 80087a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	3301      	adds	r3, #1
 80087b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f47f af62 	bne.w	8008684 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f00b f8af 	bl	8013928 <USB_ReadInterrupts>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087d4:	f040 80db 	bne.w	800898e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f00b f8d0 	bl	8013982 <USB_ReadDevAllInEpInterrupt>
 80087e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80087e8:	e0cd      	b.n	8008986 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 80c2 	beq.w	800897a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f00b f8f6 	bl	80139f2 <USB_ReadDevInEPInterrupt>
 8008806:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d057      	beq.n	80088c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	2201      	movs	r2, #1
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	43db      	mvns	r3, r3
 800882c:	69f9      	ldr	r1, [r7, #28]
 800882e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008832:	4013      	ands	r3, r2
 8008834:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008842:	461a      	mov	r2, r3
 8008844:	2301      	movs	r3, #1
 8008846:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d132      	bne.n	80088b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008854:	4613      	mov	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	3348      	adds	r3, #72	; 0x48
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	4613      	mov	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4403      	add	r3, r0
 8008870:	3344      	adds	r3, #68	; 0x44
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4419      	add	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	4613      	mov	r3, r2
 800887c:	00db      	lsls	r3, r3, #3
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4403      	add	r3, r0
 8008884:	3348      	adds	r3, #72	; 0x48
 8008886:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d113      	bne.n	80088b6 <HAL_PCD_IRQHandler+0x3a2>
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008892:	4613      	mov	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	334c      	adds	r3, #76	; 0x4c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d108      	bne.n	80088b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088ae:	461a      	mov	r2, r3
 80088b0:	2101      	movs	r1, #1
 80088b2:	f00b f8ff 	bl	8013ab4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f00d fe72 	bl	80165a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d008      	beq.n	80088de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d8:	461a      	mov	r2, r3
 80088da:	2308      	movs	r3, #8
 80088dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	461a      	mov	r2, r3
 80088f6:	2310      	movs	r3, #16
 80088f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	461a      	mov	r2, r3
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d023      	beq.n	8008968 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008922:	6a38      	ldr	r0, [r7, #32]
 8008924:	f00a f8de 	bl	8012ae4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	3338      	adds	r3, #56	; 0x38
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	4413      	add	r3, r2
 8008938:	3304      	adds	r3, #4
 800893a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	78db      	ldrb	r3, [r3, #3]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d108      	bne.n	8008956 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2200      	movs	r2, #0
 8008948:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	b2db      	uxtb	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f00d febf 	bl	80166d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	461a      	mov	r2, r3
 8008964:	2302      	movs	r3, #2
 8008966:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fcea 	bl	800934e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	3301      	adds	r3, #1
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	2b00      	cmp	r3, #0
 800898a:	f47f af2e 	bne.w	80087ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f00a ffc8 	bl	8013928 <USB_ReadInterrupts>
 8008998:	4603      	mov	r3, r0
 800899a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800899e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089a2:	d122      	bne.n	80089ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b2:	f023 0301 	bic.w	r3, r3, #1
 80089b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d108      	bne.n	80089d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fef5 	bl	80097bc <HAL_PCDEx_LPM_Callback>
 80089d2:	e002      	b.n	80089da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f00d fe5d 	bl	8016694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80089e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f00a ff9a 	bl	8013928 <USB_ReadInterrupts>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fe:	d112      	bne.n	8008a26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d102      	bne.n	8008a16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f00d fe19 	bl	8016648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695a      	ldr	r2, [r3, #20]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00a ff7c 	bl	8013928 <USB_ReadInterrupts>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3a:	d121      	bne.n	8008a80 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a4a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d111      	bne.n	8008a7a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a64:	089b      	lsrs	r3, r3, #2
 8008a66:	f003 020f 	and.w	r2, r3, #15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a70:	2101      	movs	r1, #1
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fea2 	bl	80097bc <HAL_PCDEx_LPM_Callback>
 8008a78:	e002      	b.n	8008a80 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f00d fde4 	bl	8016648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f00a ff4f 	bl	8013928 <USB_ReadInterrupts>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a94:	f040 80b7 	bne.w	8008c06 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aa6:	f023 0301 	bic.w	r3, r3, #1
 8008aaa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2110      	movs	r1, #16
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f00a f816 	bl	8012ae4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008abc:	e046      	b.n	8008b4c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aca:	461a      	mov	r2, r3
 8008acc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ad0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae2:	0151      	lsls	r1, r2, #5
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	440a      	add	r2, r1
 8008ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008af0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afe:	461a      	mov	r2, r3
 8008b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b16:	0151      	lsls	r1, r2, #5
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	440a      	add	r2, r1
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	3301      	adds	r3, #1
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d3b3      	bcc.n	8008abe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008b68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d016      	beq.n	8008ba0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b82:	f043 030b 	orr.w	r3, r3, #11
 8008b86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b98:	f043 030b 	orr.w	r3, r3, #11
 8008b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b9e:	e015      	b.n	8008bcc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	695a      	ldr	r2, [r3, #20]
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f242 032b 	movw	r3, #8235	; 0x202b
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	69fa      	ldr	r2, [r7, #28]
 8008bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bc6:	f043 030b 	orr.w	r3, r3, #11
 8008bca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008bde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f00a ff5f 	bl	8013ab4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695a      	ldr	r2, [r3, #20]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f00a fe8c 	bl	8013928 <USB_ReadInterrupts>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1a:	d124      	bne.n	8008c66 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f00a ff23 	bl	8013a6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f009 ffd7 	bl	8012bde <USB_GetDevSpeed>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681c      	ldr	r4, [r3, #0]
 8008c3c:	f001 fd88 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 8008c40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f009 fcdc 	bl	8012608 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f00d fcd0 	bl	80165f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00a fe5c 	bl	8013928 <USB_ReadInterrupts>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d10a      	bne.n	8008c90 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f00d fcad 	bl	80165da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	695a      	ldr	r2, [r3, #20]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f002 0208 	and.w	r2, r2, #8
 8008c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f00a fe47 	bl	8013928 <USB_ReadInterrupts>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca0:	2b80      	cmp	r3, #128	; 0x80
 8008ca2:	d122      	bne.n	8008cea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb4:	e014      	b.n	8008ce0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	4613      	mov	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d105      	bne.n	8008cda <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb09 	bl	80092ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	3301      	adds	r3, #1
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d3e5      	bcc.n	8008cb6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f00a fe1a 	bl	8013928 <USB_ReadInterrupts>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cfe:	d13b      	bne.n	8008d78 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d00:	2301      	movs	r3, #1
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
 8008d04:	e02b      	b.n	8008d5e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	00db      	lsls	r3, r3, #3
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	3340      	adds	r3, #64	; 0x40
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d115      	bne.n	8008d58 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	da12      	bge.n	8008d58 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	4613      	mov	r3, r2
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	333f      	adds	r3, #63	; 0x3f
 8008d42:	2201      	movs	r2, #1
 8008d44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 faca 	bl	80092ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d3ce      	bcc.n	8008d06 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695a      	ldr	r2, [r3, #20]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f00a fdd3 	bl	8013928 <USB_ReadInterrupts>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d8c:	d155      	bne.n	8008e3a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d8e:	2301      	movs	r3, #1
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
 8008d92:	e045      	b.n	8008e20 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d12e      	bne.n	8008e1a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008dbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da2b      	bge.n	8008e1a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008dce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d121      	bne.n	8008e1a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	4613      	mov	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e16:	6053      	str	r3, [r2, #4]
            break;
 8008e18:	e007      	b.n	8008e2a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d3b4      	bcc.n	8008d94 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695a      	ldr	r2, [r3, #20]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f00a fd72 	bl	8013928 <USB_ReadInterrupts>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4e:	d10a      	bne.n	8008e66 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f00d fc51 	bl	80166f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	695a      	ldr	r2, [r3, #20]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f00a fd5c 	bl	8013928 <USB_ReadInterrupts>
 8008e70:	4603      	mov	r3, r0
 8008e72:	f003 0304 	and.w	r3, r3, #4
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d115      	bne.n	8008ea6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f00d fc41 	bl	8016714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6859      	ldr	r1, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
 8008ea2:	e000      	b.n	8008ea6 <HAL_PCD_IRQHandler+0x992>
      return;
 8008ea4:	bf00      	nop
    }
  }
}
 8008ea6:	3734      	adds	r7, #52	; 0x34
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd90      	pop	{r4, r7, pc}

08008eac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_PCD_SetAddress+0x1a>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e013      	b.n	8008eee <HAL_PCD_SetAddress+0x42>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f00a fcba 	bl	8013858 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	4603      	mov	r3, r0
 8008f06:	70fb      	strb	r3, [r7, #3]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	803b      	strh	r3, [r7, #0]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da0f      	bge.n	8008f3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 020f 	and.w	r2, r3, #15
 8008f22:	4613      	mov	r3, r2
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	3338      	adds	r3, #56	; 0x38
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	3304      	adds	r3, #4
 8008f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2201      	movs	r2, #1
 8008f38:	705a      	strb	r2, [r3, #1]
 8008f3a:	e00f      	b.n	8008f5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	4613      	mov	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	f003 030f 	and.w	r3, r3, #15
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f68:	883a      	ldrh	r2, [r7, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	78ba      	ldrb	r2, [r7, #2]
 8008f72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f86:	78bb      	ldrb	r3, [r7, #2]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d102      	bne.n	8008f92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_PCD_EP_Open+0xaa>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e00e      	b.n	8008fbe <HAL_PCD_EP_Open+0xc8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68f9      	ldr	r1, [r7, #12]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f009 fe3a 	bl	8012c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da0f      	bge.n	8008ffa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	3338      	adds	r3, #56	; 0x38
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	3304      	adds	r3, #4
 8008ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	705a      	strb	r2, [r3, #1]
 8008ff8:	e00f      	b.n	800901a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	3304      	adds	r3, #4
 8009012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	f003 030f 	and.w	r3, r3, #15
 8009020:	b2da      	uxtb	r2, r3
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_PCD_EP_Close+0x6e>
 8009030:	2302      	movs	r3, #2
 8009032:	e00e      	b.n	8009052 <HAL_PCD_EP_Close+0x8c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68f9      	ldr	r1, [r7, #12]
 8009042:	4618      	mov	r0, r3
 8009044:	f009 fe78 	bl	8012d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b086      	sub	sp, #24
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	460b      	mov	r3, r1
 8009068:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	4613      	mov	r3, r2
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2200      	movs	r2, #0
 8009094:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2200      	movs	r2, #0
 800909a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d102      	bne.n	80090b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	6979      	ldr	r1, [r7, #20]
 80090c4:	f009 ff14 	bl	8012ef0 <USB_EPStartXfer>

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	f003 020f 	and.w	r2, r3, #15
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	4613      	mov	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	4413      	add	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	440b      	add	r3, r1
 80090f0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80090f4:	681b      	ldr	r3, [r3, #0]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	460b      	mov	r3, r1
 8009110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	f003 020f 	and.w	r2, r3, #15
 8009118:	4613      	mov	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	3338      	adds	r3, #56	; 0x38
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	3304      	adds	r3, #4
 8009128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2201      	movs	r2, #1
 8009140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	b2da      	uxtb	r2, r3
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d102      	bne.n	800915c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	461a      	mov	r2, r3
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	f009 fec1 	bl	8012ef0 <USB_EPStartXfer>

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	429a      	cmp	r2, r3
 8009190:	d901      	bls.n	8009196 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e050      	b.n	8009238 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919a:	2b00      	cmp	r3, #0
 800919c:	da0f      	bge.n	80091be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	f003 020f 	and.w	r2, r3, #15
 80091a4:	4613      	mov	r3, r2
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	3338      	adds	r3, #56	; 0x38
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	4413      	add	r3, r2
 80091b2:	3304      	adds	r3, #4
 80091b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2201      	movs	r2, #1
 80091ba:	705a      	strb	r2, [r3, #1]
 80091bc:	e00d      	b.n	80091da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	4613      	mov	r3, r2
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	4413      	add	r3, r2
 80091d0:	3304      	adds	r3, #4
 80091d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <HAL_PCD_EP_SetStall+0x82>
 80091f6:	2302      	movs	r3, #2
 80091f8:	e01e      	b.n	8009238 <HAL_PCD_EP_SetStall+0xc0>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	4618      	mov	r0, r3
 800920a:	f00a fa51 	bl	80136b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	b2d9      	uxtb	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009228:	461a      	mov	r2, r3
 800922a:	f00a fc43 	bl	8013ab4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	f003 020f 	and.w	r2, r3, #15
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	429a      	cmp	r2, r3
 8009258:	d901      	bls.n	800925e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e042      	b.n	80092e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800925e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009262:	2b00      	cmp	r3, #0
 8009264:	da0f      	bge.n	8009286 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	f003 020f 	and.w	r2, r3, #15
 800926c:	4613      	mov	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	3338      	adds	r3, #56	; 0x38
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4413      	add	r3, r2
 800927a:	3304      	adds	r3, #4
 800927c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	705a      	strb	r2, [r3, #1]
 8009284:	e00f      	b.n	80092a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	f003 020f 	and.w	r2, r3, #15
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_PCD_EP_ClrStall+0x86>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e00e      	b.n	80092e4 <HAL_PCD_EP_ClrStall+0xa4>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f00a fa59 	bl	801378c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80092f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da0c      	bge.n	800931a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	f003 020f 	and.w	r2, r3, #15
 8009306:	4613      	mov	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	3338      	adds	r3, #56	; 0x38
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4413      	add	r3, r2
 8009314:	3304      	adds	r3, #4
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e00c      	b.n	8009334 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	f003 020f 	and.w	r2, r3, #15
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	4413      	add	r3, r2
 8009330:	3304      	adds	r3, #4
 8009332:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	4618      	mov	r0, r3
 800933c:	f00a f878 	bl	8013430 <USB_EPStopXfer>
 8009340:	4603      	mov	r3, r0
 8009342:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009344:	7afb      	ldrb	r3, [r7, #11]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b08a      	sub	sp, #40	; 0x28
 8009352:	af02      	add	r7, sp, #8
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	3338      	adds	r3, #56	; 0x38
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	4413      	add	r3, r2
 8009372:	3304      	adds	r3, #4
 8009374:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d901      	bls.n	8009386 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e06c      	b.n	8009460 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	429a      	cmp	r2, r3
 800939a:	d902      	bls.n	80093a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	3303      	adds	r3, #3
 80093a6:	089b      	lsrs	r3, r3, #2
 80093a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093aa:	e02b      	b.n	8009404 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	691a      	ldr	r2, [r3, #16]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d902      	bls.n	80093c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	3303      	adds	r3, #3
 80093cc:	089b      	lsrs	r3, r3, #2
 80093ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68d9      	ldr	r1, [r3, #12]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4603      	mov	r3, r0
 80093e6:	6978      	ldr	r0, [r7, #20]
 80093e8:	f00a f8cc 	bl	8013584 <USB_WritePacket>

    ep->xfer_buff  += len;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	441a      	add	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	695a      	ldr	r2, [r3, #20]
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	441a      	add	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	b29b      	uxth	r3, r3
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	429a      	cmp	r2, r3
 8009418:	d809      	bhi.n	800942e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	695a      	ldr	r2, [r3, #20]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009422:	429a      	cmp	r2, r3
 8009424:	d203      	bcs.n	800942e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1be      	bne.n	80093ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	429a      	cmp	r2, r3
 8009438:	d811      	bhi.n	800945e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	f003 030f 	and.w	r3, r3, #15
 8009440:	2201      	movs	r2, #1
 8009442:	fa02 f303 	lsl.w	r3, r2, r3
 8009446:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	43db      	mvns	r3, r3
 8009454:	6939      	ldr	r1, [r7, #16]
 8009456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800945a:	4013      	ands	r3, r2
 800945c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	333c      	adds	r3, #60	; 0x3c
 8009480:	3304      	adds	r3, #4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	4413      	add	r3, r2
 800948e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d17b      	bne.n	8009596 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f003 0308 	and.w	r3, r3, #8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d015      	beq.n	80094d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	4a61      	ldr	r2, [pc, #388]	; (8009630 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	f240 80b9 	bls.w	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80b3 	beq.w	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ca:	461a      	mov	r2, r3
 80094cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d0:	6093      	str	r3, [r2, #8]
 80094d2:	e0a7      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ea:	461a      	mov	r2, r3
 80094ec:	2320      	movs	r3, #32
 80094ee:	6093      	str	r3, [r2, #8]
 80094f0:	e098      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f040 8093 	bne.w	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	4a4b      	ldr	r2, [pc, #300]	; (8009630 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d90f      	bls.n	8009526 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00a      	beq.n	8009526 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800951c:	461a      	mov	r2, r3
 800951e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009522:	6093      	str	r3, [r2, #8]
 8009524:	e07e      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4613      	mov	r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	3304      	adds	r3, #4
 800953a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	0159      	lsls	r1, r3, #5
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	440b      	add	r3, r1
 8009548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d114      	bne.n	8009588 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009570:	461a      	mov	r2, r3
 8009572:	2101      	movs	r1, #1
 8009574:	f00a fa9e 	bl	8013ab4 <USB_EP0_OutStart>
 8009578:	e006      	b.n	8009588 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	68da      	ldr	r2, [r3, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f00c ffee 	bl	8016570 <HAL_PCD_DataOutStageCallback>
 8009594:	e046      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	4a26      	ldr	r2, [pc, #152]	; (8009634 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d124      	bne.n	80095e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	461a      	mov	r2, r3
 80095b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ba:	6093      	str	r3, [r2, #8]
 80095bc:	e032      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d008      	beq.n	80095da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	461a      	mov	r2, r3
 80095d6:	2320      	movs	r3, #32
 80095d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f00c ffc5 	bl	8016570 <HAL_PCD_DataOutStageCallback>
 80095e6:	e01d      	b.n	8009624 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d114      	bne.n	8009618 <PCD_EP_OutXfrComplete_int+0x1b0>
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	4613      	mov	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d108      	bne.n	8009618 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6818      	ldr	r0, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009610:	461a      	mov	r2, r3
 8009612:	2100      	movs	r1, #0
 8009614:	f00a fa4e 	bl	8013ab4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f00c ffa6 	bl	8016570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3720      	adds	r7, #32
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	4f54300a 	.word	0x4f54300a
 8009634:	4f54310a 	.word	0x4f54310a

08009638 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	333c      	adds	r3, #60	; 0x3c
 8009650:	3304      	adds	r3, #4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4a15      	ldr	r2, [pc, #84]	; (80096c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d90e      	bls.n	800968c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009684:	461a      	mov	r2, r3
 8009686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800968a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f00c ff5d 	bl	801654c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d90c      	bls.n	80096b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d108      	bne.n	80096b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096ac:	461a      	mov	r2, r3
 80096ae:	2101      	movs	r1, #1
 80096b0:	f00a fa00 	bl	8013ab4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	4f54300a 	.word	0x4f54300a

080096c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
 80096d0:	4613      	mov	r3, r2
 80096d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d107      	bne.n	80096f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096e2:	883b      	ldrh	r3, [r7, #0]
 80096e4:	0419      	lsls	r1, r3, #16
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
 80096f0:	e028      	b.n	8009744 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	0c1b      	lsrs	r3, r3, #16
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009700:	2300      	movs	r3, #0
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e00d      	b.n	8009722 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	3340      	adds	r3, #64	; 0x40
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	0c1b      	lsrs	r3, r3, #16
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	3301      	adds	r3, #1
 8009720:	73fb      	strb	r3, [r7, #15]
 8009722:	7bfa      	ldrb	r2, [r7, #15]
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	3b01      	subs	r3, #1
 8009728:	429a      	cmp	r2, r3
 800972a:	d3ec      	bcc.n	8009706 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800972c:	883b      	ldrh	r3, [r7, #0]
 800972e:	0418      	lsls	r0, r3, #16
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6819      	ldr	r1, [r3, #0]
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	3b01      	subs	r3, #1
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	4302      	orrs	r2, r0
 800973c:	3340      	adds	r3, #64	; 0x40
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	440b      	add	r3, r1
 8009742:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	887a      	ldrh	r2, [r7, #2]
 8009764:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	10000003 	.word	0x10000003

080097bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80097c8:	bf00      	nop
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <HAL_PWREx_ConfigSupply+0x70>)
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d00a      	beq.n	80097fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80097e8:	4b16      	ldr	r3, [pc, #88]	; (8009844 <HAL_PWREx_ConfigSupply+0x70>)
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d001      	beq.n	80097fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e01f      	b.n	800983a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e01d      	b.n	800983a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80097fe:	4b11      	ldr	r3, [pc, #68]	; (8009844 <HAL_PWREx_ConfigSupply+0x70>)
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f023 0207 	bic.w	r2, r3, #7
 8009806:	490f      	ldr	r1, [pc, #60]	; (8009844 <HAL_PWREx_ConfigSupply+0x70>)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4313      	orrs	r3, r2
 800980c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800980e:	f7fa f917 	bl	8003a40 <HAL_GetTick>
 8009812:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009814:	e009      	b.n	800982a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009816:	f7fa f913 	bl	8003a40 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009824:	d901      	bls.n	800982a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e007      	b.n	800983a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <HAL_PWREx_ConfigSupply+0x70>)
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009836:	d1ee      	bne.n	8009816 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	58024800 	.word	0x58024800

08009848 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	4a04      	ldr	r2, [pc, #16]	; (8009864 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009856:	60d3      	str	r3, [r2, #12]
}
 8009858:	bf00      	nop
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	58024800 	.word	0x58024800

08009868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	; 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e3c8      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 8087 	beq.w	8009996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009888:	4b88      	ldr	r3, [pc, #544]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009892:	4b86      	ldr	r3, [pc, #536]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	2b10      	cmp	r3, #16
 800989c:	d007      	beq.n	80098ae <HAL_RCC_OscConfig+0x46>
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2b18      	cmp	r3, #24
 80098a2:	d110      	bne.n	80098c6 <HAL_RCC_OscConfig+0x5e>
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d10b      	bne.n	80098c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098ae:	4b7f      	ldr	r3, [pc, #508]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d06c      	beq.n	8009994 <HAL_RCC_OscConfig+0x12c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d168      	bne.n	8009994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e3a2      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ce:	d106      	bne.n	80098de <HAL_RCC_OscConfig+0x76>
 80098d0:	4b76      	ldr	r3, [pc, #472]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a75      	ldr	r2, [pc, #468]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	e02e      	b.n	800993c <HAL_RCC_OscConfig+0xd4>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10c      	bne.n	8009900 <HAL_RCC_OscConfig+0x98>
 80098e6:	4b71      	ldr	r3, [pc, #452]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a70      	ldr	r2, [pc, #448]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	4b6e      	ldr	r3, [pc, #440]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a6d      	ldr	r2, [pc, #436]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80098f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	e01d      	b.n	800993c <HAL_RCC_OscConfig+0xd4>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009908:	d10c      	bne.n	8009924 <HAL_RCC_OscConfig+0xbc>
 800990a:	4b68      	ldr	r3, [pc, #416]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a67      	ldr	r2, [pc, #412]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	4b65      	ldr	r3, [pc, #404]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a64      	ldr	r2, [pc, #400]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 800991c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	e00b      	b.n	800993c <HAL_RCC_OscConfig+0xd4>
 8009924:	4b61      	ldr	r3, [pc, #388]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a60      	ldr	r2, [pc, #384]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 800992a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	4b5e      	ldr	r3, [pc, #376]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a5d      	ldr	r2, [pc, #372]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800993a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d013      	beq.n	800996c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009944:	f7fa f87c 	bl	8003a40 <HAL_GetTick>
 8009948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800994a:	e008      	b.n	800995e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800994c:	f7fa f878 	bl	8003a40 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	2b64      	cmp	r3, #100	; 0x64
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e356      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800995e:	4b53      	ldr	r3, [pc, #332]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d0f0      	beq.n	800994c <HAL_RCC_OscConfig+0xe4>
 800996a:	e014      	b.n	8009996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800996c:	f7fa f868 	bl	8003a40 <HAL_GetTick>
 8009970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009972:	e008      	b.n	8009986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009974:	f7fa f864 	bl	8003a40 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b64      	cmp	r3, #100	; 0x64
 8009980:	d901      	bls.n	8009986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e342      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009986:	4b49      	ldr	r3, [pc, #292]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1f0      	bne.n	8009974 <HAL_RCC_OscConfig+0x10c>
 8009992:	e000      	b.n	8009996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 808c 	beq.w	8009abc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a4:	4b41      	ldr	r3, [pc, #260]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ae:	4b3f      	ldr	r3, [pc, #252]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d007      	beq.n	80099ca <HAL_RCC_OscConfig+0x162>
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	2b18      	cmp	r3, #24
 80099be:	d137      	bne.n	8009a30 <HAL_RCC_OscConfig+0x1c8>
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d132      	bne.n	8009a30 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099ca:	4b38      	ldr	r3, [pc, #224]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_RCC_OscConfig+0x17a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e314      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099e2:	4b32      	ldr	r3, [pc, #200]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f023 0219 	bic.w	r2, r3, #25
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	492f      	ldr	r1, [pc, #188]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7fa f824 	bl	8003a40 <HAL_GetTick>
 80099f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099fc:	f7fa f820 	bl	8003a40 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e2fe      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a0e:	4b27      	ldr	r3, [pc, #156]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0f0      	beq.n	80099fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a1a:	4b24      	ldr	r3, [pc, #144]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	061b      	lsls	r3, r3, #24
 8009a28:	4920      	ldr	r1, [pc, #128]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a2e:	e045      	b.n	8009abc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d026      	beq.n	8009a86 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f023 0219 	bic.w	r2, r3, #25
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	4919      	ldr	r1, [pc, #100]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4a:	f7f9 fff9 	bl	8003a40 <HAL_GetTick>
 8009a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a52:	f7f9 fff5 	bl	8003a40 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e2d3      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a64:	4b11      	ldr	r3, [pc, #68]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0f0      	beq.n	8009a52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	490b      	ldr	r1, [pc, #44]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	604b      	str	r3, [r1, #4]
 8009a84:	e01a      	b.n	8009abc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a86:	4b09      	ldr	r3, [pc, #36]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a08      	ldr	r2, [pc, #32]	; (8009aac <HAL_RCC_OscConfig+0x244>)
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a92:	f7f9 ffd5 	bl	8003a40 <HAL_GetTick>
 8009a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a98:	e00a      	b.n	8009ab0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a9a:	f7f9 ffd1 	bl	8003a40 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d903      	bls.n	8009ab0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e2af      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
 8009aac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ab0:	4b96      	ldr	r3, [pc, #600]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1ee      	bne.n	8009a9a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0310 	and.w	r3, r3, #16
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d06a      	beq.n	8009b9e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ac8:	4b90      	ldr	r3, [pc, #576]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ad2:	4b8e      	ldr	r3, [pc, #568]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d007      	beq.n	8009aee <HAL_RCC_OscConfig+0x286>
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	2b18      	cmp	r3, #24
 8009ae2:	d11b      	bne.n	8009b1c <HAL_RCC_OscConfig+0x2b4>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d116      	bne.n	8009b1c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aee:	4b87      	ldr	r3, [pc, #540]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <HAL_RCC_OscConfig+0x29e>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d001      	beq.n	8009b06 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e282      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b06:	4b81      	ldr	r3, [pc, #516]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	061b      	lsls	r3, r3, #24
 8009b14:	497d      	ldr	r1, [pc, #500]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b1a:	e040      	b.n	8009b9e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d023      	beq.n	8009b6c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b24:	4b79      	ldr	r3, [pc, #484]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a78      	ldr	r2, [pc, #480]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7f9 ff86 	bl	8003a40 <HAL_GetTick>
 8009b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b38:	f7f9 ff82 	bl	8003a40 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e260      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b4a:	4b70      	ldr	r3, [pc, #448]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b56:	4b6d      	ldr	r3, [pc, #436]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	061b      	lsls	r3, r3, #24
 8009b64:	4969      	ldr	r1, [pc, #420]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60cb      	str	r3, [r1, #12]
 8009b6a:	e018      	b.n	8009b9e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b6c:	4b67      	ldr	r3, [pc, #412]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a66      	ldr	r2, [pc, #408]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f9 ff62 	bl	8003a40 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b80:	f7f9 ff5e 	bl	8003a40 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e23c      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b92:	4b5e      	ldr	r3, [pc, #376]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1f0      	bne.n	8009b80 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d036      	beq.n	8009c18 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d019      	beq.n	8009be6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bb2:	4b56      	ldr	r3, [pc, #344]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb6:	4a55      	ldr	r2, [pc, #340]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009bb8:	f043 0301 	orr.w	r3, r3, #1
 8009bbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bbe:	f7f9 ff3f 	bl	8003a40 <HAL_GetTick>
 8009bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bc4:	e008      	b.n	8009bd8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bc6:	f7f9 ff3b 	bl	8003a40 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d901      	bls.n	8009bd8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e219      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bd8:	4b4c      	ldr	r3, [pc, #304]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0f0      	beq.n	8009bc6 <HAL_RCC_OscConfig+0x35e>
 8009be4:	e018      	b.n	8009c18 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009be6:	4b49      	ldr	r3, [pc, #292]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bea:	4a48      	ldr	r2, [pc, #288]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009bec:	f023 0301 	bic.w	r3, r3, #1
 8009bf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf2:	f7f9 ff25 	bl	8003a40 <HAL_GetTick>
 8009bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bf8:	e008      	b.n	8009c0c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bfa:	f7f9 ff21 	bl	8003a40 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d901      	bls.n	8009c0c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e1ff      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c0c:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f0      	bne.n	8009bfa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d036      	beq.n	8009c92 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d019      	beq.n	8009c60 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c2c:	4b37      	ldr	r3, [pc, #220]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a36      	ldr	r2, [pc, #216]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c38:	f7f9 ff02 	bl	8003a40 <HAL_GetTick>
 8009c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c3e:	e008      	b.n	8009c52 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c40:	f7f9 fefe 	bl	8003a40 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e1dc      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c52:	4b2e      	ldr	r3, [pc, #184]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0f0      	beq.n	8009c40 <HAL_RCC_OscConfig+0x3d8>
 8009c5e:	e018      	b.n	8009c92 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c60:	4b2a      	ldr	r3, [pc, #168]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a29      	ldr	r2, [pc, #164]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c6c:	f7f9 fee8 	bl	8003a40 <HAL_GetTick>
 8009c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c74:	f7f9 fee4 	bl	8003a40 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e1c2      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c86:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f0      	bne.n	8009c74 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 8086 	beq.w	8009dac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ca0:	4b1b      	ldr	r3, [pc, #108]	; (8009d10 <HAL_RCC_OscConfig+0x4a8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a1a      	ldr	r2, [pc, #104]	; (8009d10 <HAL_RCC_OscConfig+0x4a8>)
 8009ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009caa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cac:	f7f9 fec8 	bl	8003a40 <HAL_GetTick>
 8009cb0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cb4:	f7f9 fec4 	bl	8003a40 <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	2b64      	cmp	r3, #100	; 0x64
 8009cc0:	d901      	bls.n	8009cc6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e1a2      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <HAL_RCC_OscConfig+0x4a8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f0      	beq.n	8009cb4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d106      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x480>
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cde:	4a0b      	ldr	r2, [pc, #44]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce6:	e032      	b.n	8009d4e <HAL_RCC_OscConfig+0x4e6>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d111      	bne.n	8009d14 <HAL_RCC_OscConfig+0x4ac>
 8009cf0:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf4:	4a05      	ldr	r2, [pc, #20]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009cf6:	f023 0301 	bic.w	r3, r3, #1
 8009cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfc:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	4a02      	ldr	r2, [pc, #8]	; (8009d0c <HAL_RCC_OscConfig+0x4a4>)
 8009d02:	f023 0304 	bic.w	r3, r3, #4
 8009d06:	6713      	str	r3, [r2, #112]	; 0x70
 8009d08:	e021      	b.n	8009d4e <HAL_RCC_OscConfig+0x4e6>
 8009d0a:	bf00      	nop
 8009d0c:	58024400 	.word	0x58024400
 8009d10:	58024800 	.word	0x58024800
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	2b05      	cmp	r3, #5
 8009d1a:	d10c      	bne.n	8009d36 <HAL_RCC_OscConfig+0x4ce>
 8009d1c:	4b83      	ldr	r3, [pc, #524]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d20:	4a82      	ldr	r2, [pc, #520]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d22:	f043 0304 	orr.w	r3, r3, #4
 8009d26:	6713      	str	r3, [r2, #112]	; 0x70
 8009d28:	4b80      	ldr	r3, [pc, #512]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2c:	4a7f      	ldr	r2, [pc, #508]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	6713      	str	r3, [r2, #112]	; 0x70
 8009d34:	e00b      	b.n	8009d4e <HAL_RCC_OscConfig+0x4e6>
 8009d36:	4b7d      	ldr	r3, [pc, #500]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	4a7c      	ldr	r2, [pc, #496]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d3c:	f023 0301 	bic.w	r3, r3, #1
 8009d40:	6713      	str	r3, [r2, #112]	; 0x70
 8009d42:	4b7a      	ldr	r3, [pc, #488]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d46:	4a79      	ldr	r2, [pc, #484]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d48:	f023 0304 	bic.w	r3, r3, #4
 8009d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d015      	beq.n	8009d82 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d56:	f7f9 fe73 	bl	8003a40 <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d5c:	e00a      	b.n	8009d74 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d5e:	f7f9 fe6f 	bl	8003a40 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d901      	bls.n	8009d74 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e14b      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d74:	4b6d      	ldr	r3, [pc, #436]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d0ee      	beq.n	8009d5e <HAL_RCC_OscConfig+0x4f6>
 8009d80:	e014      	b.n	8009dac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d82:	f7f9 fe5d 	bl	8003a40 <HAL_GetTick>
 8009d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d88:	e00a      	b.n	8009da0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d8a:	f7f9 fe59 	bl	8003a40 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d901      	bls.n	8009da0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e135      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009da0:	4b62      	ldr	r3, [pc, #392]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da4:	f003 0302 	and.w	r3, r3, #2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1ee      	bne.n	8009d8a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 812a 	beq.w	800a00a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009db6:	4b5d      	ldr	r3, [pc, #372]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dbe:	2b18      	cmp	r3, #24
 8009dc0:	f000 80ba 	beq.w	8009f38 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	f040 8095 	bne.w	8009ef8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dce:	4b57      	ldr	r3, [pc, #348]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a56      	ldr	r2, [pc, #344]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dda:	f7f9 fe31 	bl	8003a40 <HAL_GetTick>
 8009dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009de0:	e008      	b.n	8009df4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009de2:	f7f9 fe2d 	bl	8003a40 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e10b      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009df4:	4b4d      	ldr	r3, [pc, #308]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1f0      	bne.n	8009de2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e00:	4b4a      	ldr	r3, [pc, #296]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e04:	4b4a      	ldr	r3, [pc, #296]	; (8009f30 <HAL_RCC_OscConfig+0x6c8>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e10:	0112      	lsls	r2, r2, #4
 8009e12:	430a      	orrs	r2, r1
 8009e14:	4945      	ldr	r1, [pc, #276]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	628b      	str	r3, [r1, #40]	; 0x28
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	025b      	lsls	r3, r3, #9
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e34:	3b01      	subs	r3, #1
 8009e36:	041b      	lsls	r3, r3, #16
 8009e38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e42:	3b01      	subs	r3, #1
 8009e44:	061b      	lsls	r3, r3, #24
 8009e46:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e4a:	4938      	ldr	r1, [pc, #224]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e50:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	4a35      	ldr	r2, [pc, #212]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e5c:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e60:	4b34      	ldr	r3, [pc, #208]	; (8009f34 <HAL_RCC_OscConfig+0x6cc>)
 8009e62:	4013      	ands	r3, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e68:	00d2      	lsls	r2, r2, #3
 8009e6a:	4930      	ldr	r1, [pc, #192]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e70:	4b2e      	ldr	r3, [pc, #184]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	f023 020c 	bic.w	r2, r3, #12
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	492b      	ldr	r1, [pc, #172]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e82:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	f023 0202 	bic.w	r2, r3, #2
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8e:	4927      	ldr	r1, [pc, #156]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e94:	4b25      	ldr	r3, [pc, #148]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	4a24      	ldr	r2, [pc, #144]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea0:	4b22      	ldr	r3, [pc, #136]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	4a21      	ldr	r2, [pc, #132]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009eac:	4b1f      	ldr	r3, [pc, #124]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a1e      	ldr	r2, [pc, #120]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009eb8:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4a1b      	ldr	r2, [pc, #108]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009ebe:	f043 0301 	orr.w	r3, r3, #1
 8009ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ec4:	4b19      	ldr	r3, [pc, #100]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed0:	f7f9 fdb6 	bl	8003a40 <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7f9 fdb2 	bl	8003a40 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e090      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eea:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0f0      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x670>
 8009ef6:	e088      	b.n	800a00a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a0b      	ldr	r2, [pc, #44]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7f9 fd9c 	bl	8003a40 <HAL_GetTick>
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f0c:	f7f9 fd98 	bl	8003a40 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e076      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f1e:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <HAL_RCC_OscConfig+0x6c4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1f0      	bne.n	8009f0c <HAL_RCC_OscConfig+0x6a4>
 8009f2a:	e06e      	b.n	800a00a <HAL_RCC_OscConfig+0x7a2>
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	fffffc0c 	.word	0xfffffc0c
 8009f34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f38:	4b36      	ldr	r3, [pc, #216]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f3e:	4b35      	ldr	r3, [pc, #212]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d031      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f003 0203 	and.w	r2, r3, #3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d12a      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	091b      	lsrs	r3, r3, #4
 8009f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d122      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d11a      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	0a5b      	lsrs	r3, r3, #9
 8009f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d111      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d108      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	0e1b      	lsrs	r3, r3, #24
 8009fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d001      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e02b      	b.n	800a00c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb8:	08db      	lsrs	r3, r3, #3
 8009fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d01f      	beq.n	800a00a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009fca:	4b12      	ldr	r3, [pc, #72]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	4a11      	ldr	r2, [pc, #68]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
 8009fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009fd6:	f7f9 fd33 	bl	8003a40 <HAL_GetTick>
 8009fda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009fdc:	bf00      	nop
 8009fde:	f7f9 fd2f 	bl	8003a40 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d0f9      	beq.n	8009fde <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009fea:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <HAL_RCC_OscConfig+0x7b0>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009ff6:	00d2      	lsls	r2, r2, #3
 8009ff8:	4906      	ldr	r1, [pc, #24]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	4a04      	ldr	r2, [pc, #16]	; (800a014 <HAL_RCC_OscConfig+0x7ac>)
 800a004:	f043 0301 	orr.w	r3, r3, #1
 800a008:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3730      	adds	r7, #48	; 0x30
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	58024400 	.word	0x58024400
 800a018:	ffff0007 	.word	0xffff0007

0800a01c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e19c      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a030:	4b8a      	ldr	r3, [pc, #552]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d910      	bls.n	800a060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b87      	ldr	r3, [pc, #540]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f023 020f 	bic.w	r2, r3, #15
 800a046:	4985      	ldr	r1, [pc, #532]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04e:	4b83      	ldr	r3, [pc, #524]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d001      	beq.n	800a060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e184      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d010      	beq.n	800a08e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	691a      	ldr	r2, [r3, #16]
 800a070:	4b7b      	ldr	r3, [pc, #492]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a078:	429a      	cmp	r2, r3
 800a07a:	d908      	bls.n	800a08e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a07c:	4b78      	ldr	r3, [pc, #480]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	4975      	ldr	r1, [pc, #468]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0308 	and.w	r3, r3, #8
 800a096:	2b00      	cmp	r3, #0
 800a098:	d010      	beq.n	800a0bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	695a      	ldr	r2, [r3, #20]
 800a09e:	4b70      	ldr	r3, [pc, #448]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d908      	bls.n	800a0bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0aa:	4b6d      	ldr	r3, [pc, #436]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	695b      	ldr	r3, [r3, #20]
 800a0b6:	496a      	ldr	r1, [pc, #424]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d010      	beq.n	800a0ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	699a      	ldr	r2, [r3, #24]
 800a0cc:	4b64      	ldr	r3, [pc, #400]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d908      	bls.n	800a0ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0d8:	4b61      	ldr	r3, [pc, #388]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	495e      	ldr	r1, [pc, #376]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d010      	beq.n	800a118 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69da      	ldr	r2, [r3, #28]
 800a0fa:	4b59      	ldr	r3, [pc, #356]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a102:	429a      	cmp	r2, r3
 800a104:	d908      	bls.n	800a118 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a106:	4b56      	ldr	r3, [pc, #344]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	4953      	ldr	r1, [pc, #332]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a114:	4313      	orrs	r3, r2
 800a116:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d010      	beq.n	800a146 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	4b4d      	ldr	r3, [pc, #308]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	429a      	cmp	r2, r3
 800a132:	d908      	bls.n	800a146 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a134:	4b4a      	ldr	r3, [pc, #296]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a136:	699b      	ldr	r3, [r3, #24]
 800a138:	f023 020f 	bic.w	r2, r3, #15
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4947      	ldr	r1, [pc, #284]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a142:	4313      	orrs	r3, r2
 800a144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d055      	beq.n	800a1fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a152:	4b43      	ldr	r3, [pc, #268]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	4940      	ldr	r1, [pc, #256]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a160:	4313      	orrs	r3, r2
 800a162:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d107      	bne.n	800a17c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a16c:	4b3c      	ldr	r3, [pc, #240]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d121      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e0f6      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	2b03      	cmp	r3, #3
 800a182:	d107      	bne.n	800a194 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a184:	4b36      	ldr	r3, [pc, #216]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d115      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e0ea      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d107      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a19c:	4b30      	ldr	r3, [pc, #192]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d109      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0de      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ac:	4b2c      	ldr	r3, [pc, #176]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e0d6      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1bc:	4b28      	ldr	r3, [pc, #160]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	f023 0207 	bic.w	r2, r3, #7
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4925      	ldr	r1, [pc, #148]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ce:	f7f9 fc37 	bl	8003a40 <HAL_GetTick>
 800a1d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1d4:	e00a      	b.n	800a1ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1d6:	f7f9 fc33 	bl	8003a40 <HAL_GetTick>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d901      	bls.n	800a1ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e0be      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1ec:	4b1c      	ldr	r3, [pc, #112]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d1eb      	bne.n	800a1d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d010      	beq.n	800a22c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	4b14      	ldr	r3, [pc, #80]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	f003 030f 	and.w	r3, r3, #15
 800a216:	429a      	cmp	r2, r3
 800a218:	d208      	bcs.n	800a22c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a21a:	4b11      	ldr	r3, [pc, #68]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	f023 020f 	bic.w	r2, r3, #15
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	490e      	ldr	r1, [pc, #56]	; (800a260 <HAL_RCC_ClockConfig+0x244>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a22c:	4b0b      	ldr	r3, [pc, #44]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d214      	bcs.n	800a264 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a23a:	4b08      	ldr	r3, [pc, #32]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f023 020f 	bic.w	r2, r3, #15
 800a242:	4906      	ldr	r1, [pc, #24]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	4313      	orrs	r3, r2
 800a248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a24a:	4b04      	ldr	r3, [pc, #16]	; (800a25c <HAL_RCC_ClockConfig+0x240>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	429a      	cmp	r2, r3
 800a256:	d005      	beq.n	800a264 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e086      	b.n	800a36a <HAL_RCC_ClockConfig+0x34e>
 800a25c:	52002000 	.word	0x52002000
 800a260:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d010      	beq.n	800a292 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691a      	ldr	r2, [r3, #16]
 800a274:	4b3f      	ldr	r3, [pc, #252]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d208      	bcs.n	800a292 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a280:	4b3c      	ldr	r3, [pc, #240]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	4939      	ldr	r1, [pc, #228]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0308 	and.w	r3, r3, #8
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d010      	beq.n	800a2c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695a      	ldr	r2, [r3, #20]
 800a2a2:	4b34      	ldr	r3, [pc, #208]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d208      	bcs.n	800a2c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2ae:	4b31      	ldr	r3, [pc, #196]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	492e      	ldr	r1, [pc, #184]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 0310 	and.w	r3, r3, #16
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d010      	beq.n	800a2ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699a      	ldr	r2, [r3, #24]
 800a2d0:	4b28      	ldr	r3, [pc, #160]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d208      	bcs.n	800a2ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	4922      	ldr	r1, [pc, #136]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0320 	and.w	r3, r3, #32
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d010      	beq.n	800a31c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69da      	ldr	r2, [r3, #28]
 800a2fe:	4b1d      	ldr	r3, [pc, #116]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a306:	429a      	cmp	r2, r3
 800a308:	d208      	bcs.n	800a31c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a30a:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a30c:	6a1b      	ldr	r3, [r3, #32]
 800a30e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	69db      	ldr	r3, [r3, #28]
 800a316:	4917      	ldr	r1, [pc, #92]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a31c:	f000 f89e 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800a320:	4602      	mov	r2, r0
 800a322:	4b14      	ldr	r3, [pc, #80]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	4912      	ldr	r1, [pc, #72]	; (800a378 <HAL_RCC_ClockConfig+0x35c>)
 800a32e:	5ccb      	ldrb	r3, [r1, r3]
 800a330:	f003 031f 	and.w	r3, r3, #31
 800a334:	fa22 f303 	lsr.w	r3, r2, r3
 800a338:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a33a:	4b0e      	ldr	r3, [pc, #56]	; (800a374 <HAL_RCC_ClockConfig+0x358>)
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <HAL_RCC_ClockConfig+0x35c>)
 800a344:	5cd3      	ldrb	r3, [r2, r3]
 800a346:	f003 031f 	and.w	r3, r3, #31
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <HAL_RCC_ClockConfig+0x360>)
 800a352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a354:	4a0a      	ldr	r2, [pc, #40]	; (800a380 <HAL_RCC_ClockConfig+0x364>)
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a35a:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <HAL_RCC_ClockConfig+0x368>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f9 fb24 	bl	80039ac <HAL_InitTick>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	58024400 	.word	0x58024400
 800a378:	0801b760 	.word	0x0801b760
 800a37c:	2400002c 	.word	0x2400002c
 800a380:	24000028 	.word	0x24000028
 800a384:	24000030 	.word	0x24000030

0800a388 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08c      	sub	sp, #48	; 0x30
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d12a      	bne.n	800a3f0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a39a:	4b2d      	ldr	r3, [pc, #180]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3a0:	4a2b      	ldr	r2, [pc, #172]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3aa:	4b29      	ldr	r3, [pc, #164]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	61bb      	str	r3, [r7, #24]
 800a3b6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a3b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a3ce:	f107 031c 	add.w	r3, r7, #28
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	481f      	ldr	r0, [pc, #124]	; (800a454 <HAL_RCC_MCOConfig+0xcc>)
 800a3d6:	f7fd f81d 	bl	8007414 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a3da:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	4919      	ldr	r1, [pc, #100]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a3ee:	e02a      	b.n	800a446 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a3f0:	4b17      	ldr	r3, [pc, #92]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f6:	4a16      	ldr	r2, [pc, #88]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a3f8:	f043 0304 	orr.w	r3, r3, #4
 800a3fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a400:	4b13      	ldr	r3, [pc, #76]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a414:	2302      	movs	r3, #2
 800a416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a418:	2303      	movs	r3, #3
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a41c:	2300      	movs	r3, #0
 800a41e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a420:	2300      	movs	r3, #0
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a424:	f107 031c 	add.w	r3, r7, #28
 800a428:	4619      	mov	r1, r3
 800a42a:	480b      	ldr	r0, [pc, #44]	; (800a458 <HAL_RCC_MCOConfig+0xd0>)
 800a42c:	f7fc fff2 	bl	8007414 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	01d9      	lsls	r1, r3, #7
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	430b      	orrs	r3, r1
 800a440:	4903      	ldr	r1, [pc, #12]	; (800a450 <HAL_RCC_MCOConfig+0xc8>)
 800a442:	4313      	orrs	r3, r2
 800a444:	610b      	str	r3, [r1, #16]
}
 800a446:	bf00      	nop
 800a448:	3730      	adds	r7, #48	; 0x30
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	58020000 	.word	0x58020000
 800a458:	58020800 	.word	0x58020800

0800a45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b089      	sub	sp, #36	; 0x24
 800a460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a462:	4bb3      	ldr	r3, [pc, #716]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a46a:	2b18      	cmp	r3, #24
 800a46c:	f200 8155 	bhi.w	800a71a <HAL_RCC_GetSysClockFreq+0x2be>
 800a470:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a476:	bf00      	nop
 800a478:	0800a4dd 	.word	0x0800a4dd
 800a47c:	0800a71b 	.word	0x0800a71b
 800a480:	0800a71b 	.word	0x0800a71b
 800a484:	0800a71b 	.word	0x0800a71b
 800a488:	0800a71b 	.word	0x0800a71b
 800a48c:	0800a71b 	.word	0x0800a71b
 800a490:	0800a71b 	.word	0x0800a71b
 800a494:	0800a71b 	.word	0x0800a71b
 800a498:	0800a503 	.word	0x0800a503
 800a49c:	0800a71b 	.word	0x0800a71b
 800a4a0:	0800a71b 	.word	0x0800a71b
 800a4a4:	0800a71b 	.word	0x0800a71b
 800a4a8:	0800a71b 	.word	0x0800a71b
 800a4ac:	0800a71b 	.word	0x0800a71b
 800a4b0:	0800a71b 	.word	0x0800a71b
 800a4b4:	0800a71b 	.word	0x0800a71b
 800a4b8:	0800a509 	.word	0x0800a509
 800a4bc:	0800a71b 	.word	0x0800a71b
 800a4c0:	0800a71b 	.word	0x0800a71b
 800a4c4:	0800a71b 	.word	0x0800a71b
 800a4c8:	0800a71b 	.word	0x0800a71b
 800a4cc:	0800a71b 	.word	0x0800a71b
 800a4d0:	0800a71b 	.word	0x0800a71b
 800a4d4:	0800a71b 	.word	0x0800a71b
 800a4d8:	0800a50f 	.word	0x0800a50f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4dc:	4b94      	ldr	r3, [pc, #592]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d009      	beq.n	800a4fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e8:	4b91      	ldr	r3, [pc, #580]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	08db      	lsrs	r3, r3, #3
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	4a90      	ldr	r2, [pc, #576]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a4fa:	e111      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a4fc:	4b8d      	ldr	r3, [pc, #564]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4fe:	61bb      	str	r3, [r7, #24]
      break;
 800a500:	e10e      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a502:	4b8d      	ldr	r3, [pc, #564]	; (800a738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a504:	61bb      	str	r3, [r7, #24]
      break;
 800a506:	e10b      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a508:	4b8c      	ldr	r3, [pc, #560]	; (800a73c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a50a:	61bb      	str	r3, [r7, #24]
      break;
 800a50c:	e108      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a50e:	4b88      	ldr	r3, [pc, #544]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a518:	4b85      	ldr	r3, [pc, #532]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	091b      	lsrs	r3, r3, #4
 800a51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a522:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a524:	4b82      	ldr	r3, [pc, #520]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a52e:	4b80      	ldr	r3, [pc, #512]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a532:	08db      	lsrs	r3, r3, #3
 800a534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	fb02 f303 	mul.w	r3, r2, r3
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 80e1 	beq.w	800a714 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b02      	cmp	r3, #2
 800a556:	f000 8083 	beq.w	800a660 <HAL_RCC_GetSysClockFreq+0x204>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	f200 80a1 	bhi.w	800a6a4 <HAL_RCC_GetSysClockFreq+0x248>
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <HAL_RCC_GetSysClockFreq+0x114>
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d056      	beq.n	800a61c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a56e:	e099      	b.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a570:	4b6f      	ldr	r3, [pc, #444]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d02d      	beq.n	800a5d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a57c:	4b6c      	ldr	r3, [pc, #432]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	08db      	lsrs	r3, r3, #3
 800a582:	f003 0303 	and.w	r3, r3, #3
 800a586:	4a6b      	ldr	r2, [pc, #428]	; (800a734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a588:	fa22 f303 	lsr.w	r3, r2, r3
 800a58c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	ee07 3a90 	vmov	s15, r3
 800a594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a6:	4b62      	ldr	r3, [pc, #392]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a5d6:	e087      	b.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a744 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b51      	ldr	r3, [pc, #324]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a61a:	e065      	b.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	ee07 3a90 	vmov	s15, r3
 800a622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a626:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62e:	4b40      	ldr	r3, [pc, #256]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a636:	ee07 3a90 	vmov	s15, r3
 800a63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a63e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a642:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a65e:	e043      	b.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	ee07 3a90 	vmov	s15, r3
 800a666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a74c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a672:	4b2f      	ldr	r3, [pc, #188]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a682:	ed97 6a02 	vldr	s12, [r7, #8]
 800a686:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a69e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6a2:	e021      	b.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	ee07 3a90 	vmov	s15, r3
 800a6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6b6:	4b1e      	ldr	r3, [pc, #120]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6be:	ee07 3a90 	vmov	s15, r3
 800a6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a6e8:	4b11      	ldr	r3, [pc, #68]	; (800a730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	0a5b      	lsrs	r3, r3, #9
 800a6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a700:	edd7 6a07 	vldr	s13, [r7, #28]
 800a704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70c:	ee17 3a90 	vmov	r3, s15
 800a710:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a712:	e005      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	61bb      	str	r3, [r7, #24]
      break;
 800a718:	e002      	b.n	800a720 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a71a:	4b07      	ldr	r3, [pc, #28]	; (800a738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a71c:	61bb      	str	r3, [r7, #24]
      break;
 800a71e:	bf00      	nop
  }

  return sysclockfreq;
 800a720:	69bb      	ldr	r3, [r7, #24]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3724      	adds	r7, #36	; 0x24
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	58024400 	.word	0x58024400
 800a734:	03d09000 	.word	0x03d09000
 800a738:	003d0900 	.word	0x003d0900
 800a73c:	02faf080 	.word	0x02faf080
 800a740:	46000000 	.word	0x46000000
 800a744:	4c742400 	.word	0x4c742400
 800a748:	4a742400 	.word	0x4a742400
 800a74c:	4c3ebc20 	.word	0x4c3ebc20

0800a750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a756:	f7ff fe81 	bl	800a45c <HAL_RCC_GetSysClockFreq>
 800a75a:	4602      	mov	r2, r0
 800a75c:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	0a1b      	lsrs	r3, r3, #8
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	490f      	ldr	r1, [pc, #60]	; (800a7a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a768:	5ccb      	ldrb	r3, [r1, r3]
 800a76a:	f003 031f 	and.w	r3, r3, #31
 800a76e:	fa22 f303 	lsr.w	r3, r2, r3
 800a772:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a774:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	f003 030f 	and.w	r3, r3, #15
 800a77c:	4a09      	ldr	r2, [pc, #36]	; (800a7a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a77e:	5cd3      	ldrb	r3, [r2, r3]
 800a780:	f003 031f 	and.w	r3, r3, #31
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	4a07      	ldr	r2, [pc, #28]	; (800a7a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a78c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a78e:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a794:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a796:	681b      	ldr	r3, [r3, #0]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	0801b760 	.word	0x0801b760
 800a7a8:	2400002c 	.word	0x2400002c
 800a7ac:	24000028 	.word	0x24000028

0800a7b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7b4:	f7ff ffcc 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	091b      	lsrs	r3, r3, #4
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7c6:	5ccb      	ldrb	r3, [r1, r3]
 800a7c8:	f003 031f 	and.w	r3, r3, #31
 800a7cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	58024400 	.word	0x58024400
 800a7d8:	0801b760 	.word	0x0801b760

0800a7dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a7e0:	f7ff ffb6 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	0a1b      	lsrs	r3, r3, #8
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	4904      	ldr	r1, [pc, #16]	; (800a804 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7f2:	5ccb      	ldrb	r3, [r1, r3]
 800a7f4:	f003 031f 	and.w	r3, r3, #31
 800a7f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	58024400 	.word	0x58024400
 800a804:	0801b760 	.word	0x0801b760

0800a808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a80c:	b0c6      	sub	sp, #280	; 0x118
 800a80e:	af00      	add	r7, sp, #0
 800a810:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a814:	2300      	movs	r3, #0
 800a816:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a81a:	2300      	movs	r3, #0
 800a81c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a82c:	2500      	movs	r5, #0
 800a82e:	ea54 0305 	orrs.w	r3, r4, r5
 800a832:	d049      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a83a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a83e:	d02f      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a840:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a844:	d828      	bhi.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a84a:	d01a      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a84c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a850:	d822      	bhi.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a85a:	d007      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a85c:	e01c      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a85e:	4bab      	ldr	r3, [pc, #684]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a862:	4aaa      	ldr	r2, [pc, #680]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a86a:	e01a      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a870:	3308      	adds	r3, #8
 800a872:	2102      	movs	r1, #2
 800a874:	4618      	mov	r0, r3
 800a876:	f002 fa49 	bl	800cd0c <RCCEx_PLL2_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a880:	e00f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a886:	3328      	adds	r3, #40	; 0x28
 800a888:	2102      	movs	r1, #2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f002 faf0 	bl	800ce70 <RCCEx_PLL3_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a896:	e004      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a89e:	e000      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8aa:	4b98      	ldr	r3, [pc, #608]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b8:	4a94      	ldr	r2, [pc, #592]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ba:	430b      	orrs	r3, r1
 800a8bc:	6513      	str	r3, [r2, #80]	; 0x50
 800a8be:	e003      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a8d4:	f04f 0900 	mov.w	r9, #0
 800a8d8:	ea58 0309 	orrs.w	r3, r8, r9
 800a8dc:	d047      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d82a      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a8e8:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a905 	.word	0x0800a905
 800a8f4:	0800a913 	.word	0x0800a913
 800a8f8:	0800a929 	.word	0x0800a929
 800a8fc:	0800a947 	.word	0x0800a947
 800a900:	0800a947 	.word	0x0800a947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a904:	4b81      	ldr	r3, [pc, #516]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	4a80      	ldr	r2, [pc, #512]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a90a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a90e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a910:	e01a      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a916:	3308      	adds	r3, #8
 800a918:	2100      	movs	r1, #0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f002 f9f6 	bl	800cd0c <RCCEx_PLL2_Config>
 800a920:	4603      	mov	r3, r0
 800a922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a926:	e00f      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92c:	3328      	adds	r3, #40	; 0x28
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f002 fa9d 	bl	800ce70 <RCCEx_PLL3_Config>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a93c:	e004      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a944:	e000      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a946:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a950:	4b6e      	ldr	r3, [pc, #440]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a954:	f023 0107 	bic.w	r1, r3, #7
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95e:	4a6b      	ldr	r2, [pc, #428]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a960:	430b      	orrs	r3, r1
 800a962:	6513      	str	r3, [r2, #80]	; 0x50
 800a964:	e003      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a966:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a96a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a97a:	f04f 0b00 	mov.w	fp, #0
 800a97e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a982:	d05b      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a98c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a990:	d03b      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a992:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a996:	d834      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a99c:	d037      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a99e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9a2:	d82e      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9a8:	d033      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9ae:	d828      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9b4:	d01a      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a9b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9ba:	d822      	bhi.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a9c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9c4:	d007      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a9c6:	e01c      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c8:	4b50      	ldr	r3, [pc, #320]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	4a4f      	ldr	r2, [pc, #316]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9d4:	e01e      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9da:	3308      	adds	r3, #8
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f002 f994 	bl	800cd0c <RCCEx_PLL2_Config>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a9ea:	e013      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f0:	3328      	adds	r3, #40	; 0x28
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f002 fa3b 	bl	800ce70 <RCCEx_PLL3_Config>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa00:	e008      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa08:	e004      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa0a:	bf00      	nop
 800aa0c:	e002      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa0e:	bf00      	nop
 800aa10:	e000      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10b      	bne.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa1c:	4b3b      	ldr	r3, [pc, #236]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa20:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa2c:	4a37      	ldr	r2, [pc, #220]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa2e:	430b      	orrs	r3, r1
 800aa30:	6593      	str	r3, [r2, #88]	; 0x58
 800aa32:	e003      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa52:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa56:	460b      	mov	r3, r1
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	d05d      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa64:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa68:	d03b      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aa6a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa6e:	d834      	bhi.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa74:	d037      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aa76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa7a:	d82e      	bhi.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa80:	d033      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aa82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa86:	d828      	bhi.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa8c:	d01a      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aa8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa92:	d822      	bhi.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aa98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa9c:	d007      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aa9e:	e01c      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa0:	4b1a      	ldr	r3, [pc, #104]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	4a19      	ldr	r2, [pc, #100]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaac:	e01e      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab2:	3308      	adds	r3, #8
 800aab4:	2100      	movs	r1, #0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f002 f928 	bl	800cd0c <RCCEx_PLL2_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aac2:	e013      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac8:	3328      	adds	r3, #40	; 0x28
 800aaca:	2100      	movs	r1, #0
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 f9cf 	bl	800ce70 <RCCEx_PLL3_Config>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aad8:	e008      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aae0:	e004      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aae2:	bf00      	nop
 800aae4:	e002      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aae6:	bf00      	nop
 800aae8:	e000      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aaea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10d      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aaf4:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab04:	4a01      	ldr	r2, [pc, #4]	; (800ab0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab06:	430b      	orrs	r3, r1
 800ab08:	6593      	str	r3, [r2, #88]	; 0x58
 800ab0a:	e005      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab32:	460b      	mov	r3, r1
 800ab34:	4313      	orrs	r3, r2
 800ab36:	d03a      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3e:	2b30      	cmp	r3, #48	; 0x30
 800ab40:	d01f      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab42:	2b30      	cmp	r3, #48	; 0x30
 800ab44:	d819      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab46:	2b20      	cmp	r3, #32
 800ab48:	d00c      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	d815      	bhi.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d019      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d111      	bne.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab56:	4baa      	ldr	r3, [pc, #680]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	4aa9      	ldr	r2, [pc, #676]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab62:	e011      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab68:	3308      	adds	r3, #8
 800ab6a:	2102      	movs	r1, #2
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 f8cd 	bl	800cd0c <RCCEx_PLL2_Config>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab78:	e006      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab80:	e002      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ab86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ab90:	4b9b      	ldr	r3, [pc, #620]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	4a98      	ldr	r2, [pc, #608]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aba0:	430b      	orrs	r3, r1
 800aba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aba4:	e003      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abaa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800abba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abbe:	2300      	movs	r3, #0
 800abc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abc4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800abc8:	460b      	mov	r3, r1
 800abca:	4313      	orrs	r3, r2
 800abcc:	d051      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd8:	d035      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800abda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abde:	d82e      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800abe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abe4:	d031      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800abe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800abea:	d828      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800abec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf0:	d01a      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800abf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abf6:	d822      	bhi.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800abfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac00:	d007      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac02:	e01c      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac04:	4b7e      	ldr	r3, [pc, #504]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	4a7d      	ldr	r2, [pc, #500]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac10:	e01c      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac16:	3308      	adds	r3, #8
 800ac18:	2100      	movs	r1, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f002 f876 	bl	800cd0c <RCCEx_PLL2_Config>
 800ac20:	4603      	mov	r3, r0
 800ac22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac26:	e011      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2c:	3328      	adds	r3, #40	; 0x28
 800ac2e:	2100      	movs	r1, #0
 800ac30:	4618      	mov	r0, r3
 800ac32:	f002 f91d 	bl	800ce70 <RCCEx_PLL3_Config>
 800ac36:	4603      	mov	r3, r0
 800ac38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac3c:	e006      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac44:	e002      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac46:	bf00      	nop
 800ac48:	e000      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac54:	4b6a      	ldr	r3, [pc, #424]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac62:	4a67      	ldr	r2, [pc, #412]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac64:	430b      	orrs	r3, r1
 800ac66:	6513      	str	r3, [r2, #80]	; 0x50
 800ac68:	e003      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ac7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac82:	2300      	movs	r3, #0
 800ac84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	d053      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac9c:	d033      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ac9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca2:	d82c      	bhi.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800aca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aca8:	d02f      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800acaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acae:	d826      	bhi.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acb4:	d02b      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800acb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acba:	d820      	bhi.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc0:	d012      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800acc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc6:	d81a      	bhi.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d022      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd0:	d115      	bne.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd6:	3308      	adds	r3, #8
 800acd8:	2101      	movs	r1, #1
 800acda:	4618      	mov	r0, r3
 800acdc:	f002 f816 	bl	800cd0c <RCCEx_PLL2_Config>
 800ace0:	4603      	mov	r3, r0
 800ace2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ace6:	e015      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acec:	3328      	adds	r3, #40	; 0x28
 800acee:	2101      	movs	r1, #1
 800acf0:	4618      	mov	r0, r3
 800acf2:	f002 f8bd 	bl	800ce70 <RCCEx_PLL3_Config>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800acfc:	e00a      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad04:	e006      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad06:	bf00      	nop
 800ad08:	e004      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad0a:	bf00      	nop
 800ad0c:	e002      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad0e:	bf00      	nop
 800ad10:	e000      	b.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10a      	bne.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad1c:	4b38      	ldr	r3, [pc, #224]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2a:	4a35      	ldr	r2, [pc, #212]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad2c:	430b      	orrs	r3, r1
 800ad2e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad30:	e003      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad54:	460b      	mov	r3, r1
 800ad56:	4313      	orrs	r3, r2
 800ad58:	d058      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad66:	d033      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ad68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad6c:	d82c      	bhi.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad72:	d02f      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ad74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad78:	d826      	bhi.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad7e:	d02b      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ad80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad84:	d820      	bhi.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad8a:	d012      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ad8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad90:	d81a      	bhi.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d022      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad9a:	d115      	bne.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada0:	3308      	adds	r3, #8
 800ada2:	2101      	movs	r1, #1
 800ada4:	4618      	mov	r0, r3
 800ada6:	f001 ffb1 	bl	800cd0c <RCCEx_PLL2_Config>
 800adaa:	4603      	mov	r3, r0
 800adac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adb0:	e015      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	3328      	adds	r3, #40	; 0x28
 800adb8:	2101      	movs	r1, #1
 800adba:	4618      	mov	r0, r3
 800adbc:	f002 f858 	bl	800ce70 <RCCEx_PLL3_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adc6:	e00a      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adce:	e006      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800add0:	bf00      	nop
 800add2:	e004      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800add4:	bf00      	nop
 800add6:	e002      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800add8:	bf00      	nop
 800adda:	e000      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800addc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10e      	bne.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ade6:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ade8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adf6:	4a02      	ldr	r2, [pc, #8]	; (800ae00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800adf8:	430b      	orrs	r3, r1
 800adfa:	6593      	str	r3, [r2, #88]	; 0x58
 800adfc:	e006      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800adfe:	bf00      	nop
 800ae00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae26:	460b      	mov	r3, r1
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	d037      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae36:	d00e      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3c:	d816      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d018      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae46:	d111      	bne.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae48:	4bc4      	ldr	r3, [pc, #784]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4c:	4ac3      	ldr	r2, [pc, #780]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae54:	e00f      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 ff54 	bl	800cd0c <RCCEx_PLL2_Config>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae6a:	e004      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae72:	e000      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ae74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae7e:	4bb7      	ldr	r3, [pc, #732]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae8c:	4ab3      	ldr	r2, [pc, #716]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	6513      	str	r3, [r2, #80]	; 0x50
 800ae92:	e003      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aea8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aeb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	d039      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d81c      	bhi.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aec6:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800af09 	.word	0x0800af09
 800aed0:	0800aedd 	.word	0x0800aedd
 800aed4:	0800aeeb 	.word	0x0800aeeb
 800aed8:	0800af09 	.word	0x0800af09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aedc:	4b9f      	ldr	r3, [pc, #636]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a9e      	ldr	r2, [pc, #632]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aee8:	e00f      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeee:	3308      	adds	r3, #8
 800aef0:	2102      	movs	r1, #2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 ff0a 	bl	800cd0c <RCCEx_PLL2_Config>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800aefe:	e004      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af06:	e000      	b.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10a      	bne.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af12:	4b92      	ldr	r3, [pc, #584]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af16:	f023 0103 	bic.w	r1, r3, #3
 800af1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af20:	4a8e      	ldr	r2, [pc, #568]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af22:	430b      	orrs	r3, r1
 800af24:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af26:	e003      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af40:	2300      	movs	r3, #0
 800af42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4313      	orrs	r3, r2
 800af4e:	f000 8099 	beq.w	800b084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af52:	4b83      	ldr	r3, [pc, #524]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a82      	ldr	r2, [pc, #520]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af5e:	f7f8 fd6f 	bl	8003a40 <HAL_GetTick>
 800af62:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af66:	e00b      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af68:	f7f8 fd6a 	bl	8003a40 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2b64      	cmp	r3, #100	; 0x64
 800af76:	d903      	bls.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af7e:	e005      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af80:	4b77      	ldr	r3, [pc, #476]	; (800b160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0ed      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800af8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af90:	2b00      	cmp	r3, #0
 800af92:	d173      	bne.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af94:	4b71      	ldr	r3, [pc, #452]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afa0:	4053      	eors	r3, r2
 800afa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d015      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afaa:	4b6c      	ldr	r3, [pc, #432]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afb6:	4b69      	ldr	r3, [pc, #420]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	4a68      	ldr	r2, [pc, #416]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afc2:	4b66      	ldr	r3, [pc, #408]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc6:	4a65      	ldr	r2, [pc, #404]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800afce:	4a63      	ldr	r2, [pc, #396]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800afd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe2:	d118      	bne.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe4:	f7f8 fd2c 	bl	8003a40 <HAL_GetTick>
 800afe8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afec:	e00d      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afee:	f7f8 fd27 	bl	8003a40 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aff8:	1ad2      	subs	r2, r2, r3
 800affa:	f241 3388 	movw	r3, #5000	; 0x1388
 800affe:	429a      	cmp	r2, r3
 800b000:	d903      	bls.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b008:	e005      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b00a:	4b54      	ldr	r3, [pc, #336]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0eb      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d129      	bne.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b02a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b02e:	d10e      	bne.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b030:	4b4a      	ldr	r3, [pc, #296]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b040:	091a      	lsrs	r2, r3, #4
 800b042:	4b48      	ldr	r3, [pc, #288]	; (800b164 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b044:	4013      	ands	r3, r2
 800b046:	4a45      	ldr	r2, [pc, #276]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b048:	430b      	orrs	r3, r1
 800b04a:	6113      	str	r3, [r2, #16]
 800b04c:	e005      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b04e:	4b43      	ldr	r3, [pc, #268]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	4a42      	ldr	r2, [pc, #264]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b058:	6113      	str	r3, [r2, #16]
 800b05a:	4b40      	ldr	r3, [pc, #256]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b05c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b06a:	4a3c      	ldr	r2, [pc, #240]	; (800b15c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b06c:	430b      	orrs	r3, r1
 800b06e:	6713      	str	r3, [r2, #112]	; 0x70
 800b070:	e008      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b072:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b076:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b07a:	e003      	b.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	f002 0301 	and.w	r3, r2, #1
 800b090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b094:	2300      	movs	r3, #0
 800b096:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b09a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	f000 808f 	beq.w	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0ac:	2b28      	cmp	r3, #40	; 0x28
 800b0ae:	d871      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b0b0:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b19d 	.word	0x0800b19d
 800b0bc:	0800b195 	.word	0x0800b195
 800b0c0:	0800b195 	.word	0x0800b195
 800b0c4:	0800b195 	.word	0x0800b195
 800b0c8:	0800b195 	.word	0x0800b195
 800b0cc:	0800b195 	.word	0x0800b195
 800b0d0:	0800b195 	.word	0x0800b195
 800b0d4:	0800b195 	.word	0x0800b195
 800b0d8:	0800b169 	.word	0x0800b169
 800b0dc:	0800b195 	.word	0x0800b195
 800b0e0:	0800b195 	.word	0x0800b195
 800b0e4:	0800b195 	.word	0x0800b195
 800b0e8:	0800b195 	.word	0x0800b195
 800b0ec:	0800b195 	.word	0x0800b195
 800b0f0:	0800b195 	.word	0x0800b195
 800b0f4:	0800b195 	.word	0x0800b195
 800b0f8:	0800b17f 	.word	0x0800b17f
 800b0fc:	0800b195 	.word	0x0800b195
 800b100:	0800b195 	.word	0x0800b195
 800b104:	0800b195 	.word	0x0800b195
 800b108:	0800b195 	.word	0x0800b195
 800b10c:	0800b195 	.word	0x0800b195
 800b110:	0800b195 	.word	0x0800b195
 800b114:	0800b195 	.word	0x0800b195
 800b118:	0800b19d 	.word	0x0800b19d
 800b11c:	0800b195 	.word	0x0800b195
 800b120:	0800b195 	.word	0x0800b195
 800b124:	0800b195 	.word	0x0800b195
 800b128:	0800b195 	.word	0x0800b195
 800b12c:	0800b195 	.word	0x0800b195
 800b130:	0800b195 	.word	0x0800b195
 800b134:	0800b195 	.word	0x0800b195
 800b138:	0800b19d 	.word	0x0800b19d
 800b13c:	0800b195 	.word	0x0800b195
 800b140:	0800b195 	.word	0x0800b195
 800b144:	0800b195 	.word	0x0800b195
 800b148:	0800b195 	.word	0x0800b195
 800b14c:	0800b195 	.word	0x0800b195
 800b150:	0800b195 	.word	0x0800b195
 800b154:	0800b195 	.word	0x0800b195
 800b158:	0800b19d 	.word	0x0800b19d
 800b15c:	58024400 	.word	0x58024400
 800b160:	58024800 	.word	0x58024800
 800b164:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	3308      	adds	r3, #8
 800b16e:	2101      	movs	r1, #1
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fdcb 	bl	800cd0c <RCCEx_PLL2_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b17c:	e00f      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b182:	3328      	adds	r3, #40	; 0x28
 800b184:	2101      	movs	r1, #1
 800b186:	4618      	mov	r0, r3
 800b188:	f001 fe72 	bl	800ce70 <RCCEx_PLL3_Config>
 800b18c:	4603      	mov	r3, r0
 800b18e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b192:	e004      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b19a:	e000      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b19e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10a      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1a6:	4bbf      	ldr	r3, [pc, #764]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1b4:	4abb      	ldr	r2, [pc, #748]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1ba:	e003      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f002 0302 	and.w	r3, r2, #2
 800b1d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	d041      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d824      	bhi.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b1ee:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b241 	.word	0x0800b241
 800b1f8:	0800b20d 	.word	0x0800b20d
 800b1fc:	0800b223 	.word	0x0800b223
 800b200:	0800b241 	.word	0x0800b241
 800b204:	0800b241 	.word	0x0800b241
 800b208:	0800b241 	.word	0x0800b241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	3308      	adds	r3, #8
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f001 fd79 	bl	800cd0c <RCCEx_PLL2_Config>
 800b21a:	4603      	mov	r3, r0
 800b21c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b220:	e00f      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b226:	3328      	adds	r3, #40	; 0x28
 800b228:	2101      	movs	r1, #1
 800b22a:	4618      	mov	r0, r3
 800b22c:	f001 fe20 	bl	800ce70 <RCCEx_PLL3_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b236:	e004      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b23e:	e000      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10a      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b24a:	4b96      	ldr	r3, [pc, #600]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b24e:	f023 0107 	bic.w	r1, r3, #7
 800b252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b258:	4a92      	ldr	r2, [pc, #584]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b25a:	430b      	orrs	r3, r1
 800b25c:	6553      	str	r3, [r2, #84]	; 0x54
 800b25e:	e003      	b.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b264:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f002 0304 	and.w	r3, r2, #4
 800b274:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b278:	2300      	movs	r3, #0
 800b27a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b27e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b282:	460b      	mov	r3, r1
 800b284:	4313      	orrs	r3, r2
 800b286:	d044      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b290:	2b05      	cmp	r3, #5
 800b292:	d825      	bhi.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2e9 	.word	0x0800b2e9
 800b2a0:	0800b2b5 	.word	0x0800b2b5
 800b2a4:	0800b2cb 	.word	0x0800b2cb
 800b2a8:	0800b2e9 	.word	0x0800b2e9
 800b2ac:	0800b2e9 	.word	0x0800b2e9
 800b2b0:	0800b2e9 	.word	0x0800b2e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f001 fd25 	bl	800cd0c <RCCEx_PLL2_Config>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2c8:	e00f      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ce:	3328      	adds	r3, #40	; 0x28
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f001 fdcc 	bl	800ce70 <RCCEx_PLL3_Config>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2de:	e004      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2e6:	e000      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10b      	bne.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b2f2:	4b6c      	ldr	r3, [pc, #432]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	f023 0107 	bic.w	r1, r3, #7
 800b2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b302:	4a68      	ldr	r2, [pc, #416]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b304:	430b      	orrs	r3, r1
 800b306:	6593      	str	r3, [r2, #88]	; 0x58
 800b308:	e003      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b30a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b30e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f002 0320 	and.w	r3, r2, #32
 800b31e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b322:	2300      	movs	r3, #0
 800b324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b328:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4313      	orrs	r3, r2
 800b330:	d055      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b33e:	d033      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b344:	d82c      	bhi.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b34a:	d02f      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b350:	d826      	bhi.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b356:	d02b      	beq.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b35c:	d820      	bhi.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b362:	d012      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b368:	d81a      	bhi.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d022      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b36e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b372:	d115      	bne.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b378:	3308      	adds	r3, #8
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f001 fcc5 	bl	800cd0c <RCCEx_PLL2_Config>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b388:	e015      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38e:	3328      	adds	r3, #40	; 0x28
 800b390:	2102      	movs	r1, #2
 800b392:	4618      	mov	r0, r3
 800b394:	f001 fd6c 	bl	800ce70 <RCCEx_PLL3_Config>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b39e:	e00a      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3a6:	e006      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3a8:	bf00      	nop
 800b3aa:	e004      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3ac:	bf00      	nop
 800b3ae:	e002      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3b0:	bf00      	nop
 800b3b2:	e000      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10b      	bne.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3be:	4b39      	ldr	r3, [pc, #228]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ce:	4a35      	ldr	r2, [pc, #212]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	6553      	str	r3, [r2, #84]	; 0x54
 800b3d4:	e003      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b3ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3f4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	d058      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b406:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b40a:	d033      	beq.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b40c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b410:	d82c      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b416:	d02f      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b41c:	d826      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b41e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b422:	d02b      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b428:	d820      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b42a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b42e:	d012      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b434:	d81a      	bhi.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d022      	beq.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b43e:	d115      	bne.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b444:	3308      	adds	r3, #8
 800b446:	2100      	movs	r1, #0
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 fc5f 	bl	800cd0c <RCCEx_PLL2_Config>
 800b44e:	4603      	mov	r3, r0
 800b450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b454:	e015      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45a:	3328      	adds	r3, #40	; 0x28
 800b45c:	2102      	movs	r1, #2
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 fd06 	bl	800ce70 <RCCEx_PLL3_Config>
 800b464:	4603      	mov	r3, r0
 800b466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b46a:	e00a      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b472:	e006      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b474:	bf00      	nop
 800b476:	e004      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b478:	bf00      	nop
 800b47a:	e002      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b47c:	bf00      	nop
 800b47e:	e000      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b480:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10e      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b48e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b49a:	4a02      	ldr	r2, [pc, #8]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b49c:	430b      	orrs	r3, r1
 800b49e:	6593      	str	r3, [r2, #88]	; 0x58
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4a2:	bf00      	nop
 800b4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b4bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	d055      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4dc:	d033      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b4de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4e2:	d82c      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4e8:	d02f      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b4ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4ee:	d826      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4f4:	d02b      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b4f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b4fa:	d820      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b500:	d012      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b506:	d81a      	bhi.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d022      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b50c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b510:	d115      	bne.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b516:	3308      	adds	r3, #8
 800b518:	2100      	movs	r1, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fbf6 	bl	800cd0c <RCCEx_PLL2_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b526:	e015      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	3328      	adds	r3, #40	; 0x28
 800b52e:	2102      	movs	r1, #2
 800b530:	4618      	mov	r0, r3
 800b532:	f001 fc9d 	bl	800ce70 <RCCEx_PLL3_Config>
 800b536:	4603      	mov	r3, r0
 800b538:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b53c:	e00a      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b544:	e006      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b546:	bf00      	nop
 800b548:	e004      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b54a:	bf00      	nop
 800b54c:	e002      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b54e:	bf00      	nop
 800b550:	e000      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b55c:	4ba0      	ldr	r3, [pc, #640]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b560:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b56c:	4a9c      	ldr	r2, [pc, #624]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b56e:	430b      	orrs	r3, r1
 800b570:	6593      	str	r3, [r2, #88]	; 0x58
 800b572:	e003      	b.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b578:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f002 0308 	and.w	r3, r2, #8
 800b588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b58c:	2300      	movs	r3, #0
 800b58e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b592:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b596:	460b      	mov	r3, r1
 800b598:	4313      	orrs	r3, r2
 800b59a:	d01e      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a8:	d10c      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	3328      	adds	r3, #40	; 0x28
 800b5b0:	2102      	movs	r1, #2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 fc5c 	bl	800ce70 <RCCEx_PLL3_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b5c4:	4b86      	ldr	r3, [pc, #536]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5d4:	4a82      	ldr	r2, [pc, #520]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f002 0310 	and.w	r3, r2, #16
 800b5e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	d01e      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b606:	d10c      	bne.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b60c:	3328      	adds	r3, #40	; 0x28
 800b60e:	2102      	movs	r1, #2
 800b610:	4618      	mov	r0, r3
 800b612:	f001 fc2d 	bl	800ce70 <RCCEx_PLL3_Config>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b622:	4b6f      	ldr	r3, [pc, #444]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b632:	4a6b      	ldr	r2, [pc, #428]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b634:	430b      	orrs	r3, r1
 800b636:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b644:	67bb      	str	r3, [r7, #120]	; 0x78
 800b646:	2300      	movs	r3, #0
 800b648:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b64a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d03e      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b65c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b660:	d022      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b666:	d81b      	bhi.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d003      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b670:	d00b      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b672:	e015      	b.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b678:	3308      	adds	r3, #8
 800b67a:	2100      	movs	r1, #0
 800b67c:	4618      	mov	r0, r3
 800b67e:	f001 fb45 	bl	800cd0c <RCCEx_PLL2_Config>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b688:	e00f      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68e:	3328      	adds	r3, #40	; 0x28
 800b690:	2102      	movs	r1, #2
 800b692:	4618      	mov	r0, r3
 800b694:	f001 fbec 	bl	800ce70 <RCCEx_PLL3_Config>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b69e:	e004      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10b      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6b2:	4b4b      	ldr	r3, [pc, #300]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6c2:	4a47      	ldr	r2, [pc, #284]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6c8:	e003      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b6de:	673b      	str	r3, [r7, #112]	; 0x70
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	677b      	str	r3, [r7, #116]	; 0x74
 800b6e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	d03b      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6fa:	d01f      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b6fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b700:	d818      	bhi.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b706:	d003      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b70c:	d007      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b70e:	e011      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b710:	4b33      	ldr	r3, [pc, #204]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b714:	4a32      	ldr	r2, [pc, #200]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b71a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b71c:	e00f      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b722:	3328      	adds	r3, #40	; 0x28
 800b724:	2101      	movs	r1, #1
 800b726:	4618      	mov	r0, r3
 800b728:	f001 fba2 	bl	800ce70 <RCCEx_PLL3_Config>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b732:	e004      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b73a:	e000      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10b      	bne.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b746:	4b26      	ldr	r3, [pc, #152]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b756:	4a22      	ldr	r2, [pc, #136]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b758:	430b      	orrs	r3, r1
 800b75a:	6553      	str	r3, [r2, #84]	; 0x54
 800b75c:	e003      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b762:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b772:	66bb      	str	r3, [r7, #104]	; 0x68
 800b774:	2300      	movs	r3, #0
 800b776:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b778:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b77c:	460b      	mov	r3, r1
 800b77e:	4313      	orrs	r3, r2
 800b780:	d034      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b78c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b790:	d007      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b792:	e011      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b794:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	4a11      	ldr	r2, [pc, #68]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b79a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b79e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7a0:	e00e      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 faae 	bl	800cd0c <RCCEx_PLL2_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7b6:	e003      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10d      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d6:	4a02      	ldr	r2, [pc, #8]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7d8:	430b      	orrs	r3, r1
 800b7da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7dc:	e006      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b7de:	bf00      	nop
 800b7e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b7f8:	663b      	str	r3, [r7, #96]	; 0x60
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b7fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b802:	460b      	mov	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d00c      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	3328      	adds	r3, #40	; 0x28
 800b80e:	2102      	movs	r1, #2
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fb2d 	bl	800ce70 <RCCEx_PLL3_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b82e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b830:	2300      	movs	r3, #0
 800b832:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b834:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b838:	460b      	mov	r3, r1
 800b83a:	4313      	orrs	r3, r2
 800b83c:	d036      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b848:	d018      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b84a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b84e:	d811      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b854:	d014      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b85a:	d80b      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d011      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b864:	d106      	bne.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b866:	4bb7      	ldr	r3, [pc, #732]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86a:	4ab6      	ldr	r2, [pc, #728]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b86c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b870:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b872:	e008      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b87a:	e004      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b87c:	bf00      	nop
 800b87e:	e002      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b880:	bf00      	nop
 800b882:	e000      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b88e:	4bad      	ldr	r3, [pc, #692]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89c:	4aa9      	ldr	r2, [pc, #676]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	6553      	str	r3, [r2, #84]	; 0x54
 800b8a2:	e003      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b8b8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	657b      	str	r3, [r7, #84]	; 0x54
 800b8be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	d009      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8c8:	4b9e      	ldr	r3, [pc, #632]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d6:	4a9b      	ldr	r2, [pc, #620]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8d8:	430b      	orrs	r3, r1
 800b8da:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b8e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	d009      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8f8:	4b92      	ldr	r3, [pc, #584]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8fc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b906:	4a8f      	ldr	r2, [pc, #572]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b908:	430b      	orrs	r3, r1
 800b90a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b918:	643b      	str	r3, [r7, #64]	; 0x40
 800b91a:	2300      	movs	r3, #0
 800b91c:	647b      	str	r3, [r7, #68]	; 0x44
 800b91e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b922:	460b      	mov	r3, r1
 800b924:	4313      	orrs	r3, r2
 800b926:	d00e      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b928:	4b86      	ldr	r3, [pc, #536]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	4a85      	ldr	r2, [pc, #532]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b92e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b932:	6113      	str	r3, [r2, #16]
 800b934:	4b83      	ldr	r3, [pc, #524]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b936:	6919      	ldr	r1, [r3, #16]
 800b938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b940:	4a80      	ldr	r2, [pc, #512]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b942:	430b      	orrs	r3, r1
 800b944:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b952:	63bb      	str	r3, [r7, #56]	; 0x38
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b958:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b95c:	460b      	mov	r3, r1
 800b95e:	4313      	orrs	r3, r2
 800b960:	d009      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b962:	4b78      	ldr	r3, [pc, #480]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b966:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b970:	4a74      	ldr	r2, [pc, #464]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b972:	430b      	orrs	r3, r1
 800b974:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b982:	633b      	str	r3, [r7, #48]	; 0x30
 800b984:	2300      	movs	r3, #0
 800b986:	637b      	str	r3, [r7, #52]	; 0x34
 800b988:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b98c:	460b      	mov	r3, r1
 800b98e:	4313      	orrs	r3, r2
 800b990:	d00a      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b992:	4b6c      	ldr	r3, [pc, #432]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b996:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a2:	4a68      	ldr	r2, [pc, #416]	; (800bb44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d011      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 f99d 	bl	800cd0c <RCCEx_PLL2_Config>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	6239      	str	r1, [r7, #32]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	d011      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba08:	3308      	adds	r3, #8
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f001 f97d 	bl	800cd0c <RCCEx_PLL2_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	2100      	movs	r1, #0
 800ba32:	61b9      	str	r1, [r7, #24]
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	61fb      	str	r3, [r7, #28]
 800ba3a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d011      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	3308      	adds	r3, #8
 800ba4a:	2102      	movs	r1, #2
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 f95d 	bl	800cd0c <RCCEx_PLL2_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	2100      	movs	r1, #0
 800ba72:	6139      	str	r1, [r7, #16]
 800ba74:	f003 0308 	and.w	r3, r3, #8
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4313      	orrs	r3, r2
 800ba82:	d011      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	3328      	adds	r3, #40	; 0x28
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 f9ef 	bl	800ce70 <RCCEx_PLL3_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800ba98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	2100      	movs	r1, #0
 800bab2:	60b9      	str	r1, [r7, #8]
 800bab4:	f003 0310 	and.w	r3, r3, #16
 800bab8:	60fb      	str	r3, [r7, #12]
 800baba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800babe:	460b      	mov	r3, r1
 800bac0:	4313      	orrs	r3, r2
 800bac2:	d011      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2101      	movs	r1, #1
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 f9cf 	bl	800ce70 <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bae4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	2100      	movs	r1, #0
 800baf2:	6039      	str	r1, [r7, #0]
 800baf4:	f003 0320 	and.w	r3, r3, #32
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bafe:	460b      	mov	r3, r1
 800bb00:	4313      	orrs	r3, r2
 800bb02:	d011      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb08:	3328      	adds	r3, #40	; 0x28
 800bb0a:	2102      	movs	r1, #2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 f9af 	bl	800ce70 <RCCEx_PLL3_Config>
 800bb12:	4603      	mov	r3, r0
 800bb14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb28:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	e000      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb42:	bf00      	nop
 800bb44:	58024400 	.word	0x58024400

0800bb48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b090      	sub	sp, #64	; 0x40
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb56:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb5a:	430b      	orrs	r3, r1
 800bb5c:	f040 8094 	bne.w	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb60:	4b9b      	ldr	r3, [pc, #620]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb64:	f003 0307 	and.w	r3, r3, #7
 800bb68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	f200 8087 	bhi.w	800bc80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb72:	a201      	add	r2, pc, #4	; (adr r2, 800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb78:	0800bb8d 	.word	0x0800bb8d
 800bb7c:	0800bbb5 	.word	0x0800bbb5
 800bb80:	0800bbdd 	.word	0x0800bbdd
 800bb84:	0800bc79 	.word	0x0800bc79
 800bb88:	0800bc05 	.word	0x0800bc05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb8c:	4b90      	ldr	r3, [pc, #576]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb98:	d108      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 ff62 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bba8:	f000 bc93 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbb0:	f000 bc8f 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbb4:	4b86      	ldr	r3, [pc, #536]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbc0:	d108      	bne.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbc2:	f107 0318 	add.w	r3, r7, #24
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 fca6 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbd0:	f000 bc7f 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd8:	f000 bc7b 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbdc:	4b7c      	ldr	r3, [pc, #496]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe8:	d108      	bne.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbea:	f107 030c 	add.w	r3, r7, #12
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fde6 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf8:	f000 bc6b 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc00:	f000 bc67 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc04:	4b72      	ldr	r3, [pc, #456]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc0c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc0e:	4b70      	ldr	r3, [pc, #448]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d10c      	bne.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d109      	bne.n	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc20:	4b6b      	ldr	r3, [pc, #428]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	08db      	lsrs	r3, r3, #3
 800bc26:	f003 0303 	and.w	r3, r3, #3
 800bc2a:	4a6a      	ldr	r2, [pc, #424]	; (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc32:	e01f      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc34:	4b66      	ldr	r3, [pc, #408]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc40:	d106      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc48:	d102      	bne.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc4a:	4b63      	ldr	r3, [pc, #396]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc4e:	e011      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc50:	4b5f      	ldr	r3, [pc, #380]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc5c:	d106      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc64:	d102      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc66:	4b5d      	ldr	r3, [pc, #372]	; (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6a:	e003      	b.n	800bc74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc70:	f000 bc2f 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc74:	f000 bc2d 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc78:	4b59      	ldr	r3, [pc, #356]	; (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7c:	f000 bc29 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc84:	f000 bc25 	b.w	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bc88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bc90:	430b      	orrs	r3, r1
 800bc92:	f040 80a7 	bne.w	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bc96:	4b4e      	ldr	r3, [pc, #312]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc9a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bc9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bca6:	d054      	beq.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcae:	f200 808b 	bhi.w	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcb8:	f000 8083 	beq.w	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcc2:	f200 8081 	bhi.w	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bccc:	d02f      	beq.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcd4:	d878      	bhi.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bce2:	d012      	beq.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bce4:	e070      	b.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bce6:	4b3a      	ldr	r3, [pc, #232]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcf2:	d107      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 feb5 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd02:	e3e6      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd08:	e3e3      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd0a:	4b31      	ldr	r3, [pc, #196]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd16:	d107      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd18:	f107 0318 	add.w	r3, r7, #24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 fbfb 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd26:	e3d4      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	e3d1      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd2e:	4b28      	ldr	r3, [pc, #160]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd3c:	f107 030c 	add.w	r3, r7, #12
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fd3d 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd4a:	e3c2      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd50:	e3bf      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd52:	4b1f      	ldr	r3, [pc, #124]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd5c:	4b1c      	ldr	r3, [pc, #112]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0304 	and.w	r3, r3, #4
 800bd64:	2b04      	cmp	r3, #4
 800bd66:	d10c      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d109      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd6e:	4b18      	ldr	r3, [pc, #96]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	08db      	lsrs	r3, r3, #3
 800bd74:	f003 0303 	and.w	r3, r3, #3
 800bd78:	4a16      	ldr	r2, [pc, #88]	; (800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd80:	e01e      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd82:	4b13      	ldr	r3, [pc, #76]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd8e:	d106      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd96:	d102      	bne.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd98:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd9c:	e010      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd9e:	4b0c      	ldr	r3, [pc, #48]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bda6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdaa:	d106      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdb2:	d102      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdb4:	4b09      	ldr	r3, [pc, #36]	; (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdb8:	e002      	b.n	800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdbe:	e388      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdc0:	e387      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdc2:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc6:	e384      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdcc:	e381      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdce:	bf00      	nop
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	03d09000 	.word	0x03d09000
 800bdd8:	003d0900 	.word	0x003d0900
 800bddc:	02faf080 	.word	0x02faf080
 800bde0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bde4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bdec:	430b      	orrs	r3, r1
 800bdee:	f040 809c 	bne.w	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bdf2:	4b9e      	ldr	r3, [pc, #632]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bdfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be02:	d054      	beq.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be0a:	f200 808b 	bhi.w	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be14:	f000 8083 	beq.w	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be1e:	f200 8081 	bhi.w	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be28:	d02f      	beq.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be30:	d878      	bhi.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	2b00      	cmp	r3, #0
 800be36:	d004      	beq.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be3e:	d012      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be40:	e070      	b.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be42:	4b8a      	ldr	r3, [pc, #552]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be4e:	d107      	bne.n	800be60 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be54:	4618      	mov	r0, r3
 800be56:	f000 fe07 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be5e:	e338      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be64:	e335      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be66:	4b81      	ldr	r3, [pc, #516]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be72:	d107      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be74:	f107 0318 	add.w	r3, r7, #24
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 fb4d 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be82:	e326      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be84:	2300      	movs	r3, #0
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be88:	e323      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be8a:	4b78      	ldr	r3, [pc, #480]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be96:	d107      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be98:	f107 030c 	add.w	r3, r7, #12
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fc8f 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bea6:	e314      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beac:	e311      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beae:	4b6f      	ldr	r3, [pc, #444]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beb8:	4b6c      	ldr	r3, [pc, #432]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0304 	and.w	r3, r3, #4
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d10c      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d109      	bne.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beca:	4b68      	ldr	r3, [pc, #416]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	08db      	lsrs	r3, r3, #3
 800bed0:	f003 0303 	and.w	r3, r3, #3
 800bed4:	4a66      	ldr	r2, [pc, #408]	; (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bed6:	fa22 f303 	lsr.w	r3, r2, r3
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bedc:	e01e      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bede:	4b63      	ldr	r3, [pc, #396]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beea:	d106      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800beec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bef2:	d102      	bne.n	800befa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bef4:	4b5f      	ldr	r3, [pc, #380]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef8:	e010      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800befa:	4b5c      	ldr	r3, [pc, #368]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf06:	d106      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0e:	d102      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf10:	4b59      	ldr	r3, [pc, #356]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf14:	e002      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf1a:	e2da      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf1c:	e2d9      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf1e:	4b57      	ldr	r3, [pc, #348]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf22:	e2d6      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	e2d3      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf32:	430b      	orrs	r3, r1
 800bf34:	f040 80a7 	bne.w	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf38:	4b4c      	ldr	r3, [pc, #304]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf48:	d055      	beq.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf50:	f200 8096 	bhi.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf5a:	f000 8084 	beq.w	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf64:	f200 808c 	bhi.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf6e:	d030      	beq.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf76:	f200 8083 	bhi.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d004      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf86:	d012      	beq.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bf88:	e07a      	b.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf8a:	4b38      	ldr	r3, [pc, #224]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf96:	d107      	bne.n	800bfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 fd63 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa6:	e294      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfac:	e291      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfae:	4b2f      	ldr	r3, [pc, #188]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfba:	d107      	bne.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfbc:	f107 0318 	add.w	r3, r7, #24
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 faa9 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfca:	e282      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd0:	e27f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfd2:	4b26      	ldr	r3, [pc, #152]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfde:	d107      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fbeb 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfee:	e270      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	e26d      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bff6:	4b1d      	ldr	r3, [pc, #116]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d10c      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d109      	bne.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c012:	4b16      	ldr	r3, [pc, #88]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	08db      	lsrs	r3, r3, #3
 800c018:	f003 0303 	and.w	r3, r3, #3
 800c01c:	4a14      	ldr	r2, [pc, #80]	; (800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c01e:	fa22 f303 	lsr.w	r3, r2, r3
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c024:	e01e      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c032:	d106      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c03a:	d102      	bne.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c03c:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c040:	e010      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c042:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c04a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c04e:	d106      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c056:	d102      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c058:	4b07      	ldr	r3, [pc, #28]	; (800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c062:	e236      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c064:	e235      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06a:	e232      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c06c:	58024400 	.word	0x58024400
 800c070:	03d09000 	.word	0x03d09000
 800c074:	003d0900 	.word	0x003d0900
 800c078:	02faf080 	.word	0x02faf080
 800c07c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c084:	e225      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c08a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c08e:	430b      	orrs	r3, r1
 800c090:	f040 8085 	bne.w	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c094:	4b9c      	ldr	r3, [pc, #624]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c098:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c09c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0a4:	d06b      	beq.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0ac:	d874      	bhi.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0b4:	d056      	beq.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0bc:	d86c      	bhi.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0c4:	d03b      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0cc:	d864      	bhi.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0d4:	d021      	beq.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0dc:	d85c      	bhi.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ea:	d004      	beq.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c0ec:	e054      	b.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c0ee:	f7fe fb5f 	bl	800a7b0 <HAL_RCC_GetPCLK1Freq>
 800c0f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c0f4:	e1ed      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f6:	4b84      	ldr	r3, [pc, #528]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c102:	d107      	bne.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c104:	f107 0318 	add.w	r3, r7, #24
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fa05 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c112:	e1de      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	e1db      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c11a:	4b7b      	ldr	r3, [pc, #492]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c126:	d107      	bne.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c128:	f107 030c 	add.w	r3, r7, #12
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 fb47 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c136:	e1cc      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13c:	e1c9      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c13e:	4b72      	ldr	r3, [pc, #456]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0304 	and.w	r3, r3, #4
 800c146:	2b04      	cmp	r3, #4
 800c148:	d109      	bne.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c14a:	4b6f      	ldr	r3, [pc, #444]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	4a6d      	ldr	r2, [pc, #436]	; (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c15c:	e1b9      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c162:	e1b6      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c164:	4b68      	ldr	r3, [pc, #416]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c170:	d102      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c172:	4b67      	ldr	r3, [pc, #412]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c176:	e1ac      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17c:	e1a9      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c17e:	4b62      	ldr	r3, [pc, #392]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c18a:	d102      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c18c:	4b61      	ldr	r3, [pc, #388]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c190:	e19f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c196:	e19c      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e199      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	d173      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1aa:	4b57      	ldr	r3, [pc, #348]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ba:	d02f      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1c2:	d863      	bhi.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d004      	beq.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d0:	d012      	beq.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c1d2:	e05b      	b.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1d4:	4b4c      	ldr	r3, [pc, #304]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1e0:	d107      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1e2:	f107 0318 	add.w	r3, r7, #24
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f996 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1f0:	e16f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f6:	e16c      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1f8:	4b43      	ldr	r3, [pc, #268]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c204:	d107      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c206:	f107 030c 	add.w	r3, r7, #12
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 fad8 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c214:	e15d      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21a:	e15a      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c21c:	4b3a      	ldr	r3, [pc, #232]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c21e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c224:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c226:	4b38      	ldr	r3, [pc, #224]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 0304 	and.w	r3, r3, #4
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d10c      	bne.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c238:	4b33      	ldr	r3, [pc, #204]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	08db      	lsrs	r3, r3, #3
 800c23e:	f003 0303 	and.w	r3, r3, #3
 800c242:	4a32      	ldr	r2, [pc, #200]	; (800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c244:	fa22 f303 	lsr.w	r3, r2, r3
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24a:	e01e      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c24c:	4b2e      	ldr	r3, [pc, #184]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c258:	d106      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c260:	d102      	bne.n	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c262:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c264:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c266:	e010      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c268:	4b27      	ldr	r3, [pc, #156]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c274:	d106      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c27c:	d102      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c27e:	4b25      	ldr	r3, [pc, #148]	; (800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c280:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c282:	e002      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c288:	e123      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c28a:	e122      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c290:	e11f      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c292:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c296:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c29a:	430b      	orrs	r3, r1
 800c29c:	d13c      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c29e:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d004      	beq.n	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b4:	d012      	beq.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c2b6:	e023      	b.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2b8:	4b13      	ldr	r3, [pc, #76]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c4:	d107      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 fbcc 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d4:	e0fd      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2da:	e0fa      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e8:	d107      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ea:	f107 0318 	add.w	r3, r7, #24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f912 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f8:	e0eb      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fe:	e0e8      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c300:	2300      	movs	r3, #0
 800c302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c304:	e0e5      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c306:	bf00      	nop
 800c308:	58024400 	.word	0x58024400
 800c30c:	03d09000 	.word	0x03d09000
 800c310:	003d0900 	.word	0x003d0900
 800c314:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c31c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c320:	430b      	orrs	r3, r1
 800c322:	f040 8085 	bne.w	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c326:	4b6d      	ldr	r3, [pc, #436]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c32e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c336:	d06b      	beq.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c33e:	d874      	bhi.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c346:	d056      	beq.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c34e:	d86c      	bhi.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c356:	d03b      	beq.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c35e:	d864      	bhi.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c366:	d021      	beq.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36e:	d85c      	bhi.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	2b00      	cmp	r3, #0
 800c374:	d004      	beq.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c37c:	d004      	beq.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c37e:	e054      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c380:	f000 f8b4 	bl	800c4ec <HAL_RCCEx_GetD3PCLK1Freq>
 800c384:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c386:	e0a4      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c388:	4b54      	ldr	r3, [pc, #336]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c394:	d107      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c396:	f107 0318 	add.w	r3, r7, #24
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f8bc 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a4:	e095      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e092      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3ac:	4b4b      	ldr	r3, [pc, #300]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b8:	d107      	bne.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f9fe 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c8:	e083      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ce:	e080      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3d0:	4b42      	ldr	r3, [pc, #264]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d109      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3dc:	4b3f      	ldr	r3, [pc, #252]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	08db      	lsrs	r3, r3, #3
 800c3e2:	f003 0303 	and.w	r3, r3, #3
 800c3e6:	4a3e      	ldr	r2, [pc, #248]	; (800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c3e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ee:	e070      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e06d      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3f6:	4b39      	ldr	r3, [pc, #228]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c402:	d102      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c404:	4b37      	ldr	r3, [pc, #220]	; (800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c408:	e063      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c40a:	2300      	movs	r3, #0
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40e:	e060      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c410:	4b32      	ldr	r3, [pc, #200]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c41c:	d102      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c41e:	4b32      	ldr	r3, [pc, #200]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c422:	e056      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c428:	e053      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42e:	e050      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c434:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c438:	430b      	orrs	r3, r1
 800c43a:	d148      	bne.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c43c:	4b27      	ldr	r3, [pc, #156]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c444:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c44c:	d02a      	beq.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c454:	d838      	bhi.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c462:	d00d      	beq.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c464:	e030      	b.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c46e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c472:	d102      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c474:	4b1c      	ldr	r3, [pc, #112]	; (800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c478:	e02b      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47e:	e028      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c480:	4b16      	ldr	r3, [pc, #88]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c48c:	d107      	bne.n	800c49e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c48e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fae8 	bl	800ca68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c49c:	e019      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a2:	e016      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a4:	4b0d      	ldr	r3, [pc, #52]	; (800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b0:	d107      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b2:	f107 0318 	add.w	r3, r7, #24
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 f82e 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c0:	e007      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c6:	e004      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4cc:	e001      	b.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3740      	adds	r7, #64	; 0x40
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	03d09000 	.word	0x03d09000
 800c4e4:	003d0900 	.word	0x003d0900
 800c4e8:	02faf080 	.word	0x02faf080

0800c4ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4f0:	f7fe f92e 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	4b06      	ldr	r3, [pc, #24]	; (800c510 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	091b      	lsrs	r3, r3, #4
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	4904      	ldr	r1, [pc, #16]	; (800c514 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c502:	5ccb      	ldrb	r3, [r1, r3]
 800c504:	f003 031f 	and.w	r3, r3, #31
 800c508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	58024400 	.word	0x58024400
 800c514:	0801b760 	.word	0x0801b760

0800c518 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c518:	b480      	push	{r7}
 800c51a:	b089      	sub	sp, #36	; 0x24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c520:	4ba1      	ldr	r3, [pc, #644]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c52a:	4b9f      	ldr	r3, [pc, #636]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52e:	0b1b      	lsrs	r3, r3, #12
 800c530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c534:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c536:	4b9c      	ldr	r3, [pc, #624]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53a:	091b      	lsrs	r3, r3, #4
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c542:	4b99      	ldr	r3, [pc, #612]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c546:	08db      	lsrs	r3, r3, #3
 800c548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c54c:	693a      	ldr	r2, [r7, #16]
 800c54e:	fb02 f303 	mul.w	r3, r2, r3
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c55a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f000 8111 	beq.w	800c788 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	f000 8083 	beq.w	800c674 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b02      	cmp	r3, #2
 800c572:	f200 80a1 	bhi.w	800c6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d003      	beq.n	800c584 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d056      	beq.n	800c630 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c582:	e099      	b.n	800c6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c584:	4b88      	ldr	r3, [pc, #544]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02d      	beq.n	800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c590:	4b85      	ldr	r3, [pc, #532]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	08db      	lsrs	r3, r3, #3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	4a84      	ldr	r2, [pc, #528]	; (800c7ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	ee07 3a90 	vmov	s15, r3
 800c5a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	ee07 3a90 	vmov	s15, r3
 800c5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b7b      	ldr	r3, [pc, #492]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c5ea:	e087      	b.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fe:	4b6a      	ldr	r3, [pc, #424]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c606:	ee07 3a90 	vmov	s15, r3
 800c60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c612:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c62e:	e065      	b.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c642:	4b59      	ldr	r3, [pc, #356]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64a:	ee07 3a90 	vmov	s15, r3
 800c64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c652:	ed97 6a03 	vldr	s12, [r7, #12]
 800c656:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c672:	e043      	b.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c686:	4b48      	ldr	r3, [pc, #288]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c696:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6b6:	e021      	b.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ca:	4b37      	ldr	r3, [pc, #220]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d2:	ee07 3a90 	vmov	s15, r3
 800c6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c700:	0a5b      	lsrs	r3, r3, #9
 800c702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c712:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c716:	edd7 6a07 	vldr	s13, [r7, #28]
 800c71a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c722:	ee17 2a90 	vmov	r2, s15
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c72a:	4b1f      	ldr	r3, [pc, #124]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c72e:	0c1b      	lsrs	r3, r3, #16
 800c730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c734:	ee07 3a90 	vmov	s15, r3
 800c738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c740:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c744:	edd7 6a07 	vldr	s13, [r7, #28]
 800c748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c750:	ee17 2a90 	vmov	r2, s15
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c758:	4b13      	ldr	r3, [pc, #76]	; (800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	0e1b      	lsrs	r3, r3, #24
 800c75e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c76a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c76e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c772:	edd7 6a07 	vldr	s13, [r7, #28]
 800c776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77e:	ee17 2a90 	vmov	r2, s15
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c786:	e008      	b.n	800c79a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	609a      	str	r2, [r3, #8]
}
 800c79a:	bf00      	nop
 800c79c:	3724      	adds	r7, #36	; 0x24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	58024400 	.word	0x58024400
 800c7ac:	03d09000 	.word	0x03d09000
 800c7b0:	46000000 	.word	0x46000000
 800c7b4:	4c742400 	.word	0x4c742400
 800c7b8:	4a742400 	.word	0x4a742400
 800c7bc:	4c3ebc20 	.word	0x4c3ebc20

0800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b089      	sub	sp, #36	; 0x24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7c8:	4ba1      	ldr	r3, [pc, #644]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7d2:	4b9f      	ldr	r3, [pc, #636]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	0d1b      	lsrs	r3, r3, #20
 800c7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7de:	4b9c      	ldr	r3, [pc, #624]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	0a1b      	lsrs	r3, r3, #8
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c7ea:	4b99      	ldr	r3, [pc, #612]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ee:	08db      	lsrs	r3, r3, #3
 800c7f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8111 	beq.w	800ca30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	2b02      	cmp	r3, #2
 800c812:	f000 8083 	beq.w	800c91c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	f200 80a1 	bhi.w	800c960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d003      	beq.n	800c82c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d056      	beq.n	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c82a:	e099      	b.n	800c960 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c82c:	4b88      	ldr	r3, [pc, #544]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0320 	and.w	r3, r3, #32
 800c834:	2b00      	cmp	r3, #0
 800c836:	d02d      	beq.n	800c894 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c838:	4b85      	ldr	r3, [pc, #532]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	08db      	lsrs	r3, r3, #3
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	4a84      	ldr	r2, [pc, #528]	; (800ca54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c844:	fa22 f303 	lsr.w	r3, r2, r3
 800c848:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	ee07 3a90 	vmov	s15, r3
 800c850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	ee07 3a90 	vmov	s15, r3
 800c85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c862:	4b7b      	ldr	r3, [pc, #492]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c86a:	ee07 3a90 	vmov	s15, r3
 800c86e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c872:	ed97 6a03 	vldr	s12, [r7, #12]
 800c876:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c87a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c892:	e087      	b.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a6:	4b6a      	ldr	r3, [pc, #424]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ae:	ee07 3a90 	vmov	s15, r3
 800c8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8d6:	e065      	b.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ea:	4b59      	ldr	r3, [pc, #356]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91a:	e043      	b.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c926:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c92e:	4b48      	ldr	r3, [pc, #288]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c936:	ee07 3a90 	vmov	s15, r3
 800c93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c942:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c95e:	e021      	b.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c972:	4b37      	ldr	r3, [pc, #220]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c982:	ed97 6a03 	vldr	s12, [r7, #12]
 800c986:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9a4:	4b2a      	ldr	r3, [pc, #168]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a8:	0a5b      	lsrs	r3, r3, #9
 800c9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ca:	ee17 2a90 	vmov	r2, s15
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c9d2:	4b1f      	ldr	r3, [pc, #124]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d6:	0c1b      	lsrs	r3, r3, #16
 800c9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9dc:	ee07 3a90 	vmov	s15, r3
 800c9e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9f8:	ee17 2a90 	vmov	r2, s15
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca00:	4b13      	ldr	r3, [pc, #76]	; (800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	0e1b      	lsrs	r3, r3, #24
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca26:	ee17 2a90 	vmov	r2, s15
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca2e:	e008      	b.n	800ca42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	609a      	str	r2, [r3, #8]
}
 800ca42:	bf00      	nop
 800ca44:	3724      	adds	r7, #36	; 0x24
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	58024400 	.word	0x58024400
 800ca54:	03d09000 	.word	0x03d09000
 800ca58:	46000000 	.word	0x46000000
 800ca5c:	4c742400 	.word	0x4c742400
 800ca60:	4a742400 	.word	0x4a742400
 800ca64:	4c3ebc20 	.word	0x4c3ebc20

0800ca68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b089      	sub	sp, #36	; 0x24
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca70:	4ba0      	ldr	r3, [pc, #640]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca74:	f003 0303 	and.w	r3, r3, #3
 800ca78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ca7a:	4b9e      	ldr	r3, [pc, #632]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7e:	091b      	lsrs	r3, r3, #4
 800ca80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca86:	4b9b      	ldr	r3, [pc, #620]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ca90:	4b98      	ldr	r3, [pc, #608]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca94:	08db      	lsrs	r3, r3, #3
 800ca96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	fb02 f303 	mul.w	r3, r2, r3
 800caa0:	ee07 3a90 	vmov	s15, r3
 800caa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 8111 	beq.w	800ccd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	f000 8083 	beq.w	800cbc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	f200 80a1 	bhi.w	800cc06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d056      	beq.n	800cb7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cad0:	e099      	b.n	800cc06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cad2:	4b88      	ldr	r3, [pc, #544]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 0320 	and.w	r3, r3, #32
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d02d      	beq.n	800cb3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cade:	4b85      	ldr	r3, [pc, #532]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	08db      	lsrs	r3, r3, #3
 800cae4:	f003 0303 	and.w	r3, r3, #3
 800cae8:	4a83      	ldr	r2, [pc, #524]	; (800ccf8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800caea:	fa22 f303 	lsr.w	r3, r2, r3
 800caee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	ee07 3a90 	vmov	s15, r3
 800cb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb08:	4b7a      	ldr	r3, [pc, #488]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb10:	ee07 3a90 	vmov	s15, r3
 800cb14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb38:	e087      	b.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	ee07 3a90 	vmov	s15, r3
 800cb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb4c:	4b69      	ldr	r3, [pc, #420]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb60:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb7c:	e065      	b.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	ee07 3a90 	vmov	s15, r3
 800cb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb90:	4b58      	ldr	r3, [pc, #352]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb98:	ee07 3a90 	vmov	s15, r3
 800cb9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc0:	e043      	b.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	ee07 3a90 	vmov	s15, r3
 800cbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbcc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cbd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd4:	4b47      	ldr	r3, [pc, #284]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbdc:	ee07 3a90 	vmov	s15, r3
 800cbe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc04:	e021      	b.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc10:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd00 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc18:	4b36      	ldr	r3, [pc, #216]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc20:	ee07 3a90 	vmov	s15, r3
 800cc24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc28:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ccfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc4a:	4b2a      	ldr	r3, [pc, #168]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4e:	0a5b      	lsrs	r3, r3, #9
 800cc50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc54:	ee07 3a90 	vmov	s15, r3
 800cc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc64:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc70:	ee17 2a90 	vmov	r2, s15
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc78:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7c:	0c1b      	lsrs	r3, r3, #16
 800cc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc82:	ee07 3a90 	vmov	s15, r3
 800cc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc92:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc9e:	ee17 2a90 	vmov	r2, s15
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cca6:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccaa:	0e1b      	lsrs	r3, r3, #24
 800ccac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb0:	ee07 3a90 	vmov	s15, r3
 800ccb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cccc:	ee17 2a90 	vmov	r2, s15
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ccd4:	e008      	b.n	800cce8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	609a      	str	r2, [r3, #8]
}
 800cce8:	bf00      	nop
 800ccea:	3724      	adds	r7, #36	; 0x24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	58024400 	.word	0x58024400
 800ccf8:	03d09000 	.word	0x03d09000
 800ccfc:	46000000 	.word	0x46000000
 800cd00:	4c742400 	.word	0x4c742400
 800cd04:	4a742400 	.word	0x4a742400
 800cd08:	4c3ebc20 	.word	0x4c3ebc20

0800cd0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd1a:	4b53      	ldr	r3, [pc, #332]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1e:	f003 0303 	and.w	r3, r3, #3
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d101      	bne.n	800cd2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e099      	b.n	800ce5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd2a:	4b4f      	ldr	r3, [pc, #316]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a4e      	ldr	r2, [pc, #312]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd36:	f7f6 fe83 	bl	8003a40 <HAL_GetTick>
 800cd3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd3c:	e008      	b.n	800cd50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd3e:	f7f6 fe7f 	bl	8003a40 <HAL_GetTick>
 800cd42:	4602      	mov	r2, r0
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d901      	bls.n	800cd50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e086      	b.n	800ce5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd50:	4b45      	ldr	r3, [pc, #276]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1f0      	bne.n	800cd3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd5c:	4b42      	ldr	r3, [pc, #264]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	031b      	lsls	r3, r3, #12
 800cd6a:	493f      	ldr	r1, [pc, #252]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	628b      	str	r3, [r1, #40]	; 0x28
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	025b      	lsls	r3, r3, #9
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	431a      	orrs	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	041b      	lsls	r3, r3, #16
 800cd8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	061b      	lsls	r3, r3, #24
 800cd9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cda0:	4931      	ldr	r1, [pc, #196]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cda2:	4313      	orrs	r3, r2
 800cda4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cda6:	4b30      	ldr	r3, [pc, #192]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	695b      	ldr	r3, [r3, #20]
 800cdb2:	492d      	ldr	r1, [pc, #180]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdb8:	4b2b      	ldr	r3, [pc, #172]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbc:	f023 0220 	bic.w	r2, r3, #32
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	4928      	ldr	r1, [pc, #160]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cdca:	4b27      	ldr	r3, [pc, #156]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdce:	4a26      	ldr	r2, [pc, #152]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdd0:	f023 0310 	bic.w	r3, r3, #16
 800cdd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdd6:	4b24      	ldr	r3, [pc, #144]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdda:	4b24      	ldr	r3, [pc, #144]	; (800ce6c <RCCEx_PLL2_Config+0x160>)
 800cddc:	4013      	ands	r3, r2
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	69d2      	ldr	r2, [r2, #28]
 800cde2:	00d2      	lsls	r2, r2, #3
 800cde4:	4920      	ldr	r1, [pc, #128]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cdea:	4b1f      	ldr	r3, [pc, #124]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdee:	4a1e      	ldr	r2, [pc, #120]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	f043 0310 	orr.w	r3, r3, #16
 800cdf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d106      	bne.n	800ce0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cdfc:	4b1a      	ldr	r3, [pc, #104]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800cdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce00:	4a19      	ldr	r2, [pc, #100]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce08:	e00f      	b.n	800ce2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d106      	bne.n	800ce1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce10:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce14:	4a14      	ldr	r2, [pc, #80]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce1c:	e005      	b.n	800ce2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce1e:	4b12      	ldr	r3, [pc, #72]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce22:	4a11      	ldr	r2, [pc, #68]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a0e      	ldr	r2, [pc, #56]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce36:	f7f6 fe03 	bl	8003a40 <HAL_GetTick>
 800ce3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce3c:	e008      	b.n	800ce50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce3e:	f7f6 fdff 	bl	8003a40 <HAL_GetTick>
 800ce42:	4602      	mov	r2, r0
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	1ad3      	subs	r3, r2, r3
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d901      	bls.n	800ce50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	e006      	b.n	800ce5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce50:	4b05      	ldr	r3, [pc, #20]	; (800ce68 <RCCEx_PLL2_Config+0x15c>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0f0      	beq.n	800ce3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	58024400 	.word	0x58024400
 800ce6c:	ffff0007 	.word	0xffff0007

0800ce70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce7e:	4b53      	ldr	r3, [pc, #332]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	f003 0303 	and.w	r3, r3, #3
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d101      	bne.n	800ce8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e099      	b.n	800cfc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce8e:	4b4f      	ldr	r3, [pc, #316]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a4e      	ldr	r2, [pc, #312]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800ce94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce9a:	f7f6 fdd1 	bl	8003a40 <HAL_GetTick>
 800ce9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cea0:	e008      	b.n	800ceb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cea2:	f7f6 fdcd 	bl	8003a40 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d901      	bls.n	800ceb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e086      	b.n	800cfc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ceb4:	4b45      	ldr	r3, [pc, #276]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1f0      	bne.n	800cea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cec0:	4b42      	ldr	r3, [pc, #264]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	051b      	lsls	r3, r3, #20
 800cece:	493f      	ldr	r1, [pc, #252]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800ced0:	4313      	orrs	r3, r2
 800ced2:	628b      	str	r3, [r1, #40]	; 0x28
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	025b      	lsls	r3, r3, #9
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	431a      	orrs	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	041b      	lsls	r3, r3, #16
 800cef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cef6:	431a      	orrs	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	061b      	lsls	r3, r3, #24
 800cf00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf04:	4931      	ldr	r1, [pc, #196]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf0a:	4b30      	ldr	r3, [pc, #192]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	695b      	ldr	r3, [r3, #20]
 800cf16:	492d      	ldr	r1, [pc, #180]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf1c:	4b2b      	ldr	r3, [pc, #172]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	4928      	ldr	r1, [pc, #160]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf2e:	4b27      	ldr	r3, [pc, #156]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	4a26      	ldr	r2, [pc, #152]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf3a:	4b24      	ldr	r3, [pc, #144]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3e:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <RCCEx_PLL3_Config+0x160>)
 800cf40:	4013      	ands	r3, r2
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	69d2      	ldr	r2, [r2, #28]
 800cf46:	00d2      	lsls	r2, r2, #3
 800cf48:	4920      	ldr	r1, [pc, #128]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf4e:	4b1f      	ldr	r3, [pc, #124]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf52:	4a1e      	ldr	r2, [pc, #120]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf60:	4b1a      	ldr	r3, [pc, #104]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf64:	4a19      	ldr	r2, [pc, #100]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf6c:	e00f      	b.n	800cf8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d106      	bne.n	800cf82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf74:	4b15      	ldr	r3, [pc, #84]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf78:	4a14      	ldr	r2, [pc, #80]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf80:	e005      	b.n	800cf8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf82:	4b12      	ldr	r3, [pc, #72]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf86:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a0e      	ldr	r2, [pc, #56]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cf94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf9a:	f7f6 fd51 	bl	8003a40 <HAL_GetTick>
 800cf9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfa0:	e008      	b.n	800cfb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfa2:	f7f6 fd4d 	bl	8003a40 <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d901      	bls.n	800cfb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e006      	b.n	800cfc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfb4:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <RCCEx_PLL3_Config+0x15c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0f0      	beq.n	800cfa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	58024400 	.word	0x58024400
 800cfd0:	ffff0007 	.word	0xffff0007

0800cfd4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b08a      	sub	sp, #40	; 0x28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e075      	b.n	800d0d2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d105      	bne.n	800cffe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7f5 fdd1 	bl	8002ba0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2204      	movs	r2, #4
 800d002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f868 	bl	800d0dc <HAL_SD_InitCard>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e05d      	b.n	800d0d2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d016:	f107 0308 	add.w	r3, r7, #8
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fdaf 	bl	800db80 <HAL_SD_GetCardStatus>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e052      	b.n	800d0d2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d02c:	7e3b      	ldrb	r3, [r7, #24]
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d032:	7e7b      	ldrb	r3, [r7, #25]
 800d034:	b2db      	uxtb	r3, r3
 800d036:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d10a      	bne.n	800d056 <HAL_SD_Init+0x82>
 800d040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <HAL_SD_Init+0x78>
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d052:	659a      	str	r2, [r3, #88]	; 0x58
 800d054:	e00b      	b.n	800d06e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d104      	bne.n	800d068 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d064:	659a      	str	r2, [r3, #88]	; 0x58
 800d066:	e002      	b.n	800d06e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fe6d 	bl	800dd54 <HAL_SD_ConfigWideBusOperation>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e026      	b.n	800d0d2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d084:	f7f6 fcdc 	bl	8003a40 <HAL_GetTick>
 800d088:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d08a:	e011      	b.n	800d0b0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d08c:	f7f6 fcd8 	bl	8003a40 <HAL_GetTick>
 800d090:	4602      	mov	r2, r0
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09a:	d109      	bne.n	800d0b0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0a2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d0ac:	2303      	movs	r3, #3
 800d0ae:	e010      	b.n	800d0d2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 ff61 	bl	800df78 <HAL_SD_GetCardState>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b04      	cmp	r3, #4
 800d0ba:	d1e7      	bne.n	800d08c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3728      	adds	r7, #40	; 0x28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
	...

0800d0dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d0dc:	b590      	push	{r4, r7, lr}
 800d0de:	b08d      	sub	sp, #52	; 0x34
 800d0e0:	af02      	add	r7, sp, #8
 800d0e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d0f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0f8:	f04f 0100 	mov.w	r1, #0
 800d0fc:	f7fe fd24 	bl	800bb48 <HAL_RCCEx_GetPeriphCLKFreq>
 800d100:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d109      	bne.n	800d11c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d116:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e070      	b.n	800d1fe <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	0a1b      	lsrs	r3, r3, #8
 800d120:	4a39      	ldr	r2, [pc, #228]	; (800d208 <HAL_SD_InitCard+0x12c>)
 800d122:	fba2 2303 	umull	r2, r3, r2, r3
 800d126:	091b      	lsrs	r3, r3, #4
 800d128:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681c      	ldr	r4, [r3, #0]
 800d12e:	466a      	mov	r2, sp
 800d130:	f107 0318 	add.w	r3, r7, #24
 800d134:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d138:	e882 0003 	stmia.w	r2, {r0, r1}
 800d13c:	f107 030c 	add.w	r3, r7, #12
 800d140:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d142:	4620      	mov	r0, r4
 800d144:	f004 fc28 	bl	8011998 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f004 fc6b 	bl	8011a28 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d162:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	2b00      	cmp	r3, #0
 800d168:	d007      	beq.n	800d17a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d16a:	4a28      	ldr	r2, [pc, #160]	; (800d20c <HAL_SD_InitCard+0x130>)
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d172:	3301      	adds	r3, #1
 800d174:	4618      	mov	r0, r3
 800d176:	f7f6 fc6f 	bl	8003a58 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 ffea 	bl	800e154 <SD_PowerON>
 800d180:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00b      	beq.n	800d1a0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	431a      	orrs	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e02e      	b.n	800d1fe <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 ff09 	bl	800dfb8 <SD_InitCard>
 800d1a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00b      	beq.n	800d1c6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e01b      	b.n	800d1fe <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f004 fcc0 	bl	8011b54 <SDMMC_CmdBlockLength>
 800d1d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00f      	beq.n	800d1fc <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a0b      	ldr	r2, [pc, #44]	; (800d210 <HAL_SD_InitCard+0x134>)
 800d1e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e000      	b.n	800d1fe <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	372c      	adds	r7, #44	; 0x2c
 800d202:	46bd      	mov	sp, r7
 800d204:	bd90      	pop	{r4, r7, pc}
 800d206:	bf00      	nop
 800d208:	014f8b59 	.word	0x014f8b59
 800d20c:	00012110 	.word	0x00012110
 800d210:	1fe00fff 	.word	0x1fe00fff

0800d214 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08c      	sub	sp, #48	; 0x30
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
 800d220:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d107      	bne.n	800d23c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d230:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e08d      	b.n	800d358 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b01      	cmp	r3, #1
 800d246:	f040 8086 	bne.w	800d356 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	441a      	add	r2, r3
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d907      	bls.n	800d26e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	e074      	b.n	800d358 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2203      	movs	r2, #3
 800d272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	025a      	lsls	r2, r3, #9
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d290:	2b01      	cmp	r3, #1
 800d292:	d002      	beq.n	800d29a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	025b      	lsls	r3, r3, #9
 800d298:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d29a:	f04f 33ff 	mov.w	r3, #4294967295
 800d29e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	025b      	lsls	r3, r3, #9
 800d2a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2a6:	2390      	movs	r3, #144	; 0x90
 800d2a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f107 0210 	add.w	r2, r7, #16
 800d2be:	4611      	mov	r1, r2
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f004 fc1b 	bl	8011afc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2d4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d90a      	bls.n	800d302 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2282      	movs	r2, #130	; 0x82
 800d2f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f004 fc71 	bl	8011be0 <SDMMC_CmdReadMultiBlock>
 800d2fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d300:	e009      	b.n	800d316 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2281      	movs	r2, #129	; 0x81
 800d306:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d30e:	4618      	mov	r0, r3
 800d310:	f004 fc43 	bl	8011b9a <SDMMC_CmdReadSingleBlock>
 800d314:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d012      	beq.n	800d342 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a0f      	ldr	r2, [pc, #60]	; (800d360 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	431a      	orrs	r2, r3
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2200      	movs	r2, #0
 800d33c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e00a      	b.n	800d358 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d350:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	e000      	b.n	800d358 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d356:	2302      	movs	r3, #2
  }
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3730      	adds	r7, #48	; 0x30
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	1fe00fff 	.word	0x1fe00fff

0800d364 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08c      	sub	sp, #48	; 0x30
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d107      	bne.n	800d38c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d380:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d388:	2301      	movs	r3, #1
 800d38a:	e08d      	b.n	800d4a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b01      	cmp	r3, #1
 800d396:	f040 8086 	bne.w	800d4a6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	441a      	add	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d907      	bls.n	800d3be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e074      	b.n	800d4a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	025a      	lsls	r2, r3, #9
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d002      	beq.n	800d3ea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e6:	025b      	lsls	r3, r3, #9
 800d3e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	025b      	lsls	r3, r3, #9
 800d3f4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3f6:	2390      	movs	r3, #144	; 0x90
 800d3f8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d402:	2300      	movs	r3, #0
 800d404:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f107 0210 	add.w	r2, r7, #16
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f004 fb73 	bl	8011afc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d424:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2201      	movs	r2, #1
 800d434:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d90a      	bls.n	800d452 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	22a0      	movs	r2, #160	; 0xa0
 800d440:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d448:	4618      	mov	r0, r3
 800d44a:	f004 fc0f 	bl	8011c6c <SDMMC_CmdWriteMultiBlock>
 800d44e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d450:	e009      	b.n	800d466 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2290      	movs	r2, #144	; 0x90
 800d456:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d45e:	4618      	mov	r0, r3
 800d460:	f004 fbe1 	bl	8011c26 <SDMMC_CmdWriteSingleBlock>
 800d464:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d012      	beq.n	800d492 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a0f      	ldr	r2, [pc, #60]	; (800d4b0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	431a      	orrs	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	e00a      	b.n	800d4a8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4a0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e000      	b.n	800d4a8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4a6:	2302      	movs	r3, #2
  }
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3730      	adds	r7, #48	; 0x30
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	1fe00fff 	.word	0x1fe00fff

0800d4b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <HAL_SD_IRQHandler+0x2e>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f003 0308 	and.w	r3, r3, #8
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 f926 	bl	800e72c <SD_Read_IT>
 800d4e0:	e19a      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 80ac 	beq.w	800d64a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	4b59      	ldr	r3, [pc, #356]	; (800d66c <HAL_SD_IRQHandler+0x1b8>)
 800d508:	400b      	ands	r3, r1
 800d50a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d51a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68da      	ldr	r2, [r3, #12]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d52a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f003 0308 	and.w	r3, r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	d038      	beq.n	800d5a8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f003 0302 	and.w	r3, r3, #2
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d104      	bne.n	800d54a <HAL_SD_IRQHandler+0x96>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f003 0320 	and.w	r3, r3, #32
 800d546:	2b00      	cmp	r3, #0
 800d548:	d011      	beq.n	800d56e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4618      	mov	r0, r3
 800d550:	f004 fbb0 	bl	8011cb4 <SDMMC_CmdStopTransfer>
 800d554:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d008      	beq.n	800d56e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	431a      	orrs	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f95b 	bl	800d824 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a3f      	ldr	r2, [pc, #252]	; (800d670 <HAL_SD_IRQHandler+0x1bc>)
 800d574:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f003 0301 	and.w	r3, r3, #1
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d104      	bne.n	800d598 <HAL_SD_IRQHandler+0xe4>
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f003 0302 	and.w	r3, r3, #2
 800d594:	2b00      	cmp	r3, #0
 800d596:	d003      	beq.n	800d5a0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f006 fbb1 	bl	8013d00 <HAL_SD_RxCpltCallback>
 800d59e:	e13b      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f006 fba3 	bl	8013cec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5a6:	e137      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 8132 	beq.w	800d818 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0302 	and.w	r3, r3, #2
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d104      	bne.n	800d5e0 <HAL_SD_IRQHandler+0x12c>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f003 0320 	and.w	r3, r3, #32
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d011      	beq.n	800d604 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f004 fb65 	bl	8011cb4 <SDMMC_CmdStopTransfer>
 800d5ea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d008      	beq.n	800d604 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	431a      	orrs	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f910 	bl	800d824 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f003 0310 	and.w	r3, r3, #16
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d104      	bne.n	800d626 <HAL_SD_IRQHandler+0x172>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f003 0320 	and.w	r3, r3, #32
 800d622:	2b00      	cmp	r3, #0
 800d624:	d002      	beq.n	800d62c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f006 fb60 	bl	8013cec <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	d105      	bne.n	800d642 <HAL_SD_IRQHandler+0x18e>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f000 80eb 	beq.w	800d818 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f006 fb5c 	bl	8013d00 <HAL_SD_RxCpltCallback>
}
 800d648:	e0e6      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00d      	beq.n	800d674 <HAL_SD_IRQHandler+0x1c0>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 0308 	and.w	r3, r3, #8
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f001 f8a8 	bl	800e7b8 <SD_Write_IT>
 800d668:	e0d6      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
 800d66a:	bf00      	nop
 800d66c:	ffff3ec5 	.word	0xffff3ec5
 800d670:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 809d 	beq.w	800d7be <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68a:	f003 0302 	and.w	r3, r3, #2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	f043 0202 	orr.w	r2, r3, #2
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d005      	beq.n	800d6b8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	f043 0208 	orr.w	r2, r3, #8
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6be:	f003 0320 	and.w	r3, r3, #32
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d005      	beq.n	800d6d2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ca:	f043 0220 	orr.w	r2, r3, #32
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d8:	f003 0310 	and.w	r3, r3, #16
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d005      	beq.n	800d6ec <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e4:	f043 0210 	orr.w	r2, r3, #16
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a4b      	ldr	r2, [pc, #300]	; (800d820 <HAL_SD_IRQHandler+0x36c>)
 800d6f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d702:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68da      	ldr	r2, [r3, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d712:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d722:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d732:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4618      	mov	r0, r3
 800d73a:	f004 fabb 	bl	8011cb4 <SDMMC_CmdStopTransfer>
 800d73e:	4602      	mov	r2, r0
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d744:	431a      	orrs	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d758:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d762:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f003 0308 	and.w	r3, r3, #8
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2201      	movs	r2, #1
 800d772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f851 	bl	800d824 <HAL_SD_ErrorCallback>
}
 800d782:	e049      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d044      	beq.n	800d818 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d792:	2b00      	cmp	r3, #0
 800d794:	d040      	beq.n	800d818 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7a4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f834 	bl	800d824 <HAL_SD_ErrorCallback>
}
 800d7bc:	e02c      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d025      	beq.n	800d818 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7dc:	f003 0304 	and.w	r3, r3, #4
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10c      	bne.n	800d7fe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d003      	beq.n	800d7f6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f001 f84a 	bl	800e888 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d7f4:	e010      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f001 f832 	bl	800e860 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d7fc:	e00c      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f003 0320 	and.w	r3, r3, #32
 800d804:	2b00      	cmp	r3, #0
 800d806:	d003      	beq.n	800d810 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f001 f833 	bl	800e874 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d80e:	e003      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f001 f81b 	bl	800e84c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d816:	e7ff      	b.n	800d818 <HAL_SD_IRQHandler+0x364>
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	18000f3a 	.word	0x18000f3a

0800d824 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d846:	0f9b      	lsrs	r3, r3, #30
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d852:	0e9b      	lsrs	r3, r3, #26
 800d854:	b2db      	uxtb	r3, r3
 800d856:	f003 030f 	and.w	r3, r3, #15
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d864:	0e1b      	lsrs	r3, r3, #24
 800d866:	b2db      	uxtb	r3, r3
 800d868:	f003 0303 	and.w	r3, r3, #3
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d876:	0c1b      	lsrs	r3, r3, #16
 800d878:	b2da      	uxtb	r2, r3
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d882:	0a1b      	lsrs	r3, r3, #8
 800d884:	b2da      	uxtb	r2, r3
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d898:	0d1b      	lsrs	r3, r3, #20
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8a4:	0c1b      	lsrs	r3, r3, #16
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 030f 	and.w	r3, r3, #15
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b6:	0bdb      	lsrs	r3, r3, #15
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	f003 0301 	and.w	r3, r3, #1
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8c8:	0b9b      	lsrs	r3, r3, #14
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0301 	and.w	r3, r3, #1
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8da:	0b5b      	lsrs	r3, r3, #13
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ec:	0b1b      	lsrs	r3, r3, #12
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	2b00      	cmp	r3, #0
 800d906:	d163      	bne.n	800d9d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d90c:	009a      	lsls	r2, r3, #2
 800d90e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d912:	4013      	ands	r3, r2
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d918:	0f92      	lsrs	r2, r2, #30
 800d91a:	431a      	orrs	r2, r3
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d924:	0edb      	lsrs	r3, r3, #27
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0307 	and.w	r3, r3, #7
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d936:	0e1b      	lsrs	r3, r3, #24
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d948:	0d5b      	lsrs	r3, r3, #21
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	f003 0307 	and.w	r3, r3, #7
 800d950:	b2da      	uxtb	r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d95a:	0c9b      	lsrs	r3, r3, #18
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	f003 0307 	and.w	r3, r3, #7
 800d962:	b2da      	uxtb	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96c:	0bdb      	lsrs	r3, r3, #15
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	b2da      	uxtb	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	7e1b      	ldrb	r3, [r3, #24]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0307 	and.w	r3, r3, #7
 800d98e:	3302      	adds	r3, #2
 800d990:	2201      	movs	r2, #1
 800d992:	fa02 f303 	lsl.w	r3, r2, r3
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d99a:	fb03 f202 	mul.w	r2, r3, r2
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	7a1b      	ldrb	r3, [r3, #8]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 030f 	and.w	r3, r3, #15
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	409a      	lsls	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d9bc:	0a52      	lsrs	r2, r2, #9
 800d9be:	fb03 f202 	mul.w	r2, r3, r2
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9cc:	655a      	str	r2, [r3, #84]	; 0x54
 800d9ce:	e031      	b.n	800da34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d11d      	bne.n	800da14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9dc:	041b      	lsls	r3, r3, #16
 800d9de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e6:	0c1b      	lsrs	r3, r3, #16
 800d9e8:	431a      	orrs	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	691b      	ldr	r3, [r3, #16]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	029a      	lsls	r2, r3, #10
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da08:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	655a      	str	r2, [r3, #84]	; 0x54
 800da12:	e00f      	b.n	800da34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a58      	ldr	r2, [pc, #352]	; (800db7c <HAL_SD_GetCardCSD+0x344>)
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e09d      	b.n	800db70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da38:	0b9b      	lsrs	r3, r3, #14
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 0301 	and.w	r3, r3, #1
 800da40:	b2da      	uxtb	r2, r3
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4a:	09db      	lsrs	r3, r3, #7
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da52:	b2da      	uxtb	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da62:	b2da      	uxtb	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da6c:	0fdb      	lsrs	r3, r3, #31
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da78:	0f5b      	lsrs	r3, r3, #29
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	f003 0303 	and.w	r3, r3, #3
 800da80:	b2da      	uxtb	r2, r3
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8a:	0e9b      	lsrs	r3, r3, #26
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	b2da      	uxtb	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9c:	0d9b      	lsrs	r3, r3, #22
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	f003 030f 	and.w	r3, r3, #15
 800daa4:	b2da      	uxtb	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daae:	0d5b      	lsrs	r3, r3, #21
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daca:	0c1b      	lsrs	r3, r3, #16
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dade:	0bdb      	lsrs	r3, r3, #15
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf2:	0b9b      	lsrs	r3, r3, #14
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db06:	0b5b      	lsrs	r3, r3, #13
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db1a:	0b1b      	lsrs	r3, r3, #12
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	b2da      	uxtb	r2, r3
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db2e:	0a9b      	lsrs	r3, r3, #10
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f003 0303 	and.w	r3, r3, #3
 800db36:	b2da      	uxtb	r2, r3
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	b2db      	uxtb	r3, r3
 800db46:	f003 0303 	and.w	r3, r3, #3
 800db4a:	b2da      	uxtb	r2, r3
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db56:	085b      	lsrs	r3, r3, #1
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr
 800db7c:	1fe00fff 	.word	0x1fe00fff

0800db80 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b094      	sub	sp, #80	; 0x50
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d101      	bne.n	800dba0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e0a7      	b.n	800dcf0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dba0:	f107 0308 	add.w	r3, r7, #8
 800dba4:	4619      	mov	r1, r3
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fb62 	bl	800e270 <SD_SendSDStatus>
 800dbac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d011      	beq.n	800dbd8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a4f      	ldr	r2, [pc, #316]	; (800dcf8 <HAL_SD_GetCardStatus+0x178>)
 800dbba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbc2:	431a      	orrs	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dbd6:	e070      	b.n	800dcba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	099b      	lsrs	r3, r3, #6
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	095b      	lsrs	r3, r3, #5
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	0a1b      	lsrs	r3, r3, #8
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	0e1b      	lsrs	r3, r3, #24
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	b29a      	uxth	r2, r3
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	061a      	lsls	r2, r3, #24
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	021b      	lsls	r3, r3, #8
 800dc1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc1e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	0a1b      	lsrs	r3, r3, #8
 800dc24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc28:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	0e1b      	lsrs	r3, r3, #24
 800dc2e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	0a1b      	lsrs	r3, r3, #8
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	0d1b      	lsrs	r3, r3, #20
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	f003 030f 	and.w	r3, r3, #15
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	0c1b      	lsrs	r3, r3, #16
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	b29a      	uxth	r2, r3
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	0a9b      	lsrs	r3, r3, #10
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	0a1b      	lsrs	r3, r3, #8
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	f003 0303 	and.w	r3, r3, #3
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	091b      	lsrs	r3, r3, #4
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	f003 030f 	and.w	r3, r3, #15
 800dcaa:	b2da      	uxtb	r2, r3
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	0e1b      	lsrs	r3, r3, #24
 800dcb4:	b2da      	uxtb	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f003 ff46 	bl	8011b54 <SDMMC_CmdBlockLength>
 800dcc8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00d      	beq.n	800dcec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a08      	ldr	r2, [pc, #32]	; (800dcf8 <HAL_SD_GetCardStatus+0x178>)
 800dcd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcdc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dcec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3750      	adds	r7, #80	; 0x50
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	1fe00fff 	.word	0x1fe00fff

0800dcfc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd54:	b590      	push	{r4, r7, lr}
 800dd56:	b08d      	sub	sp, #52	; 0x34
 800dd58:	af02      	add	r7, sp, #8
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2203      	movs	r2, #3
 800dd68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d02e      	beq.n	800ddd2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd7a:	d106      	bne.n	800dd8a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	635a      	str	r2, [r3, #52]	; 0x34
 800dd88:	e029      	b.n	800ddde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd90:	d10a      	bne.n	800dda8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fb64 	bl	800e460 <SD_WideBus_Enable>
 800dd98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	431a      	orrs	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	635a      	str	r2, [r3, #52]	; 0x34
 800dda6:	e01a      	b.n	800ddde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d10a      	bne.n	800ddc4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 fba1 	bl	800e4f6 <SD_WideBus_Disable>
 800ddb4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddba:	6a3b      	ldr	r3, [r7, #32]
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	635a      	str	r2, [r3, #52]	; 0x34
 800ddc2:	e00c      	b.n	800ddde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	635a      	str	r2, [r3, #52]	; 0x34
 800ddd0:	e005      	b.n	800ddde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d007      	beq.n	800ddf6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a5f      	ldr	r2, [pc, #380]	; (800df68 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ddec:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddf4:	e096      	b.n	800df24 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ddf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ddfa:	f04f 0100 	mov.w	r1, #0
 800ddfe:	f7fd fea3 	bl	800bb48 <HAL_RCCEx_GetPeriphCLKFreq>
 800de02:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f000 8083 	beq.w	800df12 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	695a      	ldr	r2, [r3, #20]
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	4950      	ldr	r1, [pc, #320]	; (800df6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de2a:	fba1 1303 	umull	r1, r3, r1, r3
 800de2e:	0e1b      	lsrs	r3, r3, #24
 800de30:	429a      	cmp	r2, r3
 800de32:	d303      	bcc.n	800de3c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	695b      	ldr	r3, [r3, #20]
 800de38:	61bb      	str	r3, [r7, #24]
 800de3a:	e05a      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de44:	d103      	bne.n	800de4e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	61bb      	str	r3, [r7, #24]
 800de4c:	e051      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de56:	d126      	bne.n	800dea6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	695b      	ldr	r3, [r3, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10e      	bne.n	800de7e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	4a43      	ldr	r2, [pc, #268]	; (800df70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d906      	bls.n	800de76 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	4a40      	ldr	r2, [pc, #256]	; (800df6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de6c:	fba2 2303 	umull	r2, r3, r2, r3
 800de70:	0e5b      	lsrs	r3, r3, #25
 800de72:	61bb      	str	r3, [r7, #24]
 800de74:	e03d      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	61bb      	str	r3, [r7, #24]
 800de7c:	e039      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	69fa      	ldr	r2, [r7, #28]
 800de86:	fbb2 f3f3 	udiv	r3, r2, r3
 800de8a:	4a39      	ldr	r2, [pc, #228]	; (800df70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d906      	bls.n	800de9e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	4a36      	ldr	r2, [pc, #216]	; (800df6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de94:	fba2 2303 	umull	r2, r3, r2, r3
 800de98:	0e5b      	lsrs	r3, r3, #25
 800de9a:	61bb      	str	r3, [r7, #24]
 800de9c:	e029      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	61bb      	str	r3, [r7, #24]
 800dea4:	e025      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	695b      	ldr	r3, [r3, #20]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10e      	bne.n	800decc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800deae:	69fb      	ldr	r3, [r7, #28]
 800deb0:	4a30      	ldr	r2, [pc, #192]	; (800df74 <HAL_SD_ConfigWideBusOperation+0x220>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d906      	bls.n	800dec4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	4a2c      	ldr	r2, [pc, #176]	; (800df6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800deba:	fba2 2303 	umull	r2, r3, r2, r3
 800debe:	0e1b      	lsrs	r3, r3, #24
 800dec0:	61bb      	str	r3, [r7, #24]
 800dec2:	e016      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	61bb      	str	r3, [r7, #24]
 800deca:	e012      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	695b      	ldr	r3, [r3, #20]
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	69fa      	ldr	r2, [r7, #28]
 800ded4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded8:	4a26      	ldr	r2, [pc, #152]	; (800df74 <HAL_SD_ConfigWideBusOperation+0x220>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d906      	bls.n	800deec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	4a22      	ldr	r2, [pc, #136]	; (800df6c <HAL_SD_ConfigWideBusOperation+0x218>)
 800dee2:	fba2 2303 	umull	r2, r3, r2, r3
 800dee6:	0e1b      	lsrs	r3, r3, #24
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e002      	b.n	800def2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681c      	ldr	r4, [r3, #0]
 800def6:	466a      	mov	r2, sp
 800def8:	f107 0314 	add.w	r3, r7, #20
 800defc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df00:	e882 0003 	stmia.w	r2, {r0, r1}
 800df04:	f107 0308 	add.w	r3, r7, #8
 800df08:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df0a:	4620      	mov	r0, r4
 800df0c:	f003 fd44 	bl	8011998 <SDMMC_Init>
 800df10:	e008      	b.n	800df24 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df2c:	4618      	mov	r0, r3
 800df2e:	f003 fe11 	bl	8011b54 <SDMMC_CmdBlockLength>
 800df32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00c      	beq.n	800df54 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a0a      	ldr	r2, [pc, #40]	; (800df68 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	431a      	orrs	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2201      	movs	r2, #1
 800df58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800df5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df60:	4618      	mov	r0, r3
 800df62:	372c      	adds	r7, #44	; 0x2c
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}
 800df68:	1fe00fff 	.word	0x1fe00fff
 800df6c:	55e63b89 	.word	0x55e63b89
 800df70:	02faf080 	.word	0x02faf080
 800df74:	017d7840 	.word	0x017d7840

0800df78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fa40 	bl	800e410 <SD_SendStatus>
 800df90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d005      	beq.n	800dfa4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	431a      	orrs	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	0a5b      	lsrs	r3, r3, #9
 800dfa8:	f003 030f 	and.w	r3, r3, #15
 800dfac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfae:	693b      	ldr	r3, [r7, #16]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3718      	adds	r7, #24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b090      	sub	sp, #64	; 0x40
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dfc4:	f7f5 fd3c 	bl	8003a40 <HAL_GetTick>
 800dfc8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f003 fd3b 	bl	8011a4a <SDMMC_GetPowerState>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d102      	bne.n	800dfe0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfde:	e0b5      	b.n	800e14c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d02e      	beq.n	800e046 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f003 ff86 	bl	8011efe <SDMMC_CmdSendCID>
 800dff2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <SD_InitCard+0x46>
    {
      return errorstate;
 800dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffc:	e0a6      	b.n	800e14c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2100      	movs	r1, #0
 800e004:	4618      	mov	r0, r3
 800e006:	f003 fd66 	bl	8011ad6 <SDMMC_GetResponse>
 800e00a:	4602      	mov	r2, r0
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2104      	movs	r1, #4
 800e016:	4618      	mov	r0, r3
 800e018:	f003 fd5d 	bl	8011ad6 <SDMMC_GetResponse>
 800e01c:	4602      	mov	r2, r0
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2108      	movs	r1, #8
 800e028:	4618      	mov	r0, r3
 800e02a:	f003 fd54 	bl	8011ad6 <SDMMC_GetResponse>
 800e02e:	4602      	mov	r2, r0
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	210c      	movs	r1, #12
 800e03a:	4618      	mov	r0, r3
 800e03c:	f003 fd4b 	bl	8011ad6 <SDMMC_GetResponse>
 800e040:	4602      	mov	r2, r0
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d01d      	beq.n	800e08a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e04e:	e019      	b.n	800e084 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f107 020a 	add.w	r2, r7, #10
 800e058:	4611      	mov	r1, r2
 800e05a:	4618      	mov	r0, r3
 800e05c:	f003 ff8e 	bl	8011f7c <SDMMC_CmdSetRelAdd>
 800e060:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06a:	e06f      	b.n	800e14c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e06c:	f7f5 fce8 	bl	8003a40 <HAL_GetTick>
 800e070:	4602      	mov	r2, r0
 800e072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	f241 3287 	movw	r2, #4999	; 0x1387
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d902      	bls.n	800e084 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e07e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e082:	e063      	b.n	800e14c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e084:	897b      	ldrh	r3, [r7, #10]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0e2      	beq.n	800e050 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08e:	2b03      	cmp	r3, #3
 800e090:	d036      	beq.n	800e100 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e092:	897b      	ldrh	r3, [r7, #10]
 800e094:	461a      	mov	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0a2:	041b      	lsls	r3, r3, #16
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	f003 ff48 	bl	8011f3c <SDMMC_CmdSendCSD>
 800e0ac:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <SD_InitCard+0x100>
    {
      return errorstate;
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	e049      	b.n	800e14c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f003 fd09 	bl	8011ad6 <SDMMC_GetResponse>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2104      	movs	r1, #4
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f003 fd00 	bl	8011ad6 <SDMMC_GetResponse>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2108      	movs	r1, #8
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f003 fcf7 	bl	8011ad6 <SDMMC_GetResponse>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	210c      	movs	r1, #12
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f003 fcee 	bl	8011ad6 <SDMMC_GetResponse>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2104      	movs	r1, #4
 800e106:	4618      	mov	r0, r3
 800e108:	f003 fce5 	bl	8011ad6 <SDMMC_GetResponse>
 800e10c:	4603      	mov	r3, r0
 800e10e:	0d1a      	lsrs	r2, r3, #20
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e114:	f107 030c 	add.w	r3, r7, #12
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff fb8c 	bl	800d838 <HAL_SD_GetCardCSD>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e126:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e12a:	e00f      	b.n	800e14c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e134:	041b      	lsls	r3, r3, #16
 800e136:	4619      	mov	r1, r3
 800e138:	4610      	mov	r0, r2
 800e13a:	f003 fdf7 	bl	8011d2c <SDMMC_CmdSelDesel>
 800e13e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <SD_InitCard+0x192>
  {
    return errorstate;
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	e000      	b.n	800e14c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3740      	adds	r7, #64	; 0x40
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b086      	sub	sp, #24
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e15c:	2300      	movs	r3, #0
 800e15e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e160:	2300      	movs	r3, #0
 800e162:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e164:	2300      	movs	r3, #0
 800e166:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f003 fe00 	bl	8011d72 <SDMMC_CmdGoIdleState>
 800e172:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d001      	beq.n	800e17e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	e072      	b.n	800e264 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4618      	mov	r0, r3
 800e184:	f003 fe13 	bl	8011dae <SDMMC_CmdOperCond>
 800e188:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e190:	d10d      	bne.n	800e1ae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2200      	movs	r2, #0
 800e196:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f003 fde8 	bl	8011d72 <SDMMC_CmdGoIdleState>
 800e1a2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d004      	beq.n	800e1b4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	e05a      	b.n	800e264 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d137      	bne.n	800e22c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f003 fe13 	bl	8011dee <SDMMC_CmdAppCommand>
 800e1c8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d02d      	beq.n	800e22c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1d4:	e046      	b.n	800e264 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2100      	movs	r1, #0
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f003 fe06 	bl	8011dee <SDMMC_CmdAppCommand>
 800e1e2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <SD_PowerON+0x9a>
    {
      return errorstate;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	e03a      	b.n	800e264 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	491e      	ldr	r1, [pc, #120]	; (800e26c <SD_PowerON+0x118>)
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f003 fe1d 	bl	8011e34 <SDMMC_CmdAppOperCommand>
 800e1fa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e206:	e02d      	b.n	800e264 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2100      	movs	r1, #0
 800e20e:	4618      	mov	r0, r3
 800e210:	f003 fc61 	bl	8011ad6 <SDMMC_GetResponse>
 800e214:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	0fdb      	lsrs	r3, r3, #31
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d101      	bne.n	800e222 <SD_PowerON+0xce>
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <SD_PowerON+0xd0>
 800e222:	2300      	movs	r3, #0
 800e224:	613b      	str	r3, [r7, #16]

    count++;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	3301      	adds	r3, #1
 800e22a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e232:	4293      	cmp	r3, r2
 800e234:	d802      	bhi.n	800e23c <SD_PowerON+0xe8>
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d0cc      	beq.n	800e1d6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e242:	4293      	cmp	r3, r2
 800e244:	d902      	bls.n	800e24c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e24a:	e00b      	b.n	800e264 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2201      	movs	r2, #1
 800e260:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	c1100000 	.word	0xc1100000

0800e270 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08c      	sub	sp, #48	; 0x30
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e27a:	f7f5 fbe1 	bl	8003a40 <HAL_GetTick>
 800e27e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2100      	movs	r1, #0
 800e28a:	4618      	mov	r0, r3
 800e28c:	f003 fc23 	bl	8011ad6 <SDMMC_GetResponse>
 800e290:	4603      	mov	r3, r0
 800e292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e29a:	d102      	bne.n	800e2a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e29c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2a0:	e0b0      	b.n	800e404 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2140      	movs	r1, #64	; 0x40
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f003 fc53 	bl	8011b54 <SDMMC_CmdBlockLength>
 800e2ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d005      	beq.n	800e2c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2be:	6a3b      	ldr	r3, [r7, #32]
 800e2c0:	e0a0      	b.n	800e404 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ca:	041b      	lsls	r3, r3, #16
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f003 fd8d 	bl	8011dee <SDMMC_CmdAppCommand>
 800e2d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	e08d      	b.n	800e404 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e2ee:	2340      	movs	r3, #64	; 0x40
 800e2f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e2f2:	2360      	movs	r3, #96	; 0x60
 800e2f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2fe:	2301      	movs	r3, #1
 800e300:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f107 0208 	add.w	r2, r7, #8
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f003 fbf5 	bl	8011afc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4618      	mov	r0, r3
 800e318:	f003 fe75 	bl	8012006 <SDMMC_CmdStatusRegister>
 800e31c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d02b      	beq.n	800e37c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	e069      	b.n	800e404 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d013      	beq.n	800e366 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e33e:	2300      	movs	r3, #0
 800e340:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e342:	e00d      	b.n	800e360 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	f003 fb4f 	bl	80119ec <SDMMC_ReadFIFO>
 800e34e:	4602      	mov	r2, r0
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	601a      	str	r2, [r3, #0]
        pData++;
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	3304      	adds	r3, #4
 800e358:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	3301      	adds	r3, #1
 800e35e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	2b07      	cmp	r3, #7
 800e364:	d9ee      	bls.n	800e344 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e366:	f7f5 fb6b 	bl	8003a40 <HAL_GetTick>
 800e36a:	4602      	mov	r2, r0
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e374:	d102      	bne.n	800e37c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e376:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e37a:	e043      	b.n	800e404 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e382:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e386:	2b00      	cmp	r3, #0
 800e388:	d0d2      	beq.n	800e330 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	f003 0308 	and.w	r3, r3, #8
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e398:	2308      	movs	r3, #8
 800e39a:	e033      	b.n	800e404 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	e02a      	b.n	800e404 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b4:	f003 0320 	and.w	r3, r3, #32
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d017      	beq.n	800e3ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e3bc:	2320      	movs	r3, #32
 800e3be:	e021      	b.n	800e404 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f003 fb11 	bl	80119ec <SDMMC_ReadFIFO>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ce:	601a      	str	r2, [r3, #0]
    pData++;
 800e3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3d6:	f7f5 fb33 	bl	8003a40 <HAL_GetTick>
 800e3da:	4602      	mov	r2, r0
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e4:	d102      	bne.n	800e3ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3ea:	e00b      	b.n	800e404 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1e2      	bne.n	800e3c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a03      	ldr	r2, [pc, #12]	; (800e40c <SD_SendSDStatus+0x19c>)
 800e400:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3730      	adds	r7, #48	; 0x30
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	18000f3a 	.word	0x18000f3a

0800e410 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d102      	bne.n	800e426 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e420:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e424:	e018      	b.n	800e458 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42e:	041b      	lsls	r3, r3, #16
 800e430:	4619      	mov	r1, r3
 800e432:	4610      	mov	r0, r2
 800e434:	f003 fdc4 	bl	8011fc0 <SDMMC_CmdSendStatus>
 800e438:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	e009      	b.n	800e458 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2100      	movs	r1, #0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f003 fb43 	bl	8011ad6 <SDMMC_GetResponse>
 800e450:	4602      	mov	r2, r0
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b086      	sub	sp, #24
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e468:	2300      	movs	r3, #0
 800e46a:	60fb      	str	r3, [r7, #12]
 800e46c:	2300      	movs	r3, #0
 800e46e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2100      	movs	r1, #0
 800e476:	4618      	mov	r0, r3
 800e478:	f003 fb2d 	bl	8011ad6 <SDMMC_GetResponse>
 800e47c:	4603      	mov	r3, r0
 800e47e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e486:	d102      	bne.n	800e48e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e48c:	e02f      	b.n	800e4ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e48e:	f107 030c 	add.w	r3, r7, #12
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f879 	bl	800e58c <SD_FindSCR>
 800e49a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	e023      	b.n	800e4ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d01c      	beq.n	800e4ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b8:	041b      	lsls	r3, r3, #16
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f003 fc96 	bl	8011dee <SDMMC_CmdAppCommand>
 800e4c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	e00f      	b.n	800e4ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2102      	movs	r1, #2
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f003 fccd 	bl	8011e74 <SDMMC_CmdBusWidth>
 800e4da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	e003      	b.n	800e4ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	e001      	b.n	800e4ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b086      	sub	sp, #24
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	2300      	movs	r3, #0
 800e504:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2100      	movs	r1, #0
 800e50c:	4618      	mov	r0, r3
 800e50e:	f003 fae2 	bl	8011ad6 <SDMMC_GetResponse>
 800e512:	4603      	mov	r3, r0
 800e514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e51c:	d102      	bne.n	800e524 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e51e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e522:	e02f      	b.n	800e584 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e524:	f107 030c 	add.w	r3, r7, #12
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f82e 	bl	800e58c <SD_FindSCR>
 800e530:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	e023      	b.n	800e584 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e542:	2b00      	cmp	r3, #0
 800e544:	d01c      	beq.n	800e580 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54e:	041b      	lsls	r3, r3, #16
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f003 fc4b 	bl	8011dee <SDMMC_CmdAppCommand>
 800e558:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	e00f      	b.n	800e584 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2100      	movs	r1, #0
 800e56a:	4618      	mov	r0, r3
 800e56c:	f003 fc82 	bl	8011e74 <SDMMC_CmdBusWidth>
 800e570:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	e003      	b.n	800e584 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e57c:	2300      	movs	r3, #0
 800e57e:	e001      	b.n	800e584 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e584:	4618      	mov	r0, r3
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08e      	sub	sp, #56	; 0x38
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e596:	f7f5 fa53 	bl	8003a40 <HAL_GetTick>
 800e59a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	60bb      	str	r3, [r7, #8]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2108      	movs	r1, #8
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f003 face 	bl	8011b54 <SDMMC_CmdBlockLength>
 800e5b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	e0ad      	b.n	800e720 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5cc:	041b      	lsls	r3, r3, #16
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f003 fc0c 	bl	8011dee <SDMMC_CmdAppCommand>
 800e5d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	e09e      	b.n	800e720 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e5ec:	2330      	movs	r3, #48	; 0x30
 800e5ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f107 0210 	add.w	r2, r7, #16
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f003 fa78 	bl	8011afc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4618      	mov	r0, r3
 800e612:	f003 fc52 	bl	8011eba <SDMMC_CmdSendSCR>
 800e616:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d027      	beq.n	800e66e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	e07e      	b.n	800e720 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d113      	bne.n	800e658 <SD_FindSCR+0xcc>
 800e630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e632:	2b00      	cmp	r3, #0
 800e634:	d110      	bne.n	800e658 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f003 f9d6 	bl	80119ec <SDMMC_ReadFIFO>
 800e640:	4603      	mov	r3, r0
 800e642:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	f003 f9cf 	bl	80119ec <SDMMC_ReadFIFO>
 800e64e:	4603      	mov	r3, r0
 800e650:	60fb      	str	r3, [r7, #12]
      index++;
 800e652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e654:	3301      	adds	r3, #1
 800e656:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e658:	f7f5 f9f2 	bl	8003a40 <HAL_GetTick>
 800e65c:	4602      	mov	r2, r0
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e666:	d102      	bne.n	800e66e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e66c:	e058      	b.n	800e720 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e674:	f240 532a 	movw	r3, #1322	; 0x52a
 800e678:	4013      	ands	r3, r2
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d0d1      	beq.n	800e622 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e684:	f003 0308 	and.w	r3, r3, #8
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d005      	beq.n	800e698 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2208      	movs	r2, #8
 800e692:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e694:	2308      	movs	r3, #8
 800e696:	e043      	b.n	800e720 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d005      	beq.n	800e6b2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	e036      	b.n	800e720 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	f003 0320 	and.w	r3, r3, #32
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2220      	movs	r2, #32
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e6c8:	2320      	movs	r3, #32
 800e6ca:	e029      	b.n	800e720 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a15      	ldr	r2, [pc, #84]	; (800e728 <SD_FindSCR+0x19c>)
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	061a      	lsls	r2, r3, #24
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	021b      	lsls	r3, r3, #8
 800e6dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	0a1b      	lsrs	r3, r3, #8
 800e6e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	0e1b      	lsrs	r3, r3, #24
 800e6f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	601a      	str	r2, [r3, #0]
    scr++;
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	061a      	lsls	r2, r3, #24
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	021b      	lsls	r3, r3, #8
 800e704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e708:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	0a1b      	lsrs	r3, r3, #8
 800e70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e712:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	0e1b      	lsrs	r3, r3, #24
 800e718:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3738      	adds	r7, #56	; 0x38
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	18000f3a 	.word	0x18000f3a

0800e72c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73e:	2b1f      	cmp	r3, #31
 800e740:	d936      	bls.n	800e7b0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e742:	2300      	movs	r3, #0
 800e744:	617b      	str	r3, [r7, #20]
 800e746:	e027      	b.n	800e798 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f003 f94d 	bl	80119ec <SDMMC_ReadFIFO>
 800e752:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	b2da      	uxtb	r2, r3
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	3301      	adds	r3, #1
 800e760:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	0a1b      	lsrs	r3, r3, #8
 800e766:	b2da      	uxtb	r2, r3
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	3301      	adds	r3, #1
 800e770:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	0c1b      	lsrs	r3, r3, #16
 800e776:	b2da      	uxtb	r2, r3
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	3301      	adds	r3, #1
 800e780:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	0e1b      	lsrs	r3, r3, #24
 800e786:	b2da      	uxtb	r2, r3
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	3301      	adds	r3, #1
 800e790:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	3301      	adds	r3, #1
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b07      	cmp	r3, #7
 800e79c:	d9d4      	bls.n	800e748 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a8:	f1a3 0220 	sub.w	r2, r3, #32
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	69db      	ldr	r3, [r3, #28]
 800e7c4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	2b1f      	cmp	r3, #31
 800e7cc:	d93a      	bls.n	800e844 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	e02b      	b.n	800e82c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	021a      	lsls	r2, r3, #8
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e7f2:	693b      	ldr	r3, [r7, #16]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	041a      	lsls	r2, r3, #16
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4313      	orrs	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	3301      	adds	r3, #1
 800e802:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	061a      	lsls	r2, r3, #24
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	4313      	orrs	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	3301      	adds	r3, #1
 800e814:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f107 020c 	add.w	r2, r7, #12
 800e81e:	4611      	mov	r1, r2
 800e820:	4618      	mov	r0, r3
 800e822:	f003 f8f0 	bl	8011a06 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	3301      	adds	r3, #1
 800e82a:	617b      	str	r3, [r7, #20]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b07      	cmp	r3, #7
 800e830:	d9d0      	bls.n	800e7d4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	f1a3 0220 	sub.w	r2, r3, #32
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	621a      	str	r2, [r3, #32]
  }
}
 800e844:	bf00      	nop
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e868:	bf00      	nop
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d101      	bne.n	800e8ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e10f      	b.n	800eace <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a87      	ldr	r2, [pc, #540]	; (800ead8 <HAL_SPI_Init+0x23c>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d00f      	beq.n	800e8de <HAL_SPI_Init+0x42>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a86      	ldr	r2, [pc, #536]	; (800eadc <HAL_SPI_Init+0x240>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d00a      	beq.n	800e8de <HAL_SPI_Init+0x42>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a84      	ldr	r2, [pc, #528]	; (800eae0 <HAL_SPI_Init+0x244>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d005      	beq.n	800e8de <HAL_SPI_Init+0x42>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	2b0f      	cmp	r3, #15
 800e8d8:	d901      	bls.n	800e8de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e0f7      	b.n	800eace <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fd5a 	bl	800f398 <SPI_GetPacketSize>
 800e8e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a7b      	ldr	r2, [pc, #492]	; (800ead8 <HAL_SPI_Init+0x23c>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d00c      	beq.n	800e90a <HAL_SPI_Init+0x6e>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a79      	ldr	r2, [pc, #484]	; (800eadc <HAL_SPI_Init+0x240>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d007      	beq.n	800e90a <HAL_SPI_Init+0x6e>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a78      	ldr	r2, [pc, #480]	; (800eae0 <HAL_SPI_Init+0x244>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d002      	beq.n	800e90a <HAL_SPI_Init+0x6e>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b08      	cmp	r3, #8
 800e908:	d811      	bhi.n	800e92e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e90e:	4a72      	ldr	r2, [pc, #456]	; (800ead8 <HAL_SPI_Init+0x23c>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d009      	beq.n	800e928 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a70      	ldr	r2, [pc, #448]	; (800eadc <HAL_SPI_Init+0x240>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d004      	beq.n	800e928 <HAL_SPI_Init+0x8c>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a6f      	ldr	r2, [pc, #444]	; (800eae0 <HAL_SPI_Init+0x244>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d104      	bne.n	800e932 <HAL_SPI_Init+0x96>
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b10      	cmp	r3, #16
 800e92c:	d901      	bls.n	800e932 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	e0cd      	b.n	800eace <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d106      	bne.n	800e94c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f7f4 fa02 	bl	8002d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2202      	movs	r2, #2
 800e950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f022 0201 	bic.w	r2, r2, #1
 800e962:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e96e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e978:	d119      	bne.n	800e9ae <HAL_SPI_Init+0x112>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e982:	d103      	bne.n	800e98c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d008      	beq.n	800e99e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10c      	bne.n	800e9ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e99c:	d107      	bne.n	800e9ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00f      	beq.n	800e9da <HAL_SPI_Init+0x13e>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	2b06      	cmp	r3, #6
 800e9c0:	d90b      	bls.n	800e9da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	430a      	orrs	r2, r1
 800e9d6:	601a      	str	r2, [r3, #0]
 800e9d8:	e007      	b.n	800e9ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e9e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69da      	ldr	r2, [r3, #28]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	431a      	orrs	r2, r3
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	431a      	orrs	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fc:	ea42 0103 	orr.w	r1, r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68da      	ldr	r2, [r3, #12]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	430a      	orrs	r2, r1
 800ea0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea14:	431a      	orrs	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	431a      	orrs	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	691b      	ldr	r3, [r3, #16]
 800ea26:	431a      	orrs	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	695b      	ldr	r3, [r3, #20]
 800ea2c:	431a      	orrs	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	431a      	orrs	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	431a      	orrs	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea3e:	431a      	orrs	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	431a      	orrs	r2, r3
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea4a:	ea42 0103 	orr.w	r1, r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	430a      	orrs	r2, r1
 800ea58:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d113      	bne.n	800ea8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f022 0201 	bic.w	r2, r2, #1
 800ea98:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00a      	beq.n	800eabc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	430a      	orrs	r2, r1
 800eaba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eacc:	2300      	movs	r3, #0
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	40013000 	.word	0x40013000
 800eadc:	40003800 	.word	0x40003800
 800eae0:	40003c00 	.word	0x40003c00

0800eae4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	af02      	add	r7, sp, #8
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3320      	adds	r3, #32
 800eafa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eafc:	2300      	movs	r3, #0
 800eafe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d101      	bne.n	800eb0e <HAL_SPI_Transmit+0x2a>
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	e1e1      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb16:	f7f4 ff93 	bl	8003a40 <HAL_GetTick>
 800eb1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d007      	beq.n	800eb38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb28:	2302      	movs	r3, #2
 800eb2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb34:	7efb      	ldrb	r3, [r7, #27]
 800eb36:	e1cc      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <HAL_SPI_Transmit+0x60>
 800eb3e:	88fb      	ldrh	r3, [r7, #6]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d107      	bne.n	800eb54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb50:	7efb      	ldrb	r3, [r7, #27]
 800eb52:	e1be      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2203      	movs	r2, #3
 800eb58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	88fa      	ldrh	r2, [r7, #6]
 800eb6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	88fa      	ldrh	r2, [r7, #6]
 800eb76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eba4:	d108      	bne.n	800ebb8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	e009      	b.n	800ebcc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	4b96      	ldr	r3, [pc, #600]	; (800ee2c <HAL_SPI_Transmit+0x348>)
 800ebd4:	4013      	ands	r3, r2
 800ebd6:	88f9      	ldrh	r1, [r7, #6]
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	6812      	ldr	r2, [r2, #0]
 800ebdc:	430b      	orrs	r3, r1
 800ebde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f042 0201 	orr.w	r2, r2, #1
 800ebee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebf8:	d107      	bne.n	800ec0a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	681a      	ldr	r2, [r3, #0]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	2b0f      	cmp	r3, #15
 800ec10:	d947      	bls.n	800eca2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec12:	e03f      	b.n	800ec94 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	f003 0302 	and.w	r3, r3, #2
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d114      	bne.n	800ec4c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6812      	ldr	r2, [r2, #0]
 800ec2c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec32:	1d1a      	adds	r2, r3, #4
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	3b01      	subs	r3, #1
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec4a:	e023      	b.n	800ec94 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec4c:	f7f4 fef8 	bl	8003a40 <HAL_GetTick>
 800ec50:	4602      	mov	r2, r0
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d803      	bhi.n	800ec64 <HAL_SPI_Transmit+0x180>
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d102      	bne.n	800ec6a <HAL_SPI_Transmit+0x186>
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d114      	bne.n	800ec94 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	f000 fac6 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec90:	2303      	movs	r3, #3
 800ec92:	e11e      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1b9      	bne.n	800ec14 <HAL_SPI_Transmit+0x130>
 800eca0:	e0f1      	b.n	800ee86 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	f240 80e6 	bls.w	800ee78 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecac:	e05d      	b.n	800ed6a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	f003 0302 	and.w	r3, r3, #2
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d132      	bne.n	800ed22 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d918      	bls.n	800ecfa <HAL_SPI_Transmit+0x216>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d014      	beq.n	800ecfa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6812      	ldr	r2, [r2, #0]
 800ecda:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ece0:	1d1a      	adds	r2, r3, #4
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	3b02      	subs	r3, #2
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecf8:	e037      	b.n	800ed6a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecfe:	881a      	ldrh	r2, [r3, #0]
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed08:	1c9a      	adds	r2, r3, #2
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	3b01      	subs	r3, #1
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed20:	e023      	b.n	800ed6a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed22:	f7f4 fe8d 	bl	8003a40 <HAL_GetTick>
 800ed26:	4602      	mov	r2, r0
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d803      	bhi.n	800ed3a <HAL_SPI_Transmit+0x256>
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed38:	d102      	bne.n	800ed40 <HAL_SPI_Transmit+0x25c>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d114      	bne.n	800ed6a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f000 fa5b 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed66:	2303      	movs	r3, #3
 800ed68:	e0b3      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d19b      	bne.n	800ecae <HAL_SPI_Transmit+0x1ca>
 800ed76:	e086      	b.n	800ee86 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	f003 0302 	and.w	r3, r3, #2
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d154      	bne.n	800ee30 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d918      	bls.n	800edc4 <HAL_SPI_Transmit+0x2e0>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed96:	2b40      	cmp	r3, #64	; 0x40
 800ed98:	d914      	bls.n	800edc4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6812      	ldr	r2, [r2, #0]
 800eda4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edaa:	1d1a      	adds	r2, r3, #4
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3b04      	subs	r3, #4
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edc2:	e059      	b.n	800ee78 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edca:	b29b      	uxth	r3, r3
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d917      	bls.n	800ee00 <HAL_SPI_Transmit+0x31c>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d013      	beq.n	800ee00 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eddc:	881a      	ldrh	r2, [r3, #0]
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ede6:	1c9a      	adds	r2, r3, #2
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	3b02      	subs	r3, #2
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edfe:	e03b      	b.n	800ee78 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3320      	adds	r3, #32
 800ee0a:	7812      	ldrb	r2, [r2, #0]
 800ee0c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee2a:	e025      	b.n	800ee78 <HAL_SPI_Transmit+0x394>
 800ee2c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee30:	f7f4 fe06 	bl	8003a40 <HAL_GetTick>
 800ee34:	4602      	mov	r2, r0
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d803      	bhi.n	800ee48 <HAL_SPI_Transmit+0x364>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee46:	d102      	bne.n	800ee4e <HAL_SPI_Transmit+0x36a>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d114      	bne.n	800ee78 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f000 f9d4 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2201      	movs	r2, #1
 800ee70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e02c      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f47f af79 	bne.w	800ed78 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	2108      	movs	r1, #8
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f000 fa53 	bl	800f33c <SPI_WaitOnFlagUntilTimeout>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d007      	beq.n	800eeac <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eea2:	f043 0220 	orr.w	r2, r3, #32
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 f9a5 	bl	800f1fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800eecc:	2301      	movs	r3, #1
 800eece:	e000      	b.n	800eed2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800eed0:	7efb      	ldrb	r3, [r7, #27]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3720      	adds	r7, #32
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop

0800eedc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b088      	sub	sp, #32
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	603b      	str	r3, [r7, #0]
 800eee8:	4613      	mov	r3, r2
 800eeea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eeec:	2300      	movs	r3, #0
 800eeee:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3330      	adds	r3, #48	; 0x30
 800eef6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d101      	bne.n	800ef06 <HAL_SPI_Receive+0x2a>
 800ef02:	2302      	movs	r3, #2
 800ef04:	e173      	b.n	800f1ee <HAL_SPI_Receive+0x312>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef0e:	f7f4 fd97 	bl	8003a40 <HAL_GetTick>
 800ef12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d007      	beq.n	800ef30 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef20:	2302      	movs	r3, #2
 800ef22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef2c:	7ffb      	ldrb	r3, [r7, #31]
 800ef2e:	e15e      	b.n	800f1ee <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <HAL_SPI_Receive+0x60>
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d107      	bne.n	800ef4c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef48:	7ffb      	ldrb	r3, [r7, #31]
 800ef4a:	e150      	b.n	800f1ee <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2204      	movs	r2, #4
 800ef50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	88fa      	ldrh	r2, [r7, #6]
 800ef66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	88fa      	ldrh	r2, [r7, #6]
 800ef6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2200      	movs	r2, #0
 800ef92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ef9c:	d108      	bne.n	800efb0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	e009      	b.n	800efc4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800efc2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	4b8b      	ldr	r3, [pc, #556]	; (800f1f8 <HAL_SPI_Receive+0x31c>)
 800efcc:	4013      	ands	r3, r2
 800efce:	88f9      	ldrh	r1, [r7, #6]
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	6812      	ldr	r2, [r2, #0]
 800efd4:	430b      	orrs	r3, r1
 800efd6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f042 0201 	orr.w	r2, r2, #1
 800efe6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eff0:	d107      	bne.n	800f002 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f000:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	2b0f      	cmp	r3, #15
 800f008:	d948      	bls.n	800f09c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f00a:	e040      	b.n	800f08e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	695a      	ldr	r2, [r3, #20]
 800f012:	f248 0308 	movw	r3, #32776	; 0x8008
 800f016:	4013      	ands	r3, r2
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d014      	beq.n	800f046 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f024:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f026:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f02c:	1d1a      	adds	r2, r3, #4
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f038:	b29b      	uxth	r3, r3
 800f03a:	3b01      	subs	r3, #1
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f044:	e023      	b.n	800f08e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f046:	f7f4 fcfb 	bl	8003a40 <HAL_GetTick>
 800f04a:	4602      	mov	r2, r0
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	683a      	ldr	r2, [r7, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d803      	bhi.n	800f05e <HAL_SPI_Receive+0x182>
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05c:	d102      	bne.n	800f064 <HAL_SPI_Receive+0x188>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d114      	bne.n	800f08e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 f8c9 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2200      	movs	r2, #0
 800f06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2201      	movs	r2, #1
 800f086:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	e0af      	b.n	800f1ee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f094:	b29b      	uxth	r3, r3
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1b8      	bne.n	800f00c <HAL_SPI_Receive+0x130>
 800f09a:	e095      	b.n	800f1c8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	2b07      	cmp	r3, #7
 800f0a2:	f240 808b 	bls.w	800f1bc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0a6:	e03f      	b.n	800f128 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	f003 0301 	and.w	r3, r3, #1
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d114      	bne.n	800f0e0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ba:	69ba      	ldr	r2, [r7, #24]
 800f0bc:	8812      	ldrh	r2, [r2, #0]
 800f0be:	b292      	uxth	r2, r2
 800f0c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0c6:	1c9a      	adds	r2, r3, #2
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0de:	e023      	b.n	800f128 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0e0:	f7f4 fcae 	bl	8003a40 <HAL_GetTick>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	683a      	ldr	r2, [r7, #0]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d803      	bhi.n	800f0f8 <HAL_SPI_Receive+0x21c>
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f6:	d102      	bne.n	800f0fe <HAL_SPI_Receive+0x222>
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d114      	bne.n	800f128 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0fe:	68f8      	ldr	r0, [r7, #12]
 800f100:	f000 f87c 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	e062      	b.n	800f1ee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1b9      	bne.n	800f0a8 <HAL_SPI_Receive+0x1cc>
 800f134:	e048      	b.n	800f1c8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	695b      	ldr	r3, [r3, #20]
 800f13c:	f003 0301 	and.w	r3, r3, #1
 800f140:	2b01      	cmp	r3, #1
 800f142:	d117      	bne.n	800f174 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f150:	7812      	ldrb	r2, [r2, #0]
 800f152:	b2d2      	uxtb	r2, r2
 800f154:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f15a:	1c5a      	adds	r2, r3, #1
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f166:	b29b      	uxth	r3, r3
 800f168:	3b01      	subs	r3, #1
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f172:	e023      	b.n	800f1bc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f174:	f7f4 fc64 	bl	8003a40 <HAL_GetTick>
 800f178:	4602      	mov	r2, r0
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	429a      	cmp	r2, r3
 800f182:	d803      	bhi.n	800f18c <HAL_SPI_Receive+0x2b0>
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f18a:	d102      	bne.n	800f192 <HAL_SPI_Receive+0x2b6>
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d114      	bne.n	800f1bc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f192:	68f8      	ldr	r0, [r7, #12]
 800f194:	f000 f832 	bl	800f1fc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1b8:	2303      	movs	r3, #3
 800f1ba:	e018      	b.n	800f1ee <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1b6      	bne.n	800f136 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 f817 	bl	800f1fc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e000      	b.n	800f1ee <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f1ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3720      	adds	r7, #32
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	ffff0000 	.word	0xffff0000

0800f1fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	699a      	ldr	r2, [r3, #24]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0208 	orr.w	r2, r2, #8
 800f21a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699a      	ldr	r2, [r3, #24]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f042 0210 	orr.w	r2, r2, #16
 800f22a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f022 0201 	bic.w	r2, r2, #1
 800f23a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6919      	ldr	r1, [r3, #16]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	4b3c      	ldr	r3, [pc, #240]	; (800f338 <SPI_CloseTransfer+0x13c>)
 800f248:	400b      	ands	r3, r1
 800f24a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	689a      	ldr	r2, [r3, #8]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f25a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f262:	b2db      	uxtb	r3, r3
 800f264:	2b04      	cmp	r3, #4
 800f266:	d014      	beq.n	800f292 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f003 0320 	and.w	r3, r3, #32
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00f      	beq.n	800f292 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	699a      	ldr	r2, [r3, #24]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f042 0220 	orr.w	r2, r2, #32
 800f290:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d014      	beq.n	800f2c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00f      	beq.n	800f2c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ae:	f043 0204 	orr.w	r2, r3, #4
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	699a      	ldr	r2, [r3, #24]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d00f      	beq.n	800f2f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2d8:	f043 0201 	orr.w	r2, r3, #1
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	699a      	ldr	r2, [r3, #24]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00f      	beq.n	800f31c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f302:	f043 0208 	orr.w	r2, r3, #8
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	699a      	ldr	r2, [r3, #24]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f31a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f32c:	bf00      	nop
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	fffffc90 	.word	0xfffffc90

0800f33c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	603b      	str	r3, [r7, #0]
 800f348:	4613      	mov	r3, r2
 800f34a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f34c:	e010      	b.n	800f370 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f34e:	f7f4 fb77 	bl	8003a40 <HAL_GetTick>
 800f352:	4602      	mov	r2, r0
 800f354:	69bb      	ldr	r3, [r7, #24]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d803      	bhi.n	800f366 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f364:	d102      	bne.n	800f36c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d101      	bne.n	800f370 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e00f      	b.n	800f390 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	695a      	ldr	r2, [r3, #20]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	4013      	ands	r3, r2
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	bf0c      	ite	eq
 800f380:	2301      	moveq	r3, #1
 800f382:	2300      	movne	r3, #0
 800f384:	b2db      	uxtb	r3, r3
 800f386:	461a      	mov	r2, r3
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d0df      	beq.n	800f34e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f398:	b480      	push	{r7}
 800f39a:	b085      	sub	sp, #20
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3a4:	095b      	lsrs	r3, r3, #5
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	3307      	adds	r3, #7
 800f3b6:	08db      	lsrs	r3, r3, #3
 800f3b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	fb02 f303 	mul.w	r3, r2, r3
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr

0800f3ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f3ce:	b580      	push	{r7, lr}
 800f3d0:	b082      	sub	sp, #8
 800f3d2:	af00      	add	r7, sp, #0
 800f3d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d101      	bne.n	800f3e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e049      	b.n	800f474 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d106      	bne.n	800f3fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7f3 fefd 	bl	80031f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3304      	adds	r3, #4
 800f40a:	4619      	mov	r1, r3
 800f40c:	4610      	mov	r0, r2
 800f40e:	f000 fc8d 	bl	800fd2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2201      	movs	r2, #1
 800f41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2201      	movs	r2, #1
 800f426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2201      	movs	r2, #1
 800f42e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f472:	2300      	movs	r3, #0
}
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d001      	beq.n	800f494 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	e056      	b.n	800f542 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2202      	movs	r2, #2
 800f498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a2b      	ldr	r2, [pc, #172]	; (800f550 <HAL_TIM_Base_Start+0xd4>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d02c      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4ae:	d027      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a27      	ldr	r2, [pc, #156]	; (800f554 <HAL_TIM_Base_Start+0xd8>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d022      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a26      	ldr	r2, [pc, #152]	; (800f558 <HAL_TIM_Base_Start+0xdc>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d01d      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a24      	ldr	r2, [pc, #144]	; (800f55c <HAL_TIM_Base_Start+0xe0>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d018      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a23      	ldr	r2, [pc, #140]	; (800f560 <HAL_TIM_Base_Start+0xe4>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d013      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a21      	ldr	r2, [pc, #132]	; (800f564 <HAL_TIM_Base_Start+0xe8>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d00e      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a20      	ldr	r2, [pc, #128]	; (800f568 <HAL_TIM_Base_Start+0xec>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d009      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4a1e      	ldr	r2, [pc, #120]	; (800f56c <HAL_TIM_Base_Start+0xf0>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d004      	beq.n	800f500 <HAL_TIM_Base_Start+0x84>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a1d      	ldr	r2, [pc, #116]	; (800f570 <HAL_TIM_Base_Start+0xf4>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d115      	bne.n	800f52c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689a      	ldr	r2, [r3, #8]
 800f506:	4b1b      	ldr	r3, [pc, #108]	; (800f574 <HAL_TIM_Base_Start+0xf8>)
 800f508:	4013      	ands	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b06      	cmp	r3, #6
 800f510:	d015      	beq.n	800f53e <HAL_TIM_Base_Start+0xc2>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f518:	d011      	beq.n	800f53e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	f042 0201 	orr.w	r2, r2, #1
 800f528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f52a:	e008      	b.n	800f53e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f042 0201 	orr.w	r2, r2, #1
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	e000      	b.n	800f540 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f53e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	40010000 	.word	0x40010000
 800f554:	40000400 	.word	0x40000400
 800f558:	40000800 	.word	0x40000800
 800f55c:	40000c00 	.word	0x40000c00
 800f560:	40010400 	.word	0x40010400
 800f564:	40001800 	.word	0x40001800
 800f568:	40014000 	.word	0x40014000
 800f56c:	4000e000 	.word	0x4000e000
 800f570:	4000e400 	.word	0x4000e400
 800f574:	00010007 	.word	0x00010007

0800f578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d101      	bne.n	800f58a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f586:	2301      	movs	r3, #1
 800f588:	e049      	b.n	800f61e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f590:	b2db      	uxtb	r3, r3
 800f592:	2b00      	cmp	r3, #0
 800f594:	d106      	bne.n	800f5a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7f3 fc92 	bl	8002ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2202      	movs	r2, #2
 800f5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	f000 fbb8 	bl	800fd2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d109      	bne.n	800f64c <HAL_TIM_PWM_Start+0x24>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	2b01      	cmp	r3, #1
 800f642:	bf14      	ite	ne
 800f644:	2301      	movne	r3, #1
 800f646:	2300      	moveq	r3, #0
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	e03c      	b.n	800f6c6 <HAL_TIM_PWM_Start+0x9e>
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	2b04      	cmp	r3, #4
 800f650:	d109      	bne.n	800f666 <HAL_TIM_PWM_Start+0x3e>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	bf14      	ite	ne
 800f65e:	2301      	movne	r3, #1
 800f660:	2300      	moveq	r3, #0
 800f662:	b2db      	uxtb	r3, r3
 800f664:	e02f      	b.n	800f6c6 <HAL_TIM_PWM_Start+0x9e>
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	2b08      	cmp	r3, #8
 800f66a:	d109      	bne.n	800f680 <HAL_TIM_PWM_Start+0x58>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b01      	cmp	r3, #1
 800f676:	bf14      	ite	ne
 800f678:	2301      	movne	r3, #1
 800f67a:	2300      	moveq	r3, #0
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	e022      	b.n	800f6c6 <HAL_TIM_PWM_Start+0x9e>
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	2b0c      	cmp	r3, #12
 800f684:	d109      	bne.n	800f69a <HAL_TIM_PWM_Start+0x72>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	2b01      	cmp	r3, #1
 800f690:	bf14      	ite	ne
 800f692:	2301      	movne	r3, #1
 800f694:	2300      	moveq	r3, #0
 800f696:	b2db      	uxtb	r3, r3
 800f698:	e015      	b.n	800f6c6 <HAL_TIM_PWM_Start+0x9e>
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b10      	cmp	r3, #16
 800f69e:	d109      	bne.n	800f6b4 <HAL_TIM_PWM_Start+0x8c>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	bf14      	ite	ne
 800f6ac:	2301      	movne	r3, #1
 800f6ae:	2300      	moveq	r3, #0
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	e008      	b.n	800f6c6 <HAL_TIM_PWM_Start+0x9e>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	bf14      	ite	ne
 800f6c0:	2301      	movne	r3, #1
 800f6c2:	2300      	moveq	r3, #0
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e0ab      	b.n	800f826 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d104      	bne.n	800f6de <HAL_TIM_PWM_Start+0xb6>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f6dc:	e023      	b.n	800f726 <HAL_TIM_PWM_Start+0xfe>
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	2b04      	cmp	r3, #4
 800f6e2:	d104      	bne.n	800f6ee <HAL_TIM_PWM_Start+0xc6>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f6ec:	e01b      	b.n	800f726 <HAL_TIM_PWM_Start+0xfe>
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	2b08      	cmp	r3, #8
 800f6f2:	d104      	bne.n	800f6fe <HAL_TIM_PWM_Start+0xd6>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f6fc:	e013      	b.n	800f726 <HAL_TIM_PWM_Start+0xfe>
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	2b0c      	cmp	r3, #12
 800f702:	d104      	bne.n	800f70e <HAL_TIM_PWM_Start+0xe6>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2202      	movs	r2, #2
 800f708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f70c:	e00b      	b.n	800f726 <HAL_TIM_PWM_Start+0xfe>
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	2b10      	cmp	r3, #16
 800f712:	d104      	bne.n	800f71e <HAL_TIM_PWM_Start+0xf6>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2202      	movs	r2, #2
 800f718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f71c:	e003      	b.n	800f726 <HAL_TIM_PWM_Start+0xfe>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2202      	movs	r2, #2
 800f722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2201      	movs	r2, #1
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 fe78 	bl	8010424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a3d      	ldr	r2, [pc, #244]	; (800f830 <HAL_TIM_PWM_Start+0x208>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d013      	beq.n	800f766 <HAL_TIM_PWM_Start+0x13e>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a3c      	ldr	r2, [pc, #240]	; (800f834 <HAL_TIM_PWM_Start+0x20c>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d00e      	beq.n	800f766 <HAL_TIM_PWM_Start+0x13e>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a3a      	ldr	r2, [pc, #232]	; (800f838 <HAL_TIM_PWM_Start+0x210>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d009      	beq.n	800f766 <HAL_TIM_PWM_Start+0x13e>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a39      	ldr	r2, [pc, #228]	; (800f83c <HAL_TIM_PWM_Start+0x214>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d004      	beq.n	800f766 <HAL_TIM_PWM_Start+0x13e>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a37      	ldr	r2, [pc, #220]	; (800f840 <HAL_TIM_PWM_Start+0x218>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d101      	bne.n	800f76a <HAL_TIM_PWM_Start+0x142>
 800f766:	2301      	movs	r3, #1
 800f768:	e000      	b.n	800f76c <HAL_TIM_PWM_Start+0x144>
 800f76a:	2300      	movs	r3, #0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d007      	beq.n	800f780 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f77e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a2a      	ldr	r2, [pc, #168]	; (800f830 <HAL_TIM_PWM_Start+0x208>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d02c      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f792:	d027      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a2a      	ldr	r2, [pc, #168]	; (800f844 <HAL_TIM_PWM_Start+0x21c>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d022      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a29      	ldr	r2, [pc, #164]	; (800f848 <HAL_TIM_PWM_Start+0x220>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d01d      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	4a27      	ldr	r2, [pc, #156]	; (800f84c <HAL_TIM_PWM_Start+0x224>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d018      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	4a1f      	ldr	r2, [pc, #124]	; (800f834 <HAL_TIM_PWM_Start+0x20c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d013      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4a23      	ldr	r2, [pc, #140]	; (800f850 <HAL_TIM_PWM_Start+0x228>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d00e      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a1b      	ldr	r2, [pc, #108]	; (800f838 <HAL_TIM_PWM_Start+0x210>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d009      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a1f      	ldr	r2, [pc, #124]	; (800f854 <HAL_TIM_PWM_Start+0x22c>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d004      	beq.n	800f7e4 <HAL_TIM_PWM_Start+0x1bc>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a1e      	ldr	r2, [pc, #120]	; (800f858 <HAL_TIM_PWM_Start+0x230>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d115      	bne.n	800f810 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689a      	ldr	r2, [r3, #8]
 800f7ea:	4b1c      	ldr	r3, [pc, #112]	; (800f85c <HAL_TIM_PWM_Start+0x234>)
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2b06      	cmp	r3, #6
 800f7f4:	d015      	beq.n	800f822 <HAL_TIM_PWM_Start+0x1fa>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7fc:	d011      	beq.n	800f822 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f042 0201 	orr.w	r2, r2, #1
 800f80c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f80e:	e008      	b.n	800f822 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f042 0201 	orr.w	r2, r2, #1
 800f81e:	601a      	str	r2, [r3, #0]
 800f820:	e000      	b.n	800f824 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	40010000 	.word	0x40010000
 800f834:	40010400 	.word	0x40010400
 800f838:	40014000 	.word	0x40014000
 800f83c:	40014400 	.word	0x40014400
 800f840:	40014800 	.word	0x40014800
 800f844:	40000400 	.word	0x40000400
 800f848:	40000800 	.word	0x40000800
 800f84c:	40000c00 	.word	0x40000c00
 800f850:	40001800 	.word	0x40001800
 800f854:	4000e000 	.word	0x4000e000
 800f858:	4000e400 	.word	0x4000e400
 800f85c:	00010007 	.word	0x00010007

0800f860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	691b      	ldr	r3, [r3, #16]
 800f86e:	f003 0302 	and.w	r3, r3, #2
 800f872:	2b02      	cmp	r3, #2
 800f874:	d122      	bne.n	800f8bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	68db      	ldr	r3, [r3, #12]
 800f87c:	f003 0302 	and.w	r3, r3, #2
 800f880:	2b02      	cmp	r3, #2
 800f882:	d11b      	bne.n	800f8bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f06f 0202 	mvn.w	r2, #2
 800f88c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2201      	movs	r2, #1
 800f892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	f003 0303 	and.w	r3, r3, #3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d003      	beq.n	800f8aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fa24 	bl	800fcf0 <HAL_TIM_IC_CaptureCallback>
 800f8a8:	e005      	b.n	800f8b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fa16 	bl	800fcdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 fa27 	bl	800fd04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	f003 0304 	and.w	r3, r3, #4
 800f8c6:	2b04      	cmp	r3, #4
 800f8c8:	d122      	bne.n	800f910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	f003 0304 	and.w	r3, r3, #4
 800f8d4:	2b04      	cmp	r3, #4
 800f8d6:	d11b      	bne.n	800f910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f06f 0204 	mvn.w	r2, #4
 800f8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d003      	beq.n	800f8fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f9fa 	bl	800fcf0 <HAL_TIM_IC_CaptureCallback>
 800f8fc:	e005      	b.n	800f90a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 f9ec 	bl	800fcdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f9fd 	bl	800fd04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	f003 0308 	and.w	r3, r3, #8
 800f91a:	2b08      	cmp	r3, #8
 800f91c:	d122      	bne.n	800f964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	f003 0308 	and.w	r3, r3, #8
 800f928:	2b08      	cmp	r3, #8
 800f92a:	d11b      	bne.n	800f964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f06f 0208 	mvn.w	r2, #8
 800f934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2204      	movs	r2, #4
 800f93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	f003 0303 	and.w	r3, r3, #3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d003      	beq.n	800f952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f9d0 	bl	800fcf0 <HAL_TIM_IC_CaptureCallback>
 800f950:	e005      	b.n	800f95e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 f9c2 	bl	800fcdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f9d3 	bl	800fd04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	f003 0310 	and.w	r3, r3, #16
 800f96e:	2b10      	cmp	r3, #16
 800f970:	d122      	bne.n	800f9b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	f003 0310 	and.w	r3, r3, #16
 800f97c:	2b10      	cmp	r3, #16
 800f97e:	d11b      	bne.n	800f9b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	f06f 0210 	mvn.w	r2, #16
 800f988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2208      	movs	r2, #8
 800f98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d003      	beq.n	800f9a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f9a6 	bl	800fcf0 <HAL_TIM_IC_CaptureCallback>
 800f9a4:	e005      	b.n	800f9b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f998 	bl	800fcdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f9a9 	bl	800fd04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	f003 0301 	and.w	r3, r3, #1
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d10e      	bne.n	800f9e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	f003 0301 	and.w	r3, r3, #1
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d107      	bne.n	800f9e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f06f 0201 	mvn.w	r2, #1
 800f9dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f972 	bl	800fcc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ee:	2b80      	cmp	r3, #128	; 0x80
 800f9f0:	d10e      	bne.n	800fa10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9fc:	2b80      	cmp	r3, #128	; 0x80
 800f9fe:	d107      	bne.n	800fa10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 fdd6 	bl	80105bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa1e:	d10e      	bne.n	800fa3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa2a:	2b80      	cmp	r3, #128	; 0x80
 800fa2c:	d107      	bne.n	800fa3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fa36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fdc9 	bl	80105d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa48:	2b40      	cmp	r3, #64	; 0x40
 800fa4a:	d10e      	bne.n	800fa6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa56:	2b40      	cmp	r3, #64	; 0x40
 800fa58:	d107      	bne.n	800fa6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fa62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f957 	bl	800fd18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	691b      	ldr	r3, [r3, #16]
 800fa70:	f003 0320 	and.w	r3, r3, #32
 800fa74:	2b20      	cmp	r3, #32
 800fa76:	d10e      	bne.n	800fa96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	f003 0320 	and.w	r3, r3, #32
 800fa82:	2b20      	cmp	r3, #32
 800fa84:	d107      	bne.n	800fa96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f06f 0220 	mvn.w	r2, #32
 800fa8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 fd89 	bl	80105a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa96:	bf00      	nop
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
	...

0800faa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800faac:	2300      	movs	r3, #0
 800faae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d101      	bne.n	800fabe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800faba:	2302      	movs	r3, #2
 800fabc:	e0ff      	b.n	800fcbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b14      	cmp	r3, #20
 800faca:	f200 80f0 	bhi.w	800fcae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800face:	a201      	add	r2, pc, #4	; (adr r2, 800fad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad4:	0800fb29 	.word	0x0800fb29
 800fad8:	0800fcaf 	.word	0x0800fcaf
 800fadc:	0800fcaf 	.word	0x0800fcaf
 800fae0:	0800fcaf 	.word	0x0800fcaf
 800fae4:	0800fb69 	.word	0x0800fb69
 800fae8:	0800fcaf 	.word	0x0800fcaf
 800faec:	0800fcaf 	.word	0x0800fcaf
 800faf0:	0800fcaf 	.word	0x0800fcaf
 800faf4:	0800fbab 	.word	0x0800fbab
 800faf8:	0800fcaf 	.word	0x0800fcaf
 800fafc:	0800fcaf 	.word	0x0800fcaf
 800fb00:	0800fcaf 	.word	0x0800fcaf
 800fb04:	0800fbeb 	.word	0x0800fbeb
 800fb08:	0800fcaf 	.word	0x0800fcaf
 800fb0c:	0800fcaf 	.word	0x0800fcaf
 800fb10:	0800fcaf 	.word	0x0800fcaf
 800fb14:	0800fc2d 	.word	0x0800fc2d
 800fb18:	0800fcaf 	.word	0x0800fcaf
 800fb1c:	0800fcaf 	.word	0x0800fcaf
 800fb20:	0800fcaf 	.word	0x0800fcaf
 800fb24:	0800fc6d 	.word	0x0800fc6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	68b9      	ldr	r1, [r7, #8]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 f9a2 	bl	800fe78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	699a      	ldr	r2, [r3, #24]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f042 0208 	orr.w	r2, r2, #8
 800fb42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f022 0204 	bic.w	r2, r2, #4
 800fb52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	6999      	ldr	r1, [r3, #24]
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	691a      	ldr	r2, [r3, #16]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	430a      	orrs	r2, r1
 800fb64:	619a      	str	r2, [r3, #24]
      break;
 800fb66:	e0a5      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	68b9      	ldr	r1, [r7, #8]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f000 fa12 	bl	800ff98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	699a      	ldr	r2, [r3, #24]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	699a      	ldr	r2, [r3, #24]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6999      	ldr	r1, [r3, #24]
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	691b      	ldr	r3, [r3, #16]
 800fb9e:	021a      	lsls	r2, r3, #8
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	430a      	orrs	r2, r1
 800fba6:	619a      	str	r2, [r3, #24]
      break;
 800fba8:	e084      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	68b9      	ldr	r1, [r7, #8]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f000 fa7b 	bl	80100ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	69da      	ldr	r2, [r3, #28]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f042 0208 	orr.w	r2, r2, #8
 800fbc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	69da      	ldr	r2, [r3, #28]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f022 0204 	bic.w	r2, r2, #4
 800fbd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	69d9      	ldr	r1, [r3, #28]
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	691a      	ldr	r2, [r3, #16]
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	430a      	orrs	r2, r1
 800fbe6:	61da      	str	r2, [r3, #28]
      break;
 800fbe8:	e064      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68b9      	ldr	r1, [r7, #8]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f000 fae3 	bl	80101bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	69da      	ldr	r2, [r3, #28]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	69da      	ldr	r2, [r3, #28]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	69d9      	ldr	r1, [r3, #28]
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	691b      	ldr	r3, [r3, #16]
 800fc20:	021a      	lsls	r2, r3, #8
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	430a      	orrs	r2, r1
 800fc28:	61da      	str	r2, [r3, #28]
      break;
 800fc2a:	e043      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 fb2c 	bl	8010290 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f042 0208 	orr.w	r2, r2, #8
 800fc46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f022 0204 	bic.w	r2, r2, #4
 800fc56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	691a      	ldr	r2, [r3, #16]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	430a      	orrs	r2, r1
 800fc68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fc6a:	e023      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68b9      	ldr	r1, [r7, #8]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f000 fb70 	bl	8010358 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	021a      	lsls	r2, r3, #8
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	430a      	orrs	r2, r1
 800fcaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fcac:	e002      	b.n	800fcb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	75fb      	strb	r3, [r7, #23]
      break;
 800fcb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fcbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	3718      	adds	r7, #24
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop

0800fcc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	4a44      	ldr	r2, [pc, #272]	; (800fe50 <TIM_Base_SetConfig+0x124>)
 800fd40:	4293      	cmp	r3, r2
 800fd42:	d013      	beq.n	800fd6c <TIM_Base_SetConfig+0x40>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd4a:	d00f      	beq.n	800fd6c <TIM_Base_SetConfig+0x40>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a41      	ldr	r2, [pc, #260]	; (800fe54 <TIM_Base_SetConfig+0x128>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d00b      	beq.n	800fd6c <TIM_Base_SetConfig+0x40>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a40      	ldr	r2, [pc, #256]	; (800fe58 <TIM_Base_SetConfig+0x12c>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d007      	beq.n	800fd6c <TIM_Base_SetConfig+0x40>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a3f      	ldr	r2, [pc, #252]	; (800fe5c <TIM_Base_SetConfig+0x130>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d003      	beq.n	800fd6c <TIM_Base_SetConfig+0x40>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a3e      	ldr	r2, [pc, #248]	; (800fe60 <TIM_Base_SetConfig+0x134>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d108      	bne.n	800fd7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	68fa      	ldr	r2, [r7, #12]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	4a33      	ldr	r2, [pc, #204]	; (800fe50 <TIM_Base_SetConfig+0x124>)
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d027      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd8c:	d023      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4a30      	ldr	r2, [pc, #192]	; (800fe54 <TIM_Base_SetConfig+0x128>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d01f      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4a2f      	ldr	r2, [pc, #188]	; (800fe58 <TIM_Base_SetConfig+0x12c>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d01b      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4a2e      	ldr	r2, [pc, #184]	; (800fe5c <TIM_Base_SetConfig+0x130>)
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d017      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4a2d      	ldr	r2, [pc, #180]	; (800fe60 <TIM_Base_SetConfig+0x134>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d013      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4a2c      	ldr	r2, [pc, #176]	; (800fe64 <TIM_Base_SetConfig+0x138>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d00f      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	4a2b      	ldr	r2, [pc, #172]	; (800fe68 <TIM_Base_SetConfig+0x13c>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d00b      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	4a2a      	ldr	r2, [pc, #168]	; (800fe6c <TIM_Base_SetConfig+0x140>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d007      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	4a29      	ldr	r2, [pc, #164]	; (800fe70 <TIM_Base_SetConfig+0x144>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d003      	beq.n	800fdd6 <TIM_Base_SetConfig+0xaa>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4a28      	ldr	r2, [pc, #160]	; (800fe74 <TIM_Base_SetConfig+0x148>)
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d108      	bne.n	800fde8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	4313      	orrs	r3, r2
 800fde6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	695b      	ldr	r3, [r3, #20]
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	689a      	ldr	r2, [r3, #8]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4a10      	ldr	r2, [pc, #64]	; (800fe50 <TIM_Base_SetConfig+0x124>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d00f      	beq.n	800fe34 <TIM_Base_SetConfig+0x108>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4a12      	ldr	r2, [pc, #72]	; (800fe60 <TIM_Base_SetConfig+0x134>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d00b      	beq.n	800fe34 <TIM_Base_SetConfig+0x108>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	4a11      	ldr	r2, [pc, #68]	; (800fe64 <TIM_Base_SetConfig+0x138>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d007      	beq.n	800fe34 <TIM_Base_SetConfig+0x108>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	4a10      	ldr	r2, [pc, #64]	; (800fe68 <TIM_Base_SetConfig+0x13c>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d003      	beq.n	800fe34 <TIM_Base_SetConfig+0x108>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4a0f      	ldr	r2, [pc, #60]	; (800fe6c <TIM_Base_SetConfig+0x140>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d103      	bne.n	800fe3c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	691a      	ldr	r2, [r3, #16]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	615a      	str	r2, [r3, #20]
}
 800fe42:	bf00      	nop
 800fe44:	3714      	adds	r7, #20
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	40010000 	.word	0x40010000
 800fe54:	40000400 	.word	0x40000400
 800fe58:	40000800 	.word	0x40000800
 800fe5c:	40000c00 	.word	0x40000c00
 800fe60:	40010400 	.word	0x40010400
 800fe64:	40014000 	.word	0x40014000
 800fe68:	40014400 	.word	0x40014400
 800fe6c:	40014800 	.word	0x40014800
 800fe70:	4000e000 	.word	0x4000e000
 800fe74:	4000e400 	.word	0x4000e400

0800fe78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6a1b      	ldr	r3, [r3, #32]
 800fe86:	f023 0201 	bic.w	r2, r3, #1
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a1b      	ldr	r3, [r3, #32]
 800fe92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	699b      	ldr	r3, [r3, #24]
 800fe9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	4b37      	ldr	r3, [pc, #220]	; (800ff80 <TIM_OC1_SetConfig+0x108>)
 800fea4:	4013      	ands	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f023 0303 	bic.w	r3, r3, #3
 800feae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	f023 0302 	bic.w	r3, r3, #2
 800fec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	697a      	ldr	r2, [r7, #20]
 800fec8:	4313      	orrs	r3, r2
 800feca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4a2d      	ldr	r2, [pc, #180]	; (800ff84 <TIM_OC1_SetConfig+0x10c>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d00f      	beq.n	800fef4 <TIM_OC1_SetConfig+0x7c>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4a2c      	ldr	r2, [pc, #176]	; (800ff88 <TIM_OC1_SetConfig+0x110>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d00b      	beq.n	800fef4 <TIM_OC1_SetConfig+0x7c>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4a2b      	ldr	r2, [pc, #172]	; (800ff8c <TIM_OC1_SetConfig+0x114>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d007      	beq.n	800fef4 <TIM_OC1_SetConfig+0x7c>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	4a2a      	ldr	r2, [pc, #168]	; (800ff90 <TIM_OC1_SetConfig+0x118>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d003      	beq.n	800fef4 <TIM_OC1_SetConfig+0x7c>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	4a29      	ldr	r2, [pc, #164]	; (800ff94 <TIM_OC1_SetConfig+0x11c>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d10c      	bne.n	800ff0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	f023 0308 	bic.w	r3, r3, #8
 800fefa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	697a      	ldr	r2, [r7, #20]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f023 0304 	bic.w	r3, r3, #4
 800ff0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4a1c      	ldr	r2, [pc, #112]	; (800ff84 <TIM_OC1_SetConfig+0x10c>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d00f      	beq.n	800ff36 <TIM_OC1_SetConfig+0xbe>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4a1b      	ldr	r2, [pc, #108]	; (800ff88 <TIM_OC1_SetConfig+0x110>)
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	d00b      	beq.n	800ff36 <TIM_OC1_SetConfig+0xbe>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4a1a      	ldr	r2, [pc, #104]	; (800ff8c <TIM_OC1_SetConfig+0x114>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d007      	beq.n	800ff36 <TIM_OC1_SetConfig+0xbe>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	4a19      	ldr	r2, [pc, #100]	; (800ff90 <TIM_OC1_SetConfig+0x118>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d003      	beq.n	800ff36 <TIM_OC1_SetConfig+0xbe>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4a18      	ldr	r2, [pc, #96]	; (800ff94 <TIM_OC1_SetConfig+0x11c>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d111      	bne.n	800ff5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	695b      	ldr	r3, [r3, #20]
 800ff4a:	693a      	ldr	r2, [r7, #16]
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	693a      	ldr	r2, [r7, #16]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	693a      	ldr	r2, [r7, #16]
 800ff5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	685a      	ldr	r2, [r3, #4]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	697a      	ldr	r2, [r7, #20]
 800ff72:	621a      	str	r2, [r3, #32]
}
 800ff74:	bf00      	nop
 800ff76:	371c      	adds	r7, #28
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	fffeff8f 	.word	0xfffeff8f
 800ff84:	40010000 	.word	0x40010000
 800ff88:	40010400 	.word	0x40010400
 800ff8c:	40014000 	.word	0x40014000
 800ff90:	40014400 	.word	0x40014400
 800ff94:	40014800 	.word	0x40014800

0800ff98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b087      	sub	sp, #28
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a1b      	ldr	r3, [r3, #32]
 800ffa6:	f023 0210 	bic.w	r2, r3, #16
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a1b      	ldr	r3, [r3, #32]
 800ffb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	699b      	ldr	r3, [r3, #24]
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	4b34      	ldr	r3, [pc, #208]	; (8010094 <TIM_OC2_SetConfig+0xfc>)
 800ffc4:	4013      	ands	r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ffce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	021b      	lsls	r3, r3, #8
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	f023 0320 	bic.w	r3, r3, #32
 800ffe2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	011b      	lsls	r3, r3, #4
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a29      	ldr	r2, [pc, #164]	; (8010098 <TIM_OC2_SetConfig+0x100>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d003      	beq.n	8010000 <TIM_OC2_SetConfig+0x68>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a28      	ldr	r2, [pc, #160]	; (801009c <TIM_OC2_SetConfig+0x104>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d10d      	bne.n	801001c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	011b      	lsls	r3, r3, #4
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	4313      	orrs	r3, r2
 8010012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801001a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a1e      	ldr	r2, [pc, #120]	; (8010098 <TIM_OC2_SetConfig+0x100>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d00f      	beq.n	8010044 <TIM_OC2_SetConfig+0xac>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a1d      	ldr	r2, [pc, #116]	; (801009c <TIM_OC2_SetConfig+0x104>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d00b      	beq.n	8010044 <TIM_OC2_SetConfig+0xac>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a1c      	ldr	r2, [pc, #112]	; (80100a0 <TIM_OC2_SetConfig+0x108>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d007      	beq.n	8010044 <TIM_OC2_SetConfig+0xac>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4a1b      	ldr	r2, [pc, #108]	; (80100a4 <TIM_OC2_SetConfig+0x10c>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d003      	beq.n	8010044 <TIM_OC2_SetConfig+0xac>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4a1a      	ldr	r2, [pc, #104]	; (80100a8 <TIM_OC2_SetConfig+0x110>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d113      	bne.n	801006c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801004a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	695b      	ldr	r3, [r3, #20]
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	693a      	ldr	r2, [r7, #16]
 801005c:	4313      	orrs	r3, r2
 801005e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	699b      	ldr	r3, [r3, #24]
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	693a      	ldr	r2, [r7, #16]
 8010068:	4313      	orrs	r3, r2
 801006a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	693a      	ldr	r2, [r7, #16]
 8010070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	685a      	ldr	r2, [r3, #4]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	697a      	ldr	r2, [r7, #20]
 8010084:	621a      	str	r2, [r3, #32]
}
 8010086:	bf00      	nop
 8010088:	371c      	adds	r7, #28
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	feff8fff 	.word	0xfeff8fff
 8010098:	40010000 	.word	0x40010000
 801009c:	40010400 	.word	0x40010400
 80100a0:	40014000 	.word	0x40014000
 80100a4:	40014400 	.word	0x40014400
 80100a8:	40014800 	.word	0x40014800

080100ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b087      	sub	sp, #28
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6a1b      	ldr	r3, [r3, #32]
 80100ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	69db      	ldr	r3, [r3, #28]
 80100d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4b33      	ldr	r3, [pc, #204]	; (80101a4 <TIM_OC3_SetConfig+0xf8>)
 80100d8:	4013      	ands	r3, r2
 80100da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f023 0303 	bic.w	r3, r3, #3
 80100e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80100e4:	683b      	ldr	r3, [r7, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	4313      	orrs	r3, r2
 80100ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	689b      	ldr	r3, [r3, #8]
 80100fa:	021b      	lsls	r3, r3, #8
 80100fc:	697a      	ldr	r2, [r7, #20]
 80100fe:	4313      	orrs	r3, r2
 8010100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4a28      	ldr	r2, [pc, #160]	; (80101a8 <TIM_OC3_SetConfig+0xfc>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d003      	beq.n	8010112 <TIM_OC3_SetConfig+0x66>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4a27      	ldr	r2, [pc, #156]	; (80101ac <TIM_OC3_SetConfig+0x100>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d10d      	bne.n	801012e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	021b      	lsls	r3, r3, #8
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	4313      	orrs	r3, r2
 8010124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801012c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4a1d      	ldr	r2, [pc, #116]	; (80101a8 <TIM_OC3_SetConfig+0xfc>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d00f      	beq.n	8010156 <TIM_OC3_SetConfig+0xaa>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4a1c      	ldr	r2, [pc, #112]	; (80101ac <TIM_OC3_SetConfig+0x100>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d00b      	beq.n	8010156 <TIM_OC3_SetConfig+0xaa>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a1b      	ldr	r2, [pc, #108]	; (80101b0 <TIM_OC3_SetConfig+0x104>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d007      	beq.n	8010156 <TIM_OC3_SetConfig+0xaa>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a1a      	ldr	r2, [pc, #104]	; (80101b4 <TIM_OC3_SetConfig+0x108>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d003      	beq.n	8010156 <TIM_OC3_SetConfig+0xaa>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	4a19      	ldr	r2, [pc, #100]	; (80101b8 <TIM_OC3_SetConfig+0x10c>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d113      	bne.n	801017e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801015c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	011b      	lsls	r3, r3, #4
 801016c:	693a      	ldr	r2, [r7, #16]
 801016e:	4313      	orrs	r3, r2
 8010170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	699b      	ldr	r3, [r3, #24]
 8010176:	011b      	lsls	r3, r3, #4
 8010178:	693a      	ldr	r2, [r7, #16]
 801017a:	4313      	orrs	r3, r2
 801017c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	693a      	ldr	r2, [r7, #16]
 8010182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	685a      	ldr	r2, [r3, #4]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	697a      	ldr	r2, [r7, #20]
 8010196:	621a      	str	r2, [r3, #32]
}
 8010198:	bf00      	nop
 801019a:	371c      	adds	r7, #28
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr
 80101a4:	fffeff8f 	.word	0xfffeff8f
 80101a8:	40010000 	.word	0x40010000
 80101ac:	40010400 	.word	0x40010400
 80101b0:	40014000 	.word	0x40014000
 80101b4:	40014400 	.word	0x40014400
 80101b8:	40014800 	.word	0x40014800

080101bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101bc:	b480      	push	{r7}
 80101be:	b087      	sub	sp, #28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6a1b      	ldr	r3, [r3, #32]
 80101d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	69db      	ldr	r3, [r3, #28]
 80101e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	4b24      	ldr	r3, [pc, #144]	; (8010278 <TIM_OC4_SetConfig+0xbc>)
 80101e8:	4013      	ands	r3, r2
 80101ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	021b      	lsls	r3, r3, #8
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	4313      	orrs	r3, r2
 80101fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	031b      	lsls	r3, r3, #12
 801020e:	693a      	ldr	r2, [r7, #16]
 8010210:	4313      	orrs	r3, r2
 8010212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a19      	ldr	r2, [pc, #100]	; (801027c <TIM_OC4_SetConfig+0xc0>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d00f      	beq.n	801023c <TIM_OC4_SetConfig+0x80>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a18      	ldr	r2, [pc, #96]	; (8010280 <TIM_OC4_SetConfig+0xc4>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d00b      	beq.n	801023c <TIM_OC4_SetConfig+0x80>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a17      	ldr	r2, [pc, #92]	; (8010284 <TIM_OC4_SetConfig+0xc8>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d007      	beq.n	801023c <TIM_OC4_SetConfig+0x80>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a16      	ldr	r2, [pc, #88]	; (8010288 <TIM_OC4_SetConfig+0xcc>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d003      	beq.n	801023c <TIM_OC4_SetConfig+0x80>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a15      	ldr	r2, [pc, #84]	; (801028c <TIM_OC4_SetConfig+0xd0>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d109      	bne.n	8010250 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	019b      	lsls	r3, r3, #6
 801024a:	697a      	ldr	r2, [r7, #20]
 801024c:	4313      	orrs	r3, r2
 801024e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	697a      	ldr	r2, [r7, #20]
 8010254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	693a      	ldr	r2, [r7, #16]
 8010268:	621a      	str	r2, [r3, #32]
}
 801026a:	bf00      	nop
 801026c:	371c      	adds	r7, #28
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	feff8fff 	.word	0xfeff8fff
 801027c:	40010000 	.word	0x40010000
 8010280:	40010400 	.word	0x40010400
 8010284:	40014000 	.word	0x40014000
 8010288:	40014400 	.word	0x40014400
 801028c:	40014800 	.word	0x40014800

08010290 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a1b      	ldr	r3, [r3, #32]
 80102aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4b21      	ldr	r3, [pc, #132]	; (8010340 <TIM_OC5_SetConfig+0xb0>)
 80102bc:	4013      	ands	r3, r2
 80102be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	4313      	orrs	r3, r2
 80102c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80102d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	041b      	lsls	r3, r3, #16
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	4313      	orrs	r3, r2
 80102dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4a18      	ldr	r2, [pc, #96]	; (8010344 <TIM_OC5_SetConfig+0xb4>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d00f      	beq.n	8010306 <TIM_OC5_SetConfig+0x76>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4a17      	ldr	r2, [pc, #92]	; (8010348 <TIM_OC5_SetConfig+0xb8>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d00b      	beq.n	8010306 <TIM_OC5_SetConfig+0x76>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a16      	ldr	r2, [pc, #88]	; (801034c <TIM_OC5_SetConfig+0xbc>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d007      	beq.n	8010306 <TIM_OC5_SetConfig+0x76>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a15      	ldr	r2, [pc, #84]	; (8010350 <TIM_OC5_SetConfig+0xc0>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d003      	beq.n	8010306 <TIM_OC5_SetConfig+0x76>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4a14      	ldr	r2, [pc, #80]	; (8010354 <TIM_OC5_SetConfig+0xc4>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d109      	bne.n	801031a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801030c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	021b      	lsls	r3, r3, #8
 8010314:	697a      	ldr	r2, [r7, #20]
 8010316:	4313      	orrs	r3, r2
 8010318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	697a      	ldr	r2, [r7, #20]
 801031e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	693a      	ldr	r2, [r7, #16]
 8010332:	621a      	str	r2, [r3, #32]
}
 8010334:	bf00      	nop
 8010336:	371c      	adds	r7, #28
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	fffeff8f 	.word	0xfffeff8f
 8010344:	40010000 	.word	0x40010000
 8010348:	40010400 	.word	0x40010400
 801034c:	40014000 	.word	0x40014000
 8010350:	40014400 	.word	0x40014400
 8010354:	40014800 	.word	0x40014800

08010358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010358:	b480      	push	{r7}
 801035a:	b087      	sub	sp, #28
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a1b      	ldr	r3, [r3, #32]
 8010366:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801037e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	4b22      	ldr	r3, [pc, #136]	; (801040c <TIM_OC6_SetConfig+0xb4>)
 8010384:	4013      	ands	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	021b      	lsls	r3, r3, #8
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	4313      	orrs	r3, r2
 8010392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801039a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	689b      	ldr	r3, [r3, #8]
 80103a0:	051b      	lsls	r3, r3, #20
 80103a2:	693a      	ldr	r2, [r7, #16]
 80103a4:	4313      	orrs	r3, r2
 80103a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a19      	ldr	r2, [pc, #100]	; (8010410 <TIM_OC6_SetConfig+0xb8>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d00f      	beq.n	80103d0 <TIM_OC6_SetConfig+0x78>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a18      	ldr	r2, [pc, #96]	; (8010414 <TIM_OC6_SetConfig+0xbc>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00b      	beq.n	80103d0 <TIM_OC6_SetConfig+0x78>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a17      	ldr	r2, [pc, #92]	; (8010418 <TIM_OC6_SetConfig+0xc0>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d007      	beq.n	80103d0 <TIM_OC6_SetConfig+0x78>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a16      	ldr	r2, [pc, #88]	; (801041c <TIM_OC6_SetConfig+0xc4>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d003      	beq.n	80103d0 <TIM_OC6_SetConfig+0x78>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a15      	ldr	r2, [pc, #84]	; (8010420 <TIM_OC6_SetConfig+0xc8>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d109      	bne.n	80103e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	695b      	ldr	r3, [r3, #20]
 80103dc:	029b      	lsls	r3, r3, #10
 80103de:	697a      	ldr	r2, [r7, #20]
 80103e0:	4313      	orrs	r3, r2
 80103e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	685a      	ldr	r2, [r3, #4]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	693a      	ldr	r2, [r7, #16]
 80103fc:	621a      	str	r2, [r3, #32]
}
 80103fe:	bf00      	nop
 8010400:	371c      	adds	r7, #28
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	feff8fff 	.word	0xfeff8fff
 8010410:	40010000 	.word	0x40010000
 8010414:	40010400 	.word	0x40010400
 8010418:	40014000 	.word	0x40014000
 801041c:	40014400 	.word	0x40014400
 8010420:	40014800 	.word	0x40014800

08010424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010424:	b480      	push	{r7}
 8010426:	b087      	sub	sp, #28
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f003 031f 	and.w	r3, r3, #31
 8010436:	2201      	movs	r2, #1
 8010438:	fa02 f303 	lsl.w	r3, r2, r3
 801043c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6a1a      	ldr	r2, [r3, #32]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	43db      	mvns	r3, r3
 8010446:	401a      	ands	r2, r3
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	6a1a      	ldr	r2, [r3, #32]
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	f003 031f 	and.w	r3, r3, #31
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	fa01 f303 	lsl.w	r3, r1, r3
 801045c:	431a      	orrs	r2, r3
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	621a      	str	r2, [r3, #32]
}
 8010462:	bf00      	nop
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
	...

08010470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010480:	2b01      	cmp	r3, #1
 8010482:	d101      	bne.n	8010488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010484:	2302      	movs	r3, #2
 8010486:	e077      	b.n	8010578 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a35      	ldr	r2, [pc, #212]	; (8010584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d004      	beq.n	80104bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a34      	ldr	r2, [pc, #208]	; (8010588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d108      	bne.n	80104ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80104c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	4313      	orrs	r3, r2
 80104cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	68fa      	ldr	r2, [r7, #12]
 80104dc:	4313      	orrs	r3, r2
 80104de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a25      	ldr	r2, [pc, #148]	; (8010584 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d02c      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104fa:	d027      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a22      	ldr	r2, [pc, #136]	; (801058c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d022      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a21      	ldr	r2, [pc, #132]	; (8010590 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d01d      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a1f      	ldr	r2, [pc, #124]	; (8010594 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d018      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a1a      	ldr	r2, [pc, #104]	; (8010588 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d013      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	4a1b      	ldr	r2, [pc, #108]	; (8010598 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d00e      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a1a      	ldr	r2, [pc, #104]	; (801059c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d009      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a18      	ldr	r2, [pc, #96]	; (80105a0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d004      	beq.n	801054c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4a17      	ldr	r2, [pc, #92]	; (80105a4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d10c      	bne.n	8010566 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	4313      	orrs	r3, r2
 801055c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2201      	movs	r2, #1
 801056a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010582:	4770      	bx	lr
 8010584:	40010000 	.word	0x40010000
 8010588:	40010400 	.word	0x40010400
 801058c:	40000400 	.word	0x40000400
 8010590:	40000800 	.word	0x40000800
 8010594:	40000c00 	.word	0x40000c00
 8010598:	40001800 	.word	0x40001800
 801059c:	40014000 	.word	0x40014000
 80105a0:	4000e000 	.word	0x4000e000
 80105a4:	4000e400 	.word	0x4000e400

080105a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80105c4:	bf00      	nop
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80105d8:	bf00      	nop
 80105da:	370c      	adds	r7, #12
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d101      	bne.n	80105f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105f2:	2301      	movs	r3, #1
 80105f4:	e042      	b.n	801067c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d106      	bne.n	801060e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7f2 fed9 	bl	80033c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2224      	movs	r2, #36	; 0x24
 8010612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f022 0201 	bic.w	r2, r2, #1
 8010624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f000 f82c 	bl	8010684 <UART_SetConfig>
 801062c:	4603      	mov	r3, r0
 801062e:	2b01      	cmp	r3, #1
 8010630:	d101      	bne.n	8010636 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010632:	2301      	movs	r3, #1
 8010634:	e022      	b.n	801067c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fe8c 	bl	801135c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	689a      	ldr	r2, [r3, #8]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f042 0201 	orr.w	r2, r2, #1
 8010672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 ff13 	bl	80114a0 <UART_CheckIdleState>
 801067a:	4603      	mov	r3, r0
}
 801067c:	4618      	mov	r0, r3
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010688:	b092      	sub	sp, #72	; 0x48
 801068a:	af00      	add	r7, sp, #0
 801068c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	689a      	ldr	r2, [r3, #8]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	431a      	orrs	r2, r3
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	695b      	ldr	r3, [r3, #20]
 80106a2:	431a      	orrs	r2, r3
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	69db      	ldr	r3, [r3, #28]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	4bbe      	ldr	r3, [pc, #760]	; (80109ac <UART_SetConfig+0x328>)
 80106b4:	4013      	ands	r3, r2
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	6812      	ldr	r2, [r2, #0]
 80106ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106bc:	430b      	orrs	r3, r1
 80106be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	68da      	ldr	r2, [r3, #12]
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	430a      	orrs	r2, r1
 80106d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4ab3      	ldr	r2, [pc, #716]	; (80109b0 <UART_SetConfig+0x32c>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d004      	beq.n	80106f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106ec:	4313      	orrs	r3, r2
 80106ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	689a      	ldr	r2, [r3, #8]
 80106f6:	4baf      	ldr	r3, [pc, #700]	; (80109b4 <UART_SetConfig+0x330>)
 80106f8:	4013      	ands	r3, r2
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	6812      	ldr	r2, [r2, #0]
 80106fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010700:	430b      	orrs	r3, r1
 8010702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801070a:	f023 010f 	bic.w	r1, r3, #15
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	430a      	orrs	r2, r1
 8010718:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	4aa6      	ldr	r2, [pc, #664]	; (80109b8 <UART_SetConfig+0x334>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d177      	bne.n	8010814 <UART_SetConfig+0x190>
 8010724:	4ba5      	ldr	r3, [pc, #660]	; (80109bc <UART_SetConfig+0x338>)
 8010726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010728:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801072c:	2b28      	cmp	r3, #40	; 0x28
 801072e:	d86d      	bhi.n	801080c <UART_SetConfig+0x188>
 8010730:	a201      	add	r2, pc, #4	; (adr r2, 8010738 <UART_SetConfig+0xb4>)
 8010732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010736:	bf00      	nop
 8010738:	080107dd 	.word	0x080107dd
 801073c:	0801080d 	.word	0x0801080d
 8010740:	0801080d 	.word	0x0801080d
 8010744:	0801080d 	.word	0x0801080d
 8010748:	0801080d 	.word	0x0801080d
 801074c:	0801080d 	.word	0x0801080d
 8010750:	0801080d 	.word	0x0801080d
 8010754:	0801080d 	.word	0x0801080d
 8010758:	080107e5 	.word	0x080107e5
 801075c:	0801080d 	.word	0x0801080d
 8010760:	0801080d 	.word	0x0801080d
 8010764:	0801080d 	.word	0x0801080d
 8010768:	0801080d 	.word	0x0801080d
 801076c:	0801080d 	.word	0x0801080d
 8010770:	0801080d 	.word	0x0801080d
 8010774:	0801080d 	.word	0x0801080d
 8010778:	080107ed 	.word	0x080107ed
 801077c:	0801080d 	.word	0x0801080d
 8010780:	0801080d 	.word	0x0801080d
 8010784:	0801080d 	.word	0x0801080d
 8010788:	0801080d 	.word	0x0801080d
 801078c:	0801080d 	.word	0x0801080d
 8010790:	0801080d 	.word	0x0801080d
 8010794:	0801080d 	.word	0x0801080d
 8010798:	080107f5 	.word	0x080107f5
 801079c:	0801080d 	.word	0x0801080d
 80107a0:	0801080d 	.word	0x0801080d
 80107a4:	0801080d 	.word	0x0801080d
 80107a8:	0801080d 	.word	0x0801080d
 80107ac:	0801080d 	.word	0x0801080d
 80107b0:	0801080d 	.word	0x0801080d
 80107b4:	0801080d 	.word	0x0801080d
 80107b8:	080107fd 	.word	0x080107fd
 80107bc:	0801080d 	.word	0x0801080d
 80107c0:	0801080d 	.word	0x0801080d
 80107c4:	0801080d 	.word	0x0801080d
 80107c8:	0801080d 	.word	0x0801080d
 80107cc:	0801080d 	.word	0x0801080d
 80107d0:	0801080d 	.word	0x0801080d
 80107d4:	0801080d 	.word	0x0801080d
 80107d8:	08010805 	.word	0x08010805
 80107dc:	2301      	movs	r3, #1
 80107de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107e2:	e326      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80107e4:	2304      	movs	r3, #4
 80107e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ea:	e322      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80107ec:	2308      	movs	r3, #8
 80107ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107f2:	e31e      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80107f4:	2310      	movs	r3, #16
 80107f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107fa:	e31a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80107fc:	2320      	movs	r3, #32
 80107fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010802:	e316      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010804:	2340      	movs	r3, #64	; 0x40
 8010806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801080a:	e312      	b.n	8010e32 <UART_SetConfig+0x7ae>
 801080c:	2380      	movs	r3, #128	; 0x80
 801080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010812:	e30e      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a69      	ldr	r2, [pc, #420]	; (80109c0 <UART_SetConfig+0x33c>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d130      	bne.n	8010880 <UART_SetConfig+0x1fc>
 801081e:	4b67      	ldr	r3, [pc, #412]	; (80109bc <UART_SetConfig+0x338>)
 8010820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010822:	f003 0307 	and.w	r3, r3, #7
 8010826:	2b05      	cmp	r3, #5
 8010828:	d826      	bhi.n	8010878 <UART_SetConfig+0x1f4>
 801082a:	a201      	add	r2, pc, #4	; (adr r2, 8010830 <UART_SetConfig+0x1ac>)
 801082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010830:	08010849 	.word	0x08010849
 8010834:	08010851 	.word	0x08010851
 8010838:	08010859 	.word	0x08010859
 801083c:	08010861 	.word	0x08010861
 8010840:	08010869 	.word	0x08010869
 8010844:	08010871 	.word	0x08010871
 8010848:	2300      	movs	r3, #0
 801084a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084e:	e2f0      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010850:	2304      	movs	r3, #4
 8010852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010856:	e2ec      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010858:	2308      	movs	r3, #8
 801085a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085e:	e2e8      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010860:	2310      	movs	r3, #16
 8010862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010866:	e2e4      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010868:	2320      	movs	r3, #32
 801086a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801086e:	e2e0      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010870:	2340      	movs	r3, #64	; 0x40
 8010872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010876:	e2dc      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010878:	2380      	movs	r3, #128	; 0x80
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e2d8      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a4f      	ldr	r2, [pc, #316]	; (80109c4 <UART_SetConfig+0x340>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d130      	bne.n	80108ec <UART_SetConfig+0x268>
 801088a:	4b4c      	ldr	r3, [pc, #304]	; (80109bc <UART_SetConfig+0x338>)
 801088c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801088e:	f003 0307 	and.w	r3, r3, #7
 8010892:	2b05      	cmp	r3, #5
 8010894:	d826      	bhi.n	80108e4 <UART_SetConfig+0x260>
 8010896:	a201      	add	r2, pc, #4	; (adr r2, 801089c <UART_SetConfig+0x218>)
 8010898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089c:	080108b5 	.word	0x080108b5
 80108a0:	080108bd 	.word	0x080108bd
 80108a4:	080108c5 	.word	0x080108c5
 80108a8:	080108cd 	.word	0x080108cd
 80108ac:	080108d5 	.word	0x080108d5
 80108b0:	080108dd 	.word	0x080108dd
 80108b4:	2300      	movs	r3, #0
 80108b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ba:	e2ba      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108bc:	2304      	movs	r3, #4
 80108be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c2:	e2b6      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108c4:	2308      	movs	r3, #8
 80108c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ca:	e2b2      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108cc:	2310      	movs	r3, #16
 80108ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d2:	e2ae      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108d4:	2320      	movs	r3, #32
 80108d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108da:	e2aa      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108dc:	2340      	movs	r3, #64	; 0x40
 80108de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e2:	e2a6      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108e4:	2380      	movs	r3, #128	; 0x80
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e2a2      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a35      	ldr	r2, [pc, #212]	; (80109c8 <UART_SetConfig+0x344>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d130      	bne.n	8010958 <UART_SetConfig+0x2d4>
 80108f6:	4b31      	ldr	r3, [pc, #196]	; (80109bc <UART_SetConfig+0x338>)
 80108f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	2b05      	cmp	r3, #5
 8010900:	d826      	bhi.n	8010950 <UART_SetConfig+0x2cc>
 8010902:	a201      	add	r2, pc, #4	; (adr r2, 8010908 <UART_SetConfig+0x284>)
 8010904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010908:	08010921 	.word	0x08010921
 801090c:	08010929 	.word	0x08010929
 8010910:	08010931 	.word	0x08010931
 8010914:	08010939 	.word	0x08010939
 8010918:	08010941 	.word	0x08010941
 801091c:	08010949 	.word	0x08010949
 8010920:	2300      	movs	r3, #0
 8010922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010926:	e284      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010928:	2304      	movs	r3, #4
 801092a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092e:	e280      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010930:	2308      	movs	r3, #8
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010936:	e27c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010938:	2310      	movs	r3, #16
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093e:	e278      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010940:	2320      	movs	r3, #32
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010946:	e274      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010948:	2340      	movs	r3, #64	; 0x40
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094e:	e270      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010950:	2380      	movs	r3, #128	; 0x80
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e26c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a1b      	ldr	r2, [pc, #108]	; (80109cc <UART_SetConfig+0x348>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d142      	bne.n	80109e8 <UART_SetConfig+0x364>
 8010962:	4b16      	ldr	r3, [pc, #88]	; (80109bc <UART_SetConfig+0x338>)
 8010964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	2b05      	cmp	r3, #5
 801096c:	d838      	bhi.n	80109e0 <UART_SetConfig+0x35c>
 801096e:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <UART_SetConfig+0x2f0>)
 8010970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010974:	0801098d 	.word	0x0801098d
 8010978:	08010995 	.word	0x08010995
 801097c:	0801099d 	.word	0x0801099d
 8010980:	080109a5 	.word	0x080109a5
 8010984:	080109d1 	.word	0x080109d1
 8010988:	080109d9 	.word	0x080109d9
 801098c:	2300      	movs	r3, #0
 801098e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010992:	e24e      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010994:	2304      	movs	r3, #4
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099a:	e24a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 801099c:	2308      	movs	r3, #8
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e246      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80109a4:	2310      	movs	r3, #16
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e242      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80109ac:	cfff69f3 	.word	0xcfff69f3
 80109b0:	58000c00 	.word	0x58000c00
 80109b4:	11fff4ff 	.word	0x11fff4ff
 80109b8:	40011000 	.word	0x40011000
 80109bc:	58024400 	.word	0x58024400
 80109c0:	40004400 	.word	0x40004400
 80109c4:	40004800 	.word	0x40004800
 80109c8:	40004c00 	.word	0x40004c00
 80109cc:	40005000 	.word	0x40005000
 80109d0:	2320      	movs	r3, #32
 80109d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d6:	e22c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80109d8:	2340      	movs	r3, #64	; 0x40
 80109da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109de:	e228      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80109e0:	2380      	movs	r3, #128	; 0x80
 80109e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e6:	e224      	b.n	8010e32 <UART_SetConfig+0x7ae>
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4ab1      	ldr	r2, [pc, #708]	; (8010cb4 <UART_SetConfig+0x630>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d176      	bne.n	8010ae0 <UART_SetConfig+0x45c>
 80109f2:	4bb1      	ldr	r3, [pc, #708]	; (8010cb8 <UART_SetConfig+0x634>)
 80109f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109fa:	2b28      	cmp	r3, #40	; 0x28
 80109fc:	d86c      	bhi.n	8010ad8 <UART_SetConfig+0x454>
 80109fe:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <UART_SetConfig+0x380>)
 8010a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a04:	08010aa9 	.word	0x08010aa9
 8010a08:	08010ad9 	.word	0x08010ad9
 8010a0c:	08010ad9 	.word	0x08010ad9
 8010a10:	08010ad9 	.word	0x08010ad9
 8010a14:	08010ad9 	.word	0x08010ad9
 8010a18:	08010ad9 	.word	0x08010ad9
 8010a1c:	08010ad9 	.word	0x08010ad9
 8010a20:	08010ad9 	.word	0x08010ad9
 8010a24:	08010ab1 	.word	0x08010ab1
 8010a28:	08010ad9 	.word	0x08010ad9
 8010a2c:	08010ad9 	.word	0x08010ad9
 8010a30:	08010ad9 	.word	0x08010ad9
 8010a34:	08010ad9 	.word	0x08010ad9
 8010a38:	08010ad9 	.word	0x08010ad9
 8010a3c:	08010ad9 	.word	0x08010ad9
 8010a40:	08010ad9 	.word	0x08010ad9
 8010a44:	08010ab9 	.word	0x08010ab9
 8010a48:	08010ad9 	.word	0x08010ad9
 8010a4c:	08010ad9 	.word	0x08010ad9
 8010a50:	08010ad9 	.word	0x08010ad9
 8010a54:	08010ad9 	.word	0x08010ad9
 8010a58:	08010ad9 	.word	0x08010ad9
 8010a5c:	08010ad9 	.word	0x08010ad9
 8010a60:	08010ad9 	.word	0x08010ad9
 8010a64:	08010ac1 	.word	0x08010ac1
 8010a68:	08010ad9 	.word	0x08010ad9
 8010a6c:	08010ad9 	.word	0x08010ad9
 8010a70:	08010ad9 	.word	0x08010ad9
 8010a74:	08010ad9 	.word	0x08010ad9
 8010a78:	08010ad9 	.word	0x08010ad9
 8010a7c:	08010ad9 	.word	0x08010ad9
 8010a80:	08010ad9 	.word	0x08010ad9
 8010a84:	08010ac9 	.word	0x08010ac9
 8010a88:	08010ad9 	.word	0x08010ad9
 8010a8c:	08010ad9 	.word	0x08010ad9
 8010a90:	08010ad9 	.word	0x08010ad9
 8010a94:	08010ad9 	.word	0x08010ad9
 8010a98:	08010ad9 	.word	0x08010ad9
 8010a9c:	08010ad9 	.word	0x08010ad9
 8010aa0:	08010ad9 	.word	0x08010ad9
 8010aa4:	08010ad1 	.word	0x08010ad1
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aae:	e1c0      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ab0:	2304      	movs	r3, #4
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e1bc      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ab8:	2308      	movs	r3, #8
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e1b8      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ac0:	2310      	movs	r3, #16
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e1b4      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ac8:	2320      	movs	r3, #32
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ace:	e1b0      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ad0:	2340      	movs	r3, #64	; 0x40
 8010ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ad6:	e1ac      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ad8:	2380      	movs	r3, #128	; 0x80
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ade:	e1a8      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4a75      	ldr	r2, [pc, #468]	; (8010cbc <UART_SetConfig+0x638>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d130      	bne.n	8010b4c <UART_SetConfig+0x4c8>
 8010aea:	4b73      	ldr	r3, [pc, #460]	; (8010cb8 <UART_SetConfig+0x634>)
 8010aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aee:	f003 0307 	and.w	r3, r3, #7
 8010af2:	2b05      	cmp	r3, #5
 8010af4:	d826      	bhi.n	8010b44 <UART_SetConfig+0x4c0>
 8010af6:	a201      	add	r2, pc, #4	; (adr r2, 8010afc <UART_SetConfig+0x478>)
 8010af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010afc:	08010b15 	.word	0x08010b15
 8010b00:	08010b1d 	.word	0x08010b1d
 8010b04:	08010b25 	.word	0x08010b25
 8010b08:	08010b2d 	.word	0x08010b2d
 8010b0c:	08010b35 	.word	0x08010b35
 8010b10:	08010b3d 	.word	0x08010b3d
 8010b14:	2300      	movs	r3, #0
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1a:	e18a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b1c:	2304      	movs	r3, #4
 8010b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b22:	e186      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b24:	2308      	movs	r3, #8
 8010b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2a:	e182      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b2c:	2310      	movs	r3, #16
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e17e      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b34:	2320      	movs	r3, #32
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e17a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b3c:	2340      	movs	r3, #64	; 0x40
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b42:	e176      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b44:	2380      	movs	r3, #128	; 0x80
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e172      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a5b      	ldr	r2, [pc, #364]	; (8010cc0 <UART_SetConfig+0x63c>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d130      	bne.n	8010bb8 <UART_SetConfig+0x534>
 8010b56:	4b58      	ldr	r3, [pc, #352]	; (8010cb8 <UART_SetConfig+0x634>)
 8010b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b5a:	f003 0307 	and.w	r3, r3, #7
 8010b5e:	2b05      	cmp	r3, #5
 8010b60:	d826      	bhi.n	8010bb0 <UART_SetConfig+0x52c>
 8010b62:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <UART_SetConfig+0x4e4>)
 8010b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b68:	08010b81 	.word	0x08010b81
 8010b6c:	08010b89 	.word	0x08010b89
 8010b70:	08010b91 	.word	0x08010b91
 8010b74:	08010b99 	.word	0x08010b99
 8010b78:	08010ba1 	.word	0x08010ba1
 8010b7c:	08010ba9 	.word	0x08010ba9
 8010b80:	2300      	movs	r3, #0
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b86:	e154      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b88:	2304      	movs	r3, #4
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8e:	e150      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b90:	2308      	movs	r3, #8
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e14c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010b98:	2310      	movs	r3, #16
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e148      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ba0:	2320      	movs	r3, #32
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e144      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ba8:	2340      	movs	r3, #64	; 0x40
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e140      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010bb0:	2380      	movs	r3, #128	; 0x80
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e13c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a41      	ldr	r2, [pc, #260]	; (8010cc4 <UART_SetConfig+0x640>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	f040 8082 	bne.w	8010cc8 <UART_SetConfig+0x644>
 8010bc4:	4b3c      	ldr	r3, [pc, #240]	; (8010cb8 <UART_SetConfig+0x634>)
 8010bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bcc:	2b28      	cmp	r3, #40	; 0x28
 8010bce:	d86d      	bhi.n	8010cac <UART_SetConfig+0x628>
 8010bd0:	a201      	add	r2, pc, #4	; (adr r2, 8010bd8 <UART_SetConfig+0x554>)
 8010bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd6:	bf00      	nop
 8010bd8:	08010c7d 	.word	0x08010c7d
 8010bdc:	08010cad 	.word	0x08010cad
 8010be0:	08010cad 	.word	0x08010cad
 8010be4:	08010cad 	.word	0x08010cad
 8010be8:	08010cad 	.word	0x08010cad
 8010bec:	08010cad 	.word	0x08010cad
 8010bf0:	08010cad 	.word	0x08010cad
 8010bf4:	08010cad 	.word	0x08010cad
 8010bf8:	08010c85 	.word	0x08010c85
 8010bfc:	08010cad 	.word	0x08010cad
 8010c00:	08010cad 	.word	0x08010cad
 8010c04:	08010cad 	.word	0x08010cad
 8010c08:	08010cad 	.word	0x08010cad
 8010c0c:	08010cad 	.word	0x08010cad
 8010c10:	08010cad 	.word	0x08010cad
 8010c14:	08010cad 	.word	0x08010cad
 8010c18:	08010c8d 	.word	0x08010c8d
 8010c1c:	08010cad 	.word	0x08010cad
 8010c20:	08010cad 	.word	0x08010cad
 8010c24:	08010cad 	.word	0x08010cad
 8010c28:	08010cad 	.word	0x08010cad
 8010c2c:	08010cad 	.word	0x08010cad
 8010c30:	08010cad 	.word	0x08010cad
 8010c34:	08010cad 	.word	0x08010cad
 8010c38:	08010c95 	.word	0x08010c95
 8010c3c:	08010cad 	.word	0x08010cad
 8010c40:	08010cad 	.word	0x08010cad
 8010c44:	08010cad 	.word	0x08010cad
 8010c48:	08010cad 	.word	0x08010cad
 8010c4c:	08010cad 	.word	0x08010cad
 8010c50:	08010cad 	.word	0x08010cad
 8010c54:	08010cad 	.word	0x08010cad
 8010c58:	08010c9d 	.word	0x08010c9d
 8010c5c:	08010cad 	.word	0x08010cad
 8010c60:	08010cad 	.word	0x08010cad
 8010c64:	08010cad 	.word	0x08010cad
 8010c68:	08010cad 	.word	0x08010cad
 8010c6c:	08010cad 	.word	0x08010cad
 8010c70:	08010cad 	.word	0x08010cad
 8010c74:	08010cad 	.word	0x08010cad
 8010c78:	08010ca5 	.word	0x08010ca5
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c82:	e0d6      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010c84:	2304      	movs	r3, #4
 8010c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8a:	e0d2      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010c8c:	2308      	movs	r3, #8
 8010c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c92:	e0ce      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010c94:	2310      	movs	r3, #16
 8010c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9a:	e0ca      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010c9c:	2320      	movs	r3, #32
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e0c6      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010ca4:	2340      	movs	r3, #64	; 0x40
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e0c2      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010cac:	2380      	movs	r3, #128	; 0x80
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e0be      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010cb4:	40011400 	.word	0x40011400
 8010cb8:	58024400 	.word	0x58024400
 8010cbc:	40007800 	.word	0x40007800
 8010cc0:	40007c00 	.word	0x40007c00
 8010cc4:	40011800 	.word	0x40011800
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4aad      	ldr	r2, [pc, #692]	; (8010f84 <UART_SetConfig+0x900>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d176      	bne.n	8010dc0 <UART_SetConfig+0x73c>
 8010cd2:	4bad      	ldr	r3, [pc, #692]	; (8010f88 <UART_SetConfig+0x904>)
 8010cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cda:	2b28      	cmp	r3, #40	; 0x28
 8010cdc:	d86c      	bhi.n	8010db8 <UART_SetConfig+0x734>
 8010cde:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <UART_SetConfig+0x660>)
 8010ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce4:	08010d89 	.word	0x08010d89
 8010ce8:	08010db9 	.word	0x08010db9
 8010cec:	08010db9 	.word	0x08010db9
 8010cf0:	08010db9 	.word	0x08010db9
 8010cf4:	08010db9 	.word	0x08010db9
 8010cf8:	08010db9 	.word	0x08010db9
 8010cfc:	08010db9 	.word	0x08010db9
 8010d00:	08010db9 	.word	0x08010db9
 8010d04:	08010d91 	.word	0x08010d91
 8010d08:	08010db9 	.word	0x08010db9
 8010d0c:	08010db9 	.word	0x08010db9
 8010d10:	08010db9 	.word	0x08010db9
 8010d14:	08010db9 	.word	0x08010db9
 8010d18:	08010db9 	.word	0x08010db9
 8010d1c:	08010db9 	.word	0x08010db9
 8010d20:	08010db9 	.word	0x08010db9
 8010d24:	08010d99 	.word	0x08010d99
 8010d28:	08010db9 	.word	0x08010db9
 8010d2c:	08010db9 	.word	0x08010db9
 8010d30:	08010db9 	.word	0x08010db9
 8010d34:	08010db9 	.word	0x08010db9
 8010d38:	08010db9 	.word	0x08010db9
 8010d3c:	08010db9 	.word	0x08010db9
 8010d40:	08010db9 	.word	0x08010db9
 8010d44:	08010da1 	.word	0x08010da1
 8010d48:	08010db9 	.word	0x08010db9
 8010d4c:	08010db9 	.word	0x08010db9
 8010d50:	08010db9 	.word	0x08010db9
 8010d54:	08010db9 	.word	0x08010db9
 8010d58:	08010db9 	.word	0x08010db9
 8010d5c:	08010db9 	.word	0x08010db9
 8010d60:	08010db9 	.word	0x08010db9
 8010d64:	08010da9 	.word	0x08010da9
 8010d68:	08010db9 	.word	0x08010db9
 8010d6c:	08010db9 	.word	0x08010db9
 8010d70:	08010db9 	.word	0x08010db9
 8010d74:	08010db9 	.word	0x08010db9
 8010d78:	08010db9 	.word	0x08010db9
 8010d7c:	08010db9 	.word	0x08010db9
 8010d80:	08010db9 	.word	0x08010db9
 8010d84:	08010db1 	.word	0x08010db1
 8010d88:	2301      	movs	r3, #1
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e050      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010d90:	2304      	movs	r3, #4
 8010d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d96:	e04c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010d98:	2308      	movs	r3, #8
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9e:	e048      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010da0:	2310      	movs	r3, #16
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e044      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010da8:	2320      	movs	r3, #32
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dae:	e040      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010db0:	2340      	movs	r3, #64	; 0x40
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db6:	e03c      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010db8:	2380      	movs	r3, #128	; 0x80
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e038      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a71      	ldr	r2, [pc, #452]	; (8010f8c <UART_SetConfig+0x908>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d130      	bne.n	8010e2c <UART_SetConfig+0x7a8>
 8010dca:	4b6f      	ldr	r3, [pc, #444]	; (8010f88 <UART_SetConfig+0x904>)
 8010dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dce:	f003 0307 	and.w	r3, r3, #7
 8010dd2:	2b05      	cmp	r3, #5
 8010dd4:	d826      	bhi.n	8010e24 <UART_SetConfig+0x7a0>
 8010dd6:	a201      	add	r2, pc, #4	; (adr r2, 8010ddc <UART_SetConfig+0x758>)
 8010dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ddc:	08010df5 	.word	0x08010df5
 8010de0:	08010dfd 	.word	0x08010dfd
 8010de4:	08010e05 	.word	0x08010e05
 8010de8:	08010e0d 	.word	0x08010e0d
 8010dec:	08010e15 	.word	0x08010e15
 8010df0:	08010e1d 	.word	0x08010e1d
 8010df4:	2302      	movs	r3, #2
 8010df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfa:	e01a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010dfc:	2304      	movs	r3, #4
 8010dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e02:	e016      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e04:	2308      	movs	r3, #8
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0a:	e012      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e0c:	2310      	movs	r3, #16
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e00e      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e14:	2320      	movs	r3, #32
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e00a      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e1c:	2340      	movs	r3, #64	; 0x40
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e006      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e24:	2380      	movs	r3, #128	; 0x80
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2a:	e002      	b.n	8010e32 <UART_SetConfig+0x7ae>
 8010e2c:	2380      	movs	r3, #128	; 0x80
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a55      	ldr	r2, [pc, #340]	; (8010f8c <UART_SetConfig+0x908>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	f040 80f8 	bne.w	801102e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010e3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e42:	2b20      	cmp	r3, #32
 8010e44:	dc46      	bgt.n	8010ed4 <UART_SetConfig+0x850>
 8010e46:	2b02      	cmp	r3, #2
 8010e48:	db75      	blt.n	8010f36 <UART_SetConfig+0x8b2>
 8010e4a:	3b02      	subs	r3, #2
 8010e4c:	2b1e      	cmp	r3, #30
 8010e4e:	d872      	bhi.n	8010f36 <UART_SetConfig+0x8b2>
 8010e50:	a201      	add	r2, pc, #4	; (adr r2, 8010e58 <UART_SetConfig+0x7d4>)
 8010e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e56:	bf00      	nop
 8010e58:	08010edb 	.word	0x08010edb
 8010e5c:	08010f37 	.word	0x08010f37
 8010e60:	08010ee3 	.word	0x08010ee3
 8010e64:	08010f37 	.word	0x08010f37
 8010e68:	08010f37 	.word	0x08010f37
 8010e6c:	08010f37 	.word	0x08010f37
 8010e70:	08010ef3 	.word	0x08010ef3
 8010e74:	08010f37 	.word	0x08010f37
 8010e78:	08010f37 	.word	0x08010f37
 8010e7c:	08010f37 	.word	0x08010f37
 8010e80:	08010f37 	.word	0x08010f37
 8010e84:	08010f37 	.word	0x08010f37
 8010e88:	08010f37 	.word	0x08010f37
 8010e8c:	08010f37 	.word	0x08010f37
 8010e90:	08010f03 	.word	0x08010f03
 8010e94:	08010f37 	.word	0x08010f37
 8010e98:	08010f37 	.word	0x08010f37
 8010e9c:	08010f37 	.word	0x08010f37
 8010ea0:	08010f37 	.word	0x08010f37
 8010ea4:	08010f37 	.word	0x08010f37
 8010ea8:	08010f37 	.word	0x08010f37
 8010eac:	08010f37 	.word	0x08010f37
 8010eb0:	08010f37 	.word	0x08010f37
 8010eb4:	08010f37 	.word	0x08010f37
 8010eb8:	08010f37 	.word	0x08010f37
 8010ebc:	08010f37 	.word	0x08010f37
 8010ec0:	08010f37 	.word	0x08010f37
 8010ec4:	08010f37 	.word	0x08010f37
 8010ec8:	08010f37 	.word	0x08010f37
 8010ecc:	08010f37 	.word	0x08010f37
 8010ed0:	08010f29 	.word	0x08010f29
 8010ed4:	2b40      	cmp	r3, #64	; 0x40
 8010ed6:	d02a      	beq.n	8010f2e <UART_SetConfig+0x8aa>
 8010ed8:	e02d      	b.n	8010f36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010eda:	f7fb fb07 	bl	800c4ec <HAL_RCCEx_GetD3PCLK1Freq>
 8010ede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ee0:	e02f      	b.n	8010f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fb fb16 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef0:	e027      	b.n	8010f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ef2:	f107 0318 	add.w	r3, r7, #24
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fb fc62 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f00:	e01f      	b.n	8010f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f02:	4b21      	ldr	r3, [pc, #132]	; (8010f88 <UART_SetConfig+0x904>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f003 0320 	and.w	r3, r3, #32
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d009      	beq.n	8010f22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f0e:	4b1e      	ldr	r3, [pc, #120]	; (8010f88 <UART_SetConfig+0x904>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	08db      	lsrs	r3, r3, #3
 8010f14:	f003 0303 	and.w	r3, r3, #3
 8010f18:	4a1d      	ldr	r2, [pc, #116]	; (8010f90 <UART_SetConfig+0x90c>)
 8010f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f20:	e00f      	b.n	8010f42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010f22:	4b1b      	ldr	r3, [pc, #108]	; (8010f90 <UART_SetConfig+0x90c>)
 8010f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f26:	e00c      	b.n	8010f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f28:	4b1a      	ldr	r3, [pc, #104]	; (8010f94 <UART_SetConfig+0x910>)
 8010f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f2c:	e009      	b.n	8010f42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f34:	e005      	b.n	8010f42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 81ee 	beq.w	8011326 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4e:	4a12      	ldr	r2, [pc, #72]	; (8010f98 <UART_SetConfig+0x914>)
 8010f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f54:	461a      	mov	r2, r3
 8010f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f5c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	685a      	ldr	r2, [r3, #4]
 8010f62:	4613      	mov	r3, r2
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	4413      	add	r3, r2
 8010f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d305      	bcc.n	8010f7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d910      	bls.n	8010f9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f80:	e1d1      	b.n	8011326 <UART_SetConfig+0xca2>
 8010f82:	bf00      	nop
 8010f84:	40011c00 	.word	0x40011c00
 8010f88:	58024400 	.word	0x58024400
 8010f8c:	58000c00 	.word	0x58000c00
 8010f90:	03d09000 	.word	0x03d09000
 8010f94:	003d0900 	.word	0x003d0900
 8010f98:	0801b778 	.word	0x0801b778
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	60bb      	str	r3, [r7, #8]
 8010fa2:	60fa      	str	r2, [r7, #12]
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa8:	4ac0      	ldr	r2, [pc, #768]	; (80112ac <UART_SetConfig+0xc28>)
 8010faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	603b      	str	r3, [r7, #0]
 8010fb4:	607a      	str	r2, [r7, #4]
 8010fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010fbe:	f7ef fbbb 	bl	8000738 <__aeabi_uldivmod>
 8010fc2:	4602      	mov	r2, r0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	4610      	mov	r0, r2
 8010fc8:	4619      	mov	r1, r3
 8010fca:	f04f 0200 	mov.w	r2, #0
 8010fce:	f04f 0300 	mov.w	r3, #0
 8010fd2:	020b      	lsls	r3, r1, #8
 8010fd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010fd8:	0202      	lsls	r2, r0, #8
 8010fda:	6979      	ldr	r1, [r7, #20]
 8010fdc:	6849      	ldr	r1, [r1, #4]
 8010fde:	0849      	lsrs	r1, r1, #1
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	eb12 0804 	adds.w	r8, r2, r4
 8010fea:	eb43 0905 	adc.w	r9, r3, r5
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	469a      	mov	sl, r3
 8010ff6:	4693      	mov	fp, r2
 8010ff8:	4652      	mov	r2, sl
 8010ffa:	465b      	mov	r3, fp
 8010ffc:	4640      	mov	r0, r8
 8010ffe:	4649      	mov	r1, r9
 8011000:	f7ef fb9a 	bl	8000738 <__aeabi_uldivmod>
 8011004:	4602      	mov	r2, r0
 8011006:	460b      	mov	r3, r1
 8011008:	4613      	mov	r3, r2
 801100a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011012:	d308      	bcc.n	8011026 <UART_SetConfig+0x9a2>
 8011014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801101a:	d204      	bcs.n	8011026 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011022:	60da      	str	r2, [r3, #12]
 8011024:	e17f      	b.n	8011326 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011026:	2301      	movs	r3, #1
 8011028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801102c:	e17b      	b.n	8011326 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	69db      	ldr	r3, [r3, #28]
 8011032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011036:	f040 80bd 	bne.w	80111b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801103a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801103e:	2b20      	cmp	r3, #32
 8011040:	dc48      	bgt.n	80110d4 <UART_SetConfig+0xa50>
 8011042:	2b00      	cmp	r3, #0
 8011044:	db7b      	blt.n	801113e <UART_SetConfig+0xaba>
 8011046:	2b20      	cmp	r3, #32
 8011048:	d879      	bhi.n	801113e <UART_SetConfig+0xaba>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <UART_SetConfig+0x9cc>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	080110db 	.word	0x080110db
 8011054:	080110e3 	.word	0x080110e3
 8011058:	0801113f 	.word	0x0801113f
 801105c:	0801113f 	.word	0x0801113f
 8011060:	080110eb 	.word	0x080110eb
 8011064:	0801113f 	.word	0x0801113f
 8011068:	0801113f 	.word	0x0801113f
 801106c:	0801113f 	.word	0x0801113f
 8011070:	080110fb 	.word	0x080110fb
 8011074:	0801113f 	.word	0x0801113f
 8011078:	0801113f 	.word	0x0801113f
 801107c:	0801113f 	.word	0x0801113f
 8011080:	0801113f 	.word	0x0801113f
 8011084:	0801113f 	.word	0x0801113f
 8011088:	0801113f 	.word	0x0801113f
 801108c:	0801113f 	.word	0x0801113f
 8011090:	0801110b 	.word	0x0801110b
 8011094:	0801113f 	.word	0x0801113f
 8011098:	0801113f 	.word	0x0801113f
 801109c:	0801113f 	.word	0x0801113f
 80110a0:	0801113f 	.word	0x0801113f
 80110a4:	0801113f 	.word	0x0801113f
 80110a8:	0801113f 	.word	0x0801113f
 80110ac:	0801113f 	.word	0x0801113f
 80110b0:	0801113f 	.word	0x0801113f
 80110b4:	0801113f 	.word	0x0801113f
 80110b8:	0801113f 	.word	0x0801113f
 80110bc:	0801113f 	.word	0x0801113f
 80110c0:	0801113f 	.word	0x0801113f
 80110c4:	0801113f 	.word	0x0801113f
 80110c8:	0801113f 	.word	0x0801113f
 80110cc:	0801113f 	.word	0x0801113f
 80110d0:	08011131 	.word	0x08011131
 80110d4:	2b40      	cmp	r3, #64	; 0x40
 80110d6:	d02e      	beq.n	8011136 <UART_SetConfig+0xab2>
 80110d8:	e031      	b.n	801113e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110da:	f7f9 fb69 	bl	800a7b0 <HAL_RCC_GetPCLK1Freq>
 80110de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110e0:	e033      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80110e2:	f7f9 fb7b 	bl	800a7dc <HAL_RCC_GetPCLK2Freq>
 80110e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110e8:	e02f      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fb fa12 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110f8:	e027      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110fa:	f107 0318 	add.w	r3, r7, #24
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fb fb5e 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011108:	e01f      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801110a:	4b69      	ldr	r3, [pc, #420]	; (80112b0 <UART_SetConfig+0xc2c>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f003 0320 	and.w	r3, r3, #32
 8011112:	2b00      	cmp	r3, #0
 8011114:	d009      	beq.n	801112a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011116:	4b66      	ldr	r3, [pc, #408]	; (80112b0 <UART_SetConfig+0xc2c>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	08db      	lsrs	r3, r3, #3
 801111c:	f003 0303 	and.w	r3, r3, #3
 8011120:	4a64      	ldr	r2, [pc, #400]	; (80112b4 <UART_SetConfig+0xc30>)
 8011122:	fa22 f303 	lsr.w	r3, r2, r3
 8011126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011128:	e00f      	b.n	801114a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801112a:	4b62      	ldr	r3, [pc, #392]	; (80112b4 <UART_SetConfig+0xc30>)
 801112c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801112e:	e00c      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011130:	4b61      	ldr	r3, [pc, #388]	; (80112b8 <UART_SetConfig+0xc34>)
 8011132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011134:	e009      	b.n	801114a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801113a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801113c:	e005      	b.n	801114a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801113e:	2300      	movs	r3, #0
 8011140:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011142:	2301      	movs	r3, #1
 8011144:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011148:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801114a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 80ea 	beq.w	8011326 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011156:	4a55      	ldr	r2, [pc, #340]	; (80112ac <UART_SetConfig+0xc28>)
 8011158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801115c:	461a      	mov	r2, r3
 801115e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011160:	fbb3 f3f2 	udiv	r3, r3, r2
 8011164:	005a      	lsls	r2, r3, #1
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	085b      	lsrs	r3, r3, #1
 801116c:	441a      	add	r2, r3
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	fbb2 f3f3 	udiv	r3, r2, r3
 8011176:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117a:	2b0f      	cmp	r3, #15
 801117c:	d916      	bls.n	80111ac <UART_SetConfig+0xb28>
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011184:	d212      	bcs.n	80111ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	b29b      	uxth	r3, r3
 801118a:	f023 030f 	bic.w	r3, r3, #15
 801118e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011192:	085b      	lsrs	r3, r3, #1
 8011194:	b29b      	uxth	r3, r3
 8011196:	f003 0307 	and.w	r3, r3, #7
 801119a:	b29a      	uxth	r2, r3
 801119c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801119e:	4313      	orrs	r3, r2
 80111a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80111a8:	60da      	str	r2, [r3, #12]
 80111aa:	e0bc      	b.n	8011326 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80111ac:	2301      	movs	r3, #1
 80111ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80111b2:	e0b8      	b.n	8011326 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80111b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80111b8:	2b20      	cmp	r3, #32
 80111ba:	dc4b      	bgt.n	8011254 <UART_SetConfig+0xbd0>
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f2c0 8087 	blt.w	80112d0 <UART_SetConfig+0xc4c>
 80111c2:	2b20      	cmp	r3, #32
 80111c4:	f200 8084 	bhi.w	80112d0 <UART_SetConfig+0xc4c>
 80111c8:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <UART_SetConfig+0xb4c>)
 80111ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ce:	bf00      	nop
 80111d0:	0801125b 	.word	0x0801125b
 80111d4:	08011263 	.word	0x08011263
 80111d8:	080112d1 	.word	0x080112d1
 80111dc:	080112d1 	.word	0x080112d1
 80111e0:	0801126b 	.word	0x0801126b
 80111e4:	080112d1 	.word	0x080112d1
 80111e8:	080112d1 	.word	0x080112d1
 80111ec:	080112d1 	.word	0x080112d1
 80111f0:	0801127b 	.word	0x0801127b
 80111f4:	080112d1 	.word	0x080112d1
 80111f8:	080112d1 	.word	0x080112d1
 80111fc:	080112d1 	.word	0x080112d1
 8011200:	080112d1 	.word	0x080112d1
 8011204:	080112d1 	.word	0x080112d1
 8011208:	080112d1 	.word	0x080112d1
 801120c:	080112d1 	.word	0x080112d1
 8011210:	0801128b 	.word	0x0801128b
 8011214:	080112d1 	.word	0x080112d1
 8011218:	080112d1 	.word	0x080112d1
 801121c:	080112d1 	.word	0x080112d1
 8011220:	080112d1 	.word	0x080112d1
 8011224:	080112d1 	.word	0x080112d1
 8011228:	080112d1 	.word	0x080112d1
 801122c:	080112d1 	.word	0x080112d1
 8011230:	080112d1 	.word	0x080112d1
 8011234:	080112d1 	.word	0x080112d1
 8011238:	080112d1 	.word	0x080112d1
 801123c:	080112d1 	.word	0x080112d1
 8011240:	080112d1 	.word	0x080112d1
 8011244:	080112d1 	.word	0x080112d1
 8011248:	080112d1 	.word	0x080112d1
 801124c:	080112d1 	.word	0x080112d1
 8011250:	080112c3 	.word	0x080112c3
 8011254:	2b40      	cmp	r3, #64	; 0x40
 8011256:	d037      	beq.n	80112c8 <UART_SetConfig+0xc44>
 8011258:	e03a      	b.n	80112d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801125a:	f7f9 faa9 	bl	800a7b0 <HAL_RCC_GetPCLK1Freq>
 801125e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011260:	e03c      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011262:	f7f9 fabb 	bl	800a7dc <HAL_RCC_GetPCLK2Freq>
 8011266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011268:	e038      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801126e:	4618      	mov	r0, r3
 8011270:	f7fb f952 	bl	800c518 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011278:	e030      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801127a:	f107 0318 	add.w	r3, r7, #24
 801127e:	4618      	mov	r0, r3
 8011280:	f7fb fa9e 	bl	800c7c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011288:	e028      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801128a:	4b09      	ldr	r3, [pc, #36]	; (80112b0 <UART_SetConfig+0xc2c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f003 0320 	and.w	r3, r3, #32
 8011292:	2b00      	cmp	r3, #0
 8011294:	d012      	beq.n	80112bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011296:	4b06      	ldr	r3, [pc, #24]	; (80112b0 <UART_SetConfig+0xc2c>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	08db      	lsrs	r3, r3, #3
 801129c:	f003 0303 	and.w	r3, r3, #3
 80112a0:	4a04      	ldr	r2, [pc, #16]	; (80112b4 <UART_SetConfig+0xc30>)
 80112a2:	fa22 f303 	lsr.w	r3, r2, r3
 80112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112a8:	e018      	b.n	80112dc <UART_SetConfig+0xc58>
 80112aa:	bf00      	nop
 80112ac:	0801b778 	.word	0x0801b778
 80112b0:	58024400 	.word	0x58024400
 80112b4:	03d09000 	.word	0x03d09000
 80112b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80112bc:	4b24      	ldr	r3, [pc, #144]	; (8011350 <UART_SetConfig+0xccc>)
 80112be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112c0:	e00c      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112c2:	4b24      	ldr	r3, [pc, #144]	; (8011354 <UART_SetConfig+0xcd0>)
 80112c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112c6:	e009      	b.n	80112dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112ce:	e005      	b.n	80112dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80112d0:	2300      	movs	r3, #0
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80112d4:	2301      	movs	r3, #1
 80112d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80112da:	bf00      	nop
    }

    if (pclk != 0U)
 80112dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d021      	beq.n	8011326 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e6:	4a1c      	ldr	r2, [pc, #112]	; (8011358 <UART_SetConfig+0xcd4>)
 80112e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112ec:	461a      	mov	r2, r3
 80112ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	085b      	lsrs	r3, r3, #1
 80112fa:	441a      	add	r2, r3
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	fbb2 f3f3 	udiv	r3, r2, r3
 8011304:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011308:	2b0f      	cmp	r3, #15
 801130a:	d909      	bls.n	8011320 <UART_SetConfig+0xc9c>
 801130c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011312:	d205      	bcs.n	8011320 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	b29a      	uxth	r2, r3
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	60da      	str	r2, [r3, #12]
 801131e:	e002      	b.n	8011326 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011320:	2301      	movs	r3, #1
 8011322:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2201      	movs	r2, #1
 801132a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	2201      	movs	r2, #1
 8011332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2200      	movs	r2, #0
 801133a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	2200      	movs	r2, #0
 8011340:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011342:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011346:	4618      	mov	r0, r3
 8011348:	3748      	adds	r7, #72	; 0x48
 801134a:	46bd      	mov	sp, r7
 801134c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011350:	03d09000 	.word	0x03d09000
 8011354:	003d0900 	.word	0x003d0900
 8011358:	0801b778 	.word	0x0801b778

0801135c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00a      	beq.n	8011386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	430a      	orrs	r2, r1
 8011384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138a:	f003 0302 	and.w	r3, r3, #2
 801138e:	2b00      	cmp	r3, #0
 8011390:	d00a      	beq.n	80113a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	430a      	orrs	r2, r1
 80113a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ac:	f003 0304 	and.w	r3, r3, #4
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00a      	beq.n	80113ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	430a      	orrs	r2, r1
 80113c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	f003 0308 	and.w	r3, r3, #8
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00a      	beq.n	80113ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	430a      	orrs	r2, r1
 80113ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113f0:	f003 0310 	and.w	r3, r3, #16
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d00a      	beq.n	801140e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	689b      	ldr	r3, [r3, #8]
 80113fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	430a      	orrs	r2, r1
 801140c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011412:	f003 0320 	and.w	r3, r3, #32
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00a      	beq.n	8011430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	689b      	ldr	r3, [r3, #8]
 8011420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	430a      	orrs	r2, r1
 801142e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011438:	2b00      	cmp	r3, #0
 801143a:	d01a      	beq.n	8011472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	430a      	orrs	r2, r1
 8011450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801145a:	d10a      	bne.n	8011472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	430a      	orrs	r2, r1
 8011470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00a      	beq.n	8011494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	430a      	orrs	r2, r1
 8011492:	605a      	str	r2, [r3, #4]
  }
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b098      	sub	sp, #96	; 0x60
 80114a4:	af02      	add	r7, sp, #8
 80114a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80114b0:	f7f2 fac6 	bl	8003a40 <HAL_GetTick>
 80114b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f003 0308 	and.w	r3, r3, #8
 80114c0:	2b08      	cmp	r3, #8
 80114c2:	d12f      	bne.n	8011524 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80114c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114cc:	2200      	movs	r2, #0
 80114ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f000 f88e 	bl	80115f4 <UART_WaitOnFlagUntilTimeout>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d022      	beq.n	8011524 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	e853 3f00 	ldrex	r3, [r3]
 80114ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80114ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114f2:	653b      	str	r3, [r7, #80]	; 0x50
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	461a      	mov	r2, r3
 80114fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114fc:	647b      	str	r3, [r7, #68]	; 0x44
 80114fe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011500:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011504:	e841 2300 	strex	r3, r2, [r1]
 8011508:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801150a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1e6      	bne.n	80114de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2220      	movs	r2, #32
 8011514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2200      	movs	r2, #0
 801151c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011520:	2303      	movs	r3, #3
 8011522:	e063      	b.n	80115ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f003 0304 	and.w	r3, r3, #4
 801152e:	2b04      	cmp	r3, #4
 8011530:	d149      	bne.n	80115c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011532:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801153a:	2200      	movs	r2, #0
 801153c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f857 	bl	80115f4 <UART_WaitOnFlagUntilTimeout>
 8011546:	4603      	mov	r3, r0
 8011548:	2b00      	cmp	r3, #0
 801154a:	d03c      	beq.n	80115c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	623b      	str	r3, [r7, #32]
   return(result);
 801155a:	6a3b      	ldr	r3, [r7, #32]
 801155c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	461a      	mov	r2, r3
 8011568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801156a:	633b      	str	r3, [r7, #48]	; 0x30
 801156c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011572:	e841 2300 	strex	r3, r2, [r1]
 8011576:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1e6      	bne.n	801154c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	3308      	adds	r3, #8
 8011584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	e853 3f00 	ldrex	r3, [r3]
 801158c:	60fb      	str	r3, [r7, #12]
   return(result);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f023 0301 	bic.w	r3, r3, #1
 8011594:	64bb      	str	r3, [r7, #72]	; 0x48
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	3308      	adds	r3, #8
 801159c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801159e:	61fa      	str	r2, [r7, #28]
 80115a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a2:	69b9      	ldr	r1, [r7, #24]
 80115a4:	69fa      	ldr	r2, [r7, #28]
 80115a6:	e841 2300 	strex	r3, r2, [r1]
 80115aa:	617b      	str	r3, [r7, #20]
   return(result);
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1e5      	bne.n	801157e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2220      	movs	r2, #32
 80115b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115c2:	2303      	movs	r3, #3
 80115c4:	e012      	b.n	80115ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2220      	movs	r2, #32
 80115ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2220      	movs	r2, #32
 80115d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2200      	movs	r2, #0
 80115da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2200      	movs	r2, #0
 80115e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3758      	adds	r7, #88	; 0x58
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	4613      	mov	r3, r2
 8011602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011604:	e049      	b.n	801169a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801160c:	d045      	beq.n	801169a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801160e:	f7f2 fa17 	bl	8003a40 <HAL_GetTick>
 8011612:	4602      	mov	r2, r0
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	69ba      	ldr	r2, [r7, #24]
 801161a:	429a      	cmp	r2, r3
 801161c:	d302      	bcc.n	8011624 <UART_WaitOnFlagUntilTimeout+0x30>
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d101      	bne.n	8011628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011624:	2303      	movs	r3, #3
 8011626:	e048      	b.n	80116ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f003 0304 	and.w	r3, r3, #4
 8011632:	2b00      	cmp	r3, #0
 8011634:	d031      	beq.n	801169a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	f003 0308 	and.w	r3, r3, #8
 8011640:	2b08      	cmp	r3, #8
 8011642:	d110      	bne.n	8011666 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2208      	movs	r2, #8
 801164a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 f839 	bl	80116c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2208      	movs	r2, #8
 8011656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	e029      	b.n	80116ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	69db      	ldr	r3, [r3, #28]
 801166c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011674:	d111      	bne.n	801169a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801167e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f000 f81f 	bl	80116c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2220      	movs	r2, #32
 801168a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2200      	movs	r2, #0
 8011692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011696:	2303      	movs	r3, #3
 8011698:	e00f      	b.n	80116ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	69da      	ldr	r2, [r3, #28]
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	4013      	ands	r3, r2
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	bf0c      	ite	eq
 80116aa:	2301      	moveq	r3, #1
 80116ac:	2300      	movne	r3, #0
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	461a      	mov	r2, r3
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d0a6      	beq.n	8011606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3710      	adds	r7, #16
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
	...

080116c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b095      	sub	sp, #84	; 0x54
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d4:	e853 3f00 	ldrex	r3, [r3]
 80116d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80116da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80116e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	461a      	mov	r2, r3
 80116e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ea:	643b      	str	r3, [r7, #64]	; 0x40
 80116ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116f2:	e841 2300 	strex	r3, r2, [r1]
 80116f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d1e6      	bne.n	80116cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3308      	adds	r3, #8
 8011704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011706:	6a3b      	ldr	r3, [r7, #32]
 8011708:	e853 3f00 	ldrex	r3, [r3]
 801170c:	61fb      	str	r3, [r7, #28]
   return(result);
 801170e:	69fa      	ldr	r2, [r7, #28]
 8011710:	4b1e      	ldr	r3, [pc, #120]	; (801178c <UART_EndRxTransfer+0xc8>)
 8011712:	4013      	ands	r3, r2
 8011714:	64bb      	str	r3, [r7, #72]	; 0x48
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	3308      	adds	r3, #8
 801171c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801171e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011726:	e841 2300 	strex	r3, r2, [r1]
 801172a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172e:	2b00      	cmp	r3, #0
 8011730:	d1e5      	bne.n	80116fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011736:	2b01      	cmp	r3, #1
 8011738:	d118      	bne.n	801176c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	e853 3f00 	ldrex	r3, [r3]
 8011746:	60bb      	str	r3, [r7, #8]
   return(result);
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	f023 0310 	bic.w	r3, r3, #16
 801174e:	647b      	str	r3, [r7, #68]	; 0x44
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011758:	61bb      	str	r3, [r7, #24]
 801175a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801175c:	6979      	ldr	r1, [r7, #20]
 801175e:	69ba      	ldr	r2, [r7, #24]
 8011760:	e841 2300 	strex	r3, r2, [r1]
 8011764:	613b      	str	r3, [r7, #16]
   return(result);
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1e6      	bne.n	801173a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2220      	movs	r2, #32
 8011770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2200      	movs	r2, #0
 8011778:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2200      	movs	r2, #0
 801177e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011780:	bf00      	nop
 8011782:	3754      	adds	r7, #84	; 0x54
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	effffffe 	.word	0xeffffffe

08011790 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d101      	bne.n	80117a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80117a2:	2302      	movs	r3, #2
 80117a4:	e027      	b.n	80117f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2224      	movs	r2, #36	; 0x24
 80117b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f022 0201 	bic.w	r2, r2, #1
 80117cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80117d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2220      	movs	r2, #32
 80117e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117f4:	2300      	movs	r3, #0
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3714      	adds	r7, #20
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr

08011802 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b084      	sub	sp, #16
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011812:	2b01      	cmp	r3, #1
 8011814:	d101      	bne.n	801181a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011816:	2302      	movs	r3, #2
 8011818:	e02d      	b.n	8011876 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2201      	movs	r2, #1
 801181e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2224      	movs	r2, #36	; 0x24
 8011826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f022 0201 	bic.w	r2, r2, #1
 8011840:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	683a      	ldr	r2, [r7, #0]
 8011852:	430a      	orrs	r2, r1
 8011854:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f850 	bl	80118fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2220      	movs	r2, #32
 8011868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2200      	movs	r2, #0
 8011870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
 8011886:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801188e:	2b01      	cmp	r3, #1
 8011890:	d101      	bne.n	8011896 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011892:	2302      	movs	r3, #2
 8011894:	e02d      	b.n	80118f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2201      	movs	r2, #1
 801189a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2224      	movs	r2, #36	; 0x24
 80118a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f022 0201 	bic.w	r2, r2, #1
 80118bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	683a      	ldr	r2, [r7, #0]
 80118ce:	430a      	orrs	r2, r1
 80118d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 f812 	bl	80118fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2220      	movs	r2, #32
 80118e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3710      	adds	r7, #16
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
	...

080118fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b085      	sub	sp, #20
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011908:	2b00      	cmp	r3, #0
 801190a:	d108      	bne.n	801191e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2201      	movs	r2, #1
 8011918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801191c:	e031      	b.n	8011982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801191e:	2310      	movs	r3, #16
 8011920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011922:	2310      	movs	r3, #16
 8011924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	689b      	ldr	r3, [r3, #8]
 801192c:	0e5b      	lsrs	r3, r3, #25
 801192e:	b2db      	uxtb	r3, r3
 8011930:	f003 0307 	and.w	r3, r3, #7
 8011934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	0f5b      	lsrs	r3, r3, #29
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 0307 	and.w	r3, r3, #7
 8011944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011946:	7bbb      	ldrb	r3, [r7, #14]
 8011948:	7b3a      	ldrb	r2, [r7, #12]
 801194a:	4911      	ldr	r1, [pc, #68]	; (8011990 <UARTEx_SetNbDataToProcess+0x94>)
 801194c:	5c8a      	ldrb	r2, [r1, r2]
 801194e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011952:	7b3a      	ldrb	r2, [r7, #12]
 8011954:	490f      	ldr	r1, [pc, #60]	; (8011994 <UARTEx_SetNbDataToProcess+0x98>)
 8011956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011958:	fb93 f3f2 	sdiv	r3, r3, r2
 801195c:	b29a      	uxth	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011964:	7bfb      	ldrb	r3, [r7, #15]
 8011966:	7b7a      	ldrb	r2, [r7, #13]
 8011968:	4909      	ldr	r1, [pc, #36]	; (8011990 <UARTEx_SetNbDataToProcess+0x94>)
 801196a:	5c8a      	ldrb	r2, [r1, r2]
 801196c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011970:	7b7a      	ldrb	r2, [r7, #13]
 8011972:	4908      	ldr	r1, [pc, #32]	; (8011994 <UARTEx_SetNbDataToProcess+0x98>)
 8011974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011976:	fb93 f3f2 	sdiv	r3, r3, r2
 801197a:	b29a      	uxth	r2, r3
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011982:	bf00      	nop
 8011984:	3714      	adds	r7, #20
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr
 801198e:	bf00      	nop
 8011990:	0801b790 	.word	0x0801b790
 8011994:	0801b798 	.word	0x0801b798

08011998 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011998:	b084      	sub	sp, #16
 801199a:	b480      	push	{r7}
 801199c:	b085      	sub	sp, #20
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	f107 001c 	add.w	r0, r7, #28
 80119a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80119ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80119b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80119b2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80119b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80119b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80119ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 80119bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80119be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80119c0:	68fa      	ldr	r2, [r7, #12]
 80119c2:	4313      	orrs	r3, r2
 80119c4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	685a      	ldr	r2, [r3, #4]
 80119ca:	4b07      	ldr	r3, [pc, #28]	; (80119e8 <SDMMC_Init+0x50>)
 80119cc:	4013      	ands	r3, r2
 80119ce:	68fa      	ldr	r2, [r7, #12]
 80119d0:	431a      	orrs	r2, r3
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	b004      	add	sp, #16
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop
 80119e8:	ffc02c00 	.word	0xffc02c00

080119ec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	370c      	adds	r7, #12
 80119fe:	46bd      	mov	sp, r7
 8011a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a04:	4770      	bx	lr

08011a06 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011a06:	b480      	push	{r7}
 8011a08:	b083      	sub	sp, #12
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
 8011a0e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	370c      	adds	r7, #12
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr

08011a28 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f043 0203 	orr.w	r2, r3, #3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr

08011a4a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011a4a:	b480      	push	{r7}
 8011a4c:	b083      	sub	sp, #12
 8011a4e:	af00      	add	r7, sp, #0
 8011a50:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	f003 0303 	and.w	r3, r3, #3
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	370c      	adds	r7, #12
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr
	...

08011a68 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b085      	sub	sp, #20
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011a8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011a92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011a94:	68fa      	ldr	r2, [r7, #12]
 8011a96:	4313      	orrs	r3, r2
 8011a98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	68da      	ldr	r2, [r3, #12]
 8011a9e:	4b06      	ldr	r3, [pc, #24]	; (8011ab8 <SDMMC_SendCommand+0x50>)
 8011aa0:	4013      	ands	r3, r2
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	431a      	orrs	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011aaa:	2300      	movs	r3, #0
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3714      	adds	r7, #20
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr
 8011ab8:	fffee0c0 	.word	0xfffee0c0

08011abc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	b2db      	uxtb	r3, r3
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr

08011ad6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011ad6:	b480      	push	{r7}
 8011ad8:	b085      	sub	sp, #20
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
 8011ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	3314      	adds	r3, #20
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	4413      	add	r3, r2
 8011aea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	685a      	ldr	r2, [r3, #4]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011b22:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011b28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011b2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	4313      	orrs	r3, r2
 8011b34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	431a      	orrs	r2, r3
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011b46:	2300      	movs	r3, #0

}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3714      	adds	r7, #20
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b088      	sub	sp, #32
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011b62:	2310      	movs	r3, #16
 8011b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b76:	f107 0308 	add.w	r3, r7, #8
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7ff ff73 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b86:	2110      	movs	r1, #16
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f000 fa5f 	bl	801204c <SDMMC_GetCmdResp1>
 8011b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b90:	69fb      	ldr	r3, [r7, #28]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3720      	adds	r7, #32
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	b088      	sub	sp, #32
 8011b9e:	af00      	add	r7, sp, #0
 8011ba0:	6078      	str	r0, [r7, #4]
 8011ba2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011ba8:	2311      	movs	r3, #17
 8011baa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bbc:	f107 0308 	add.w	r3, r7, #8
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff ff50 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bcc:	2111      	movs	r1, #17
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f000 fa3c 	bl	801204c <SDMMC_GetCmdResp1>
 8011bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bd6:	69fb      	ldr	r3, [r7, #28]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3720      	adds	r7, #32
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b088      	sub	sp, #32
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011bee:	2312      	movs	r3, #18
 8011bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c02:	f107 0308 	add.w	r3, r7, #8
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff ff2d 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c12:	2112      	movs	r1, #18
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f000 fa19 	bl	801204c <SDMMC_GetCmdResp1>
 8011c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c1c:	69fb      	ldr	r3, [r7, #28]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3720      	adds	r7, #32
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b088      	sub	sp, #32
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011c34:	2318      	movs	r3, #24
 8011c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c48:	f107 0308 	add.w	r3, r7, #8
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7ff ff0a 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c58:	2118      	movs	r1, #24
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f000 f9f6 	bl	801204c <SDMMC_GetCmdResp1>
 8011c60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c62:	69fb      	ldr	r3, [r7, #28]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3720      	adds	r7, #32
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011c7a:	2319      	movs	r3, #25
 8011c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c84:	2300      	movs	r3, #0
 8011c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c8e:	f107 0308 	add.w	r3, r7, #8
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7ff fee7 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c9e:	2119      	movs	r1, #25
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f000 f9d3 	bl	801204c <SDMMC_GetCmdResp1>
 8011ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ca8:	69fb      	ldr	r3, [r7, #28]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3720      	adds	r7, #32
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
	...

08011cb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b088      	sub	sp, #32
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011cc0:	230c      	movs	r3, #12
 8011cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cd2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cec:	f107 0308 	add.w	r3, r7, #8
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff feb8 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011cf8:	4a0b      	ldr	r2, [pc, #44]	; (8011d28 <SDMMC_CmdStopTransfer+0x74>)
 8011cfa:	210c      	movs	r1, #12
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 f9a5 	bl	801204c <SDMMC_GetCmdResp1>
 8011d02:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011d16:	d101      	bne.n	8011d1c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011d1c:	69fb      	ldr	r3, [r7, #28]
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	3720      	adds	r7, #32
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	05f5e100 	.word	0x05f5e100

08011d2c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011d3a:	2307      	movs	r3, #7
 8011d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d44:	2300      	movs	r3, #0
 8011d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d4e:	f107 0308 	add.w	r3, r7, #8
 8011d52:	4619      	mov	r1, r3
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff fe87 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d5e:	2107      	movs	r1, #7
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 f973 	bl	801204c <SDMMC_GetCmdResp1>
 8011d66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d68:	69fb      	ldr	r3, [r7, #28]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3720      	adds	r7, #32
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b088      	sub	sp, #32
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011d82:	2300      	movs	r3, #0
 8011d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d86:	2300      	movs	r3, #0
 8011d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d90:	f107 0308 	add.w	r3, r7, #8
 8011d94:	4619      	mov	r1, r3
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f7ff fe66 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f000 fb97 	bl	80124d0 <SDMMC_GetCmdError>
 8011da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da4:	69fb      	ldr	r3, [r7, #28]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3720      	adds	r7, #32
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b088      	sub	sp, #32
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011db6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011dbc:	2308      	movs	r3, #8
 8011dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dd0:	f107 0308 	add.w	r3, r7, #8
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7ff fe46 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 fb29 	bl	8012434 <SDMMC_GetCmdResp7>
 8011de2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de4:	69fb      	ldr	r3, [r7, #28]
}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3720      	adds	r7, #32
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b088      	sub	sp, #32
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
 8011df6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011dfc:	2337      	movs	r3, #55	; 0x37
 8011dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e10:	f107 0308 	add.w	r3, r7, #8
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7ff fe26 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e20:	2137      	movs	r1, #55	; 0x37
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 f912 	bl	801204c <SDMMC_GetCmdResp1>
 8011e28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e2a:	69fb      	ldr	r3, [r7, #28]
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3720      	adds	r7, #32
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b088      	sub	sp, #32
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011e42:	2329      	movs	r3, #41	; 0x29
 8011e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e56:	f107 0308 	add.w	r3, r7, #8
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7ff fe03 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 fa2e 	bl	80122c4 <SDMMC_GetCmdResp3>
 8011e68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e6a:	69fb      	ldr	r3, [r7, #28]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3720      	adds	r7, #32
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b088      	sub	sp, #32
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011e82:	2306      	movs	r3, #6
 8011e84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e96:	f107 0308 	add.w	r3, r7, #8
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f7ff fde3 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ea6:	2106      	movs	r1, #6
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 f8cf 	bl	801204c <SDMMC_GetCmdResp1>
 8011eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eb0:	69fb      	ldr	r3, [r7, #28]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3720      	adds	r7, #32
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b088      	sub	sp, #32
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011ec6:	2333      	movs	r3, #51	; 0x33
 8011ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011eda:	f107 0308 	add.w	r3, r7, #8
 8011ede:	4619      	mov	r1, r3
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ff fdc1 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eea:	2133      	movs	r1, #51	; 0x33
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 f8ad 	bl	801204c <SDMMC_GetCmdResp1>
 8011ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ef4:	69fb      	ldr	r3, [r7, #28]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3720      	adds	r7, #32
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b088      	sub	sp, #32
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011f06:	2300      	movs	r3, #0
 8011f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f14:	2300      	movs	r3, #0
 8011f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f1e:	f107 0308 	add.w	r3, r7, #8
 8011f22:	4619      	mov	r1, r3
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff fd9f 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 f980 	bl	8012230 <SDMMC_GetCmdResp2>
 8011f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f32:	69fb      	ldr	r3, [r7, #28]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3720      	adds	r7, #32
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b088      	sub	sp, #32
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011f4a:	2309      	movs	r3, #9
 8011f4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011f52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f54:	2300      	movs	r3, #0
 8011f56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f5e:	f107 0308 	add.w	r3, r7, #8
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7ff fd7f 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f960 	bl	8012230 <SDMMC_GetCmdResp2>
 8011f70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f72:	69fb      	ldr	r3, [r7, #28]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3720      	adds	r7, #32
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}

08011f7c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b088      	sub	sp, #32
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011f86:	2300      	movs	r3, #0
 8011f88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011f8a:	2303      	movs	r3, #3
 8011f8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f94:	2300      	movs	r3, #0
 8011f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f9e:	f107 0308 	add.w	r3, r7, #8
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff fd5f 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011faa:	683a      	ldr	r2, [r7, #0]
 8011fac:	2103      	movs	r1, #3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 f9c8 	bl	8012344 <SDMMC_GetCmdResp6>
 8011fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fb6:	69fb      	ldr	r3, [r7, #28]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3720      	adds	r7, #32
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b088      	sub	sp, #32
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011fce:	230d      	movs	r3, #13
 8011fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fe2:	f107 0308 	add.w	r3, r7, #8
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f7ff fd3d 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ff2:	210d      	movs	r1, #13
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f000 f829 	bl	801204c <SDMMC_GetCmdResp1>
 8011ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ffc:	69fb      	ldr	r3, [r7, #28]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3720      	adds	r7, #32
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b088      	sub	sp, #32
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801200e:	2300      	movs	r3, #0
 8012010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012012:	230d      	movs	r3, #13
 8012014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012016:	f44f 7380 	mov.w	r3, #256	; 0x100
 801201a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801201c:	2300      	movs	r3, #0
 801201e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012026:	f107 0308 	add.w	r3, r7, #8
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7ff fd1b 	bl	8011a68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012032:	f241 3288 	movw	r2, #5000	; 0x1388
 8012036:	210d      	movs	r1, #13
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 f807 	bl	801204c <SDMMC_GetCmdResp1>
 801203e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012040:	69fb      	ldr	r3, [r7, #28]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3720      	adds	r7, #32
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
	...

0801204c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b088      	sub	sp, #32
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	460b      	mov	r3, r1
 8012056:	607a      	str	r2, [r7, #4]
 8012058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801205a:	4b70      	ldr	r3, [pc, #448]	; (801221c <SDMMC_GetCmdResp1+0x1d0>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4a70      	ldr	r2, [pc, #448]	; (8012220 <SDMMC_GetCmdResp1+0x1d4>)
 8012060:	fba2 2303 	umull	r2, r3, r2, r3
 8012064:	0a5a      	lsrs	r2, r3, #9
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	fb02 f303 	mul.w	r3, r2, r3
 801206c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	1e5a      	subs	r2, r3, #1
 8012072:	61fa      	str	r2, [r7, #28]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d102      	bne.n	801207e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801207c:	e0c9      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012082:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012084:	69ba      	ldr	r2, [r7, #24]
 8012086:	4b67      	ldr	r3, [pc, #412]	; (8012224 <SDMMC_GetCmdResp1+0x1d8>)
 8012088:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801208a:	2b00      	cmp	r3, #0
 801208c:	d0ef      	beq.n	801206e <SDMMC_GetCmdResp1+0x22>
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1ea      	bne.n	801206e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801209c:	f003 0304 	and.w	r3, r3, #4
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d004      	beq.n	80120ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2204      	movs	r2, #4
 80120a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80120aa:	2304      	movs	r3, #4
 80120ac:	e0b1      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120b2:	f003 0301 	and.w	r3, r3, #1
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d004      	beq.n	80120c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2201      	movs	r2, #1
 80120be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80120c0:	2301      	movs	r3, #1
 80120c2:	e0a6      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	4a58      	ldr	r2, [pc, #352]	; (8012228 <SDMMC_GetCmdResp1+0x1dc>)
 80120c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7ff fcf6 	bl	8011abc <SDMMC_GetCommandResponse>
 80120d0:	4603      	mov	r3, r0
 80120d2:	461a      	mov	r2, r3
 80120d4:	7afb      	ldrb	r3, [r7, #11]
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d001      	beq.n	80120de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80120da:	2301      	movs	r3, #1
 80120dc:	e099      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80120de:	2100      	movs	r1, #0
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f7ff fcf8 	bl	8011ad6 <SDMMC_GetResponse>
 80120e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80120e8:	697a      	ldr	r2, [r7, #20]
 80120ea:	4b50      	ldr	r3, [pc, #320]	; (801222c <SDMMC_GetCmdResp1+0x1e0>)
 80120ec:	4013      	ands	r3, r2
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d101      	bne.n	80120f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80120f2:	2300      	movs	r3, #0
 80120f4:	e08d      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	da02      	bge.n	8012102 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80120fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012100:	e087      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012108:	2b00      	cmp	r3, #0
 801210a:	d001      	beq.n	8012110 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801210c:	2340      	movs	r3, #64	; 0x40
 801210e:	e080      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012116:	2b00      	cmp	r3, #0
 8012118:	d001      	beq.n	801211e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801211a:	2380      	movs	r3, #128	; 0x80
 801211c:	e079      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012124:	2b00      	cmp	r3, #0
 8012126:	d002      	beq.n	801212e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012128:	f44f 7380 	mov.w	r3, #256	; 0x100
 801212c:	e071      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801212e:	697b      	ldr	r3, [r7, #20]
 8012130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012138:	f44f 7300 	mov.w	r3, #512	; 0x200
 801213c:	e069      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012144:	2b00      	cmp	r3, #0
 8012146:	d002      	beq.n	801214e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801214c:	e061      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012154:	2b00      	cmp	r3, #0
 8012156:	d002      	beq.n	801215e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801215c:	e059      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012164:	2b00      	cmp	r3, #0
 8012166:	d002      	beq.n	801216e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801216c:	e051      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012174:	2b00      	cmp	r3, #0
 8012176:	d002      	beq.n	801217e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801217c:	e049      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801218c:	e041      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012194:	2b00      	cmp	r3, #0
 8012196:	d002      	beq.n	801219e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801219c:	e039      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d002      	beq.n	80121ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80121a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80121ac:	e031      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80121b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80121bc:	e029      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d002      	beq.n	80121ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80121c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80121cc:	e021      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d002      	beq.n	80121de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80121d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80121dc:	e019      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d002      	beq.n	80121ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80121e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80121ec:	e011      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80121f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80121fc:	e009      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	f003 0308 	and.w	r3, r3, #8
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012208:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801220c:	e001      	b.n	8012212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012212:	4618      	mov	r0, r3
 8012214:	3720      	adds	r7, #32
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	24000028 	.word	0x24000028
 8012220:	10624dd3 	.word	0x10624dd3
 8012224:	00200045 	.word	0x00200045
 8012228:	002000c5 	.word	0x002000c5
 801222c:	fdffe008 	.word	0xfdffe008

08012230 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012230:	b480      	push	{r7}
 8012232:	b085      	sub	sp, #20
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012238:	4b1f      	ldr	r3, [pc, #124]	; (80122b8 <SDMMC_GetCmdResp2+0x88>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4a1f      	ldr	r2, [pc, #124]	; (80122bc <SDMMC_GetCmdResp2+0x8c>)
 801223e:	fba2 2303 	umull	r2, r3, r2, r3
 8012242:	0a5b      	lsrs	r3, r3, #9
 8012244:	f241 3288 	movw	r2, #5000	; 0x1388
 8012248:	fb02 f303 	mul.w	r3, r2, r3
 801224c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	1e5a      	subs	r2, r3, #1
 8012252:	60fa      	str	r2, [r7, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d102      	bne.n	801225e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801225c:	e026      	b.n	80122ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012262:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801226a:	2b00      	cmp	r3, #0
 801226c:	d0ef      	beq.n	801224e <SDMMC_GetCmdResp2+0x1e>
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ea      	bne.n	801224e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801227c:	f003 0304 	and.w	r3, r3, #4
 8012280:	2b00      	cmp	r3, #0
 8012282:	d004      	beq.n	801228e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2204      	movs	r2, #4
 8012288:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801228a:	2304      	movs	r3, #4
 801228c:	e00e      	b.n	80122ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012292:	f003 0301 	and.w	r3, r3, #1
 8012296:	2b00      	cmp	r3, #0
 8012298:	d004      	beq.n	80122a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2201      	movs	r2, #1
 801229e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122a0:	2301      	movs	r3, #1
 80122a2:	e003      	b.n	80122ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	4a06      	ldr	r2, [pc, #24]	; (80122c0 <SDMMC_GetCmdResp2+0x90>)
 80122a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80122aa:	2300      	movs	r3, #0
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3714      	adds	r7, #20
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr
 80122b8:	24000028 	.word	0x24000028
 80122bc:	10624dd3 	.word	0x10624dd3
 80122c0:	002000c5 	.word	0x002000c5

080122c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80122c4:	b480      	push	{r7}
 80122c6:	b085      	sub	sp, #20
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80122cc:	4b1a      	ldr	r3, [pc, #104]	; (8012338 <SDMMC_GetCmdResp3+0x74>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	4a1a      	ldr	r2, [pc, #104]	; (801233c <SDMMC_GetCmdResp3+0x78>)
 80122d2:	fba2 2303 	umull	r2, r3, r2, r3
 80122d6:	0a5b      	lsrs	r3, r3, #9
 80122d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80122dc:	fb02 f303 	mul.w	r3, r2, r3
 80122e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	1e5a      	subs	r2, r3, #1
 80122e6:	60fa      	str	r2, [r7, #12]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d102      	bne.n	80122f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80122ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80122f0:	e01b      	b.n	801232a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0ef      	beq.n	80122e2 <SDMMC_GetCmdResp3+0x1e>
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1ea      	bne.n	80122e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012310:	f003 0304 	and.w	r3, r3, #4
 8012314:	2b00      	cmp	r3, #0
 8012316:	d004      	beq.n	8012322 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2204      	movs	r2, #4
 801231c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801231e:	2304      	movs	r3, #4
 8012320:	e003      	b.n	801232a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4a06      	ldr	r2, [pc, #24]	; (8012340 <SDMMC_GetCmdResp3+0x7c>)
 8012326:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012328:	2300      	movs	r3, #0
}
 801232a:	4618      	mov	r0, r3
 801232c:	3714      	adds	r7, #20
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	24000028 	.word	0x24000028
 801233c:	10624dd3 	.word	0x10624dd3
 8012340:	002000c5 	.word	0x002000c5

08012344 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b088      	sub	sp, #32
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	460b      	mov	r3, r1
 801234e:	607a      	str	r2, [r7, #4]
 8012350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012352:	4b35      	ldr	r3, [pc, #212]	; (8012428 <SDMMC_GetCmdResp6+0xe4>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4a35      	ldr	r2, [pc, #212]	; (801242c <SDMMC_GetCmdResp6+0xe8>)
 8012358:	fba2 2303 	umull	r2, r3, r2, r3
 801235c:	0a5b      	lsrs	r3, r3, #9
 801235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012362:	fb02 f303 	mul.w	r3, r2, r3
 8012366:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	1e5a      	subs	r2, r3, #1
 801236c:	61fa      	str	r2, [r7, #28]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d102      	bne.n	8012378 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012372:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012376:	e052      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801237c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012384:	2b00      	cmp	r3, #0
 8012386:	d0ef      	beq.n	8012368 <SDMMC_GetCmdResp6+0x24>
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1ea      	bne.n	8012368 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012396:	f003 0304 	and.w	r3, r3, #4
 801239a:	2b00      	cmp	r3, #0
 801239c:	d004      	beq.n	80123a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2204      	movs	r2, #4
 80123a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123a4:	2304      	movs	r3, #4
 80123a6:	e03a      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123ac:	f003 0301 	and.w	r3, r3, #1
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d004      	beq.n	80123be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2201      	movs	r2, #1
 80123b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123ba:	2301      	movs	r3, #1
 80123bc:	e02f      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80123be:	68f8      	ldr	r0, [r7, #12]
 80123c0:	f7ff fb7c 	bl	8011abc <SDMMC_GetCommandResponse>
 80123c4:	4603      	mov	r3, r0
 80123c6:	461a      	mov	r2, r3
 80123c8:	7afb      	ldrb	r3, [r7, #11]
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d001      	beq.n	80123d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123ce:	2301      	movs	r3, #1
 80123d0:	e025      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	4a16      	ldr	r2, [pc, #88]	; (8012430 <SDMMC_GetCmdResp6+0xec>)
 80123d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80123d8:	2100      	movs	r1, #0
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f7ff fb7b 	bl	8011ad6 <SDMMC_GetResponse>
 80123e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	0c1b      	lsrs	r3, r3, #16
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80123f6:	2300      	movs	r3, #0
 80123f8:	e011      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012408:	e009      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012410:	2b00      	cmp	r3, #0
 8012412:	d002      	beq.n	801241a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012418:	e001      	b.n	801241e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801241a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801241e:	4618      	mov	r0, r3
 8012420:	3720      	adds	r7, #32
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	24000028 	.word	0x24000028
 801242c:	10624dd3 	.word	0x10624dd3
 8012430:	002000c5 	.word	0x002000c5

08012434 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012434:	b480      	push	{r7}
 8012436:	b085      	sub	sp, #20
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801243c:	4b22      	ldr	r3, [pc, #136]	; (80124c8 <SDMMC_GetCmdResp7+0x94>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4a22      	ldr	r2, [pc, #136]	; (80124cc <SDMMC_GetCmdResp7+0x98>)
 8012442:	fba2 2303 	umull	r2, r3, r2, r3
 8012446:	0a5b      	lsrs	r3, r3, #9
 8012448:	f241 3288 	movw	r2, #5000	; 0x1388
 801244c:	fb02 f303 	mul.w	r3, r2, r3
 8012450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	1e5a      	subs	r2, r3, #1
 8012456:	60fa      	str	r2, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801245c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012460:	e02c      	b.n	80124bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012466:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0ef      	beq.n	8012452 <SDMMC_GetCmdResp7+0x1e>
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1ea      	bne.n	8012452 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2204      	movs	r2, #4
 801248c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801248e:	2304      	movs	r3, #4
 8012490:	e014      	b.n	80124bc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012496:	f003 0301 	and.w	r3, r3, #1
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2201      	movs	r2, #1
 80124a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e009      	b.n	80124bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d002      	beq.n	80124ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2240      	movs	r2, #64	; 0x40
 80124b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80124ba:	2300      	movs	r3, #0

}
 80124bc:	4618      	mov	r0, r3
 80124be:	3714      	adds	r7, #20
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr
 80124c8:	24000028 	.word	0x24000028
 80124cc:	10624dd3 	.word	0x10624dd3

080124d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b085      	sub	sp, #20
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80124d8:	4b11      	ldr	r3, [pc, #68]	; (8012520 <SDMMC_GetCmdError+0x50>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	4a11      	ldr	r2, [pc, #68]	; (8012524 <SDMMC_GetCmdError+0x54>)
 80124de:	fba2 2303 	umull	r2, r3, r2, r3
 80124e2:	0a5b      	lsrs	r3, r3, #9
 80124e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80124e8:	fb02 f303 	mul.w	r3, r2, r3
 80124ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	1e5a      	subs	r2, r3, #1
 80124f2:	60fa      	str	r2, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d102      	bne.n	80124fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80124f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124fc:	e009      	b.n	8012512 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012506:	2b00      	cmp	r3, #0
 8012508:	d0f1      	beq.n	80124ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4a06      	ldr	r2, [pc, #24]	; (8012528 <SDMMC_GetCmdError+0x58>)
 801250e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012510:	2300      	movs	r3, #0
}
 8012512:	4618      	mov	r0, r3
 8012514:	3714      	adds	r7, #20
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	24000028 	.word	0x24000028
 8012524:	10624dd3 	.word	0x10624dd3
 8012528:	002000c5 	.word	0x002000c5

0801252c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801252c:	b084      	sub	sp, #16
 801252e:	b580      	push	{r7, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	f107 001c 	add.w	r0, r7, #28
 801253a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	2b01      	cmp	r3, #1
 8012542:	d120      	bne.n	8012586 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	68da      	ldr	r2, [r3, #12]
 8012554:	4b2a      	ldr	r3, [pc, #168]	; (8012600 <USB_CoreInit+0xd4>)
 8012556:	4013      	ands	r3, r2
 8012558:	687a      	ldr	r2, [r7, #4]
 801255a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801256a:	2b01      	cmp	r3, #1
 801256c:	d105      	bne.n	801257a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 faf8 	bl	8013b70 <USB_CoreReset>
 8012580:	4603      	mov	r3, r0
 8012582:	73fb      	strb	r3, [r7, #15]
 8012584:	e01a      	b.n	80125bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f001 faec 	bl	8013b70 <USB_CoreReset>
 8012598:	4603      	mov	r3, r0
 801259a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801259c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d106      	bne.n	80125b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	639a      	str	r2, [r3, #56]	; 0x38
 80125ae:	e005      	b.n	80125bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80125bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d116      	bne.n	80125f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80125d0:	4b0c      	ldr	r3, [pc, #48]	; (8012604 <USB_CoreInit+0xd8>)
 80125d2:	4313      	orrs	r3, r2
 80125d4:	687a      	ldr	r2, [r7, #4]
 80125d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	689b      	ldr	r3, [r3, #8]
 80125dc:	f043 0206 	orr.w	r2, r3, #6
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	f043 0220 	orr.w	r2, r3, #32
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80125f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125fc:	b004      	add	sp, #16
 80125fe:	4770      	bx	lr
 8012600:	ffbdffbf 	.word	0xffbdffbf
 8012604:	03ee0000 	.word	0x03ee0000

08012608 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012608:	b480      	push	{r7}
 801260a:	b087      	sub	sp, #28
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	4613      	mov	r3, r2
 8012614:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012616:	79fb      	ldrb	r3, [r7, #7]
 8012618:	2b02      	cmp	r3, #2
 801261a:	d165      	bne.n	80126e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	4a41      	ldr	r2, [pc, #260]	; (8012724 <USB_SetTurnaroundTime+0x11c>)
 8012620:	4293      	cmp	r3, r2
 8012622:	d906      	bls.n	8012632 <USB_SetTurnaroundTime+0x2a>
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	4a40      	ldr	r2, [pc, #256]	; (8012728 <USB_SetTurnaroundTime+0x120>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d202      	bcs.n	8012632 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801262c:	230f      	movs	r3, #15
 801262e:	617b      	str	r3, [r7, #20]
 8012630:	e062      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	4a3c      	ldr	r2, [pc, #240]	; (8012728 <USB_SetTurnaroundTime+0x120>)
 8012636:	4293      	cmp	r3, r2
 8012638:	d306      	bcc.n	8012648 <USB_SetTurnaroundTime+0x40>
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	4a3b      	ldr	r2, [pc, #236]	; (801272c <USB_SetTurnaroundTime+0x124>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d202      	bcs.n	8012648 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012642:	230e      	movs	r3, #14
 8012644:	617b      	str	r3, [r7, #20]
 8012646:	e057      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	4a38      	ldr	r2, [pc, #224]	; (801272c <USB_SetTurnaroundTime+0x124>)
 801264c:	4293      	cmp	r3, r2
 801264e:	d306      	bcc.n	801265e <USB_SetTurnaroundTime+0x56>
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	4a37      	ldr	r2, [pc, #220]	; (8012730 <USB_SetTurnaroundTime+0x128>)
 8012654:	4293      	cmp	r3, r2
 8012656:	d202      	bcs.n	801265e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012658:	230d      	movs	r3, #13
 801265a:	617b      	str	r3, [r7, #20]
 801265c:	e04c      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	4a33      	ldr	r2, [pc, #204]	; (8012730 <USB_SetTurnaroundTime+0x128>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d306      	bcc.n	8012674 <USB_SetTurnaroundTime+0x6c>
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	4a32      	ldr	r2, [pc, #200]	; (8012734 <USB_SetTurnaroundTime+0x12c>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d802      	bhi.n	8012674 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801266e:	230c      	movs	r3, #12
 8012670:	617b      	str	r3, [r7, #20]
 8012672:	e041      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	4a2f      	ldr	r2, [pc, #188]	; (8012734 <USB_SetTurnaroundTime+0x12c>)
 8012678:	4293      	cmp	r3, r2
 801267a:	d906      	bls.n	801268a <USB_SetTurnaroundTime+0x82>
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	4a2e      	ldr	r2, [pc, #184]	; (8012738 <USB_SetTurnaroundTime+0x130>)
 8012680:	4293      	cmp	r3, r2
 8012682:	d802      	bhi.n	801268a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012684:	230b      	movs	r3, #11
 8012686:	617b      	str	r3, [r7, #20]
 8012688:	e036      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	4a2a      	ldr	r2, [pc, #168]	; (8012738 <USB_SetTurnaroundTime+0x130>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d906      	bls.n	80126a0 <USB_SetTurnaroundTime+0x98>
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	4a29      	ldr	r2, [pc, #164]	; (801273c <USB_SetTurnaroundTime+0x134>)
 8012696:	4293      	cmp	r3, r2
 8012698:	d802      	bhi.n	80126a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801269a:	230a      	movs	r3, #10
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	e02b      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	4a26      	ldr	r2, [pc, #152]	; (801273c <USB_SetTurnaroundTime+0x134>)
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d906      	bls.n	80126b6 <USB_SetTurnaroundTime+0xae>
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	4a25      	ldr	r2, [pc, #148]	; (8012740 <USB_SetTurnaroundTime+0x138>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d202      	bcs.n	80126b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80126b0:	2309      	movs	r3, #9
 80126b2:	617b      	str	r3, [r7, #20]
 80126b4:	e020      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	4a21      	ldr	r2, [pc, #132]	; (8012740 <USB_SetTurnaroundTime+0x138>)
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d306      	bcc.n	80126cc <USB_SetTurnaroundTime+0xc4>
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	4a20      	ldr	r2, [pc, #128]	; (8012744 <USB_SetTurnaroundTime+0x13c>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d802      	bhi.n	80126cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80126c6:	2308      	movs	r3, #8
 80126c8:	617b      	str	r3, [r7, #20]
 80126ca:	e015      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	4a1d      	ldr	r2, [pc, #116]	; (8012744 <USB_SetTurnaroundTime+0x13c>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d906      	bls.n	80126e2 <USB_SetTurnaroundTime+0xda>
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	4a1c      	ldr	r2, [pc, #112]	; (8012748 <USB_SetTurnaroundTime+0x140>)
 80126d8:	4293      	cmp	r3, r2
 80126da:	d202      	bcs.n	80126e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80126dc:	2307      	movs	r3, #7
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	e00a      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80126e2:	2306      	movs	r3, #6
 80126e4:	617b      	str	r3, [r7, #20]
 80126e6:	e007      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80126e8:	79fb      	ldrb	r3, [r7, #7]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d102      	bne.n	80126f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80126ee:	2309      	movs	r3, #9
 80126f0:	617b      	str	r3, [r7, #20]
 80126f2:	e001      	b.n	80126f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80126f4:	2309      	movs	r3, #9
 80126f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	68da      	ldr	r2, [r3, #12]
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	029b      	lsls	r3, r3, #10
 801270c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012710:	431a      	orrs	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	371c      	adds	r7, #28
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr
 8012724:	00d8acbf 	.word	0x00d8acbf
 8012728:	00e4e1c0 	.word	0x00e4e1c0
 801272c:	00f42400 	.word	0x00f42400
 8012730:	01067380 	.word	0x01067380
 8012734:	011a499f 	.word	0x011a499f
 8012738:	01312cff 	.word	0x01312cff
 801273c:	014ca43f 	.word	0x014ca43f
 8012740:	016e3600 	.word	0x016e3600
 8012744:	01a6ab1f 	.word	0x01a6ab1f
 8012748:	01e84800 	.word	0x01e84800

0801274c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	689b      	ldr	r3, [r3, #8]
 8012758:	f043 0201 	orr.w	r2, r3, #1
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801276e:	b480      	push	{r7}
 8012770:	b083      	sub	sp, #12
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	f023 0201 	bic.w	r2, r3, #1
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	460b      	mov	r3, r1
 801279a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801279c:	2300      	movs	r3, #0
 801279e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80127ac:	78fb      	ldrb	r3, [r7, #3]
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d115      	bne.n	80127de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68db      	ldr	r3, [r3, #12]
 80127b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80127be:	2001      	movs	r0, #1
 80127c0:	f7f1 f94a 	bl	8003a58 <HAL_Delay>
      ms++;
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	3301      	adds	r3, #1
 80127c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f001 f93f 	bl	8013a4e <USB_GetMode>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	d01e      	beq.n	8012814 <USB_SetCurrentMode+0x84>
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2b31      	cmp	r3, #49	; 0x31
 80127da:	d9f0      	bls.n	80127be <USB_SetCurrentMode+0x2e>
 80127dc:	e01a      	b.n	8012814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80127de:	78fb      	ldrb	r3, [r7, #3]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d115      	bne.n	8012810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80127f0:	2001      	movs	r0, #1
 80127f2:	f7f1 f931 	bl	8003a58 <HAL_Delay>
      ms++;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	3301      	adds	r3, #1
 80127fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f001 f926 	bl	8013a4e <USB_GetMode>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d005      	beq.n	8012814 <USB_SetCurrentMode+0x84>
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2b31      	cmp	r3, #49	; 0x31
 801280c:	d9f0      	bls.n	80127f0 <USB_SetCurrentMode+0x60>
 801280e:	e001      	b.n	8012814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012810:	2301      	movs	r3, #1
 8012812:	e005      	b.n	8012820 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	2b32      	cmp	r3, #50	; 0x32
 8012818:	d101      	bne.n	801281e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801281a:	2301      	movs	r3, #1
 801281c:	e000      	b.n	8012820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801281e:	2300      	movs	r3, #0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012828:	b084      	sub	sp, #16
 801282a:	b580      	push	{r7, lr}
 801282c:	b086      	sub	sp, #24
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
 8012832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801283a:	2300      	movs	r3, #0
 801283c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012842:	2300      	movs	r3, #0
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	e009      	b.n	801285c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	3340      	adds	r3, #64	; 0x40
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	4413      	add	r3, r2
 8012852:	2200      	movs	r2, #0
 8012854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	3301      	adds	r3, #1
 801285a:	613b      	str	r3, [r7, #16]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2b0e      	cmp	r3, #14
 8012860:	d9f2      	bls.n	8012848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012864:	2b00      	cmp	r3, #0
 8012866:	d11c      	bne.n	80128a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012876:	f043 0302 	orr.w	r3, r3, #2
 801287a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012880:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	e005      	b.n	80128ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128b4:	461a      	mov	r2, r3
 80128b6:	2300      	movs	r3, #0
 80128b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128c0:	4619      	mov	r1, r3
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128c8:	461a      	mov	r2, r3
 80128ca:	680b      	ldr	r3, [r1, #0]
 80128cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80128ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d10c      	bne.n	80128ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80128d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d104      	bne.n	80128e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80128da:	2100      	movs	r1, #0
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f000 f965 	bl	8012bac <USB_SetDevSpeed>
 80128e2:	e008      	b.n	80128f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80128e4:	2101      	movs	r1, #1
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f960 	bl	8012bac <USB_SetDevSpeed>
 80128ec:	e003      	b.n	80128f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80128ee:	2103      	movs	r1, #3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 f95b 	bl	8012bac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80128f6:	2110      	movs	r1, #16
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 f8f3 	bl	8012ae4 <USB_FlushTxFifo>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d001      	beq.n	8012908 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 f91f 	bl	8012b4c <USB_FlushRxFifo>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012914:	2301      	movs	r3, #1
 8012916:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801291e:	461a      	mov	r2, r3
 8012920:	2300      	movs	r3, #0
 8012922:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801292a:	461a      	mov	r2, r3
 801292c:	2300      	movs	r3, #0
 801292e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012936:	461a      	mov	r2, r3
 8012938:	2300      	movs	r3, #0
 801293a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801293c:	2300      	movs	r3, #0
 801293e:	613b      	str	r3, [r7, #16]
 8012940:	e043      	b.n	80129ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	015a      	lsls	r2, r3, #5
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	4413      	add	r3, r2
 801294a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012958:	d118      	bne.n	801298c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d10a      	bne.n	8012976 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	015a      	lsls	r2, r3, #5
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	4413      	add	r3, r2
 8012968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801296c:	461a      	mov	r2, r3
 801296e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012972:	6013      	str	r3, [r2, #0]
 8012974:	e013      	b.n	801299e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	015a      	lsls	r2, r3, #5
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	4413      	add	r3, r2
 801297e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012982:	461a      	mov	r2, r3
 8012984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012988:	6013      	str	r3, [r2, #0]
 801298a:	e008      	b.n	801299e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	015a      	lsls	r2, r3, #5
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	4413      	add	r3, r2
 8012994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012998:	461a      	mov	r2, r3
 801299a:	2300      	movs	r3, #0
 801299c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	015a      	lsls	r2, r3, #5
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	4413      	add	r3, r2
 80129a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129aa:	461a      	mov	r2, r3
 80129ac:	2300      	movs	r3, #0
 80129ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	015a      	lsls	r2, r3, #5
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	4413      	add	r3, r2
 80129b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129bc:	461a      	mov	r2, r3
 80129be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80129c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	3301      	adds	r3, #1
 80129c8:	613b      	str	r3, [r7, #16]
 80129ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129cc:	693a      	ldr	r2, [r7, #16]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d3b7      	bcc.n	8012942 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80129d2:	2300      	movs	r3, #0
 80129d4:	613b      	str	r3, [r7, #16]
 80129d6:	e043      	b.n	8012a60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	015a      	lsls	r2, r3, #5
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80129ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80129ee:	d118      	bne.n	8012a22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d10a      	bne.n	8012a0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	015a      	lsls	r2, r3, #5
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	4413      	add	r3, r2
 80129fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a02:	461a      	mov	r2, r3
 8012a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012a08:	6013      	str	r3, [r2, #0]
 8012a0a:	e013      	b.n	8012a34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	015a      	lsls	r2, r3, #5
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	4413      	add	r3, r2
 8012a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a18:	461a      	mov	r2, r3
 8012a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012a1e:	6013      	str	r3, [r2, #0]
 8012a20:	e008      	b.n	8012a34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a2e:	461a      	mov	r2, r3
 8012a30:	2300      	movs	r3, #0
 8012a32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	015a      	lsls	r2, r3, #5
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a40:	461a      	mov	r2, r3
 8012a42:	2300      	movs	r3, #0
 8012a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	015a      	lsls	r2, r3, #5
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a52:	461a      	mov	r2, r3
 8012a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012a58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	613b      	str	r3, [r7, #16]
 8012a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a62:	693a      	ldr	r2, [r7, #16]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d3b7      	bcc.n	80129d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a6e:	691b      	ldr	r3, [r3, #16]
 8012a70:	68fa      	ldr	r2, [r7, #12]
 8012a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012a88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d105      	bne.n	8012a9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	f043 0210 	orr.w	r2, r3, #16
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	699a      	ldr	r2, [r3, #24]
 8012aa0:	4b0e      	ldr	r3, [pc, #56]	; (8012adc <USB_DevInit+0x2b4>)
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d005      	beq.n	8012aba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	699b      	ldr	r3, [r3, #24]
 8012ab2:	f043 0208 	orr.w	r2, r3, #8
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d105      	bne.n	8012acc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	699a      	ldr	r2, [r3, #24]
 8012ac4:	4b06      	ldr	r3, [pc, #24]	; (8012ae0 <USB_DevInit+0x2b8>)
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3718      	adds	r7, #24
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ad8:	b004      	add	sp, #16
 8012ada:	4770      	bx	lr
 8012adc:	803c3800 	.word	0x803c3800
 8012ae0:	40000004 	.word	0x40000004

08012ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b085      	sub	sp, #20
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012aee:	2300      	movs	r3, #0
 8012af0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	3301      	adds	r3, #1
 8012af6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	4a13      	ldr	r2, [pc, #76]	; (8012b48 <USB_FlushTxFifo+0x64>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d901      	bls.n	8012b04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012b00:	2303      	movs	r3, #3
 8012b02:	e01b      	b.n	8012b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	691b      	ldr	r3, [r3, #16]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	daf2      	bge.n	8012af2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	019b      	lsls	r3, r3, #6
 8012b14:	f043 0220 	orr.w	r2, r3, #32
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	4a08      	ldr	r2, [pc, #32]	; (8012b48 <USB_FlushTxFifo+0x64>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d901      	bls.n	8012b2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012b2a:	2303      	movs	r3, #3
 8012b2c:	e006      	b.n	8012b3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	f003 0320 	and.w	r3, r3, #32
 8012b36:	2b20      	cmp	r3, #32
 8012b38:	d0f0      	beq.n	8012b1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012b3a:	2300      	movs	r3, #0
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3714      	adds	r7, #20
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr
 8012b48:	00030d40 	.word	0x00030d40

08012b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b085      	sub	sp, #20
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012b54:	2300      	movs	r3, #0
 8012b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	4a11      	ldr	r2, [pc, #68]	; (8012ba8 <USB_FlushRxFifo+0x5c>)
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d901      	bls.n	8012b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012b66:	2303      	movs	r3, #3
 8012b68:	e018      	b.n	8012b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	691b      	ldr	r3, [r3, #16]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	daf2      	bge.n	8012b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012b72:	2300      	movs	r3, #0
 8012b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2210      	movs	r2, #16
 8012b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	4a08      	ldr	r2, [pc, #32]	; (8012ba8 <USB_FlushRxFifo+0x5c>)
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d901      	bls.n	8012b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012b8a:	2303      	movs	r3, #3
 8012b8c:	e006      	b.n	8012b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	f003 0310 	and.w	r3, r3, #16
 8012b96:	2b10      	cmp	r3, #16
 8012b98:	d0f0      	beq.n	8012b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3714      	adds	r7, #20
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	00030d40 	.word	0x00030d40

08012bac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b085      	sub	sp, #20
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	68f9      	ldr	r1, [r7, #12]
 8012bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bcc:	4313      	orrs	r3, r2
 8012bce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012bde:	b480      	push	{r7}
 8012be0:	b087      	sub	sp, #28
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	f003 0306 	and.w	r3, r3, #6
 8012bf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d102      	bne.n	8012c04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	75fb      	strb	r3, [r7, #23]
 8012c02:	e00a      	b.n	8012c1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2b02      	cmp	r3, #2
 8012c08:	d002      	beq.n	8012c10 <USB_GetDevSpeed+0x32>
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2b06      	cmp	r3, #6
 8012c0e:	d102      	bne.n	8012c16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012c10:	2302      	movs	r3, #2
 8012c12:	75fb      	strb	r3, [r7, #23]
 8012c14:	e001      	b.n	8012c1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012c16:	230f      	movs	r3, #15
 8012c18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	371c      	adds	r7, #28
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b085      	sub	sp, #20
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	785b      	ldrb	r3, [r3, #1]
 8012c40:	2b01      	cmp	r3, #1
 8012c42:	d139      	bne.n	8012cb8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c4a:	69da      	ldr	r2, [r3, #28]
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	f003 030f 	and.w	r3, r3, #15
 8012c54:	2101      	movs	r1, #1
 8012c56:	fa01 f303 	lsl.w	r3, r1, r3
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	68f9      	ldr	r1, [r7, #12]
 8012c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c62:	4313      	orrs	r3, r2
 8012c64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	015a      	lsls	r2, r3, #5
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d153      	bne.n	8012d24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	015a      	lsls	r2, r3, #5
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	4413      	add	r3, r2
 8012c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	791b      	ldrb	r3, [r3, #4]
 8012c96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012c98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	059b      	lsls	r3, r3, #22
 8012c9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ca0:	431a      	orrs	r2, r3
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	0159      	lsls	r1, r3, #5
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	440b      	add	r3, r1
 8012caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cae:	4619      	mov	r1, r3
 8012cb0:	4b20      	ldr	r3, [pc, #128]	; (8012d34 <USB_ActivateEndpoint+0x10c>)
 8012cb2:	4313      	orrs	r3, r2
 8012cb4:	600b      	str	r3, [r1, #0]
 8012cb6:	e035      	b.n	8012d24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cbe:	69da      	ldr	r2, [r3, #28]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	f003 030f 	and.w	r3, r3, #15
 8012cc8:	2101      	movs	r1, #1
 8012cca:	fa01 f303 	lsl.w	r3, r1, r3
 8012cce:	041b      	lsls	r3, r3, #16
 8012cd0:	68f9      	ldr	r1, [r7, #12]
 8012cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cd6:	4313      	orrs	r3, r2
 8012cd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	015a      	lsls	r2, r3, #5
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d119      	bne.n	8012d24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	015a      	lsls	r2, r3, #5
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	689b      	ldr	r3, [r3, #8]
 8012d02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	791b      	ldrb	r3, [r3, #4]
 8012d0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012d0c:	430b      	orrs	r3, r1
 8012d0e:	431a      	orrs	r2, r3
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	0159      	lsls	r1, r3, #5
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	440b      	add	r3, r1
 8012d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	4b05      	ldr	r3, [pc, #20]	; (8012d34 <USB_ActivateEndpoint+0x10c>)
 8012d20:	4313      	orrs	r3, r2
 8012d22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3714      	adds	r7, #20
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	10008000 	.word	0x10008000

08012d38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	b085      	sub	sp, #20
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	785b      	ldrb	r3, [r3, #1]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d161      	bne.n	8012e18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	015a      	lsls	r2, r3, #5
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d6a:	d11f      	bne.n	8012dac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	015a      	lsls	r2, r3, #5
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	4413      	add	r3, r2
 8012d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68ba      	ldr	r2, [r7, #8]
 8012d7c:	0151      	lsls	r1, r2, #5
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	440a      	add	r2, r1
 8012d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012d8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	015a      	lsls	r2, r3, #5
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	4413      	add	r3, r2
 8012d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	68ba      	ldr	r2, [r7, #8]
 8012d9c:	0151      	lsls	r1, r2, #5
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	440a      	add	r2, r1
 8012da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	f003 030f 	and.w	r3, r3, #15
 8012dbc:	2101      	movs	r1, #1
 8012dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	43db      	mvns	r3, r3
 8012dc6:	68f9      	ldr	r1, [r7, #12]
 8012dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012dcc:	4013      	ands	r3, r2
 8012dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dd6:	69da      	ldr	r2, [r3, #28]
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	f003 030f 	and.w	r3, r3, #15
 8012de0:	2101      	movs	r1, #1
 8012de2:	fa01 f303 	lsl.w	r3, r1, r3
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	43db      	mvns	r3, r3
 8012dea:	68f9      	ldr	r1, [r7, #12]
 8012dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012df0:	4013      	ands	r3, r2
 8012df2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	015a      	lsls	r2, r3, #5
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	4413      	add	r3, r2
 8012dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	0159      	lsls	r1, r3, #5
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	440b      	add	r3, r1
 8012e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4b35      	ldr	r3, [pc, #212]	; (8012ee8 <USB_DeactivateEndpoint+0x1b0>)
 8012e12:	4013      	ands	r3, r2
 8012e14:	600b      	str	r3, [r1, #0]
 8012e16:	e060      	b.n	8012eda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	015a      	lsls	r2, r3, #5
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	4413      	add	r3, r2
 8012e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e2e:	d11f      	bne.n	8012e70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	015a      	lsls	r2, r3, #5
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	4413      	add	r3, r2
 8012e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	0151      	lsls	r1, r2, #5
 8012e42:	68fa      	ldr	r2, [r7, #12]
 8012e44:	440a      	add	r2, r1
 8012e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012e4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	015a      	lsls	r2, r3, #5
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	4413      	add	r3, r2
 8012e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	68ba      	ldr	r2, [r7, #8]
 8012e60:	0151      	lsls	r1, r2, #5
 8012e62:	68fa      	ldr	r2, [r7, #12]
 8012e64:	440a      	add	r2, r1
 8012e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f003 030f 	and.w	r3, r3, #15
 8012e80:	2101      	movs	r1, #1
 8012e82:	fa01 f303 	lsl.w	r3, r1, r3
 8012e86:	041b      	lsls	r3, r3, #16
 8012e88:	43db      	mvns	r3, r3
 8012e8a:	68f9      	ldr	r1, [r7, #12]
 8012e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e90:	4013      	ands	r3, r2
 8012e92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9a:	69da      	ldr	r2, [r3, #28]
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	f003 030f 	and.w	r3, r3, #15
 8012ea4:	2101      	movs	r1, #1
 8012ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8012eaa:	041b      	lsls	r3, r3, #16
 8012eac:	43db      	mvns	r3, r3
 8012eae:	68f9      	ldr	r1, [r7, #12]
 8012eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012eb4:	4013      	ands	r3, r2
 8012eb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	015a      	lsls	r2, r3, #5
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	0159      	lsls	r1, r3, #5
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	440b      	add	r3, r1
 8012ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	4b05      	ldr	r3, [pc, #20]	; (8012eec <USB_DeactivateEndpoint+0x1b4>)
 8012ed6:	4013      	ands	r3, r2
 8012ed8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3714      	adds	r7, #20
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr
 8012ee8:	ec337800 	.word	0xec337800
 8012eec:	eff37800 	.word	0xeff37800

08012ef0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b08a      	sub	sp, #40	; 0x28
 8012ef4:	af02      	add	r7, sp, #8
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	4613      	mov	r3, r2
 8012efc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	781b      	ldrb	r3, [r3, #0]
 8012f06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	785b      	ldrb	r3, [r3, #1]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	f040 8181 	bne.w	8013214 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d132      	bne.n	8012f80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	015a      	lsls	r2, r3, #5
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	4413      	add	r3, r2
 8012f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f26:	691a      	ldr	r2, [r3, #16]
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	0159      	lsls	r1, r3, #5
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	440b      	add	r3, r1
 8012f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f34:	4619      	mov	r1, r3
 8012f36:	4ba5      	ldr	r3, [pc, #660]	; (80131cc <USB_EPStartXfer+0x2dc>)
 8012f38:	4013      	ands	r3, r2
 8012f3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f3c:	69bb      	ldr	r3, [r7, #24]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f48:	691b      	ldr	r3, [r3, #16]
 8012f4a:	69ba      	ldr	r2, [r7, #24]
 8012f4c:	0151      	lsls	r1, r2, #5
 8012f4e:	69fa      	ldr	r2, [r7, #28]
 8012f50:	440a      	add	r2, r1
 8012f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	015a      	lsls	r2, r3, #5
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	4413      	add	r3, r2
 8012f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f68:	691a      	ldr	r2, [r3, #16]
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	0159      	lsls	r1, r3, #5
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	440b      	add	r3, r1
 8012f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f76:	4619      	mov	r1, r3
 8012f78:	4b95      	ldr	r3, [pc, #596]	; (80131d0 <USB_EPStartXfer+0x2e0>)
 8012f7a:	4013      	ands	r3, r2
 8012f7c:	610b      	str	r3, [r1, #16]
 8012f7e:	e092      	b.n	80130a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012f80:	69bb      	ldr	r3, [r7, #24]
 8012f82:	015a      	lsls	r2, r3, #5
 8012f84:	69fb      	ldr	r3, [r7, #28]
 8012f86:	4413      	add	r3, r2
 8012f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f8c:	691a      	ldr	r2, [r3, #16]
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	0159      	lsls	r1, r3, #5
 8012f92:	69fb      	ldr	r3, [r7, #28]
 8012f94:	440b      	add	r3, r1
 8012f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	4b8c      	ldr	r3, [pc, #560]	; (80131d0 <USB_EPStartXfer+0x2e0>)
 8012f9e:	4013      	ands	r3, r2
 8012fa0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	015a      	lsls	r2, r3, #5
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	4413      	add	r3, r2
 8012faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fae:	691a      	ldr	r2, [r3, #16]
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	0159      	lsls	r1, r3, #5
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	440b      	add	r3, r1
 8012fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	4b83      	ldr	r3, [pc, #524]	; (80131cc <USB_EPStartXfer+0x2dc>)
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d11a      	bne.n	8013000 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	691a      	ldr	r2, [r3, #16]
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d903      	bls.n	8012fde <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	689a      	ldr	r2, [r3, #8]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	015a      	lsls	r2, r3, #5
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	69ba      	ldr	r2, [r7, #24]
 8012fee:	0151      	lsls	r1, r2, #5
 8012ff0:	69fa      	ldr	r2, [r7, #28]
 8012ff2:	440a      	add	r2, r1
 8012ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ffc:	6113      	str	r3, [r2, #16]
 8012ffe:	e01b      	b.n	8013038 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	015a      	lsls	r2, r3, #5
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	4413      	add	r3, r2
 8013008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801300c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	6919      	ldr	r1, [r3, #16]
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	440b      	add	r3, r1
 8013018:	1e59      	subs	r1, r3, #1
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	689b      	ldr	r3, [r3, #8]
 801301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013022:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013024:	4b6b      	ldr	r3, [pc, #428]	; (80131d4 <USB_EPStartXfer+0x2e4>)
 8013026:	400b      	ands	r3, r1
 8013028:	69b9      	ldr	r1, [r7, #24]
 801302a:	0148      	lsls	r0, r1, #5
 801302c:	69f9      	ldr	r1, [r7, #28]
 801302e:	4401      	add	r1, r0
 8013030:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013034:	4313      	orrs	r3, r2
 8013036:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	015a      	lsls	r2, r3, #5
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	4413      	add	r3, r2
 8013040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013044:	691a      	ldr	r2, [r3, #16]
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	691b      	ldr	r3, [r3, #16]
 801304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801304e:	69b9      	ldr	r1, [r7, #24]
 8013050:	0148      	lsls	r0, r1, #5
 8013052:	69f9      	ldr	r1, [r7, #28]
 8013054:	4401      	add	r1, r0
 8013056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801305a:	4313      	orrs	r3, r2
 801305c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	791b      	ldrb	r3, [r3, #4]
 8013062:	2b01      	cmp	r3, #1
 8013064:	d11f      	bne.n	80130a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	015a      	lsls	r2, r3, #5
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	4413      	add	r3, r2
 801306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	69ba      	ldr	r2, [r7, #24]
 8013076:	0151      	lsls	r1, r2, #5
 8013078:	69fa      	ldr	r2, [r7, #28]
 801307a:	440a      	add	r2, r1
 801307c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013080:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013084:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	015a      	lsls	r2, r3, #5
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	4413      	add	r3, r2
 801308e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013092:	691b      	ldr	r3, [r3, #16]
 8013094:	69ba      	ldr	r2, [r7, #24]
 8013096:	0151      	lsls	r1, r2, #5
 8013098:	69fa      	ldr	r2, [r7, #28]
 801309a:	440a      	add	r2, r1
 801309c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80130a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80130a6:	79fb      	ldrb	r3, [r7, #7]
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	d14b      	bne.n	8013144 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	69db      	ldr	r3, [r3, #28]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d009      	beq.n	80130c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	015a      	lsls	r2, r3, #5
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	4413      	add	r3, r2
 80130bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c0:	461a      	mov	r2, r3
 80130c2:	68bb      	ldr	r3, [r7, #8]
 80130c4:	69db      	ldr	r3, [r3, #28]
 80130c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	791b      	ldrb	r3, [r3, #4]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d128      	bne.n	8013122 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d110      	bne.n	8013102 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	015a      	lsls	r2, r3, #5
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	4413      	add	r3, r2
 80130e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	69ba      	ldr	r2, [r7, #24]
 80130f0:	0151      	lsls	r1, r2, #5
 80130f2:	69fa      	ldr	r2, [r7, #28]
 80130f4:	440a      	add	r2, r1
 80130f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	e00f      	b.n	8013122 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	015a      	lsls	r2, r3, #5
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	4413      	add	r3, r2
 801310a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	0151      	lsls	r1, r2, #5
 8013114:	69fa      	ldr	r2, [r7, #28]
 8013116:	440a      	add	r2, r1
 8013118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801311c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013120:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	015a      	lsls	r2, r3, #5
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	4413      	add	r3, r2
 801312a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	69ba      	ldr	r2, [r7, #24]
 8013132:	0151      	lsls	r1, r2, #5
 8013134:	69fa      	ldr	r2, [r7, #28]
 8013136:	440a      	add	r2, r1
 8013138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801313c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013140:	6013      	str	r3, [r2, #0]
 8013142:	e16a      	b.n	801341a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013144:	69bb      	ldr	r3, [r7, #24]
 8013146:	015a      	lsls	r2, r3, #5
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	4413      	add	r3, r2
 801314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	69ba      	ldr	r2, [r7, #24]
 8013154:	0151      	lsls	r1, r2, #5
 8013156:	69fa      	ldr	r2, [r7, #28]
 8013158:	440a      	add	r2, r1
 801315a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801315e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013162:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	791b      	ldrb	r3, [r3, #4]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d015      	beq.n	8013198 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	691b      	ldr	r3, [r3, #16]
 8013170:	2b00      	cmp	r3, #0
 8013172:	f000 8152 	beq.w	801341a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013176:	69fb      	ldr	r3, [r7, #28]
 8013178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801317c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	f003 030f 	and.w	r3, r3, #15
 8013186:	2101      	movs	r1, #1
 8013188:	fa01 f303 	lsl.w	r3, r1, r3
 801318c:	69f9      	ldr	r1, [r7, #28]
 801318e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013192:	4313      	orrs	r3, r2
 8013194:	634b      	str	r3, [r1, #52]	; 0x34
 8013196:	e140      	b.n	801341a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013198:	69fb      	ldr	r3, [r7, #28]
 801319a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801319e:	689b      	ldr	r3, [r3, #8]
 80131a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d117      	bne.n	80131d8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	015a      	lsls	r2, r3, #5
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	4413      	add	r3, r2
 80131b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	69ba      	ldr	r2, [r7, #24]
 80131b8:	0151      	lsls	r1, r2, #5
 80131ba:	69fa      	ldr	r2, [r7, #28]
 80131bc:	440a      	add	r2, r1
 80131be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	e016      	b.n	80131f8 <USB_EPStartXfer+0x308>
 80131ca:	bf00      	nop
 80131cc:	e007ffff 	.word	0xe007ffff
 80131d0:	fff80000 	.word	0xfff80000
 80131d4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80131d8:	69bb      	ldr	r3, [r7, #24]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	69ba      	ldr	r2, [r7, #24]
 80131e8:	0151      	lsls	r1, r2, #5
 80131ea:	69fa      	ldr	r2, [r7, #28]
 80131ec:	440a      	add	r2, r1
 80131ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80131f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80131f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	68d9      	ldr	r1, [r3, #12]
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	781a      	ldrb	r2, [r3, #0]
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	b298      	uxth	r0, r3
 8013206:	79fb      	ldrb	r3, [r7, #7]
 8013208:	9300      	str	r3, [sp, #0]
 801320a:	4603      	mov	r3, r0
 801320c:	68f8      	ldr	r0, [r7, #12]
 801320e:	f000 f9b9 	bl	8013584 <USB_WritePacket>
 8013212:	e102      	b.n	801341a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	015a      	lsls	r2, r3, #5
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	4413      	add	r3, r2
 801321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013220:	691a      	ldr	r2, [r3, #16]
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	0159      	lsls	r1, r3, #5
 8013226:	69fb      	ldr	r3, [r7, #28]
 8013228:	440b      	add	r3, r1
 801322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801322e:	4619      	mov	r1, r3
 8013230:	4b7c      	ldr	r3, [pc, #496]	; (8013424 <USB_EPStartXfer+0x534>)
 8013232:	4013      	ands	r3, r2
 8013234:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013236:	69bb      	ldr	r3, [r7, #24]
 8013238:	015a      	lsls	r2, r3, #5
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	4413      	add	r3, r2
 801323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013242:	691a      	ldr	r2, [r3, #16]
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	0159      	lsls	r1, r3, #5
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	440b      	add	r3, r1
 801324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013250:	4619      	mov	r1, r3
 8013252:	4b75      	ldr	r3, [pc, #468]	; (8013428 <USB_EPStartXfer+0x538>)
 8013254:	4013      	ands	r3, r2
 8013256:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d12f      	bne.n	80132be <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	691b      	ldr	r3, [r3, #16]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d003      	beq.n	801326e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013266:	68bb      	ldr	r3, [r7, #8]
 8013268:	689a      	ldr	r2, [r3, #8]
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	689a      	ldr	r2, [r3, #8]
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	015a      	lsls	r2, r3, #5
 801327a:	69fb      	ldr	r3, [r7, #28]
 801327c:	4413      	add	r3, r2
 801327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013282:	691a      	ldr	r2, [r3, #16]
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	6a1b      	ldr	r3, [r3, #32]
 8013288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801328c:	69b9      	ldr	r1, [r7, #24]
 801328e:	0148      	lsls	r0, r1, #5
 8013290:	69f9      	ldr	r1, [r7, #28]
 8013292:	4401      	add	r1, r0
 8013294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013298:	4313      	orrs	r3, r2
 801329a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	015a      	lsls	r2, r3, #5
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	4413      	add	r3, r2
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	691b      	ldr	r3, [r3, #16]
 80132aa:	69ba      	ldr	r2, [r7, #24]
 80132ac:	0151      	lsls	r1, r2, #5
 80132ae:	69fa      	ldr	r2, [r7, #28]
 80132b0:	440a      	add	r2, r1
 80132b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132ba:	6113      	str	r3, [r2, #16]
 80132bc:	e05f      	b.n	801337e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	691b      	ldr	r3, [r3, #16]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d123      	bne.n	801330e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80132c6:	69bb      	ldr	r3, [r7, #24]
 80132c8:	015a      	lsls	r2, r3, #5
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	4413      	add	r3, r2
 80132ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132d2:	691a      	ldr	r2, [r3, #16]
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132dc:	69b9      	ldr	r1, [r7, #24]
 80132de:	0148      	lsls	r0, r1, #5
 80132e0:	69f9      	ldr	r1, [r7, #28]
 80132e2:	4401      	add	r1, r0
 80132e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80132e8:	4313      	orrs	r3, r2
 80132ea:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	015a      	lsls	r2, r3, #5
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	4413      	add	r3, r2
 80132f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	69ba      	ldr	r2, [r7, #24]
 80132fc:	0151      	lsls	r1, r2, #5
 80132fe:	69fa      	ldr	r2, [r7, #28]
 8013300:	440a      	add	r2, r1
 8013302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801330a:	6113      	str	r3, [r2, #16]
 801330c:	e037      	b.n	801337e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	691a      	ldr	r2, [r3, #16]
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	689b      	ldr	r3, [r3, #8]
 8013316:	4413      	add	r3, r2
 8013318:	1e5a      	subs	r2, r3, #1
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	689b      	ldr	r3, [r3, #8]
 801331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013322:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	8afa      	ldrh	r2, [r7, #22]
 801332a:	fb03 f202 	mul.w	r2, r3, r2
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	015a      	lsls	r2, r3, #5
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	4413      	add	r3, r2
 801333a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801333e:	691a      	ldr	r2, [r3, #16]
 8013340:	8afb      	ldrh	r3, [r7, #22]
 8013342:	04d9      	lsls	r1, r3, #19
 8013344:	4b39      	ldr	r3, [pc, #228]	; (801342c <USB_EPStartXfer+0x53c>)
 8013346:	400b      	ands	r3, r1
 8013348:	69b9      	ldr	r1, [r7, #24]
 801334a:	0148      	lsls	r0, r1, #5
 801334c:	69f9      	ldr	r1, [r7, #28]
 801334e:	4401      	add	r1, r0
 8013350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013354:	4313      	orrs	r3, r2
 8013356:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	015a      	lsls	r2, r3, #5
 801335c:	69fb      	ldr	r3, [r7, #28]
 801335e:	4413      	add	r3, r2
 8013360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013364:	691a      	ldr	r2, [r3, #16]
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	6a1b      	ldr	r3, [r3, #32]
 801336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801336e:	69b9      	ldr	r1, [r7, #24]
 8013370:	0148      	lsls	r0, r1, #5
 8013372:	69f9      	ldr	r1, [r7, #28]
 8013374:	4401      	add	r1, r0
 8013376:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801337a:	4313      	orrs	r3, r2
 801337c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801337e:	79fb      	ldrb	r3, [r7, #7]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d10d      	bne.n	80133a0 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d009      	beq.n	80133a0 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	68d9      	ldr	r1, [r3, #12]
 8013390:	69bb      	ldr	r3, [r7, #24]
 8013392:	015a      	lsls	r2, r3, #5
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	4413      	add	r3, r2
 8013398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801339c:	460a      	mov	r2, r1
 801339e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	791b      	ldrb	r3, [r3, #4]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d128      	bne.n	80133fa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80133a8:	69fb      	ldr	r3, [r7, #28]
 80133aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d110      	bne.n	80133da <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	015a      	lsls	r2, r3, #5
 80133bc:	69fb      	ldr	r3, [r7, #28]
 80133be:	4413      	add	r3, r2
 80133c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	69ba      	ldr	r2, [r7, #24]
 80133c8:	0151      	lsls	r1, r2, #5
 80133ca:	69fa      	ldr	r2, [r7, #28]
 80133cc:	440a      	add	r2, r1
 80133ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80133d6:	6013      	str	r3, [r2, #0]
 80133d8:	e00f      	b.n	80133fa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	015a      	lsls	r2, r3, #5
 80133de:	69fb      	ldr	r3, [r7, #28]
 80133e0:	4413      	add	r3, r2
 80133e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	69ba      	ldr	r2, [r7, #24]
 80133ea:	0151      	lsls	r1, r2, #5
 80133ec:	69fa      	ldr	r2, [r7, #28]
 80133ee:	440a      	add	r2, r1
 80133f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80133f8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80133fa:	69bb      	ldr	r3, [r7, #24]
 80133fc:	015a      	lsls	r2, r3, #5
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	4413      	add	r3, r2
 8013402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	69ba      	ldr	r2, [r7, #24]
 801340a:	0151      	lsls	r1, r2, #5
 801340c:	69fa      	ldr	r2, [r7, #28]
 801340e:	440a      	add	r2, r1
 8013410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013418:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801341a:	2300      	movs	r3, #0
}
 801341c:	4618      	mov	r0, r3
 801341e:	3720      	adds	r7, #32
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	fff80000 	.word	0xfff80000
 8013428:	e007ffff 	.word	0xe007ffff
 801342c:	1ff80000 	.word	0x1ff80000

08013430 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013430:	b480      	push	{r7}
 8013432:	b087      	sub	sp, #28
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801343a:	2300      	movs	r3, #0
 801343c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801343e:	2300      	movs	r3, #0
 8013440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	785b      	ldrb	r3, [r3, #1]
 801344a:	2b01      	cmp	r3, #1
 801344c:	d14a      	bne.n	80134e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	015a      	lsls	r2, r3, #5
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	4413      	add	r3, r2
 8013458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013466:	f040 8086 	bne.w	8013576 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	015a      	lsls	r2, r3, #5
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	4413      	add	r3, r2
 8013474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	683a      	ldr	r2, [r7, #0]
 801347c:	7812      	ldrb	r2, [r2, #0]
 801347e:	0151      	lsls	r1, r2, #5
 8013480:	693a      	ldr	r2, [r7, #16]
 8013482:	440a      	add	r2, r1
 8013484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013488:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801348c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	015a      	lsls	r2, r3, #5
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	4413      	add	r3, r2
 8013498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	683a      	ldr	r2, [r7, #0]
 80134a0:	7812      	ldrb	r2, [r2, #0]
 80134a2:	0151      	lsls	r1, r2, #5
 80134a4:	693a      	ldr	r2, [r7, #16]
 80134a6:	440a      	add	r2, r1
 80134a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80134b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	3301      	adds	r3, #1
 80134b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80134be:	4293      	cmp	r3, r2
 80134c0:	d902      	bls.n	80134c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80134c2:	2301      	movs	r3, #1
 80134c4:	75fb      	strb	r3, [r7, #23]
          break;
 80134c6:	e056      	b.n	8013576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	015a      	lsls	r2, r3, #5
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	4413      	add	r3, r2
 80134d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134e0:	d0e7      	beq.n	80134b2 <USB_EPStopXfer+0x82>
 80134e2:	e048      	b.n	8013576 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	015a      	lsls	r2, r3, #5
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	4413      	add	r3, r2
 80134ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134fc:	d13b      	bne.n	8013576 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	015a      	lsls	r2, r3, #5
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	4413      	add	r3, r2
 8013508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	683a      	ldr	r2, [r7, #0]
 8013510:	7812      	ldrb	r2, [r2, #0]
 8013512:	0151      	lsls	r1, r2, #5
 8013514:	693a      	ldr	r2, [r7, #16]
 8013516:	440a      	add	r2, r1
 8013518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801351c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013520:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	015a      	lsls	r2, r3, #5
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	4413      	add	r3, r2
 801352c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	683a      	ldr	r2, [r7, #0]
 8013534:	7812      	ldrb	r2, [r2, #0]
 8013536:	0151      	lsls	r1, r2, #5
 8013538:	693a      	ldr	r2, [r7, #16]
 801353a:	440a      	add	r2, r1
 801353c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	3301      	adds	r3, #1
 801354a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f242 7210 	movw	r2, #10000	; 0x2710
 8013552:	4293      	cmp	r3, r2
 8013554:	d902      	bls.n	801355c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013556:	2301      	movs	r3, #1
 8013558:	75fb      	strb	r3, [r7, #23]
          break;
 801355a:	e00c      	b.n	8013576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	015a      	lsls	r2, r3, #5
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	4413      	add	r3, r2
 8013566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013574:	d0e7      	beq.n	8013546 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013576:	7dfb      	ldrb	r3, [r7, #23]
}
 8013578:	4618      	mov	r0, r3
 801357a:	371c      	adds	r7, #28
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013584:	b480      	push	{r7}
 8013586:	b089      	sub	sp, #36	; 0x24
 8013588:	af00      	add	r7, sp, #0
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	60b9      	str	r1, [r7, #8]
 801358e:	4611      	mov	r1, r2
 8013590:	461a      	mov	r2, r3
 8013592:	460b      	mov	r3, r1
 8013594:	71fb      	strb	r3, [r7, #7]
 8013596:	4613      	mov	r3, r2
 8013598:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80135a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d123      	bne.n	80135f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80135aa:	88bb      	ldrh	r3, [r7, #4]
 80135ac:	3303      	adds	r3, #3
 80135ae:	089b      	lsrs	r3, r3, #2
 80135b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80135b2:	2300      	movs	r3, #0
 80135b4:	61bb      	str	r3, [r7, #24]
 80135b6:	e018      	b.n	80135ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80135b8:	79fb      	ldrb	r3, [r7, #7]
 80135ba:	031a      	lsls	r2, r3, #12
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	4413      	add	r3, r2
 80135c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80135c4:	461a      	mov	r2, r3
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	3301      	adds	r3, #1
 80135d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	3301      	adds	r3, #1
 80135d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	3301      	adds	r3, #1
 80135dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	3301      	adds	r3, #1
 80135e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	3301      	adds	r3, #1
 80135e8:	61bb      	str	r3, [r7, #24]
 80135ea:	69ba      	ldr	r2, [r7, #24]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d3e2      	bcc.n	80135b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80135f2:	2300      	movs	r3, #0
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	3724      	adds	r7, #36	; 0x24
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013600:	b480      	push	{r7}
 8013602:	b08b      	sub	sp, #44	; 0x2c
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	4613      	mov	r3, r2
 801360c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013616:	88fb      	ldrh	r3, [r7, #6]
 8013618:	089b      	lsrs	r3, r3, #2
 801361a:	b29b      	uxth	r3, r3
 801361c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801361e:	88fb      	ldrh	r3, [r7, #6]
 8013620:	f003 0303 	and.w	r3, r3, #3
 8013624:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013626:	2300      	movs	r3, #0
 8013628:	623b      	str	r3, [r7, #32]
 801362a:	e014      	b.n	8013656 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013636:	601a      	str	r2, [r3, #0]
    pDest++;
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	3301      	adds	r3, #1
 801363c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013640:	3301      	adds	r3, #1
 8013642:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013646:	3301      	adds	r3, #1
 8013648:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364c:	3301      	adds	r3, #1
 801364e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013650:	6a3b      	ldr	r3, [r7, #32]
 8013652:	3301      	adds	r3, #1
 8013654:	623b      	str	r3, [r7, #32]
 8013656:	6a3a      	ldr	r2, [r7, #32]
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	429a      	cmp	r2, r3
 801365c:	d3e6      	bcc.n	801362c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801365e:	8bfb      	ldrh	r3, [r7, #30]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d01e      	beq.n	80136a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013664:	2300      	movs	r3, #0
 8013666:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013668:	69bb      	ldr	r3, [r7, #24]
 801366a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801366e:	461a      	mov	r2, r3
 8013670:	f107 0310 	add.w	r3, r7, #16
 8013674:	6812      	ldr	r2, [r2, #0]
 8013676:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013678:	693a      	ldr	r2, [r7, #16]
 801367a:	6a3b      	ldr	r3, [r7, #32]
 801367c:	b2db      	uxtb	r3, r3
 801367e:	00db      	lsls	r3, r3, #3
 8013680:	fa22 f303 	lsr.w	r3, r2, r3
 8013684:	b2da      	uxtb	r2, r3
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	701a      	strb	r2, [r3, #0]
      i++;
 801368a:	6a3b      	ldr	r3, [r7, #32]
 801368c:	3301      	adds	r3, #1
 801368e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013692:	3301      	adds	r3, #1
 8013694:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013696:	8bfb      	ldrh	r3, [r7, #30]
 8013698:	3b01      	subs	r3, #1
 801369a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801369c:	8bfb      	ldrh	r3, [r7, #30]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1ea      	bne.n	8013678 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80136a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	372c      	adds	r7, #44	; 0x2c
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	781b      	ldrb	r3, [r3, #0]
 80136c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80136c4:	683b      	ldr	r3, [r7, #0]
 80136c6:	785b      	ldrb	r3, [r3, #1]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d12c      	bne.n	8013726 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	015a      	lsls	r2, r3, #5
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	4413      	add	r3, r2
 80136d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	db12      	blt.n	8013704 <USB_EPSetStall+0x54>
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d00f      	beq.n	8013704 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	015a      	lsls	r2, r3, #5
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	4413      	add	r3, r2
 80136ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	68ba      	ldr	r2, [r7, #8]
 80136f4:	0151      	lsls	r1, r2, #5
 80136f6:	68fa      	ldr	r2, [r7, #12]
 80136f8:	440a      	add	r2, r1
 80136fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013702:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	015a      	lsls	r2, r3, #5
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	4413      	add	r3, r2
 801370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	68ba      	ldr	r2, [r7, #8]
 8013714:	0151      	lsls	r1, r2, #5
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	440a      	add	r2, r1
 801371a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801371e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013722:	6013      	str	r3, [r2, #0]
 8013724:	e02b      	b.n	801377e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	015a      	lsls	r2, r3, #5
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	4413      	add	r3, r2
 801372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b00      	cmp	r3, #0
 8013736:	db12      	blt.n	801375e <USB_EPSetStall+0xae>
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00f      	beq.n	801375e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	015a      	lsls	r2, r3, #5
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	4413      	add	r3, r2
 8013746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	68ba      	ldr	r2, [r7, #8]
 801374e:	0151      	lsls	r1, r2, #5
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	440a      	add	r2, r1
 8013754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013758:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801375c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	015a      	lsls	r2, r3, #5
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	4413      	add	r3, r2
 8013766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	68ba      	ldr	r2, [r7, #8]
 801376e:	0151      	lsls	r1, r2, #5
 8013770:	68fa      	ldr	r2, [r7, #12]
 8013772:	440a      	add	r2, r1
 8013774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801377c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3714      	adds	r7, #20
 8013784:	46bd      	mov	sp, r7
 8013786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378a:	4770      	bx	lr

0801378c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801378c:	b480      	push	{r7}
 801378e:	b085      	sub	sp, #20
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	785b      	ldrb	r3, [r3, #1]
 80137a4:	2b01      	cmp	r3, #1
 80137a6:	d128      	bne.n	80137fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	015a      	lsls	r2, r3, #5
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	4413      	add	r3, r2
 80137b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	0151      	lsls	r1, r2, #5
 80137ba:	68fa      	ldr	r2, [r7, #12]
 80137bc:	440a      	add	r2, r1
 80137be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80137c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	791b      	ldrb	r3, [r3, #4]
 80137cc:	2b03      	cmp	r3, #3
 80137ce:	d003      	beq.n	80137d8 <USB_EPClearStall+0x4c>
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	791b      	ldrb	r3, [r3, #4]
 80137d4:	2b02      	cmp	r3, #2
 80137d6:	d138      	bne.n	801384a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	015a      	lsls	r2, r3, #5
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	4413      	add	r3, r2
 80137e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	68ba      	ldr	r2, [r7, #8]
 80137e8:	0151      	lsls	r1, r2, #5
 80137ea:	68fa      	ldr	r2, [r7, #12]
 80137ec:	440a      	add	r2, r1
 80137ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80137f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137f6:	6013      	str	r3, [r2, #0]
 80137f8:	e027      	b.n	801384a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	015a      	lsls	r2, r3, #5
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	4413      	add	r3, r2
 8013802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	0151      	lsls	r1, r2, #5
 801380c:	68fa      	ldr	r2, [r7, #12]
 801380e:	440a      	add	r2, r1
 8013810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013818:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	791b      	ldrb	r3, [r3, #4]
 801381e:	2b03      	cmp	r3, #3
 8013820:	d003      	beq.n	801382a <USB_EPClearStall+0x9e>
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	791b      	ldrb	r3, [r3, #4]
 8013826:	2b02      	cmp	r3, #2
 8013828:	d10f      	bne.n	801384a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	015a      	lsls	r2, r3, #5
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	4413      	add	r3, r2
 8013832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	68ba      	ldr	r2, [r7, #8]
 801383a:	0151      	lsls	r1, r2, #5
 801383c:	68fa      	ldr	r2, [r7, #12]
 801383e:	440a      	add	r2, r1
 8013840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013848:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801384a:	2300      	movs	r3, #0
}
 801384c:	4618      	mov	r0, r3
 801384e:	3714      	adds	r7, #20
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	68fa      	ldr	r2, [r7, #12]
 8013872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013876:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801387a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	78fb      	ldrb	r3, [r7, #3]
 8013886:	011b      	lsls	r3, r3, #4
 8013888:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801388c:	68f9      	ldr	r1, [r7, #12]
 801388e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013892:	4313      	orrs	r3, r2
 8013894:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013896:	2300      	movs	r3, #0
}
 8013898:	4618      	mov	r0, r3
 801389a:	3714      	adds	r7, #20
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr

080138a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	68fa      	ldr	r2, [r7, #12]
 80138ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80138be:	f023 0303 	bic.w	r3, r3, #3
 80138c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	68fa      	ldr	r2, [r7, #12]
 80138ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138d2:	f023 0302 	bic.w	r3, r3, #2
 80138d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138d8:	2300      	movs	r3, #0
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3714      	adds	r7, #20
 80138de:	46bd      	mov	sp, r7
 80138e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e4:	4770      	bx	lr

080138e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80138e6:	b480      	push	{r7}
 80138e8:	b085      	sub	sp, #20
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013900:	f023 0303 	bic.w	r3, r3, #3
 8013904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	68fa      	ldr	r2, [r7, #12]
 8013910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013914:	f043 0302 	orr.w	r3, r3, #2
 8013918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	3714      	adds	r7, #20
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	695b      	ldr	r3, [r3, #20]
 8013934:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	699b      	ldr	r3, [r3, #24]
 801393a:	68fa      	ldr	r2, [r7, #12]
 801393c:	4013      	ands	r3, r2
 801393e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013940:	68fb      	ldr	r3, [r7, #12]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3714      	adds	r7, #20
 8013946:	46bd      	mov	sp, r7
 8013948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394c:	4770      	bx	lr

0801394e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801394e:	b480      	push	{r7}
 8013950:	b085      	sub	sp, #20
 8013952:	af00      	add	r7, sp, #0
 8013954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013960:	699b      	ldr	r3, [r3, #24]
 8013962:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801396a:	69db      	ldr	r3, [r3, #28]
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	4013      	ands	r3, r2
 8013970:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	0c1b      	lsrs	r3, r3, #16
}
 8013976:	4618      	mov	r0, r3
 8013978:	3714      	adds	r7, #20
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013982:	b480      	push	{r7}
 8013984:	b085      	sub	sp, #20
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013994:	699b      	ldr	r3, [r3, #24]
 8013996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801399e:	69db      	ldr	r3, [r3, #28]
 80139a0:	68ba      	ldr	r2, [r7, #8]
 80139a2:	4013      	ands	r3, r2
 80139a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	b29b      	uxth	r3, r3
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr

080139b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139b6:	b480      	push	{r7}
 80139b8:	b085      	sub	sp, #20
 80139ba:	af00      	add	r7, sp, #0
 80139bc:	6078      	str	r0, [r7, #4]
 80139be:	460b      	mov	r3, r1
 80139c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80139c6:	78fb      	ldrb	r3, [r7, #3]
 80139c8:	015a      	lsls	r2, r3, #5
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	4413      	add	r3, r2
 80139ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d2:	689b      	ldr	r3, [r3, #8]
 80139d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139dc:	695b      	ldr	r3, [r3, #20]
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	4013      	ands	r3, r2
 80139e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80139e4:	68bb      	ldr	r3, [r7, #8]
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3714      	adds	r7, #20
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr

080139f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80139f2:	b480      	push	{r7}
 80139f4:	b087      	sub	sp, #28
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	460b      	mov	r3, r1
 80139fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a08:	691b      	ldr	r3, [r3, #16]
 8013a0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013a16:	78fb      	ldrb	r3, [r7, #3]
 8013a18:	f003 030f 	and.w	r3, r3, #15
 8013a1c:	68fa      	ldr	r2, [r7, #12]
 8013a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8013a22:	01db      	lsls	r3, r3, #7
 8013a24:	b2db      	uxtb	r3, r3
 8013a26:	693a      	ldr	r2, [r7, #16]
 8013a28:	4313      	orrs	r3, r2
 8013a2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013a2c:	78fb      	ldrb	r3, [r7, #3]
 8013a2e:	015a      	lsls	r2, r3, #5
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	4413      	add	r3, r2
 8013a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	693a      	ldr	r2, [r7, #16]
 8013a3c:	4013      	ands	r3, r2
 8013a3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013a40:	68bb      	ldr	r3, [r7, #8]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	371c      	adds	r7, #28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4c:	4770      	bx	lr

08013a4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013a4e:	b480      	push	{r7}
 8013a50:	b083      	sub	sp, #12
 8013a52:	af00      	add	r7, sp, #0
 8013a54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	695b      	ldr	r3, [r3, #20]
 8013a5a:	f003 0301 	and.w	r3, r3, #1
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr
	...

08013a6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b085      	sub	sp, #20
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a86:	4619      	mov	r1, r3
 8013a88:	4b09      	ldr	r3, [pc, #36]	; (8013ab0 <USB_ActivateSetup+0x44>)
 8013a8a:	4013      	ands	r3, r2
 8013a8c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	68fa      	ldr	r2, [r7, #12]
 8013a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013aa2:	2300      	movs	r3, #0
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	fffff800 	.word	0xfffff800

08013ab4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b087      	sub	sp, #28
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	460b      	mov	r3, r1
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	333c      	adds	r3, #60	; 0x3c
 8013aca:	3304      	adds	r3, #4
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	4a26      	ldr	r2, [pc, #152]	; (8013b6c <USB_EP0_OutStart+0xb8>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d90a      	bls.n	8013aee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ae8:	d101      	bne.n	8013aee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	e037      	b.n	8013b5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013af4:	461a      	mov	r2, r3
 8013af6:	2300      	movs	r3, #0
 8013af8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	697a      	ldr	r2, [r7, #20]
 8013b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b14:	691b      	ldr	r3, [r3, #16]
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b1c:	f043 0318 	orr.w	r3, r3, #24
 8013b20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b28:	691b      	ldr	r3, [r3, #16]
 8013b2a:	697a      	ldr	r2, [r7, #20]
 8013b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013b34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013b36:	7afb      	ldrb	r3, [r7, #11]
 8013b38:	2b01      	cmp	r3, #1
 8013b3a:	d10f      	bne.n	8013b5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b42:	461a      	mov	r2, r3
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	697a      	ldr	r2, [r7, #20]
 8013b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b5c:	2300      	movs	r3, #0
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	371c      	adds	r7, #28
 8013b62:	46bd      	mov	sp, r7
 8013b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b68:	4770      	bx	lr
 8013b6a:	bf00      	nop
 8013b6c:	4f54300a 	.word	0x4f54300a

08013b70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	4a13      	ldr	r2, [pc, #76]	; (8013bd4 <USB_CoreReset+0x64>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d901      	bls.n	8013b8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013b8a:	2303      	movs	r3, #3
 8013b8c:	e01b      	b.n	8013bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	daf2      	bge.n	8013b7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013b96:	2300      	movs	r3, #0
 8013b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	691b      	ldr	r3, [r3, #16]
 8013b9e:	f043 0201 	orr.w	r2, r3, #1
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	3301      	adds	r3, #1
 8013baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	4a09      	ldr	r2, [pc, #36]	; (8013bd4 <USB_CoreReset+0x64>)
 8013bb0:	4293      	cmp	r3, r2
 8013bb2:	d901      	bls.n	8013bb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	e006      	b.n	8013bc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	691b      	ldr	r3, [r3, #16]
 8013bbc:	f003 0301 	and.w	r3, r3, #1
 8013bc0:	2b01      	cmp	r3, #1
 8013bc2:	d0f0      	beq.n	8013ba6 <USB_CoreReset+0x36>

  return HAL_OK;
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3714      	adds	r7, #20
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	00030d40 	.word	0x00030d40

08013bd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013bdc:	4904      	ldr	r1, [pc, #16]	; (8013bf0 <MX_FATFS_Init+0x18>)
 8013bde:	4805      	ldr	r0, [pc, #20]	; (8013bf4 <MX_FATFS_Init+0x1c>)
 8013be0:	f002 fa56 	bl	8016090 <FATFS_LinkDriver>
 8013be4:	4603      	mov	r3, r0
 8013be6:	461a      	mov	r2, r3
 8013be8:	4b03      	ldr	r3, [pc, #12]	; (8013bf8 <MX_FATFS_Init+0x20>)
 8013bea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013bec:	bf00      	nop
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	24000d1c 	.word	0x24000d1c
 8013bf4:	0801b7a0 	.word	0x0801b7a0
 8013bf8:	24000d18 	.word	0x24000d18

08013bfc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013c02:	2300      	movs	r3, #0
 8013c04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013c06:	f000 f885 	bl	8013d14 <BSP_SD_IsDetected>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d001      	beq.n	8013c14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013c10:	2302      	movs	r3, #2
 8013c12:	e012      	b.n	8013c3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013c14:	480b      	ldr	r0, [pc, #44]	; (8013c44 <BSP_SD_Init+0x48>)
 8013c16:	f7f9 f9dd 	bl	800cfd4 <HAL_SD_Init>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013c1e:	79fb      	ldrb	r3, [r7, #7]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d109      	bne.n	8013c38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013c24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013c28:	4806      	ldr	r0, [pc, #24]	; (8013c44 <BSP_SD_Init+0x48>)
 8013c2a:	f7fa f893 	bl	800dd54 <HAL_SD_ConfigWideBusOperation>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013c34:	2301      	movs	r3, #1
 8013c36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013c38:	79fb      	ldrb	r3, [r7, #7]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	240005e0 	.word	0x240005e0

08013c48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b086      	sub	sp, #24
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c54:	2300      	movs	r3, #0
 8013c56:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	68ba      	ldr	r2, [r7, #8]
 8013c5c:	68f9      	ldr	r1, [r7, #12]
 8013c5e:	4806      	ldr	r0, [pc, #24]	; (8013c78 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013c60:	f7f9 fad8 	bl	800d214 <HAL_SD_ReadBlocks_DMA>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d001      	beq.n	8013c6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c70:	4618      	mov	r0, r3
 8013c72:	3718      	adds	r7, #24
 8013c74:	46bd      	mov	sp, r7
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	240005e0 	.word	0x240005e0

08013c7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	68f9      	ldr	r1, [r7, #12]
 8013c92:	4806      	ldr	r0, [pc, #24]	; (8013cac <BSP_SD_WriteBlocks_DMA+0x30>)
 8013c94:	f7f9 fb66 	bl	800d364 <HAL_SD_WriteBlocks_DMA>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3718      	adds	r7, #24
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	240005e0 	.word	0x240005e0

08013cb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013cb4:	4805      	ldr	r0, [pc, #20]	; (8013ccc <BSP_SD_GetCardState+0x1c>)
 8013cb6:	f7fa f95f 	bl	800df78 <HAL_SD_GetCardState>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b04      	cmp	r3, #4
 8013cbe:	bf14      	ite	ne
 8013cc0:	2301      	movne	r3, #1
 8013cc2:	2300      	moveq	r3, #0
 8013cc4:	b2db      	uxtb	r3, r3
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	240005e0 	.word	0x240005e0

08013cd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013cd8:	6879      	ldr	r1, [r7, #4]
 8013cda:	4803      	ldr	r0, [pc, #12]	; (8013ce8 <BSP_SD_GetCardInfo+0x18>)
 8013cdc:	f7fa f80e 	bl	800dcfc <HAL_SD_GetCardInfo>
}
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	240005e0 	.word	0x240005e0

08013cec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013cf4:	f000 f9a0 	bl	8014038 <BSP_SD_WriteCpltCallback>
}
 8013cf8:	bf00      	nop
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013d08:	f000 f9a2 	bl	8014050 <BSP_SD_ReadCpltCallback>
}
 8013d0c:	bf00      	nop
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013d1e:	f000 f80b 	bl	8013d38 <BSP_PlatformIsDetected>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013d2c:	79fb      	ldrb	r3, [r7, #7]
 8013d2e:	b2db      	uxtb	r3, r3
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3708      	adds	r7, #8
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013d42:	2104      	movs	r1, #4
 8013d44:	4806      	ldr	r0, [pc, #24]	; (8013d60 <BSP_PlatformIsDetected+0x28>)
 8013d46:	f7f3 fd0d 	bl	8007764 <HAL_GPIO_ReadPin>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d001      	beq.n	8013d54 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013d50:	2300      	movs	r3, #0
 8013d52:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013d54:	79fb      	ldrb	r3, [r7, #7]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3708      	adds	r7, #8
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
 8013d5e:	bf00      	nop
 8013d60:	58020400 	.word	0x58020400

08013d64 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013d6c:	f7ef fe68 	bl	8003a40 <HAL_GetTick>
 8013d70:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013d72:	e006      	b.n	8013d82 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013d74:	f7ff ff9c 	bl	8013cb0 <BSP_SD_GetCardState>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d101      	bne.n	8013d82 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e009      	b.n	8013d96 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013d82:	f7ef fe5d 	bl	8003a40 <HAL_GetTick>
 8013d86:	4602      	mov	r2, r0
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	1ad3      	subs	r3, r2, r3
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d8f0      	bhi.n	8013d74 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
	...

08013da0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013daa:	4b0b      	ldr	r3, [pc, #44]	; (8013dd8 <SD_CheckStatus+0x38>)
 8013dac:	2201      	movs	r2, #1
 8013dae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013db0:	f7ff ff7e 	bl	8013cb0 <BSP_SD_GetCardState>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d107      	bne.n	8013dca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013dba:	4b07      	ldr	r3, [pc, #28]	; (8013dd8 <SD_CheckStatus+0x38>)
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	f023 0301 	bic.w	r3, r3, #1
 8013dc4:	b2da      	uxtb	r2, r3
 8013dc6:	4b04      	ldr	r3, [pc, #16]	; (8013dd8 <SD_CheckStatus+0x38>)
 8013dc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013dca:	4b03      	ldr	r3, [pc, #12]	; (8013dd8 <SD_CheckStatus+0x38>)
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	b2db      	uxtb	r3, r3
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	24000035 	.word	0x24000035

08013ddc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	4603      	mov	r3, r0
 8013de4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013de6:	f7ff ff09 	bl	8013bfc <BSP_SD_Init>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d107      	bne.n	8013e00 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013df0:	79fb      	ldrb	r3, [r7, #7]
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7ff ffd4 	bl	8013da0 <SD_CheckStatus>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	4b04      	ldr	r3, [pc, #16]	; (8013e10 <SD_initialize+0x34>)
 8013dfe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013e00:	4b03      	ldr	r3, [pc, #12]	; (8013e10 <SD_initialize+0x34>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	b2db      	uxtb	r3, r3
}
 8013e06:	4618      	mov	r0, r3
 8013e08:	3708      	adds	r7, #8
 8013e0a:	46bd      	mov	sp, r7
 8013e0c:	bd80      	pop	{r7, pc}
 8013e0e:	bf00      	nop
 8013e10:	24000035 	.word	0x24000035

08013e14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7ff ffbd 	bl	8013da0 <SD_CheckStatus>
 8013e26:	4603      	mov	r3, r0
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b086      	sub	sp, #24
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60b9      	str	r1, [r7, #8]
 8013e38:	607a      	str	r2, [r7, #4]
 8013e3a:	603b      	str	r3, [r7, #0]
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013e40:	2301      	movs	r3, #1
 8013e42:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013e44:	f247 5030 	movw	r0, #30000	; 0x7530
 8013e48:	f7ff ff8c 	bl	8013d64 <SD_CheckStatusWithTimeout>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	da01      	bge.n	8013e56 <SD_read+0x26>
  {
    return res;
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
 8013e54:	e03b      	b.n	8013ece <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013e56:	683a      	ldr	r2, [r7, #0]
 8013e58:	6879      	ldr	r1, [r7, #4]
 8013e5a:	68b8      	ldr	r0, [r7, #8]
 8013e5c:	f7ff fef4 	bl	8013c48 <BSP_SD_ReadBlocks_DMA>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d132      	bne.n	8013ecc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013e66:	4b1c      	ldr	r3, [pc, #112]	; (8013ed8 <SD_read+0xa8>)
 8013e68:	2200      	movs	r2, #0
 8013e6a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013e6c:	f7ef fde8 	bl	8003a40 <HAL_GetTick>
 8013e70:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013e72:	bf00      	nop
 8013e74:	4b18      	ldr	r3, [pc, #96]	; (8013ed8 <SD_read+0xa8>)
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d108      	bne.n	8013e8e <SD_read+0x5e>
 8013e7c:	f7ef fde0 	bl	8003a40 <HAL_GetTick>
 8013e80:	4602      	mov	r2, r0
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	f247 522f 	movw	r2, #29999	; 0x752f
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d9f2      	bls.n	8013e74 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013e8e:	4b12      	ldr	r3, [pc, #72]	; (8013ed8 <SD_read+0xa8>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d102      	bne.n	8013e9c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013e96:	2301      	movs	r3, #1
 8013e98:	75fb      	strb	r3, [r7, #23]
 8013e9a:	e017      	b.n	8013ecc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013e9c:	4b0e      	ldr	r3, [pc, #56]	; (8013ed8 <SD_read+0xa8>)
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013ea2:	f7ef fdcd 	bl	8003a40 <HAL_GetTick>
 8013ea6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013ea8:	e007      	b.n	8013eba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013eaa:	f7ff ff01 	bl	8013cb0 <BSP_SD_GetCardState>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d102      	bne.n	8013eba <SD_read+0x8a>
          {
            res = RES_OK;
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013eb8:	e008      	b.n	8013ecc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013eba:	f7ef fdc1 	bl	8003a40 <HAL_GetTick>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	1ad3      	subs	r3, r2, r3
 8013ec4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d9ee      	bls.n	8013eaa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	24000d24 	.word	0x24000d24

08013edc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b086      	sub	sp, #24
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60b9      	str	r1, [r7, #8]
 8013ee4:	607a      	str	r2, [r7, #4]
 8013ee6:	603b      	str	r3, [r7, #0]
 8013ee8:	4603      	mov	r3, r0
 8013eea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013eec:	2301      	movs	r3, #1
 8013eee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013ef0:	4b24      	ldr	r3, [pc, #144]	; (8013f84 <SD_write+0xa8>)
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013ef6:	f247 5030 	movw	r0, #30000	; 0x7530
 8013efa:	f7ff ff33 	bl	8013d64 <SD_CheckStatusWithTimeout>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	da01      	bge.n	8013f08 <SD_write+0x2c>
  {
    return res;
 8013f04:	7dfb      	ldrb	r3, [r7, #23]
 8013f06:	e038      	b.n	8013f7a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013f08:	683a      	ldr	r2, [r7, #0]
 8013f0a:	6879      	ldr	r1, [r7, #4]
 8013f0c:	68b8      	ldr	r0, [r7, #8]
 8013f0e:	f7ff feb5 	bl	8013c7c <BSP_SD_WriteBlocks_DMA>
 8013f12:	4603      	mov	r3, r0
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d12f      	bne.n	8013f78 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013f18:	f7ef fd92 	bl	8003a40 <HAL_GetTick>
 8013f1c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013f1e:	bf00      	nop
 8013f20:	4b18      	ldr	r3, [pc, #96]	; (8013f84 <SD_write+0xa8>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d108      	bne.n	8013f3a <SD_write+0x5e>
 8013f28:	f7ef fd8a 	bl	8003a40 <HAL_GetTick>
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	693b      	ldr	r3, [r7, #16]
 8013f30:	1ad3      	subs	r3, r2, r3
 8013f32:	f247 522f 	movw	r2, #29999	; 0x752f
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d9f2      	bls.n	8013f20 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013f3a:	4b12      	ldr	r3, [pc, #72]	; (8013f84 <SD_write+0xa8>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d102      	bne.n	8013f48 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013f42:	2301      	movs	r3, #1
 8013f44:	75fb      	strb	r3, [r7, #23]
 8013f46:	e017      	b.n	8013f78 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013f48:	4b0e      	ldr	r3, [pc, #56]	; (8013f84 <SD_write+0xa8>)
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013f4e:	f7ef fd77 	bl	8003a40 <HAL_GetTick>
 8013f52:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013f54:	e007      	b.n	8013f66 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013f56:	f7ff feab 	bl	8013cb0 <BSP_SD_GetCardState>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d102      	bne.n	8013f66 <SD_write+0x8a>
          {
            res = RES_OK;
 8013f60:	2300      	movs	r3, #0
 8013f62:	75fb      	strb	r3, [r7, #23]
            break;
 8013f64:	e008      	b.n	8013f78 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013f66:	f7ef fd6b 	bl	8003a40 <HAL_GetTick>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	1ad3      	subs	r3, r2, r3
 8013f70:	f247 522f 	movw	r2, #29999	; 0x752f
 8013f74:	4293      	cmp	r3, r2
 8013f76:	d9ee      	bls.n	8013f56 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3718      	adds	r7, #24
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	24000d20 	.word	0x24000d20

08013f88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b08c      	sub	sp, #48	; 0x30
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	4603      	mov	r3, r0
 8013f90:	603a      	str	r2, [r7, #0]
 8013f92:	71fb      	strb	r3, [r7, #7]
 8013f94:	460b      	mov	r3, r1
 8013f96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013f9e:	4b25      	ldr	r3, [pc, #148]	; (8014034 <SD_ioctl+0xac>)
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	f003 0301 	and.w	r3, r3, #1
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d001      	beq.n	8013fb0 <SD_ioctl+0x28>
 8013fac:	2303      	movs	r3, #3
 8013fae:	e03c      	b.n	801402a <SD_ioctl+0xa2>

  switch (cmd)
 8013fb0:	79bb      	ldrb	r3, [r7, #6]
 8013fb2:	2b03      	cmp	r3, #3
 8013fb4:	d834      	bhi.n	8014020 <SD_ioctl+0x98>
 8013fb6:	a201      	add	r2, pc, #4	; (adr r2, 8013fbc <SD_ioctl+0x34>)
 8013fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fbc:	08013fcd 	.word	0x08013fcd
 8013fc0:	08013fd5 	.word	0x08013fd5
 8013fc4:	08013fed 	.word	0x08013fed
 8013fc8:	08014007 	.word	0x08014007
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fd2:	e028      	b.n	8014026 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fd4:	f107 0308 	add.w	r3, r7, #8
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7ff fe79 	bl	8013cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013fde:	6a3a      	ldr	r2, [r7, #32]
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013fea:	e01c      	b.n	8014026 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013fec:	f107 0308 	add.w	r3, r7, #8
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f7ff fe6d 	bl	8013cd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013ffe:	2300      	movs	r3, #0
 8014000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014004:	e00f      	b.n	8014026 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014006:	f107 0308 	add.w	r3, r7, #8
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff fe60 	bl	8013cd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	0a5a      	lsrs	r2, r3, #9
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014018:	2300      	movs	r3, #0
 801401a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801401e:	e002      	b.n	8014026 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014020:	2304      	movs	r3, #4
 8014022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801402a:	4618      	mov	r0, r3
 801402c:	3730      	adds	r7, #48	; 0x30
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	24000035 	.word	0x24000035

08014038 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014038:	b480      	push	{r7}
 801403a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801403c:	4b03      	ldr	r3, [pc, #12]	; (801404c <BSP_SD_WriteCpltCallback+0x14>)
 801403e:	2201      	movs	r2, #1
 8014040:	601a      	str	r2, [r3, #0]
}
 8014042:	bf00      	nop
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	24000d20 	.word	0x24000d20

08014050 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014050:	b480      	push	{r7}
 8014052:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014054:	4b03      	ldr	r3, [pc, #12]	; (8014064 <BSP_SD_ReadCpltCallback+0x14>)
 8014056:	2201      	movs	r2, #1
 8014058:	601a      	str	r2, [r3, #0]
}
 801405a:	bf00      	nop
 801405c:	46bd      	mov	sp, r7
 801405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014062:	4770      	bx	lr
 8014064:	24000d24 	.word	0x24000d24

08014068 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b084      	sub	sp, #16
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	460b      	mov	r3, r1
 8014072:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014078:	f002 fcea 	bl	8016a50 <USBD_static_malloc>
 801407c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d109      	bne.n	8014098 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	32b0      	adds	r2, #176	; 0xb0
 801408e:	2100      	movs	r1, #0
 8014090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014094:	2302      	movs	r3, #2
 8014096:	e0d4      	b.n	8014242 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014098:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801409c:	2100      	movs	r1, #0
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f002 fd52 	bl	8016b48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	32b0      	adds	r2, #176	; 0xb0
 80140ae:	68f9      	ldr	r1, [r7, #12]
 80140b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	32b0      	adds	r2, #176	; 0xb0
 80140be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	7c1b      	ldrb	r3, [r3, #16]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d138      	bne.n	8014142 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80140d0:	4b5e      	ldr	r3, [pc, #376]	; (801424c <USBD_CDC_Init+0x1e4>)
 80140d2:	7819      	ldrb	r1, [r3, #0]
 80140d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140d8:	2202      	movs	r2, #2
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f002 fb95 	bl	801680a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80140e0:	4b5a      	ldr	r3, [pc, #360]	; (801424c <USBD_CDC_Init+0x1e4>)
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	f003 020f 	and.w	r2, r3, #15
 80140e8:	6879      	ldr	r1, [r7, #4]
 80140ea:	4613      	mov	r3, r2
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	4413      	add	r3, r2
 80140f0:	009b      	lsls	r3, r3, #2
 80140f2:	440b      	add	r3, r1
 80140f4:	3324      	adds	r3, #36	; 0x24
 80140f6:	2201      	movs	r2, #1
 80140f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80140fa:	4b55      	ldr	r3, [pc, #340]	; (8014250 <USBD_CDC_Init+0x1e8>)
 80140fc:	7819      	ldrb	r1, [r3, #0]
 80140fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014102:	2202      	movs	r2, #2
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f002 fb80 	bl	801680a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801410a:	4b51      	ldr	r3, [pc, #324]	; (8014250 <USBD_CDC_Init+0x1e8>)
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	f003 020f 	and.w	r2, r3, #15
 8014112:	6879      	ldr	r1, [r7, #4]
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	440b      	add	r3, r1
 801411e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014122:	2201      	movs	r2, #1
 8014124:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014126:	4b4b      	ldr	r3, [pc, #300]	; (8014254 <USBD_CDC_Init+0x1ec>)
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 020f 	and.w	r2, r3, #15
 801412e:	6879      	ldr	r1, [r7, #4]
 8014130:	4613      	mov	r3, r2
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	4413      	add	r3, r2
 8014136:	009b      	lsls	r3, r3, #2
 8014138:	440b      	add	r3, r1
 801413a:	3326      	adds	r3, #38	; 0x26
 801413c:	2210      	movs	r2, #16
 801413e:	801a      	strh	r2, [r3, #0]
 8014140:	e035      	b.n	80141ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014142:	4b42      	ldr	r3, [pc, #264]	; (801424c <USBD_CDC_Init+0x1e4>)
 8014144:	7819      	ldrb	r1, [r3, #0]
 8014146:	2340      	movs	r3, #64	; 0x40
 8014148:	2202      	movs	r2, #2
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f002 fb5d 	bl	801680a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014150:	4b3e      	ldr	r3, [pc, #248]	; (801424c <USBD_CDC_Init+0x1e4>)
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	f003 020f 	and.w	r2, r3, #15
 8014158:	6879      	ldr	r1, [r7, #4]
 801415a:	4613      	mov	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	4413      	add	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	440b      	add	r3, r1
 8014164:	3324      	adds	r3, #36	; 0x24
 8014166:	2201      	movs	r2, #1
 8014168:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801416a:	4b39      	ldr	r3, [pc, #228]	; (8014250 <USBD_CDC_Init+0x1e8>)
 801416c:	7819      	ldrb	r1, [r3, #0]
 801416e:	2340      	movs	r3, #64	; 0x40
 8014170:	2202      	movs	r2, #2
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f002 fb49 	bl	801680a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014178:	4b35      	ldr	r3, [pc, #212]	; (8014250 <USBD_CDC_Init+0x1e8>)
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	f003 020f 	and.w	r2, r3, #15
 8014180:	6879      	ldr	r1, [r7, #4]
 8014182:	4613      	mov	r3, r2
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	4413      	add	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	440b      	add	r3, r1
 801418c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014190:	2201      	movs	r2, #1
 8014192:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014194:	4b2f      	ldr	r3, [pc, #188]	; (8014254 <USBD_CDC_Init+0x1ec>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 020f 	and.w	r2, r3, #15
 801419c:	6879      	ldr	r1, [r7, #4]
 801419e:	4613      	mov	r3, r2
 80141a0:	009b      	lsls	r3, r3, #2
 80141a2:	4413      	add	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	440b      	add	r3, r1
 80141a8:	3326      	adds	r3, #38	; 0x26
 80141aa:	2210      	movs	r2, #16
 80141ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80141ae:	4b29      	ldr	r3, [pc, #164]	; (8014254 <USBD_CDC_Init+0x1ec>)
 80141b0:	7819      	ldrb	r1, [r3, #0]
 80141b2:	2308      	movs	r3, #8
 80141b4:	2203      	movs	r2, #3
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f002 fb27 	bl	801680a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80141bc:	4b25      	ldr	r3, [pc, #148]	; (8014254 <USBD_CDC_Init+0x1ec>)
 80141be:	781b      	ldrb	r3, [r3, #0]
 80141c0:	f003 020f 	and.w	r2, r3, #15
 80141c4:	6879      	ldr	r1, [r7, #4]
 80141c6:	4613      	mov	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	4413      	add	r3, r2
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	440b      	add	r3, r1
 80141d0:	3324      	adds	r3, #36	; 0x24
 80141d2:	2201      	movs	r2, #1
 80141d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2200      	movs	r2, #0
 80141da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	33b0      	adds	r3, #176	; 0xb0
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4413      	add	r3, r2
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2200      	movs	r2, #0
 80141f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	2200      	movs	r2, #0
 80141fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014208:	2b00      	cmp	r3, #0
 801420a:	d101      	bne.n	8014210 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801420c:	2302      	movs	r3, #2
 801420e:	e018      	b.n	8014242 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	7c1b      	ldrb	r3, [r3, #16]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10a      	bne.n	801422e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014218:	4b0d      	ldr	r3, [pc, #52]	; (8014250 <USBD_CDC_Init+0x1e8>)
 801421a:	7819      	ldrb	r1, [r3, #0]
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f002 fbde 	bl	80169e8 <USBD_LL_PrepareReceive>
 801422c:	e008      	b.n	8014240 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801422e:	4b08      	ldr	r3, [pc, #32]	; (8014250 <USBD_CDC_Init+0x1e8>)
 8014230:	7819      	ldrb	r1, [r3, #0]
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014238:	2340      	movs	r3, #64	; 0x40
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f002 fbd4 	bl	80169e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014240:	2300      	movs	r3, #0
}
 8014242:	4618      	mov	r0, r3
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	240000bf 	.word	0x240000bf
 8014250:	240000c0 	.word	0x240000c0
 8014254:	240000c1 	.word	0x240000c1

08014258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	460b      	mov	r3, r1
 8014262:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014264:	4b3a      	ldr	r3, [pc, #232]	; (8014350 <USBD_CDC_DeInit+0xf8>)
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	4619      	mov	r1, r3
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f002 faf3 	bl	8016856 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014270:	4b37      	ldr	r3, [pc, #220]	; (8014350 <USBD_CDC_DeInit+0xf8>)
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	f003 020f 	and.w	r2, r3, #15
 8014278:	6879      	ldr	r1, [r7, #4]
 801427a:	4613      	mov	r3, r2
 801427c:	009b      	lsls	r3, r3, #2
 801427e:	4413      	add	r3, r2
 8014280:	009b      	lsls	r3, r3, #2
 8014282:	440b      	add	r3, r1
 8014284:	3324      	adds	r3, #36	; 0x24
 8014286:	2200      	movs	r2, #0
 8014288:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801428a:	4b32      	ldr	r3, [pc, #200]	; (8014354 <USBD_CDC_DeInit+0xfc>)
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	4619      	mov	r1, r3
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f002 fae0 	bl	8016856 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014296:	4b2f      	ldr	r3, [pc, #188]	; (8014354 <USBD_CDC_DeInit+0xfc>)
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	f003 020f 	and.w	r2, r3, #15
 801429e:	6879      	ldr	r1, [r7, #4]
 80142a0:	4613      	mov	r3, r2
 80142a2:	009b      	lsls	r3, r3, #2
 80142a4:	4413      	add	r3, r2
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	440b      	add	r3, r1
 80142aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80142ae:	2200      	movs	r2, #0
 80142b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80142b2:	4b29      	ldr	r3, [pc, #164]	; (8014358 <USBD_CDC_DeInit+0x100>)
 80142b4:	781b      	ldrb	r3, [r3, #0]
 80142b6:	4619      	mov	r1, r3
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f002 facc 	bl	8016856 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80142be:	4b26      	ldr	r3, [pc, #152]	; (8014358 <USBD_CDC_DeInit+0x100>)
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	f003 020f 	and.w	r2, r3, #15
 80142c6:	6879      	ldr	r1, [r7, #4]
 80142c8:	4613      	mov	r3, r2
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	4413      	add	r3, r2
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	440b      	add	r3, r1
 80142d2:	3324      	adds	r3, #36	; 0x24
 80142d4:	2200      	movs	r2, #0
 80142d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80142d8:	4b1f      	ldr	r3, [pc, #124]	; (8014358 <USBD_CDC_DeInit+0x100>)
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	f003 020f 	and.w	r2, r3, #15
 80142e0:	6879      	ldr	r1, [r7, #4]
 80142e2:	4613      	mov	r3, r2
 80142e4:	009b      	lsls	r3, r3, #2
 80142e6:	4413      	add	r3, r2
 80142e8:	009b      	lsls	r3, r3, #2
 80142ea:	440b      	add	r3, r1
 80142ec:	3326      	adds	r3, #38	; 0x26
 80142ee:	2200      	movs	r2, #0
 80142f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	32b0      	adds	r2, #176	; 0xb0
 80142fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d01f      	beq.n	8014344 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801430a:	687a      	ldr	r2, [r7, #4]
 801430c:	33b0      	adds	r3, #176	; 0xb0
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	4413      	add	r3, r2
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	32b0      	adds	r2, #176	; 0xb0
 8014322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014326:	4618      	mov	r0, r3
 8014328:	f002 fba0 	bl	8016a6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	32b0      	adds	r2, #176	; 0xb0
 8014336:	2100      	movs	r1, #0
 8014338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	2200      	movs	r2, #0
 8014340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014344:	2300      	movs	r3, #0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	240000bf 	.word	0x240000bf
 8014354:	240000c0 	.word	0x240000c0
 8014358:	240000c1 	.word	0x240000c1

0801435c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b086      	sub	sp, #24
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	32b0      	adds	r2, #176	; 0xb0
 8014370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014374:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014376:	2300      	movs	r3, #0
 8014378:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801437a:	2300      	movs	r3, #0
 801437c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801437e:	2300      	movs	r3, #0
 8014380:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014382:	693b      	ldr	r3, [r7, #16]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d101      	bne.n	801438c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014388:	2303      	movs	r3, #3
 801438a:	e0bf      	b.n	801450c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	781b      	ldrb	r3, [r3, #0]
 8014390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014394:	2b00      	cmp	r3, #0
 8014396:	d050      	beq.n	801443a <USBD_CDC_Setup+0xde>
 8014398:	2b20      	cmp	r3, #32
 801439a:	f040 80af 	bne.w	80144fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	88db      	ldrh	r3, [r3, #6]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d03a      	beq.n	801441c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	781b      	ldrb	r3, [r3, #0]
 80143aa:	b25b      	sxtb	r3, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	da1b      	bge.n	80143e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	33b0      	adds	r3, #176	; 0xb0
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	4413      	add	r3, r2
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	689b      	ldr	r3, [r3, #8]
 80143c2:	683a      	ldr	r2, [r7, #0]
 80143c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80143c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80143c8:	683a      	ldr	r2, [r7, #0]
 80143ca:	88d2      	ldrh	r2, [r2, #6]
 80143cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	88db      	ldrh	r3, [r3, #6]
 80143d2:	2b07      	cmp	r3, #7
 80143d4:	bf28      	it	cs
 80143d6:	2307      	movcs	r3, #7
 80143d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	89fa      	ldrh	r2, [r7, #14]
 80143de:	4619      	mov	r1, r3
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f001 fd89 	bl	8015ef8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80143e6:	e090      	b.n	801450a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	785a      	ldrb	r2, [r3, #1]
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	88db      	ldrh	r3, [r3, #6]
 80143f6:	2b3f      	cmp	r3, #63	; 0x3f
 80143f8:	d803      	bhi.n	8014402 <USBD_CDC_Setup+0xa6>
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	88db      	ldrh	r3, [r3, #6]
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	e000      	b.n	8014404 <USBD_CDC_Setup+0xa8>
 8014402:	2240      	movs	r2, #64	; 0x40
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801440a:	6939      	ldr	r1, [r7, #16]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014412:	461a      	mov	r2, r3
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f001 fd9b 	bl	8015f50 <USBD_CtlPrepareRx>
      break;
 801441a:	e076      	b.n	801450a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	33b0      	adds	r3, #176	; 0xb0
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	4413      	add	r3, r2
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	689b      	ldr	r3, [r3, #8]
 801442e:	683a      	ldr	r2, [r7, #0]
 8014430:	7850      	ldrb	r0, [r2, #1]
 8014432:	2200      	movs	r2, #0
 8014434:	6839      	ldr	r1, [r7, #0]
 8014436:	4798      	blx	r3
      break;
 8014438:	e067      	b.n	801450a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	785b      	ldrb	r3, [r3, #1]
 801443e:	2b0b      	cmp	r3, #11
 8014440:	d851      	bhi.n	80144e6 <USBD_CDC_Setup+0x18a>
 8014442:	a201      	add	r2, pc, #4	; (adr r2, 8014448 <USBD_CDC_Setup+0xec>)
 8014444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014448:	08014479 	.word	0x08014479
 801444c:	080144f5 	.word	0x080144f5
 8014450:	080144e7 	.word	0x080144e7
 8014454:	080144e7 	.word	0x080144e7
 8014458:	080144e7 	.word	0x080144e7
 801445c:	080144e7 	.word	0x080144e7
 8014460:	080144e7 	.word	0x080144e7
 8014464:	080144e7 	.word	0x080144e7
 8014468:	080144e7 	.word	0x080144e7
 801446c:	080144e7 	.word	0x080144e7
 8014470:	080144a3 	.word	0x080144a3
 8014474:	080144cd 	.word	0x080144cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801447e:	b2db      	uxtb	r3, r3
 8014480:	2b03      	cmp	r3, #3
 8014482:	d107      	bne.n	8014494 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014484:	f107 030a 	add.w	r3, r7, #10
 8014488:	2202      	movs	r2, #2
 801448a:	4619      	mov	r1, r3
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f001 fd33 	bl	8015ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014492:	e032      	b.n	80144fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014494:	6839      	ldr	r1, [r7, #0]
 8014496:	6878      	ldr	r0, [r7, #4]
 8014498:	f001 fcbd 	bl	8015e16 <USBD_CtlError>
            ret = USBD_FAIL;
 801449c:	2303      	movs	r3, #3
 801449e:	75fb      	strb	r3, [r7, #23]
          break;
 80144a0:	e02b      	b.n	80144fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d107      	bne.n	80144be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80144ae:	f107 030d 	add.w	r3, r7, #13
 80144b2:	2201      	movs	r2, #1
 80144b4:	4619      	mov	r1, r3
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f001 fd1e 	bl	8015ef8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80144bc:	e01d      	b.n	80144fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f001 fca8 	bl	8015e16 <USBD_CtlError>
            ret = USBD_FAIL;
 80144c6:	2303      	movs	r3, #3
 80144c8:	75fb      	strb	r3, [r7, #23]
          break;
 80144ca:	e016      	b.n	80144fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b03      	cmp	r3, #3
 80144d6:	d00f      	beq.n	80144f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80144d8:	6839      	ldr	r1, [r7, #0]
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f001 fc9b 	bl	8015e16 <USBD_CtlError>
            ret = USBD_FAIL;
 80144e0:	2303      	movs	r3, #3
 80144e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80144e4:	e008      	b.n	80144f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f001 fc94 	bl	8015e16 <USBD_CtlError>
          ret = USBD_FAIL;
 80144ee:	2303      	movs	r3, #3
 80144f0:	75fb      	strb	r3, [r7, #23]
          break;
 80144f2:	e002      	b.n	80144fa <USBD_CDC_Setup+0x19e>
          break;
 80144f4:	bf00      	nop
 80144f6:	e008      	b.n	801450a <USBD_CDC_Setup+0x1ae>
          break;
 80144f8:	bf00      	nop
      }
      break;
 80144fa:	e006      	b.n	801450a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80144fc:	6839      	ldr	r1, [r7, #0]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f001 fc89 	bl	8015e16 <USBD_CtlError>
      ret = USBD_FAIL;
 8014504:	2303      	movs	r3, #3
 8014506:	75fb      	strb	r3, [r7, #23]
      break;
 8014508:	bf00      	nop
  }

  return (uint8_t)ret;
 801450a:	7dfb      	ldrb	r3, [r7, #23]
}
 801450c:	4618      	mov	r0, r3
 801450e:	3718      	adds	r7, #24
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	460b      	mov	r3, r1
 801451e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	32b0      	adds	r2, #176	; 0xb0
 8014532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d101      	bne.n	801453e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801453a:	2303      	movs	r3, #3
 801453c:	e065      	b.n	801460a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	32b0      	adds	r2, #176	; 0xb0
 8014548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801454c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801454e:	78fb      	ldrb	r3, [r7, #3]
 8014550:	f003 020f 	and.w	r2, r3, #15
 8014554:	6879      	ldr	r1, [r7, #4]
 8014556:	4613      	mov	r3, r2
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	4413      	add	r3, r2
 801455c:	009b      	lsls	r3, r3, #2
 801455e:	440b      	add	r3, r1
 8014560:	3318      	adds	r3, #24
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d02f      	beq.n	80145c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014568:	78fb      	ldrb	r3, [r7, #3]
 801456a:	f003 020f 	and.w	r2, r3, #15
 801456e:	6879      	ldr	r1, [r7, #4]
 8014570:	4613      	mov	r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	440b      	add	r3, r1
 801457a:	3318      	adds	r3, #24
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	78fb      	ldrb	r3, [r7, #3]
 8014580:	f003 010f 	and.w	r1, r3, #15
 8014584:	68f8      	ldr	r0, [r7, #12]
 8014586:	460b      	mov	r3, r1
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	440b      	add	r3, r1
 801458c:	009b      	lsls	r3, r3, #2
 801458e:	4403      	add	r3, r0
 8014590:	3344      	adds	r3, #68	; 0x44
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	fbb2 f1f3 	udiv	r1, r2, r3
 8014598:	fb01 f303 	mul.w	r3, r1, r3
 801459c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d112      	bne.n	80145c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80145a2:	78fb      	ldrb	r3, [r7, #3]
 80145a4:	f003 020f 	and.w	r2, r3, #15
 80145a8:	6879      	ldr	r1, [r7, #4]
 80145aa:	4613      	mov	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4413      	add	r3, r2
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	440b      	add	r3, r1
 80145b4:	3318      	adds	r3, #24
 80145b6:	2200      	movs	r2, #0
 80145b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80145ba:	78f9      	ldrb	r1, [r7, #3]
 80145bc:	2300      	movs	r3, #0
 80145be:	2200      	movs	r2, #0
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f002 f9f0 	bl	80169a6 <USBD_LL_Transmit>
 80145c6:	e01f      	b.n	8014608 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	2200      	movs	r2, #0
 80145cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	33b0      	adds	r3, #176	; 0xb0
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	4413      	add	r3, r2
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	691b      	ldr	r3, [r3, #16]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d010      	beq.n	8014608 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	33b0      	adds	r3, #176	; 0xb0
 80145f0:	009b      	lsls	r3, r3, #2
 80145f2:	4413      	add	r3, r2
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	68ba      	ldr	r2, [r7, #8]
 80145fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80145fe:	68ba      	ldr	r2, [r7, #8]
 8014600:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014604:	78fa      	ldrb	r2, [r7, #3]
 8014606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014608:	2300      	movs	r3, #0
}
 801460a:	4618      	mov	r0, r3
 801460c:	3710      	adds	r7, #16
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}

08014612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014612:	b580      	push	{r7, lr}
 8014614:	b084      	sub	sp, #16
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
 801461a:	460b      	mov	r3, r1
 801461c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	32b0      	adds	r2, #176	; 0xb0
 8014628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801462c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	32b0      	adds	r2, #176	; 0xb0
 8014638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d101      	bne.n	8014644 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014640:	2303      	movs	r3, #3
 8014642:	e01a      	b.n	801467a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014644:	78fb      	ldrb	r3, [r7, #3]
 8014646:	4619      	mov	r1, r3
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f002 f9ee 	bl	8016a2a <USBD_LL_GetRxDataSize>
 801464e:	4602      	mov	r2, r0
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	33b0      	adds	r3, #176	; 0xb0
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4413      	add	r3, r2
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	68fa      	ldr	r2, [r7, #12]
 801466a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801466e:	68fa      	ldr	r2, [r7, #12]
 8014670:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014674:	4611      	mov	r1, r2
 8014676:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014678:	2300      	movs	r3, #0
}
 801467a:	4618      	mov	r0, r3
 801467c:	3710      	adds	r7, #16
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b084      	sub	sp, #16
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	32b0      	adds	r2, #176	; 0xb0
 8014694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80146a0:	2303      	movs	r3, #3
 80146a2:	e025      	b.n	80146f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	33b0      	adds	r3, #176	; 0xb0
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	4413      	add	r3, r2
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d01a      	beq.n	80146ee <USBD_CDC_EP0_RxReady+0x6c>
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80146be:	2bff      	cmp	r3, #255	; 0xff
 80146c0:	d015      	beq.n	80146ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	33b0      	adds	r3, #176	; 0xb0
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	4413      	add	r3, r2
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	689b      	ldr	r3, [r3, #8]
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80146da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80146dc:	68fa      	ldr	r2, [r7, #12]
 80146de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80146e2:	b292      	uxth	r2, r2
 80146e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	22ff      	movs	r2, #255	; 0xff
 80146ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80146ee:	2300      	movs	r3, #0
}
 80146f0:	4618      	mov	r0, r3
 80146f2:	3710      	adds	r7, #16
 80146f4:	46bd      	mov	sp, r7
 80146f6:	bd80      	pop	{r7, pc}

080146f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014700:	2182      	movs	r1, #130	; 0x82
 8014702:	4818      	ldr	r0, [pc, #96]	; (8014764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014704:	f000 fd4f 	bl	80151a6 <USBD_GetEpDesc>
 8014708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801470a:	2101      	movs	r1, #1
 801470c:	4815      	ldr	r0, [pc, #84]	; (8014764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801470e:	f000 fd4a 	bl	80151a6 <USBD_GetEpDesc>
 8014712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014714:	2181      	movs	r1, #129	; 0x81
 8014716:	4813      	ldr	r0, [pc, #76]	; (8014764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014718:	f000 fd45 	bl	80151a6 <USBD_GetEpDesc>
 801471c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801471e:	697b      	ldr	r3, [r7, #20]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d002      	beq.n	801472a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	2210      	movs	r2, #16
 8014728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d006      	beq.n	801473e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	2200      	movs	r2, #0
 8014734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014738:	711a      	strb	r2, [r3, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d006      	beq.n	8014752 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	2200      	movs	r2, #0
 8014748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801474c:	711a      	strb	r2, [r3, #4]
 801474e:	2200      	movs	r2, #0
 8014750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2243      	movs	r2, #67	; 0x43
 8014756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014758:	4b02      	ldr	r3, [pc, #8]	; (8014764 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801475a:	4618      	mov	r0, r3
 801475c:	3718      	adds	r7, #24
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}
 8014762:	bf00      	nop
 8014764:	2400007c 	.word	0x2400007c

08014768 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b086      	sub	sp, #24
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014770:	2182      	movs	r1, #130	; 0x82
 8014772:	4818      	ldr	r0, [pc, #96]	; (80147d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014774:	f000 fd17 	bl	80151a6 <USBD_GetEpDesc>
 8014778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801477a:	2101      	movs	r1, #1
 801477c:	4815      	ldr	r0, [pc, #84]	; (80147d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801477e:	f000 fd12 	bl	80151a6 <USBD_GetEpDesc>
 8014782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014784:	2181      	movs	r1, #129	; 0x81
 8014786:	4813      	ldr	r0, [pc, #76]	; (80147d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014788:	f000 fd0d 	bl	80151a6 <USBD_GetEpDesc>
 801478c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	2210      	movs	r2, #16
 8014798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d006      	beq.n	80147ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	2200      	movs	r2, #0
 80147a4:	711a      	strb	r2, [r3, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	f042 0202 	orr.w	r2, r2, #2
 80147ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d006      	beq.n	80147c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	2200      	movs	r2, #0
 80147b8:	711a      	strb	r2, [r3, #4]
 80147ba:	2200      	movs	r2, #0
 80147bc:	f042 0202 	orr.w	r2, r2, #2
 80147c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2243      	movs	r2, #67	; 0x43
 80147c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80147c8:	4b02      	ldr	r3, [pc, #8]	; (80147d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3718      	adds	r7, #24
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop
 80147d4:	2400007c 	.word	0x2400007c

080147d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b086      	sub	sp, #24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80147e0:	2182      	movs	r1, #130	; 0x82
 80147e2:	4818      	ldr	r0, [pc, #96]	; (8014844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147e4:	f000 fcdf 	bl	80151a6 <USBD_GetEpDesc>
 80147e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80147ea:	2101      	movs	r1, #1
 80147ec:	4815      	ldr	r0, [pc, #84]	; (8014844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147ee:	f000 fcda 	bl	80151a6 <USBD_GetEpDesc>
 80147f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80147f4:	2181      	movs	r1, #129	; 0x81
 80147f6:	4813      	ldr	r0, [pc, #76]	; (8014844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80147f8:	f000 fcd5 	bl	80151a6 <USBD_GetEpDesc>
 80147fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d002      	beq.n	801480a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	2210      	movs	r2, #16
 8014808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d006      	beq.n	801481e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	2200      	movs	r2, #0
 8014814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014818:	711a      	strb	r2, [r3, #4]
 801481a:	2200      	movs	r2, #0
 801481c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d006      	beq.n	8014832 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801482c:	711a      	strb	r2, [r3, #4]
 801482e:	2200      	movs	r2, #0
 8014830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2243      	movs	r2, #67	; 0x43
 8014836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014838:	4b02      	ldr	r3, [pc, #8]	; (8014844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801483a:	4618      	mov	r0, r3
 801483c:	3718      	adds	r7, #24
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	2400007c 	.word	0x2400007c

08014848 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014848:	b480      	push	{r7}
 801484a:	b083      	sub	sp, #12
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	220a      	movs	r2, #10
 8014854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014856:	4b03      	ldr	r3, [pc, #12]	; (8014864 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014858:	4618      	mov	r0, r3
 801485a:	370c      	adds	r7, #12
 801485c:	46bd      	mov	sp, r7
 801485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014862:	4770      	bx	lr
 8014864:	24000038 	.word	0x24000038

08014868 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d101      	bne.n	801487c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014878:	2303      	movs	r3, #3
 801487a:	e009      	b.n	8014890 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	33b0      	adds	r3, #176	; 0xb0
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	4413      	add	r3, r2
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801488e:	2300      	movs	r3, #0
}
 8014890:	4618      	mov	r0, r3
 8014892:	370c      	adds	r7, #12
 8014894:	46bd      	mov	sp, r7
 8014896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489a:	4770      	bx	lr

0801489c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801489c:	b480      	push	{r7}
 801489e:	b087      	sub	sp, #28
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	32b0      	adds	r2, #176	; 0xb0
 80148b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d101      	bne.n	80148c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80148be:	2303      	movs	r3, #3
 80148c0:	e008      	b.n	80148d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	68ba      	ldr	r2, [r7, #8]
 80148c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80148d2:	2300      	movs	r3, #0
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	371c      	adds	r7, #28
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b085      	sub	sp, #20
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	32b0      	adds	r2, #176	; 0xb0
 80148f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014900:	2303      	movs	r3, #3
 8014902:	e004      	b.n	801490e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	683a      	ldr	r2, [r7, #0]
 8014908:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801490c:	2300      	movs	r3, #0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3714      	adds	r7, #20
 8014912:	46bd      	mov	sp, r7
 8014914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014918:	4770      	bx	lr
	...

0801491c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	32b0      	adds	r2, #176	; 0xb0
 801492e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014932:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014934:	2301      	movs	r3, #1
 8014936:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d101      	bne.n	8014942 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801493e:	2303      	movs	r3, #3
 8014940:	e025      	b.n	801498e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014948:	2b00      	cmp	r3, #0
 801494a:	d11f      	bne.n	801498c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	2201      	movs	r2, #1
 8014950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014954:	4b10      	ldr	r3, [pc, #64]	; (8014998 <USBD_CDC_TransmitPacket+0x7c>)
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	f003 020f 	and.w	r2, r3, #15
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	4613      	mov	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	4403      	add	r3, r0
 801496e:	3318      	adds	r3, #24
 8014970:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014972:	4b09      	ldr	r3, [pc, #36]	; (8014998 <USBD_CDC_TransmitPacket+0x7c>)
 8014974:	7819      	ldrb	r1, [r3, #0]
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f002 f80f 	bl	80169a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014988:	2300      	movs	r3, #0
 801498a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801498c:	7bfb      	ldrb	r3, [r7, #15]
}
 801498e:	4618      	mov	r0, r3
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	240000bf 	.word	0x240000bf

0801499c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	32b0      	adds	r2, #176	; 0xb0
 80149ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	32b0      	adds	r2, #176	; 0xb0
 80149be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80149c6:	2303      	movs	r3, #3
 80149c8:	e018      	b.n	80149fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	7c1b      	ldrb	r3, [r3, #16]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10a      	bne.n	80149e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149d2:	4b0c      	ldr	r3, [pc, #48]	; (8014a04 <USBD_CDC_ReceivePacket+0x68>)
 80149d4:	7819      	ldrb	r1, [r3, #0]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149e0:	6878      	ldr	r0, [r7, #4]
 80149e2:	f002 f801 	bl	80169e8 <USBD_LL_PrepareReceive>
 80149e6:	e008      	b.n	80149fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80149e8:	4b06      	ldr	r3, [pc, #24]	; (8014a04 <USBD_CDC_ReceivePacket+0x68>)
 80149ea:	7819      	ldrb	r1, [r3, #0]
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80149f2:	2340      	movs	r3, #64	; 0x40
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f001 fff7 	bl	80169e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80149fa:	2300      	movs	r3, #0
}
 80149fc:	4618      	mov	r0, r3
 80149fe:	3710      	adds	r7, #16
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	240000c0 	.word	0x240000c0

08014a08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b086      	sub	sp, #24
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	4613      	mov	r3, r2
 8014a14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d101      	bne.n	8014a20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014a1c:	2303      	movs	r3, #3
 8014a1e:	e01f      	b.n	8014a60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2200      	movs	r2, #0
 8014a24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d003      	beq.n	8014a46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	68ba      	ldr	r2, [r7, #8]
 8014a42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2201      	movs	r2, #1
 8014a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	79fa      	ldrb	r2, [r7, #7]
 8014a52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f001 fe6b 	bl	8016730 <USBD_LL_Init>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3718      	adds	r7, #24
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}

08014a68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014a72:	2300      	movs	r3, #0
 8014a74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d101      	bne.n	8014a80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014a7c:	2303      	movs	r3, #3
 8014a7e:	e025      	b.n	8014acc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	683a      	ldr	r2, [r7, #0]
 8014a84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	32ae      	adds	r2, #174	; 0xae
 8014a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00f      	beq.n	8014abc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	32ae      	adds	r2, #174	; 0xae
 8014aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aac:	f107 020e 	add.w	r2, r7, #14
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	4798      	blx	r3
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014ac2:	1c5a      	adds	r2, r3, #1
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014aca:	2300      	movs	r3, #0
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	3710      	adds	r7, #16
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014adc:	6878      	ldr	r0, [r7, #4]
 8014ade:	f001 fe79 	bl	80167d4 <USBD_LL_Start>
 8014ae2:	4603      	mov	r3, r0
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014aec:	b480      	push	{r7}
 8014aee:	b083      	sub	sp, #12
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014af4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	370c      	adds	r7, #12
 8014afa:	46bd      	mov	sp, r7
 8014afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b00:	4770      	bx	lr

08014b02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b084      	sub	sp, #16
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d009      	beq.n	8014b30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	78fa      	ldrb	r2, [r7, #3]
 8014b26:	4611      	mov	r1, r2
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	4798      	blx	r3
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3710      	adds	r7, #16
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}

08014b3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b3a:	b580      	push	{r7, lr}
 8014b3c:	b084      	sub	sp, #16
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	6078      	str	r0, [r7, #4]
 8014b42:	460b      	mov	r3, r1
 8014b44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b46:	2300      	movs	r3, #0
 8014b48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	78fa      	ldrb	r2, [r7, #3]
 8014b54:	4611      	mov	r1, r2
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	4798      	blx	r3
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d001      	beq.n	8014b64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014b60:	2303      	movs	r3, #3
 8014b62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3710      	adds	r7, #16
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}

08014b6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014b6e:	b580      	push	{r7, lr}
 8014b70:	b084      	sub	sp, #16
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
 8014b76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014b7e:	6839      	ldr	r1, [r7, #0]
 8014b80:	4618      	mov	r0, r3
 8014b82:	f001 f90e 	bl	8015da2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2201      	movs	r2, #1
 8014b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014b94:	461a      	mov	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014ba2:	f003 031f 	and.w	r3, r3, #31
 8014ba6:	2b02      	cmp	r3, #2
 8014ba8:	d01a      	beq.n	8014be0 <USBD_LL_SetupStage+0x72>
 8014baa:	2b02      	cmp	r3, #2
 8014bac:	d822      	bhi.n	8014bf4 <USBD_LL_SetupStage+0x86>
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d002      	beq.n	8014bb8 <USBD_LL_SetupStage+0x4a>
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d00a      	beq.n	8014bcc <USBD_LL_SetupStage+0x5e>
 8014bb6:	e01d      	b.n	8014bf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 fb65 	bl	8015290 <USBD_StdDevReq>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8014bca:	e020      	b.n	8014c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fbcd 	bl	8015374 <USBD_StdItfReq>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8014bde:	e016      	b.n	8014c0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014be6:	4619      	mov	r1, r3
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 fc2f 	bl	801544c <USBD_StdEPReq>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8014bf2:	e00c      	b.n	8014c0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f001 fe46 	bl	8016894 <USBD_LL_StallEP>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8014c0c:	bf00      	nop
  }

  return ret;
 8014c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3710      	adds	r7, #16
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b086      	sub	sp, #24
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	460b      	mov	r3, r1
 8014c22:	607a      	str	r2, [r7, #4]
 8014c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8014c26:	2300      	movs	r3, #0
 8014c28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014c2a:	7afb      	ldrb	r3, [r7, #11]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d16e      	bne.n	8014d0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014c36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014c3e:	2b03      	cmp	r3, #3
 8014c40:	f040 8098 	bne.w	8014d74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	689a      	ldr	r2, [r3, #8]
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d913      	bls.n	8014c78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	689a      	ldr	r2, [r3, #8]
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	1ad2      	subs	r2, r2, r3
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	68da      	ldr	r2, [r3, #12]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	689b      	ldr	r3, [r3, #8]
 8014c66:	4293      	cmp	r3, r2
 8014c68:	bf28      	it	cs
 8014c6a:	4613      	movcs	r3, r2
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	6879      	ldr	r1, [r7, #4]
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f001 f98a 	bl	8015f8a <USBD_CtlContinueRx>
 8014c76:	e07d      	b.n	8014d74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014c7e:	f003 031f 	and.w	r3, r3, #31
 8014c82:	2b02      	cmp	r3, #2
 8014c84:	d014      	beq.n	8014cb0 <USBD_LL_DataOutStage+0x98>
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	d81d      	bhi.n	8014cc6 <USBD_LL_DataOutStage+0xae>
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d002      	beq.n	8014c94 <USBD_LL_DataOutStage+0x7c>
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d003      	beq.n	8014c9a <USBD_LL_DataOutStage+0x82>
 8014c92:	e018      	b.n	8014cc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014c94:	2300      	movs	r3, #0
 8014c96:	75bb      	strb	r3, [r7, #22]
            break;
 8014c98:	e018      	b.n	8014ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	68f8      	ldr	r0, [r7, #12]
 8014ca6:	f000 fa64 	bl	8015172 <USBD_CoreFindIF>
 8014caa:	4603      	mov	r3, r0
 8014cac:	75bb      	strb	r3, [r7, #22]
            break;
 8014cae:	e00d      	b.n	8014ccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	4619      	mov	r1, r3
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f000 fa66 	bl	801518c <USBD_CoreFindEP>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	75bb      	strb	r3, [r7, #22]
            break;
 8014cc4:	e002      	b.n	8014ccc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	75bb      	strb	r3, [r7, #22]
            break;
 8014cca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014ccc:	7dbb      	ldrb	r3, [r7, #22]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d119      	bne.n	8014d06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	2b03      	cmp	r3, #3
 8014cdc:	d113      	bne.n	8014d06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014cde:	7dba      	ldrb	r2, [r7, #22]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	32ae      	adds	r2, #174	; 0xae
 8014ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce8:	691b      	ldr	r3, [r3, #16]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00b      	beq.n	8014d06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014cee:	7dba      	ldrb	r2, [r7, #22]
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014cf6:	7dba      	ldrb	r2, [r7, #22]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	32ae      	adds	r2, #174	; 0xae
 8014cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d00:	691b      	ldr	r3, [r3, #16]
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f001 f950 	bl	8015fac <USBD_CtlSendStatus>
 8014d0c:	e032      	b.n	8014d74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014d0e:	7afb      	ldrb	r3, [r7, #11]
 8014d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	4619      	mov	r1, r3
 8014d18:	68f8      	ldr	r0, [r7, #12]
 8014d1a:	f000 fa37 	bl	801518c <USBD_CoreFindEP>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014d22:	7dbb      	ldrb	r3, [r7, #22]
 8014d24:	2bff      	cmp	r3, #255	; 0xff
 8014d26:	d025      	beq.n	8014d74 <USBD_LL_DataOutStage+0x15c>
 8014d28:	7dbb      	ldrb	r3, [r7, #22]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d122      	bne.n	8014d74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d34:	b2db      	uxtb	r3, r3
 8014d36:	2b03      	cmp	r3, #3
 8014d38:	d117      	bne.n	8014d6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014d3a:	7dba      	ldrb	r2, [r7, #22]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	32ae      	adds	r2, #174	; 0xae
 8014d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d44:	699b      	ldr	r3, [r3, #24]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d00f      	beq.n	8014d6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014d4a:	7dba      	ldrb	r2, [r7, #22]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014d52:	7dba      	ldrb	r2, [r7, #22]
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	32ae      	adds	r2, #174	; 0xae
 8014d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d5c:	699b      	ldr	r3, [r3, #24]
 8014d5e:	7afa      	ldrb	r2, [r7, #11]
 8014d60:	4611      	mov	r1, r2
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	4798      	blx	r3
 8014d66:	4603      	mov	r3, r0
 8014d68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014d6a:	7dfb      	ldrb	r3, [r7, #23]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d001      	beq.n	8014d74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014d70:	7dfb      	ldrb	r3, [r7, #23]
 8014d72:	e000      	b.n	8014d76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3718      	adds	r7, #24
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}

08014d7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014d7e:	b580      	push	{r7, lr}
 8014d80:	b086      	sub	sp, #24
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	60f8      	str	r0, [r7, #12]
 8014d86:	460b      	mov	r3, r1
 8014d88:	607a      	str	r2, [r7, #4]
 8014d8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014d8c:	7afb      	ldrb	r3, [r7, #11]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d16f      	bne.n	8014e72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	3314      	adds	r3, #20
 8014d96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014d9e:	2b02      	cmp	r3, #2
 8014da0:	d15a      	bne.n	8014e58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	689a      	ldr	r2, [r3, #8]
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d914      	bls.n	8014dd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014dae:	693b      	ldr	r3, [r7, #16]
 8014db0:	689a      	ldr	r2, [r3, #8]
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	68db      	ldr	r3, [r3, #12]
 8014db6:	1ad2      	subs	r2, r2, r3
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014dbc:	693b      	ldr	r3, [r7, #16]
 8014dbe:	689b      	ldr	r3, [r3, #8]
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	6879      	ldr	r1, [r7, #4]
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	f001 f8b2 	bl	8015f2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014dca:	2300      	movs	r3, #0
 8014dcc:	2200      	movs	r2, #0
 8014dce:	2100      	movs	r1, #0
 8014dd0:	68f8      	ldr	r0, [r7, #12]
 8014dd2:	f001 fe09 	bl	80169e8 <USBD_LL_PrepareReceive>
 8014dd6:	e03f      	b.n	8014e58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014dd8:	693b      	ldr	r3, [r7, #16]
 8014dda:	68da      	ldr	r2, [r3, #12]
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	689b      	ldr	r3, [r3, #8]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d11c      	bne.n	8014e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	685a      	ldr	r2, [r3, #4]
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d316      	bcc.n	8014e1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	685a      	ldr	r2, [r3, #4]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d20f      	bcs.n	8014e1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014dfe:	2200      	movs	r2, #0
 8014e00:	2100      	movs	r1, #0
 8014e02:	68f8      	ldr	r0, [r7, #12]
 8014e04:	f001 f893 	bl	8015f2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e10:	2300      	movs	r3, #0
 8014e12:	2200      	movs	r2, #0
 8014e14:	2100      	movs	r1, #0
 8014e16:	68f8      	ldr	r0, [r7, #12]
 8014e18:	f001 fde6 	bl	80169e8 <USBD_LL_PrepareReceive>
 8014e1c:	e01c      	b.n	8014e58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	2b03      	cmp	r3, #3
 8014e28:	d10f      	bne.n	8014e4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d009      	beq.n	8014e4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	68f8      	ldr	r0, [r7, #12]
 8014e48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e4a:	2180      	movs	r1, #128	; 0x80
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f001 fd21 	bl	8016894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f001 f8bd 	bl	8015fd2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d03a      	beq.n	8014ed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f7ff fe42 	bl	8014aec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014e70:	e032      	b.n	8014ed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014e72:	7afb      	ldrb	r3, [r7, #11]
 8014e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	68f8      	ldr	r0, [r7, #12]
 8014e7e:	f000 f985 	bl	801518c <USBD_CoreFindEP>
 8014e82:	4603      	mov	r3, r0
 8014e84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014e86:	7dfb      	ldrb	r3, [r7, #23]
 8014e88:	2bff      	cmp	r3, #255	; 0xff
 8014e8a:	d025      	beq.n	8014ed8 <USBD_LL_DataInStage+0x15a>
 8014e8c:	7dfb      	ldrb	r3, [r7, #23]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d122      	bne.n	8014ed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e98:	b2db      	uxtb	r3, r3
 8014e9a:	2b03      	cmp	r3, #3
 8014e9c:	d11c      	bne.n	8014ed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014e9e:	7dfa      	ldrb	r2, [r7, #23]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	32ae      	adds	r2, #174	; 0xae
 8014ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ea8:	695b      	ldr	r3, [r3, #20]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d014      	beq.n	8014ed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014eae:	7dfa      	ldrb	r2, [r7, #23]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014eb6:	7dfa      	ldrb	r2, [r7, #23]
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	32ae      	adds	r2, #174	; 0xae
 8014ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ec0:	695b      	ldr	r3, [r3, #20]
 8014ec2:	7afa      	ldrb	r2, [r7, #11]
 8014ec4:	4611      	mov	r1, r2
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	4798      	blx	r3
 8014eca:	4603      	mov	r3, r0
 8014ecc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014ece:	7dbb      	ldrb	r3, [r7, #22]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d001      	beq.n	8014ed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014ed4:	7dbb      	ldrb	r3, [r7, #22]
 8014ed6:	e000      	b.n	8014eda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3718      	adds	r7, #24
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}

08014ee2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014ee2:	b580      	push	{r7, lr}
 8014ee4:	b084      	sub	sp, #16
 8014ee6:	af00      	add	r7, sp, #0
 8014ee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eea:	2300      	movs	r3, #0
 8014eec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2200      	movs	r2, #0
 8014f02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2200      	movs	r2, #0
 8014f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d014      	beq.n	8014f48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f24:	685b      	ldr	r3, [r3, #4]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d00e      	beq.n	8014f48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	6852      	ldr	r2, [r2, #4]
 8014f36:	b2d2      	uxtb	r2, r2
 8014f38:	4611      	mov	r1, r2
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	4798      	blx	r3
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d001      	beq.n	8014f48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014f44:	2303      	movs	r3, #3
 8014f46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014f48:	2340      	movs	r3, #64	; 0x40
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	2100      	movs	r1, #0
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f001 fc5b 	bl	801680a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2201      	movs	r2, #1
 8014f58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	2240      	movs	r2, #64	; 0x40
 8014f60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014f64:	2340      	movs	r3, #64	; 0x40
 8014f66:	2200      	movs	r2, #0
 8014f68:	2180      	movs	r1, #128	; 0x80
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f001 fc4d 	bl	801680a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2201      	movs	r2, #1
 8014f74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2240      	movs	r2, #64	; 0x40
 8014f7a:	621a      	str	r2, [r3, #32]

  return ret;
 8014f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3710      	adds	r7, #16
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}

08014f86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014f86:	b480      	push	{r7}
 8014f88:	b083      	sub	sp, #12
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	460b      	mov	r3, r1
 8014f90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	78fa      	ldrb	r2, [r7, #3]
 8014f96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014f98:	2300      	movs	r3, #0
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	370c      	adds	r7, #12
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014fa6:	b480      	push	{r7}
 8014fa8:	b083      	sub	sp, #12
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	2b04      	cmp	r3, #4
 8014fb8:	d006      	beq.n	8014fc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fc0:	b2da      	uxtb	r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	2204      	movs	r2, #4
 8014fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014fd0:	2300      	movs	r3, #0
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr

08014fde <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014fde:	b480      	push	{r7}
 8014fe0:	b083      	sub	sp, #12
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b04      	cmp	r3, #4
 8014ff0:	d106      	bne.n	8015000 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014ff8:	b2da      	uxtb	r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015000:	2300      	movs	r3, #0
}
 8015002:	4618      	mov	r0, r3
 8015004:	370c      	adds	r7, #12
 8015006:	46bd      	mov	sp, r7
 8015008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500c:	4770      	bx	lr

0801500e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801500e:	b580      	push	{r7, lr}
 8015010:	b082      	sub	sp, #8
 8015012:	af00      	add	r7, sp, #0
 8015014:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801501c:	b2db      	uxtb	r3, r3
 801501e:	2b03      	cmp	r3, #3
 8015020:	d110      	bne.n	8015044 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015028:	2b00      	cmp	r3, #0
 801502a:	d00b      	beq.n	8015044 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015032:	69db      	ldr	r3, [r3, #28]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d005      	beq.n	8015044 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801503e:	69db      	ldr	r3, [r3, #28]
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015044:	2300      	movs	r3, #0
}
 8015046:	4618      	mov	r0, r3
 8015048:	3708      	adds	r7, #8
 801504a:	46bd      	mov	sp, r7
 801504c:	bd80      	pop	{r7, pc}

0801504e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801504e:	b580      	push	{r7, lr}
 8015050:	b082      	sub	sp, #8
 8015052:	af00      	add	r7, sp, #0
 8015054:	6078      	str	r0, [r7, #4]
 8015056:	460b      	mov	r3, r1
 8015058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	32ae      	adds	r2, #174	; 0xae
 8015064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d101      	bne.n	8015070 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801506c:	2303      	movs	r3, #3
 801506e:	e01c      	b.n	80150aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015076:	b2db      	uxtb	r3, r3
 8015078:	2b03      	cmp	r3, #3
 801507a:	d115      	bne.n	80150a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	32ae      	adds	r2, #174	; 0xae
 8015086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801508a:	6a1b      	ldr	r3, [r3, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d00b      	beq.n	80150a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	32ae      	adds	r2, #174	; 0xae
 801509a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801509e:	6a1b      	ldr	r3, [r3, #32]
 80150a0:	78fa      	ldrb	r2, [r7, #3]
 80150a2:	4611      	mov	r1, r2
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80150a8:	2300      	movs	r3, #0
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3708      	adds	r7, #8
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	460b      	mov	r3, r1
 80150bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	32ae      	adds	r2, #174	; 0xae
 80150c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d101      	bne.n	80150d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80150d0:	2303      	movs	r3, #3
 80150d2:	e01c      	b.n	801510e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150da:	b2db      	uxtb	r3, r3
 80150dc:	2b03      	cmp	r3, #3
 80150de:	d115      	bne.n	801510c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	32ae      	adds	r2, #174	; 0xae
 80150ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d00b      	beq.n	801510c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	32ae      	adds	r2, #174	; 0xae
 80150fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015104:	78fa      	ldrb	r2, [r7, #3]
 8015106:	4611      	mov	r1, r2
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015116:	b480      	push	{r7}
 8015118:	b083      	sub	sp, #12
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801511e:	2300      	movs	r3, #0
}
 8015120:	4618      	mov	r0, r3
 8015122:	370c      	adds	r7, #12
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr

0801512c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b084      	sub	sp, #16
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015134:	2300      	movs	r3, #0
 8015136:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	2201      	movs	r2, #1
 801513c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015146:	2b00      	cmp	r3, #0
 8015148:	d00e      	beq.n	8015168 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	6852      	ldr	r2, [r2, #4]
 8015156:	b2d2      	uxtb	r2, r2
 8015158:	4611      	mov	r1, r2
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	4798      	blx	r3
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015164:	2303      	movs	r3, #3
 8015166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015168:	7bfb      	ldrb	r3, [r7, #15]
}
 801516a:	4618      	mov	r0, r3
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}

08015172 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015172:	b480      	push	{r7}
 8015174:	b083      	sub	sp, #12
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
 801517a:	460b      	mov	r3, r1
 801517c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801517e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015180:	4618      	mov	r0, r3
 8015182:	370c      	adds	r7, #12
 8015184:	46bd      	mov	sp, r7
 8015186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518a:	4770      	bx	lr

0801518c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801518c:	b480      	push	{r7}
 801518e:	b083      	sub	sp, #12
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	460b      	mov	r3, r1
 8015196:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015198:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801519a:	4618      	mov	r0, r3
 801519c:	370c      	adds	r7, #12
 801519e:	46bd      	mov	sp, r7
 80151a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a4:	4770      	bx	lr

080151a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80151a6:	b580      	push	{r7, lr}
 80151a8:	b086      	sub	sp, #24
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
 80151ae:	460b      	mov	r3, r1
 80151b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80151ba:	2300      	movs	r3, #0
 80151bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	885b      	ldrh	r3, [r3, #2]
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d920      	bls.n	8015210 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	781b      	ldrb	r3, [r3, #0]
 80151d2:	b29b      	uxth	r3, r3
 80151d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80151d6:	e013      	b.n	8015200 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80151d8:	f107 030a 	add.w	r3, r7, #10
 80151dc:	4619      	mov	r1, r3
 80151de:	6978      	ldr	r0, [r7, #20]
 80151e0:	f000 f81b 	bl	801521a <USBD_GetNextDesc>
 80151e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	785b      	ldrb	r3, [r3, #1]
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d108      	bne.n	8015200 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	789b      	ldrb	r3, [r3, #2]
 80151f6:	78fa      	ldrb	r2, [r7, #3]
 80151f8:	429a      	cmp	r2, r3
 80151fa:	d008      	beq.n	801520e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80151fc:	2300      	movs	r3, #0
 80151fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	885b      	ldrh	r3, [r3, #2]
 8015204:	b29a      	uxth	r2, r3
 8015206:	897b      	ldrh	r3, [r7, #10]
 8015208:	429a      	cmp	r2, r3
 801520a:	d8e5      	bhi.n	80151d8 <USBD_GetEpDesc+0x32>
 801520c:	e000      	b.n	8015210 <USBD_GetEpDesc+0x6a>
          break;
 801520e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015210:	693b      	ldr	r3, [r7, #16]
}
 8015212:	4618      	mov	r0, r3
 8015214:	3718      	adds	r7, #24
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801521a:	b480      	push	{r7}
 801521c:	b085      	sub	sp, #20
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	881a      	ldrh	r2, [r3, #0]
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	b29b      	uxth	r3, r3
 8015232:	4413      	add	r3, r2
 8015234:	b29a      	uxth	r2, r3
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	461a      	mov	r2, r3
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4413      	add	r3, r2
 8015244:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015246:	68fb      	ldr	r3, [r7, #12]
}
 8015248:	4618      	mov	r0, r3
 801524a:	3714      	adds	r7, #20
 801524c:	46bd      	mov	sp, r7
 801524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015252:	4770      	bx	lr

08015254 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015254:	b480      	push	{r7}
 8015256:	b087      	sub	sp, #28
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	3301      	adds	r3, #1
 801526a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015272:	8a3b      	ldrh	r3, [r7, #16]
 8015274:	021b      	lsls	r3, r3, #8
 8015276:	b21a      	sxth	r2, r3
 8015278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801527c:	4313      	orrs	r3, r2
 801527e:	b21b      	sxth	r3, r3
 8015280:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015282:	89fb      	ldrh	r3, [r7, #14]
}
 8015284:	4618      	mov	r0, r3
 8015286:	371c      	adds	r7, #28
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr

08015290 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801529a:	2300      	movs	r3, #0
 801529c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80152a6:	2b40      	cmp	r3, #64	; 0x40
 80152a8:	d005      	beq.n	80152b6 <USBD_StdDevReq+0x26>
 80152aa:	2b40      	cmp	r3, #64	; 0x40
 80152ac:	d857      	bhi.n	801535e <USBD_StdDevReq+0xce>
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d00f      	beq.n	80152d2 <USBD_StdDevReq+0x42>
 80152b2:	2b20      	cmp	r3, #32
 80152b4:	d153      	bne.n	801535e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	32ae      	adds	r2, #174	; 0xae
 80152c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c4:	689b      	ldr	r3, [r3, #8]
 80152c6:	6839      	ldr	r1, [r7, #0]
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	4798      	blx	r3
 80152cc:	4603      	mov	r3, r0
 80152ce:	73fb      	strb	r3, [r7, #15]
      break;
 80152d0:	e04a      	b.n	8015368 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	785b      	ldrb	r3, [r3, #1]
 80152d6:	2b09      	cmp	r3, #9
 80152d8:	d83b      	bhi.n	8015352 <USBD_StdDevReq+0xc2>
 80152da:	a201      	add	r2, pc, #4	; (adr r2, 80152e0 <USBD_StdDevReq+0x50>)
 80152dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e0:	08015335 	.word	0x08015335
 80152e4:	08015349 	.word	0x08015349
 80152e8:	08015353 	.word	0x08015353
 80152ec:	0801533f 	.word	0x0801533f
 80152f0:	08015353 	.word	0x08015353
 80152f4:	08015313 	.word	0x08015313
 80152f8:	08015309 	.word	0x08015309
 80152fc:	08015353 	.word	0x08015353
 8015300:	0801532b 	.word	0x0801532b
 8015304:	0801531d 	.word	0x0801531d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015308:	6839      	ldr	r1, [r7, #0]
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f000 fa3c 	bl	8015788 <USBD_GetDescriptor>
          break;
 8015310:	e024      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015312:	6839      	ldr	r1, [r7, #0]
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f000 fba1 	bl	8015a5c <USBD_SetAddress>
          break;
 801531a:	e01f      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801531c:	6839      	ldr	r1, [r7, #0]
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	f000 fbe0 	bl	8015ae4 <USBD_SetConfig>
 8015324:	4603      	mov	r3, r0
 8015326:	73fb      	strb	r3, [r7, #15]
          break;
 8015328:	e018      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801532a:	6839      	ldr	r1, [r7, #0]
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f000 fc83 	bl	8015c38 <USBD_GetConfig>
          break;
 8015332:	e013      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015334:	6839      	ldr	r1, [r7, #0]
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f000 fcb4 	bl	8015ca4 <USBD_GetStatus>
          break;
 801533c:	e00e      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801533e:	6839      	ldr	r1, [r7, #0]
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 fce3 	bl	8015d0c <USBD_SetFeature>
          break;
 8015346:	e009      	b.n	801535c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015348:	6839      	ldr	r1, [r7, #0]
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f000 fd07 	bl	8015d5e <USBD_ClrFeature>
          break;
 8015350:	e004      	b.n	801535c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015352:	6839      	ldr	r1, [r7, #0]
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f000 fd5e 	bl	8015e16 <USBD_CtlError>
          break;
 801535a:	bf00      	nop
      }
      break;
 801535c:	e004      	b.n	8015368 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801535e:	6839      	ldr	r1, [r7, #0]
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f000 fd58 	bl	8015e16 <USBD_CtlError>
      break;
 8015366:	bf00      	nop
  }

  return ret;
 8015368:	7bfb      	ldrb	r3, [r7, #15]
}
 801536a:	4618      	mov	r0, r3
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop

08015374 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801537e:	2300      	movs	r3, #0
 8015380:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	781b      	ldrb	r3, [r3, #0]
 8015386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801538a:	2b40      	cmp	r3, #64	; 0x40
 801538c:	d005      	beq.n	801539a <USBD_StdItfReq+0x26>
 801538e:	2b40      	cmp	r3, #64	; 0x40
 8015390:	d852      	bhi.n	8015438 <USBD_StdItfReq+0xc4>
 8015392:	2b00      	cmp	r3, #0
 8015394:	d001      	beq.n	801539a <USBD_StdItfReq+0x26>
 8015396:	2b20      	cmp	r3, #32
 8015398:	d14e      	bne.n	8015438 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	3b01      	subs	r3, #1
 80153a4:	2b02      	cmp	r3, #2
 80153a6:	d840      	bhi.n	801542a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	889b      	ldrh	r3, [r3, #4]
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	2b01      	cmp	r3, #1
 80153b0:	d836      	bhi.n	8015420 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	889b      	ldrh	r3, [r3, #4]
 80153b6:	b2db      	uxtb	r3, r3
 80153b8:	4619      	mov	r1, r3
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f7ff fed9 	bl	8015172 <USBD_CoreFindIF>
 80153c0:	4603      	mov	r3, r0
 80153c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153c4:	7bbb      	ldrb	r3, [r7, #14]
 80153c6:	2bff      	cmp	r3, #255	; 0xff
 80153c8:	d01d      	beq.n	8015406 <USBD_StdItfReq+0x92>
 80153ca:	7bbb      	ldrb	r3, [r7, #14]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d11a      	bne.n	8015406 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80153d0:	7bba      	ldrb	r2, [r7, #14]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	32ae      	adds	r2, #174	; 0xae
 80153d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00f      	beq.n	8015400 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80153e0:	7bba      	ldrb	r2, [r7, #14]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80153e8:	7bba      	ldrb	r2, [r7, #14]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	32ae      	adds	r2, #174	; 0xae
 80153ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153f2:	689b      	ldr	r3, [r3, #8]
 80153f4:	6839      	ldr	r1, [r7, #0]
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	4798      	blx	r3
 80153fa:	4603      	mov	r3, r0
 80153fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80153fe:	e004      	b.n	801540a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015400:	2303      	movs	r3, #3
 8015402:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015404:	e001      	b.n	801540a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015406:	2303      	movs	r3, #3
 8015408:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	88db      	ldrh	r3, [r3, #6]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d110      	bne.n	8015434 <USBD_StdItfReq+0xc0>
 8015412:	7bfb      	ldrb	r3, [r7, #15]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d10d      	bne.n	8015434 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f000 fdc7 	bl	8015fac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801541e:	e009      	b.n	8015434 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015420:	6839      	ldr	r1, [r7, #0]
 8015422:	6878      	ldr	r0, [r7, #4]
 8015424:	f000 fcf7 	bl	8015e16 <USBD_CtlError>
          break;
 8015428:	e004      	b.n	8015434 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801542a:	6839      	ldr	r1, [r7, #0]
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f000 fcf2 	bl	8015e16 <USBD_CtlError>
          break;
 8015432:	e000      	b.n	8015436 <USBD_StdItfReq+0xc2>
          break;
 8015434:	bf00      	nop
      }
      break;
 8015436:	e004      	b.n	8015442 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015438:	6839      	ldr	r1, [r7, #0]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 fceb 	bl	8015e16 <USBD_CtlError>
      break;
 8015440:	bf00      	nop
  }

  return ret;
 8015442:	7bfb      	ldrb	r3, [r7, #15]
}
 8015444:	4618      	mov	r0, r3
 8015446:	3710      	adds	r7, #16
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015456:	2300      	movs	r3, #0
 8015458:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	889b      	ldrh	r3, [r3, #4]
 801545e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015468:	2b40      	cmp	r3, #64	; 0x40
 801546a:	d007      	beq.n	801547c <USBD_StdEPReq+0x30>
 801546c:	2b40      	cmp	r3, #64	; 0x40
 801546e:	f200 817f 	bhi.w	8015770 <USBD_StdEPReq+0x324>
 8015472:	2b00      	cmp	r3, #0
 8015474:	d02a      	beq.n	80154cc <USBD_StdEPReq+0x80>
 8015476:	2b20      	cmp	r3, #32
 8015478:	f040 817a 	bne.w	8015770 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801547c:	7bbb      	ldrb	r3, [r7, #14]
 801547e:	4619      	mov	r1, r3
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f7ff fe83 	bl	801518c <USBD_CoreFindEP>
 8015486:	4603      	mov	r3, r0
 8015488:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801548a:	7b7b      	ldrb	r3, [r7, #13]
 801548c:	2bff      	cmp	r3, #255	; 0xff
 801548e:	f000 8174 	beq.w	801577a <USBD_StdEPReq+0x32e>
 8015492:	7b7b      	ldrb	r3, [r7, #13]
 8015494:	2b00      	cmp	r3, #0
 8015496:	f040 8170 	bne.w	801577a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801549a:	7b7a      	ldrb	r2, [r7, #13]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80154a2:	7b7a      	ldrb	r2, [r7, #13]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	32ae      	adds	r2, #174	; 0xae
 80154a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ac:	689b      	ldr	r3, [r3, #8]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f000 8163 	beq.w	801577a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80154b4:	7b7a      	ldrb	r2, [r7, #13]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	32ae      	adds	r2, #174	; 0xae
 80154ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	6839      	ldr	r1, [r7, #0]
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	4798      	blx	r3
 80154c6:	4603      	mov	r3, r0
 80154c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80154ca:	e156      	b.n	801577a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	785b      	ldrb	r3, [r3, #1]
 80154d0:	2b03      	cmp	r3, #3
 80154d2:	d008      	beq.n	80154e6 <USBD_StdEPReq+0x9a>
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	f300 8145 	bgt.w	8015764 <USBD_StdEPReq+0x318>
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f000 809b 	beq.w	8015616 <USBD_StdEPReq+0x1ca>
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d03c      	beq.n	801555e <USBD_StdEPReq+0x112>
 80154e4:	e13e      	b.n	8015764 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154ec:	b2db      	uxtb	r3, r3
 80154ee:	2b02      	cmp	r3, #2
 80154f0:	d002      	beq.n	80154f8 <USBD_StdEPReq+0xac>
 80154f2:	2b03      	cmp	r3, #3
 80154f4:	d016      	beq.n	8015524 <USBD_StdEPReq+0xd8>
 80154f6:	e02c      	b.n	8015552 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80154f8:	7bbb      	ldrb	r3, [r7, #14]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00d      	beq.n	801551a <USBD_StdEPReq+0xce>
 80154fe:	7bbb      	ldrb	r3, [r7, #14]
 8015500:	2b80      	cmp	r3, #128	; 0x80
 8015502:	d00a      	beq.n	801551a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015504:	7bbb      	ldrb	r3, [r7, #14]
 8015506:	4619      	mov	r1, r3
 8015508:	6878      	ldr	r0, [r7, #4]
 801550a:	f001 f9c3 	bl	8016894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801550e:	2180      	movs	r1, #128	; 0x80
 8015510:	6878      	ldr	r0, [r7, #4]
 8015512:	f001 f9bf 	bl	8016894 <USBD_LL_StallEP>
 8015516:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015518:	e020      	b.n	801555c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801551a:	6839      	ldr	r1, [r7, #0]
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f000 fc7a 	bl	8015e16 <USBD_CtlError>
              break;
 8015522:	e01b      	b.n	801555c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	885b      	ldrh	r3, [r3, #2]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10e      	bne.n	801554a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801552c:	7bbb      	ldrb	r3, [r7, #14]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d00b      	beq.n	801554a <USBD_StdEPReq+0xfe>
 8015532:	7bbb      	ldrb	r3, [r7, #14]
 8015534:	2b80      	cmp	r3, #128	; 0x80
 8015536:	d008      	beq.n	801554a <USBD_StdEPReq+0xfe>
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	88db      	ldrh	r3, [r3, #6]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d104      	bne.n	801554a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015540:	7bbb      	ldrb	r3, [r7, #14]
 8015542:	4619      	mov	r1, r3
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f001 f9a5 	bl	8016894 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801554a:	6878      	ldr	r0, [r7, #4]
 801554c:	f000 fd2e 	bl	8015fac <USBD_CtlSendStatus>

              break;
 8015550:	e004      	b.n	801555c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015552:	6839      	ldr	r1, [r7, #0]
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 fc5e 	bl	8015e16 <USBD_CtlError>
              break;
 801555a:	bf00      	nop
          }
          break;
 801555c:	e107      	b.n	801576e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015564:	b2db      	uxtb	r3, r3
 8015566:	2b02      	cmp	r3, #2
 8015568:	d002      	beq.n	8015570 <USBD_StdEPReq+0x124>
 801556a:	2b03      	cmp	r3, #3
 801556c:	d016      	beq.n	801559c <USBD_StdEPReq+0x150>
 801556e:	e04b      	b.n	8015608 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015570:	7bbb      	ldrb	r3, [r7, #14]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d00d      	beq.n	8015592 <USBD_StdEPReq+0x146>
 8015576:	7bbb      	ldrb	r3, [r7, #14]
 8015578:	2b80      	cmp	r3, #128	; 0x80
 801557a:	d00a      	beq.n	8015592 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801557c:	7bbb      	ldrb	r3, [r7, #14]
 801557e:	4619      	mov	r1, r3
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f001 f987 	bl	8016894 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015586:	2180      	movs	r1, #128	; 0x80
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f001 f983 	bl	8016894 <USBD_LL_StallEP>
 801558e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015590:	e040      	b.n	8015614 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015592:	6839      	ldr	r1, [r7, #0]
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f000 fc3e 	bl	8015e16 <USBD_CtlError>
              break;
 801559a:	e03b      	b.n	8015614 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	885b      	ldrh	r3, [r3, #2]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d136      	bne.n	8015612 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80155a4:	7bbb      	ldrb	r3, [r7, #14]
 80155a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d004      	beq.n	80155b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80155ae:	7bbb      	ldrb	r3, [r7, #14]
 80155b0:	4619      	mov	r1, r3
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f001 f98d 	bl	80168d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f000 fcf7 	bl	8015fac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80155be:	7bbb      	ldrb	r3, [r7, #14]
 80155c0:	4619      	mov	r1, r3
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f7ff fde2 	bl	801518c <USBD_CoreFindEP>
 80155c8:	4603      	mov	r3, r0
 80155ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80155cc:	7b7b      	ldrb	r3, [r7, #13]
 80155ce:	2bff      	cmp	r3, #255	; 0xff
 80155d0:	d01f      	beq.n	8015612 <USBD_StdEPReq+0x1c6>
 80155d2:	7b7b      	ldrb	r3, [r7, #13]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d11c      	bne.n	8015612 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80155d8:	7b7a      	ldrb	r2, [r7, #13]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80155e0:	7b7a      	ldrb	r2, [r7, #13]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	32ae      	adds	r2, #174	; 0xae
 80155e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ea:	689b      	ldr	r3, [r3, #8]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d010      	beq.n	8015612 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80155f0:	7b7a      	ldrb	r2, [r7, #13]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	32ae      	adds	r2, #174	; 0xae
 80155f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155fa:	689b      	ldr	r3, [r3, #8]
 80155fc:	6839      	ldr	r1, [r7, #0]
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	4798      	blx	r3
 8015602:	4603      	mov	r3, r0
 8015604:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015606:	e004      	b.n	8015612 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015608:	6839      	ldr	r1, [r7, #0]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f000 fc03 	bl	8015e16 <USBD_CtlError>
              break;
 8015610:	e000      	b.n	8015614 <USBD_StdEPReq+0x1c8>
              break;
 8015612:	bf00      	nop
          }
          break;
 8015614:	e0ab      	b.n	801576e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801561c:	b2db      	uxtb	r3, r3
 801561e:	2b02      	cmp	r3, #2
 8015620:	d002      	beq.n	8015628 <USBD_StdEPReq+0x1dc>
 8015622:	2b03      	cmp	r3, #3
 8015624:	d032      	beq.n	801568c <USBD_StdEPReq+0x240>
 8015626:	e097      	b.n	8015758 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015628:	7bbb      	ldrb	r3, [r7, #14]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d007      	beq.n	801563e <USBD_StdEPReq+0x1f2>
 801562e:	7bbb      	ldrb	r3, [r7, #14]
 8015630:	2b80      	cmp	r3, #128	; 0x80
 8015632:	d004      	beq.n	801563e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015634:	6839      	ldr	r1, [r7, #0]
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f000 fbed 	bl	8015e16 <USBD_CtlError>
                break;
 801563c:	e091      	b.n	8015762 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801563e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015642:	2b00      	cmp	r3, #0
 8015644:	da0b      	bge.n	801565e <USBD_StdEPReq+0x212>
 8015646:	7bbb      	ldrb	r3, [r7, #14]
 8015648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801564c:	4613      	mov	r3, r2
 801564e:	009b      	lsls	r3, r3, #2
 8015650:	4413      	add	r3, r2
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	3310      	adds	r3, #16
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	3304      	adds	r3, #4
 801565c:	e00b      	b.n	8015676 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801565e:	7bbb      	ldrb	r3, [r7, #14]
 8015660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015664:	4613      	mov	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	4413      	add	r3, r2
 801566a:	009b      	lsls	r3, r3, #2
 801566c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	4413      	add	r3, r2
 8015674:	3304      	adds	r3, #4
 8015676:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	2200      	movs	r2, #0
 801567c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	2202      	movs	r2, #2
 8015682:	4619      	mov	r1, r3
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f000 fc37 	bl	8015ef8 <USBD_CtlSendData>
              break;
 801568a:	e06a      	b.n	8015762 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801568c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015690:	2b00      	cmp	r3, #0
 8015692:	da11      	bge.n	80156b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015694:	7bbb      	ldrb	r3, [r7, #14]
 8015696:	f003 020f 	and.w	r2, r3, #15
 801569a:	6879      	ldr	r1, [r7, #4]
 801569c:	4613      	mov	r3, r2
 801569e:	009b      	lsls	r3, r3, #2
 80156a0:	4413      	add	r3, r2
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	440b      	add	r3, r1
 80156a6:	3324      	adds	r3, #36	; 0x24
 80156a8:	881b      	ldrh	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d117      	bne.n	80156de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80156ae:	6839      	ldr	r1, [r7, #0]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 fbb0 	bl	8015e16 <USBD_CtlError>
                  break;
 80156b6:	e054      	b.n	8015762 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80156b8:	7bbb      	ldrb	r3, [r7, #14]
 80156ba:	f003 020f 	and.w	r2, r3, #15
 80156be:	6879      	ldr	r1, [r7, #4]
 80156c0:	4613      	mov	r3, r2
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	4413      	add	r3, r2
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	440b      	add	r3, r1
 80156ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d104      	bne.n	80156de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80156d4:	6839      	ldr	r1, [r7, #0]
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f000 fb9d 	bl	8015e16 <USBD_CtlError>
                  break;
 80156dc:	e041      	b.n	8015762 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80156de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	da0b      	bge.n	80156fe <USBD_StdEPReq+0x2b2>
 80156e6:	7bbb      	ldrb	r3, [r7, #14]
 80156e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80156ec:	4613      	mov	r3, r2
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	4413      	add	r3, r2
 80156f2:	009b      	lsls	r3, r3, #2
 80156f4:	3310      	adds	r3, #16
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	4413      	add	r3, r2
 80156fa:	3304      	adds	r3, #4
 80156fc:	e00b      	b.n	8015716 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80156fe:	7bbb      	ldrb	r3, [r7, #14]
 8015700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015704:	4613      	mov	r3, r2
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	4413      	add	r3, r2
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	4413      	add	r3, r2
 8015714:	3304      	adds	r3, #4
 8015716:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015718:	7bbb      	ldrb	r3, [r7, #14]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d002      	beq.n	8015724 <USBD_StdEPReq+0x2d8>
 801571e:	7bbb      	ldrb	r3, [r7, #14]
 8015720:	2b80      	cmp	r3, #128	; 0x80
 8015722:	d103      	bne.n	801572c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	2200      	movs	r2, #0
 8015728:	601a      	str	r2, [r3, #0]
 801572a:	e00e      	b.n	801574a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801572c:	7bbb      	ldrb	r3, [r7, #14]
 801572e:	4619      	mov	r1, r3
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f001 f8ed 	bl	8016910 <USBD_LL_IsStallEP>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d003      	beq.n	8015744 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	2201      	movs	r2, #1
 8015740:	601a      	str	r2, [r3, #0]
 8015742:	e002      	b.n	801574a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2200      	movs	r2, #0
 8015748:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	2202      	movs	r2, #2
 801574e:	4619      	mov	r1, r3
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f000 fbd1 	bl	8015ef8 <USBD_CtlSendData>
              break;
 8015756:	e004      	b.n	8015762 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015758:	6839      	ldr	r1, [r7, #0]
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f000 fb5b 	bl	8015e16 <USBD_CtlError>
              break;
 8015760:	bf00      	nop
          }
          break;
 8015762:	e004      	b.n	801576e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015764:	6839      	ldr	r1, [r7, #0]
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f000 fb55 	bl	8015e16 <USBD_CtlError>
          break;
 801576c:	bf00      	nop
      }
      break;
 801576e:	e005      	b.n	801577c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015770:	6839      	ldr	r1, [r7, #0]
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f000 fb4f 	bl	8015e16 <USBD_CtlError>
      break;
 8015778:	e000      	b.n	801577c <USBD_StdEPReq+0x330>
      break;
 801577a:	bf00      	nop
  }

  return ret;
 801577c:	7bfb      	ldrb	r3, [r7, #15]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
	...

08015788 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015792:	2300      	movs	r3, #0
 8015794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015796:	2300      	movs	r3, #0
 8015798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801579a:	2300      	movs	r3, #0
 801579c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	885b      	ldrh	r3, [r3, #2]
 80157a2:	0a1b      	lsrs	r3, r3, #8
 80157a4:	b29b      	uxth	r3, r3
 80157a6:	3b01      	subs	r3, #1
 80157a8:	2b06      	cmp	r3, #6
 80157aa:	f200 8128 	bhi.w	80159fe <USBD_GetDescriptor+0x276>
 80157ae:	a201      	add	r2, pc, #4	; (adr r2, 80157b4 <USBD_GetDescriptor+0x2c>)
 80157b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157b4:	080157d1 	.word	0x080157d1
 80157b8:	080157e9 	.word	0x080157e9
 80157bc:	08015829 	.word	0x08015829
 80157c0:	080159ff 	.word	0x080159ff
 80157c4:	080159ff 	.word	0x080159ff
 80157c8:	0801599f 	.word	0x0801599f
 80157cc:	080159cb 	.word	0x080159cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	687a      	ldr	r2, [r7, #4]
 80157da:	7c12      	ldrb	r2, [r2, #16]
 80157dc:	f107 0108 	add.w	r1, r7, #8
 80157e0:	4610      	mov	r0, r2
 80157e2:	4798      	blx	r3
 80157e4:	60f8      	str	r0, [r7, #12]
      break;
 80157e6:	e112      	b.n	8015a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	7c1b      	ldrb	r3, [r3, #16]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d10d      	bne.n	801580c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157f8:	f107 0208 	add.w	r2, r7, #8
 80157fc:	4610      	mov	r0, r2
 80157fe:	4798      	blx	r3
 8015800:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	3301      	adds	r3, #1
 8015806:	2202      	movs	r2, #2
 8015808:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801580a:	e100      	b.n	8015a0e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015814:	f107 0208 	add.w	r2, r7, #8
 8015818:	4610      	mov	r0, r2
 801581a:	4798      	blx	r3
 801581c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	3301      	adds	r3, #1
 8015822:	2202      	movs	r2, #2
 8015824:	701a      	strb	r2, [r3, #0]
      break;
 8015826:	e0f2      	b.n	8015a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	885b      	ldrh	r3, [r3, #2]
 801582c:	b2db      	uxtb	r3, r3
 801582e:	2b05      	cmp	r3, #5
 8015830:	f200 80ac 	bhi.w	801598c <USBD_GetDescriptor+0x204>
 8015834:	a201      	add	r2, pc, #4	; (adr r2, 801583c <USBD_GetDescriptor+0xb4>)
 8015836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801583a:	bf00      	nop
 801583c:	08015855 	.word	0x08015855
 8015840:	08015889 	.word	0x08015889
 8015844:	080158bd 	.word	0x080158bd
 8015848:	080158f1 	.word	0x080158f1
 801584c:	08015925 	.word	0x08015925
 8015850:	08015959 	.word	0x08015959
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801585a:	685b      	ldr	r3, [r3, #4]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d00b      	beq.n	8015878 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	7c12      	ldrb	r2, [r2, #16]
 801586c:	f107 0108 	add.w	r1, r7, #8
 8015870:	4610      	mov	r0, r2
 8015872:	4798      	blx	r3
 8015874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015876:	e091      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015878:	6839      	ldr	r1, [r7, #0]
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 facb 	bl	8015e16 <USBD_CtlError>
            err++;
 8015880:	7afb      	ldrb	r3, [r7, #11]
 8015882:	3301      	adds	r3, #1
 8015884:	72fb      	strb	r3, [r7, #11]
          break;
 8015886:	e089      	b.n	801599c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d00b      	beq.n	80158ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	7c12      	ldrb	r2, [r2, #16]
 80158a0:	f107 0108 	add.w	r1, r7, #8
 80158a4:	4610      	mov	r0, r2
 80158a6:	4798      	blx	r3
 80158a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158aa:	e077      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80158ac:	6839      	ldr	r1, [r7, #0]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f000 fab1 	bl	8015e16 <USBD_CtlError>
            err++;
 80158b4:	7afb      	ldrb	r3, [r7, #11]
 80158b6:	3301      	adds	r3, #1
 80158b8:	72fb      	strb	r3, [r7, #11]
          break;
 80158ba:	e06f      	b.n	801599c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158c2:	68db      	ldr	r3, [r3, #12]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d00b      	beq.n	80158e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	687a      	ldr	r2, [r7, #4]
 80158d2:	7c12      	ldrb	r2, [r2, #16]
 80158d4:	f107 0108 	add.w	r1, r7, #8
 80158d8:	4610      	mov	r0, r2
 80158da:	4798      	blx	r3
 80158dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158de:	e05d      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fa97 	bl	8015e16 <USBD_CtlError>
            err++;
 80158e8:	7afb      	ldrb	r3, [r7, #11]
 80158ea:	3301      	adds	r3, #1
 80158ec:	72fb      	strb	r3, [r7, #11]
          break;
 80158ee:	e055      	b.n	801599c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00b      	beq.n	8015914 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015902:	691b      	ldr	r3, [r3, #16]
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	7c12      	ldrb	r2, [r2, #16]
 8015908:	f107 0108 	add.w	r1, r7, #8
 801590c:	4610      	mov	r0, r2
 801590e:	4798      	blx	r3
 8015910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015912:	e043      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f000 fa7d 	bl	8015e16 <USBD_CtlError>
            err++;
 801591c:	7afb      	ldrb	r3, [r7, #11]
 801591e:	3301      	adds	r3, #1
 8015920:	72fb      	strb	r3, [r7, #11]
          break;
 8015922:	e03b      	b.n	801599c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801592a:	695b      	ldr	r3, [r3, #20]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00b      	beq.n	8015948 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015936:	695b      	ldr	r3, [r3, #20]
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	7c12      	ldrb	r2, [r2, #16]
 801593c:	f107 0108 	add.w	r1, r7, #8
 8015940:	4610      	mov	r0, r2
 8015942:	4798      	blx	r3
 8015944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015946:	e029      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015948:	6839      	ldr	r1, [r7, #0]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f000 fa63 	bl	8015e16 <USBD_CtlError>
            err++;
 8015950:	7afb      	ldrb	r3, [r7, #11]
 8015952:	3301      	adds	r3, #1
 8015954:	72fb      	strb	r3, [r7, #11]
          break;
 8015956:	e021      	b.n	801599c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801595e:	699b      	ldr	r3, [r3, #24]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d00b      	beq.n	801597c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801596a:	699b      	ldr	r3, [r3, #24]
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	7c12      	ldrb	r2, [r2, #16]
 8015970:	f107 0108 	add.w	r1, r7, #8
 8015974:	4610      	mov	r0, r2
 8015976:	4798      	blx	r3
 8015978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801597a:	e00f      	b.n	801599c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801597c:	6839      	ldr	r1, [r7, #0]
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 fa49 	bl	8015e16 <USBD_CtlError>
            err++;
 8015984:	7afb      	ldrb	r3, [r7, #11]
 8015986:	3301      	adds	r3, #1
 8015988:	72fb      	strb	r3, [r7, #11]
          break;
 801598a:	e007      	b.n	801599c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801598c:	6839      	ldr	r1, [r7, #0]
 801598e:	6878      	ldr	r0, [r7, #4]
 8015990:	f000 fa41 	bl	8015e16 <USBD_CtlError>
          err++;
 8015994:	7afb      	ldrb	r3, [r7, #11]
 8015996:	3301      	adds	r3, #1
 8015998:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801599a:	bf00      	nop
      }
      break;
 801599c:	e037      	b.n	8015a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	7c1b      	ldrb	r3, [r3, #16]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d109      	bne.n	80159ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159ae:	f107 0208 	add.w	r2, r7, #8
 80159b2:	4610      	mov	r0, r2
 80159b4:	4798      	blx	r3
 80159b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80159b8:	e029      	b.n	8015a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80159ba:	6839      	ldr	r1, [r7, #0]
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f000 fa2a 	bl	8015e16 <USBD_CtlError>
        err++;
 80159c2:	7afb      	ldrb	r3, [r7, #11]
 80159c4:	3301      	adds	r3, #1
 80159c6:	72fb      	strb	r3, [r7, #11]
      break;
 80159c8:	e021      	b.n	8015a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	7c1b      	ldrb	r3, [r3, #16]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d10d      	bne.n	80159ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159da:	f107 0208 	add.w	r2, r7, #8
 80159de:	4610      	mov	r0, r2
 80159e0:	4798      	blx	r3
 80159e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	3301      	adds	r3, #1
 80159e8:	2207      	movs	r2, #7
 80159ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80159ec:	e00f      	b.n	8015a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80159ee:	6839      	ldr	r1, [r7, #0]
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f000 fa10 	bl	8015e16 <USBD_CtlError>
        err++;
 80159f6:	7afb      	ldrb	r3, [r7, #11]
 80159f8:	3301      	adds	r3, #1
 80159fa:	72fb      	strb	r3, [r7, #11]
      break;
 80159fc:	e007      	b.n	8015a0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80159fe:	6839      	ldr	r1, [r7, #0]
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f000 fa08 	bl	8015e16 <USBD_CtlError>
      err++;
 8015a06:	7afb      	ldrb	r3, [r7, #11]
 8015a08:	3301      	adds	r3, #1
 8015a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a0c:	bf00      	nop
  }

  if (err != 0U)
 8015a0e:	7afb      	ldrb	r3, [r7, #11]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d11e      	bne.n	8015a52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	88db      	ldrh	r3, [r3, #6]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d016      	beq.n	8015a4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015a1c:	893b      	ldrh	r3, [r7, #8]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d00e      	beq.n	8015a40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	88da      	ldrh	r2, [r3, #6]
 8015a26:	893b      	ldrh	r3, [r7, #8]
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	bf28      	it	cs
 8015a2c:	4613      	movcs	r3, r2
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015a32:	893b      	ldrh	r3, [r7, #8]
 8015a34:	461a      	mov	r2, r3
 8015a36:	68f9      	ldr	r1, [r7, #12]
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	f000 fa5d 	bl	8015ef8 <USBD_CtlSendData>
 8015a3e:	e009      	b.n	8015a54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015a40:	6839      	ldr	r1, [r7, #0]
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f000 f9e7 	bl	8015e16 <USBD_CtlError>
 8015a48:	e004      	b.n	8015a54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f000 faae 	bl	8015fac <USBD_CtlSendStatus>
 8015a50:	e000      	b.n	8015a54 <USBD_GetDescriptor+0x2cc>
    return;
 8015a52:	bf00      	nop
  }
}
 8015a54:	3710      	adds	r7, #16
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop

08015a5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	889b      	ldrh	r3, [r3, #4]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d131      	bne.n	8015ad2 <USBD_SetAddress+0x76>
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	88db      	ldrh	r3, [r3, #6]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d12d      	bne.n	8015ad2 <USBD_SetAddress+0x76>
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	885b      	ldrh	r3, [r3, #2]
 8015a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8015a7c:	d829      	bhi.n	8015ad2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	885b      	ldrh	r3, [r3, #2]
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b03      	cmp	r3, #3
 8015a94:	d104      	bne.n	8015aa0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 f9bc 	bl	8015e16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a9e:	e01d      	b.n	8015adc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	7bfa      	ldrb	r2, [r7, #15]
 8015aa4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015aa8:	7bfb      	ldrb	r3, [r7, #15]
 8015aaa:	4619      	mov	r1, r3
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 ff5b 	bl	8016968 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 fa7a 	bl	8015fac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015ab8:	7bfb      	ldrb	r3, [r7, #15]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d004      	beq.n	8015ac8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2202      	movs	r2, #2
 8015ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ac6:	e009      	b.n	8015adc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2201      	movs	r2, #1
 8015acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ad0:	e004      	b.n	8015adc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 f99e 	bl	8015e16 <USBD_CtlError>
  }
}
 8015ada:	bf00      	nop
 8015adc:	bf00      	nop
 8015ade:	3710      	adds	r7, #16
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015aee:	2300      	movs	r3, #0
 8015af0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	885b      	ldrh	r3, [r3, #2]
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	4b4e      	ldr	r3, [pc, #312]	; (8015c34 <USBD_SetConfig+0x150>)
 8015afa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015afc:	4b4d      	ldr	r3, [pc, #308]	; (8015c34 <USBD_SetConfig+0x150>)
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	2b01      	cmp	r3, #1
 8015b02:	d905      	bls.n	8015b10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015b04:	6839      	ldr	r1, [r7, #0]
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f000 f985 	bl	8015e16 <USBD_CtlError>
    return USBD_FAIL;
 8015b0c:	2303      	movs	r3, #3
 8015b0e:	e08c      	b.n	8015c2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b16:	b2db      	uxtb	r3, r3
 8015b18:	2b02      	cmp	r3, #2
 8015b1a:	d002      	beq.n	8015b22 <USBD_SetConfig+0x3e>
 8015b1c:	2b03      	cmp	r3, #3
 8015b1e:	d029      	beq.n	8015b74 <USBD_SetConfig+0x90>
 8015b20:	e075      	b.n	8015c0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015b22:	4b44      	ldr	r3, [pc, #272]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d020      	beq.n	8015b6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015b2a:	4b42      	ldr	r3, [pc, #264]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015b34:	4b3f      	ldr	r3, [pc, #252]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	4619      	mov	r1, r3
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7fe ffe1 	bl	8014b02 <USBD_SetClassConfig>
 8015b40:	4603      	mov	r3, r0
 8015b42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015b44:	7bfb      	ldrb	r3, [r7, #15]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d008      	beq.n	8015b5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015b4a:	6839      	ldr	r1, [r7, #0]
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f000 f962 	bl	8015e16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2202      	movs	r2, #2
 8015b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015b5a:	e065      	b.n	8015c28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fa25 	bl	8015fac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2203      	movs	r2, #3
 8015b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015b6a:	e05d      	b.n	8015c28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f000 fa1d 	bl	8015fac <USBD_CtlSendStatus>
      break;
 8015b72:	e059      	b.n	8015c28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015b74:	4b2f      	ldr	r3, [pc, #188]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d112      	bne.n	8015ba2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2202      	movs	r2, #2
 8015b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015b84:	4b2b      	ldr	r3, [pc, #172]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	461a      	mov	r2, r3
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015b8e:	4b29      	ldr	r3, [pc, #164]	; (8015c34 <USBD_SetConfig+0x150>)
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	4619      	mov	r1, r3
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f7fe ffd0 	bl	8014b3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015b9a:	6878      	ldr	r0, [r7, #4]
 8015b9c:	f000 fa06 	bl	8015fac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015ba0:	e042      	b.n	8015c28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015ba2:	4b24      	ldr	r3, [pc, #144]	; (8015c34 <USBD_SetConfig+0x150>)
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d02a      	beq.n	8015c06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	685b      	ldr	r3, [r3, #4]
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	4619      	mov	r1, r3
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f7fe ffbe 	bl	8014b3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015bbe:	4b1d      	ldr	r3, [pc, #116]	; (8015c34 <USBD_SetConfig+0x150>)
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015bc8:	4b1a      	ldr	r3, [pc, #104]	; (8015c34 <USBD_SetConfig+0x150>)
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	4619      	mov	r1, r3
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7fe ff97 	bl	8014b02 <USBD_SetClassConfig>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015bd8:	7bfb      	ldrb	r3, [r7, #15]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d00f      	beq.n	8015bfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015bde:	6839      	ldr	r1, [r7, #0]
 8015be0:	6878      	ldr	r0, [r7, #4]
 8015be2:	f000 f918 	bl	8015e16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	4619      	mov	r1, r3
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f7fe ffa3 	bl	8014b3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2202      	movs	r2, #2
 8015bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015bfc:	e014      	b.n	8015c28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 f9d4 	bl	8015fac <USBD_CtlSendStatus>
      break;
 8015c04:	e010      	b.n	8015c28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 f9d0 	bl	8015fac <USBD_CtlSendStatus>
      break;
 8015c0c:	e00c      	b.n	8015c28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015c0e:	6839      	ldr	r1, [r7, #0]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 f900 	bl	8015e16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c16:	4b07      	ldr	r3, [pc, #28]	; (8015c34 <USBD_SetConfig+0x150>)
 8015c18:	781b      	ldrb	r3, [r3, #0]
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f7fe ff8c 	bl	8014b3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015c22:	2303      	movs	r3, #3
 8015c24:	73fb      	strb	r3, [r7, #15]
      break;
 8015c26:	bf00      	nop
  }

  return ret;
 8015c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	3710      	adds	r7, #16
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
 8015c32:	bf00      	nop
 8015c34:	24000d28 	.word	0x24000d28

08015c38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
 8015c40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	88db      	ldrh	r3, [r3, #6]
 8015c46:	2b01      	cmp	r3, #1
 8015c48:	d004      	beq.n	8015c54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015c4a:	6839      	ldr	r1, [r7, #0]
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f000 f8e2 	bl	8015e16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015c52:	e023      	b.n	8015c9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	dc02      	bgt.n	8015c66 <USBD_GetConfig+0x2e>
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	dc03      	bgt.n	8015c6c <USBD_GetConfig+0x34>
 8015c64:	e015      	b.n	8015c92 <USBD_GetConfig+0x5a>
 8015c66:	2b03      	cmp	r3, #3
 8015c68:	d00b      	beq.n	8015c82 <USBD_GetConfig+0x4a>
 8015c6a:	e012      	b.n	8015c92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2200      	movs	r2, #0
 8015c70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	3308      	adds	r3, #8
 8015c76:	2201      	movs	r2, #1
 8015c78:	4619      	mov	r1, r3
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f000 f93c 	bl	8015ef8 <USBD_CtlSendData>
        break;
 8015c80:	e00c      	b.n	8015c9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	3304      	adds	r3, #4
 8015c86:	2201      	movs	r2, #1
 8015c88:	4619      	mov	r1, r3
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f000 f934 	bl	8015ef8 <USBD_CtlSendData>
        break;
 8015c90:	e004      	b.n	8015c9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015c92:	6839      	ldr	r1, [r7, #0]
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f000 f8be 	bl	8015e16 <USBD_CtlError>
        break;
 8015c9a:	bf00      	nop
}
 8015c9c:	bf00      	nop
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cb4:	b2db      	uxtb	r3, r3
 8015cb6:	3b01      	subs	r3, #1
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	d81e      	bhi.n	8015cfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	88db      	ldrh	r3, [r3, #6]
 8015cc0:	2b02      	cmp	r3, #2
 8015cc2:	d004      	beq.n	8015cce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 f8a5 	bl	8015e16 <USBD_CtlError>
        break;
 8015ccc:	e01a      	b.n	8015d04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d005      	beq.n	8015cea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	f043 0202 	orr.w	r2, r3, #2
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	330c      	adds	r3, #12
 8015cee:	2202      	movs	r2, #2
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 f900 	bl	8015ef8 <USBD_CtlSendData>
      break;
 8015cf8:	e004      	b.n	8015d04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 f88a 	bl	8015e16 <USBD_CtlError>
      break;
 8015d02:	bf00      	nop
  }
}
 8015d04:	bf00      	nop
 8015d06:	3708      	adds	r7, #8
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	885b      	ldrh	r3, [r3, #2]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d107      	bne.n	8015d2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2201      	movs	r2, #1
 8015d22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f000 f940 	bl	8015fac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015d2c:	e013      	b.n	8015d56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	885b      	ldrh	r3, [r3, #2]
 8015d32:	2b02      	cmp	r3, #2
 8015d34:	d10b      	bne.n	8015d4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	889b      	ldrh	r3, [r3, #4]
 8015d3a:	0a1b      	lsrs	r3, r3, #8
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	b2da      	uxtb	r2, r3
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f000 f930 	bl	8015fac <USBD_CtlSendStatus>
}
 8015d4c:	e003      	b.n	8015d56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f000 f860 	bl	8015e16 <USBD_CtlError>
}
 8015d56:	bf00      	nop
 8015d58:	3708      	adds	r7, #8
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d5e:	b580      	push	{r7, lr}
 8015d60:	b082      	sub	sp, #8
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
 8015d66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d6e:	b2db      	uxtb	r3, r3
 8015d70:	3b01      	subs	r3, #1
 8015d72:	2b02      	cmp	r3, #2
 8015d74:	d80b      	bhi.n	8015d8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	885b      	ldrh	r3, [r3, #2]
 8015d7a:	2b01      	cmp	r3, #1
 8015d7c:	d10c      	bne.n	8015d98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2200      	movs	r2, #0
 8015d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f000 f910 	bl	8015fac <USBD_CtlSendStatus>
      }
      break;
 8015d8c:	e004      	b.n	8015d98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015d8e:	6839      	ldr	r1, [r7, #0]
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f000 f840 	bl	8015e16 <USBD_CtlError>
      break;
 8015d96:	e000      	b.n	8015d9a <USBD_ClrFeature+0x3c>
      break;
 8015d98:	bf00      	nop
  }
}
 8015d9a:	bf00      	nop
 8015d9c:	3708      	adds	r7, #8
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}

08015da2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015da2:	b580      	push	{r7, lr}
 8015da4:	b084      	sub	sp, #16
 8015da6:	af00      	add	r7, sp, #0
 8015da8:	6078      	str	r0, [r7, #4]
 8015daa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	781a      	ldrb	r2, [r3, #0]
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	781a      	ldrb	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	3301      	adds	r3, #1
 8015dca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015dcc:	68f8      	ldr	r0, [r7, #12]
 8015dce:	f7ff fa41 	bl	8015254 <SWAPBYTE>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	3301      	adds	r3, #1
 8015dde:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	3301      	adds	r3, #1
 8015de4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	f7ff fa34 	bl	8015254 <SWAPBYTE>
 8015dec:	4603      	mov	r3, r0
 8015dee:	461a      	mov	r2, r3
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	3301      	adds	r3, #1
 8015df8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	3301      	adds	r3, #1
 8015dfe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f7ff fa27 	bl	8015254 <SWAPBYTE>
 8015e06:	4603      	mov	r3, r0
 8015e08:	461a      	mov	r2, r3
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	80da      	strh	r2, [r3, #6]
}
 8015e0e:	bf00      	nop
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e16:	b580      	push	{r7, lr}
 8015e18:	b082      	sub	sp, #8
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	6078      	str	r0, [r7, #4]
 8015e1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e20:	2180      	movs	r1, #128	; 0x80
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 fd36 	bl	8016894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015e28:	2100      	movs	r1, #0
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f000 fd32 	bl	8016894 <USBD_LL_StallEP>
}
 8015e30:	bf00      	nop
 8015e32:	3708      	adds	r7, #8
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b086      	sub	sp, #24
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	60f8      	str	r0, [r7, #12]
 8015e40:	60b9      	str	r1, [r7, #8]
 8015e42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015e44:	2300      	movs	r3, #0
 8015e46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d036      	beq.n	8015ebc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015e52:	6938      	ldr	r0, [r7, #16]
 8015e54:	f000 f836 	bl	8015ec4 <USBD_GetLen>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	005b      	lsls	r3, r3, #1
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015e66:	7dfb      	ldrb	r3, [r7, #23]
 8015e68:	68ba      	ldr	r2, [r7, #8]
 8015e6a:	4413      	add	r3, r2
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	7812      	ldrb	r2, [r2, #0]
 8015e70:	701a      	strb	r2, [r3, #0]
  idx++;
 8015e72:	7dfb      	ldrb	r3, [r7, #23]
 8015e74:	3301      	adds	r3, #1
 8015e76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015e78:	7dfb      	ldrb	r3, [r7, #23]
 8015e7a:	68ba      	ldr	r2, [r7, #8]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	2203      	movs	r2, #3
 8015e80:	701a      	strb	r2, [r3, #0]
  idx++;
 8015e82:	7dfb      	ldrb	r3, [r7, #23]
 8015e84:	3301      	adds	r3, #1
 8015e86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015e88:	e013      	b.n	8015eb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015e8a:	7dfb      	ldrb	r3, [r7, #23]
 8015e8c:	68ba      	ldr	r2, [r7, #8]
 8015e8e:	4413      	add	r3, r2
 8015e90:	693a      	ldr	r2, [r7, #16]
 8015e92:	7812      	ldrb	r2, [r2, #0]
 8015e94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015e96:	693b      	ldr	r3, [r7, #16]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	613b      	str	r3, [r7, #16]
    idx++;
 8015e9c:	7dfb      	ldrb	r3, [r7, #23]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015ea2:	7dfb      	ldrb	r3, [r7, #23]
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	701a      	strb	r2, [r3, #0]
    idx++;
 8015eac:	7dfb      	ldrb	r3, [r7, #23]
 8015eae:	3301      	adds	r3, #1
 8015eb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015eb2:	693b      	ldr	r3, [r7, #16]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1e7      	bne.n	8015e8a <USBD_GetString+0x52>
 8015eba:	e000      	b.n	8015ebe <USBD_GetString+0x86>
    return;
 8015ebc:	bf00      	nop
  }
}
 8015ebe:	3718      	adds	r7, #24
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015ed4:	e005      	b.n	8015ee2 <USBD_GetLen+0x1e>
  {
    len++;
 8015ed6:	7bfb      	ldrb	r3, [r7, #15]
 8015ed8:	3301      	adds	r3, #1
 8015eda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1f5      	bne.n	8015ed6 <USBD_GetLen+0x12>
  }

  return len;
 8015eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eec:	4618      	mov	r0, r3
 8015eee:	3714      	adds	r7, #20
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef6:	4770      	bx	lr

08015ef8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	60f8      	str	r0, [r7, #12]
 8015f00:	60b9      	str	r1, [r7, #8]
 8015f02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2202      	movs	r2, #2
 8015f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	68ba      	ldr	r2, [r7, #8]
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	68f8      	ldr	r0, [r7, #12]
 8015f20:	f000 fd41 	bl	80169a6 <USBD_LL_Transmit>

  return USBD_OK;
 8015f24:	2300      	movs	r3, #0
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3710      	adds	r7, #16
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b084      	sub	sp, #16
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	60f8      	str	r0, [r7, #12]
 8015f36:	60b9      	str	r1, [r7, #8]
 8015f38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68ba      	ldr	r2, [r7, #8]
 8015f3e:	2100      	movs	r1, #0
 8015f40:	68f8      	ldr	r0, [r7, #12]
 8015f42:	f000 fd30 	bl	80169a6 <USBD_LL_Transmit>

  return USBD_OK;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3710      	adds	r7, #16
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}

08015f50 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b084      	sub	sp, #16
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	60f8      	str	r0, [r7, #12]
 8015f58:	60b9      	str	r1, [r7, #8]
 8015f5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	2203      	movs	r2, #3
 8015f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	68ba      	ldr	r2, [r7, #8]
 8015f78:	2100      	movs	r1, #0
 8015f7a:	68f8      	ldr	r0, [r7, #12]
 8015f7c:	f000 fd34 	bl	80169e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015f80:	2300      	movs	r3, #0
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	3710      	adds	r7, #16
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}

08015f8a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015f8a:	b580      	push	{r7, lr}
 8015f8c:	b084      	sub	sp, #16
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	60f8      	str	r0, [r7, #12]
 8015f92:	60b9      	str	r1, [r7, #8]
 8015f94:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	68ba      	ldr	r2, [r7, #8]
 8015f9a:	2100      	movs	r1, #0
 8015f9c:	68f8      	ldr	r0, [r7, #12]
 8015f9e:	f000 fd23 	bl	80169e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015fa2:	2300      	movs	r3, #0
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3710      	adds	r7, #16
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}

08015fac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2204      	movs	r2, #4
 8015fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 fcef 	bl	80169a6 <USBD_LL_Transmit>

  return USBD_OK;
 8015fc8:	2300      	movs	r3, #0
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	3708      	adds	r7, #8
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bd80      	pop	{r7, pc}

08015fd2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015fd2:	b580      	push	{r7, lr}
 8015fd4:	b082      	sub	sp, #8
 8015fd6:	af00      	add	r7, sp, #0
 8015fd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2205      	movs	r2, #5
 8015fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	2100      	movs	r1, #0
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f000 fcfd 	bl	80169e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015fee:	2300      	movs	r3, #0
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b087      	sub	sp, #28
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	4613      	mov	r3, r2
 8016004:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016006:	2301      	movs	r3, #1
 8016008:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801600a:	2300      	movs	r3, #0
 801600c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801600e:	4b1f      	ldr	r3, [pc, #124]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016010:	7a5b      	ldrb	r3, [r3, #9]
 8016012:	b2db      	uxtb	r3, r3
 8016014:	2b00      	cmp	r3, #0
 8016016:	d131      	bne.n	801607c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016018:	4b1c      	ldr	r3, [pc, #112]	; (801608c <FATFS_LinkDriverEx+0x94>)
 801601a:	7a5b      	ldrb	r3, [r3, #9]
 801601c:	b2db      	uxtb	r3, r3
 801601e:	461a      	mov	r2, r3
 8016020:	4b1a      	ldr	r3, [pc, #104]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016022:	2100      	movs	r1, #0
 8016024:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016026:	4b19      	ldr	r3, [pc, #100]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016028:	7a5b      	ldrb	r3, [r3, #9]
 801602a:	b2db      	uxtb	r3, r3
 801602c:	4a17      	ldr	r2, [pc, #92]	; (801608c <FATFS_LinkDriverEx+0x94>)
 801602e:	009b      	lsls	r3, r3, #2
 8016030:	4413      	add	r3, r2
 8016032:	68fa      	ldr	r2, [r7, #12]
 8016034:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016036:	4b15      	ldr	r3, [pc, #84]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016038:	7a5b      	ldrb	r3, [r3, #9]
 801603a:	b2db      	uxtb	r3, r3
 801603c:	461a      	mov	r2, r3
 801603e:	4b13      	ldr	r3, [pc, #76]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016040:	4413      	add	r3, r2
 8016042:	79fa      	ldrb	r2, [r7, #7]
 8016044:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016046:	4b11      	ldr	r3, [pc, #68]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016048:	7a5b      	ldrb	r3, [r3, #9]
 801604a:	b2db      	uxtb	r3, r3
 801604c:	1c5a      	adds	r2, r3, #1
 801604e:	b2d1      	uxtb	r1, r2
 8016050:	4a0e      	ldr	r2, [pc, #56]	; (801608c <FATFS_LinkDriverEx+0x94>)
 8016052:	7251      	strb	r1, [r2, #9]
 8016054:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016056:	7dbb      	ldrb	r3, [r7, #22]
 8016058:	3330      	adds	r3, #48	; 0x30
 801605a:	b2da      	uxtb	r2, r3
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	3301      	adds	r3, #1
 8016064:	223a      	movs	r2, #58	; 0x3a
 8016066:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	3302      	adds	r3, #2
 801606c:	222f      	movs	r2, #47	; 0x2f
 801606e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	3303      	adds	r3, #3
 8016074:	2200      	movs	r2, #0
 8016076:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016078:	2300      	movs	r3, #0
 801607a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801607c:	7dfb      	ldrb	r3, [r7, #23]
}
 801607e:	4618      	mov	r0, r3
 8016080:	371c      	adds	r7, #28
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr
 801608a:	bf00      	nop
 801608c:	24000d2c 	.word	0x24000d2c

08016090 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
 8016098:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801609a:	2200      	movs	r2, #0
 801609c:	6839      	ldr	r1, [r7, #0]
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7ff ffaa 	bl	8015ff8 <FATFS_LinkDriverEx>
 80160a4:	4603      	mov	r3, r0
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3708      	adds	r7, #8
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
	...

080160b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80160b4:	2201      	movs	r2, #1
 80160b6:	4913      	ldr	r1, [pc, #76]	; (8016104 <MX_USB_DEVICE_Init+0x54>)
 80160b8:	4813      	ldr	r0, [pc, #76]	; (8016108 <MX_USB_DEVICE_Init+0x58>)
 80160ba:	f7fe fca5 	bl	8014a08 <USBD_Init>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d001      	beq.n	80160c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80160c4:	f7ec fb20 	bl	8002708 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80160c8:	4910      	ldr	r1, [pc, #64]	; (801610c <MX_USB_DEVICE_Init+0x5c>)
 80160ca:	480f      	ldr	r0, [pc, #60]	; (8016108 <MX_USB_DEVICE_Init+0x58>)
 80160cc:	f7fe fccc 	bl	8014a68 <USBD_RegisterClass>
 80160d0:	4603      	mov	r3, r0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d001      	beq.n	80160da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80160d6:	f7ec fb17 	bl	8002708 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80160da:	490d      	ldr	r1, [pc, #52]	; (8016110 <MX_USB_DEVICE_Init+0x60>)
 80160dc:	480a      	ldr	r0, [pc, #40]	; (8016108 <MX_USB_DEVICE_Init+0x58>)
 80160de:	f7fe fbc3 	bl	8014868 <USBD_CDC_RegisterInterface>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d001      	beq.n	80160ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80160e8:	f7ec fb0e 	bl	8002708 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80160ec:	4806      	ldr	r0, [pc, #24]	; (8016108 <MX_USB_DEVICE_Init+0x58>)
 80160ee:	f7fe fcf1 	bl	8014ad4 <USBD_Start>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d001      	beq.n	80160fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80160f8:	f7ec fb06 	bl	8002708 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80160fc:	f7f3 fba4 	bl	8009848 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016100:	bf00      	nop
 8016102:	bd80      	pop	{r7, pc}
 8016104:	240000d8 	.word	0x240000d8
 8016108:	24000d38 	.word	0x24000d38
 801610c:	24000044 	.word	0x24000044
 8016110:	240000c4 	.word	0x240000c4

08016114 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016118:	2200      	movs	r2, #0
 801611a:	4905      	ldr	r1, [pc, #20]	; (8016130 <CDC_Init_HS+0x1c>)
 801611c:	4805      	ldr	r0, [pc, #20]	; (8016134 <CDC_Init_HS+0x20>)
 801611e:	f7fe fbbd 	bl	801489c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016122:	4905      	ldr	r1, [pc, #20]	; (8016138 <CDC_Init_HS+0x24>)
 8016124:	4803      	ldr	r0, [pc, #12]	; (8016134 <CDC_Init_HS+0x20>)
 8016126:	f7fe fbdb 	bl	80148e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801612a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801612c:	4618      	mov	r0, r3
 801612e:	bd80      	pop	{r7, pc}
 8016130:	24001814 	.word	0x24001814
 8016134:	24000d38 	.word	0x24000d38
 8016138:	24001014 	.word	0x24001014

0801613c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801613c:	b480      	push	{r7}
 801613e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016140:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016142:	4618      	mov	r0, r3
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr

0801614c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	4603      	mov	r3, r0
 8016154:	6039      	str	r1, [r7, #0]
 8016156:	71fb      	strb	r3, [r7, #7]
 8016158:	4613      	mov	r3, r2
 801615a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801615c:	79fb      	ldrb	r3, [r7, #7]
 801615e:	2b23      	cmp	r3, #35	; 0x23
 8016160:	d84a      	bhi.n	80161f8 <CDC_Control_HS+0xac>
 8016162:	a201      	add	r2, pc, #4	; (adr r2, 8016168 <CDC_Control_HS+0x1c>)
 8016164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016168:	080161f9 	.word	0x080161f9
 801616c:	080161f9 	.word	0x080161f9
 8016170:	080161f9 	.word	0x080161f9
 8016174:	080161f9 	.word	0x080161f9
 8016178:	080161f9 	.word	0x080161f9
 801617c:	080161f9 	.word	0x080161f9
 8016180:	080161f9 	.word	0x080161f9
 8016184:	080161f9 	.word	0x080161f9
 8016188:	080161f9 	.word	0x080161f9
 801618c:	080161f9 	.word	0x080161f9
 8016190:	080161f9 	.word	0x080161f9
 8016194:	080161f9 	.word	0x080161f9
 8016198:	080161f9 	.word	0x080161f9
 801619c:	080161f9 	.word	0x080161f9
 80161a0:	080161f9 	.word	0x080161f9
 80161a4:	080161f9 	.word	0x080161f9
 80161a8:	080161f9 	.word	0x080161f9
 80161ac:	080161f9 	.word	0x080161f9
 80161b0:	080161f9 	.word	0x080161f9
 80161b4:	080161f9 	.word	0x080161f9
 80161b8:	080161f9 	.word	0x080161f9
 80161bc:	080161f9 	.word	0x080161f9
 80161c0:	080161f9 	.word	0x080161f9
 80161c4:	080161f9 	.word	0x080161f9
 80161c8:	080161f9 	.word	0x080161f9
 80161cc:	080161f9 	.word	0x080161f9
 80161d0:	080161f9 	.word	0x080161f9
 80161d4:	080161f9 	.word	0x080161f9
 80161d8:	080161f9 	.word	0x080161f9
 80161dc:	080161f9 	.word	0x080161f9
 80161e0:	080161f9 	.word	0x080161f9
 80161e4:	080161f9 	.word	0x080161f9
 80161e8:	080161f9 	.word	0x080161f9
 80161ec:	080161f9 	.word	0x080161f9
 80161f0:	080161f9 	.word	0x080161f9
 80161f4:	080161f9 	.word	0x080161f9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80161f8:	bf00      	nop
  }

  return (USBD_OK);
 80161fa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr

08016208 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016212:	6879      	ldr	r1, [r7, #4]
 8016214:	4805      	ldr	r0, [pc, #20]	; (801622c <CDC_Receive_HS+0x24>)
 8016216:	f7fe fb63 	bl	80148e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801621a:	4804      	ldr	r0, [pc, #16]	; (801622c <CDC_Receive_HS+0x24>)
 801621c:	f7fe fbbe 	bl	801499c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016220:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016222:	4618      	mov	r0, r3
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	24000d38 	.word	0x24000d38

08016230 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	460b      	mov	r3, r1
 801623a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801623c:	2300      	movs	r3, #0
 801623e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016240:	4b0d      	ldr	r3, [pc, #52]	; (8016278 <CDC_Transmit_HS+0x48>)
 8016242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016246:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801624e:	2b00      	cmp	r3, #0
 8016250:	d001      	beq.n	8016256 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016252:	2301      	movs	r3, #1
 8016254:	e00b      	b.n	801626e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016256:	887b      	ldrh	r3, [r7, #2]
 8016258:	461a      	mov	r2, r3
 801625a:	6879      	ldr	r1, [r7, #4]
 801625c:	4806      	ldr	r0, [pc, #24]	; (8016278 <CDC_Transmit_HS+0x48>)
 801625e:	f7fe fb1d 	bl	801489c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016262:	4805      	ldr	r0, [pc, #20]	; (8016278 <CDC_Transmit_HS+0x48>)
 8016264:	f7fe fb5a 	bl	801491c <USBD_CDC_TransmitPacket>
 8016268:	4603      	mov	r3, r0
 801626a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801626c:	7bfb      	ldrb	r3, [r7, #15]
}
 801626e:	4618      	mov	r0, r3
 8016270:	3710      	adds	r7, #16
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	24000d38 	.word	0x24000d38

0801627c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801627c:	b480      	push	{r7}
 801627e:	b087      	sub	sp, #28
 8016280:	af00      	add	r7, sp, #0
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	60b9      	str	r1, [r7, #8]
 8016286:	4613      	mov	r3, r2
 8016288:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801628a:	2300      	movs	r3, #0
 801628c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801628e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016292:	4618      	mov	r0, r3
 8016294:	371c      	adds	r7, #28
 8016296:	46bd      	mov	sp, r7
 8016298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629c:	4770      	bx	lr
	...

080162a0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b083      	sub	sp, #12
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	4603      	mov	r3, r0
 80162a8:	6039      	str	r1, [r7, #0]
 80162aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	2212      	movs	r2, #18
 80162b0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80162b2:	4b03      	ldr	r3, [pc, #12]	; (80162c0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80162b4:	4618      	mov	r0, r3
 80162b6:	370c      	adds	r7, #12
 80162b8:	46bd      	mov	sp, r7
 80162ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162be:	4770      	bx	lr
 80162c0:	240000f4 	.word	0x240000f4

080162c4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162c4:	b480      	push	{r7}
 80162c6:	b083      	sub	sp, #12
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	4603      	mov	r3, r0
 80162cc:	6039      	str	r1, [r7, #0]
 80162ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	2204      	movs	r2, #4
 80162d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80162d6:	4b03      	ldr	r3, [pc, #12]	; (80162e4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80162d8:	4618      	mov	r0, r3
 80162da:	370c      	adds	r7, #12
 80162dc:	46bd      	mov	sp, r7
 80162de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e2:	4770      	bx	lr
 80162e4:	24000108 	.word	0x24000108

080162e8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b082      	sub	sp, #8
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	4603      	mov	r3, r0
 80162f0:	6039      	str	r1, [r7, #0]
 80162f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80162f4:	79fb      	ldrb	r3, [r7, #7]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d105      	bne.n	8016306 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	4907      	ldr	r1, [pc, #28]	; (801631c <USBD_HS_ProductStrDescriptor+0x34>)
 80162fe:	4808      	ldr	r0, [pc, #32]	; (8016320 <USBD_HS_ProductStrDescriptor+0x38>)
 8016300:	f7ff fd9a 	bl	8015e38 <USBD_GetString>
 8016304:	e004      	b.n	8016310 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016306:	683a      	ldr	r2, [r7, #0]
 8016308:	4904      	ldr	r1, [pc, #16]	; (801631c <USBD_HS_ProductStrDescriptor+0x34>)
 801630a:	4805      	ldr	r0, [pc, #20]	; (8016320 <USBD_HS_ProductStrDescriptor+0x38>)
 801630c:	f7ff fd94 	bl	8015e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016310:	4b02      	ldr	r3, [pc, #8]	; (801631c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016312:	4618      	mov	r0, r3
 8016314:	3708      	adds	r7, #8
 8016316:	46bd      	mov	sp, r7
 8016318:	bd80      	pop	{r7, pc}
 801631a:	bf00      	nop
 801631c:	24002014 	.word	0x24002014
 8016320:	0801b708 	.word	0x0801b708

08016324 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	4603      	mov	r3, r0
 801632c:	6039      	str	r1, [r7, #0]
 801632e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016330:	683a      	ldr	r2, [r7, #0]
 8016332:	4904      	ldr	r1, [pc, #16]	; (8016344 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016334:	4804      	ldr	r0, [pc, #16]	; (8016348 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016336:	f7ff fd7f 	bl	8015e38 <USBD_GetString>
  return USBD_StrDesc;
 801633a:	4b02      	ldr	r3, [pc, #8]	; (8016344 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801633c:	4618      	mov	r0, r3
 801633e:	3708      	adds	r7, #8
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	24002014 	.word	0x24002014
 8016348:	0801b724 	.word	0x0801b724

0801634c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	4603      	mov	r3, r0
 8016354:	6039      	str	r1, [r7, #0]
 8016356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	221a      	movs	r2, #26
 801635c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801635e:	f000 f843 	bl	80163e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016362:	4b02      	ldr	r3, [pc, #8]	; (801636c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016364:	4618      	mov	r0, r3
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	2400010c 	.word	0x2400010c

08016370 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	4603      	mov	r3, r0
 8016378:	6039      	str	r1, [r7, #0]
 801637a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801637c:	79fb      	ldrb	r3, [r7, #7]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d105      	bne.n	801638e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016382:	683a      	ldr	r2, [r7, #0]
 8016384:	4907      	ldr	r1, [pc, #28]	; (80163a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016386:	4808      	ldr	r0, [pc, #32]	; (80163a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016388:	f7ff fd56 	bl	8015e38 <USBD_GetString>
 801638c:	e004      	b.n	8016398 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801638e:	683a      	ldr	r2, [r7, #0]
 8016390:	4904      	ldr	r1, [pc, #16]	; (80163a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016392:	4805      	ldr	r0, [pc, #20]	; (80163a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016394:	f7ff fd50 	bl	8015e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016398:	4b02      	ldr	r3, [pc, #8]	; (80163a4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801639a:	4618      	mov	r0, r3
 801639c:	3708      	adds	r7, #8
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}
 80163a2:	bf00      	nop
 80163a4:	24002014 	.word	0x24002014
 80163a8:	0801b728 	.word	0x0801b728

080163ac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b082      	sub	sp, #8
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	4603      	mov	r3, r0
 80163b4:	6039      	str	r1, [r7, #0]
 80163b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80163b8:	79fb      	ldrb	r3, [r7, #7]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d105      	bne.n	80163ca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80163be:	683a      	ldr	r2, [r7, #0]
 80163c0:	4907      	ldr	r1, [pc, #28]	; (80163e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80163c2:	4808      	ldr	r0, [pc, #32]	; (80163e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80163c4:	f7ff fd38 	bl	8015e38 <USBD_GetString>
 80163c8:	e004      	b.n	80163d4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80163ca:	683a      	ldr	r2, [r7, #0]
 80163cc:	4904      	ldr	r1, [pc, #16]	; (80163e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80163ce:	4805      	ldr	r0, [pc, #20]	; (80163e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80163d0:	f7ff fd32 	bl	8015e38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80163d4:	4b02      	ldr	r3, [pc, #8]	; (80163e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3708      	adds	r7, #8
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	24002014 	.word	0x24002014
 80163e4:	0801b734 	.word	0x0801b734

080163e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80163ee:	4b0f      	ldr	r3, [pc, #60]	; (801642c <Get_SerialNum+0x44>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80163f4:	4b0e      	ldr	r3, [pc, #56]	; (8016430 <Get_SerialNum+0x48>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80163fa:	4b0e      	ldr	r3, [pc, #56]	; (8016434 <Get_SerialNum+0x4c>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016400:	68fa      	ldr	r2, [r7, #12]
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	4413      	add	r3, r2
 8016406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d009      	beq.n	8016422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801640e:	2208      	movs	r2, #8
 8016410:	4909      	ldr	r1, [pc, #36]	; (8016438 <Get_SerialNum+0x50>)
 8016412:	68f8      	ldr	r0, [r7, #12]
 8016414:	f000 f814 	bl	8016440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016418:	2204      	movs	r2, #4
 801641a:	4908      	ldr	r1, [pc, #32]	; (801643c <Get_SerialNum+0x54>)
 801641c:	68b8      	ldr	r0, [r7, #8]
 801641e:	f000 f80f 	bl	8016440 <IntToUnicode>
  }
}
 8016422:	bf00      	nop
 8016424:	3710      	adds	r7, #16
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	1ff1e800 	.word	0x1ff1e800
 8016430:	1ff1e804 	.word	0x1ff1e804
 8016434:	1ff1e808 	.word	0x1ff1e808
 8016438:	2400010e 	.word	0x2400010e
 801643c:	2400011e 	.word	0x2400011e

08016440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016440:	b480      	push	{r7}
 8016442:	b087      	sub	sp, #28
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	4613      	mov	r3, r2
 801644c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801644e:	2300      	movs	r3, #0
 8016450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016452:	2300      	movs	r3, #0
 8016454:	75fb      	strb	r3, [r7, #23]
 8016456:	e027      	b.n	80164a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	0f1b      	lsrs	r3, r3, #28
 801645c:	2b09      	cmp	r3, #9
 801645e:	d80b      	bhi.n	8016478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	0f1b      	lsrs	r3, r3, #28
 8016464:	b2da      	uxtb	r2, r3
 8016466:	7dfb      	ldrb	r3, [r7, #23]
 8016468:	005b      	lsls	r3, r3, #1
 801646a:	4619      	mov	r1, r3
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	440b      	add	r3, r1
 8016470:	3230      	adds	r2, #48	; 0x30
 8016472:	b2d2      	uxtb	r2, r2
 8016474:	701a      	strb	r2, [r3, #0]
 8016476:	e00a      	b.n	801648e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	0f1b      	lsrs	r3, r3, #28
 801647c:	b2da      	uxtb	r2, r3
 801647e:	7dfb      	ldrb	r3, [r7, #23]
 8016480:	005b      	lsls	r3, r3, #1
 8016482:	4619      	mov	r1, r3
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	440b      	add	r3, r1
 8016488:	3237      	adds	r2, #55	; 0x37
 801648a:	b2d2      	uxtb	r2, r2
 801648c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	011b      	lsls	r3, r3, #4
 8016492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016494:	7dfb      	ldrb	r3, [r7, #23]
 8016496:	005b      	lsls	r3, r3, #1
 8016498:	3301      	adds	r3, #1
 801649a:	68ba      	ldr	r2, [r7, #8]
 801649c:	4413      	add	r3, r2
 801649e:	2200      	movs	r2, #0
 80164a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80164a2:	7dfb      	ldrb	r3, [r7, #23]
 80164a4:	3301      	adds	r3, #1
 80164a6:	75fb      	strb	r3, [r7, #23]
 80164a8:	7dfa      	ldrb	r2, [r7, #23]
 80164aa:	79fb      	ldrb	r3, [r7, #7]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d3d3      	bcc.n	8016458 <IntToUnicode+0x18>
  }
}
 80164b0:	bf00      	nop
 80164b2:	bf00      	nop
 80164b4:	371c      	adds	r7, #28
 80164b6:	46bd      	mov	sp, r7
 80164b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164bc:	4770      	bx	lr
	...

080164c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b0b2      	sub	sp, #200	; 0xc8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80164c8:	f107 0310 	add.w	r3, r7, #16
 80164cc:	22b8      	movs	r2, #184	; 0xb8
 80164ce:	2100      	movs	r1, #0
 80164d0:	4618      	mov	r0, r3
 80164d2:	f000 fb39 	bl	8016b48 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	4a1a      	ldr	r2, [pc, #104]	; (8016544 <HAL_PCD_MspInit+0x84>)
 80164dc:	4293      	cmp	r3, r2
 80164de:	d12c      	bne.n	801653a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80164e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80164e4:	f04f 0300 	mov.w	r3, #0
 80164e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80164ec:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80164f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80164f4:	f107 0310 	add.w	r3, r7, #16
 80164f8:	4618      	mov	r0, r3
 80164fa:	f7f4 f985 	bl	800a808 <HAL_RCCEx_PeriphCLKConfig>
 80164fe:	4603      	mov	r3, r0
 8016500:	2b00      	cmp	r3, #0
 8016502:	d001      	beq.n	8016508 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016504:	f7ec f900 	bl	8002708 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016508:	f7f3 f99e 	bl	8009848 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801650c:	4b0e      	ldr	r3, [pc, #56]	; (8016548 <HAL_PCD_MspInit+0x88>)
 801650e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016512:	4a0d      	ldr	r2, [pc, #52]	; (8016548 <HAL_PCD_MspInit+0x88>)
 8016514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016518:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801651c:	4b0a      	ldr	r3, [pc, #40]	; (8016548 <HAL_PCD_MspInit+0x88>)
 801651e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016526:	60fb      	str	r3, [r7, #12]
 8016528:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801652a:	2200      	movs	r2, #0
 801652c:	2100      	movs	r1, #0
 801652e:	204d      	movs	r0, #77	; 0x4d
 8016530:	f7ee ff17 	bl	8005362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016534:	204d      	movs	r0, #77	; 0x4d
 8016536:	f7ee ff2e 	bl	8005396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801653a:	bf00      	nop
 801653c:	37c8      	adds	r7, #200	; 0xc8
 801653e:	46bd      	mov	sp, r7
 8016540:	bd80      	pop	{r7, pc}
 8016542:	bf00      	nop
 8016544:	40040000 	.word	0x40040000
 8016548:	58024400 	.word	0x58024400

0801654c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016560:	4619      	mov	r1, r3
 8016562:	4610      	mov	r0, r2
 8016564:	f7fe fb03 	bl	8014b6e <USBD_LL_SetupStage>
}
 8016568:	bf00      	nop
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}

08016570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	460b      	mov	r3, r1
 801657a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016582:	78fa      	ldrb	r2, [r7, #3]
 8016584:	6879      	ldr	r1, [r7, #4]
 8016586:	4613      	mov	r3, r2
 8016588:	00db      	lsls	r3, r3, #3
 801658a:	4413      	add	r3, r2
 801658c:	009b      	lsls	r3, r3, #2
 801658e:	440b      	add	r3, r1
 8016590:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016594:	681a      	ldr	r2, [r3, #0]
 8016596:	78fb      	ldrb	r3, [r7, #3]
 8016598:	4619      	mov	r1, r3
 801659a:	f7fe fb3d 	bl	8014c18 <USBD_LL_DataOutStage>
}
 801659e:	bf00      	nop
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}

080165a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165a6:	b580      	push	{r7, lr}
 80165a8:	b082      	sub	sp, #8
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	6078      	str	r0, [r7, #4]
 80165ae:	460b      	mov	r3, r1
 80165b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80165b8:	78fa      	ldrb	r2, [r7, #3]
 80165ba:	6879      	ldr	r1, [r7, #4]
 80165bc:	4613      	mov	r3, r2
 80165be:	00db      	lsls	r3, r3, #3
 80165c0:	4413      	add	r3, r2
 80165c2:	009b      	lsls	r3, r3, #2
 80165c4:	440b      	add	r3, r1
 80165c6:	3348      	adds	r3, #72	; 0x48
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	78fb      	ldrb	r3, [r7, #3]
 80165cc:	4619      	mov	r1, r3
 80165ce:	f7fe fbd6 	bl	8014d7e <USBD_LL_DataInStage>
}
 80165d2:	bf00      	nop
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165da:	b580      	push	{r7, lr}
 80165dc:	b082      	sub	sp, #8
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7fe fd10 	bl	801500e <USBD_LL_SOF>
}
 80165ee:	bf00      	nop
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b084      	sub	sp, #16
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80165fe:	2301      	movs	r3, #1
 8016600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	691b      	ldr	r3, [r3, #16]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d102      	bne.n	8016610 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801660a:	2300      	movs	r3, #0
 801660c:	73fb      	strb	r3, [r7, #15]
 801660e:	e008      	b.n	8016622 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	691b      	ldr	r3, [r3, #16]
 8016614:	2b02      	cmp	r3, #2
 8016616:	d102      	bne.n	801661e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016618:	2301      	movs	r3, #1
 801661a:	73fb      	strb	r3, [r7, #15]
 801661c:	e001      	b.n	8016622 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801661e:	f7ec f873 	bl	8002708 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016628:	7bfa      	ldrb	r2, [r7, #15]
 801662a:	4611      	mov	r1, r2
 801662c:	4618      	mov	r0, r3
 801662e:	f7fe fcaa 	bl	8014f86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016638:	4618      	mov	r0, r3
 801663a:	f7fe fc52 	bl	8014ee2 <USBD_LL_Reset>
}
 801663e:	bf00      	nop
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
	...

08016648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe fca5 	bl	8014fa6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	687a      	ldr	r2, [r7, #4]
 8016668:	6812      	ldr	r2, [r2, #0]
 801666a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801666e:	f043 0301 	orr.w	r3, r3, #1
 8016672:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6a1b      	ldr	r3, [r3, #32]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d005      	beq.n	8016688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801667c:	4b04      	ldr	r3, [pc, #16]	; (8016690 <HAL_PCD_SuspendCallback+0x48>)
 801667e:	691b      	ldr	r3, [r3, #16]
 8016680:	4a03      	ldr	r2, [pc, #12]	; (8016690 <HAL_PCD_SuspendCallback+0x48>)
 8016682:	f043 0306 	orr.w	r3, r3, #6
 8016686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016688:	bf00      	nop
 801668a:	3708      	adds	r7, #8
 801668c:	46bd      	mov	sp, r7
 801668e:	bd80      	pop	{r7, pc}
 8016690:	e000ed00 	.word	0xe000ed00

08016694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b082      	sub	sp, #8
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fe fc9b 	bl	8014fde <USBD_LL_Resume>
}
 80166a8:	bf00      	nop
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	460b      	mov	r3, r1
 80166ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166c2:	78fa      	ldrb	r2, [r7, #3]
 80166c4:	4611      	mov	r1, r2
 80166c6:	4618      	mov	r0, r3
 80166c8:	f7fe fcf3 	bl	80150b2 <USBD_LL_IsoOUTIncomplete>
}
 80166cc:	bf00      	nop
 80166ce:	3708      	adds	r7, #8
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}

080166d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	460b      	mov	r3, r1
 80166de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80166e6:	78fa      	ldrb	r2, [r7, #3]
 80166e8:	4611      	mov	r1, r2
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7fe fcaf 	bl	801504e <USBD_LL_IsoINIncomplete>
}
 80166f0:	bf00      	nop
 80166f2:	3708      	adds	r7, #8
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}

080166f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016706:	4618      	mov	r0, r3
 8016708:	f7fe fd05 	bl	8015116 <USBD_LL_DevConnected>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016722:	4618      	mov	r0, r3
 8016724:	f7fe fd02 	bl	801512c <USBD_LL_DevDisconnected>
}
 8016728:	bf00      	nop
 801672a:	3708      	adds	r7, #8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}

08016730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	781b      	ldrb	r3, [r3, #0]
 801673c:	2b01      	cmp	r3, #1
 801673e:	d140      	bne.n	80167c2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016740:	4a22      	ldr	r2, [pc, #136]	; (80167cc <USBD_LL_Init+0x9c>)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	4a20      	ldr	r2, [pc, #128]	; (80167cc <USBD_LL_Init+0x9c>)
 801674c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016750:	4b1e      	ldr	r3, [pc, #120]	; (80167cc <USBD_LL_Init+0x9c>)
 8016752:	4a1f      	ldr	r2, [pc, #124]	; (80167d0 <USBD_LL_Init+0xa0>)
 8016754:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016756:	4b1d      	ldr	r3, [pc, #116]	; (80167cc <USBD_LL_Init+0x9c>)
 8016758:	2209      	movs	r2, #9
 801675a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801675c:	4b1b      	ldr	r3, [pc, #108]	; (80167cc <USBD_LL_Init+0x9c>)
 801675e:	2202      	movs	r2, #2
 8016760:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016762:	4b1a      	ldr	r3, [pc, #104]	; (80167cc <USBD_LL_Init+0x9c>)
 8016764:	2200      	movs	r2, #0
 8016766:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016768:	4b18      	ldr	r3, [pc, #96]	; (80167cc <USBD_LL_Init+0x9c>)
 801676a:	2202      	movs	r2, #2
 801676c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801676e:	4b17      	ldr	r3, [pc, #92]	; (80167cc <USBD_LL_Init+0x9c>)
 8016770:	2200      	movs	r2, #0
 8016772:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016774:	4b15      	ldr	r3, [pc, #84]	; (80167cc <USBD_LL_Init+0x9c>)
 8016776:	2200      	movs	r2, #0
 8016778:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801677a:	4b14      	ldr	r3, [pc, #80]	; (80167cc <USBD_LL_Init+0x9c>)
 801677c:	2200      	movs	r2, #0
 801677e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016780:	4b12      	ldr	r3, [pc, #72]	; (80167cc <USBD_LL_Init+0x9c>)
 8016782:	2200      	movs	r2, #0
 8016784:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016786:	4b11      	ldr	r3, [pc, #68]	; (80167cc <USBD_LL_Init+0x9c>)
 8016788:	2200      	movs	r2, #0
 801678a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801678c:	4b0f      	ldr	r3, [pc, #60]	; (80167cc <USBD_LL_Init+0x9c>)
 801678e:	2200      	movs	r2, #0
 8016790:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016792:	480e      	ldr	r0, [pc, #56]	; (80167cc <USBD_LL_Init+0x9c>)
 8016794:	f7f1 fd65 	bl	8008262 <HAL_PCD_Init>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d001      	beq.n	80167a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801679e:	f7eb ffb3 	bl	8002708 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80167a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80167a6:	4809      	ldr	r0, [pc, #36]	; (80167cc <USBD_LL_Init+0x9c>)
 80167a8:	f7f2 ffd3 	bl	8009752 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80167ac:	2280      	movs	r2, #128	; 0x80
 80167ae:	2100      	movs	r1, #0
 80167b0:	4806      	ldr	r0, [pc, #24]	; (80167cc <USBD_LL_Init+0x9c>)
 80167b2:	f7f2 ff87 	bl	80096c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80167b6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80167ba:	2101      	movs	r1, #1
 80167bc:	4803      	ldr	r0, [pc, #12]	; (80167cc <USBD_LL_Init+0x9c>)
 80167be:	f7f2 ff81 	bl	80096c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80167c2:	2300      	movs	r3, #0
}
 80167c4:	4618      	mov	r0, r3
 80167c6:	3708      	adds	r7, #8
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	24002214 	.word	0x24002214
 80167d0:	40040000 	.word	0x40040000

080167d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167dc:	2300      	movs	r3, #0
 80167de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167e0:	2300      	movs	r3, #0
 80167e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7f1 fe5d 	bl	80084aa <HAL_PCD_Start>
 80167f0:	4603      	mov	r3, r0
 80167f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167f4:	7bfb      	ldrb	r3, [r7, #15]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f000 f942 	bl	8016a80 <USBD_Get_USB_Status>
 80167fc:	4603      	mov	r3, r0
 80167fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016800:	7bbb      	ldrb	r3, [r7, #14]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}

0801680a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801680a:	b580      	push	{r7, lr}
 801680c:	b084      	sub	sp, #16
 801680e:	af00      	add	r7, sp, #0
 8016810:	6078      	str	r0, [r7, #4]
 8016812:	4608      	mov	r0, r1
 8016814:	4611      	mov	r1, r2
 8016816:	461a      	mov	r2, r3
 8016818:	4603      	mov	r3, r0
 801681a:	70fb      	strb	r3, [r7, #3]
 801681c:	460b      	mov	r3, r1
 801681e:	70bb      	strb	r3, [r7, #2]
 8016820:	4613      	mov	r3, r2
 8016822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016824:	2300      	movs	r3, #0
 8016826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016828:	2300      	movs	r3, #0
 801682a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016832:	78bb      	ldrb	r3, [r7, #2]
 8016834:	883a      	ldrh	r2, [r7, #0]
 8016836:	78f9      	ldrb	r1, [r7, #3]
 8016838:	f7f2 fb5d 	bl	8008ef6 <HAL_PCD_EP_Open>
 801683c:	4603      	mov	r3, r0
 801683e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016840:	7bfb      	ldrb	r3, [r7, #15]
 8016842:	4618      	mov	r0, r3
 8016844:	f000 f91c 	bl	8016a80 <USBD_Get_USB_Status>
 8016848:	4603      	mov	r3, r0
 801684a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801684c:	7bbb      	ldrb	r3, [r7, #14]
}
 801684e:	4618      	mov	r0, r3
 8016850:	3710      	adds	r7, #16
 8016852:	46bd      	mov	sp, r7
 8016854:	bd80      	pop	{r7, pc}

08016856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016856:	b580      	push	{r7, lr}
 8016858:	b084      	sub	sp, #16
 801685a:	af00      	add	r7, sp, #0
 801685c:	6078      	str	r0, [r7, #4]
 801685e:	460b      	mov	r3, r1
 8016860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016862:	2300      	movs	r3, #0
 8016864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016866:	2300      	movs	r3, #0
 8016868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016870:	78fa      	ldrb	r2, [r7, #3]
 8016872:	4611      	mov	r1, r2
 8016874:	4618      	mov	r0, r3
 8016876:	f7f2 fba6 	bl	8008fc6 <HAL_PCD_EP_Close>
 801687a:	4603      	mov	r3, r0
 801687c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801687e:	7bfb      	ldrb	r3, [r7, #15]
 8016880:	4618      	mov	r0, r3
 8016882:	f000 f8fd 	bl	8016a80 <USBD_Get_USB_Status>
 8016886:	4603      	mov	r3, r0
 8016888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801688a:	7bbb      	ldrb	r3, [r7, #14]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3710      	adds	r7, #16
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	460b      	mov	r3, r1
 801689e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168a4:	2300      	movs	r3, #0
 80168a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168ae:	78fa      	ldrb	r2, [r7, #3]
 80168b0:	4611      	mov	r1, r2
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7f2 fc60 	bl	8009178 <HAL_PCD_EP_SetStall>
 80168b8:	4603      	mov	r3, r0
 80168ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
 80168be:	4618      	mov	r0, r3
 80168c0:	f000 f8de 	bl	8016a80 <USBD_Get_USB_Status>
 80168c4:	4603      	mov	r3, r0
 80168c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3710      	adds	r7, #16
 80168ce:	46bd      	mov	sp, r7
 80168d0:	bd80      	pop	{r7, pc}

080168d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168d2:	b580      	push	{r7, lr}
 80168d4:	b084      	sub	sp, #16
 80168d6:	af00      	add	r7, sp, #0
 80168d8:	6078      	str	r0, [r7, #4]
 80168da:	460b      	mov	r3, r1
 80168dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168de:	2300      	movs	r3, #0
 80168e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168e2:	2300      	movs	r3, #0
 80168e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80168ec:	78fa      	ldrb	r2, [r7, #3]
 80168ee:	4611      	mov	r1, r2
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f2 fca5 	bl	8009240 <HAL_PCD_EP_ClrStall>
 80168f6:	4603      	mov	r3, r0
 80168f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168fa:	7bfb      	ldrb	r3, [r7, #15]
 80168fc:	4618      	mov	r0, r3
 80168fe:	f000 f8bf 	bl	8016a80 <USBD_Get_USB_Status>
 8016902:	4603      	mov	r3, r0
 8016904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016906:	7bbb      	ldrb	r3, [r7, #14]
}
 8016908:	4618      	mov	r0, r3
 801690a:	3710      	adds	r7, #16
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}

08016910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016910:	b480      	push	{r7}
 8016912:	b085      	sub	sp, #20
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016922:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016928:	2b00      	cmp	r3, #0
 801692a:	da0b      	bge.n	8016944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801692c:	78fb      	ldrb	r3, [r7, #3]
 801692e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016932:	68f9      	ldr	r1, [r7, #12]
 8016934:	4613      	mov	r3, r2
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	4413      	add	r3, r2
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	440b      	add	r3, r1
 801693e:	333e      	adds	r3, #62	; 0x3e
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	e00b      	b.n	801695c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016944:	78fb      	ldrb	r3, [r7, #3]
 8016946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801694a:	68f9      	ldr	r1, [r7, #12]
 801694c:	4613      	mov	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	4413      	add	r3, r2
 8016952:	009b      	lsls	r3, r3, #2
 8016954:	440b      	add	r3, r1
 8016956:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801695a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801695c:	4618      	mov	r0, r3
 801695e:	3714      	adds	r7, #20
 8016960:	46bd      	mov	sp, r7
 8016962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016966:	4770      	bx	lr

08016968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016978:	2300      	movs	r3, #0
 801697a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016982:	78fa      	ldrb	r2, [r7, #3]
 8016984:	4611      	mov	r1, r2
 8016986:	4618      	mov	r0, r3
 8016988:	f7f2 fa90 	bl	8008eac <HAL_PCD_SetAddress>
 801698c:	4603      	mov	r3, r0
 801698e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016990:	7bfb      	ldrb	r3, [r7, #15]
 8016992:	4618      	mov	r0, r3
 8016994:	f000 f874 	bl	8016a80 <USBD_Get_USB_Status>
 8016998:	4603      	mov	r3, r0
 801699a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801699c:	7bbb      	ldrb	r3, [r7, #14]
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80169a6:	b580      	push	{r7, lr}
 80169a8:	b086      	sub	sp, #24
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	60f8      	str	r0, [r7, #12]
 80169ae:	607a      	str	r2, [r7, #4]
 80169b0:	603b      	str	r3, [r7, #0]
 80169b2:	460b      	mov	r3, r1
 80169b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169b6:	2300      	movs	r3, #0
 80169b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169ba:	2300      	movs	r3, #0
 80169bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80169c4:	7af9      	ldrb	r1, [r7, #11]
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	687a      	ldr	r2, [r7, #4]
 80169ca:	f7f2 fb9a 	bl	8009102 <HAL_PCD_EP_Transmit>
 80169ce:	4603      	mov	r3, r0
 80169d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169d2:	7dfb      	ldrb	r3, [r7, #23]
 80169d4:	4618      	mov	r0, r3
 80169d6:	f000 f853 	bl	8016a80 <USBD_Get_USB_Status>
 80169da:	4603      	mov	r3, r0
 80169dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80169de:	7dbb      	ldrb	r3, [r7, #22]
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3718      	adds	r7, #24
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b086      	sub	sp, #24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	607a      	str	r2, [r7, #4]
 80169f2:	603b      	str	r3, [r7, #0]
 80169f4:	460b      	mov	r3, r1
 80169f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169f8:	2300      	movs	r3, #0
 80169fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169fc:	2300      	movs	r3, #0
 80169fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a06:	7af9      	ldrb	r1, [r7, #11]
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	687a      	ldr	r2, [r7, #4]
 8016a0c:	f7f2 fb25 	bl	800905a <HAL_PCD_EP_Receive>
 8016a10:	4603      	mov	r3, r0
 8016a12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a14:	7dfb      	ldrb	r3, [r7, #23]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f000 f832 	bl	8016a80 <USBD_Get_USB_Status>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a20:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a22:	4618      	mov	r0, r3
 8016a24:	3718      	adds	r7, #24
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}

08016a2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a2a:	b580      	push	{r7, lr}
 8016a2c:	b082      	sub	sp, #8
 8016a2e:	af00      	add	r7, sp, #0
 8016a30:	6078      	str	r0, [r7, #4]
 8016a32:	460b      	mov	r3, r1
 8016a34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a3c:	78fa      	ldrb	r2, [r7, #3]
 8016a3e:	4611      	mov	r1, r2
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7f2 fb46 	bl	80090d2 <HAL_PCD_EP_GetRxCount>
 8016a46:	4603      	mov	r3, r0
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016a50:	b480      	push	{r7}
 8016a52:	b083      	sub	sp, #12
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016a58:	4b03      	ldr	r3, [pc, #12]	; (8016a68 <USBD_static_malloc+0x18>)
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	370c      	adds	r7, #12
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a64:	4770      	bx	lr
 8016a66:	bf00      	nop
 8016a68:	24002720 	.word	0x24002720

08016a6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016a6c:	b480      	push	{r7}
 8016a6e:	b083      	sub	sp, #12
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016a74:	bf00      	nop
 8016a76:	370c      	adds	r7, #12
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7e:	4770      	bx	lr

08016a80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016a80:	b480      	push	{r7}
 8016a82:	b085      	sub	sp, #20
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	4603      	mov	r3, r0
 8016a88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016a8e:	79fb      	ldrb	r3, [r7, #7]
 8016a90:	2b03      	cmp	r3, #3
 8016a92:	d817      	bhi.n	8016ac4 <USBD_Get_USB_Status+0x44>
 8016a94:	a201      	add	r2, pc, #4	; (adr r2, 8016a9c <USBD_Get_USB_Status+0x1c>)
 8016a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a9a:	bf00      	nop
 8016a9c:	08016aad 	.word	0x08016aad
 8016aa0:	08016ab3 	.word	0x08016ab3
 8016aa4:	08016ab9 	.word	0x08016ab9
 8016aa8:	08016abf 	.word	0x08016abf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016aac:	2300      	movs	r3, #0
 8016aae:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab0:	e00b      	b.n	8016aca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016ab2:	2303      	movs	r3, #3
 8016ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ab6:	e008      	b.n	8016aca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ab8:	2301      	movs	r3, #1
 8016aba:	73fb      	strb	r3, [r7, #15]
    break;
 8016abc:	e005      	b.n	8016aca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016abe:	2303      	movs	r3, #3
 8016ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8016ac2:	e002      	b.n	8016aca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ac4:	2303      	movs	r3, #3
 8016ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8016ac8:	bf00      	nop
  }
  return usb_status;
 8016aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3714      	adds	r7, #20
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr

08016ad8 <__errno>:
 8016ad8:	4b01      	ldr	r3, [pc, #4]	; (8016ae0 <__errno+0x8>)
 8016ada:	6818      	ldr	r0, [r3, #0]
 8016adc:	4770      	bx	lr
 8016ade:	bf00      	nop
 8016ae0:	24000128 	.word	0x24000128

08016ae4 <__libc_init_array>:
 8016ae4:	b570      	push	{r4, r5, r6, lr}
 8016ae6:	4d0d      	ldr	r5, [pc, #52]	; (8016b1c <__libc_init_array+0x38>)
 8016ae8:	4c0d      	ldr	r4, [pc, #52]	; (8016b20 <__libc_init_array+0x3c>)
 8016aea:	1b64      	subs	r4, r4, r5
 8016aec:	10a4      	asrs	r4, r4, #2
 8016aee:	2600      	movs	r6, #0
 8016af0:	42a6      	cmp	r6, r4
 8016af2:	d109      	bne.n	8016b08 <__libc_init_array+0x24>
 8016af4:	4d0b      	ldr	r5, [pc, #44]	; (8016b24 <__libc_init_array+0x40>)
 8016af6:	4c0c      	ldr	r4, [pc, #48]	; (8016b28 <__libc_init_array+0x44>)
 8016af8:	f004 fcec 	bl	801b4d4 <_init>
 8016afc:	1b64      	subs	r4, r4, r5
 8016afe:	10a4      	asrs	r4, r4, #2
 8016b00:	2600      	movs	r6, #0
 8016b02:	42a6      	cmp	r6, r4
 8016b04:	d105      	bne.n	8016b12 <__libc_init_array+0x2e>
 8016b06:	bd70      	pop	{r4, r5, r6, pc}
 8016b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b0c:	4798      	blx	r3
 8016b0e:	3601      	adds	r6, #1
 8016b10:	e7ee      	b.n	8016af0 <__libc_init_array+0xc>
 8016b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b16:	4798      	blx	r3
 8016b18:	3601      	adds	r6, #1
 8016b1a:	e7f2      	b.n	8016b02 <__libc_init_array+0x1e>
 8016b1c:	0801bc64 	.word	0x0801bc64
 8016b20:	0801bc64 	.word	0x0801bc64
 8016b24:	0801bc64 	.word	0x0801bc64
 8016b28:	0801bc68 	.word	0x0801bc68

08016b2c <memcpy>:
 8016b2c:	440a      	add	r2, r1
 8016b2e:	4291      	cmp	r1, r2
 8016b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8016b34:	d100      	bne.n	8016b38 <memcpy+0xc>
 8016b36:	4770      	bx	lr
 8016b38:	b510      	push	{r4, lr}
 8016b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016b42:	4291      	cmp	r1, r2
 8016b44:	d1f9      	bne.n	8016b3a <memcpy+0xe>
 8016b46:	bd10      	pop	{r4, pc}

08016b48 <memset>:
 8016b48:	4402      	add	r2, r0
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	4293      	cmp	r3, r2
 8016b4e:	d100      	bne.n	8016b52 <memset+0xa>
 8016b50:	4770      	bx	lr
 8016b52:	f803 1b01 	strb.w	r1, [r3], #1
 8016b56:	e7f9      	b.n	8016b4c <memset+0x4>

08016b58 <__cvt>:
 8016b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b5a:	ed2d 8b02 	vpush	{d8}
 8016b5e:	eeb0 8b40 	vmov.f64	d8, d0
 8016b62:	b085      	sub	sp, #20
 8016b64:	4617      	mov	r7, r2
 8016b66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016b68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016b6a:	ee18 2a90 	vmov	r2, s17
 8016b6e:	f025 0520 	bic.w	r5, r5, #32
 8016b72:	2a00      	cmp	r2, #0
 8016b74:	bfb6      	itet	lt
 8016b76:	222d      	movlt	r2, #45	; 0x2d
 8016b78:	2200      	movge	r2, #0
 8016b7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8016b7e:	2d46      	cmp	r5, #70	; 0x46
 8016b80:	460c      	mov	r4, r1
 8016b82:	701a      	strb	r2, [r3, #0]
 8016b84:	d004      	beq.n	8016b90 <__cvt+0x38>
 8016b86:	2d45      	cmp	r5, #69	; 0x45
 8016b88:	d100      	bne.n	8016b8c <__cvt+0x34>
 8016b8a:	3401      	adds	r4, #1
 8016b8c:	2102      	movs	r1, #2
 8016b8e:	e000      	b.n	8016b92 <__cvt+0x3a>
 8016b90:	2103      	movs	r1, #3
 8016b92:	ab03      	add	r3, sp, #12
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	ab02      	add	r3, sp, #8
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	4622      	mov	r2, r4
 8016b9c:	4633      	mov	r3, r6
 8016b9e:	eeb0 0b48 	vmov.f64	d0, d8
 8016ba2:	f001 fd95 	bl	80186d0 <_dtoa_r>
 8016ba6:	2d47      	cmp	r5, #71	; 0x47
 8016ba8:	d101      	bne.n	8016bae <__cvt+0x56>
 8016baa:	07fb      	lsls	r3, r7, #31
 8016bac:	d51a      	bpl.n	8016be4 <__cvt+0x8c>
 8016bae:	2d46      	cmp	r5, #70	; 0x46
 8016bb0:	eb00 0204 	add.w	r2, r0, r4
 8016bb4:	d10c      	bne.n	8016bd0 <__cvt+0x78>
 8016bb6:	7803      	ldrb	r3, [r0, #0]
 8016bb8:	2b30      	cmp	r3, #48	; 0x30
 8016bba:	d107      	bne.n	8016bcc <__cvt+0x74>
 8016bbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc4:	bf1c      	itt	ne
 8016bc6:	f1c4 0401 	rsbne	r4, r4, #1
 8016bca:	6034      	strne	r4, [r6, #0]
 8016bcc:	6833      	ldr	r3, [r6, #0]
 8016bce:	441a      	add	r2, r3
 8016bd0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd8:	bf08      	it	eq
 8016bda:	9203      	streq	r2, [sp, #12]
 8016bdc:	2130      	movs	r1, #48	; 0x30
 8016bde:	9b03      	ldr	r3, [sp, #12]
 8016be0:	4293      	cmp	r3, r2
 8016be2:	d307      	bcc.n	8016bf4 <__cvt+0x9c>
 8016be4:	9b03      	ldr	r3, [sp, #12]
 8016be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016be8:	1a1b      	subs	r3, r3, r0
 8016bea:	6013      	str	r3, [r2, #0]
 8016bec:	b005      	add	sp, #20
 8016bee:	ecbd 8b02 	vpop	{d8}
 8016bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bf4:	1c5c      	adds	r4, r3, #1
 8016bf6:	9403      	str	r4, [sp, #12]
 8016bf8:	7019      	strb	r1, [r3, #0]
 8016bfa:	e7f0      	b.n	8016bde <__cvt+0x86>

08016bfc <__exponent>:
 8016bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2900      	cmp	r1, #0
 8016c02:	bfb8      	it	lt
 8016c04:	4249      	neglt	r1, r1
 8016c06:	f803 2b02 	strb.w	r2, [r3], #2
 8016c0a:	bfb4      	ite	lt
 8016c0c:	222d      	movlt	r2, #45	; 0x2d
 8016c0e:	222b      	movge	r2, #43	; 0x2b
 8016c10:	2909      	cmp	r1, #9
 8016c12:	7042      	strb	r2, [r0, #1]
 8016c14:	dd2a      	ble.n	8016c6c <__exponent+0x70>
 8016c16:	f10d 0407 	add.w	r4, sp, #7
 8016c1a:	46a4      	mov	ip, r4
 8016c1c:	270a      	movs	r7, #10
 8016c1e:	46a6      	mov	lr, r4
 8016c20:	460a      	mov	r2, r1
 8016c22:	fb91 f6f7 	sdiv	r6, r1, r7
 8016c26:	fb07 1516 	mls	r5, r7, r6, r1
 8016c2a:	3530      	adds	r5, #48	; 0x30
 8016c2c:	2a63      	cmp	r2, #99	; 0x63
 8016c2e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016c32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016c36:	4631      	mov	r1, r6
 8016c38:	dcf1      	bgt.n	8016c1e <__exponent+0x22>
 8016c3a:	3130      	adds	r1, #48	; 0x30
 8016c3c:	f1ae 0502 	sub.w	r5, lr, #2
 8016c40:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016c44:	1c44      	adds	r4, r0, #1
 8016c46:	4629      	mov	r1, r5
 8016c48:	4561      	cmp	r1, ip
 8016c4a:	d30a      	bcc.n	8016c62 <__exponent+0x66>
 8016c4c:	f10d 0209 	add.w	r2, sp, #9
 8016c50:	eba2 020e 	sub.w	r2, r2, lr
 8016c54:	4565      	cmp	r5, ip
 8016c56:	bf88      	it	hi
 8016c58:	2200      	movhi	r2, #0
 8016c5a:	4413      	add	r3, r2
 8016c5c:	1a18      	subs	r0, r3, r0
 8016c5e:	b003      	add	sp, #12
 8016c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c66:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016c6a:	e7ed      	b.n	8016c48 <__exponent+0x4c>
 8016c6c:	2330      	movs	r3, #48	; 0x30
 8016c6e:	3130      	adds	r1, #48	; 0x30
 8016c70:	7083      	strb	r3, [r0, #2]
 8016c72:	70c1      	strb	r1, [r0, #3]
 8016c74:	1d03      	adds	r3, r0, #4
 8016c76:	e7f1      	b.n	8016c5c <__exponent+0x60>

08016c78 <_printf_float>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	b08b      	sub	sp, #44	; 0x2c
 8016c7e:	460c      	mov	r4, r1
 8016c80:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016c84:	4616      	mov	r6, r2
 8016c86:	461f      	mov	r7, r3
 8016c88:	4605      	mov	r5, r0
 8016c8a:	f002 fdff 	bl	801988c <_localeconv_r>
 8016c8e:	f8d0 b000 	ldr.w	fp, [r0]
 8016c92:	4658      	mov	r0, fp
 8016c94:	f7e9 fb3c 	bl	8000310 <strlen>
 8016c98:	2300      	movs	r3, #0
 8016c9a:	9308      	str	r3, [sp, #32]
 8016c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8016ca0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016ca4:	6822      	ldr	r2, [r4, #0]
 8016ca6:	3307      	adds	r3, #7
 8016ca8:	f023 0307 	bic.w	r3, r3, #7
 8016cac:	f103 0108 	add.w	r1, r3, #8
 8016cb0:	f8c8 1000 	str.w	r1, [r8]
 8016cb4:	4682      	mov	sl, r0
 8016cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016cba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016cbe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016f20 <_printf_float+0x2a8>
 8016cc2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8016cc6:	eeb0 6bc0 	vabs.f64	d6, d0
 8016cca:	eeb4 6b47 	vcmp.f64	d6, d7
 8016cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd2:	dd24      	ble.n	8016d1e <_printf_float+0xa6>
 8016cd4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cdc:	d502      	bpl.n	8016ce4 <_printf_float+0x6c>
 8016cde:	232d      	movs	r3, #45	; 0x2d
 8016ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ce4:	4b90      	ldr	r3, [pc, #576]	; (8016f28 <_printf_float+0x2b0>)
 8016ce6:	4891      	ldr	r0, [pc, #580]	; (8016f2c <_printf_float+0x2b4>)
 8016ce8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016cec:	bf94      	ite	ls
 8016cee:	4698      	movls	r8, r3
 8016cf0:	4680      	movhi	r8, r0
 8016cf2:	2303      	movs	r3, #3
 8016cf4:	6123      	str	r3, [r4, #16]
 8016cf6:	f022 0204 	bic.w	r2, r2, #4
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	6022      	str	r2, [r4, #0]
 8016cfe:	9304      	str	r3, [sp, #16]
 8016d00:	9700      	str	r7, [sp, #0]
 8016d02:	4633      	mov	r3, r6
 8016d04:	aa09      	add	r2, sp, #36	; 0x24
 8016d06:	4621      	mov	r1, r4
 8016d08:	4628      	mov	r0, r5
 8016d0a:	f000 f9d3 	bl	80170b4 <_printf_common>
 8016d0e:	3001      	adds	r0, #1
 8016d10:	f040 808a 	bne.w	8016e28 <_printf_float+0x1b0>
 8016d14:	f04f 30ff 	mov.w	r0, #4294967295
 8016d18:	b00b      	add	sp, #44	; 0x2c
 8016d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d1e:	eeb4 0b40 	vcmp.f64	d0, d0
 8016d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d26:	d709      	bvc.n	8016d3c <_printf_float+0xc4>
 8016d28:	ee10 3a90 	vmov	r3, s1
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	bfbc      	itt	lt
 8016d30:	232d      	movlt	r3, #45	; 0x2d
 8016d32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016d36:	487e      	ldr	r0, [pc, #504]	; (8016f30 <_printf_float+0x2b8>)
 8016d38:	4b7e      	ldr	r3, [pc, #504]	; (8016f34 <_printf_float+0x2bc>)
 8016d3a:	e7d5      	b.n	8016ce8 <_printf_float+0x70>
 8016d3c:	6863      	ldr	r3, [r4, #4]
 8016d3e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016d42:	9104      	str	r1, [sp, #16]
 8016d44:	1c59      	adds	r1, r3, #1
 8016d46:	d13c      	bne.n	8016dc2 <_printf_float+0x14a>
 8016d48:	2306      	movs	r3, #6
 8016d4a:	6063      	str	r3, [r4, #4]
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	9303      	str	r3, [sp, #12]
 8016d50:	ab08      	add	r3, sp, #32
 8016d52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016d56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016d5a:	ab07      	add	r3, sp, #28
 8016d5c:	6861      	ldr	r1, [r4, #4]
 8016d5e:	9300      	str	r3, [sp, #0]
 8016d60:	6022      	str	r2, [r4, #0]
 8016d62:	f10d 031b 	add.w	r3, sp, #27
 8016d66:	4628      	mov	r0, r5
 8016d68:	f7ff fef6 	bl	8016b58 <__cvt>
 8016d6c:	9b04      	ldr	r3, [sp, #16]
 8016d6e:	9907      	ldr	r1, [sp, #28]
 8016d70:	2b47      	cmp	r3, #71	; 0x47
 8016d72:	4680      	mov	r8, r0
 8016d74:	d108      	bne.n	8016d88 <_printf_float+0x110>
 8016d76:	1cc8      	adds	r0, r1, #3
 8016d78:	db02      	blt.n	8016d80 <_printf_float+0x108>
 8016d7a:	6863      	ldr	r3, [r4, #4]
 8016d7c:	4299      	cmp	r1, r3
 8016d7e:	dd41      	ble.n	8016e04 <_printf_float+0x18c>
 8016d80:	f1a9 0902 	sub.w	r9, r9, #2
 8016d84:	fa5f f989 	uxtb.w	r9, r9
 8016d88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016d8c:	d820      	bhi.n	8016dd0 <_printf_float+0x158>
 8016d8e:	3901      	subs	r1, #1
 8016d90:	464a      	mov	r2, r9
 8016d92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016d96:	9107      	str	r1, [sp, #28]
 8016d98:	f7ff ff30 	bl	8016bfc <__exponent>
 8016d9c:	9a08      	ldr	r2, [sp, #32]
 8016d9e:	9004      	str	r0, [sp, #16]
 8016da0:	1813      	adds	r3, r2, r0
 8016da2:	2a01      	cmp	r2, #1
 8016da4:	6123      	str	r3, [r4, #16]
 8016da6:	dc02      	bgt.n	8016dae <_printf_float+0x136>
 8016da8:	6822      	ldr	r2, [r4, #0]
 8016daa:	07d2      	lsls	r2, r2, #31
 8016dac:	d501      	bpl.n	8016db2 <_printf_float+0x13a>
 8016dae:	3301      	adds	r3, #1
 8016db0:	6123      	str	r3, [r4, #16]
 8016db2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d0a2      	beq.n	8016d00 <_printf_float+0x88>
 8016dba:	232d      	movs	r3, #45	; 0x2d
 8016dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016dc0:	e79e      	b.n	8016d00 <_printf_float+0x88>
 8016dc2:	9904      	ldr	r1, [sp, #16]
 8016dc4:	2947      	cmp	r1, #71	; 0x47
 8016dc6:	d1c1      	bne.n	8016d4c <_printf_float+0xd4>
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d1bf      	bne.n	8016d4c <_printf_float+0xd4>
 8016dcc:	2301      	movs	r3, #1
 8016dce:	e7bc      	b.n	8016d4a <_printf_float+0xd2>
 8016dd0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016dd4:	d118      	bne.n	8016e08 <_printf_float+0x190>
 8016dd6:	2900      	cmp	r1, #0
 8016dd8:	6863      	ldr	r3, [r4, #4]
 8016dda:	dd0b      	ble.n	8016df4 <_printf_float+0x17c>
 8016ddc:	6121      	str	r1, [r4, #16]
 8016dde:	b913      	cbnz	r3, 8016de6 <_printf_float+0x16e>
 8016de0:	6822      	ldr	r2, [r4, #0]
 8016de2:	07d0      	lsls	r0, r2, #31
 8016de4:	d502      	bpl.n	8016dec <_printf_float+0x174>
 8016de6:	3301      	adds	r3, #1
 8016de8:	440b      	add	r3, r1
 8016dea:	6123      	str	r3, [r4, #16]
 8016dec:	2300      	movs	r3, #0
 8016dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8016df0:	9304      	str	r3, [sp, #16]
 8016df2:	e7de      	b.n	8016db2 <_printf_float+0x13a>
 8016df4:	b913      	cbnz	r3, 8016dfc <_printf_float+0x184>
 8016df6:	6822      	ldr	r2, [r4, #0]
 8016df8:	07d2      	lsls	r2, r2, #31
 8016dfa:	d501      	bpl.n	8016e00 <_printf_float+0x188>
 8016dfc:	3302      	adds	r3, #2
 8016dfe:	e7f4      	b.n	8016dea <_printf_float+0x172>
 8016e00:	2301      	movs	r3, #1
 8016e02:	e7f2      	b.n	8016dea <_printf_float+0x172>
 8016e04:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016e08:	9b08      	ldr	r3, [sp, #32]
 8016e0a:	4299      	cmp	r1, r3
 8016e0c:	db05      	blt.n	8016e1a <_printf_float+0x1a2>
 8016e0e:	6823      	ldr	r3, [r4, #0]
 8016e10:	6121      	str	r1, [r4, #16]
 8016e12:	07d8      	lsls	r0, r3, #31
 8016e14:	d5ea      	bpl.n	8016dec <_printf_float+0x174>
 8016e16:	1c4b      	adds	r3, r1, #1
 8016e18:	e7e7      	b.n	8016dea <_printf_float+0x172>
 8016e1a:	2900      	cmp	r1, #0
 8016e1c:	bfd4      	ite	le
 8016e1e:	f1c1 0202 	rsble	r2, r1, #2
 8016e22:	2201      	movgt	r2, #1
 8016e24:	4413      	add	r3, r2
 8016e26:	e7e0      	b.n	8016dea <_printf_float+0x172>
 8016e28:	6823      	ldr	r3, [r4, #0]
 8016e2a:	055a      	lsls	r2, r3, #21
 8016e2c:	d407      	bmi.n	8016e3e <_printf_float+0x1c6>
 8016e2e:	6923      	ldr	r3, [r4, #16]
 8016e30:	4642      	mov	r2, r8
 8016e32:	4631      	mov	r1, r6
 8016e34:	4628      	mov	r0, r5
 8016e36:	47b8      	blx	r7
 8016e38:	3001      	adds	r0, #1
 8016e3a:	d12a      	bne.n	8016e92 <_printf_float+0x21a>
 8016e3c:	e76a      	b.n	8016d14 <_printf_float+0x9c>
 8016e3e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016e42:	f240 80e2 	bls.w	801700a <_printf_float+0x392>
 8016e46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016e4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e52:	d133      	bne.n	8016ebc <_printf_float+0x244>
 8016e54:	4a38      	ldr	r2, [pc, #224]	; (8016f38 <_printf_float+0x2c0>)
 8016e56:	2301      	movs	r3, #1
 8016e58:	4631      	mov	r1, r6
 8016e5a:	4628      	mov	r0, r5
 8016e5c:	47b8      	blx	r7
 8016e5e:	3001      	adds	r0, #1
 8016e60:	f43f af58 	beq.w	8016d14 <_printf_float+0x9c>
 8016e64:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	db02      	blt.n	8016e72 <_printf_float+0x1fa>
 8016e6c:	6823      	ldr	r3, [r4, #0]
 8016e6e:	07d8      	lsls	r0, r3, #31
 8016e70:	d50f      	bpl.n	8016e92 <_printf_float+0x21a>
 8016e72:	4653      	mov	r3, sl
 8016e74:	465a      	mov	r2, fp
 8016e76:	4631      	mov	r1, r6
 8016e78:	4628      	mov	r0, r5
 8016e7a:	47b8      	blx	r7
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	f43f af49 	beq.w	8016d14 <_printf_float+0x9c>
 8016e82:	f04f 0800 	mov.w	r8, #0
 8016e86:	f104 091a 	add.w	r9, r4, #26
 8016e8a:	9b08      	ldr	r3, [sp, #32]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	4543      	cmp	r3, r8
 8016e90:	dc09      	bgt.n	8016ea6 <_printf_float+0x22e>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	079b      	lsls	r3, r3, #30
 8016e96:	f100 8108 	bmi.w	80170aa <_printf_float+0x432>
 8016e9a:	68e0      	ldr	r0, [r4, #12]
 8016e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9e:	4298      	cmp	r0, r3
 8016ea0:	bfb8      	it	lt
 8016ea2:	4618      	movlt	r0, r3
 8016ea4:	e738      	b.n	8016d18 <_printf_float+0xa0>
 8016ea6:	2301      	movs	r3, #1
 8016ea8:	464a      	mov	r2, r9
 8016eaa:	4631      	mov	r1, r6
 8016eac:	4628      	mov	r0, r5
 8016eae:	47b8      	blx	r7
 8016eb0:	3001      	adds	r0, #1
 8016eb2:	f43f af2f 	beq.w	8016d14 <_printf_float+0x9c>
 8016eb6:	f108 0801 	add.w	r8, r8, #1
 8016eba:	e7e6      	b.n	8016e8a <_printf_float+0x212>
 8016ebc:	9b07      	ldr	r3, [sp, #28]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	dc3c      	bgt.n	8016f3c <_printf_float+0x2c4>
 8016ec2:	4a1d      	ldr	r2, [pc, #116]	; (8016f38 <_printf_float+0x2c0>)
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	4631      	mov	r1, r6
 8016ec8:	4628      	mov	r0, r5
 8016eca:	47b8      	blx	r7
 8016ecc:	3001      	adds	r0, #1
 8016ece:	f43f af21 	beq.w	8016d14 <_printf_float+0x9c>
 8016ed2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ed6:	4313      	orrs	r3, r2
 8016ed8:	d102      	bne.n	8016ee0 <_printf_float+0x268>
 8016eda:	6823      	ldr	r3, [r4, #0]
 8016edc:	07d9      	lsls	r1, r3, #31
 8016ede:	d5d8      	bpl.n	8016e92 <_printf_float+0x21a>
 8016ee0:	4653      	mov	r3, sl
 8016ee2:	465a      	mov	r2, fp
 8016ee4:	4631      	mov	r1, r6
 8016ee6:	4628      	mov	r0, r5
 8016ee8:	47b8      	blx	r7
 8016eea:	3001      	adds	r0, #1
 8016eec:	f43f af12 	beq.w	8016d14 <_printf_float+0x9c>
 8016ef0:	f04f 0900 	mov.w	r9, #0
 8016ef4:	f104 0a1a 	add.w	sl, r4, #26
 8016ef8:	9b07      	ldr	r3, [sp, #28]
 8016efa:	425b      	negs	r3, r3
 8016efc:	454b      	cmp	r3, r9
 8016efe:	dc01      	bgt.n	8016f04 <_printf_float+0x28c>
 8016f00:	9b08      	ldr	r3, [sp, #32]
 8016f02:	e795      	b.n	8016e30 <_printf_float+0x1b8>
 8016f04:	2301      	movs	r3, #1
 8016f06:	4652      	mov	r2, sl
 8016f08:	4631      	mov	r1, r6
 8016f0a:	4628      	mov	r0, r5
 8016f0c:	47b8      	blx	r7
 8016f0e:	3001      	adds	r0, #1
 8016f10:	f43f af00 	beq.w	8016d14 <_printf_float+0x9c>
 8016f14:	f109 0901 	add.w	r9, r9, #1
 8016f18:	e7ee      	b.n	8016ef8 <_printf_float+0x280>
 8016f1a:	bf00      	nop
 8016f1c:	f3af 8000 	nop.w
 8016f20:	ffffffff 	.word	0xffffffff
 8016f24:	7fefffff 	.word	0x7fefffff
 8016f28:	0801b7b8 	.word	0x0801b7b8
 8016f2c:	0801b7bc 	.word	0x0801b7bc
 8016f30:	0801b7c4 	.word	0x0801b7c4
 8016f34:	0801b7c0 	.word	0x0801b7c0
 8016f38:	0801b7c8 	.word	0x0801b7c8
 8016f3c:	9a08      	ldr	r2, [sp, #32]
 8016f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f40:	429a      	cmp	r2, r3
 8016f42:	bfa8      	it	ge
 8016f44:	461a      	movge	r2, r3
 8016f46:	2a00      	cmp	r2, #0
 8016f48:	4691      	mov	r9, r2
 8016f4a:	dc38      	bgt.n	8016fbe <_printf_float+0x346>
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	9305      	str	r3, [sp, #20]
 8016f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f54:	f104 021a 	add.w	r2, r4, #26
 8016f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f5a:	9905      	ldr	r1, [sp, #20]
 8016f5c:	9304      	str	r3, [sp, #16]
 8016f5e:	eba3 0309 	sub.w	r3, r3, r9
 8016f62:	428b      	cmp	r3, r1
 8016f64:	dc33      	bgt.n	8016fce <_printf_float+0x356>
 8016f66:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	db3c      	blt.n	8016fe8 <_printf_float+0x370>
 8016f6e:	6823      	ldr	r3, [r4, #0]
 8016f70:	07da      	lsls	r2, r3, #31
 8016f72:	d439      	bmi.n	8016fe8 <_printf_float+0x370>
 8016f74:	9b08      	ldr	r3, [sp, #32]
 8016f76:	9a04      	ldr	r2, [sp, #16]
 8016f78:	9907      	ldr	r1, [sp, #28]
 8016f7a:	1a9a      	subs	r2, r3, r2
 8016f7c:	eba3 0901 	sub.w	r9, r3, r1
 8016f80:	4591      	cmp	r9, r2
 8016f82:	bfa8      	it	ge
 8016f84:	4691      	movge	r9, r2
 8016f86:	f1b9 0f00 	cmp.w	r9, #0
 8016f8a:	dc35      	bgt.n	8016ff8 <_printf_float+0x380>
 8016f8c:	f04f 0800 	mov.w	r8, #0
 8016f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f94:	f104 0a1a 	add.w	sl, r4, #26
 8016f98:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	eba3 0309 	sub.w	r3, r3, r9
 8016fa2:	4543      	cmp	r3, r8
 8016fa4:	f77f af75 	ble.w	8016e92 <_printf_float+0x21a>
 8016fa8:	2301      	movs	r3, #1
 8016faa:	4652      	mov	r2, sl
 8016fac:	4631      	mov	r1, r6
 8016fae:	4628      	mov	r0, r5
 8016fb0:	47b8      	blx	r7
 8016fb2:	3001      	adds	r0, #1
 8016fb4:	f43f aeae 	beq.w	8016d14 <_printf_float+0x9c>
 8016fb8:	f108 0801 	add.w	r8, r8, #1
 8016fbc:	e7ec      	b.n	8016f98 <_printf_float+0x320>
 8016fbe:	4613      	mov	r3, r2
 8016fc0:	4631      	mov	r1, r6
 8016fc2:	4642      	mov	r2, r8
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	47b8      	blx	r7
 8016fc8:	3001      	adds	r0, #1
 8016fca:	d1bf      	bne.n	8016f4c <_printf_float+0x2d4>
 8016fcc:	e6a2      	b.n	8016d14 <_printf_float+0x9c>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	4631      	mov	r1, r6
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	9204      	str	r2, [sp, #16]
 8016fd6:	47b8      	blx	r7
 8016fd8:	3001      	adds	r0, #1
 8016fda:	f43f ae9b 	beq.w	8016d14 <_printf_float+0x9c>
 8016fde:	9b05      	ldr	r3, [sp, #20]
 8016fe0:	9a04      	ldr	r2, [sp, #16]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	9305      	str	r3, [sp, #20]
 8016fe6:	e7b7      	b.n	8016f58 <_printf_float+0x2e0>
 8016fe8:	4653      	mov	r3, sl
 8016fea:	465a      	mov	r2, fp
 8016fec:	4631      	mov	r1, r6
 8016fee:	4628      	mov	r0, r5
 8016ff0:	47b8      	blx	r7
 8016ff2:	3001      	adds	r0, #1
 8016ff4:	d1be      	bne.n	8016f74 <_printf_float+0x2fc>
 8016ff6:	e68d      	b.n	8016d14 <_printf_float+0x9c>
 8016ff8:	9a04      	ldr	r2, [sp, #16]
 8016ffa:	464b      	mov	r3, r9
 8016ffc:	4442      	add	r2, r8
 8016ffe:	4631      	mov	r1, r6
 8017000:	4628      	mov	r0, r5
 8017002:	47b8      	blx	r7
 8017004:	3001      	adds	r0, #1
 8017006:	d1c1      	bne.n	8016f8c <_printf_float+0x314>
 8017008:	e684      	b.n	8016d14 <_printf_float+0x9c>
 801700a:	9a08      	ldr	r2, [sp, #32]
 801700c:	2a01      	cmp	r2, #1
 801700e:	dc01      	bgt.n	8017014 <_printf_float+0x39c>
 8017010:	07db      	lsls	r3, r3, #31
 8017012:	d537      	bpl.n	8017084 <_printf_float+0x40c>
 8017014:	2301      	movs	r3, #1
 8017016:	4642      	mov	r2, r8
 8017018:	4631      	mov	r1, r6
 801701a:	4628      	mov	r0, r5
 801701c:	47b8      	blx	r7
 801701e:	3001      	adds	r0, #1
 8017020:	f43f ae78 	beq.w	8016d14 <_printf_float+0x9c>
 8017024:	4653      	mov	r3, sl
 8017026:	465a      	mov	r2, fp
 8017028:	4631      	mov	r1, r6
 801702a:	4628      	mov	r0, r5
 801702c:	47b8      	blx	r7
 801702e:	3001      	adds	r0, #1
 8017030:	f43f ae70 	beq.w	8016d14 <_printf_float+0x9c>
 8017034:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017038:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801703c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017040:	d01b      	beq.n	801707a <_printf_float+0x402>
 8017042:	9b08      	ldr	r3, [sp, #32]
 8017044:	f108 0201 	add.w	r2, r8, #1
 8017048:	3b01      	subs	r3, #1
 801704a:	4631      	mov	r1, r6
 801704c:	4628      	mov	r0, r5
 801704e:	47b8      	blx	r7
 8017050:	3001      	adds	r0, #1
 8017052:	d10e      	bne.n	8017072 <_printf_float+0x3fa>
 8017054:	e65e      	b.n	8016d14 <_printf_float+0x9c>
 8017056:	2301      	movs	r3, #1
 8017058:	464a      	mov	r2, r9
 801705a:	4631      	mov	r1, r6
 801705c:	4628      	mov	r0, r5
 801705e:	47b8      	blx	r7
 8017060:	3001      	adds	r0, #1
 8017062:	f43f ae57 	beq.w	8016d14 <_printf_float+0x9c>
 8017066:	f108 0801 	add.w	r8, r8, #1
 801706a:	9b08      	ldr	r3, [sp, #32]
 801706c:	3b01      	subs	r3, #1
 801706e:	4543      	cmp	r3, r8
 8017070:	dcf1      	bgt.n	8017056 <_printf_float+0x3de>
 8017072:	9b04      	ldr	r3, [sp, #16]
 8017074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017078:	e6db      	b.n	8016e32 <_printf_float+0x1ba>
 801707a:	f04f 0800 	mov.w	r8, #0
 801707e:	f104 091a 	add.w	r9, r4, #26
 8017082:	e7f2      	b.n	801706a <_printf_float+0x3f2>
 8017084:	2301      	movs	r3, #1
 8017086:	4642      	mov	r2, r8
 8017088:	e7df      	b.n	801704a <_printf_float+0x3d2>
 801708a:	2301      	movs	r3, #1
 801708c:	464a      	mov	r2, r9
 801708e:	4631      	mov	r1, r6
 8017090:	4628      	mov	r0, r5
 8017092:	47b8      	blx	r7
 8017094:	3001      	adds	r0, #1
 8017096:	f43f ae3d 	beq.w	8016d14 <_printf_float+0x9c>
 801709a:	f108 0801 	add.w	r8, r8, #1
 801709e:	68e3      	ldr	r3, [r4, #12]
 80170a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170a2:	1a5b      	subs	r3, r3, r1
 80170a4:	4543      	cmp	r3, r8
 80170a6:	dcf0      	bgt.n	801708a <_printf_float+0x412>
 80170a8:	e6f7      	b.n	8016e9a <_printf_float+0x222>
 80170aa:	f04f 0800 	mov.w	r8, #0
 80170ae:	f104 0919 	add.w	r9, r4, #25
 80170b2:	e7f4      	b.n	801709e <_printf_float+0x426>

080170b4 <_printf_common>:
 80170b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170b8:	4616      	mov	r6, r2
 80170ba:	4699      	mov	r9, r3
 80170bc:	688a      	ldr	r2, [r1, #8]
 80170be:	690b      	ldr	r3, [r1, #16]
 80170c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80170c4:	4293      	cmp	r3, r2
 80170c6:	bfb8      	it	lt
 80170c8:	4613      	movlt	r3, r2
 80170ca:	6033      	str	r3, [r6, #0]
 80170cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80170d0:	4607      	mov	r7, r0
 80170d2:	460c      	mov	r4, r1
 80170d4:	b10a      	cbz	r2, 80170da <_printf_common+0x26>
 80170d6:	3301      	adds	r3, #1
 80170d8:	6033      	str	r3, [r6, #0]
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	0699      	lsls	r1, r3, #26
 80170de:	bf42      	ittt	mi
 80170e0:	6833      	ldrmi	r3, [r6, #0]
 80170e2:	3302      	addmi	r3, #2
 80170e4:	6033      	strmi	r3, [r6, #0]
 80170e6:	6825      	ldr	r5, [r4, #0]
 80170e8:	f015 0506 	ands.w	r5, r5, #6
 80170ec:	d106      	bne.n	80170fc <_printf_common+0x48>
 80170ee:	f104 0a19 	add.w	sl, r4, #25
 80170f2:	68e3      	ldr	r3, [r4, #12]
 80170f4:	6832      	ldr	r2, [r6, #0]
 80170f6:	1a9b      	subs	r3, r3, r2
 80170f8:	42ab      	cmp	r3, r5
 80170fa:	dc26      	bgt.n	801714a <_printf_common+0x96>
 80170fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017100:	1e13      	subs	r3, r2, #0
 8017102:	6822      	ldr	r2, [r4, #0]
 8017104:	bf18      	it	ne
 8017106:	2301      	movne	r3, #1
 8017108:	0692      	lsls	r2, r2, #26
 801710a:	d42b      	bmi.n	8017164 <_printf_common+0xb0>
 801710c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017110:	4649      	mov	r1, r9
 8017112:	4638      	mov	r0, r7
 8017114:	47c0      	blx	r8
 8017116:	3001      	adds	r0, #1
 8017118:	d01e      	beq.n	8017158 <_printf_common+0xa4>
 801711a:	6823      	ldr	r3, [r4, #0]
 801711c:	68e5      	ldr	r5, [r4, #12]
 801711e:	6832      	ldr	r2, [r6, #0]
 8017120:	f003 0306 	and.w	r3, r3, #6
 8017124:	2b04      	cmp	r3, #4
 8017126:	bf08      	it	eq
 8017128:	1aad      	subeq	r5, r5, r2
 801712a:	68a3      	ldr	r3, [r4, #8]
 801712c:	6922      	ldr	r2, [r4, #16]
 801712e:	bf0c      	ite	eq
 8017130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017134:	2500      	movne	r5, #0
 8017136:	4293      	cmp	r3, r2
 8017138:	bfc4      	itt	gt
 801713a:	1a9b      	subgt	r3, r3, r2
 801713c:	18ed      	addgt	r5, r5, r3
 801713e:	2600      	movs	r6, #0
 8017140:	341a      	adds	r4, #26
 8017142:	42b5      	cmp	r5, r6
 8017144:	d11a      	bne.n	801717c <_printf_common+0xc8>
 8017146:	2000      	movs	r0, #0
 8017148:	e008      	b.n	801715c <_printf_common+0xa8>
 801714a:	2301      	movs	r3, #1
 801714c:	4652      	mov	r2, sl
 801714e:	4649      	mov	r1, r9
 8017150:	4638      	mov	r0, r7
 8017152:	47c0      	blx	r8
 8017154:	3001      	adds	r0, #1
 8017156:	d103      	bne.n	8017160 <_printf_common+0xac>
 8017158:	f04f 30ff 	mov.w	r0, #4294967295
 801715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017160:	3501      	adds	r5, #1
 8017162:	e7c6      	b.n	80170f2 <_printf_common+0x3e>
 8017164:	18e1      	adds	r1, r4, r3
 8017166:	1c5a      	adds	r2, r3, #1
 8017168:	2030      	movs	r0, #48	; 0x30
 801716a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801716e:	4422      	add	r2, r4
 8017170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017178:	3302      	adds	r3, #2
 801717a:	e7c7      	b.n	801710c <_printf_common+0x58>
 801717c:	2301      	movs	r3, #1
 801717e:	4622      	mov	r2, r4
 8017180:	4649      	mov	r1, r9
 8017182:	4638      	mov	r0, r7
 8017184:	47c0      	blx	r8
 8017186:	3001      	adds	r0, #1
 8017188:	d0e6      	beq.n	8017158 <_printf_common+0xa4>
 801718a:	3601      	adds	r6, #1
 801718c:	e7d9      	b.n	8017142 <_printf_common+0x8e>
	...

08017190 <_printf_i>:
 8017190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017194:	7e0f      	ldrb	r7, [r1, #24]
 8017196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017198:	2f78      	cmp	r7, #120	; 0x78
 801719a:	4691      	mov	r9, r2
 801719c:	4680      	mov	r8, r0
 801719e:	460c      	mov	r4, r1
 80171a0:	469a      	mov	sl, r3
 80171a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80171a6:	d807      	bhi.n	80171b8 <_printf_i+0x28>
 80171a8:	2f62      	cmp	r7, #98	; 0x62
 80171aa:	d80a      	bhi.n	80171c2 <_printf_i+0x32>
 80171ac:	2f00      	cmp	r7, #0
 80171ae:	f000 80d8 	beq.w	8017362 <_printf_i+0x1d2>
 80171b2:	2f58      	cmp	r7, #88	; 0x58
 80171b4:	f000 80a3 	beq.w	80172fe <_printf_i+0x16e>
 80171b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80171c0:	e03a      	b.n	8017238 <_printf_i+0xa8>
 80171c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80171c6:	2b15      	cmp	r3, #21
 80171c8:	d8f6      	bhi.n	80171b8 <_printf_i+0x28>
 80171ca:	a101      	add	r1, pc, #4	; (adr r1, 80171d0 <_printf_i+0x40>)
 80171cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80171d0:	08017229 	.word	0x08017229
 80171d4:	0801723d 	.word	0x0801723d
 80171d8:	080171b9 	.word	0x080171b9
 80171dc:	080171b9 	.word	0x080171b9
 80171e0:	080171b9 	.word	0x080171b9
 80171e4:	080171b9 	.word	0x080171b9
 80171e8:	0801723d 	.word	0x0801723d
 80171ec:	080171b9 	.word	0x080171b9
 80171f0:	080171b9 	.word	0x080171b9
 80171f4:	080171b9 	.word	0x080171b9
 80171f8:	080171b9 	.word	0x080171b9
 80171fc:	08017349 	.word	0x08017349
 8017200:	0801726d 	.word	0x0801726d
 8017204:	0801732b 	.word	0x0801732b
 8017208:	080171b9 	.word	0x080171b9
 801720c:	080171b9 	.word	0x080171b9
 8017210:	0801736b 	.word	0x0801736b
 8017214:	080171b9 	.word	0x080171b9
 8017218:	0801726d 	.word	0x0801726d
 801721c:	080171b9 	.word	0x080171b9
 8017220:	080171b9 	.word	0x080171b9
 8017224:	08017333 	.word	0x08017333
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	1d1a      	adds	r2, r3, #4
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	602a      	str	r2, [r5, #0]
 8017230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017238:	2301      	movs	r3, #1
 801723a:	e0a3      	b.n	8017384 <_printf_i+0x1f4>
 801723c:	6820      	ldr	r0, [r4, #0]
 801723e:	6829      	ldr	r1, [r5, #0]
 8017240:	0606      	lsls	r6, r0, #24
 8017242:	f101 0304 	add.w	r3, r1, #4
 8017246:	d50a      	bpl.n	801725e <_printf_i+0xce>
 8017248:	680e      	ldr	r6, [r1, #0]
 801724a:	602b      	str	r3, [r5, #0]
 801724c:	2e00      	cmp	r6, #0
 801724e:	da03      	bge.n	8017258 <_printf_i+0xc8>
 8017250:	232d      	movs	r3, #45	; 0x2d
 8017252:	4276      	negs	r6, r6
 8017254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017258:	485e      	ldr	r0, [pc, #376]	; (80173d4 <_printf_i+0x244>)
 801725a:	230a      	movs	r3, #10
 801725c:	e019      	b.n	8017292 <_printf_i+0x102>
 801725e:	680e      	ldr	r6, [r1, #0]
 8017260:	602b      	str	r3, [r5, #0]
 8017262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017266:	bf18      	it	ne
 8017268:	b236      	sxthne	r6, r6
 801726a:	e7ef      	b.n	801724c <_printf_i+0xbc>
 801726c:	682b      	ldr	r3, [r5, #0]
 801726e:	6820      	ldr	r0, [r4, #0]
 8017270:	1d19      	adds	r1, r3, #4
 8017272:	6029      	str	r1, [r5, #0]
 8017274:	0601      	lsls	r1, r0, #24
 8017276:	d501      	bpl.n	801727c <_printf_i+0xec>
 8017278:	681e      	ldr	r6, [r3, #0]
 801727a:	e002      	b.n	8017282 <_printf_i+0xf2>
 801727c:	0646      	lsls	r6, r0, #25
 801727e:	d5fb      	bpl.n	8017278 <_printf_i+0xe8>
 8017280:	881e      	ldrh	r6, [r3, #0]
 8017282:	4854      	ldr	r0, [pc, #336]	; (80173d4 <_printf_i+0x244>)
 8017284:	2f6f      	cmp	r7, #111	; 0x6f
 8017286:	bf0c      	ite	eq
 8017288:	2308      	moveq	r3, #8
 801728a:	230a      	movne	r3, #10
 801728c:	2100      	movs	r1, #0
 801728e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017292:	6865      	ldr	r5, [r4, #4]
 8017294:	60a5      	str	r5, [r4, #8]
 8017296:	2d00      	cmp	r5, #0
 8017298:	bfa2      	ittt	ge
 801729a:	6821      	ldrge	r1, [r4, #0]
 801729c:	f021 0104 	bicge.w	r1, r1, #4
 80172a0:	6021      	strge	r1, [r4, #0]
 80172a2:	b90e      	cbnz	r6, 80172a8 <_printf_i+0x118>
 80172a4:	2d00      	cmp	r5, #0
 80172a6:	d04d      	beq.n	8017344 <_printf_i+0x1b4>
 80172a8:	4615      	mov	r5, r2
 80172aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80172ae:	fb03 6711 	mls	r7, r3, r1, r6
 80172b2:	5dc7      	ldrb	r7, [r0, r7]
 80172b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80172b8:	4637      	mov	r7, r6
 80172ba:	42bb      	cmp	r3, r7
 80172bc:	460e      	mov	r6, r1
 80172be:	d9f4      	bls.n	80172aa <_printf_i+0x11a>
 80172c0:	2b08      	cmp	r3, #8
 80172c2:	d10b      	bne.n	80172dc <_printf_i+0x14c>
 80172c4:	6823      	ldr	r3, [r4, #0]
 80172c6:	07de      	lsls	r6, r3, #31
 80172c8:	d508      	bpl.n	80172dc <_printf_i+0x14c>
 80172ca:	6923      	ldr	r3, [r4, #16]
 80172cc:	6861      	ldr	r1, [r4, #4]
 80172ce:	4299      	cmp	r1, r3
 80172d0:	bfde      	ittt	le
 80172d2:	2330      	movle	r3, #48	; 0x30
 80172d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80172d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80172dc:	1b52      	subs	r2, r2, r5
 80172de:	6122      	str	r2, [r4, #16]
 80172e0:	f8cd a000 	str.w	sl, [sp]
 80172e4:	464b      	mov	r3, r9
 80172e6:	aa03      	add	r2, sp, #12
 80172e8:	4621      	mov	r1, r4
 80172ea:	4640      	mov	r0, r8
 80172ec:	f7ff fee2 	bl	80170b4 <_printf_common>
 80172f0:	3001      	adds	r0, #1
 80172f2:	d14c      	bne.n	801738e <_printf_i+0x1fe>
 80172f4:	f04f 30ff 	mov.w	r0, #4294967295
 80172f8:	b004      	add	sp, #16
 80172fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172fe:	4835      	ldr	r0, [pc, #212]	; (80173d4 <_printf_i+0x244>)
 8017300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017304:	6829      	ldr	r1, [r5, #0]
 8017306:	6823      	ldr	r3, [r4, #0]
 8017308:	f851 6b04 	ldr.w	r6, [r1], #4
 801730c:	6029      	str	r1, [r5, #0]
 801730e:	061d      	lsls	r5, r3, #24
 8017310:	d514      	bpl.n	801733c <_printf_i+0x1ac>
 8017312:	07df      	lsls	r7, r3, #31
 8017314:	bf44      	itt	mi
 8017316:	f043 0320 	orrmi.w	r3, r3, #32
 801731a:	6023      	strmi	r3, [r4, #0]
 801731c:	b91e      	cbnz	r6, 8017326 <_printf_i+0x196>
 801731e:	6823      	ldr	r3, [r4, #0]
 8017320:	f023 0320 	bic.w	r3, r3, #32
 8017324:	6023      	str	r3, [r4, #0]
 8017326:	2310      	movs	r3, #16
 8017328:	e7b0      	b.n	801728c <_printf_i+0xfc>
 801732a:	6823      	ldr	r3, [r4, #0]
 801732c:	f043 0320 	orr.w	r3, r3, #32
 8017330:	6023      	str	r3, [r4, #0]
 8017332:	2378      	movs	r3, #120	; 0x78
 8017334:	4828      	ldr	r0, [pc, #160]	; (80173d8 <_printf_i+0x248>)
 8017336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801733a:	e7e3      	b.n	8017304 <_printf_i+0x174>
 801733c:	0659      	lsls	r1, r3, #25
 801733e:	bf48      	it	mi
 8017340:	b2b6      	uxthmi	r6, r6
 8017342:	e7e6      	b.n	8017312 <_printf_i+0x182>
 8017344:	4615      	mov	r5, r2
 8017346:	e7bb      	b.n	80172c0 <_printf_i+0x130>
 8017348:	682b      	ldr	r3, [r5, #0]
 801734a:	6826      	ldr	r6, [r4, #0]
 801734c:	6961      	ldr	r1, [r4, #20]
 801734e:	1d18      	adds	r0, r3, #4
 8017350:	6028      	str	r0, [r5, #0]
 8017352:	0635      	lsls	r5, r6, #24
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	d501      	bpl.n	801735c <_printf_i+0x1cc>
 8017358:	6019      	str	r1, [r3, #0]
 801735a:	e002      	b.n	8017362 <_printf_i+0x1d2>
 801735c:	0670      	lsls	r0, r6, #25
 801735e:	d5fb      	bpl.n	8017358 <_printf_i+0x1c8>
 8017360:	8019      	strh	r1, [r3, #0]
 8017362:	2300      	movs	r3, #0
 8017364:	6123      	str	r3, [r4, #16]
 8017366:	4615      	mov	r5, r2
 8017368:	e7ba      	b.n	80172e0 <_printf_i+0x150>
 801736a:	682b      	ldr	r3, [r5, #0]
 801736c:	1d1a      	adds	r2, r3, #4
 801736e:	602a      	str	r2, [r5, #0]
 8017370:	681d      	ldr	r5, [r3, #0]
 8017372:	6862      	ldr	r2, [r4, #4]
 8017374:	2100      	movs	r1, #0
 8017376:	4628      	mov	r0, r5
 8017378:	f7e8 ffd2 	bl	8000320 <memchr>
 801737c:	b108      	cbz	r0, 8017382 <_printf_i+0x1f2>
 801737e:	1b40      	subs	r0, r0, r5
 8017380:	6060      	str	r0, [r4, #4]
 8017382:	6863      	ldr	r3, [r4, #4]
 8017384:	6123      	str	r3, [r4, #16]
 8017386:	2300      	movs	r3, #0
 8017388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801738c:	e7a8      	b.n	80172e0 <_printf_i+0x150>
 801738e:	6923      	ldr	r3, [r4, #16]
 8017390:	462a      	mov	r2, r5
 8017392:	4649      	mov	r1, r9
 8017394:	4640      	mov	r0, r8
 8017396:	47d0      	blx	sl
 8017398:	3001      	adds	r0, #1
 801739a:	d0ab      	beq.n	80172f4 <_printf_i+0x164>
 801739c:	6823      	ldr	r3, [r4, #0]
 801739e:	079b      	lsls	r3, r3, #30
 80173a0:	d413      	bmi.n	80173ca <_printf_i+0x23a>
 80173a2:	68e0      	ldr	r0, [r4, #12]
 80173a4:	9b03      	ldr	r3, [sp, #12]
 80173a6:	4298      	cmp	r0, r3
 80173a8:	bfb8      	it	lt
 80173aa:	4618      	movlt	r0, r3
 80173ac:	e7a4      	b.n	80172f8 <_printf_i+0x168>
 80173ae:	2301      	movs	r3, #1
 80173b0:	4632      	mov	r2, r6
 80173b2:	4649      	mov	r1, r9
 80173b4:	4640      	mov	r0, r8
 80173b6:	47d0      	blx	sl
 80173b8:	3001      	adds	r0, #1
 80173ba:	d09b      	beq.n	80172f4 <_printf_i+0x164>
 80173bc:	3501      	adds	r5, #1
 80173be:	68e3      	ldr	r3, [r4, #12]
 80173c0:	9903      	ldr	r1, [sp, #12]
 80173c2:	1a5b      	subs	r3, r3, r1
 80173c4:	42ab      	cmp	r3, r5
 80173c6:	dcf2      	bgt.n	80173ae <_printf_i+0x21e>
 80173c8:	e7eb      	b.n	80173a2 <_printf_i+0x212>
 80173ca:	2500      	movs	r5, #0
 80173cc:	f104 0619 	add.w	r6, r4, #25
 80173d0:	e7f5      	b.n	80173be <_printf_i+0x22e>
 80173d2:	bf00      	nop
 80173d4:	0801b7ca 	.word	0x0801b7ca
 80173d8:	0801b7db 	.word	0x0801b7db

080173dc <_scanf_float>:
 80173dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e0:	b087      	sub	sp, #28
 80173e2:	4617      	mov	r7, r2
 80173e4:	9303      	str	r3, [sp, #12]
 80173e6:	688b      	ldr	r3, [r1, #8]
 80173e8:	1e5a      	subs	r2, r3, #1
 80173ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80173ee:	bf83      	ittte	hi
 80173f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80173f4:	195b      	addhi	r3, r3, r5
 80173f6:	9302      	strhi	r3, [sp, #8]
 80173f8:	2300      	movls	r3, #0
 80173fa:	bf86      	itte	hi
 80173fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017400:	608b      	strhi	r3, [r1, #8]
 8017402:	9302      	strls	r3, [sp, #8]
 8017404:	680b      	ldr	r3, [r1, #0]
 8017406:	468b      	mov	fp, r1
 8017408:	2500      	movs	r5, #0
 801740a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801740e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017412:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017416:	4680      	mov	r8, r0
 8017418:	460c      	mov	r4, r1
 801741a:	465e      	mov	r6, fp
 801741c:	46aa      	mov	sl, r5
 801741e:	46a9      	mov	r9, r5
 8017420:	9501      	str	r5, [sp, #4]
 8017422:	68a2      	ldr	r2, [r4, #8]
 8017424:	b152      	cbz	r2, 801743c <_scanf_float+0x60>
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	2b4e      	cmp	r3, #78	; 0x4e
 801742c:	d864      	bhi.n	80174f8 <_scanf_float+0x11c>
 801742e:	2b40      	cmp	r3, #64	; 0x40
 8017430:	d83c      	bhi.n	80174ac <_scanf_float+0xd0>
 8017432:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017436:	b2c8      	uxtb	r0, r1
 8017438:	280e      	cmp	r0, #14
 801743a:	d93a      	bls.n	80174b2 <_scanf_float+0xd6>
 801743c:	f1b9 0f00 	cmp.w	r9, #0
 8017440:	d003      	beq.n	801744a <_scanf_float+0x6e>
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017448:	6023      	str	r3, [r4, #0]
 801744a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801744e:	f1ba 0f01 	cmp.w	sl, #1
 8017452:	f200 8113 	bhi.w	801767c <_scanf_float+0x2a0>
 8017456:	455e      	cmp	r6, fp
 8017458:	f200 8105 	bhi.w	8017666 <_scanf_float+0x28a>
 801745c:	2501      	movs	r5, #1
 801745e:	4628      	mov	r0, r5
 8017460:	b007      	add	sp, #28
 8017462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017466:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801746a:	2a0d      	cmp	r2, #13
 801746c:	d8e6      	bhi.n	801743c <_scanf_float+0x60>
 801746e:	a101      	add	r1, pc, #4	; (adr r1, 8017474 <_scanf_float+0x98>)
 8017470:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017474:	080175b3 	.word	0x080175b3
 8017478:	0801743d 	.word	0x0801743d
 801747c:	0801743d 	.word	0x0801743d
 8017480:	0801743d 	.word	0x0801743d
 8017484:	08017613 	.word	0x08017613
 8017488:	080175eb 	.word	0x080175eb
 801748c:	0801743d 	.word	0x0801743d
 8017490:	0801743d 	.word	0x0801743d
 8017494:	080175c1 	.word	0x080175c1
 8017498:	0801743d 	.word	0x0801743d
 801749c:	0801743d 	.word	0x0801743d
 80174a0:	0801743d 	.word	0x0801743d
 80174a4:	0801743d 	.word	0x0801743d
 80174a8:	08017579 	.word	0x08017579
 80174ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80174b0:	e7db      	b.n	801746a <_scanf_float+0x8e>
 80174b2:	290e      	cmp	r1, #14
 80174b4:	d8c2      	bhi.n	801743c <_scanf_float+0x60>
 80174b6:	a001      	add	r0, pc, #4	; (adr r0, 80174bc <_scanf_float+0xe0>)
 80174b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80174bc:	0801756b 	.word	0x0801756b
 80174c0:	0801743d 	.word	0x0801743d
 80174c4:	0801756b 	.word	0x0801756b
 80174c8:	080175ff 	.word	0x080175ff
 80174cc:	0801743d 	.word	0x0801743d
 80174d0:	08017519 	.word	0x08017519
 80174d4:	08017555 	.word	0x08017555
 80174d8:	08017555 	.word	0x08017555
 80174dc:	08017555 	.word	0x08017555
 80174e0:	08017555 	.word	0x08017555
 80174e4:	08017555 	.word	0x08017555
 80174e8:	08017555 	.word	0x08017555
 80174ec:	08017555 	.word	0x08017555
 80174f0:	08017555 	.word	0x08017555
 80174f4:	08017555 	.word	0x08017555
 80174f8:	2b6e      	cmp	r3, #110	; 0x6e
 80174fa:	d809      	bhi.n	8017510 <_scanf_float+0x134>
 80174fc:	2b60      	cmp	r3, #96	; 0x60
 80174fe:	d8b2      	bhi.n	8017466 <_scanf_float+0x8a>
 8017500:	2b54      	cmp	r3, #84	; 0x54
 8017502:	d077      	beq.n	80175f4 <_scanf_float+0x218>
 8017504:	2b59      	cmp	r3, #89	; 0x59
 8017506:	d199      	bne.n	801743c <_scanf_float+0x60>
 8017508:	2d07      	cmp	r5, #7
 801750a:	d197      	bne.n	801743c <_scanf_float+0x60>
 801750c:	2508      	movs	r5, #8
 801750e:	e029      	b.n	8017564 <_scanf_float+0x188>
 8017510:	2b74      	cmp	r3, #116	; 0x74
 8017512:	d06f      	beq.n	80175f4 <_scanf_float+0x218>
 8017514:	2b79      	cmp	r3, #121	; 0x79
 8017516:	e7f6      	b.n	8017506 <_scanf_float+0x12a>
 8017518:	6821      	ldr	r1, [r4, #0]
 801751a:	05c8      	lsls	r0, r1, #23
 801751c:	d51a      	bpl.n	8017554 <_scanf_float+0x178>
 801751e:	9b02      	ldr	r3, [sp, #8]
 8017520:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017524:	6021      	str	r1, [r4, #0]
 8017526:	f109 0901 	add.w	r9, r9, #1
 801752a:	b11b      	cbz	r3, 8017534 <_scanf_float+0x158>
 801752c:	3b01      	subs	r3, #1
 801752e:	3201      	adds	r2, #1
 8017530:	9302      	str	r3, [sp, #8]
 8017532:	60a2      	str	r2, [r4, #8]
 8017534:	68a3      	ldr	r3, [r4, #8]
 8017536:	3b01      	subs	r3, #1
 8017538:	60a3      	str	r3, [r4, #8]
 801753a:	6923      	ldr	r3, [r4, #16]
 801753c:	3301      	adds	r3, #1
 801753e:	6123      	str	r3, [r4, #16]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	3b01      	subs	r3, #1
 8017544:	2b00      	cmp	r3, #0
 8017546:	607b      	str	r3, [r7, #4]
 8017548:	f340 8084 	ble.w	8017654 <_scanf_float+0x278>
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	3301      	adds	r3, #1
 8017550:	603b      	str	r3, [r7, #0]
 8017552:	e766      	b.n	8017422 <_scanf_float+0x46>
 8017554:	eb1a 0f05 	cmn.w	sl, r5
 8017558:	f47f af70 	bne.w	801743c <_scanf_float+0x60>
 801755c:	6822      	ldr	r2, [r4, #0]
 801755e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017562:	6022      	str	r2, [r4, #0]
 8017564:	f806 3b01 	strb.w	r3, [r6], #1
 8017568:	e7e4      	b.n	8017534 <_scanf_float+0x158>
 801756a:	6822      	ldr	r2, [r4, #0]
 801756c:	0610      	lsls	r0, r2, #24
 801756e:	f57f af65 	bpl.w	801743c <_scanf_float+0x60>
 8017572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017576:	e7f4      	b.n	8017562 <_scanf_float+0x186>
 8017578:	f1ba 0f00 	cmp.w	sl, #0
 801757c:	d10e      	bne.n	801759c <_scanf_float+0x1c0>
 801757e:	f1b9 0f00 	cmp.w	r9, #0
 8017582:	d10e      	bne.n	80175a2 <_scanf_float+0x1c6>
 8017584:	6822      	ldr	r2, [r4, #0]
 8017586:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801758a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801758e:	d108      	bne.n	80175a2 <_scanf_float+0x1c6>
 8017590:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017594:	6022      	str	r2, [r4, #0]
 8017596:	f04f 0a01 	mov.w	sl, #1
 801759a:	e7e3      	b.n	8017564 <_scanf_float+0x188>
 801759c:	f1ba 0f02 	cmp.w	sl, #2
 80175a0:	d055      	beq.n	801764e <_scanf_float+0x272>
 80175a2:	2d01      	cmp	r5, #1
 80175a4:	d002      	beq.n	80175ac <_scanf_float+0x1d0>
 80175a6:	2d04      	cmp	r5, #4
 80175a8:	f47f af48 	bne.w	801743c <_scanf_float+0x60>
 80175ac:	3501      	adds	r5, #1
 80175ae:	b2ed      	uxtb	r5, r5
 80175b0:	e7d8      	b.n	8017564 <_scanf_float+0x188>
 80175b2:	f1ba 0f01 	cmp.w	sl, #1
 80175b6:	f47f af41 	bne.w	801743c <_scanf_float+0x60>
 80175ba:	f04f 0a02 	mov.w	sl, #2
 80175be:	e7d1      	b.n	8017564 <_scanf_float+0x188>
 80175c0:	b97d      	cbnz	r5, 80175e2 <_scanf_float+0x206>
 80175c2:	f1b9 0f00 	cmp.w	r9, #0
 80175c6:	f47f af3c 	bne.w	8017442 <_scanf_float+0x66>
 80175ca:	6822      	ldr	r2, [r4, #0]
 80175cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80175d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80175d4:	f47f af39 	bne.w	801744a <_scanf_float+0x6e>
 80175d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80175dc:	6022      	str	r2, [r4, #0]
 80175de:	2501      	movs	r5, #1
 80175e0:	e7c0      	b.n	8017564 <_scanf_float+0x188>
 80175e2:	2d03      	cmp	r5, #3
 80175e4:	d0e2      	beq.n	80175ac <_scanf_float+0x1d0>
 80175e6:	2d05      	cmp	r5, #5
 80175e8:	e7de      	b.n	80175a8 <_scanf_float+0x1cc>
 80175ea:	2d02      	cmp	r5, #2
 80175ec:	f47f af26 	bne.w	801743c <_scanf_float+0x60>
 80175f0:	2503      	movs	r5, #3
 80175f2:	e7b7      	b.n	8017564 <_scanf_float+0x188>
 80175f4:	2d06      	cmp	r5, #6
 80175f6:	f47f af21 	bne.w	801743c <_scanf_float+0x60>
 80175fa:	2507      	movs	r5, #7
 80175fc:	e7b2      	b.n	8017564 <_scanf_float+0x188>
 80175fe:	6822      	ldr	r2, [r4, #0]
 8017600:	0591      	lsls	r1, r2, #22
 8017602:	f57f af1b 	bpl.w	801743c <_scanf_float+0x60>
 8017606:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801760a:	6022      	str	r2, [r4, #0]
 801760c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017610:	e7a8      	b.n	8017564 <_scanf_float+0x188>
 8017612:	6822      	ldr	r2, [r4, #0]
 8017614:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017618:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801761c:	d006      	beq.n	801762c <_scanf_float+0x250>
 801761e:	0550      	lsls	r0, r2, #21
 8017620:	f57f af0c 	bpl.w	801743c <_scanf_float+0x60>
 8017624:	f1b9 0f00 	cmp.w	r9, #0
 8017628:	f43f af0f 	beq.w	801744a <_scanf_float+0x6e>
 801762c:	0591      	lsls	r1, r2, #22
 801762e:	bf58      	it	pl
 8017630:	9901      	ldrpl	r1, [sp, #4]
 8017632:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017636:	bf58      	it	pl
 8017638:	eba9 0101 	subpl.w	r1, r9, r1
 801763c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017640:	bf58      	it	pl
 8017642:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017646:	6022      	str	r2, [r4, #0]
 8017648:	f04f 0900 	mov.w	r9, #0
 801764c:	e78a      	b.n	8017564 <_scanf_float+0x188>
 801764e:	f04f 0a03 	mov.w	sl, #3
 8017652:	e787      	b.n	8017564 <_scanf_float+0x188>
 8017654:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017658:	4639      	mov	r1, r7
 801765a:	4640      	mov	r0, r8
 801765c:	4798      	blx	r3
 801765e:	2800      	cmp	r0, #0
 8017660:	f43f aedf 	beq.w	8017422 <_scanf_float+0x46>
 8017664:	e6ea      	b.n	801743c <_scanf_float+0x60>
 8017666:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801766a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801766e:	463a      	mov	r2, r7
 8017670:	4640      	mov	r0, r8
 8017672:	4798      	blx	r3
 8017674:	6923      	ldr	r3, [r4, #16]
 8017676:	3b01      	subs	r3, #1
 8017678:	6123      	str	r3, [r4, #16]
 801767a:	e6ec      	b.n	8017456 <_scanf_float+0x7a>
 801767c:	1e6b      	subs	r3, r5, #1
 801767e:	2b06      	cmp	r3, #6
 8017680:	d825      	bhi.n	80176ce <_scanf_float+0x2f2>
 8017682:	2d02      	cmp	r5, #2
 8017684:	d836      	bhi.n	80176f4 <_scanf_float+0x318>
 8017686:	455e      	cmp	r6, fp
 8017688:	f67f aee8 	bls.w	801745c <_scanf_float+0x80>
 801768c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017690:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017694:	463a      	mov	r2, r7
 8017696:	4640      	mov	r0, r8
 8017698:	4798      	blx	r3
 801769a:	6923      	ldr	r3, [r4, #16]
 801769c:	3b01      	subs	r3, #1
 801769e:	6123      	str	r3, [r4, #16]
 80176a0:	e7f1      	b.n	8017686 <_scanf_float+0x2aa>
 80176a2:	9802      	ldr	r0, [sp, #8]
 80176a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80176a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80176ac:	9002      	str	r0, [sp, #8]
 80176ae:	463a      	mov	r2, r7
 80176b0:	4640      	mov	r0, r8
 80176b2:	4798      	blx	r3
 80176b4:	6923      	ldr	r3, [r4, #16]
 80176b6:	3b01      	subs	r3, #1
 80176b8:	6123      	str	r3, [r4, #16]
 80176ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176be:	fa5f fa8a 	uxtb.w	sl, sl
 80176c2:	f1ba 0f02 	cmp.w	sl, #2
 80176c6:	d1ec      	bne.n	80176a2 <_scanf_float+0x2c6>
 80176c8:	3d03      	subs	r5, #3
 80176ca:	b2ed      	uxtb	r5, r5
 80176cc:	1b76      	subs	r6, r6, r5
 80176ce:	6823      	ldr	r3, [r4, #0]
 80176d0:	05da      	lsls	r2, r3, #23
 80176d2:	d52f      	bpl.n	8017734 <_scanf_float+0x358>
 80176d4:	055b      	lsls	r3, r3, #21
 80176d6:	d510      	bpl.n	80176fa <_scanf_float+0x31e>
 80176d8:	455e      	cmp	r6, fp
 80176da:	f67f aebf 	bls.w	801745c <_scanf_float+0x80>
 80176de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80176e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80176e6:	463a      	mov	r2, r7
 80176e8:	4640      	mov	r0, r8
 80176ea:	4798      	blx	r3
 80176ec:	6923      	ldr	r3, [r4, #16]
 80176ee:	3b01      	subs	r3, #1
 80176f0:	6123      	str	r3, [r4, #16]
 80176f2:	e7f1      	b.n	80176d8 <_scanf_float+0x2fc>
 80176f4:	46aa      	mov	sl, r5
 80176f6:	9602      	str	r6, [sp, #8]
 80176f8:	e7df      	b.n	80176ba <_scanf_float+0x2de>
 80176fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80176fe:	6923      	ldr	r3, [r4, #16]
 8017700:	2965      	cmp	r1, #101	; 0x65
 8017702:	f103 33ff 	add.w	r3, r3, #4294967295
 8017706:	f106 35ff 	add.w	r5, r6, #4294967295
 801770a:	6123      	str	r3, [r4, #16]
 801770c:	d00c      	beq.n	8017728 <_scanf_float+0x34c>
 801770e:	2945      	cmp	r1, #69	; 0x45
 8017710:	d00a      	beq.n	8017728 <_scanf_float+0x34c>
 8017712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017716:	463a      	mov	r2, r7
 8017718:	4640      	mov	r0, r8
 801771a:	4798      	blx	r3
 801771c:	6923      	ldr	r3, [r4, #16]
 801771e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017722:	3b01      	subs	r3, #1
 8017724:	1eb5      	subs	r5, r6, #2
 8017726:	6123      	str	r3, [r4, #16]
 8017728:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801772c:	463a      	mov	r2, r7
 801772e:	4640      	mov	r0, r8
 8017730:	4798      	blx	r3
 8017732:	462e      	mov	r6, r5
 8017734:	6825      	ldr	r5, [r4, #0]
 8017736:	f015 0510 	ands.w	r5, r5, #16
 801773a:	d14e      	bne.n	80177da <_scanf_float+0x3fe>
 801773c:	7035      	strb	r5, [r6, #0]
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017748:	d119      	bne.n	801777e <_scanf_float+0x3a2>
 801774a:	9b01      	ldr	r3, [sp, #4]
 801774c:	454b      	cmp	r3, r9
 801774e:	eba3 0209 	sub.w	r2, r3, r9
 8017752:	d121      	bne.n	8017798 <_scanf_float+0x3bc>
 8017754:	2200      	movs	r2, #0
 8017756:	4659      	mov	r1, fp
 8017758:	4640      	mov	r0, r8
 801775a:	f000 fe7f 	bl	801845c <_strtod_r>
 801775e:	6822      	ldr	r2, [r4, #0]
 8017760:	9b03      	ldr	r3, [sp, #12]
 8017762:	f012 0f02 	tst.w	r2, #2
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	d021      	beq.n	80177ae <_scanf_float+0x3d2>
 801776a:	9903      	ldr	r1, [sp, #12]
 801776c:	1d1a      	adds	r2, r3, #4
 801776e:	600a      	str	r2, [r1, #0]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	ed83 0b00 	vstr	d0, [r3]
 8017776:	68e3      	ldr	r3, [r4, #12]
 8017778:	3301      	adds	r3, #1
 801777a:	60e3      	str	r3, [r4, #12]
 801777c:	e66f      	b.n	801745e <_scanf_float+0x82>
 801777e:	9b04      	ldr	r3, [sp, #16]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d0e7      	beq.n	8017754 <_scanf_float+0x378>
 8017784:	9905      	ldr	r1, [sp, #20]
 8017786:	230a      	movs	r3, #10
 8017788:	462a      	mov	r2, r5
 801778a:	3101      	adds	r1, #1
 801778c:	4640      	mov	r0, r8
 801778e:	f000 feed 	bl	801856c <_strtol_r>
 8017792:	9b04      	ldr	r3, [sp, #16]
 8017794:	9e05      	ldr	r6, [sp, #20]
 8017796:	1ac2      	subs	r2, r0, r3
 8017798:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801779c:	429e      	cmp	r6, r3
 801779e:	bf28      	it	cs
 80177a0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80177a4:	490e      	ldr	r1, [pc, #56]	; (80177e0 <_scanf_float+0x404>)
 80177a6:	4630      	mov	r0, r6
 80177a8:	f000 f824 	bl	80177f4 <siprintf>
 80177ac:	e7d2      	b.n	8017754 <_scanf_float+0x378>
 80177ae:	9903      	ldr	r1, [sp, #12]
 80177b0:	f012 0f04 	tst.w	r2, #4
 80177b4:	f103 0204 	add.w	r2, r3, #4
 80177b8:	600a      	str	r2, [r1, #0]
 80177ba:	d1d9      	bne.n	8017770 <_scanf_float+0x394>
 80177bc:	eeb4 0b40 	vcmp.f64	d0, d0
 80177c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c4:	681e      	ldr	r6, [r3, #0]
 80177c6:	d705      	bvc.n	80177d4 <_scanf_float+0x3f8>
 80177c8:	4806      	ldr	r0, [pc, #24]	; (80177e4 <_scanf_float+0x408>)
 80177ca:	f000 f80d 	bl	80177e8 <nanf>
 80177ce:	ed86 0a00 	vstr	s0, [r6]
 80177d2:	e7d0      	b.n	8017776 <_scanf_float+0x39a>
 80177d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80177d8:	e7f9      	b.n	80177ce <_scanf_float+0x3f2>
 80177da:	2500      	movs	r5, #0
 80177dc:	e63f      	b.n	801745e <_scanf_float+0x82>
 80177de:	bf00      	nop
 80177e0:	0801b7ec 	.word	0x0801b7ec
 80177e4:	0801bbf8 	.word	0x0801bbf8

080177e8 <nanf>:
 80177e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80177f0 <nanf+0x8>
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop
 80177f0:	7fc00000 	.word	0x7fc00000

080177f4 <siprintf>:
 80177f4:	b40e      	push	{r1, r2, r3}
 80177f6:	b500      	push	{lr}
 80177f8:	b09c      	sub	sp, #112	; 0x70
 80177fa:	ab1d      	add	r3, sp, #116	; 0x74
 80177fc:	9002      	str	r0, [sp, #8]
 80177fe:	9006      	str	r0, [sp, #24]
 8017800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017804:	4809      	ldr	r0, [pc, #36]	; (801782c <siprintf+0x38>)
 8017806:	9107      	str	r1, [sp, #28]
 8017808:	9104      	str	r1, [sp, #16]
 801780a:	4909      	ldr	r1, [pc, #36]	; (8017830 <siprintf+0x3c>)
 801780c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017810:	9105      	str	r1, [sp, #20]
 8017812:	6800      	ldr	r0, [r0, #0]
 8017814:	9301      	str	r3, [sp, #4]
 8017816:	a902      	add	r1, sp, #8
 8017818:	f002 fe78 	bl	801a50c <_svfiprintf_r>
 801781c:	9b02      	ldr	r3, [sp, #8]
 801781e:	2200      	movs	r2, #0
 8017820:	701a      	strb	r2, [r3, #0]
 8017822:	b01c      	add	sp, #112	; 0x70
 8017824:	f85d eb04 	ldr.w	lr, [sp], #4
 8017828:	b003      	add	sp, #12
 801782a:	4770      	bx	lr
 801782c:	24000128 	.word	0x24000128
 8017830:	ffff0208 	.word	0xffff0208

08017834 <__sread>:
 8017834:	b510      	push	{r4, lr}
 8017836:	460c      	mov	r4, r1
 8017838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801783c:	f002 ff66 	bl	801a70c <_read_r>
 8017840:	2800      	cmp	r0, #0
 8017842:	bfab      	itete	ge
 8017844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017846:	89a3      	ldrhlt	r3, [r4, #12]
 8017848:	181b      	addge	r3, r3, r0
 801784a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801784e:	bfac      	ite	ge
 8017850:	6563      	strge	r3, [r4, #84]	; 0x54
 8017852:	81a3      	strhlt	r3, [r4, #12]
 8017854:	bd10      	pop	{r4, pc}

08017856 <__swrite>:
 8017856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801785a:	461f      	mov	r7, r3
 801785c:	898b      	ldrh	r3, [r1, #12]
 801785e:	05db      	lsls	r3, r3, #23
 8017860:	4605      	mov	r5, r0
 8017862:	460c      	mov	r4, r1
 8017864:	4616      	mov	r6, r2
 8017866:	d505      	bpl.n	8017874 <__swrite+0x1e>
 8017868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801786c:	2302      	movs	r3, #2
 801786e:	2200      	movs	r2, #0
 8017870:	f002 f810 	bl	8019894 <_lseek_r>
 8017874:	89a3      	ldrh	r3, [r4, #12]
 8017876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801787a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801787e:	81a3      	strh	r3, [r4, #12]
 8017880:	4632      	mov	r2, r6
 8017882:	463b      	mov	r3, r7
 8017884:	4628      	mov	r0, r5
 8017886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801788a:	f000 be71 	b.w	8018570 <_write_r>

0801788e <__sseek>:
 801788e:	b510      	push	{r4, lr}
 8017890:	460c      	mov	r4, r1
 8017892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017896:	f001 fffd 	bl	8019894 <_lseek_r>
 801789a:	1c43      	adds	r3, r0, #1
 801789c:	89a3      	ldrh	r3, [r4, #12]
 801789e:	bf15      	itete	ne
 80178a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80178a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80178aa:	81a3      	strheq	r3, [r4, #12]
 80178ac:	bf18      	it	ne
 80178ae:	81a3      	strhne	r3, [r4, #12]
 80178b0:	bd10      	pop	{r4, pc}

080178b2 <__sclose>:
 80178b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178b6:	f000 be6d 	b.w	8018594 <_close_r>

080178ba <sulp>:
 80178ba:	b570      	push	{r4, r5, r6, lr}
 80178bc:	4604      	mov	r4, r0
 80178be:	460d      	mov	r5, r1
 80178c0:	4616      	mov	r6, r2
 80178c2:	ec45 4b10 	vmov	d0, r4, r5
 80178c6:	f002 fb83 	bl	8019fd0 <__ulp>
 80178ca:	b17e      	cbz	r6, 80178ec <sulp+0x32>
 80178cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80178d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	dd09      	ble.n	80178ec <sulp+0x32>
 80178d8:	051b      	lsls	r3, r3, #20
 80178da:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80178de:	2000      	movs	r0, #0
 80178e0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80178e4:	ec41 0b17 	vmov	d7, r0, r1
 80178e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80178ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080178f0 <_strtod_l>:
 80178f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f4:	ed2d 8b0e 	vpush	{d8-d14}
 80178f8:	b097      	sub	sp, #92	; 0x5c
 80178fa:	461f      	mov	r7, r3
 80178fc:	2300      	movs	r3, #0
 80178fe:	9312      	str	r3, [sp, #72]	; 0x48
 8017900:	4ba1      	ldr	r3, [pc, #644]	; (8017b88 <_strtod_l+0x298>)
 8017902:	920d      	str	r2, [sp, #52]	; 0x34
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	9307      	str	r3, [sp, #28]
 8017908:	4604      	mov	r4, r0
 801790a:	4618      	mov	r0, r3
 801790c:	468b      	mov	fp, r1
 801790e:	f7e8 fcff 	bl	8000310 <strlen>
 8017912:	f04f 0800 	mov.w	r8, #0
 8017916:	4605      	mov	r5, r0
 8017918:	f04f 0900 	mov.w	r9, #0
 801791c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017920:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017922:	7813      	ldrb	r3, [r2, #0]
 8017924:	2b2b      	cmp	r3, #43	; 0x2b
 8017926:	d04d      	beq.n	80179c4 <_strtod_l+0xd4>
 8017928:	d83a      	bhi.n	80179a0 <_strtod_l+0xb0>
 801792a:	2b0d      	cmp	r3, #13
 801792c:	d833      	bhi.n	8017996 <_strtod_l+0xa6>
 801792e:	2b08      	cmp	r3, #8
 8017930:	d833      	bhi.n	801799a <_strtod_l+0xaa>
 8017932:	2b00      	cmp	r3, #0
 8017934:	d03d      	beq.n	80179b2 <_strtod_l+0xc2>
 8017936:	2300      	movs	r3, #0
 8017938:	9308      	str	r3, [sp, #32]
 801793a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801793c:	7833      	ldrb	r3, [r6, #0]
 801793e:	2b30      	cmp	r3, #48	; 0x30
 8017940:	f040 80b0 	bne.w	8017aa4 <_strtod_l+0x1b4>
 8017944:	7873      	ldrb	r3, [r6, #1]
 8017946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801794a:	2b58      	cmp	r3, #88	; 0x58
 801794c:	d167      	bne.n	8017a1e <_strtod_l+0x12e>
 801794e:	9b08      	ldr	r3, [sp, #32]
 8017950:	9301      	str	r3, [sp, #4]
 8017952:	ab12      	add	r3, sp, #72	; 0x48
 8017954:	9702      	str	r7, [sp, #8]
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	4a8c      	ldr	r2, [pc, #560]	; (8017b8c <_strtod_l+0x29c>)
 801795a:	ab13      	add	r3, sp, #76	; 0x4c
 801795c:	a911      	add	r1, sp, #68	; 0x44
 801795e:	4620      	mov	r0, r4
 8017960:	f001 fc8c 	bl	801927c <__gethex>
 8017964:	f010 0507 	ands.w	r5, r0, #7
 8017968:	4607      	mov	r7, r0
 801796a:	d005      	beq.n	8017978 <_strtod_l+0x88>
 801796c:	2d06      	cmp	r5, #6
 801796e:	d12b      	bne.n	80179c8 <_strtod_l+0xd8>
 8017970:	3601      	adds	r6, #1
 8017972:	2300      	movs	r3, #0
 8017974:	9611      	str	r6, [sp, #68]	; 0x44
 8017976:	9308      	str	r3, [sp, #32]
 8017978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801797a:	2b00      	cmp	r3, #0
 801797c:	f040 854e 	bne.w	801841c <_strtod_l+0xb2c>
 8017980:	9b08      	ldr	r3, [sp, #32]
 8017982:	b1e3      	cbz	r3, 80179be <_strtod_l+0xce>
 8017984:	ec49 8b17 	vmov	d7, r8, r9
 8017988:	eeb1 0b47 	vneg.f64	d0, d7
 801798c:	b017      	add	sp, #92	; 0x5c
 801798e:	ecbd 8b0e 	vpop	{d8-d14}
 8017992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017996:	2b20      	cmp	r3, #32
 8017998:	d1cd      	bne.n	8017936 <_strtod_l+0x46>
 801799a:	3201      	adds	r2, #1
 801799c:	9211      	str	r2, [sp, #68]	; 0x44
 801799e:	e7bf      	b.n	8017920 <_strtod_l+0x30>
 80179a0:	2b2d      	cmp	r3, #45	; 0x2d
 80179a2:	d1c8      	bne.n	8017936 <_strtod_l+0x46>
 80179a4:	2301      	movs	r3, #1
 80179a6:	9308      	str	r3, [sp, #32]
 80179a8:	1c53      	adds	r3, r2, #1
 80179aa:	9311      	str	r3, [sp, #68]	; 0x44
 80179ac:	7853      	ldrb	r3, [r2, #1]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1c3      	bne.n	801793a <_strtod_l+0x4a>
 80179b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179b4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	f040 852d 	bne.w	8018418 <_strtod_l+0xb28>
 80179be:	ec49 8b10 	vmov	d0, r8, r9
 80179c2:	e7e3      	b.n	801798c <_strtod_l+0x9c>
 80179c4:	2300      	movs	r3, #0
 80179c6:	e7ee      	b.n	80179a6 <_strtod_l+0xb6>
 80179c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179ca:	b13a      	cbz	r2, 80179dc <_strtod_l+0xec>
 80179cc:	2135      	movs	r1, #53	; 0x35
 80179ce:	a814      	add	r0, sp, #80	; 0x50
 80179d0:	f002 fc06 	bl	801a1e0 <__copybits>
 80179d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80179d6:	4620      	mov	r0, r4
 80179d8:	f001 ffc8 	bl	801996c <_Bfree>
 80179dc:	3d01      	subs	r5, #1
 80179de:	2d04      	cmp	r5, #4
 80179e0:	d806      	bhi.n	80179f0 <_strtod_l+0x100>
 80179e2:	e8df f005 	tbb	[pc, r5]
 80179e6:	030a      	.short	0x030a
 80179e8:	1714      	.short	0x1714
 80179ea:	0a          	.byte	0x0a
 80179eb:	00          	.byte	0x00
 80179ec:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80179f0:	073f      	lsls	r7, r7, #28
 80179f2:	d5c1      	bpl.n	8017978 <_strtod_l+0x88>
 80179f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80179f8:	e7be      	b.n	8017978 <_strtod_l+0x88>
 80179fa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80179fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017a04:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017a08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8017a0c:	e7f0      	b.n	80179f0 <_strtod_l+0x100>
 8017a0e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017b90 <_strtod_l+0x2a0>
 8017a12:	e7ed      	b.n	80179f0 <_strtod_l+0x100>
 8017a14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017a18:	f04f 38ff 	mov.w	r8, #4294967295
 8017a1c:	e7e8      	b.n	80179f0 <_strtod_l+0x100>
 8017a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a20:	1c5a      	adds	r2, r3, #1
 8017a22:	9211      	str	r2, [sp, #68]	; 0x44
 8017a24:	785b      	ldrb	r3, [r3, #1]
 8017a26:	2b30      	cmp	r3, #48	; 0x30
 8017a28:	d0f9      	beq.n	8017a1e <_strtod_l+0x12e>
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d0a4      	beq.n	8017978 <_strtod_l+0x88>
 8017a2e:	2301      	movs	r3, #1
 8017a30:	f04f 0a00 	mov.w	sl, #0
 8017a34:	9304      	str	r3, [sp, #16]
 8017a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a38:	930a      	str	r3, [sp, #40]	; 0x28
 8017a3a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017a3e:	f8cd a018 	str.w	sl, [sp, #24]
 8017a42:	220a      	movs	r2, #10
 8017a44:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017a46:	7807      	ldrb	r7, [r0, #0]
 8017a48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8017a4c:	b2d9      	uxtb	r1, r3
 8017a4e:	2909      	cmp	r1, #9
 8017a50:	d92a      	bls.n	8017aa8 <_strtod_l+0x1b8>
 8017a52:	9907      	ldr	r1, [sp, #28]
 8017a54:	462a      	mov	r2, r5
 8017a56:	f002 fe83 	bl	801a760 <strncmp>
 8017a5a:	2800      	cmp	r0, #0
 8017a5c:	d033      	beq.n	8017ac6 <_strtod_l+0x1d6>
 8017a5e:	2000      	movs	r0, #0
 8017a60:	9b06      	ldr	r3, [sp, #24]
 8017a62:	463a      	mov	r2, r7
 8017a64:	4601      	mov	r1, r0
 8017a66:	4607      	mov	r7, r0
 8017a68:	2a65      	cmp	r2, #101	; 0x65
 8017a6a:	d001      	beq.n	8017a70 <_strtod_l+0x180>
 8017a6c:	2a45      	cmp	r2, #69	; 0x45
 8017a6e:	d117      	bne.n	8017aa0 <_strtod_l+0x1b0>
 8017a70:	b91b      	cbnz	r3, 8017a7a <_strtod_l+0x18a>
 8017a72:	9b04      	ldr	r3, [sp, #16]
 8017a74:	4303      	orrs	r3, r0
 8017a76:	d09c      	beq.n	80179b2 <_strtod_l+0xc2>
 8017a78:	2300      	movs	r3, #0
 8017a7a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8017a7e:	f10b 0201 	add.w	r2, fp, #1
 8017a82:	9211      	str	r2, [sp, #68]	; 0x44
 8017a84:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8017a88:	2a2b      	cmp	r2, #43	; 0x2b
 8017a8a:	d071      	beq.n	8017b70 <_strtod_l+0x280>
 8017a8c:	2a2d      	cmp	r2, #45	; 0x2d
 8017a8e:	d077      	beq.n	8017b80 <_strtod_l+0x290>
 8017a90:	f04f 0e00 	mov.w	lr, #0
 8017a94:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8017a98:	2d09      	cmp	r5, #9
 8017a9a:	d97f      	bls.n	8017b9c <_strtod_l+0x2ac>
 8017a9c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017aa0:	2500      	movs	r5, #0
 8017aa2:	e09b      	b.n	8017bdc <_strtod_l+0x2ec>
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	e7c3      	b.n	8017a30 <_strtod_l+0x140>
 8017aa8:	9906      	ldr	r1, [sp, #24]
 8017aaa:	2908      	cmp	r1, #8
 8017aac:	bfdd      	ittte	le
 8017aae:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017ab0:	fb02 3301 	mlale	r3, r2, r1, r3
 8017ab4:	9309      	strle	r3, [sp, #36]	; 0x24
 8017ab6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8017aba:	9b06      	ldr	r3, [sp, #24]
 8017abc:	3001      	adds	r0, #1
 8017abe:	3301      	adds	r3, #1
 8017ac0:	9306      	str	r3, [sp, #24]
 8017ac2:	9011      	str	r0, [sp, #68]	; 0x44
 8017ac4:	e7be      	b.n	8017a44 <_strtod_l+0x154>
 8017ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ac8:	195a      	adds	r2, r3, r5
 8017aca:	9211      	str	r2, [sp, #68]	; 0x44
 8017acc:	5d5a      	ldrb	r2, [r3, r5]
 8017ace:	9b06      	ldr	r3, [sp, #24]
 8017ad0:	b3a3      	cbz	r3, 8017b3c <_strtod_l+0x24c>
 8017ad2:	4607      	mov	r7, r0
 8017ad4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017ad8:	2909      	cmp	r1, #9
 8017ada:	d912      	bls.n	8017b02 <_strtod_l+0x212>
 8017adc:	2101      	movs	r1, #1
 8017ade:	e7c3      	b.n	8017a68 <_strtod_l+0x178>
 8017ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ae2:	1c5a      	adds	r2, r3, #1
 8017ae4:	9211      	str	r2, [sp, #68]	; 0x44
 8017ae6:	785a      	ldrb	r2, [r3, #1]
 8017ae8:	3001      	adds	r0, #1
 8017aea:	2a30      	cmp	r2, #48	; 0x30
 8017aec:	d0f8      	beq.n	8017ae0 <_strtod_l+0x1f0>
 8017aee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017af2:	2b08      	cmp	r3, #8
 8017af4:	f200 8497 	bhi.w	8018426 <_strtod_l+0xb36>
 8017af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017afa:	930a      	str	r3, [sp, #40]	; 0x28
 8017afc:	4607      	mov	r7, r0
 8017afe:	2000      	movs	r0, #0
 8017b00:	4603      	mov	r3, r0
 8017b02:	3a30      	subs	r2, #48	; 0x30
 8017b04:	f100 0101 	add.w	r1, r0, #1
 8017b08:	d012      	beq.n	8017b30 <_strtod_l+0x240>
 8017b0a:	440f      	add	r7, r1
 8017b0c:	eb00 0c03 	add.w	ip, r0, r3
 8017b10:	4619      	mov	r1, r3
 8017b12:	250a      	movs	r5, #10
 8017b14:	4561      	cmp	r1, ip
 8017b16:	d113      	bne.n	8017b40 <_strtod_l+0x250>
 8017b18:	1819      	adds	r1, r3, r0
 8017b1a:	2908      	cmp	r1, #8
 8017b1c:	f103 0301 	add.w	r3, r3, #1
 8017b20:	4403      	add	r3, r0
 8017b22:	dc1c      	bgt.n	8017b5e <_strtod_l+0x26e>
 8017b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b26:	210a      	movs	r1, #10
 8017b28:	fb01 2200 	mla	r2, r1, r0, r2
 8017b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b2e:	2100      	movs	r1, #0
 8017b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b32:	1c50      	adds	r0, r2, #1
 8017b34:	9011      	str	r0, [sp, #68]	; 0x44
 8017b36:	7852      	ldrb	r2, [r2, #1]
 8017b38:	4608      	mov	r0, r1
 8017b3a:	e7cb      	b.n	8017ad4 <_strtod_l+0x1e4>
 8017b3c:	9806      	ldr	r0, [sp, #24]
 8017b3e:	e7d4      	b.n	8017aea <_strtod_l+0x1fa>
 8017b40:	2908      	cmp	r1, #8
 8017b42:	dc04      	bgt.n	8017b4e <_strtod_l+0x25e>
 8017b44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017b46:	436e      	muls	r6, r5
 8017b48:	9609      	str	r6, [sp, #36]	; 0x24
 8017b4a:	3101      	adds	r1, #1
 8017b4c:	e7e2      	b.n	8017b14 <_strtod_l+0x224>
 8017b4e:	f101 0e01 	add.w	lr, r1, #1
 8017b52:	f1be 0f10 	cmp.w	lr, #16
 8017b56:	bfd8      	it	le
 8017b58:	fb05 fa0a 	mulle.w	sl, r5, sl
 8017b5c:	e7f5      	b.n	8017b4a <_strtod_l+0x25a>
 8017b5e:	2b10      	cmp	r3, #16
 8017b60:	bfdc      	itt	le
 8017b62:	210a      	movle	r1, #10
 8017b64:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8017b68:	e7e1      	b.n	8017b2e <_strtod_l+0x23e>
 8017b6a:	2700      	movs	r7, #0
 8017b6c:	2101      	movs	r1, #1
 8017b6e:	e780      	b.n	8017a72 <_strtod_l+0x182>
 8017b70:	f04f 0e00 	mov.w	lr, #0
 8017b74:	f10b 0202 	add.w	r2, fp, #2
 8017b78:	9211      	str	r2, [sp, #68]	; 0x44
 8017b7a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8017b7e:	e789      	b.n	8017a94 <_strtod_l+0x1a4>
 8017b80:	f04f 0e01 	mov.w	lr, #1
 8017b84:	e7f6      	b.n	8017b74 <_strtod_l+0x284>
 8017b86:	bf00      	nop
 8017b88:	0801ba40 	.word	0x0801ba40
 8017b8c:	0801b7f4 	.word	0x0801b7f4
 8017b90:	7ff00000 	.word	0x7ff00000
 8017b94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017b96:	1c55      	adds	r5, r2, #1
 8017b98:	9511      	str	r5, [sp, #68]	; 0x44
 8017b9a:	7852      	ldrb	r2, [r2, #1]
 8017b9c:	2a30      	cmp	r2, #48	; 0x30
 8017b9e:	d0f9      	beq.n	8017b94 <_strtod_l+0x2a4>
 8017ba0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8017ba4:	2d08      	cmp	r5, #8
 8017ba6:	f63f af7b 	bhi.w	8017aa0 <_strtod_l+0x1b0>
 8017baa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8017bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bb0:	9207      	str	r2, [sp, #28]
 8017bb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bb4:	1c55      	adds	r5, r2, #1
 8017bb6:	9511      	str	r5, [sp, #68]	; 0x44
 8017bb8:	7852      	ldrb	r2, [r2, #1]
 8017bba:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8017bbe:	2e09      	cmp	r6, #9
 8017bc0:	d937      	bls.n	8017c32 <_strtod_l+0x342>
 8017bc2:	9e07      	ldr	r6, [sp, #28]
 8017bc4:	1bad      	subs	r5, r5, r6
 8017bc6:	2d08      	cmp	r5, #8
 8017bc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8017bcc:	dc02      	bgt.n	8017bd4 <_strtod_l+0x2e4>
 8017bce:	4565      	cmp	r5, ip
 8017bd0:	bfa8      	it	ge
 8017bd2:	4665      	movge	r5, ip
 8017bd4:	f1be 0f00 	cmp.w	lr, #0
 8017bd8:	d000      	beq.n	8017bdc <_strtod_l+0x2ec>
 8017bda:	426d      	negs	r5, r5
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d14d      	bne.n	8017c7c <_strtod_l+0x38c>
 8017be0:	9b04      	ldr	r3, [sp, #16]
 8017be2:	4303      	orrs	r3, r0
 8017be4:	f47f aec8 	bne.w	8017978 <_strtod_l+0x88>
 8017be8:	2900      	cmp	r1, #0
 8017bea:	f47f aee2 	bne.w	80179b2 <_strtod_l+0xc2>
 8017bee:	2a69      	cmp	r2, #105	; 0x69
 8017bf0:	d027      	beq.n	8017c42 <_strtod_l+0x352>
 8017bf2:	dc24      	bgt.n	8017c3e <_strtod_l+0x34e>
 8017bf4:	2a49      	cmp	r2, #73	; 0x49
 8017bf6:	d024      	beq.n	8017c42 <_strtod_l+0x352>
 8017bf8:	2a4e      	cmp	r2, #78	; 0x4e
 8017bfa:	f47f aeda 	bne.w	80179b2 <_strtod_l+0xc2>
 8017bfe:	4996      	ldr	r1, [pc, #600]	; (8017e58 <_strtod_l+0x568>)
 8017c00:	a811      	add	r0, sp, #68	; 0x44
 8017c02:	f001 fd93 	bl	801972c <__match>
 8017c06:	2800      	cmp	r0, #0
 8017c08:	f43f aed3 	beq.w	80179b2 <_strtod_l+0xc2>
 8017c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	2b28      	cmp	r3, #40	; 0x28
 8017c12:	d12d      	bne.n	8017c70 <_strtod_l+0x380>
 8017c14:	4991      	ldr	r1, [pc, #580]	; (8017e5c <_strtod_l+0x56c>)
 8017c16:	aa14      	add	r2, sp, #80	; 0x50
 8017c18:	a811      	add	r0, sp, #68	; 0x44
 8017c1a:	f001 fd9b 	bl	8019754 <__hexnan>
 8017c1e:	2805      	cmp	r0, #5
 8017c20:	d126      	bne.n	8017c70 <_strtod_l+0x380>
 8017c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c24:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017c28:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8017c2c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017c30:	e6a2      	b.n	8017978 <_strtod_l+0x88>
 8017c32:	250a      	movs	r5, #10
 8017c34:	fb05 250c 	mla	r5, r5, ip, r2
 8017c38:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8017c3c:	e7b9      	b.n	8017bb2 <_strtod_l+0x2c2>
 8017c3e:	2a6e      	cmp	r2, #110	; 0x6e
 8017c40:	e7db      	b.n	8017bfa <_strtod_l+0x30a>
 8017c42:	4987      	ldr	r1, [pc, #540]	; (8017e60 <_strtod_l+0x570>)
 8017c44:	a811      	add	r0, sp, #68	; 0x44
 8017c46:	f001 fd71 	bl	801972c <__match>
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	f43f aeb1 	beq.w	80179b2 <_strtod_l+0xc2>
 8017c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c52:	4984      	ldr	r1, [pc, #528]	; (8017e64 <_strtod_l+0x574>)
 8017c54:	3b01      	subs	r3, #1
 8017c56:	a811      	add	r0, sp, #68	; 0x44
 8017c58:	9311      	str	r3, [sp, #68]	; 0x44
 8017c5a:	f001 fd67 	bl	801972c <__match>
 8017c5e:	b910      	cbnz	r0, 8017c66 <_strtod_l+0x376>
 8017c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c62:	3301      	adds	r3, #1
 8017c64:	9311      	str	r3, [sp, #68]	; 0x44
 8017c66:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8017e78 <_strtod_l+0x588>
 8017c6a:	f04f 0800 	mov.w	r8, #0
 8017c6e:	e683      	b.n	8017978 <_strtod_l+0x88>
 8017c70:	487d      	ldr	r0, [pc, #500]	; (8017e68 <_strtod_l+0x578>)
 8017c72:	f002 fd5d 	bl	801a730 <nan>
 8017c76:	ec59 8b10 	vmov	r8, r9, d0
 8017c7a:	e67d      	b.n	8017978 <_strtod_l+0x88>
 8017c7c:	1bea      	subs	r2, r5, r7
 8017c7e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8017c82:	9207      	str	r2, [sp, #28]
 8017c84:	9a06      	ldr	r2, [sp, #24]
 8017c86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017c8a:	2a00      	cmp	r2, #0
 8017c8c:	bf08      	it	eq
 8017c8e:	461a      	moveq	r2, r3
 8017c90:	2b10      	cmp	r3, #16
 8017c92:	9206      	str	r2, [sp, #24]
 8017c94:	461a      	mov	r2, r3
 8017c96:	bfa8      	it	ge
 8017c98:	2210      	movge	r2, #16
 8017c9a:	2b09      	cmp	r3, #9
 8017c9c:	ec59 8b17 	vmov	r8, r9, d7
 8017ca0:	dd0c      	ble.n	8017cbc <_strtod_l+0x3cc>
 8017ca2:	4972      	ldr	r1, [pc, #456]	; (8017e6c <_strtod_l+0x57c>)
 8017ca4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017ca8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8017cac:	ee06 aa90 	vmov	s13, sl
 8017cb0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017cb4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017cb8:	ec59 8b16 	vmov	r8, r9, d6
 8017cbc:	2b0f      	cmp	r3, #15
 8017cbe:	dc36      	bgt.n	8017d2e <_strtod_l+0x43e>
 8017cc0:	9907      	ldr	r1, [sp, #28]
 8017cc2:	2900      	cmp	r1, #0
 8017cc4:	f43f ae58 	beq.w	8017978 <_strtod_l+0x88>
 8017cc8:	dd23      	ble.n	8017d12 <_strtod_l+0x422>
 8017cca:	2916      	cmp	r1, #22
 8017ccc:	dc0b      	bgt.n	8017ce6 <_strtod_l+0x3f6>
 8017cce:	4b67      	ldr	r3, [pc, #412]	; (8017e6c <_strtod_l+0x57c>)
 8017cd0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017cd4:	ed93 7b00 	vldr	d7, [r3]
 8017cd8:	ec49 8b16 	vmov	d6, r8, r9
 8017cdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ce0:	ec59 8b17 	vmov	r8, r9, d7
 8017ce4:	e648      	b.n	8017978 <_strtod_l+0x88>
 8017ce6:	9807      	ldr	r0, [sp, #28]
 8017ce8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8017cec:	4281      	cmp	r1, r0
 8017cee:	db1e      	blt.n	8017d2e <_strtod_l+0x43e>
 8017cf0:	4a5e      	ldr	r2, [pc, #376]	; (8017e6c <_strtod_l+0x57c>)
 8017cf2:	f1c3 030f 	rsb	r3, r3, #15
 8017cf6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8017cfa:	ed91 7b00 	vldr	d7, [r1]
 8017cfe:	ec49 8b16 	vmov	d6, r8, r9
 8017d02:	1ac3      	subs	r3, r0, r3
 8017d04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017d08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017d0c:	ed92 6b00 	vldr	d6, [r2]
 8017d10:	e7e4      	b.n	8017cdc <_strtod_l+0x3ec>
 8017d12:	9907      	ldr	r1, [sp, #28]
 8017d14:	3116      	adds	r1, #22
 8017d16:	db0a      	blt.n	8017d2e <_strtod_l+0x43e>
 8017d18:	4b54      	ldr	r3, [pc, #336]	; (8017e6c <_strtod_l+0x57c>)
 8017d1a:	1b7d      	subs	r5, r7, r5
 8017d1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017d20:	ed95 7b00 	vldr	d7, [r5]
 8017d24:	ec49 8b16 	vmov	d6, r8, r9
 8017d28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017d2c:	e7d8      	b.n	8017ce0 <_strtod_l+0x3f0>
 8017d2e:	9907      	ldr	r1, [sp, #28]
 8017d30:	1a9a      	subs	r2, r3, r2
 8017d32:	440a      	add	r2, r1
 8017d34:	2a00      	cmp	r2, #0
 8017d36:	dd6f      	ble.n	8017e18 <_strtod_l+0x528>
 8017d38:	f012 000f 	ands.w	r0, r2, #15
 8017d3c:	d00a      	beq.n	8017d54 <_strtod_l+0x464>
 8017d3e:	494b      	ldr	r1, [pc, #300]	; (8017e6c <_strtod_l+0x57c>)
 8017d40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017d44:	ed91 7b00 	vldr	d7, [r1]
 8017d48:	ec49 8b16 	vmov	d6, r8, r9
 8017d4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017d50:	ec59 8b17 	vmov	r8, r9, d7
 8017d54:	f032 020f 	bics.w	r2, r2, #15
 8017d58:	d04f      	beq.n	8017dfa <_strtod_l+0x50a>
 8017d5a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8017d5e:	dd22      	ble.n	8017da6 <_strtod_l+0x4b6>
 8017d60:	2500      	movs	r5, #0
 8017d62:	462e      	mov	r6, r5
 8017d64:	9506      	str	r5, [sp, #24]
 8017d66:	462f      	mov	r7, r5
 8017d68:	2322      	movs	r3, #34	; 0x22
 8017d6a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8017e78 <_strtod_l+0x588>
 8017d6e:	6023      	str	r3, [r4, #0]
 8017d70:	f04f 0800 	mov.w	r8, #0
 8017d74:	9b06      	ldr	r3, [sp, #24]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	f43f adfe 	beq.w	8017978 <_strtod_l+0x88>
 8017d7c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017d7e:	4620      	mov	r0, r4
 8017d80:	f001 fdf4 	bl	801996c <_Bfree>
 8017d84:	4639      	mov	r1, r7
 8017d86:	4620      	mov	r0, r4
 8017d88:	f001 fdf0 	bl	801996c <_Bfree>
 8017d8c:	4631      	mov	r1, r6
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f001 fdec 	bl	801996c <_Bfree>
 8017d94:	9906      	ldr	r1, [sp, #24]
 8017d96:	4620      	mov	r0, r4
 8017d98:	f001 fde8 	bl	801996c <_Bfree>
 8017d9c:	4629      	mov	r1, r5
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f001 fde4 	bl	801996c <_Bfree>
 8017da4:	e5e8      	b.n	8017978 <_strtod_l+0x88>
 8017da6:	2000      	movs	r0, #0
 8017da8:	ec49 8b17 	vmov	d7, r8, r9
 8017dac:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8017e70 <_strtod_l+0x580>
 8017db0:	1112      	asrs	r2, r2, #4
 8017db2:	4601      	mov	r1, r0
 8017db4:	2a01      	cmp	r2, #1
 8017db6:	dc23      	bgt.n	8017e00 <_strtod_l+0x510>
 8017db8:	b108      	cbz	r0, 8017dbe <_strtod_l+0x4ce>
 8017dba:	ec59 8b17 	vmov	r8, r9, d7
 8017dbe:	4a2c      	ldr	r2, [pc, #176]	; (8017e70 <_strtod_l+0x580>)
 8017dc0:	482c      	ldr	r0, [pc, #176]	; (8017e74 <_strtod_l+0x584>)
 8017dc2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017dc6:	ed92 7b00 	vldr	d7, [r2]
 8017dca:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8017dce:	ec49 8b16 	vmov	d6, r8, r9
 8017dd2:	4a29      	ldr	r2, [pc, #164]	; (8017e78 <_strtod_l+0x588>)
 8017dd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017dd8:	ee17 1a90 	vmov	r1, s15
 8017ddc:	400a      	ands	r2, r1
 8017dde:	4282      	cmp	r2, r0
 8017de0:	ec59 8b17 	vmov	r8, r9, d7
 8017de4:	d8bc      	bhi.n	8017d60 <_strtod_l+0x470>
 8017de6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8017dea:	4282      	cmp	r2, r0
 8017dec:	bf86      	itte	hi
 8017dee:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8017e7c <_strtod_l+0x58c>
 8017df2:	f04f 38ff 	movhi.w	r8, #4294967295
 8017df6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	9204      	str	r2, [sp, #16]
 8017dfe:	e078      	b.n	8017ef2 <_strtod_l+0x602>
 8017e00:	07d6      	lsls	r6, r2, #31
 8017e02:	d504      	bpl.n	8017e0e <_strtod_l+0x51e>
 8017e04:	ed9c 6b00 	vldr	d6, [ip]
 8017e08:	2001      	movs	r0, #1
 8017e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017e0e:	3101      	adds	r1, #1
 8017e10:	1052      	asrs	r2, r2, #1
 8017e12:	f10c 0c08 	add.w	ip, ip, #8
 8017e16:	e7cd      	b.n	8017db4 <_strtod_l+0x4c4>
 8017e18:	d0ef      	beq.n	8017dfa <_strtod_l+0x50a>
 8017e1a:	4252      	negs	r2, r2
 8017e1c:	f012 000f 	ands.w	r0, r2, #15
 8017e20:	d00a      	beq.n	8017e38 <_strtod_l+0x548>
 8017e22:	4912      	ldr	r1, [pc, #72]	; (8017e6c <_strtod_l+0x57c>)
 8017e24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017e28:	ed91 7b00 	vldr	d7, [r1]
 8017e2c:	ec49 8b16 	vmov	d6, r8, r9
 8017e30:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017e34:	ec59 8b17 	vmov	r8, r9, d7
 8017e38:	1112      	asrs	r2, r2, #4
 8017e3a:	d0de      	beq.n	8017dfa <_strtod_l+0x50a>
 8017e3c:	2a1f      	cmp	r2, #31
 8017e3e:	dd1f      	ble.n	8017e80 <_strtod_l+0x590>
 8017e40:	2500      	movs	r5, #0
 8017e42:	462e      	mov	r6, r5
 8017e44:	9506      	str	r5, [sp, #24]
 8017e46:	462f      	mov	r7, r5
 8017e48:	2322      	movs	r3, #34	; 0x22
 8017e4a:	f04f 0800 	mov.w	r8, #0
 8017e4e:	f04f 0900 	mov.w	r9, #0
 8017e52:	6023      	str	r3, [r4, #0]
 8017e54:	e78e      	b.n	8017d74 <_strtod_l+0x484>
 8017e56:	bf00      	nop
 8017e58:	0801b7c5 	.word	0x0801b7c5
 8017e5c:	0801b808 	.word	0x0801b808
 8017e60:	0801b7bd 	.word	0x0801b7bd
 8017e64:	0801b94c 	.word	0x0801b94c
 8017e68:	0801bbf8 	.word	0x0801bbf8
 8017e6c:	0801bad8 	.word	0x0801bad8
 8017e70:	0801bab0 	.word	0x0801bab0
 8017e74:	7ca00000 	.word	0x7ca00000
 8017e78:	7ff00000 	.word	0x7ff00000
 8017e7c:	7fefffff 	.word	0x7fefffff
 8017e80:	f012 0110 	ands.w	r1, r2, #16
 8017e84:	bf18      	it	ne
 8017e86:	216a      	movne	r1, #106	; 0x6a
 8017e88:	9104      	str	r1, [sp, #16]
 8017e8a:	ec49 8b17 	vmov	d7, r8, r9
 8017e8e:	49be      	ldr	r1, [pc, #760]	; (8018188 <_strtod_l+0x898>)
 8017e90:	2000      	movs	r0, #0
 8017e92:	07d6      	lsls	r6, r2, #31
 8017e94:	d504      	bpl.n	8017ea0 <_strtod_l+0x5b0>
 8017e96:	ed91 6b00 	vldr	d6, [r1]
 8017e9a:	2001      	movs	r0, #1
 8017e9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017ea0:	1052      	asrs	r2, r2, #1
 8017ea2:	f101 0108 	add.w	r1, r1, #8
 8017ea6:	d1f4      	bne.n	8017e92 <_strtod_l+0x5a2>
 8017ea8:	b108      	cbz	r0, 8017eae <_strtod_l+0x5be>
 8017eaa:	ec59 8b17 	vmov	r8, r9, d7
 8017eae:	9a04      	ldr	r2, [sp, #16]
 8017eb0:	b1c2      	cbz	r2, 8017ee4 <_strtod_l+0x5f4>
 8017eb2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8017eb6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8017eba:	2a00      	cmp	r2, #0
 8017ebc:	4648      	mov	r0, r9
 8017ebe:	dd11      	ble.n	8017ee4 <_strtod_l+0x5f4>
 8017ec0:	2a1f      	cmp	r2, #31
 8017ec2:	f340 812e 	ble.w	8018122 <_strtod_l+0x832>
 8017ec6:	2a34      	cmp	r2, #52	; 0x34
 8017ec8:	bfde      	ittt	le
 8017eca:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8017ece:	f04f 32ff 	movle.w	r2, #4294967295
 8017ed2:	fa02 f101 	lslle.w	r1, r2, r1
 8017ed6:	f04f 0800 	mov.w	r8, #0
 8017eda:	bfcc      	ite	gt
 8017edc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017ee0:	ea01 0900 	andle.w	r9, r1, r0
 8017ee4:	ec49 8b17 	vmov	d7, r8, r9
 8017ee8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ef0:	d0a6      	beq.n	8017e40 <_strtod_l+0x550>
 8017ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ef4:	9200      	str	r2, [sp, #0]
 8017ef6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017ef8:	9a06      	ldr	r2, [sp, #24]
 8017efa:	4620      	mov	r0, r4
 8017efc:	f001 fd9e 	bl	8019a3c <__s2b>
 8017f00:	9006      	str	r0, [sp, #24]
 8017f02:	2800      	cmp	r0, #0
 8017f04:	f43f af2c 	beq.w	8017d60 <_strtod_l+0x470>
 8017f08:	9b07      	ldr	r3, [sp, #28]
 8017f0a:	1b7d      	subs	r5, r7, r5
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	bfb4      	ite	lt
 8017f10:	462b      	movlt	r3, r5
 8017f12:	2300      	movge	r3, #0
 8017f14:	9309      	str	r3, [sp, #36]	; 0x24
 8017f16:	9b07      	ldr	r3, [sp, #28]
 8017f18:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8018168 <_strtod_l+0x878>
 8017f1c:	ed9f ab94 	vldr	d10, [pc, #592]	; 8018170 <_strtod_l+0x880>
 8017f20:	ed9f bb95 	vldr	d11, [pc, #596]	; 8018178 <_strtod_l+0x888>
 8017f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f28:	2500      	movs	r5, #0
 8017f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8017f2c:	462e      	mov	r6, r5
 8017f2e:	9b06      	ldr	r3, [sp, #24]
 8017f30:	4620      	mov	r0, r4
 8017f32:	6859      	ldr	r1, [r3, #4]
 8017f34:	f001 fcda 	bl	80198ec <_Balloc>
 8017f38:	4607      	mov	r7, r0
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	f43f af14 	beq.w	8017d68 <_strtod_l+0x478>
 8017f40:	9b06      	ldr	r3, [sp, #24]
 8017f42:	691a      	ldr	r2, [r3, #16]
 8017f44:	3202      	adds	r2, #2
 8017f46:	f103 010c 	add.w	r1, r3, #12
 8017f4a:	0092      	lsls	r2, r2, #2
 8017f4c:	300c      	adds	r0, #12
 8017f4e:	f7fe fded 	bl	8016b2c <memcpy>
 8017f52:	ec49 8b10 	vmov	d0, r8, r9
 8017f56:	aa14      	add	r2, sp, #80	; 0x50
 8017f58:	a913      	add	r1, sp, #76	; 0x4c
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f002 f8b4 	bl	801a0c8 <__d2b>
 8017f60:	ec49 8b18 	vmov	d8, r8, r9
 8017f64:	9012      	str	r0, [sp, #72]	; 0x48
 8017f66:	2800      	cmp	r0, #0
 8017f68:	f43f aefe 	beq.w	8017d68 <_strtod_l+0x478>
 8017f6c:	2101      	movs	r1, #1
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f001 fdfe 	bl	8019b70 <__i2b>
 8017f74:	4606      	mov	r6, r0
 8017f76:	2800      	cmp	r0, #0
 8017f78:	f43f aef6 	beq.w	8017d68 <_strtod_l+0x478>
 8017f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017f7e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bfab      	itete	ge
 8017f84:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8017f86:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8017f88:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8017f8c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8017f90:	bfac      	ite	ge
 8017f92:	eb03 0b02 	addge.w	fp, r3, r2
 8017f96:	eba2 0a03 	sublt.w	sl, r2, r3
 8017f9a:	9a04      	ldr	r2, [sp, #16]
 8017f9c:	1a9b      	subs	r3, r3, r2
 8017f9e:	440b      	add	r3, r1
 8017fa0:	4a7a      	ldr	r2, [pc, #488]	; (801818c <_strtod_l+0x89c>)
 8017fa2:	3b01      	subs	r3, #1
 8017fa4:	4293      	cmp	r3, r2
 8017fa6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8017faa:	f280 80cd 	bge.w	8018148 <_strtod_l+0x858>
 8017fae:	1ad2      	subs	r2, r2, r3
 8017fb0:	2a1f      	cmp	r2, #31
 8017fb2:	eba1 0102 	sub.w	r1, r1, r2
 8017fb6:	f04f 0001 	mov.w	r0, #1
 8017fba:	f300 80b9 	bgt.w	8018130 <_strtod_l+0x840>
 8017fbe:	fa00 f302 	lsl.w	r3, r0, r2
 8017fc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8017fc8:	eb0b 0301 	add.w	r3, fp, r1
 8017fcc:	9a04      	ldr	r2, [sp, #16]
 8017fce:	459b      	cmp	fp, r3
 8017fd0:	448a      	add	sl, r1
 8017fd2:	4492      	add	sl, r2
 8017fd4:	465a      	mov	r2, fp
 8017fd6:	bfa8      	it	ge
 8017fd8:	461a      	movge	r2, r3
 8017fda:	4552      	cmp	r2, sl
 8017fdc:	bfa8      	it	ge
 8017fde:	4652      	movge	r2, sl
 8017fe0:	2a00      	cmp	r2, #0
 8017fe2:	bfc2      	ittt	gt
 8017fe4:	1a9b      	subgt	r3, r3, r2
 8017fe6:	ebaa 0a02 	subgt.w	sl, sl, r2
 8017fea:	ebab 0b02 	subgt.w	fp, fp, r2
 8017fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ff0:	2a00      	cmp	r2, #0
 8017ff2:	dd18      	ble.n	8018026 <_strtod_l+0x736>
 8017ff4:	4631      	mov	r1, r6
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ffa:	f001 fe79 	bl	8019cf0 <__pow5mult>
 8017ffe:	4606      	mov	r6, r0
 8018000:	2800      	cmp	r0, #0
 8018002:	f43f aeb1 	beq.w	8017d68 <_strtod_l+0x478>
 8018006:	4601      	mov	r1, r0
 8018008:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801800a:	4620      	mov	r0, r4
 801800c:	f001 fdc6 	bl	8019b9c <__multiply>
 8018010:	900e      	str	r0, [sp, #56]	; 0x38
 8018012:	2800      	cmp	r0, #0
 8018014:	f43f aea8 	beq.w	8017d68 <_strtod_l+0x478>
 8018018:	9912      	ldr	r1, [sp, #72]	; 0x48
 801801a:	4620      	mov	r0, r4
 801801c:	f001 fca6 	bl	801996c <_Bfree>
 8018020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018024:	9212      	str	r2, [sp, #72]	; 0x48
 8018026:	2b00      	cmp	r3, #0
 8018028:	f300 8093 	bgt.w	8018152 <_strtod_l+0x862>
 801802c:	9b07      	ldr	r3, [sp, #28]
 801802e:	2b00      	cmp	r3, #0
 8018030:	dd08      	ble.n	8018044 <_strtod_l+0x754>
 8018032:	4639      	mov	r1, r7
 8018034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018036:	4620      	mov	r0, r4
 8018038:	f001 fe5a 	bl	8019cf0 <__pow5mult>
 801803c:	4607      	mov	r7, r0
 801803e:	2800      	cmp	r0, #0
 8018040:	f43f ae92 	beq.w	8017d68 <_strtod_l+0x478>
 8018044:	f1ba 0f00 	cmp.w	sl, #0
 8018048:	dd08      	ble.n	801805c <_strtod_l+0x76c>
 801804a:	4639      	mov	r1, r7
 801804c:	4652      	mov	r2, sl
 801804e:	4620      	mov	r0, r4
 8018050:	f001 fea8 	bl	8019da4 <__lshift>
 8018054:	4607      	mov	r7, r0
 8018056:	2800      	cmp	r0, #0
 8018058:	f43f ae86 	beq.w	8017d68 <_strtod_l+0x478>
 801805c:	f1bb 0f00 	cmp.w	fp, #0
 8018060:	dd08      	ble.n	8018074 <_strtod_l+0x784>
 8018062:	4631      	mov	r1, r6
 8018064:	465a      	mov	r2, fp
 8018066:	4620      	mov	r0, r4
 8018068:	f001 fe9c 	bl	8019da4 <__lshift>
 801806c:	4606      	mov	r6, r0
 801806e:	2800      	cmp	r0, #0
 8018070:	f43f ae7a 	beq.w	8017d68 <_strtod_l+0x478>
 8018074:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018076:	463a      	mov	r2, r7
 8018078:	4620      	mov	r0, r4
 801807a:	f001 ff1f 	bl	8019ebc <__mdiff>
 801807e:	4605      	mov	r5, r0
 8018080:	2800      	cmp	r0, #0
 8018082:	f43f ae71 	beq.w	8017d68 <_strtod_l+0x478>
 8018086:	2300      	movs	r3, #0
 8018088:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801808c:	60c3      	str	r3, [r0, #12]
 801808e:	4631      	mov	r1, r6
 8018090:	f001 fef8 	bl	8019e84 <__mcmp>
 8018094:	2800      	cmp	r0, #0
 8018096:	da7d      	bge.n	8018194 <_strtod_l+0x8a4>
 8018098:	ea5a 0308 	orrs.w	r3, sl, r8
 801809c:	f040 80a3 	bne.w	80181e6 <_strtod_l+0x8f6>
 80180a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f040 809e 	bne.w	80181e6 <_strtod_l+0x8f6>
 80180aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80180ae:	0d1b      	lsrs	r3, r3, #20
 80180b0:	051b      	lsls	r3, r3, #20
 80180b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80180b6:	f240 8096 	bls.w	80181e6 <_strtod_l+0x8f6>
 80180ba:	696b      	ldr	r3, [r5, #20]
 80180bc:	b91b      	cbnz	r3, 80180c6 <_strtod_l+0x7d6>
 80180be:	692b      	ldr	r3, [r5, #16]
 80180c0:	2b01      	cmp	r3, #1
 80180c2:	f340 8090 	ble.w	80181e6 <_strtod_l+0x8f6>
 80180c6:	4629      	mov	r1, r5
 80180c8:	2201      	movs	r2, #1
 80180ca:	4620      	mov	r0, r4
 80180cc:	f001 fe6a 	bl	8019da4 <__lshift>
 80180d0:	4631      	mov	r1, r6
 80180d2:	4605      	mov	r5, r0
 80180d4:	f001 fed6 	bl	8019e84 <__mcmp>
 80180d8:	2800      	cmp	r0, #0
 80180da:	f340 8084 	ble.w	80181e6 <_strtod_l+0x8f6>
 80180de:	9904      	ldr	r1, [sp, #16]
 80180e0:	4a2b      	ldr	r2, [pc, #172]	; (8018190 <_strtod_l+0x8a0>)
 80180e2:	464b      	mov	r3, r9
 80180e4:	2900      	cmp	r1, #0
 80180e6:	f000 809d 	beq.w	8018224 <_strtod_l+0x934>
 80180ea:	ea02 0109 	and.w	r1, r2, r9
 80180ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80180f2:	f300 8097 	bgt.w	8018224 <_strtod_l+0x934>
 80180f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80180fa:	f77f aea5 	ble.w	8017e48 <_strtod_l+0x558>
 80180fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018180 <_strtod_l+0x890>
 8018102:	ec49 8b16 	vmov	d6, r8, r9
 8018106:	ee26 7b07 	vmul.f64	d7, d6, d7
 801810a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801810e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018112:	4313      	orrs	r3, r2
 8018114:	bf08      	it	eq
 8018116:	2322      	moveq	r3, #34	; 0x22
 8018118:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801811c:	bf08      	it	eq
 801811e:	6023      	streq	r3, [r4, #0]
 8018120:	e62c      	b.n	8017d7c <_strtod_l+0x48c>
 8018122:	f04f 31ff 	mov.w	r1, #4294967295
 8018126:	fa01 f202 	lsl.w	r2, r1, r2
 801812a:	ea02 0808 	and.w	r8, r2, r8
 801812e:	e6d9      	b.n	8017ee4 <_strtod_l+0x5f4>
 8018130:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8018134:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8018138:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801813c:	33e2      	adds	r3, #226	; 0xe2
 801813e:	fa00 f303 	lsl.w	r3, r0, r3
 8018142:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8018146:	e73f      	b.n	8017fc8 <_strtod_l+0x6d8>
 8018148:	2200      	movs	r2, #0
 801814a:	2301      	movs	r3, #1
 801814c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018150:	e73a      	b.n	8017fc8 <_strtod_l+0x6d8>
 8018152:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018154:	461a      	mov	r2, r3
 8018156:	4620      	mov	r0, r4
 8018158:	f001 fe24 	bl	8019da4 <__lshift>
 801815c:	9012      	str	r0, [sp, #72]	; 0x48
 801815e:	2800      	cmp	r0, #0
 8018160:	f47f af64 	bne.w	801802c <_strtod_l+0x73c>
 8018164:	e600      	b.n	8017d68 <_strtod_l+0x478>
 8018166:	bf00      	nop
 8018168:	94a03595 	.word	0x94a03595
 801816c:	3fcfffff 	.word	0x3fcfffff
 8018170:	94a03595 	.word	0x94a03595
 8018174:	3fdfffff 	.word	0x3fdfffff
 8018178:	35afe535 	.word	0x35afe535
 801817c:	3fe00000 	.word	0x3fe00000
 8018180:	00000000 	.word	0x00000000
 8018184:	39500000 	.word	0x39500000
 8018188:	0801b820 	.word	0x0801b820
 801818c:	fffffc02 	.word	0xfffffc02
 8018190:	7ff00000 	.word	0x7ff00000
 8018194:	46cb      	mov	fp, r9
 8018196:	d15f      	bne.n	8018258 <_strtod_l+0x968>
 8018198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801819c:	f1ba 0f00 	cmp.w	sl, #0
 80181a0:	d02a      	beq.n	80181f8 <_strtod_l+0x908>
 80181a2:	4aa7      	ldr	r2, [pc, #668]	; (8018440 <_strtod_l+0xb50>)
 80181a4:	4293      	cmp	r3, r2
 80181a6:	d12b      	bne.n	8018200 <_strtod_l+0x910>
 80181a8:	9b04      	ldr	r3, [sp, #16]
 80181aa:	4642      	mov	r2, r8
 80181ac:	b1fb      	cbz	r3, 80181ee <_strtod_l+0x8fe>
 80181ae:	4ba5      	ldr	r3, [pc, #660]	; (8018444 <_strtod_l+0xb54>)
 80181b0:	ea09 0303 	and.w	r3, r9, r3
 80181b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80181b8:	f04f 31ff 	mov.w	r1, #4294967295
 80181bc:	d81a      	bhi.n	80181f4 <_strtod_l+0x904>
 80181be:	0d1b      	lsrs	r3, r3, #20
 80181c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80181c4:	fa01 f303 	lsl.w	r3, r1, r3
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d119      	bne.n	8018200 <_strtod_l+0x910>
 80181cc:	4b9e      	ldr	r3, [pc, #632]	; (8018448 <_strtod_l+0xb58>)
 80181ce:	459b      	cmp	fp, r3
 80181d0:	d102      	bne.n	80181d8 <_strtod_l+0x8e8>
 80181d2:	3201      	adds	r2, #1
 80181d4:	f43f adc8 	beq.w	8017d68 <_strtod_l+0x478>
 80181d8:	4b9a      	ldr	r3, [pc, #616]	; (8018444 <_strtod_l+0xb54>)
 80181da:	ea0b 0303 	and.w	r3, fp, r3
 80181de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80181e2:	f04f 0800 	mov.w	r8, #0
 80181e6:	9b04      	ldr	r3, [sp, #16]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d188      	bne.n	80180fe <_strtod_l+0x80e>
 80181ec:	e5c6      	b.n	8017d7c <_strtod_l+0x48c>
 80181ee:	f04f 33ff 	mov.w	r3, #4294967295
 80181f2:	e7e9      	b.n	80181c8 <_strtod_l+0x8d8>
 80181f4:	460b      	mov	r3, r1
 80181f6:	e7e7      	b.n	80181c8 <_strtod_l+0x8d8>
 80181f8:	ea53 0308 	orrs.w	r3, r3, r8
 80181fc:	f43f af6f 	beq.w	80180de <_strtod_l+0x7ee>
 8018200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018202:	b1cb      	cbz	r3, 8018238 <_strtod_l+0x948>
 8018204:	ea13 0f0b 	tst.w	r3, fp
 8018208:	d0ed      	beq.n	80181e6 <_strtod_l+0x8f6>
 801820a:	9a04      	ldr	r2, [sp, #16]
 801820c:	4640      	mov	r0, r8
 801820e:	4649      	mov	r1, r9
 8018210:	f1ba 0f00 	cmp.w	sl, #0
 8018214:	d014      	beq.n	8018240 <_strtod_l+0x950>
 8018216:	f7ff fb50 	bl	80178ba <sulp>
 801821a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801821e:	ec59 8b17 	vmov	r8, r9, d7
 8018222:	e7e0      	b.n	80181e6 <_strtod_l+0x8f6>
 8018224:	4013      	ands	r3, r2
 8018226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801822a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801822e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018232:	f04f 38ff 	mov.w	r8, #4294967295
 8018236:	e7d6      	b.n	80181e6 <_strtod_l+0x8f6>
 8018238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801823a:	ea13 0f08 	tst.w	r3, r8
 801823e:	e7e3      	b.n	8018208 <_strtod_l+0x918>
 8018240:	f7ff fb3b 	bl	80178ba <sulp>
 8018244:	ee38 0b40 	vsub.f64	d0, d8, d0
 8018248:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801824c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018250:	ec59 8b10 	vmov	r8, r9, d0
 8018254:	d1c7      	bne.n	80181e6 <_strtod_l+0x8f6>
 8018256:	e5f7      	b.n	8017e48 <_strtod_l+0x558>
 8018258:	4631      	mov	r1, r6
 801825a:	4628      	mov	r0, r5
 801825c:	f001 ff90 	bl	801a180 <__ratio>
 8018260:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8018264:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801826c:	d865      	bhi.n	801833a <_strtod_l+0xa4a>
 801826e:	f1ba 0f00 	cmp.w	sl, #0
 8018272:	d042      	beq.n	80182fa <_strtod_l+0xa0a>
 8018274:	4b75      	ldr	r3, [pc, #468]	; (801844c <_strtod_l+0xb5c>)
 8018276:	2200      	movs	r2, #0
 8018278:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801827c:	4871      	ldr	r0, [pc, #452]	; (8018444 <_strtod_l+0xb54>)
 801827e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8018458 <_strtod_l+0xb68>
 8018282:	ea0b 0100 	and.w	r1, fp, r0
 8018286:	4561      	cmp	r1, ip
 8018288:	f040 808e 	bne.w	80183a8 <_strtod_l+0xab8>
 801828c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018290:	ec49 8b10 	vmov	d0, r8, r9
 8018294:	ec43 2b1c 	vmov	d12, r2, r3
 8018298:	910a      	str	r1, [sp, #40]	; 0x28
 801829a:	f001 fe99 	bl	8019fd0 <__ulp>
 801829e:	ec49 8b1e 	vmov	d14, r8, r9
 80182a2:	4868      	ldr	r0, [pc, #416]	; (8018444 <_strtod_l+0xb54>)
 80182a4:	eeac eb00 	vfma.f64	d14, d12, d0
 80182a8:	ee1e 3a90 	vmov	r3, s29
 80182ac:	4a68      	ldr	r2, [pc, #416]	; (8018450 <_strtod_l+0xb60>)
 80182ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80182b0:	4018      	ands	r0, r3
 80182b2:	4290      	cmp	r0, r2
 80182b4:	ec59 8b1e 	vmov	r8, r9, d14
 80182b8:	d94e      	bls.n	8018358 <_strtod_l+0xa68>
 80182ba:	ee18 3a90 	vmov	r3, s17
 80182be:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80182c2:	4293      	cmp	r3, r2
 80182c4:	d104      	bne.n	80182d0 <_strtod_l+0x9e0>
 80182c6:	ee18 3a10 	vmov	r3, s16
 80182ca:	3301      	adds	r3, #1
 80182cc:	f43f ad4c 	beq.w	8017d68 <_strtod_l+0x478>
 80182d0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8018448 <_strtod_l+0xb58>
 80182d4:	f04f 38ff 	mov.w	r8, #4294967295
 80182d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80182da:	4620      	mov	r0, r4
 80182dc:	f001 fb46 	bl	801996c <_Bfree>
 80182e0:	4639      	mov	r1, r7
 80182e2:	4620      	mov	r0, r4
 80182e4:	f001 fb42 	bl	801996c <_Bfree>
 80182e8:	4631      	mov	r1, r6
 80182ea:	4620      	mov	r0, r4
 80182ec:	f001 fb3e 	bl	801996c <_Bfree>
 80182f0:	4629      	mov	r1, r5
 80182f2:	4620      	mov	r0, r4
 80182f4:	f001 fb3a 	bl	801996c <_Bfree>
 80182f8:	e619      	b.n	8017f2e <_strtod_l+0x63e>
 80182fa:	f1b8 0f00 	cmp.w	r8, #0
 80182fe:	d112      	bne.n	8018326 <_strtod_l+0xa36>
 8018300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018304:	b9b3      	cbnz	r3, 8018334 <_strtod_l+0xa44>
 8018306:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801830a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801830e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018312:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8018316:	bf58      	it	pl
 8018318:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801831c:	eeb1 7b4d 	vneg.f64	d7, d13
 8018320:	ec53 2b17 	vmov	r2, r3, d7
 8018324:	e7aa      	b.n	801827c <_strtod_l+0x98c>
 8018326:	f1b8 0f01 	cmp.w	r8, #1
 801832a:	d103      	bne.n	8018334 <_strtod_l+0xa44>
 801832c:	f1b9 0f00 	cmp.w	r9, #0
 8018330:	f43f ad8a 	beq.w	8017e48 <_strtod_l+0x558>
 8018334:	4b47      	ldr	r3, [pc, #284]	; (8018454 <_strtod_l+0xb64>)
 8018336:	2200      	movs	r2, #0
 8018338:	e79e      	b.n	8018278 <_strtod_l+0x988>
 801833a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801833e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8018342:	f1ba 0f00 	cmp.w	sl, #0
 8018346:	d104      	bne.n	8018352 <_strtod_l+0xa62>
 8018348:	eeb1 7b4d 	vneg.f64	d7, d13
 801834c:	ec53 2b17 	vmov	r2, r3, d7
 8018350:	e794      	b.n	801827c <_strtod_l+0x98c>
 8018352:	eeb0 7b4d 	vmov.f64	d7, d13
 8018356:	e7f9      	b.n	801834c <_strtod_l+0xa5c>
 8018358:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801835c:	9b04      	ldr	r3, [sp, #16]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d1ba      	bne.n	80182d8 <_strtod_l+0x9e8>
 8018362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018366:	0d1b      	lsrs	r3, r3, #20
 8018368:	051b      	lsls	r3, r3, #20
 801836a:	4299      	cmp	r1, r3
 801836c:	d1b4      	bne.n	80182d8 <_strtod_l+0x9e8>
 801836e:	ec51 0b1d 	vmov	r0, r1, d13
 8018372:	f7e8 f9f9 	bl	8000768 <__aeabi_d2lz>
 8018376:	f7e8 f9b1 	bl	80006dc <__aeabi_l2d>
 801837a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801837e:	ec41 0b17 	vmov	d7, r0, r1
 8018382:	ea43 0308 	orr.w	r3, r3, r8
 8018386:	ea53 030a 	orrs.w	r3, r3, sl
 801838a:	ee3d db47 	vsub.f64	d13, d13, d7
 801838e:	d03c      	beq.n	801840a <_strtod_l+0xb1a>
 8018390:	eeb4 dbca 	vcmpe.f64	d13, d10
 8018394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018398:	f53f acf0 	bmi.w	8017d7c <_strtod_l+0x48c>
 801839c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80183a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a4:	dd98      	ble.n	80182d8 <_strtod_l+0x9e8>
 80183a6:	e4e9      	b.n	8017d7c <_strtod_l+0x48c>
 80183a8:	9804      	ldr	r0, [sp, #16]
 80183aa:	b1f0      	cbz	r0, 80183ea <_strtod_l+0xafa>
 80183ac:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80183b0:	d81b      	bhi.n	80183ea <_strtod_l+0xafa>
 80183b2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8018438 <_strtod_l+0xb48>
 80183b6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80183ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183be:	d811      	bhi.n	80183e4 <_strtod_l+0xaf4>
 80183c0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80183c4:	ee1d 3a10 	vmov	r3, s26
 80183c8:	2b01      	cmp	r3, #1
 80183ca:	bf38      	it	cc
 80183cc:	2301      	movcc	r3, #1
 80183ce:	ee0d 3a10 	vmov	s26, r3
 80183d2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80183d6:	f1ba 0f00 	cmp.w	sl, #0
 80183da:	d113      	bne.n	8018404 <_strtod_l+0xb14>
 80183dc:	eeb1 7b4d 	vneg.f64	d7, d13
 80183e0:	ec53 2b17 	vmov	r2, r3, d7
 80183e4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80183e8:	1a43      	subs	r3, r0, r1
 80183ea:	eeb0 0b48 	vmov.f64	d0, d8
 80183ee:	ec43 2b1c 	vmov	d12, r2, r3
 80183f2:	910a      	str	r1, [sp, #40]	; 0x28
 80183f4:	f001 fdec 	bl	8019fd0 <__ulp>
 80183f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80183fa:	eeac 8b00 	vfma.f64	d8, d12, d0
 80183fe:	ec59 8b18 	vmov	r8, r9, d8
 8018402:	e7ab      	b.n	801835c <_strtod_l+0xa6c>
 8018404:	eeb0 7b4d 	vmov.f64	d7, d13
 8018408:	e7ea      	b.n	80183e0 <_strtod_l+0xaf0>
 801840a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801840e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018412:	f57f af61 	bpl.w	80182d8 <_strtod_l+0x9e8>
 8018416:	e4b1      	b.n	8017d7c <_strtod_l+0x48c>
 8018418:	2300      	movs	r3, #0
 801841a:	9308      	str	r3, [sp, #32]
 801841c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801841e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018420:	6013      	str	r3, [r2, #0]
 8018422:	f7ff baad 	b.w	8017980 <_strtod_l+0x90>
 8018426:	2a65      	cmp	r2, #101	; 0x65
 8018428:	f43f ab9f 	beq.w	8017b6a <_strtod_l+0x27a>
 801842c:	2a45      	cmp	r2, #69	; 0x45
 801842e:	f43f ab9c 	beq.w	8017b6a <_strtod_l+0x27a>
 8018432:	2101      	movs	r1, #1
 8018434:	f7ff bbd4 	b.w	8017be0 <_strtod_l+0x2f0>
 8018438:	ffc00000 	.word	0xffc00000
 801843c:	41dfffff 	.word	0x41dfffff
 8018440:	000fffff 	.word	0x000fffff
 8018444:	7ff00000 	.word	0x7ff00000
 8018448:	7fefffff 	.word	0x7fefffff
 801844c:	3ff00000 	.word	0x3ff00000
 8018450:	7c9fffff 	.word	0x7c9fffff
 8018454:	bff00000 	.word	0xbff00000
 8018458:	7fe00000 	.word	0x7fe00000

0801845c <_strtod_r>:
 801845c:	4b01      	ldr	r3, [pc, #4]	; (8018464 <_strtod_r+0x8>)
 801845e:	f7ff ba47 	b.w	80178f0 <_strtod_l>
 8018462:	bf00      	nop
 8018464:	24000190 	.word	0x24000190

08018468 <_strtol_l.constprop.0>:
 8018468:	2b01      	cmp	r3, #1
 801846a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801846e:	d001      	beq.n	8018474 <_strtol_l.constprop.0+0xc>
 8018470:	2b24      	cmp	r3, #36	; 0x24
 8018472:	d906      	bls.n	8018482 <_strtol_l.constprop.0+0x1a>
 8018474:	f7fe fb30 	bl	8016ad8 <__errno>
 8018478:	2316      	movs	r3, #22
 801847a:	6003      	str	r3, [r0, #0]
 801847c:	2000      	movs	r0, #0
 801847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018482:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018568 <_strtol_l.constprop.0+0x100>
 8018486:	460d      	mov	r5, r1
 8018488:	462e      	mov	r6, r5
 801848a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801848e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8018492:	f017 0708 	ands.w	r7, r7, #8
 8018496:	d1f7      	bne.n	8018488 <_strtol_l.constprop.0+0x20>
 8018498:	2c2d      	cmp	r4, #45	; 0x2d
 801849a:	d132      	bne.n	8018502 <_strtol_l.constprop.0+0x9a>
 801849c:	782c      	ldrb	r4, [r5, #0]
 801849e:	2701      	movs	r7, #1
 80184a0:	1cb5      	adds	r5, r6, #2
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d05b      	beq.n	801855e <_strtol_l.constprop.0+0xf6>
 80184a6:	2b10      	cmp	r3, #16
 80184a8:	d109      	bne.n	80184be <_strtol_l.constprop.0+0x56>
 80184aa:	2c30      	cmp	r4, #48	; 0x30
 80184ac:	d107      	bne.n	80184be <_strtol_l.constprop.0+0x56>
 80184ae:	782c      	ldrb	r4, [r5, #0]
 80184b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80184b4:	2c58      	cmp	r4, #88	; 0x58
 80184b6:	d14d      	bne.n	8018554 <_strtol_l.constprop.0+0xec>
 80184b8:	786c      	ldrb	r4, [r5, #1]
 80184ba:	2310      	movs	r3, #16
 80184bc:	3502      	adds	r5, #2
 80184be:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80184c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80184c6:	f04f 0c00 	mov.w	ip, #0
 80184ca:	fbb8 f9f3 	udiv	r9, r8, r3
 80184ce:	4666      	mov	r6, ip
 80184d0:	fb03 8a19 	mls	sl, r3, r9, r8
 80184d4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80184d8:	f1be 0f09 	cmp.w	lr, #9
 80184dc:	d816      	bhi.n	801850c <_strtol_l.constprop.0+0xa4>
 80184de:	4674      	mov	r4, lr
 80184e0:	42a3      	cmp	r3, r4
 80184e2:	dd24      	ble.n	801852e <_strtol_l.constprop.0+0xc6>
 80184e4:	f1bc 0f00 	cmp.w	ip, #0
 80184e8:	db1e      	blt.n	8018528 <_strtol_l.constprop.0+0xc0>
 80184ea:	45b1      	cmp	r9, r6
 80184ec:	d31c      	bcc.n	8018528 <_strtol_l.constprop.0+0xc0>
 80184ee:	d101      	bne.n	80184f4 <_strtol_l.constprop.0+0x8c>
 80184f0:	45a2      	cmp	sl, r4
 80184f2:	db19      	blt.n	8018528 <_strtol_l.constprop.0+0xc0>
 80184f4:	fb06 4603 	mla	r6, r6, r3, r4
 80184f8:	f04f 0c01 	mov.w	ip, #1
 80184fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018500:	e7e8      	b.n	80184d4 <_strtol_l.constprop.0+0x6c>
 8018502:	2c2b      	cmp	r4, #43	; 0x2b
 8018504:	bf04      	itt	eq
 8018506:	782c      	ldrbeq	r4, [r5, #0]
 8018508:	1cb5      	addeq	r5, r6, #2
 801850a:	e7ca      	b.n	80184a2 <_strtol_l.constprop.0+0x3a>
 801850c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8018510:	f1be 0f19 	cmp.w	lr, #25
 8018514:	d801      	bhi.n	801851a <_strtol_l.constprop.0+0xb2>
 8018516:	3c37      	subs	r4, #55	; 0x37
 8018518:	e7e2      	b.n	80184e0 <_strtol_l.constprop.0+0x78>
 801851a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801851e:	f1be 0f19 	cmp.w	lr, #25
 8018522:	d804      	bhi.n	801852e <_strtol_l.constprop.0+0xc6>
 8018524:	3c57      	subs	r4, #87	; 0x57
 8018526:	e7db      	b.n	80184e0 <_strtol_l.constprop.0+0x78>
 8018528:	f04f 3cff 	mov.w	ip, #4294967295
 801852c:	e7e6      	b.n	80184fc <_strtol_l.constprop.0+0x94>
 801852e:	f1bc 0f00 	cmp.w	ip, #0
 8018532:	da05      	bge.n	8018540 <_strtol_l.constprop.0+0xd8>
 8018534:	2322      	movs	r3, #34	; 0x22
 8018536:	6003      	str	r3, [r0, #0]
 8018538:	4646      	mov	r6, r8
 801853a:	b942      	cbnz	r2, 801854e <_strtol_l.constprop.0+0xe6>
 801853c:	4630      	mov	r0, r6
 801853e:	e79e      	b.n	801847e <_strtol_l.constprop.0+0x16>
 8018540:	b107      	cbz	r7, 8018544 <_strtol_l.constprop.0+0xdc>
 8018542:	4276      	negs	r6, r6
 8018544:	2a00      	cmp	r2, #0
 8018546:	d0f9      	beq.n	801853c <_strtol_l.constprop.0+0xd4>
 8018548:	f1bc 0f00 	cmp.w	ip, #0
 801854c:	d000      	beq.n	8018550 <_strtol_l.constprop.0+0xe8>
 801854e:	1e69      	subs	r1, r5, #1
 8018550:	6011      	str	r1, [r2, #0]
 8018552:	e7f3      	b.n	801853c <_strtol_l.constprop.0+0xd4>
 8018554:	2430      	movs	r4, #48	; 0x30
 8018556:	2b00      	cmp	r3, #0
 8018558:	d1b1      	bne.n	80184be <_strtol_l.constprop.0+0x56>
 801855a:	2308      	movs	r3, #8
 801855c:	e7af      	b.n	80184be <_strtol_l.constprop.0+0x56>
 801855e:	2c30      	cmp	r4, #48	; 0x30
 8018560:	d0a5      	beq.n	80184ae <_strtol_l.constprop.0+0x46>
 8018562:	230a      	movs	r3, #10
 8018564:	e7ab      	b.n	80184be <_strtol_l.constprop.0+0x56>
 8018566:	bf00      	nop
 8018568:	0801b849 	.word	0x0801b849

0801856c <_strtol_r>:
 801856c:	f7ff bf7c 	b.w	8018468 <_strtol_l.constprop.0>

08018570 <_write_r>:
 8018570:	b538      	push	{r3, r4, r5, lr}
 8018572:	4d07      	ldr	r5, [pc, #28]	; (8018590 <_write_r+0x20>)
 8018574:	4604      	mov	r4, r0
 8018576:	4608      	mov	r0, r1
 8018578:	4611      	mov	r1, r2
 801857a:	2200      	movs	r2, #0
 801857c:	602a      	str	r2, [r5, #0]
 801857e:	461a      	mov	r2, r3
 8018580:	f7eb f8af 	bl	80036e2 <_write>
 8018584:	1c43      	adds	r3, r0, #1
 8018586:	d102      	bne.n	801858e <_write_r+0x1e>
 8018588:	682b      	ldr	r3, [r5, #0]
 801858a:	b103      	cbz	r3, 801858e <_write_r+0x1e>
 801858c:	6023      	str	r3, [r4, #0]
 801858e:	bd38      	pop	{r3, r4, r5, pc}
 8018590:	24002948 	.word	0x24002948

08018594 <_close_r>:
 8018594:	b538      	push	{r3, r4, r5, lr}
 8018596:	4d06      	ldr	r5, [pc, #24]	; (80185b0 <_close_r+0x1c>)
 8018598:	2300      	movs	r3, #0
 801859a:	4604      	mov	r4, r0
 801859c:	4608      	mov	r0, r1
 801859e:	602b      	str	r3, [r5, #0]
 80185a0:	f7eb f8bb 	bl	800371a <_close>
 80185a4:	1c43      	adds	r3, r0, #1
 80185a6:	d102      	bne.n	80185ae <_close_r+0x1a>
 80185a8:	682b      	ldr	r3, [r5, #0]
 80185aa:	b103      	cbz	r3, 80185ae <_close_r+0x1a>
 80185ac:	6023      	str	r3, [r4, #0]
 80185ae:	bd38      	pop	{r3, r4, r5, pc}
 80185b0:	24002948 	.word	0x24002948

080185b4 <quorem>:
 80185b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185b8:	6903      	ldr	r3, [r0, #16]
 80185ba:	690c      	ldr	r4, [r1, #16]
 80185bc:	42a3      	cmp	r3, r4
 80185be:	4607      	mov	r7, r0
 80185c0:	f2c0 8081 	blt.w	80186c6 <quorem+0x112>
 80185c4:	3c01      	subs	r4, #1
 80185c6:	f101 0814 	add.w	r8, r1, #20
 80185ca:	f100 0514 	add.w	r5, r0, #20
 80185ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80185d2:	9301      	str	r3, [sp, #4]
 80185d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80185d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185dc:	3301      	adds	r3, #1
 80185de:	429a      	cmp	r2, r3
 80185e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80185e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80185e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80185ec:	d331      	bcc.n	8018652 <quorem+0x9e>
 80185ee:	f04f 0e00 	mov.w	lr, #0
 80185f2:	4640      	mov	r0, r8
 80185f4:	46ac      	mov	ip, r5
 80185f6:	46f2      	mov	sl, lr
 80185f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80185fc:	b293      	uxth	r3, r2
 80185fe:	fb06 e303 	mla	r3, r6, r3, lr
 8018602:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018606:	b29b      	uxth	r3, r3
 8018608:	ebaa 0303 	sub.w	r3, sl, r3
 801860c:	f8dc a000 	ldr.w	sl, [ip]
 8018610:	0c12      	lsrs	r2, r2, #16
 8018612:	fa13 f38a 	uxtah	r3, r3, sl
 8018616:	fb06 e202 	mla	r2, r6, r2, lr
 801861a:	9300      	str	r3, [sp, #0]
 801861c:	9b00      	ldr	r3, [sp, #0]
 801861e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018622:	b292      	uxth	r2, r2
 8018624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801862c:	f8bd 3000 	ldrh.w	r3, [sp]
 8018630:	4581      	cmp	r9, r0
 8018632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018636:	f84c 3b04 	str.w	r3, [ip], #4
 801863a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801863e:	d2db      	bcs.n	80185f8 <quorem+0x44>
 8018640:	f855 300b 	ldr.w	r3, [r5, fp]
 8018644:	b92b      	cbnz	r3, 8018652 <quorem+0x9e>
 8018646:	9b01      	ldr	r3, [sp, #4]
 8018648:	3b04      	subs	r3, #4
 801864a:	429d      	cmp	r5, r3
 801864c:	461a      	mov	r2, r3
 801864e:	d32e      	bcc.n	80186ae <quorem+0xfa>
 8018650:	613c      	str	r4, [r7, #16]
 8018652:	4638      	mov	r0, r7
 8018654:	f001 fc16 	bl	8019e84 <__mcmp>
 8018658:	2800      	cmp	r0, #0
 801865a:	db24      	blt.n	80186a6 <quorem+0xf2>
 801865c:	3601      	adds	r6, #1
 801865e:	4628      	mov	r0, r5
 8018660:	f04f 0c00 	mov.w	ip, #0
 8018664:	f858 2b04 	ldr.w	r2, [r8], #4
 8018668:	f8d0 e000 	ldr.w	lr, [r0]
 801866c:	b293      	uxth	r3, r2
 801866e:	ebac 0303 	sub.w	r3, ip, r3
 8018672:	0c12      	lsrs	r2, r2, #16
 8018674:	fa13 f38e 	uxtah	r3, r3, lr
 8018678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801867c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018680:	b29b      	uxth	r3, r3
 8018682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018686:	45c1      	cmp	r9, r8
 8018688:	f840 3b04 	str.w	r3, [r0], #4
 801868c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018690:	d2e8      	bcs.n	8018664 <quorem+0xb0>
 8018692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801869a:	b922      	cbnz	r2, 80186a6 <quorem+0xf2>
 801869c:	3b04      	subs	r3, #4
 801869e:	429d      	cmp	r5, r3
 80186a0:	461a      	mov	r2, r3
 80186a2:	d30a      	bcc.n	80186ba <quorem+0x106>
 80186a4:	613c      	str	r4, [r7, #16]
 80186a6:	4630      	mov	r0, r6
 80186a8:	b003      	add	sp, #12
 80186aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ae:	6812      	ldr	r2, [r2, #0]
 80186b0:	3b04      	subs	r3, #4
 80186b2:	2a00      	cmp	r2, #0
 80186b4:	d1cc      	bne.n	8018650 <quorem+0x9c>
 80186b6:	3c01      	subs	r4, #1
 80186b8:	e7c7      	b.n	801864a <quorem+0x96>
 80186ba:	6812      	ldr	r2, [r2, #0]
 80186bc:	3b04      	subs	r3, #4
 80186be:	2a00      	cmp	r2, #0
 80186c0:	d1f0      	bne.n	80186a4 <quorem+0xf0>
 80186c2:	3c01      	subs	r4, #1
 80186c4:	e7eb      	b.n	801869e <quorem+0xea>
 80186c6:	2000      	movs	r0, #0
 80186c8:	e7ee      	b.n	80186a8 <quorem+0xf4>
 80186ca:	0000      	movs	r0, r0
 80186cc:	0000      	movs	r0, r0
	...

080186d0 <_dtoa_r>:
 80186d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d4:	ed2d 8b02 	vpush	{d8}
 80186d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80186da:	b091      	sub	sp, #68	; 0x44
 80186dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80186e0:	ec59 8b10 	vmov	r8, r9, d0
 80186e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80186e6:	9106      	str	r1, [sp, #24]
 80186e8:	4606      	mov	r6, r0
 80186ea:	9208      	str	r2, [sp, #32]
 80186ec:	930c      	str	r3, [sp, #48]	; 0x30
 80186ee:	b975      	cbnz	r5, 801870e <_dtoa_r+0x3e>
 80186f0:	2010      	movs	r0, #16
 80186f2:	f001 f8e1 	bl	80198b8 <malloc>
 80186f6:	4602      	mov	r2, r0
 80186f8:	6270      	str	r0, [r6, #36]	; 0x24
 80186fa:	b920      	cbnz	r0, 8018706 <_dtoa_r+0x36>
 80186fc:	4baa      	ldr	r3, [pc, #680]	; (80189a8 <_dtoa_r+0x2d8>)
 80186fe:	21ea      	movs	r1, #234	; 0xea
 8018700:	48aa      	ldr	r0, [pc, #680]	; (80189ac <_dtoa_r+0x2dc>)
 8018702:	f002 f84f 	bl	801a7a4 <__assert_func>
 8018706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801870a:	6005      	str	r5, [r0, #0]
 801870c:	60c5      	str	r5, [r0, #12]
 801870e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018710:	6819      	ldr	r1, [r3, #0]
 8018712:	b151      	cbz	r1, 801872a <_dtoa_r+0x5a>
 8018714:	685a      	ldr	r2, [r3, #4]
 8018716:	604a      	str	r2, [r1, #4]
 8018718:	2301      	movs	r3, #1
 801871a:	4093      	lsls	r3, r2
 801871c:	608b      	str	r3, [r1, #8]
 801871e:	4630      	mov	r0, r6
 8018720:	f001 f924 	bl	801996c <_Bfree>
 8018724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018726:	2200      	movs	r2, #0
 8018728:	601a      	str	r2, [r3, #0]
 801872a:	f1b9 0300 	subs.w	r3, r9, #0
 801872e:	bfbb      	ittet	lt
 8018730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018734:	9303      	strlt	r3, [sp, #12]
 8018736:	2300      	movge	r3, #0
 8018738:	2201      	movlt	r2, #1
 801873a:	bfac      	ite	ge
 801873c:	6023      	strge	r3, [r4, #0]
 801873e:	6022      	strlt	r2, [r4, #0]
 8018740:	4b9b      	ldr	r3, [pc, #620]	; (80189b0 <_dtoa_r+0x2e0>)
 8018742:	9c03      	ldr	r4, [sp, #12]
 8018744:	43a3      	bics	r3, r4
 8018746:	d11c      	bne.n	8018782 <_dtoa_r+0xb2>
 8018748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801874a:	f242 730f 	movw	r3, #9999	; 0x270f
 801874e:	6013      	str	r3, [r2, #0]
 8018750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018754:	ea53 0308 	orrs.w	r3, r3, r8
 8018758:	f000 84fd 	beq.w	8019156 <_dtoa_r+0xa86>
 801875c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801875e:	b963      	cbnz	r3, 801877a <_dtoa_r+0xaa>
 8018760:	4b94      	ldr	r3, [pc, #592]	; (80189b4 <_dtoa_r+0x2e4>)
 8018762:	e01f      	b.n	80187a4 <_dtoa_r+0xd4>
 8018764:	4b94      	ldr	r3, [pc, #592]	; (80189b8 <_dtoa_r+0x2e8>)
 8018766:	9301      	str	r3, [sp, #4]
 8018768:	3308      	adds	r3, #8
 801876a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801876c:	6013      	str	r3, [r2, #0]
 801876e:	9801      	ldr	r0, [sp, #4]
 8018770:	b011      	add	sp, #68	; 0x44
 8018772:	ecbd 8b02 	vpop	{d8}
 8018776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801877a:	4b8e      	ldr	r3, [pc, #568]	; (80189b4 <_dtoa_r+0x2e4>)
 801877c:	9301      	str	r3, [sp, #4]
 801877e:	3303      	adds	r3, #3
 8018780:	e7f3      	b.n	801876a <_dtoa_r+0x9a>
 8018782:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878e:	d10b      	bne.n	80187a8 <_dtoa_r+0xd8>
 8018790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018792:	2301      	movs	r3, #1
 8018794:	6013      	str	r3, [r2, #0]
 8018796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018798:	2b00      	cmp	r3, #0
 801879a:	f000 84d9 	beq.w	8019150 <_dtoa_r+0xa80>
 801879e:	4887      	ldr	r0, [pc, #540]	; (80189bc <_dtoa_r+0x2ec>)
 80187a0:	6018      	str	r0, [r3, #0]
 80187a2:	1e43      	subs	r3, r0, #1
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	e7e2      	b.n	801876e <_dtoa_r+0x9e>
 80187a8:	a90f      	add	r1, sp, #60	; 0x3c
 80187aa:	aa0e      	add	r2, sp, #56	; 0x38
 80187ac:	4630      	mov	r0, r6
 80187ae:	eeb0 0b48 	vmov.f64	d0, d8
 80187b2:	f001 fc89 	bl	801a0c8 <__d2b>
 80187b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80187ba:	4605      	mov	r5, r0
 80187bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80187be:	2900      	cmp	r1, #0
 80187c0:	d046      	beq.n	8018850 <_dtoa_r+0x180>
 80187c2:	ee18 4a90 	vmov	r4, s17
 80187c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80187ca:	ec53 2b18 	vmov	r2, r3, d8
 80187ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80187d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80187d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80187da:	2400      	movs	r4, #0
 80187dc:	ec43 2b16 	vmov	d6, r2, r3
 80187e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80187e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8018990 <_dtoa_r+0x2c0>
 80187e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80187ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8018998 <_dtoa_r+0x2c8>
 80187f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80187f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80189a0 <_dtoa_r+0x2d0>
 80187f8:	ee07 1a90 	vmov	s15, r1
 80187fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018800:	eeb0 7b46 	vmov.f64	d7, d6
 8018804:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018808:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801880c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018814:	ee16 ba90 	vmov	fp, s13
 8018818:	940a      	str	r4, [sp, #40]	; 0x28
 801881a:	d508      	bpl.n	801882e <_dtoa_r+0x15e>
 801881c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018820:	eeb4 6b47 	vcmp.f64	d6, d7
 8018824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018828:	bf18      	it	ne
 801882a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801882e:	f1bb 0f16 	cmp.w	fp, #22
 8018832:	d82f      	bhi.n	8018894 <_dtoa_r+0x1c4>
 8018834:	4b62      	ldr	r3, [pc, #392]	; (80189c0 <_dtoa_r+0x2f0>)
 8018836:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801883a:	ed93 7b00 	vldr	d7, [r3]
 801883e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018846:	d501      	bpl.n	801884c <_dtoa_r+0x17c>
 8018848:	f10b 3bff 	add.w	fp, fp, #4294967295
 801884c:	2300      	movs	r3, #0
 801884e:	e022      	b.n	8018896 <_dtoa_r+0x1c6>
 8018850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8018852:	4401      	add	r1, r0
 8018854:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8018858:	2b20      	cmp	r3, #32
 801885a:	bfc1      	itttt	gt
 801885c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018860:	fa04 f303 	lslgt.w	r3, r4, r3
 8018864:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8018868:	fa28 f804 	lsrgt.w	r8, r8, r4
 801886c:	bfd6      	itet	le
 801886e:	f1c3 0320 	rsble	r3, r3, #32
 8018872:	ea43 0808 	orrgt.w	r8, r3, r8
 8018876:	fa08 f803 	lslle.w	r8, r8, r3
 801887a:	ee07 8a90 	vmov	s15, r8
 801887e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018882:	3901      	subs	r1, #1
 8018884:	ee17 4a90 	vmov	r4, s15
 8018888:	ec53 2b17 	vmov	r2, r3, d7
 801888c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8018890:	2401      	movs	r4, #1
 8018892:	e7a3      	b.n	80187dc <_dtoa_r+0x10c>
 8018894:	2301      	movs	r3, #1
 8018896:	930b      	str	r3, [sp, #44]	; 0x2c
 8018898:	1a43      	subs	r3, r0, r1
 801889a:	1e5a      	subs	r2, r3, #1
 801889c:	bf45      	ittet	mi
 801889e:	f1c3 0301 	rsbmi	r3, r3, #1
 80188a2:	9304      	strmi	r3, [sp, #16]
 80188a4:	2300      	movpl	r3, #0
 80188a6:	2300      	movmi	r3, #0
 80188a8:	9205      	str	r2, [sp, #20]
 80188aa:	bf54      	ite	pl
 80188ac:	9304      	strpl	r3, [sp, #16]
 80188ae:	9305      	strmi	r3, [sp, #20]
 80188b0:	f1bb 0f00 	cmp.w	fp, #0
 80188b4:	db18      	blt.n	80188e8 <_dtoa_r+0x218>
 80188b6:	9b05      	ldr	r3, [sp, #20]
 80188b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80188bc:	445b      	add	r3, fp
 80188be:	9305      	str	r3, [sp, #20]
 80188c0:	2300      	movs	r3, #0
 80188c2:	9a06      	ldr	r2, [sp, #24]
 80188c4:	2a09      	cmp	r2, #9
 80188c6:	d849      	bhi.n	801895c <_dtoa_r+0x28c>
 80188c8:	2a05      	cmp	r2, #5
 80188ca:	bfc4      	itt	gt
 80188cc:	3a04      	subgt	r2, #4
 80188ce:	9206      	strgt	r2, [sp, #24]
 80188d0:	9a06      	ldr	r2, [sp, #24]
 80188d2:	f1a2 0202 	sub.w	r2, r2, #2
 80188d6:	bfcc      	ite	gt
 80188d8:	2400      	movgt	r4, #0
 80188da:	2401      	movle	r4, #1
 80188dc:	2a03      	cmp	r2, #3
 80188de:	d848      	bhi.n	8018972 <_dtoa_r+0x2a2>
 80188e0:	e8df f002 	tbb	[pc, r2]
 80188e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80188e8:	9b04      	ldr	r3, [sp, #16]
 80188ea:	2200      	movs	r2, #0
 80188ec:	eba3 030b 	sub.w	r3, r3, fp
 80188f0:	9304      	str	r3, [sp, #16]
 80188f2:	9209      	str	r2, [sp, #36]	; 0x24
 80188f4:	f1cb 0300 	rsb	r3, fp, #0
 80188f8:	e7e3      	b.n	80188c2 <_dtoa_r+0x1f2>
 80188fa:	2200      	movs	r2, #0
 80188fc:	9207      	str	r2, [sp, #28]
 80188fe:	9a08      	ldr	r2, [sp, #32]
 8018900:	2a00      	cmp	r2, #0
 8018902:	dc39      	bgt.n	8018978 <_dtoa_r+0x2a8>
 8018904:	f04f 0a01 	mov.w	sl, #1
 8018908:	46d1      	mov	r9, sl
 801890a:	4652      	mov	r2, sl
 801890c:	f8cd a020 	str.w	sl, [sp, #32]
 8018910:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018912:	2100      	movs	r1, #0
 8018914:	6079      	str	r1, [r7, #4]
 8018916:	2004      	movs	r0, #4
 8018918:	f100 0c14 	add.w	ip, r0, #20
 801891c:	4594      	cmp	ip, r2
 801891e:	6879      	ldr	r1, [r7, #4]
 8018920:	d92f      	bls.n	8018982 <_dtoa_r+0x2b2>
 8018922:	4630      	mov	r0, r6
 8018924:	930d      	str	r3, [sp, #52]	; 0x34
 8018926:	f000 ffe1 	bl	80198ec <_Balloc>
 801892a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801892c:	9001      	str	r0, [sp, #4]
 801892e:	4602      	mov	r2, r0
 8018930:	2800      	cmp	r0, #0
 8018932:	d149      	bne.n	80189c8 <_dtoa_r+0x2f8>
 8018934:	4b23      	ldr	r3, [pc, #140]	; (80189c4 <_dtoa_r+0x2f4>)
 8018936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801893a:	e6e1      	b.n	8018700 <_dtoa_r+0x30>
 801893c:	2201      	movs	r2, #1
 801893e:	e7dd      	b.n	80188fc <_dtoa_r+0x22c>
 8018940:	2200      	movs	r2, #0
 8018942:	9207      	str	r2, [sp, #28]
 8018944:	9a08      	ldr	r2, [sp, #32]
 8018946:	eb0b 0a02 	add.w	sl, fp, r2
 801894a:	f10a 0901 	add.w	r9, sl, #1
 801894e:	464a      	mov	r2, r9
 8018950:	2a01      	cmp	r2, #1
 8018952:	bfb8      	it	lt
 8018954:	2201      	movlt	r2, #1
 8018956:	e7db      	b.n	8018910 <_dtoa_r+0x240>
 8018958:	2201      	movs	r2, #1
 801895a:	e7f2      	b.n	8018942 <_dtoa_r+0x272>
 801895c:	2401      	movs	r4, #1
 801895e:	2200      	movs	r2, #0
 8018960:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8018964:	f04f 3aff 	mov.w	sl, #4294967295
 8018968:	2100      	movs	r1, #0
 801896a:	46d1      	mov	r9, sl
 801896c:	2212      	movs	r2, #18
 801896e:	9108      	str	r1, [sp, #32]
 8018970:	e7ce      	b.n	8018910 <_dtoa_r+0x240>
 8018972:	2201      	movs	r2, #1
 8018974:	9207      	str	r2, [sp, #28]
 8018976:	e7f5      	b.n	8018964 <_dtoa_r+0x294>
 8018978:	f8dd a020 	ldr.w	sl, [sp, #32]
 801897c:	46d1      	mov	r9, sl
 801897e:	4652      	mov	r2, sl
 8018980:	e7c6      	b.n	8018910 <_dtoa_r+0x240>
 8018982:	3101      	adds	r1, #1
 8018984:	6079      	str	r1, [r7, #4]
 8018986:	0040      	lsls	r0, r0, #1
 8018988:	e7c6      	b.n	8018918 <_dtoa_r+0x248>
 801898a:	bf00      	nop
 801898c:	f3af 8000 	nop.w
 8018990:	636f4361 	.word	0x636f4361
 8018994:	3fd287a7 	.word	0x3fd287a7
 8018998:	8b60c8b3 	.word	0x8b60c8b3
 801899c:	3fc68a28 	.word	0x3fc68a28
 80189a0:	509f79fb 	.word	0x509f79fb
 80189a4:	3fd34413 	.word	0x3fd34413
 80189a8:	0801b956 	.word	0x0801b956
 80189ac:	0801b96d 	.word	0x0801b96d
 80189b0:	7ff00000 	.word	0x7ff00000
 80189b4:	0801b952 	.word	0x0801b952
 80189b8:	0801b949 	.word	0x0801b949
 80189bc:	0801b7c9 	.word	0x0801b7c9
 80189c0:	0801bad8 	.word	0x0801bad8
 80189c4:	0801b9c8 	.word	0x0801b9c8
 80189c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80189ca:	9901      	ldr	r1, [sp, #4]
 80189cc:	6011      	str	r1, [r2, #0]
 80189ce:	f1b9 0f0e 	cmp.w	r9, #14
 80189d2:	d86c      	bhi.n	8018aae <_dtoa_r+0x3de>
 80189d4:	2c00      	cmp	r4, #0
 80189d6:	d06a      	beq.n	8018aae <_dtoa_r+0x3de>
 80189d8:	f1bb 0f00 	cmp.w	fp, #0
 80189dc:	f340 80a0 	ble.w	8018b20 <_dtoa_r+0x450>
 80189e0:	49c1      	ldr	r1, [pc, #772]	; (8018ce8 <_dtoa_r+0x618>)
 80189e2:	f00b 020f 	and.w	r2, fp, #15
 80189e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80189ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80189ee:	ed92 7b00 	vldr	d7, [r2]
 80189f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80189f6:	f000 8087 	beq.w	8018b08 <_dtoa_r+0x438>
 80189fa:	4abc      	ldr	r2, [pc, #752]	; (8018cec <_dtoa_r+0x61c>)
 80189fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8018a00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018a04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018a08:	f001 010f 	and.w	r1, r1, #15
 8018a0c:	2203      	movs	r2, #3
 8018a0e:	48b7      	ldr	r0, [pc, #732]	; (8018cec <_dtoa_r+0x61c>)
 8018a10:	2900      	cmp	r1, #0
 8018a12:	d17b      	bne.n	8018b0c <_dtoa_r+0x43c>
 8018a14:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018a18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018a1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018a20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018a22:	2900      	cmp	r1, #0
 8018a24:	f000 80a2 	beq.w	8018b6c <_dtoa_r+0x49c>
 8018a28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018a2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018a30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a38:	f140 8098 	bpl.w	8018b6c <_dtoa_r+0x49c>
 8018a3c:	f1b9 0f00 	cmp.w	r9, #0
 8018a40:	f000 8094 	beq.w	8018b6c <_dtoa_r+0x49c>
 8018a44:	f1ba 0f00 	cmp.w	sl, #0
 8018a48:	dd2f      	ble.n	8018aaa <_dtoa_r+0x3da>
 8018a4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018a4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018a52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018a56:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018a5a:	3201      	adds	r2, #1
 8018a5c:	4650      	mov	r0, sl
 8018a5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018a62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8018a66:	ee07 2a90 	vmov	s15, r2
 8018a6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018a6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018a72:	ee15 4a90 	vmov	r4, s11
 8018a76:	ec52 1b15 	vmov	r1, r2, d5
 8018a7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8018a7e:	2800      	cmp	r0, #0
 8018a80:	d177      	bne.n	8018b72 <_dtoa_r+0x4a2>
 8018a82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018a86:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018a8a:	ec42 1b17 	vmov	d7, r1, r2
 8018a8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a96:	f300 8263 	bgt.w	8018f60 <_dtoa_r+0x890>
 8018a9a:	eeb1 7b47 	vneg.f64	d7, d7
 8018a9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa6:	f100 8258 	bmi.w	8018f5a <_dtoa_r+0x88a>
 8018aaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018ab0:	2a00      	cmp	r2, #0
 8018ab2:	f2c0 811d 	blt.w	8018cf0 <_dtoa_r+0x620>
 8018ab6:	f1bb 0f0e 	cmp.w	fp, #14
 8018aba:	f300 8119 	bgt.w	8018cf0 <_dtoa_r+0x620>
 8018abe:	4b8a      	ldr	r3, [pc, #552]	; (8018ce8 <_dtoa_r+0x618>)
 8018ac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018ac4:	ed93 6b00 	vldr	d6, [r3]
 8018ac8:	9b08      	ldr	r3, [sp, #32]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	f280 80b7 	bge.w	8018c3e <_dtoa_r+0x56e>
 8018ad0:	f1b9 0f00 	cmp.w	r9, #0
 8018ad4:	f300 80b3 	bgt.w	8018c3e <_dtoa_r+0x56e>
 8018ad8:	f040 823f 	bne.w	8018f5a <_dtoa_r+0x88a>
 8018adc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018ae0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018ae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af0:	464c      	mov	r4, r9
 8018af2:	464f      	mov	r7, r9
 8018af4:	f280 8215 	bge.w	8018f22 <_dtoa_r+0x852>
 8018af8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018afc:	2331      	movs	r3, #49	; 0x31
 8018afe:	f808 3b01 	strb.w	r3, [r8], #1
 8018b02:	f10b 0b01 	add.w	fp, fp, #1
 8018b06:	e211      	b.n	8018f2c <_dtoa_r+0x85c>
 8018b08:	2202      	movs	r2, #2
 8018b0a:	e780      	b.n	8018a0e <_dtoa_r+0x33e>
 8018b0c:	07cc      	lsls	r4, r1, #31
 8018b0e:	d504      	bpl.n	8018b1a <_dtoa_r+0x44a>
 8018b10:	ed90 6b00 	vldr	d6, [r0]
 8018b14:	3201      	adds	r2, #1
 8018b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018b1a:	1049      	asrs	r1, r1, #1
 8018b1c:	3008      	adds	r0, #8
 8018b1e:	e777      	b.n	8018a10 <_dtoa_r+0x340>
 8018b20:	d022      	beq.n	8018b68 <_dtoa_r+0x498>
 8018b22:	f1cb 0100 	rsb	r1, fp, #0
 8018b26:	4a70      	ldr	r2, [pc, #448]	; (8018ce8 <_dtoa_r+0x618>)
 8018b28:	f001 000f 	and.w	r0, r1, #15
 8018b2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018b30:	ed92 7b00 	vldr	d7, [r2]
 8018b34:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018b38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018b3c:	486b      	ldr	r0, [pc, #428]	; (8018cec <_dtoa_r+0x61c>)
 8018b3e:	1109      	asrs	r1, r1, #4
 8018b40:	2400      	movs	r4, #0
 8018b42:	2202      	movs	r2, #2
 8018b44:	b929      	cbnz	r1, 8018b52 <_dtoa_r+0x482>
 8018b46:	2c00      	cmp	r4, #0
 8018b48:	f43f af6a 	beq.w	8018a20 <_dtoa_r+0x350>
 8018b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018b50:	e766      	b.n	8018a20 <_dtoa_r+0x350>
 8018b52:	07cf      	lsls	r7, r1, #31
 8018b54:	d505      	bpl.n	8018b62 <_dtoa_r+0x492>
 8018b56:	ed90 6b00 	vldr	d6, [r0]
 8018b5a:	3201      	adds	r2, #1
 8018b5c:	2401      	movs	r4, #1
 8018b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018b62:	1049      	asrs	r1, r1, #1
 8018b64:	3008      	adds	r0, #8
 8018b66:	e7ed      	b.n	8018b44 <_dtoa_r+0x474>
 8018b68:	2202      	movs	r2, #2
 8018b6a:	e759      	b.n	8018a20 <_dtoa_r+0x350>
 8018b6c:	465f      	mov	r7, fp
 8018b6e:	4648      	mov	r0, r9
 8018b70:	e775      	b.n	8018a5e <_dtoa_r+0x38e>
 8018b72:	ec42 1b17 	vmov	d7, r1, r2
 8018b76:	4a5c      	ldr	r2, [pc, #368]	; (8018ce8 <_dtoa_r+0x618>)
 8018b78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018b7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018b80:	9a01      	ldr	r2, [sp, #4]
 8018b82:	1814      	adds	r4, r2, r0
 8018b84:	9a07      	ldr	r2, [sp, #28]
 8018b86:	b352      	cbz	r2, 8018bde <_dtoa_r+0x50e>
 8018b88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018b8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018b90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018b94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018b98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018b9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018ba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018ba4:	ee14 2a90 	vmov	r2, s9
 8018ba8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018bac:	3230      	adds	r2, #48	; 0x30
 8018bae:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018bb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bba:	f808 2b01 	strb.w	r2, [r8], #1
 8018bbe:	d439      	bmi.n	8018c34 <_dtoa_r+0x564>
 8018bc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018bc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bcc:	d472      	bmi.n	8018cb4 <_dtoa_r+0x5e4>
 8018bce:	45a0      	cmp	r8, r4
 8018bd0:	f43f af6b 	beq.w	8018aaa <_dtoa_r+0x3da>
 8018bd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018bd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018bdc:	e7e0      	b.n	8018ba0 <_dtoa_r+0x4d0>
 8018bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018be2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018be6:	4621      	mov	r1, r4
 8018be8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018bec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018bf0:	ee14 2a90 	vmov	r2, s9
 8018bf4:	3230      	adds	r2, #48	; 0x30
 8018bf6:	f808 2b01 	strb.w	r2, [r8], #1
 8018bfa:	45a0      	cmp	r8, r4
 8018bfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018c00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018c04:	d118      	bne.n	8018c38 <_dtoa_r+0x568>
 8018c06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018c0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018c0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c16:	dc4d      	bgt.n	8018cb4 <_dtoa_r+0x5e4>
 8018c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c24:	f57f af41 	bpl.w	8018aaa <_dtoa_r+0x3da>
 8018c28:	4688      	mov	r8, r1
 8018c2a:	3901      	subs	r1, #1
 8018c2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018c30:	2b30      	cmp	r3, #48	; 0x30
 8018c32:	d0f9      	beq.n	8018c28 <_dtoa_r+0x558>
 8018c34:	46bb      	mov	fp, r7
 8018c36:	e02a      	b.n	8018c8e <_dtoa_r+0x5be>
 8018c38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018c3c:	e7d6      	b.n	8018bec <_dtoa_r+0x51c>
 8018c3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018c46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018c4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018c4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018c52:	ee15 3a10 	vmov	r3, s10
 8018c56:	3330      	adds	r3, #48	; 0x30
 8018c58:	f808 3b01 	strb.w	r3, [r8], #1
 8018c5c:	9b01      	ldr	r3, [sp, #4]
 8018c5e:	eba8 0303 	sub.w	r3, r8, r3
 8018c62:	4599      	cmp	r9, r3
 8018c64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018c68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018c6c:	d133      	bne.n	8018cd6 <_dtoa_r+0x606>
 8018c6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018c72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7a:	dc1a      	bgt.n	8018cb2 <_dtoa_r+0x5e2>
 8018c7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8018c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c84:	d103      	bne.n	8018c8e <_dtoa_r+0x5be>
 8018c86:	ee15 3a10 	vmov	r3, s10
 8018c8a:	07d9      	lsls	r1, r3, #31
 8018c8c:	d411      	bmi.n	8018cb2 <_dtoa_r+0x5e2>
 8018c8e:	4629      	mov	r1, r5
 8018c90:	4630      	mov	r0, r6
 8018c92:	f000 fe6b 	bl	801996c <_Bfree>
 8018c96:	2300      	movs	r3, #0
 8018c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c9a:	f888 3000 	strb.w	r3, [r8]
 8018c9e:	f10b 0301 	add.w	r3, fp, #1
 8018ca2:	6013      	str	r3, [r2, #0]
 8018ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	f43f ad61 	beq.w	801876e <_dtoa_r+0x9e>
 8018cac:	f8c3 8000 	str.w	r8, [r3]
 8018cb0:	e55d      	b.n	801876e <_dtoa_r+0x9e>
 8018cb2:	465f      	mov	r7, fp
 8018cb4:	4643      	mov	r3, r8
 8018cb6:	4698      	mov	r8, r3
 8018cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018cbc:	2a39      	cmp	r2, #57	; 0x39
 8018cbe:	d106      	bne.n	8018cce <_dtoa_r+0x5fe>
 8018cc0:	9a01      	ldr	r2, [sp, #4]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d1f7      	bne.n	8018cb6 <_dtoa_r+0x5e6>
 8018cc6:	9901      	ldr	r1, [sp, #4]
 8018cc8:	2230      	movs	r2, #48	; 0x30
 8018cca:	3701      	adds	r7, #1
 8018ccc:	700a      	strb	r2, [r1, #0]
 8018cce:	781a      	ldrb	r2, [r3, #0]
 8018cd0:	3201      	adds	r2, #1
 8018cd2:	701a      	strb	r2, [r3, #0]
 8018cd4:	e7ae      	b.n	8018c34 <_dtoa_r+0x564>
 8018cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018cda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce2:	d1b2      	bne.n	8018c4a <_dtoa_r+0x57a>
 8018ce4:	e7d3      	b.n	8018c8e <_dtoa_r+0x5be>
 8018ce6:	bf00      	nop
 8018ce8:	0801bad8 	.word	0x0801bad8
 8018cec:	0801bab0 	.word	0x0801bab0
 8018cf0:	9907      	ldr	r1, [sp, #28]
 8018cf2:	2900      	cmp	r1, #0
 8018cf4:	f000 80d0 	beq.w	8018e98 <_dtoa_r+0x7c8>
 8018cf8:	9906      	ldr	r1, [sp, #24]
 8018cfa:	2901      	cmp	r1, #1
 8018cfc:	f300 80b4 	bgt.w	8018e68 <_dtoa_r+0x798>
 8018d00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018d02:	2900      	cmp	r1, #0
 8018d04:	f000 80ac 	beq.w	8018e60 <_dtoa_r+0x790>
 8018d08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018d0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018d10:	461c      	mov	r4, r3
 8018d12:	930a      	str	r3, [sp, #40]	; 0x28
 8018d14:	9b04      	ldr	r3, [sp, #16]
 8018d16:	4413      	add	r3, r2
 8018d18:	9304      	str	r3, [sp, #16]
 8018d1a:	9b05      	ldr	r3, [sp, #20]
 8018d1c:	2101      	movs	r1, #1
 8018d1e:	4413      	add	r3, r2
 8018d20:	4630      	mov	r0, r6
 8018d22:	9305      	str	r3, [sp, #20]
 8018d24:	f000 ff24 	bl	8019b70 <__i2b>
 8018d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d2a:	4607      	mov	r7, r0
 8018d2c:	f1b8 0f00 	cmp.w	r8, #0
 8018d30:	dd0d      	ble.n	8018d4e <_dtoa_r+0x67e>
 8018d32:	9a05      	ldr	r2, [sp, #20]
 8018d34:	2a00      	cmp	r2, #0
 8018d36:	dd0a      	ble.n	8018d4e <_dtoa_r+0x67e>
 8018d38:	4542      	cmp	r2, r8
 8018d3a:	9904      	ldr	r1, [sp, #16]
 8018d3c:	bfa8      	it	ge
 8018d3e:	4642      	movge	r2, r8
 8018d40:	1a89      	subs	r1, r1, r2
 8018d42:	9104      	str	r1, [sp, #16]
 8018d44:	9905      	ldr	r1, [sp, #20]
 8018d46:	eba8 0802 	sub.w	r8, r8, r2
 8018d4a:	1a8a      	subs	r2, r1, r2
 8018d4c:	9205      	str	r2, [sp, #20]
 8018d4e:	b303      	cbz	r3, 8018d92 <_dtoa_r+0x6c2>
 8018d50:	9a07      	ldr	r2, [sp, #28]
 8018d52:	2a00      	cmp	r2, #0
 8018d54:	f000 80a5 	beq.w	8018ea2 <_dtoa_r+0x7d2>
 8018d58:	2c00      	cmp	r4, #0
 8018d5a:	dd13      	ble.n	8018d84 <_dtoa_r+0x6b4>
 8018d5c:	4639      	mov	r1, r7
 8018d5e:	4622      	mov	r2, r4
 8018d60:	4630      	mov	r0, r6
 8018d62:	930d      	str	r3, [sp, #52]	; 0x34
 8018d64:	f000 ffc4 	bl	8019cf0 <__pow5mult>
 8018d68:	462a      	mov	r2, r5
 8018d6a:	4601      	mov	r1, r0
 8018d6c:	4607      	mov	r7, r0
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f000 ff14 	bl	8019b9c <__multiply>
 8018d74:	4629      	mov	r1, r5
 8018d76:	900a      	str	r0, [sp, #40]	; 0x28
 8018d78:	4630      	mov	r0, r6
 8018d7a:	f000 fdf7 	bl	801996c <_Bfree>
 8018d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d82:	4615      	mov	r5, r2
 8018d84:	1b1a      	subs	r2, r3, r4
 8018d86:	d004      	beq.n	8018d92 <_dtoa_r+0x6c2>
 8018d88:	4629      	mov	r1, r5
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f000 ffb0 	bl	8019cf0 <__pow5mult>
 8018d90:	4605      	mov	r5, r0
 8018d92:	2101      	movs	r1, #1
 8018d94:	4630      	mov	r0, r6
 8018d96:	f000 feeb 	bl	8019b70 <__i2b>
 8018d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	4604      	mov	r4, r0
 8018da0:	f340 8081 	ble.w	8018ea6 <_dtoa_r+0x7d6>
 8018da4:	461a      	mov	r2, r3
 8018da6:	4601      	mov	r1, r0
 8018da8:	4630      	mov	r0, r6
 8018daa:	f000 ffa1 	bl	8019cf0 <__pow5mult>
 8018dae:	9b06      	ldr	r3, [sp, #24]
 8018db0:	2b01      	cmp	r3, #1
 8018db2:	4604      	mov	r4, r0
 8018db4:	dd7a      	ble.n	8018eac <_dtoa_r+0x7dc>
 8018db6:	2300      	movs	r3, #0
 8018db8:	930a      	str	r3, [sp, #40]	; 0x28
 8018dba:	6922      	ldr	r2, [r4, #16]
 8018dbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018dc0:	6910      	ldr	r0, [r2, #16]
 8018dc2:	f000 fe85 	bl	8019ad0 <__hi0bits>
 8018dc6:	f1c0 0020 	rsb	r0, r0, #32
 8018dca:	9b05      	ldr	r3, [sp, #20]
 8018dcc:	4418      	add	r0, r3
 8018dce:	f010 001f 	ands.w	r0, r0, #31
 8018dd2:	f000 808c 	beq.w	8018eee <_dtoa_r+0x81e>
 8018dd6:	f1c0 0220 	rsb	r2, r0, #32
 8018dda:	2a04      	cmp	r2, #4
 8018ddc:	f340 8085 	ble.w	8018eea <_dtoa_r+0x81a>
 8018de0:	f1c0 001c 	rsb	r0, r0, #28
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	4403      	add	r3, r0
 8018de8:	9304      	str	r3, [sp, #16]
 8018dea:	9b05      	ldr	r3, [sp, #20]
 8018dec:	4403      	add	r3, r0
 8018dee:	4480      	add	r8, r0
 8018df0:	9305      	str	r3, [sp, #20]
 8018df2:	9b04      	ldr	r3, [sp, #16]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	dd05      	ble.n	8018e04 <_dtoa_r+0x734>
 8018df8:	4629      	mov	r1, r5
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	4630      	mov	r0, r6
 8018dfe:	f000 ffd1 	bl	8019da4 <__lshift>
 8018e02:	4605      	mov	r5, r0
 8018e04:	9b05      	ldr	r3, [sp, #20]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	dd05      	ble.n	8018e16 <_dtoa_r+0x746>
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	461a      	mov	r2, r3
 8018e0e:	4630      	mov	r0, r6
 8018e10:	f000 ffc8 	bl	8019da4 <__lshift>
 8018e14:	4604      	mov	r4, r0
 8018e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d06a      	beq.n	8018ef2 <_dtoa_r+0x822>
 8018e1c:	4621      	mov	r1, r4
 8018e1e:	4628      	mov	r0, r5
 8018e20:	f001 f830 	bl	8019e84 <__mcmp>
 8018e24:	2800      	cmp	r0, #0
 8018e26:	da64      	bge.n	8018ef2 <_dtoa_r+0x822>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	4629      	mov	r1, r5
 8018e2c:	220a      	movs	r2, #10
 8018e2e:	4630      	mov	r0, r6
 8018e30:	f000 fdbe 	bl	80199b0 <__multadd>
 8018e34:	9b07      	ldr	r3, [sp, #28]
 8018e36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018e3a:	4605      	mov	r5, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	f000 8191 	beq.w	8019164 <_dtoa_r+0xa94>
 8018e42:	4639      	mov	r1, r7
 8018e44:	2300      	movs	r3, #0
 8018e46:	220a      	movs	r2, #10
 8018e48:	4630      	mov	r0, r6
 8018e4a:	f000 fdb1 	bl	80199b0 <__multadd>
 8018e4e:	f1ba 0f00 	cmp.w	sl, #0
 8018e52:	4607      	mov	r7, r0
 8018e54:	f300 808d 	bgt.w	8018f72 <_dtoa_r+0x8a2>
 8018e58:	9b06      	ldr	r3, [sp, #24]
 8018e5a:	2b02      	cmp	r3, #2
 8018e5c:	dc50      	bgt.n	8018f00 <_dtoa_r+0x830>
 8018e5e:	e088      	b.n	8018f72 <_dtoa_r+0x8a2>
 8018e60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018e66:	e751      	b.n	8018d0c <_dtoa_r+0x63c>
 8018e68:	f109 34ff 	add.w	r4, r9, #4294967295
 8018e6c:	42a3      	cmp	r3, r4
 8018e6e:	bfbf      	itttt	lt
 8018e70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8018e72:	1ae3      	sublt	r3, r4, r3
 8018e74:	18d2      	addlt	r2, r2, r3
 8018e76:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018e78:	bfb6      	itet	lt
 8018e7a:	4623      	movlt	r3, r4
 8018e7c:	1b1c      	subge	r4, r3, r4
 8018e7e:	2400      	movlt	r4, #0
 8018e80:	f1b9 0f00 	cmp.w	r9, #0
 8018e84:	bfb5      	itete	lt
 8018e86:	9a04      	ldrlt	r2, [sp, #16]
 8018e88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018e8c:	eba2 0809 	sublt.w	r8, r2, r9
 8018e90:	464a      	movge	r2, r9
 8018e92:	bfb8      	it	lt
 8018e94:	2200      	movlt	r2, #0
 8018e96:	e73c      	b.n	8018d12 <_dtoa_r+0x642>
 8018e98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018e9c:	9f07      	ldr	r7, [sp, #28]
 8018e9e:	461c      	mov	r4, r3
 8018ea0:	e744      	b.n	8018d2c <_dtoa_r+0x65c>
 8018ea2:	461a      	mov	r2, r3
 8018ea4:	e770      	b.n	8018d88 <_dtoa_r+0x6b8>
 8018ea6:	9b06      	ldr	r3, [sp, #24]
 8018ea8:	2b01      	cmp	r3, #1
 8018eaa:	dc18      	bgt.n	8018ede <_dtoa_r+0x80e>
 8018eac:	9b02      	ldr	r3, [sp, #8]
 8018eae:	b9b3      	cbnz	r3, 8018ede <_dtoa_r+0x80e>
 8018eb0:	9b03      	ldr	r3, [sp, #12]
 8018eb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018eb6:	b9a2      	cbnz	r2, 8018ee2 <_dtoa_r+0x812>
 8018eb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018ebc:	0d12      	lsrs	r2, r2, #20
 8018ebe:	0512      	lsls	r2, r2, #20
 8018ec0:	b18a      	cbz	r2, 8018ee6 <_dtoa_r+0x816>
 8018ec2:	9b04      	ldr	r3, [sp, #16]
 8018ec4:	3301      	adds	r3, #1
 8018ec6:	9304      	str	r3, [sp, #16]
 8018ec8:	9b05      	ldr	r3, [sp, #20]
 8018eca:	3301      	adds	r3, #1
 8018ecc:	9305      	str	r3, [sp, #20]
 8018ece:	2301      	movs	r3, #1
 8018ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8018ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	f47f af70 	bne.w	8018dba <_dtoa_r+0x6ea>
 8018eda:	2001      	movs	r0, #1
 8018edc:	e775      	b.n	8018dca <_dtoa_r+0x6fa>
 8018ede:	2300      	movs	r3, #0
 8018ee0:	e7f6      	b.n	8018ed0 <_dtoa_r+0x800>
 8018ee2:	9b02      	ldr	r3, [sp, #8]
 8018ee4:	e7f4      	b.n	8018ed0 <_dtoa_r+0x800>
 8018ee6:	920a      	str	r2, [sp, #40]	; 0x28
 8018ee8:	e7f3      	b.n	8018ed2 <_dtoa_r+0x802>
 8018eea:	d082      	beq.n	8018df2 <_dtoa_r+0x722>
 8018eec:	4610      	mov	r0, r2
 8018eee:	301c      	adds	r0, #28
 8018ef0:	e778      	b.n	8018de4 <_dtoa_r+0x714>
 8018ef2:	f1b9 0f00 	cmp.w	r9, #0
 8018ef6:	dc37      	bgt.n	8018f68 <_dtoa_r+0x898>
 8018ef8:	9b06      	ldr	r3, [sp, #24]
 8018efa:	2b02      	cmp	r3, #2
 8018efc:	dd34      	ble.n	8018f68 <_dtoa_r+0x898>
 8018efe:	46ca      	mov	sl, r9
 8018f00:	f1ba 0f00 	cmp.w	sl, #0
 8018f04:	d10d      	bne.n	8018f22 <_dtoa_r+0x852>
 8018f06:	4621      	mov	r1, r4
 8018f08:	4653      	mov	r3, sl
 8018f0a:	2205      	movs	r2, #5
 8018f0c:	4630      	mov	r0, r6
 8018f0e:	f000 fd4f 	bl	80199b0 <__multadd>
 8018f12:	4601      	mov	r1, r0
 8018f14:	4604      	mov	r4, r0
 8018f16:	4628      	mov	r0, r5
 8018f18:	f000 ffb4 	bl	8019e84 <__mcmp>
 8018f1c:	2800      	cmp	r0, #0
 8018f1e:	f73f adeb 	bgt.w	8018af8 <_dtoa_r+0x428>
 8018f22:	9b08      	ldr	r3, [sp, #32]
 8018f24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018f28:	ea6f 0b03 	mvn.w	fp, r3
 8018f2c:	f04f 0900 	mov.w	r9, #0
 8018f30:	4621      	mov	r1, r4
 8018f32:	4630      	mov	r0, r6
 8018f34:	f000 fd1a 	bl	801996c <_Bfree>
 8018f38:	2f00      	cmp	r7, #0
 8018f3a:	f43f aea8 	beq.w	8018c8e <_dtoa_r+0x5be>
 8018f3e:	f1b9 0f00 	cmp.w	r9, #0
 8018f42:	d005      	beq.n	8018f50 <_dtoa_r+0x880>
 8018f44:	45b9      	cmp	r9, r7
 8018f46:	d003      	beq.n	8018f50 <_dtoa_r+0x880>
 8018f48:	4649      	mov	r1, r9
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	f000 fd0e 	bl	801996c <_Bfree>
 8018f50:	4639      	mov	r1, r7
 8018f52:	4630      	mov	r0, r6
 8018f54:	f000 fd0a 	bl	801996c <_Bfree>
 8018f58:	e699      	b.n	8018c8e <_dtoa_r+0x5be>
 8018f5a:	2400      	movs	r4, #0
 8018f5c:	4627      	mov	r7, r4
 8018f5e:	e7e0      	b.n	8018f22 <_dtoa_r+0x852>
 8018f60:	46bb      	mov	fp, r7
 8018f62:	4604      	mov	r4, r0
 8018f64:	4607      	mov	r7, r0
 8018f66:	e5c7      	b.n	8018af8 <_dtoa_r+0x428>
 8018f68:	9b07      	ldr	r3, [sp, #28]
 8018f6a:	46ca      	mov	sl, r9
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	f000 8100 	beq.w	8019172 <_dtoa_r+0xaa2>
 8018f72:	f1b8 0f00 	cmp.w	r8, #0
 8018f76:	dd05      	ble.n	8018f84 <_dtoa_r+0x8b4>
 8018f78:	4639      	mov	r1, r7
 8018f7a:	4642      	mov	r2, r8
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	f000 ff11 	bl	8019da4 <__lshift>
 8018f82:	4607      	mov	r7, r0
 8018f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d05d      	beq.n	8019046 <_dtoa_r+0x976>
 8018f8a:	6879      	ldr	r1, [r7, #4]
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	f000 fcad 	bl	80198ec <_Balloc>
 8018f92:	4680      	mov	r8, r0
 8018f94:	b928      	cbnz	r0, 8018fa2 <_dtoa_r+0x8d2>
 8018f96:	4b82      	ldr	r3, [pc, #520]	; (80191a0 <_dtoa_r+0xad0>)
 8018f98:	4602      	mov	r2, r0
 8018f9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018f9e:	f7ff bbaf 	b.w	8018700 <_dtoa_r+0x30>
 8018fa2:	693a      	ldr	r2, [r7, #16]
 8018fa4:	3202      	adds	r2, #2
 8018fa6:	0092      	lsls	r2, r2, #2
 8018fa8:	f107 010c 	add.w	r1, r7, #12
 8018fac:	300c      	adds	r0, #12
 8018fae:	f7fd fdbd 	bl	8016b2c <memcpy>
 8018fb2:	2201      	movs	r2, #1
 8018fb4:	4641      	mov	r1, r8
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f000 fef4 	bl	8019da4 <__lshift>
 8018fbc:	9b01      	ldr	r3, [sp, #4]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	9304      	str	r3, [sp, #16]
 8018fc2:	9b01      	ldr	r3, [sp, #4]
 8018fc4:	4453      	add	r3, sl
 8018fc6:	9308      	str	r3, [sp, #32]
 8018fc8:	9b02      	ldr	r3, [sp, #8]
 8018fca:	f003 0301 	and.w	r3, r3, #1
 8018fce:	46b9      	mov	r9, r7
 8018fd0:	9307      	str	r3, [sp, #28]
 8018fd2:	4607      	mov	r7, r0
 8018fd4:	9b04      	ldr	r3, [sp, #16]
 8018fd6:	4621      	mov	r1, r4
 8018fd8:	3b01      	subs	r3, #1
 8018fda:	4628      	mov	r0, r5
 8018fdc:	9302      	str	r3, [sp, #8]
 8018fde:	f7ff fae9 	bl	80185b4 <quorem>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	3330      	adds	r3, #48	; 0x30
 8018fe6:	9005      	str	r0, [sp, #20]
 8018fe8:	4649      	mov	r1, r9
 8018fea:	4628      	mov	r0, r5
 8018fec:	9309      	str	r3, [sp, #36]	; 0x24
 8018fee:	f000 ff49 	bl	8019e84 <__mcmp>
 8018ff2:	463a      	mov	r2, r7
 8018ff4:	4682      	mov	sl, r0
 8018ff6:	4621      	mov	r1, r4
 8018ff8:	4630      	mov	r0, r6
 8018ffa:	f000 ff5f 	bl	8019ebc <__mdiff>
 8018ffe:	68c2      	ldr	r2, [r0, #12]
 8019000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019002:	4680      	mov	r8, r0
 8019004:	bb0a      	cbnz	r2, 801904a <_dtoa_r+0x97a>
 8019006:	4601      	mov	r1, r0
 8019008:	4628      	mov	r0, r5
 801900a:	f000 ff3b 	bl	8019e84 <__mcmp>
 801900e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019010:	4602      	mov	r2, r0
 8019012:	4641      	mov	r1, r8
 8019014:	4630      	mov	r0, r6
 8019016:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801901a:	f000 fca7 	bl	801996c <_Bfree>
 801901e:	9b06      	ldr	r3, [sp, #24]
 8019020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019026:	ea43 0102 	orr.w	r1, r3, r2
 801902a:	9b07      	ldr	r3, [sp, #28]
 801902c:	430b      	orrs	r3, r1
 801902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019030:	d10d      	bne.n	801904e <_dtoa_r+0x97e>
 8019032:	2b39      	cmp	r3, #57	; 0x39
 8019034:	d029      	beq.n	801908a <_dtoa_r+0x9ba>
 8019036:	f1ba 0f00 	cmp.w	sl, #0
 801903a:	dd01      	ble.n	8019040 <_dtoa_r+0x970>
 801903c:	9b05      	ldr	r3, [sp, #20]
 801903e:	3331      	adds	r3, #49	; 0x31
 8019040:	9a02      	ldr	r2, [sp, #8]
 8019042:	7013      	strb	r3, [r2, #0]
 8019044:	e774      	b.n	8018f30 <_dtoa_r+0x860>
 8019046:	4638      	mov	r0, r7
 8019048:	e7b8      	b.n	8018fbc <_dtoa_r+0x8ec>
 801904a:	2201      	movs	r2, #1
 801904c:	e7e1      	b.n	8019012 <_dtoa_r+0x942>
 801904e:	f1ba 0f00 	cmp.w	sl, #0
 8019052:	db06      	blt.n	8019062 <_dtoa_r+0x992>
 8019054:	9906      	ldr	r1, [sp, #24]
 8019056:	ea41 0a0a 	orr.w	sl, r1, sl
 801905a:	9907      	ldr	r1, [sp, #28]
 801905c:	ea5a 0101 	orrs.w	r1, sl, r1
 8019060:	d120      	bne.n	80190a4 <_dtoa_r+0x9d4>
 8019062:	2a00      	cmp	r2, #0
 8019064:	ddec      	ble.n	8019040 <_dtoa_r+0x970>
 8019066:	4629      	mov	r1, r5
 8019068:	2201      	movs	r2, #1
 801906a:	4630      	mov	r0, r6
 801906c:	9304      	str	r3, [sp, #16]
 801906e:	f000 fe99 	bl	8019da4 <__lshift>
 8019072:	4621      	mov	r1, r4
 8019074:	4605      	mov	r5, r0
 8019076:	f000 ff05 	bl	8019e84 <__mcmp>
 801907a:	2800      	cmp	r0, #0
 801907c:	9b04      	ldr	r3, [sp, #16]
 801907e:	dc02      	bgt.n	8019086 <_dtoa_r+0x9b6>
 8019080:	d1de      	bne.n	8019040 <_dtoa_r+0x970>
 8019082:	07da      	lsls	r2, r3, #31
 8019084:	d5dc      	bpl.n	8019040 <_dtoa_r+0x970>
 8019086:	2b39      	cmp	r3, #57	; 0x39
 8019088:	d1d8      	bne.n	801903c <_dtoa_r+0x96c>
 801908a:	9a02      	ldr	r2, [sp, #8]
 801908c:	2339      	movs	r3, #57	; 0x39
 801908e:	7013      	strb	r3, [r2, #0]
 8019090:	4643      	mov	r3, r8
 8019092:	4698      	mov	r8, r3
 8019094:	3b01      	subs	r3, #1
 8019096:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801909a:	2a39      	cmp	r2, #57	; 0x39
 801909c:	d051      	beq.n	8019142 <_dtoa_r+0xa72>
 801909e:	3201      	adds	r2, #1
 80190a0:	701a      	strb	r2, [r3, #0]
 80190a2:	e745      	b.n	8018f30 <_dtoa_r+0x860>
 80190a4:	2a00      	cmp	r2, #0
 80190a6:	dd03      	ble.n	80190b0 <_dtoa_r+0x9e0>
 80190a8:	2b39      	cmp	r3, #57	; 0x39
 80190aa:	d0ee      	beq.n	801908a <_dtoa_r+0x9ba>
 80190ac:	3301      	adds	r3, #1
 80190ae:	e7c7      	b.n	8019040 <_dtoa_r+0x970>
 80190b0:	9a04      	ldr	r2, [sp, #16]
 80190b2:	9908      	ldr	r1, [sp, #32]
 80190b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80190b8:	428a      	cmp	r2, r1
 80190ba:	d02b      	beq.n	8019114 <_dtoa_r+0xa44>
 80190bc:	4629      	mov	r1, r5
 80190be:	2300      	movs	r3, #0
 80190c0:	220a      	movs	r2, #10
 80190c2:	4630      	mov	r0, r6
 80190c4:	f000 fc74 	bl	80199b0 <__multadd>
 80190c8:	45b9      	cmp	r9, r7
 80190ca:	4605      	mov	r5, r0
 80190cc:	f04f 0300 	mov.w	r3, #0
 80190d0:	f04f 020a 	mov.w	r2, #10
 80190d4:	4649      	mov	r1, r9
 80190d6:	4630      	mov	r0, r6
 80190d8:	d107      	bne.n	80190ea <_dtoa_r+0xa1a>
 80190da:	f000 fc69 	bl	80199b0 <__multadd>
 80190de:	4681      	mov	r9, r0
 80190e0:	4607      	mov	r7, r0
 80190e2:	9b04      	ldr	r3, [sp, #16]
 80190e4:	3301      	adds	r3, #1
 80190e6:	9304      	str	r3, [sp, #16]
 80190e8:	e774      	b.n	8018fd4 <_dtoa_r+0x904>
 80190ea:	f000 fc61 	bl	80199b0 <__multadd>
 80190ee:	4639      	mov	r1, r7
 80190f0:	4681      	mov	r9, r0
 80190f2:	2300      	movs	r3, #0
 80190f4:	220a      	movs	r2, #10
 80190f6:	4630      	mov	r0, r6
 80190f8:	f000 fc5a 	bl	80199b0 <__multadd>
 80190fc:	4607      	mov	r7, r0
 80190fe:	e7f0      	b.n	80190e2 <_dtoa_r+0xa12>
 8019100:	f1ba 0f00 	cmp.w	sl, #0
 8019104:	9a01      	ldr	r2, [sp, #4]
 8019106:	bfcc      	ite	gt
 8019108:	46d0      	movgt	r8, sl
 801910a:	f04f 0801 	movle.w	r8, #1
 801910e:	4490      	add	r8, r2
 8019110:	f04f 0900 	mov.w	r9, #0
 8019114:	4629      	mov	r1, r5
 8019116:	2201      	movs	r2, #1
 8019118:	4630      	mov	r0, r6
 801911a:	9302      	str	r3, [sp, #8]
 801911c:	f000 fe42 	bl	8019da4 <__lshift>
 8019120:	4621      	mov	r1, r4
 8019122:	4605      	mov	r5, r0
 8019124:	f000 feae 	bl	8019e84 <__mcmp>
 8019128:	2800      	cmp	r0, #0
 801912a:	dcb1      	bgt.n	8019090 <_dtoa_r+0x9c0>
 801912c:	d102      	bne.n	8019134 <_dtoa_r+0xa64>
 801912e:	9b02      	ldr	r3, [sp, #8]
 8019130:	07db      	lsls	r3, r3, #31
 8019132:	d4ad      	bmi.n	8019090 <_dtoa_r+0x9c0>
 8019134:	4643      	mov	r3, r8
 8019136:	4698      	mov	r8, r3
 8019138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801913c:	2a30      	cmp	r2, #48	; 0x30
 801913e:	d0fa      	beq.n	8019136 <_dtoa_r+0xa66>
 8019140:	e6f6      	b.n	8018f30 <_dtoa_r+0x860>
 8019142:	9a01      	ldr	r2, [sp, #4]
 8019144:	429a      	cmp	r2, r3
 8019146:	d1a4      	bne.n	8019092 <_dtoa_r+0x9c2>
 8019148:	f10b 0b01 	add.w	fp, fp, #1
 801914c:	2331      	movs	r3, #49	; 0x31
 801914e:	e778      	b.n	8019042 <_dtoa_r+0x972>
 8019150:	4b14      	ldr	r3, [pc, #80]	; (80191a4 <_dtoa_r+0xad4>)
 8019152:	f7ff bb27 	b.w	80187a4 <_dtoa_r+0xd4>
 8019156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019158:	2b00      	cmp	r3, #0
 801915a:	f47f ab03 	bne.w	8018764 <_dtoa_r+0x94>
 801915e:	4b12      	ldr	r3, [pc, #72]	; (80191a8 <_dtoa_r+0xad8>)
 8019160:	f7ff bb20 	b.w	80187a4 <_dtoa_r+0xd4>
 8019164:	f1ba 0f00 	cmp.w	sl, #0
 8019168:	dc03      	bgt.n	8019172 <_dtoa_r+0xaa2>
 801916a:	9b06      	ldr	r3, [sp, #24]
 801916c:	2b02      	cmp	r3, #2
 801916e:	f73f aec7 	bgt.w	8018f00 <_dtoa_r+0x830>
 8019172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019176:	4621      	mov	r1, r4
 8019178:	4628      	mov	r0, r5
 801917a:	f7ff fa1b 	bl	80185b4 <quorem>
 801917e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019182:	f808 3b01 	strb.w	r3, [r8], #1
 8019186:	9a01      	ldr	r2, [sp, #4]
 8019188:	eba8 0202 	sub.w	r2, r8, r2
 801918c:	4592      	cmp	sl, r2
 801918e:	ddb7      	ble.n	8019100 <_dtoa_r+0xa30>
 8019190:	4629      	mov	r1, r5
 8019192:	2300      	movs	r3, #0
 8019194:	220a      	movs	r2, #10
 8019196:	4630      	mov	r0, r6
 8019198:	f000 fc0a 	bl	80199b0 <__multadd>
 801919c:	4605      	mov	r5, r0
 801919e:	e7ea      	b.n	8019176 <_dtoa_r+0xaa6>
 80191a0:	0801b9c8 	.word	0x0801b9c8
 80191a4:	0801b7c8 	.word	0x0801b7c8
 80191a8:	0801b949 	.word	0x0801b949

080191ac <rshift>:
 80191ac:	6903      	ldr	r3, [r0, #16]
 80191ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80191b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80191ba:	f100 0414 	add.w	r4, r0, #20
 80191be:	dd45      	ble.n	801924c <rshift+0xa0>
 80191c0:	f011 011f 	ands.w	r1, r1, #31
 80191c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80191c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80191cc:	d10c      	bne.n	80191e8 <rshift+0x3c>
 80191ce:	f100 0710 	add.w	r7, r0, #16
 80191d2:	4629      	mov	r1, r5
 80191d4:	42b1      	cmp	r1, r6
 80191d6:	d334      	bcc.n	8019242 <rshift+0x96>
 80191d8:	1a9b      	subs	r3, r3, r2
 80191da:	009b      	lsls	r3, r3, #2
 80191dc:	1eea      	subs	r2, r5, #3
 80191de:	4296      	cmp	r6, r2
 80191e0:	bf38      	it	cc
 80191e2:	2300      	movcc	r3, #0
 80191e4:	4423      	add	r3, r4
 80191e6:	e015      	b.n	8019214 <rshift+0x68>
 80191e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80191ec:	f1c1 0820 	rsb	r8, r1, #32
 80191f0:	40cf      	lsrs	r7, r1
 80191f2:	f105 0e04 	add.w	lr, r5, #4
 80191f6:	46a1      	mov	r9, r4
 80191f8:	4576      	cmp	r6, lr
 80191fa:	46f4      	mov	ip, lr
 80191fc:	d815      	bhi.n	801922a <rshift+0x7e>
 80191fe:	1a9a      	subs	r2, r3, r2
 8019200:	0092      	lsls	r2, r2, #2
 8019202:	3a04      	subs	r2, #4
 8019204:	3501      	adds	r5, #1
 8019206:	42ae      	cmp	r6, r5
 8019208:	bf38      	it	cc
 801920a:	2200      	movcc	r2, #0
 801920c:	18a3      	adds	r3, r4, r2
 801920e:	50a7      	str	r7, [r4, r2]
 8019210:	b107      	cbz	r7, 8019214 <rshift+0x68>
 8019212:	3304      	adds	r3, #4
 8019214:	1b1a      	subs	r2, r3, r4
 8019216:	42a3      	cmp	r3, r4
 8019218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801921c:	bf08      	it	eq
 801921e:	2300      	moveq	r3, #0
 8019220:	6102      	str	r2, [r0, #16]
 8019222:	bf08      	it	eq
 8019224:	6143      	streq	r3, [r0, #20]
 8019226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801922a:	f8dc c000 	ldr.w	ip, [ip]
 801922e:	fa0c fc08 	lsl.w	ip, ip, r8
 8019232:	ea4c 0707 	orr.w	r7, ip, r7
 8019236:	f849 7b04 	str.w	r7, [r9], #4
 801923a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801923e:	40cf      	lsrs	r7, r1
 8019240:	e7da      	b.n	80191f8 <rshift+0x4c>
 8019242:	f851 cb04 	ldr.w	ip, [r1], #4
 8019246:	f847 cf04 	str.w	ip, [r7, #4]!
 801924a:	e7c3      	b.n	80191d4 <rshift+0x28>
 801924c:	4623      	mov	r3, r4
 801924e:	e7e1      	b.n	8019214 <rshift+0x68>

08019250 <__hexdig_fun>:
 8019250:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019254:	2b09      	cmp	r3, #9
 8019256:	d802      	bhi.n	801925e <__hexdig_fun+0xe>
 8019258:	3820      	subs	r0, #32
 801925a:	b2c0      	uxtb	r0, r0
 801925c:	4770      	bx	lr
 801925e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019262:	2b05      	cmp	r3, #5
 8019264:	d801      	bhi.n	801926a <__hexdig_fun+0x1a>
 8019266:	3847      	subs	r0, #71	; 0x47
 8019268:	e7f7      	b.n	801925a <__hexdig_fun+0xa>
 801926a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801926e:	2b05      	cmp	r3, #5
 8019270:	d801      	bhi.n	8019276 <__hexdig_fun+0x26>
 8019272:	3827      	subs	r0, #39	; 0x27
 8019274:	e7f1      	b.n	801925a <__hexdig_fun+0xa>
 8019276:	2000      	movs	r0, #0
 8019278:	4770      	bx	lr
	...

0801927c <__gethex>:
 801927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019280:	ed2d 8b02 	vpush	{d8}
 8019284:	b089      	sub	sp, #36	; 0x24
 8019286:	ee08 0a10 	vmov	s16, r0
 801928a:	9304      	str	r3, [sp, #16]
 801928c:	4bb4      	ldr	r3, [pc, #720]	; (8019560 <__gethex+0x2e4>)
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	9301      	str	r3, [sp, #4]
 8019292:	4618      	mov	r0, r3
 8019294:	468b      	mov	fp, r1
 8019296:	4690      	mov	r8, r2
 8019298:	f7e7 f83a 	bl	8000310 <strlen>
 801929c:	9b01      	ldr	r3, [sp, #4]
 801929e:	f8db 2000 	ldr.w	r2, [fp]
 80192a2:	4403      	add	r3, r0
 80192a4:	4682      	mov	sl, r0
 80192a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80192aa:	9305      	str	r3, [sp, #20]
 80192ac:	1c93      	adds	r3, r2, #2
 80192ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80192b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80192b6:	32fe      	adds	r2, #254	; 0xfe
 80192b8:	18d1      	adds	r1, r2, r3
 80192ba:	461f      	mov	r7, r3
 80192bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80192c0:	9100      	str	r1, [sp, #0]
 80192c2:	2830      	cmp	r0, #48	; 0x30
 80192c4:	d0f8      	beq.n	80192b8 <__gethex+0x3c>
 80192c6:	f7ff ffc3 	bl	8019250 <__hexdig_fun>
 80192ca:	4604      	mov	r4, r0
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d13a      	bne.n	8019346 <__gethex+0xca>
 80192d0:	9901      	ldr	r1, [sp, #4]
 80192d2:	4652      	mov	r2, sl
 80192d4:	4638      	mov	r0, r7
 80192d6:	f001 fa43 	bl	801a760 <strncmp>
 80192da:	4605      	mov	r5, r0
 80192dc:	2800      	cmp	r0, #0
 80192de:	d168      	bne.n	80193b2 <__gethex+0x136>
 80192e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80192e4:	eb07 060a 	add.w	r6, r7, sl
 80192e8:	f7ff ffb2 	bl	8019250 <__hexdig_fun>
 80192ec:	2800      	cmp	r0, #0
 80192ee:	d062      	beq.n	80193b6 <__gethex+0x13a>
 80192f0:	4633      	mov	r3, r6
 80192f2:	7818      	ldrb	r0, [r3, #0]
 80192f4:	2830      	cmp	r0, #48	; 0x30
 80192f6:	461f      	mov	r7, r3
 80192f8:	f103 0301 	add.w	r3, r3, #1
 80192fc:	d0f9      	beq.n	80192f2 <__gethex+0x76>
 80192fe:	f7ff ffa7 	bl	8019250 <__hexdig_fun>
 8019302:	2301      	movs	r3, #1
 8019304:	fab0 f480 	clz	r4, r0
 8019308:	0964      	lsrs	r4, r4, #5
 801930a:	4635      	mov	r5, r6
 801930c:	9300      	str	r3, [sp, #0]
 801930e:	463a      	mov	r2, r7
 8019310:	4616      	mov	r6, r2
 8019312:	3201      	adds	r2, #1
 8019314:	7830      	ldrb	r0, [r6, #0]
 8019316:	f7ff ff9b 	bl	8019250 <__hexdig_fun>
 801931a:	2800      	cmp	r0, #0
 801931c:	d1f8      	bne.n	8019310 <__gethex+0x94>
 801931e:	9901      	ldr	r1, [sp, #4]
 8019320:	4652      	mov	r2, sl
 8019322:	4630      	mov	r0, r6
 8019324:	f001 fa1c 	bl	801a760 <strncmp>
 8019328:	b980      	cbnz	r0, 801934c <__gethex+0xd0>
 801932a:	b94d      	cbnz	r5, 8019340 <__gethex+0xc4>
 801932c:	eb06 050a 	add.w	r5, r6, sl
 8019330:	462a      	mov	r2, r5
 8019332:	4616      	mov	r6, r2
 8019334:	3201      	adds	r2, #1
 8019336:	7830      	ldrb	r0, [r6, #0]
 8019338:	f7ff ff8a 	bl	8019250 <__hexdig_fun>
 801933c:	2800      	cmp	r0, #0
 801933e:	d1f8      	bne.n	8019332 <__gethex+0xb6>
 8019340:	1bad      	subs	r5, r5, r6
 8019342:	00ad      	lsls	r5, r5, #2
 8019344:	e004      	b.n	8019350 <__gethex+0xd4>
 8019346:	2400      	movs	r4, #0
 8019348:	4625      	mov	r5, r4
 801934a:	e7e0      	b.n	801930e <__gethex+0x92>
 801934c:	2d00      	cmp	r5, #0
 801934e:	d1f7      	bne.n	8019340 <__gethex+0xc4>
 8019350:	7833      	ldrb	r3, [r6, #0]
 8019352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019356:	2b50      	cmp	r3, #80	; 0x50
 8019358:	d13b      	bne.n	80193d2 <__gethex+0x156>
 801935a:	7873      	ldrb	r3, [r6, #1]
 801935c:	2b2b      	cmp	r3, #43	; 0x2b
 801935e:	d02c      	beq.n	80193ba <__gethex+0x13e>
 8019360:	2b2d      	cmp	r3, #45	; 0x2d
 8019362:	d02e      	beq.n	80193c2 <__gethex+0x146>
 8019364:	1c71      	adds	r1, r6, #1
 8019366:	f04f 0900 	mov.w	r9, #0
 801936a:	7808      	ldrb	r0, [r1, #0]
 801936c:	f7ff ff70 	bl	8019250 <__hexdig_fun>
 8019370:	1e43      	subs	r3, r0, #1
 8019372:	b2db      	uxtb	r3, r3
 8019374:	2b18      	cmp	r3, #24
 8019376:	d82c      	bhi.n	80193d2 <__gethex+0x156>
 8019378:	f1a0 0210 	sub.w	r2, r0, #16
 801937c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019380:	f7ff ff66 	bl	8019250 <__hexdig_fun>
 8019384:	1e43      	subs	r3, r0, #1
 8019386:	b2db      	uxtb	r3, r3
 8019388:	2b18      	cmp	r3, #24
 801938a:	d91d      	bls.n	80193c8 <__gethex+0x14c>
 801938c:	f1b9 0f00 	cmp.w	r9, #0
 8019390:	d000      	beq.n	8019394 <__gethex+0x118>
 8019392:	4252      	negs	r2, r2
 8019394:	4415      	add	r5, r2
 8019396:	f8cb 1000 	str.w	r1, [fp]
 801939a:	b1e4      	cbz	r4, 80193d6 <__gethex+0x15a>
 801939c:	9b00      	ldr	r3, [sp, #0]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	bf14      	ite	ne
 80193a2:	2700      	movne	r7, #0
 80193a4:	2706      	moveq	r7, #6
 80193a6:	4638      	mov	r0, r7
 80193a8:	b009      	add	sp, #36	; 0x24
 80193aa:	ecbd 8b02 	vpop	{d8}
 80193ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b2:	463e      	mov	r6, r7
 80193b4:	4625      	mov	r5, r4
 80193b6:	2401      	movs	r4, #1
 80193b8:	e7ca      	b.n	8019350 <__gethex+0xd4>
 80193ba:	f04f 0900 	mov.w	r9, #0
 80193be:	1cb1      	adds	r1, r6, #2
 80193c0:	e7d3      	b.n	801936a <__gethex+0xee>
 80193c2:	f04f 0901 	mov.w	r9, #1
 80193c6:	e7fa      	b.n	80193be <__gethex+0x142>
 80193c8:	230a      	movs	r3, #10
 80193ca:	fb03 0202 	mla	r2, r3, r2, r0
 80193ce:	3a10      	subs	r2, #16
 80193d0:	e7d4      	b.n	801937c <__gethex+0x100>
 80193d2:	4631      	mov	r1, r6
 80193d4:	e7df      	b.n	8019396 <__gethex+0x11a>
 80193d6:	1bf3      	subs	r3, r6, r7
 80193d8:	3b01      	subs	r3, #1
 80193da:	4621      	mov	r1, r4
 80193dc:	2b07      	cmp	r3, #7
 80193de:	dc0b      	bgt.n	80193f8 <__gethex+0x17c>
 80193e0:	ee18 0a10 	vmov	r0, s16
 80193e4:	f000 fa82 	bl	80198ec <_Balloc>
 80193e8:	4604      	mov	r4, r0
 80193ea:	b940      	cbnz	r0, 80193fe <__gethex+0x182>
 80193ec:	4b5d      	ldr	r3, [pc, #372]	; (8019564 <__gethex+0x2e8>)
 80193ee:	4602      	mov	r2, r0
 80193f0:	21de      	movs	r1, #222	; 0xde
 80193f2:	485d      	ldr	r0, [pc, #372]	; (8019568 <__gethex+0x2ec>)
 80193f4:	f001 f9d6 	bl	801a7a4 <__assert_func>
 80193f8:	3101      	adds	r1, #1
 80193fa:	105b      	asrs	r3, r3, #1
 80193fc:	e7ee      	b.n	80193dc <__gethex+0x160>
 80193fe:	f100 0914 	add.w	r9, r0, #20
 8019402:	f04f 0b00 	mov.w	fp, #0
 8019406:	f1ca 0301 	rsb	r3, sl, #1
 801940a:	f8cd 9008 	str.w	r9, [sp, #8]
 801940e:	f8cd b000 	str.w	fp, [sp]
 8019412:	9306      	str	r3, [sp, #24]
 8019414:	42b7      	cmp	r7, r6
 8019416:	d340      	bcc.n	801949a <__gethex+0x21e>
 8019418:	9802      	ldr	r0, [sp, #8]
 801941a:	9b00      	ldr	r3, [sp, #0]
 801941c:	f840 3b04 	str.w	r3, [r0], #4
 8019420:	eba0 0009 	sub.w	r0, r0, r9
 8019424:	1080      	asrs	r0, r0, #2
 8019426:	0146      	lsls	r6, r0, #5
 8019428:	6120      	str	r0, [r4, #16]
 801942a:	4618      	mov	r0, r3
 801942c:	f000 fb50 	bl	8019ad0 <__hi0bits>
 8019430:	1a30      	subs	r0, r6, r0
 8019432:	f8d8 6000 	ldr.w	r6, [r8]
 8019436:	42b0      	cmp	r0, r6
 8019438:	dd63      	ble.n	8019502 <__gethex+0x286>
 801943a:	1b87      	subs	r7, r0, r6
 801943c:	4639      	mov	r1, r7
 801943e:	4620      	mov	r0, r4
 8019440:	f000 fef1 	bl	801a226 <__any_on>
 8019444:	4682      	mov	sl, r0
 8019446:	b1a8      	cbz	r0, 8019474 <__gethex+0x1f8>
 8019448:	1e7b      	subs	r3, r7, #1
 801944a:	1159      	asrs	r1, r3, #5
 801944c:	f003 021f 	and.w	r2, r3, #31
 8019450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019454:	f04f 0a01 	mov.w	sl, #1
 8019458:	fa0a f202 	lsl.w	r2, sl, r2
 801945c:	420a      	tst	r2, r1
 801945e:	d009      	beq.n	8019474 <__gethex+0x1f8>
 8019460:	4553      	cmp	r3, sl
 8019462:	dd05      	ble.n	8019470 <__gethex+0x1f4>
 8019464:	1eb9      	subs	r1, r7, #2
 8019466:	4620      	mov	r0, r4
 8019468:	f000 fedd 	bl	801a226 <__any_on>
 801946c:	2800      	cmp	r0, #0
 801946e:	d145      	bne.n	80194fc <__gethex+0x280>
 8019470:	f04f 0a02 	mov.w	sl, #2
 8019474:	4639      	mov	r1, r7
 8019476:	4620      	mov	r0, r4
 8019478:	f7ff fe98 	bl	80191ac <rshift>
 801947c:	443d      	add	r5, r7
 801947e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019482:	42ab      	cmp	r3, r5
 8019484:	da4c      	bge.n	8019520 <__gethex+0x2a4>
 8019486:	ee18 0a10 	vmov	r0, s16
 801948a:	4621      	mov	r1, r4
 801948c:	f000 fa6e 	bl	801996c <_Bfree>
 8019490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019492:	2300      	movs	r3, #0
 8019494:	6013      	str	r3, [r2, #0]
 8019496:	27a3      	movs	r7, #163	; 0xa3
 8019498:	e785      	b.n	80193a6 <__gethex+0x12a>
 801949a:	1e73      	subs	r3, r6, #1
 801949c:	9a05      	ldr	r2, [sp, #20]
 801949e:	9303      	str	r3, [sp, #12]
 80194a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80194a4:	4293      	cmp	r3, r2
 80194a6:	d019      	beq.n	80194dc <__gethex+0x260>
 80194a8:	f1bb 0f20 	cmp.w	fp, #32
 80194ac:	d107      	bne.n	80194be <__gethex+0x242>
 80194ae:	9b02      	ldr	r3, [sp, #8]
 80194b0:	9a00      	ldr	r2, [sp, #0]
 80194b2:	f843 2b04 	str.w	r2, [r3], #4
 80194b6:	9302      	str	r3, [sp, #8]
 80194b8:	2300      	movs	r3, #0
 80194ba:	9300      	str	r3, [sp, #0]
 80194bc:	469b      	mov	fp, r3
 80194be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80194c2:	f7ff fec5 	bl	8019250 <__hexdig_fun>
 80194c6:	9b00      	ldr	r3, [sp, #0]
 80194c8:	f000 000f 	and.w	r0, r0, #15
 80194cc:	fa00 f00b 	lsl.w	r0, r0, fp
 80194d0:	4303      	orrs	r3, r0
 80194d2:	9300      	str	r3, [sp, #0]
 80194d4:	f10b 0b04 	add.w	fp, fp, #4
 80194d8:	9b03      	ldr	r3, [sp, #12]
 80194da:	e00d      	b.n	80194f8 <__gethex+0x27c>
 80194dc:	9b03      	ldr	r3, [sp, #12]
 80194de:	9a06      	ldr	r2, [sp, #24]
 80194e0:	4413      	add	r3, r2
 80194e2:	42bb      	cmp	r3, r7
 80194e4:	d3e0      	bcc.n	80194a8 <__gethex+0x22c>
 80194e6:	4618      	mov	r0, r3
 80194e8:	9901      	ldr	r1, [sp, #4]
 80194ea:	9307      	str	r3, [sp, #28]
 80194ec:	4652      	mov	r2, sl
 80194ee:	f001 f937 	bl	801a760 <strncmp>
 80194f2:	9b07      	ldr	r3, [sp, #28]
 80194f4:	2800      	cmp	r0, #0
 80194f6:	d1d7      	bne.n	80194a8 <__gethex+0x22c>
 80194f8:	461e      	mov	r6, r3
 80194fa:	e78b      	b.n	8019414 <__gethex+0x198>
 80194fc:	f04f 0a03 	mov.w	sl, #3
 8019500:	e7b8      	b.n	8019474 <__gethex+0x1f8>
 8019502:	da0a      	bge.n	801951a <__gethex+0x29e>
 8019504:	1a37      	subs	r7, r6, r0
 8019506:	4621      	mov	r1, r4
 8019508:	ee18 0a10 	vmov	r0, s16
 801950c:	463a      	mov	r2, r7
 801950e:	f000 fc49 	bl	8019da4 <__lshift>
 8019512:	1bed      	subs	r5, r5, r7
 8019514:	4604      	mov	r4, r0
 8019516:	f100 0914 	add.w	r9, r0, #20
 801951a:	f04f 0a00 	mov.w	sl, #0
 801951e:	e7ae      	b.n	801947e <__gethex+0x202>
 8019520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019524:	42a8      	cmp	r0, r5
 8019526:	dd72      	ble.n	801960e <__gethex+0x392>
 8019528:	1b45      	subs	r5, r0, r5
 801952a:	42ae      	cmp	r6, r5
 801952c:	dc36      	bgt.n	801959c <__gethex+0x320>
 801952e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019532:	2b02      	cmp	r3, #2
 8019534:	d02a      	beq.n	801958c <__gethex+0x310>
 8019536:	2b03      	cmp	r3, #3
 8019538:	d02c      	beq.n	8019594 <__gethex+0x318>
 801953a:	2b01      	cmp	r3, #1
 801953c:	d11c      	bne.n	8019578 <__gethex+0x2fc>
 801953e:	42ae      	cmp	r6, r5
 8019540:	d11a      	bne.n	8019578 <__gethex+0x2fc>
 8019542:	2e01      	cmp	r6, #1
 8019544:	d112      	bne.n	801956c <__gethex+0x2f0>
 8019546:	9a04      	ldr	r2, [sp, #16]
 8019548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801954c:	6013      	str	r3, [r2, #0]
 801954e:	2301      	movs	r3, #1
 8019550:	6123      	str	r3, [r4, #16]
 8019552:	f8c9 3000 	str.w	r3, [r9]
 8019556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019558:	2762      	movs	r7, #98	; 0x62
 801955a:	601c      	str	r4, [r3, #0]
 801955c:	e723      	b.n	80193a6 <__gethex+0x12a>
 801955e:	bf00      	nop
 8019560:	0801ba40 	.word	0x0801ba40
 8019564:	0801b9c8 	.word	0x0801b9c8
 8019568:	0801b9d9 	.word	0x0801b9d9
 801956c:	1e71      	subs	r1, r6, #1
 801956e:	4620      	mov	r0, r4
 8019570:	f000 fe59 	bl	801a226 <__any_on>
 8019574:	2800      	cmp	r0, #0
 8019576:	d1e6      	bne.n	8019546 <__gethex+0x2ca>
 8019578:	ee18 0a10 	vmov	r0, s16
 801957c:	4621      	mov	r1, r4
 801957e:	f000 f9f5 	bl	801996c <_Bfree>
 8019582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019584:	2300      	movs	r3, #0
 8019586:	6013      	str	r3, [r2, #0]
 8019588:	2750      	movs	r7, #80	; 0x50
 801958a:	e70c      	b.n	80193a6 <__gethex+0x12a>
 801958c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801958e:	2b00      	cmp	r3, #0
 8019590:	d1f2      	bne.n	8019578 <__gethex+0x2fc>
 8019592:	e7d8      	b.n	8019546 <__gethex+0x2ca>
 8019594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019596:	2b00      	cmp	r3, #0
 8019598:	d1d5      	bne.n	8019546 <__gethex+0x2ca>
 801959a:	e7ed      	b.n	8019578 <__gethex+0x2fc>
 801959c:	1e6f      	subs	r7, r5, #1
 801959e:	f1ba 0f00 	cmp.w	sl, #0
 80195a2:	d131      	bne.n	8019608 <__gethex+0x38c>
 80195a4:	b127      	cbz	r7, 80195b0 <__gethex+0x334>
 80195a6:	4639      	mov	r1, r7
 80195a8:	4620      	mov	r0, r4
 80195aa:	f000 fe3c 	bl	801a226 <__any_on>
 80195ae:	4682      	mov	sl, r0
 80195b0:	117b      	asrs	r3, r7, #5
 80195b2:	2101      	movs	r1, #1
 80195b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80195b8:	f007 071f 	and.w	r7, r7, #31
 80195bc:	fa01 f707 	lsl.w	r7, r1, r7
 80195c0:	421f      	tst	r7, r3
 80195c2:	4629      	mov	r1, r5
 80195c4:	4620      	mov	r0, r4
 80195c6:	bf18      	it	ne
 80195c8:	f04a 0a02 	orrne.w	sl, sl, #2
 80195cc:	1b76      	subs	r6, r6, r5
 80195ce:	f7ff fded 	bl	80191ac <rshift>
 80195d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80195d6:	2702      	movs	r7, #2
 80195d8:	f1ba 0f00 	cmp.w	sl, #0
 80195dc:	d048      	beq.n	8019670 <__gethex+0x3f4>
 80195de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80195e2:	2b02      	cmp	r3, #2
 80195e4:	d015      	beq.n	8019612 <__gethex+0x396>
 80195e6:	2b03      	cmp	r3, #3
 80195e8:	d017      	beq.n	801961a <__gethex+0x39e>
 80195ea:	2b01      	cmp	r3, #1
 80195ec:	d109      	bne.n	8019602 <__gethex+0x386>
 80195ee:	f01a 0f02 	tst.w	sl, #2
 80195f2:	d006      	beq.n	8019602 <__gethex+0x386>
 80195f4:	f8d9 0000 	ldr.w	r0, [r9]
 80195f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80195fc:	f01a 0f01 	tst.w	sl, #1
 8019600:	d10e      	bne.n	8019620 <__gethex+0x3a4>
 8019602:	f047 0710 	orr.w	r7, r7, #16
 8019606:	e033      	b.n	8019670 <__gethex+0x3f4>
 8019608:	f04f 0a01 	mov.w	sl, #1
 801960c:	e7d0      	b.n	80195b0 <__gethex+0x334>
 801960e:	2701      	movs	r7, #1
 8019610:	e7e2      	b.n	80195d8 <__gethex+0x35c>
 8019612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019614:	f1c3 0301 	rsb	r3, r3, #1
 8019618:	9315      	str	r3, [sp, #84]	; 0x54
 801961a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801961c:	2b00      	cmp	r3, #0
 801961e:	d0f0      	beq.n	8019602 <__gethex+0x386>
 8019620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019624:	f104 0314 	add.w	r3, r4, #20
 8019628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801962c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019630:	f04f 0c00 	mov.w	ip, #0
 8019634:	4618      	mov	r0, r3
 8019636:	f853 2b04 	ldr.w	r2, [r3], #4
 801963a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801963e:	d01c      	beq.n	801967a <__gethex+0x3fe>
 8019640:	3201      	adds	r2, #1
 8019642:	6002      	str	r2, [r0, #0]
 8019644:	2f02      	cmp	r7, #2
 8019646:	f104 0314 	add.w	r3, r4, #20
 801964a:	d13f      	bne.n	80196cc <__gethex+0x450>
 801964c:	f8d8 2000 	ldr.w	r2, [r8]
 8019650:	3a01      	subs	r2, #1
 8019652:	42b2      	cmp	r2, r6
 8019654:	d10a      	bne.n	801966c <__gethex+0x3f0>
 8019656:	1171      	asrs	r1, r6, #5
 8019658:	2201      	movs	r2, #1
 801965a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801965e:	f006 061f 	and.w	r6, r6, #31
 8019662:	fa02 f606 	lsl.w	r6, r2, r6
 8019666:	421e      	tst	r6, r3
 8019668:	bf18      	it	ne
 801966a:	4617      	movne	r7, r2
 801966c:	f047 0720 	orr.w	r7, r7, #32
 8019670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019672:	601c      	str	r4, [r3, #0]
 8019674:	9b04      	ldr	r3, [sp, #16]
 8019676:	601d      	str	r5, [r3, #0]
 8019678:	e695      	b.n	80193a6 <__gethex+0x12a>
 801967a:	4299      	cmp	r1, r3
 801967c:	f843 cc04 	str.w	ip, [r3, #-4]
 8019680:	d8d8      	bhi.n	8019634 <__gethex+0x3b8>
 8019682:	68a3      	ldr	r3, [r4, #8]
 8019684:	459b      	cmp	fp, r3
 8019686:	db19      	blt.n	80196bc <__gethex+0x440>
 8019688:	6861      	ldr	r1, [r4, #4]
 801968a:	ee18 0a10 	vmov	r0, s16
 801968e:	3101      	adds	r1, #1
 8019690:	f000 f92c 	bl	80198ec <_Balloc>
 8019694:	4681      	mov	r9, r0
 8019696:	b918      	cbnz	r0, 80196a0 <__gethex+0x424>
 8019698:	4b1a      	ldr	r3, [pc, #104]	; (8019704 <__gethex+0x488>)
 801969a:	4602      	mov	r2, r0
 801969c:	2184      	movs	r1, #132	; 0x84
 801969e:	e6a8      	b.n	80193f2 <__gethex+0x176>
 80196a0:	6922      	ldr	r2, [r4, #16]
 80196a2:	3202      	adds	r2, #2
 80196a4:	f104 010c 	add.w	r1, r4, #12
 80196a8:	0092      	lsls	r2, r2, #2
 80196aa:	300c      	adds	r0, #12
 80196ac:	f7fd fa3e 	bl	8016b2c <memcpy>
 80196b0:	4621      	mov	r1, r4
 80196b2:	ee18 0a10 	vmov	r0, s16
 80196b6:	f000 f959 	bl	801996c <_Bfree>
 80196ba:	464c      	mov	r4, r9
 80196bc:	6923      	ldr	r3, [r4, #16]
 80196be:	1c5a      	adds	r2, r3, #1
 80196c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80196c4:	6122      	str	r2, [r4, #16]
 80196c6:	2201      	movs	r2, #1
 80196c8:	615a      	str	r2, [r3, #20]
 80196ca:	e7bb      	b.n	8019644 <__gethex+0x3c8>
 80196cc:	6922      	ldr	r2, [r4, #16]
 80196ce:	455a      	cmp	r2, fp
 80196d0:	dd0b      	ble.n	80196ea <__gethex+0x46e>
 80196d2:	2101      	movs	r1, #1
 80196d4:	4620      	mov	r0, r4
 80196d6:	f7ff fd69 	bl	80191ac <rshift>
 80196da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80196de:	3501      	adds	r5, #1
 80196e0:	42ab      	cmp	r3, r5
 80196e2:	f6ff aed0 	blt.w	8019486 <__gethex+0x20a>
 80196e6:	2701      	movs	r7, #1
 80196e8:	e7c0      	b.n	801966c <__gethex+0x3f0>
 80196ea:	f016 061f 	ands.w	r6, r6, #31
 80196ee:	d0fa      	beq.n	80196e6 <__gethex+0x46a>
 80196f0:	4453      	add	r3, sl
 80196f2:	f1c6 0620 	rsb	r6, r6, #32
 80196f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80196fa:	f000 f9e9 	bl	8019ad0 <__hi0bits>
 80196fe:	42b0      	cmp	r0, r6
 8019700:	dbe7      	blt.n	80196d2 <__gethex+0x456>
 8019702:	e7f0      	b.n	80196e6 <__gethex+0x46a>
 8019704:	0801b9c8 	.word	0x0801b9c8

08019708 <L_shift>:
 8019708:	f1c2 0208 	rsb	r2, r2, #8
 801970c:	0092      	lsls	r2, r2, #2
 801970e:	b570      	push	{r4, r5, r6, lr}
 8019710:	f1c2 0620 	rsb	r6, r2, #32
 8019714:	6843      	ldr	r3, [r0, #4]
 8019716:	6804      	ldr	r4, [r0, #0]
 8019718:	fa03 f506 	lsl.w	r5, r3, r6
 801971c:	432c      	orrs	r4, r5
 801971e:	40d3      	lsrs	r3, r2
 8019720:	6004      	str	r4, [r0, #0]
 8019722:	f840 3f04 	str.w	r3, [r0, #4]!
 8019726:	4288      	cmp	r0, r1
 8019728:	d3f4      	bcc.n	8019714 <L_shift+0xc>
 801972a:	bd70      	pop	{r4, r5, r6, pc}

0801972c <__match>:
 801972c:	b530      	push	{r4, r5, lr}
 801972e:	6803      	ldr	r3, [r0, #0]
 8019730:	3301      	adds	r3, #1
 8019732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019736:	b914      	cbnz	r4, 801973e <__match+0x12>
 8019738:	6003      	str	r3, [r0, #0]
 801973a:	2001      	movs	r0, #1
 801973c:	bd30      	pop	{r4, r5, pc}
 801973e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019746:	2d19      	cmp	r5, #25
 8019748:	bf98      	it	ls
 801974a:	3220      	addls	r2, #32
 801974c:	42a2      	cmp	r2, r4
 801974e:	d0f0      	beq.n	8019732 <__match+0x6>
 8019750:	2000      	movs	r0, #0
 8019752:	e7f3      	b.n	801973c <__match+0x10>

08019754 <__hexnan>:
 8019754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019758:	680b      	ldr	r3, [r1, #0]
 801975a:	115e      	asrs	r6, r3, #5
 801975c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019760:	f013 031f 	ands.w	r3, r3, #31
 8019764:	b087      	sub	sp, #28
 8019766:	bf18      	it	ne
 8019768:	3604      	addne	r6, #4
 801976a:	2500      	movs	r5, #0
 801976c:	1f37      	subs	r7, r6, #4
 801976e:	4690      	mov	r8, r2
 8019770:	6802      	ldr	r2, [r0, #0]
 8019772:	9301      	str	r3, [sp, #4]
 8019774:	4682      	mov	sl, r0
 8019776:	f846 5c04 	str.w	r5, [r6, #-4]
 801977a:	46b9      	mov	r9, r7
 801977c:	463c      	mov	r4, r7
 801977e:	9502      	str	r5, [sp, #8]
 8019780:	46ab      	mov	fp, r5
 8019782:	7851      	ldrb	r1, [r2, #1]
 8019784:	1c53      	adds	r3, r2, #1
 8019786:	9303      	str	r3, [sp, #12]
 8019788:	b341      	cbz	r1, 80197dc <__hexnan+0x88>
 801978a:	4608      	mov	r0, r1
 801978c:	9205      	str	r2, [sp, #20]
 801978e:	9104      	str	r1, [sp, #16]
 8019790:	f7ff fd5e 	bl	8019250 <__hexdig_fun>
 8019794:	2800      	cmp	r0, #0
 8019796:	d14f      	bne.n	8019838 <__hexnan+0xe4>
 8019798:	9904      	ldr	r1, [sp, #16]
 801979a:	9a05      	ldr	r2, [sp, #20]
 801979c:	2920      	cmp	r1, #32
 801979e:	d818      	bhi.n	80197d2 <__hexnan+0x7e>
 80197a0:	9b02      	ldr	r3, [sp, #8]
 80197a2:	459b      	cmp	fp, r3
 80197a4:	dd13      	ble.n	80197ce <__hexnan+0x7a>
 80197a6:	454c      	cmp	r4, r9
 80197a8:	d206      	bcs.n	80197b8 <__hexnan+0x64>
 80197aa:	2d07      	cmp	r5, #7
 80197ac:	dc04      	bgt.n	80197b8 <__hexnan+0x64>
 80197ae:	462a      	mov	r2, r5
 80197b0:	4649      	mov	r1, r9
 80197b2:	4620      	mov	r0, r4
 80197b4:	f7ff ffa8 	bl	8019708 <L_shift>
 80197b8:	4544      	cmp	r4, r8
 80197ba:	d950      	bls.n	801985e <__hexnan+0x10a>
 80197bc:	2300      	movs	r3, #0
 80197be:	f1a4 0904 	sub.w	r9, r4, #4
 80197c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80197c6:	f8cd b008 	str.w	fp, [sp, #8]
 80197ca:	464c      	mov	r4, r9
 80197cc:	461d      	mov	r5, r3
 80197ce:	9a03      	ldr	r2, [sp, #12]
 80197d0:	e7d7      	b.n	8019782 <__hexnan+0x2e>
 80197d2:	2929      	cmp	r1, #41	; 0x29
 80197d4:	d156      	bne.n	8019884 <__hexnan+0x130>
 80197d6:	3202      	adds	r2, #2
 80197d8:	f8ca 2000 	str.w	r2, [sl]
 80197dc:	f1bb 0f00 	cmp.w	fp, #0
 80197e0:	d050      	beq.n	8019884 <__hexnan+0x130>
 80197e2:	454c      	cmp	r4, r9
 80197e4:	d206      	bcs.n	80197f4 <__hexnan+0xa0>
 80197e6:	2d07      	cmp	r5, #7
 80197e8:	dc04      	bgt.n	80197f4 <__hexnan+0xa0>
 80197ea:	462a      	mov	r2, r5
 80197ec:	4649      	mov	r1, r9
 80197ee:	4620      	mov	r0, r4
 80197f0:	f7ff ff8a 	bl	8019708 <L_shift>
 80197f4:	4544      	cmp	r4, r8
 80197f6:	d934      	bls.n	8019862 <__hexnan+0x10e>
 80197f8:	f1a8 0204 	sub.w	r2, r8, #4
 80197fc:	4623      	mov	r3, r4
 80197fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8019802:	f842 1f04 	str.w	r1, [r2, #4]!
 8019806:	429f      	cmp	r7, r3
 8019808:	d2f9      	bcs.n	80197fe <__hexnan+0xaa>
 801980a:	1b3b      	subs	r3, r7, r4
 801980c:	f023 0303 	bic.w	r3, r3, #3
 8019810:	3304      	adds	r3, #4
 8019812:	3401      	adds	r4, #1
 8019814:	3e03      	subs	r6, #3
 8019816:	42b4      	cmp	r4, r6
 8019818:	bf88      	it	hi
 801981a:	2304      	movhi	r3, #4
 801981c:	4443      	add	r3, r8
 801981e:	2200      	movs	r2, #0
 8019820:	f843 2b04 	str.w	r2, [r3], #4
 8019824:	429f      	cmp	r7, r3
 8019826:	d2fb      	bcs.n	8019820 <__hexnan+0xcc>
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	b91b      	cbnz	r3, 8019834 <__hexnan+0xe0>
 801982c:	4547      	cmp	r7, r8
 801982e:	d127      	bne.n	8019880 <__hexnan+0x12c>
 8019830:	2301      	movs	r3, #1
 8019832:	603b      	str	r3, [r7, #0]
 8019834:	2005      	movs	r0, #5
 8019836:	e026      	b.n	8019886 <__hexnan+0x132>
 8019838:	3501      	adds	r5, #1
 801983a:	2d08      	cmp	r5, #8
 801983c:	f10b 0b01 	add.w	fp, fp, #1
 8019840:	dd06      	ble.n	8019850 <__hexnan+0xfc>
 8019842:	4544      	cmp	r4, r8
 8019844:	d9c3      	bls.n	80197ce <__hexnan+0x7a>
 8019846:	2300      	movs	r3, #0
 8019848:	f844 3c04 	str.w	r3, [r4, #-4]
 801984c:	2501      	movs	r5, #1
 801984e:	3c04      	subs	r4, #4
 8019850:	6822      	ldr	r2, [r4, #0]
 8019852:	f000 000f 	and.w	r0, r0, #15
 8019856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801985a:	6022      	str	r2, [r4, #0]
 801985c:	e7b7      	b.n	80197ce <__hexnan+0x7a>
 801985e:	2508      	movs	r5, #8
 8019860:	e7b5      	b.n	80197ce <__hexnan+0x7a>
 8019862:	9b01      	ldr	r3, [sp, #4]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d0df      	beq.n	8019828 <__hexnan+0xd4>
 8019868:	f04f 32ff 	mov.w	r2, #4294967295
 801986c:	f1c3 0320 	rsb	r3, r3, #32
 8019870:	fa22 f303 	lsr.w	r3, r2, r3
 8019874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019878:	401a      	ands	r2, r3
 801987a:	f846 2c04 	str.w	r2, [r6, #-4]
 801987e:	e7d3      	b.n	8019828 <__hexnan+0xd4>
 8019880:	3f04      	subs	r7, #4
 8019882:	e7d1      	b.n	8019828 <__hexnan+0xd4>
 8019884:	2004      	movs	r0, #4
 8019886:	b007      	add	sp, #28
 8019888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801988c <_localeconv_r>:
 801988c:	4800      	ldr	r0, [pc, #0]	; (8019890 <_localeconv_r+0x4>)
 801988e:	4770      	bx	lr
 8019890:	24000280 	.word	0x24000280

08019894 <_lseek_r>:
 8019894:	b538      	push	{r3, r4, r5, lr}
 8019896:	4d07      	ldr	r5, [pc, #28]	; (80198b4 <_lseek_r+0x20>)
 8019898:	4604      	mov	r4, r0
 801989a:	4608      	mov	r0, r1
 801989c:	4611      	mov	r1, r2
 801989e:	2200      	movs	r2, #0
 80198a0:	602a      	str	r2, [r5, #0]
 80198a2:	461a      	mov	r2, r3
 80198a4:	f7e9 ff60 	bl	8003768 <_lseek>
 80198a8:	1c43      	adds	r3, r0, #1
 80198aa:	d102      	bne.n	80198b2 <_lseek_r+0x1e>
 80198ac:	682b      	ldr	r3, [r5, #0]
 80198ae:	b103      	cbz	r3, 80198b2 <_lseek_r+0x1e>
 80198b0:	6023      	str	r3, [r4, #0]
 80198b2:	bd38      	pop	{r3, r4, r5, pc}
 80198b4:	24002948 	.word	0x24002948

080198b8 <malloc>:
 80198b8:	4b02      	ldr	r3, [pc, #8]	; (80198c4 <malloc+0xc>)
 80198ba:	4601      	mov	r1, r0
 80198bc:	6818      	ldr	r0, [r3, #0]
 80198be:	f000 bd55 	b.w	801a36c <_malloc_r>
 80198c2:	bf00      	nop
 80198c4:	24000128 	.word	0x24000128

080198c8 <__ascii_mbtowc>:
 80198c8:	b082      	sub	sp, #8
 80198ca:	b901      	cbnz	r1, 80198ce <__ascii_mbtowc+0x6>
 80198cc:	a901      	add	r1, sp, #4
 80198ce:	b142      	cbz	r2, 80198e2 <__ascii_mbtowc+0x1a>
 80198d0:	b14b      	cbz	r3, 80198e6 <__ascii_mbtowc+0x1e>
 80198d2:	7813      	ldrb	r3, [r2, #0]
 80198d4:	600b      	str	r3, [r1, #0]
 80198d6:	7812      	ldrb	r2, [r2, #0]
 80198d8:	1e10      	subs	r0, r2, #0
 80198da:	bf18      	it	ne
 80198dc:	2001      	movne	r0, #1
 80198de:	b002      	add	sp, #8
 80198e0:	4770      	bx	lr
 80198e2:	4610      	mov	r0, r2
 80198e4:	e7fb      	b.n	80198de <__ascii_mbtowc+0x16>
 80198e6:	f06f 0001 	mvn.w	r0, #1
 80198ea:	e7f8      	b.n	80198de <__ascii_mbtowc+0x16>

080198ec <_Balloc>:
 80198ec:	b570      	push	{r4, r5, r6, lr}
 80198ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80198f0:	4604      	mov	r4, r0
 80198f2:	460d      	mov	r5, r1
 80198f4:	b976      	cbnz	r6, 8019914 <_Balloc+0x28>
 80198f6:	2010      	movs	r0, #16
 80198f8:	f7ff ffde 	bl	80198b8 <malloc>
 80198fc:	4602      	mov	r2, r0
 80198fe:	6260      	str	r0, [r4, #36]	; 0x24
 8019900:	b920      	cbnz	r0, 801990c <_Balloc+0x20>
 8019902:	4b18      	ldr	r3, [pc, #96]	; (8019964 <_Balloc+0x78>)
 8019904:	4818      	ldr	r0, [pc, #96]	; (8019968 <_Balloc+0x7c>)
 8019906:	2166      	movs	r1, #102	; 0x66
 8019908:	f000 ff4c 	bl	801a7a4 <__assert_func>
 801990c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019910:	6006      	str	r6, [r0, #0]
 8019912:	60c6      	str	r6, [r0, #12]
 8019914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019916:	68f3      	ldr	r3, [r6, #12]
 8019918:	b183      	cbz	r3, 801993c <_Balloc+0x50>
 801991a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801991c:	68db      	ldr	r3, [r3, #12]
 801991e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019922:	b9b8      	cbnz	r0, 8019954 <_Balloc+0x68>
 8019924:	2101      	movs	r1, #1
 8019926:	fa01 f605 	lsl.w	r6, r1, r5
 801992a:	1d72      	adds	r2, r6, #5
 801992c:	0092      	lsls	r2, r2, #2
 801992e:	4620      	mov	r0, r4
 8019930:	f000 fc9a 	bl	801a268 <_calloc_r>
 8019934:	b160      	cbz	r0, 8019950 <_Balloc+0x64>
 8019936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801993a:	e00e      	b.n	801995a <_Balloc+0x6e>
 801993c:	2221      	movs	r2, #33	; 0x21
 801993e:	2104      	movs	r1, #4
 8019940:	4620      	mov	r0, r4
 8019942:	f000 fc91 	bl	801a268 <_calloc_r>
 8019946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019948:	60f0      	str	r0, [r6, #12]
 801994a:	68db      	ldr	r3, [r3, #12]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d1e4      	bne.n	801991a <_Balloc+0x2e>
 8019950:	2000      	movs	r0, #0
 8019952:	bd70      	pop	{r4, r5, r6, pc}
 8019954:	6802      	ldr	r2, [r0, #0]
 8019956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801995a:	2300      	movs	r3, #0
 801995c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019960:	e7f7      	b.n	8019952 <_Balloc+0x66>
 8019962:	bf00      	nop
 8019964:	0801b956 	.word	0x0801b956
 8019968:	0801ba54 	.word	0x0801ba54

0801996c <_Bfree>:
 801996c:	b570      	push	{r4, r5, r6, lr}
 801996e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019970:	4605      	mov	r5, r0
 8019972:	460c      	mov	r4, r1
 8019974:	b976      	cbnz	r6, 8019994 <_Bfree+0x28>
 8019976:	2010      	movs	r0, #16
 8019978:	f7ff ff9e 	bl	80198b8 <malloc>
 801997c:	4602      	mov	r2, r0
 801997e:	6268      	str	r0, [r5, #36]	; 0x24
 8019980:	b920      	cbnz	r0, 801998c <_Bfree+0x20>
 8019982:	4b09      	ldr	r3, [pc, #36]	; (80199a8 <_Bfree+0x3c>)
 8019984:	4809      	ldr	r0, [pc, #36]	; (80199ac <_Bfree+0x40>)
 8019986:	218a      	movs	r1, #138	; 0x8a
 8019988:	f000 ff0c 	bl	801a7a4 <__assert_func>
 801998c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019990:	6006      	str	r6, [r0, #0]
 8019992:	60c6      	str	r6, [r0, #12]
 8019994:	b13c      	cbz	r4, 80199a6 <_Bfree+0x3a>
 8019996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019998:	6862      	ldr	r2, [r4, #4]
 801999a:	68db      	ldr	r3, [r3, #12]
 801999c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80199a0:	6021      	str	r1, [r4, #0]
 80199a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80199a6:	bd70      	pop	{r4, r5, r6, pc}
 80199a8:	0801b956 	.word	0x0801b956
 80199ac:	0801ba54 	.word	0x0801ba54

080199b0 <__multadd>:
 80199b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b4:	690d      	ldr	r5, [r1, #16]
 80199b6:	4607      	mov	r7, r0
 80199b8:	460c      	mov	r4, r1
 80199ba:	461e      	mov	r6, r3
 80199bc:	f101 0c14 	add.w	ip, r1, #20
 80199c0:	2000      	movs	r0, #0
 80199c2:	f8dc 3000 	ldr.w	r3, [ip]
 80199c6:	b299      	uxth	r1, r3
 80199c8:	fb02 6101 	mla	r1, r2, r1, r6
 80199cc:	0c1e      	lsrs	r6, r3, #16
 80199ce:	0c0b      	lsrs	r3, r1, #16
 80199d0:	fb02 3306 	mla	r3, r2, r6, r3
 80199d4:	b289      	uxth	r1, r1
 80199d6:	3001      	adds	r0, #1
 80199d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80199dc:	4285      	cmp	r5, r0
 80199de:	f84c 1b04 	str.w	r1, [ip], #4
 80199e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80199e6:	dcec      	bgt.n	80199c2 <__multadd+0x12>
 80199e8:	b30e      	cbz	r6, 8019a2e <__multadd+0x7e>
 80199ea:	68a3      	ldr	r3, [r4, #8]
 80199ec:	42ab      	cmp	r3, r5
 80199ee:	dc19      	bgt.n	8019a24 <__multadd+0x74>
 80199f0:	6861      	ldr	r1, [r4, #4]
 80199f2:	4638      	mov	r0, r7
 80199f4:	3101      	adds	r1, #1
 80199f6:	f7ff ff79 	bl	80198ec <_Balloc>
 80199fa:	4680      	mov	r8, r0
 80199fc:	b928      	cbnz	r0, 8019a0a <__multadd+0x5a>
 80199fe:	4602      	mov	r2, r0
 8019a00:	4b0c      	ldr	r3, [pc, #48]	; (8019a34 <__multadd+0x84>)
 8019a02:	480d      	ldr	r0, [pc, #52]	; (8019a38 <__multadd+0x88>)
 8019a04:	21b5      	movs	r1, #181	; 0xb5
 8019a06:	f000 fecd 	bl	801a7a4 <__assert_func>
 8019a0a:	6922      	ldr	r2, [r4, #16]
 8019a0c:	3202      	adds	r2, #2
 8019a0e:	f104 010c 	add.w	r1, r4, #12
 8019a12:	0092      	lsls	r2, r2, #2
 8019a14:	300c      	adds	r0, #12
 8019a16:	f7fd f889 	bl	8016b2c <memcpy>
 8019a1a:	4621      	mov	r1, r4
 8019a1c:	4638      	mov	r0, r7
 8019a1e:	f7ff ffa5 	bl	801996c <_Bfree>
 8019a22:	4644      	mov	r4, r8
 8019a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019a28:	3501      	adds	r5, #1
 8019a2a:	615e      	str	r6, [r3, #20]
 8019a2c:	6125      	str	r5, [r4, #16]
 8019a2e:	4620      	mov	r0, r4
 8019a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a34:	0801b9c8 	.word	0x0801b9c8
 8019a38:	0801ba54 	.word	0x0801ba54

08019a3c <__s2b>:
 8019a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a40:	460c      	mov	r4, r1
 8019a42:	4615      	mov	r5, r2
 8019a44:	461f      	mov	r7, r3
 8019a46:	2209      	movs	r2, #9
 8019a48:	3308      	adds	r3, #8
 8019a4a:	4606      	mov	r6, r0
 8019a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8019a50:	2100      	movs	r1, #0
 8019a52:	2201      	movs	r2, #1
 8019a54:	429a      	cmp	r2, r3
 8019a56:	db09      	blt.n	8019a6c <__s2b+0x30>
 8019a58:	4630      	mov	r0, r6
 8019a5a:	f7ff ff47 	bl	80198ec <_Balloc>
 8019a5e:	b940      	cbnz	r0, 8019a72 <__s2b+0x36>
 8019a60:	4602      	mov	r2, r0
 8019a62:	4b19      	ldr	r3, [pc, #100]	; (8019ac8 <__s2b+0x8c>)
 8019a64:	4819      	ldr	r0, [pc, #100]	; (8019acc <__s2b+0x90>)
 8019a66:	21ce      	movs	r1, #206	; 0xce
 8019a68:	f000 fe9c 	bl	801a7a4 <__assert_func>
 8019a6c:	0052      	lsls	r2, r2, #1
 8019a6e:	3101      	adds	r1, #1
 8019a70:	e7f0      	b.n	8019a54 <__s2b+0x18>
 8019a72:	9b08      	ldr	r3, [sp, #32]
 8019a74:	6143      	str	r3, [r0, #20]
 8019a76:	2d09      	cmp	r5, #9
 8019a78:	f04f 0301 	mov.w	r3, #1
 8019a7c:	6103      	str	r3, [r0, #16]
 8019a7e:	dd16      	ble.n	8019aae <__s2b+0x72>
 8019a80:	f104 0909 	add.w	r9, r4, #9
 8019a84:	46c8      	mov	r8, r9
 8019a86:	442c      	add	r4, r5
 8019a88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019a8c:	4601      	mov	r1, r0
 8019a8e:	3b30      	subs	r3, #48	; 0x30
 8019a90:	220a      	movs	r2, #10
 8019a92:	4630      	mov	r0, r6
 8019a94:	f7ff ff8c 	bl	80199b0 <__multadd>
 8019a98:	45a0      	cmp	r8, r4
 8019a9a:	d1f5      	bne.n	8019a88 <__s2b+0x4c>
 8019a9c:	f1a5 0408 	sub.w	r4, r5, #8
 8019aa0:	444c      	add	r4, r9
 8019aa2:	1b2d      	subs	r5, r5, r4
 8019aa4:	1963      	adds	r3, r4, r5
 8019aa6:	42bb      	cmp	r3, r7
 8019aa8:	db04      	blt.n	8019ab4 <__s2b+0x78>
 8019aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019aae:	340a      	adds	r4, #10
 8019ab0:	2509      	movs	r5, #9
 8019ab2:	e7f6      	b.n	8019aa2 <__s2b+0x66>
 8019ab4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019ab8:	4601      	mov	r1, r0
 8019aba:	3b30      	subs	r3, #48	; 0x30
 8019abc:	220a      	movs	r2, #10
 8019abe:	4630      	mov	r0, r6
 8019ac0:	f7ff ff76 	bl	80199b0 <__multadd>
 8019ac4:	e7ee      	b.n	8019aa4 <__s2b+0x68>
 8019ac6:	bf00      	nop
 8019ac8:	0801b9c8 	.word	0x0801b9c8
 8019acc:	0801ba54 	.word	0x0801ba54

08019ad0 <__hi0bits>:
 8019ad0:	0c03      	lsrs	r3, r0, #16
 8019ad2:	041b      	lsls	r3, r3, #16
 8019ad4:	b9d3      	cbnz	r3, 8019b0c <__hi0bits+0x3c>
 8019ad6:	0400      	lsls	r0, r0, #16
 8019ad8:	2310      	movs	r3, #16
 8019ada:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019ade:	bf04      	itt	eq
 8019ae0:	0200      	lsleq	r0, r0, #8
 8019ae2:	3308      	addeq	r3, #8
 8019ae4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019ae8:	bf04      	itt	eq
 8019aea:	0100      	lsleq	r0, r0, #4
 8019aec:	3304      	addeq	r3, #4
 8019aee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019af2:	bf04      	itt	eq
 8019af4:	0080      	lsleq	r0, r0, #2
 8019af6:	3302      	addeq	r3, #2
 8019af8:	2800      	cmp	r0, #0
 8019afa:	db05      	blt.n	8019b08 <__hi0bits+0x38>
 8019afc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019b00:	f103 0301 	add.w	r3, r3, #1
 8019b04:	bf08      	it	eq
 8019b06:	2320      	moveq	r3, #32
 8019b08:	4618      	mov	r0, r3
 8019b0a:	4770      	bx	lr
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	e7e4      	b.n	8019ada <__hi0bits+0xa>

08019b10 <__lo0bits>:
 8019b10:	6803      	ldr	r3, [r0, #0]
 8019b12:	f013 0207 	ands.w	r2, r3, #7
 8019b16:	4601      	mov	r1, r0
 8019b18:	d00b      	beq.n	8019b32 <__lo0bits+0x22>
 8019b1a:	07da      	lsls	r2, r3, #31
 8019b1c:	d423      	bmi.n	8019b66 <__lo0bits+0x56>
 8019b1e:	0798      	lsls	r0, r3, #30
 8019b20:	bf49      	itett	mi
 8019b22:	085b      	lsrmi	r3, r3, #1
 8019b24:	089b      	lsrpl	r3, r3, #2
 8019b26:	2001      	movmi	r0, #1
 8019b28:	600b      	strmi	r3, [r1, #0]
 8019b2a:	bf5c      	itt	pl
 8019b2c:	600b      	strpl	r3, [r1, #0]
 8019b2e:	2002      	movpl	r0, #2
 8019b30:	4770      	bx	lr
 8019b32:	b298      	uxth	r0, r3
 8019b34:	b9a8      	cbnz	r0, 8019b62 <__lo0bits+0x52>
 8019b36:	0c1b      	lsrs	r3, r3, #16
 8019b38:	2010      	movs	r0, #16
 8019b3a:	b2da      	uxtb	r2, r3
 8019b3c:	b90a      	cbnz	r2, 8019b42 <__lo0bits+0x32>
 8019b3e:	3008      	adds	r0, #8
 8019b40:	0a1b      	lsrs	r3, r3, #8
 8019b42:	071a      	lsls	r2, r3, #28
 8019b44:	bf04      	itt	eq
 8019b46:	091b      	lsreq	r3, r3, #4
 8019b48:	3004      	addeq	r0, #4
 8019b4a:	079a      	lsls	r2, r3, #30
 8019b4c:	bf04      	itt	eq
 8019b4e:	089b      	lsreq	r3, r3, #2
 8019b50:	3002      	addeq	r0, #2
 8019b52:	07da      	lsls	r2, r3, #31
 8019b54:	d403      	bmi.n	8019b5e <__lo0bits+0x4e>
 8019b56:	085b      	lsrs	r3, r3, #1
 8019b58:	f100 0001 	add.w	r0, r0, #1
 8019b5c:	d005      	beq.n	8019b6a <__lo0bits+0x5a>
 8019b5e:	600b      	str	r3, [r1, #0]
 8019b60:	4770      	bx	lr
 8019b62:	4610      	mov	r0, r2
 8019b64:	e7e9      	b.n	8019b3a <__lo0bits+0x2a>
 8019b66:	2000      	movs	r0, #0
 8019b68:	4770      	bx	lr
 8019b6a:	2020      	movs	r0, #32
 8019b6c:	4770      	bx	lr
	...

08019b70 <__i2b>:
 8019b70:	b510      	push	{r4, lr}
 8019b72:	460c      	mov	r4, r1
 8019b74:	2101      	movs	r1, #1
 8019b76:	f7ff feb9 	bl	80198ec <_Balloc>
 8019b7a:	4602      	mov	r2, r0
 8019b7c:	b928      	cbnz	r0, 8019b8a <__i2b+0x1a>
 8019b7e:	4b05      	ldr	r3, [pc, #20]	; (8019b94 <__i2b+0x24>)
 8019b80:	4805      	ldr	r0, [pc, #20]	; (8019b98 <__i2b+0x28>)
 8019b82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019b86:	f000 fe0d 	bl	801a7a4 <__assert_func>
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	6144      	str	r4, [r0, #20]
 8019b8e:	6103      	str	r3, [r0, #16]
 8019b90:	bd10      	pop	{r4, pc}
 8019b92:	bf00      	nop
 8019b94:	0801b9c8 	.word	0x0801b9c8
 8019b98:	0801ba54 	.word	0x0801ba54

08019b9c <__multiply>:
 8019b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba0:	4691      	mov	r9, r2
 8019ba2:	690a      	ldr	r2, [r1, #16]
 8019ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	bfb8      	it	lt
 8019bac:	460b      	movlt	r3, r1
 8019bae:	460c      	mov	r4, r1
 8019bb0:	bfbc      	itt	lt
 8019bb2:	464c      	movlt	r4, r9
 8019bb4:	4699      	movlt	r9, r3
 8019bb6:	6927      	ldr	r7, [r4, #16]
 8019bb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019bbc:	68a3      	ldr	r3, [r4, #8]
 8019bbe:	6861      	ldr	r1, [r4, #4]
 8019bc0:	eb07 060a 	add.w	r6, r7, sl
 8019bc4:	42b3      	cmp	r3, r6
 8019bc6:	b085      	sub	sp, #20
 8019bc8:	bfb8      	it	lt
 8019bca:	3101      	addlt	r1, #1
 8019bcc:	f7ff fe8e 	bl	80198ec <_Balloc>
 8019bd0:	b930      	cbnz	r0, 8019be0 <__multiply+0x44>
 8019bd2:	4602      	mov	r2, r0
 8019bd4:	4b44      	ldr	r3, [pc, #272]	; (8019ce8 <__multiply+0x14c>)
 8019bd6:	4845      	ldr	r0, [pc, #276]	; (8019cec <__multiply+0x150>)
 8019bd8:	f240 115d 	movw	r1, #349	; 0x15d
 8019bdc:	f000 fde2 	bl	801a7a4 <__assert_func>
 8019be0:	f100 0514 	add.w	r5, r0, #20
 8019be4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019be8:	462b      	mov	r3, r5
 8019bea:	2200      	movs	r2, #0
 8019bec:	4543      	cmp	r3, r8
 8019bee:	d321      	bcc.n	8019c34 <__multiply+0x98>
 8019bf0:	f104 0314 	add.w	r3, r4, #20
 8019bf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019bf8:	f109 0314 	add.w	r3, r9, #20
 8019bfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019c00:	9202      	str	r2, [sp, #8]
 8019c02:	1b3a      	subs	r2, r7, r4
 8019c04:	3a15      	subs	r2, #21
 8019c06:	f022 0203 	bic.w	r2, r2, #3
 8019c0a:	3204      	adds	r2, #4
 8019c0c:	f104 0115 	add.w	r1, r4, #21
 8019c10:	428f      	cmp	r7, r1
 8019c12:	bf38      	it	cc
 8019c14:	2204      	movcc	r2, #4
 8019c16:	9201      	str	r2, [sp, #4]
 8019c18:	9a02      	ldr	r2, [sp, #8]
 8019c1a:	9303      	str	r3, [sp, #12]
 8019c1c:	429a      	cmp	r2, r3
 8019c1e:	d80c      	bhi.n	8019c3a <__multiply+0x9e>
 8019c20:	2e00      	cmp	r6, #0
 8019c22:	dd03      	ble.n	8019c2c <__multiply+0x90>
 8019c24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d05a      	beq.n	8019ce2 <__multiply+0x146>
 8019c2c:	6106      	str	r6, [r0, #16]
 8019c2e:	b005      	add	sp, #20
 8019c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c34:	f843 2b04 	str.w	r2, [r3], #4
 8019c38:	e7d8      	b.n	8019bec <__multiply+0x50>
 8019c3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8019c3e:	f1ba 0f00 	cmp.w	sl, #0
 8019c42:	d024      	beq.n	8019c8e <__multiply+0xf2>
 8019c44:	f104 0e14 	add.w	lr, r4, #20
 8019c48:	46a9      	mov	r9, r5
 8019c4a:	f04f 0c00 	mov.w	ip, #0
 8019c4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019c52:	f8d9 1000 	ldr.w	r1, [r9]
 8019c56:	fa1f fb82 	uxth.w	fp, r2
 8019c5a:	b289      	uxth	r1, r1
 8019c5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8019c60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019c64:	f8d9 2000 	ldr.w	r2, [r9]
 8019c68:	4461      	add	r1, ip
 8019c6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019c6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8019c72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019c76:	b289      	uxth	r1, r1
 8019c78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019c7c:	4577      	cmp	r7, lr
 8019c7e:	f849 1b04 	str.w	r1, [r9], #4
 8019c82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019c86:	d8e2      	bhi.n	8019c4e <__multiply+0xb2>
 8019c88:	9a01      	ldr	r2, [sp, #4]
 8019c8a:	f845 c002 	str.w	ip, [r5, r2]
 8019c8e:	9a03      	ldr	r2, [sp, #12]
 8019c90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019c94:	3304      	adds	r3, #4
 8019c96:	f1b9 0f00 	cmp.w	r9, #0
 8019c9a:	d020      	beq.n	8019cde <__multiply+0x142>
 8019c9c:	6829      	ldr	r1, [r5, #0]
 8019c9e:	f104 0c14 	add.w	ip, r4, #20
 8019ca2:	46ae      	mov	lr, r5
 8019ca4:	f04f 0a00 	mov.w	sl, #0
 8019ca8:	f8bc b000 	ldrh.w	fp, [ip]
 8019cac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019cb0:	fb09 220b 	mla	r2, r9, fp, r2
 8019cb4:	4492      	add	sl, r2
 8019cb6:	b289      	uxth	r1, r1
 8019cb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8019cbc:	f84e 1b04 	str.w	r1, [lr], #4
 8019cc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8019cc4:	f8be 1000 	ldrh.w	r1, [lr]
 8019cc8:	0c12      	lsrs	r2, r2, #16
 8019cca:	fb09 1102 	mla	r1, r9, r2, r1
 8019cce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8019cd2:	4567      	cmp	r7, ip
 8019cd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019cd8:	d8e6      	bhi.n	8019ca8 <__multiply+0x10c>
 8019cda:	9a01      	ldr	r2, [sp, #4]
 8019cdc:	50a9      	str	r1, [r5, r2]
 8019cde:	3504      	adds	r5, #4
 8019ce0:	e79a      	b.n	8019c18 <__multiply+0x7c>
 8019ce2:	3e01      	subs	r6, #1
 8019ce4:	e79c      	b.n	8019c20 <__multiply+0x84>
 8019ce6:	bf00      	nop
 8019ce8:	0801b9c8 	.word	0x0801b9c8
 8019cec:	0801ba54 	.word	0x0801ba54

08019cf0 <__pow5mult>:
 8019cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cf4:	4615      	mov	r5, r2
 8019cf6:	f012 0203 	ands.w	r2, r2, #3
 8019cfa:	4606      	mov	r6, r0
 8019cfc:	460f      	mov	r7, r1
 8019cfe:	d007      	beq.n	8019d10 <__pow5mult+0x20>
 8019d00:	4c25      	ldr	r4, [pc, #148]	; (8019d98 <__pow5mult+0xa8>)
 8019d02:	3a01      	subs	r2, #1
 8019d04:	2300      	movs	r3, #0
 8019d06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019d0a:	f7ff fe51 	bl	80199b0 <__multadd>
 8019d0e:	4607      	mov	r7, r0
 8019d10:	10ad      	asrs	r5, r5, #2
 8019d12:	d03d      	beq.n	8019d90 <__pow5mult+0xa0>
 8019d14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019d16:	b97c      	cbnz	r4, 8019d38 <__pow5mult+0x48>
 8019d18:	2010      	movs	r0, #16
 8019d1a:	f7ff fdcd 	bl	80198b8 <malloc>
 8019d1e:	4602      	mov	r2, r0
 8019d20:	6270      	str	r0, [r6, #36]	; 0x24
 8019d22:	b928      	cbnz	r0, 8019d30 <__pow5mult+0x40>
 8019d24:	4b1d      	ldr	r3, [pc, #116]	; (8019d9c <__pow5mult+0xac>)
 8019d26:	481e      	ldr	r0, [pc, #120]	; (8019da0 <__pow5mult+0xb0>)
 8019d28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019d2c:	f000 fd3a 	bl	801a7a4 <__assert_func>
 8019d30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019d34:	6004      	str	r4, [r0, #0]
 8019d36:	60c4      	str	r4, [r0, #12]
 8019d38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019d3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019d40:	b94c      	cbnz	r4, 8019d56 <__pow5mult+0x66>
 8019d42:	f240 2171 	movw	r1, #625	; 0x271
 8019d46:	4630      	mov	r0, r6
 8019d48:	f7ff ff12 	bl	8019b70 <__i2b>
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019d52:	4604      	mov	r4, r0
 8019d54:	6003      	str	r3, [r0, #0]
 8019d56:	f04f 0900 	mov.w	r9, #0
 8019d5a:	07eb      	lsls	r3, r5, #31
 8019d5c:	d50a      	bpl.n	8019d74 <__pow5mult+0x84>
 8019d5e:	4639      	mov	r1, r7
 8019d60:	4622      	mov	r2, r4
 8019d62:	4630      	mov	r0, r6
 8019d64:	f7ff ff1a 	bl	8019b9c <__multiply>
 8019d68:	4639      	mov	r1, r7
 8019d6a:	4680      	mov	r8, r0
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	f7ff fdfd 	bl	801996c <_Bfree>
 8019d72:	4647      	mov	r7, r8
 8019d74:	106d      	asrs	r5, r5, #1
 8019d76:	d00b      	beq.n	8019d90 <__pow5mult+0xa0>
 8019d78:	6820      	ldr	r0, [r4, #0]
 8019d7a:	b938      	cbnz	r0, 8019d8c <__pow5mult+0x9c>
 8019d7c:	4622      	mov	r2, r4
 8019d7e:	4621      	mov	r1, r4
 8019d80:	4630      	mov	r0, r6
 8019d82:	f7ff ff0b 	bl	8019b9c <__multiply>
 8019d86:	6020      	str	r0, [r4, #0]
 8019d88:	f8c0 9000 	str.w	r9, [r0]
 8019d8c:	4604      	mov	r4, r0
 8019d8e:	e7e4      	b.n	8019d5a <__pow5mult+0x6a>
 8019d90:	4638      	mov	r0, r7
 8019d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d96:	bf00      	nop
 8019d98:	0801bba0 	.word	0x0801bba0
 8019d9c:	0801b956 	.word	0x0801b956
 8019da0:	0801ba54 	.word	0x0801ba54

08019da4 <__lshift>:
 8019da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019da8:	460c      	mov	r4, r1
 8019daa:	6849      	ldr	r1, [r1, #4]
 8019dac:	6923      	ldr	r3, [r4, #16]
 8019dae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019db2:	68a3      	ldr	r3, [r4, #8]
 8019db4:	4607      	mov	r7, r0
 8019db6:	4691      	mov	r9, r2
 8019db8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019dbc:	f108 0601 	add.w	r6, r8, #1
 8019dc0:	42b3      	cmp	r3, r6
 8019dc2:	db0b      	blt.n	8019ddc <__lshift+0x38>
 8019dc4:	4638      	mov	r0, r7
 8019dc6:	f7ff fd91 	bl	80198ec <_Balloc>
 8019dca:	4605      	mov	r5, r0
 8019dcc:	b948      	cbnz	r0, 8019de2 <__lshift+0x3e>
 8019dce:	4602      	mov	r2, r0
 8019dd0:	4b2a      	ldr	r3, [pc, #168]	; (8019e7c <__lshift+0xd8>)
 8019dd2:	482b      	ldr	r0, [pc, #172]	; (8019e80 <__lshift+0xdc>)
 8019dd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019dd8:	f000 fce4 	bl	801a7a4 <__assert_func>
 8019ddc:	3101      	adds	r1, #1
 8019dde:	005b      	lsls	r3, r3, #1
 8019de0:	e7ee      	b.n	8019dc0 <__lshift+0x1c>
 8019de2:	2300      	movs	r3, #0
 8019de4:	f100 0114 	add.w	r1, r0, #20
 8019de8:	f100 0210 	add.w	r2, r0, #16
 8019dec:	4618      	mov	r0, r3
 8019dee:	4553      	cmp	r3, sl
 8019df0:	db37      	blt.n	8019e62 <__lshift+0xbe>
 8019df2:	6920      	ldr	r0, [r4, #16]
 8019df4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019df8:	f104 0314 	add.w	r3, r4, #20
 8019dfc:	f019 091f 	ands.w	r9, r9, #31
 8019e00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019e04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019e08:	d02f      	beq.n	8019e6a <__lshift+0xc6>
 8019e0a:	f1c9 0e20 	rsb	lr, r9, #32
 8019e0e:	468a      	mov	sl, r1
 8019e10:	f04f 0c00 	mov.w	ip, #0
 8019e14:	681a      	ldr	r2, [r3, #0]
 8019e16:	fa02 f209 	lsl.w	r2, r2, r9
 8019e1a:	ea42 020c 	orr.w	r2, r2, ip
 8019e1e:	f84a 2b04 	str.w	r2, [sl], #4
 8019e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e26:	4298      	cmp	r0, r3
 8019e28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019e2c:	d8f2      	bhi.n	8019e14 <__lshift+0x70>
 8019e2e:	1b03      	subs	r3, r0, r4
 8019e30:	3b15      	subs	r3, #21
 8019e32:	f023 0303 	bic.w	r3, r3, #3
 8019e36:	3304      	adds	r3, #4
 8019e38:	f104 0215 	add.w	r2, r4, #21
 8019e3c:	4290      	cmp	r0, r2
 8019e3e:	bf38      	it	cc
 8019e40:	2304      	movcc	r3, #4
 8019e42:	f841 c003 	str.w	ip, [r1, r3]
 8019e46:	f1bc 0f00 	cmp.w	ip, #0
 8019e4a:	d001      	beq.n	8019e50 <__lshift+0xac>
 8019e4c:	f108 0602 	add.w	r6, r8, #2
 8019e50:	3e01      	subs	r6, #1
 8019e52:	4638      	mov	r0, r7
 8019e54:	612e      	str	r6, [r5, #16]
 8019e56:	4621      	mov	r1, r4
 8019e58:	f7ff fd88 	bl	801996c <_Bfree>
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8019e66:	3301      	adds	r3, #1
 8019e68:	e7c1      	b.n	8019dee <__lshift+0x4a>
 8019e6a:	3904      	subs	r1, #4
 8019e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e70:	f841 2f04 	str.w	r2, [r1, #4]!
 8019e74:	4298      	cmp	r0, r3
 8019e76:	d8f9      	bhi.n	8019e6c <__lshift+0xc8>
 8019e78:	e7ea      	b.n	8019e50 <__lshift+0xac>
 8019e7a:	bf00      	nop
 8019e7c:	0801b9c8 	.word	0x0801b9c8
 8019e80:	0801ba54 	.word	0x0801ba54

08019e84 <__mcmp>:
 8019e84:	b530      	push	{r4, r5, lr}
 8019e86:	6902      	ldr	r2, [r0, #16]
 8019e88:	690c      	ldr	r4, [r1, #16]
 8019e8a:	1b12      	subs	r2, r2, r4
 8019e8c:	d10e      	bne.n	8019eac <__mcmp+0x28>
 8019e8e:	f100 0314 	add.w	r3, r0, #20
 8019e92:	3114      	adds	r1, #20
 8019e94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019e98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019e9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019ea0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019ea4:	42a5      	cmp	r5, r4
 8019ea6:	d003      	beq.n	8019eb0 <__mcmp+0x2c>
 8019ea8:	d305      	bcc.n	8019eb6 <__mcmp+0x32>
 8019eaa:	2201      	movs	r2, #1
 8019eac:	4610      	mov	r0, r2
 8019eae:	bd30      	pop	{r4, r5, pc}
 8019eb0:	4283      	cmp	r3, r0
 8019eb2:	d3f3      	bcc.n	8019e9c <__mcmp+0x18>
 8019eb4:	e7fa      	b.n	8019eac <__mcmp+0x28>
 8019eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8019eba:	e7f7      	b.n	8019eac <__mcmp+0x28>

08019ebc <__mdiff>:
 8019ebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec0:	460c      	mov	r4, r1
 8019ec2:	4606      	mov	r6, r0
 8019ec4:	4611      	mov	r1, r2
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	4690      	mov	r8, r2
 8019eca:	f7ff ffdb 	bl	8019e84 <__mcmp>
 8019ece:	1e05      	subs	r5, r0, #0
 8019ed0:	d110      	bne.n	8019ef4 <__mdiff+0x38>
 8019ed2:	4629      	mov	r1, r5
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	f7ff fd09 	bl	80198ec <_Balloc>
 8019eda:	b930      	cbnz	r0, 8019eea <__mdiff+0x2e>
 8019edc:	4b3a      	ldr	r3, [pc, #232]	; (8019fc8 <__mdiff+0x10c>)
 8019ede:	4602      	mov	r2, r0
 8019ee0:	f240 2132 	movw	r1, #562	; 0x232
 8019ee4:	4839      	ldr	r0, [pc, #228]	; (8019fcc <__mdiff+0x110>)
 8019ee6:	f000 fc5d 	bl	801a7a4 <__assert_func>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef4:	bfa4      	itt	ge
 8019ef6:	4643      	movge	r3, r8
 8019ef8:	46a0      	movge	r8, r4
 8019efa:	4630      	mov	r0, r6
 8019efc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019f00:	bfa6      	itte	ge
 8019f02:	461c      	movge	r4, r3
 8019f04:	2500      	movge	r5, #0
 8019f06:	2501      	movlt	r5, #1
 8019f08:	f7ff fcf0 	bl	80198ec <_Balloc>
 8019f0c:	b920      	cbnz	r0, 8019f18 <__mdiff+0x5c>
 8019f0e:	4b2e      	ldr	r3, [pc, #184]	; (8019fc8 <__mdiff+0x10c>)
 8019f10:	4602      	mov	r2, r0
 8019f12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019f16:	e7e5      	b.n	8019ee4 <__mdiff+0x28>
 8019f18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019f1c:	6926      	ldr	r6, [r4, #16]
 8019f1e:	60c5      	str	r5, [r0, #12]
 8019f20:	f104 0914 	add.w	r9, r4, #20
 8019f24:	f108 0514 	add.w	r5, r8, #20
 8019f28:	f100 0e14 	add.w	lr, r0, #20
 8019f2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019f30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019f34:	f108 0210 	add.w	r2, r8, #16
 8019f38:	46f2      	mov	sl, lr
 8019f3a:	2100      	movs	r1, #0
 8019f3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019f40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019f44:	fa1f f883 	uxth.w	r8, r3
 8019f48:	fa11 f18b 	uxtah	r1, r1, fp
 8019f4c:	0c1b      	lsrs	r3, r3, #16
 8019f4e:	eba1 0808 	sub.w	r8, r1, r8
 8019f52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019f56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019f5a:	fa1f f888 	uxth.w	r8, r8
 8019f5e:	1419      	asrs	r1, r3, #16
 8019f60:	454e      	cmp	r6, r9
 8019f62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019f66:	f84a 3b04 	str.w	r3, [sl], #4
 8019f6a:	d8e7      	bhi.n	8019f3c <__mdiff+0x80>
 8019f6c:	1b33      	subs	r3, r6, r4
 8019f6e:	3b15      	subs	r3, #21
 8019f70:	f023 0303 	bic.w	r3, r3, #3
 8019f74:	3304      	adds	r3, #4
 8019f76:	3415      	adds	r4, #21
 8019f78:	42a6      	cmp	r6, r4
 8019f7a:	bf38      	it	cc
 8019f7c:	2304      	movcc	r3, #4
 8019f7e:	441d      	add	r5, r3
 8019f80:	4473      	add	r3, lr
 8019f82:	469e      	mov	lr, r3
 8019f84:	462e      	mov	r6, r5
 8019f86:	4566      	cmp	r6, ip
 8019f88:	d30e      	bcc.n	8019fa8 <__mdiff+0xec>
 8019f8a:	f10c 0203 	add.w	r2, ip, #3
 8019f8e:	1b52      	subs	r2, r2, r5
 8019f90:	f022 0203 	bic.w	r2, r2, #3
 8019f94:	3d03      	subs	r5, #3
 8019f96:	45ac      	cmp	ip, r5
 8019f98:	bf38      	it	cc
 8019f9a:	2200      	movcc	r2, #0
 8019f9c:	441a      	add	r2, r3
 8019f9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019fa2:	b17b      	cbz	r3, 8019fc4 <__mdiff+0x108>
 8019fa4:	6107      	str	r7, [r0, #16]
 8019fa6:	e7a3      	b.n	8019ef0 <__mdiff+0x34>
 8019fa8:	f856 8b04 	ldr.w	r8, [r6], #4
 8019fac:	fa11 f288 	uxtah	r2, r1, r8
 8019fb0:	1414      	asrs	r4, r2, #16
 8019fb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019fb6:	b292      	uxth	r2, r2
 8019fb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019fbc:	f84e 2b04 	str.w	r2, [lr], #4
 8019fc0:	1421      	asrs	r1, r4, #16
 8019fc2:	e7e0      	b.n	8019f86 <__mdiff+0xca>
 8019fc4:	3f01      	subs	r7, #1
 8019fc6:	e7ea      	b.n	8019f9e <__mdiff+0xe2>
 8019fc8:	0801b9c8 	.word	0x0801b9c8
 8019fcc:	0801ba54 	.word	0x0801ba54

08019fd0 <__ulp>:
 8019fd0:	b082      	sub	sp, #8
 8019fd2:	ed8d 0b00 	vstr	d0, [sp]
 8019fd6:	9b01      	ldr	r3, [sp, #4]
 8019fd8:	4912      	ldr	r1, [pc, #72]	; (801a024 <__ulp+0x54>)
 8019fda:	4019      	ands	r1, r3
 8019fdc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019fe0:	2900      	cmp	r1, #0
 8019fe2:	dd05      	ble.n	8019ff0 <__ulp+0x20>
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	460b      	mov	r3, r1
 8019fe8:	ec43 2b10 	vmov	d0, r2, r3
 8019fec:	b002      	add	sp, #8
 8019fee:	4770      	bx	lr
 8019ff0:	4249      	negs	r1, r1
 8019ff2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019ff6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019ffa:	f04f 0200 	mov.w	r2, #0
 8019ffe:	f04f 0300 	mov.w	r3, #0
 801a002:	da04      	bge.n	801a00e <__ulp+0x3e>
 801a004:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a008:	fa41 f300 	asr.w	r3, r1, r0
 801a00c:	e7ec      	b.n	8019fe8 <__ulp+0x18>
 801a00e:	f1a0 0114 	sub.w	r1, r0, #20
 801a012:	291e      	cmp	r1, #30
 801a014:	bfda      	itte	le
 801a016:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a01a:	fa20 f101 	lsrle.w	r1, r0, r1
 801a01e:	2101      	movgt	r1, #1
 801a020:	460a      	mov	r2, r1
 801a022:	e7e1      	b.n	8019fe8 <__ulp+0x18>
 801a024:	7ff00000 	.word	0x7ff00000

0801a028 <__b2d>:
 801a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a02a:	6905      	ldr	r5, [r0, #16]
 801a02c:	f100 0714 	add.w	r7, r0, #20
 801a030:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a034:	1f2e      	subs	r6, r5, #4
 801a036:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7ff fd48 	bl	8019ad0 <__hi0bits>
 801a040:	f1c0 0320 	rsb	r3, r0, #32
 801a044:	280a      	cmp	r0, #10
 801a046:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a0c4 <__b2d+0x9c>
 801a04a:	600b      	str	r3, [r1, #0]
 801a04c:	dc14      	bgt.n	801a078 <__b2d+0x50>
 801a04e:	f1c0 0e0b 	rsb	lr, r0, #11
 801a052:	fa24 f10e 	lsr.w	r1, r4, lr
 801a056:	42b7      	cmp	r7, r6
 801a058:	ea41 030c 	orr.w	r3, r1, ip
 801a05c:	bf34      	ite	cc
 801a05e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a062:	2100      	movcs	r1, #0
 801a064:	3015      	adds	r0, #21
 801a066:	fa04 f000 	lsl.w	r0, r4, r0
 801a06a:	fa21 f10e 	lsr.w	r1, r1, lr
 801a06e:	ea40 0201 	orr.w	r2, r0, r1
 801a072:	ec43 2b10 	vmov	d0, r2, r3
 801a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a078:	42b7      	cmp	r7, r6
 801a07a:	bf3a      	itte	cc
 801a07c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a080:	f1a5 0608 	subcc.w	r6, r5, #8
 801a084:	2100      	movcs	r1, #0
 801a086:	380b      	subs	r0, #11
 801a088:	d017      	beq.n	801a0ba <__b2d+0x92>
 801a08a:	f1c0 0c20 	rsb	ip, r0, #32
 801a08e:	fa04 f500 	lsl.w	r5, r4, r0
 801a092:	42be      	cmp	r6, r7
 801a094:	fa21 f40c 	lsr.w	r4, r1, ip
 801a098:	ea45 0504 	orr.w	r5, r5, r4
 801a09c:	bf8c      	ite	hi
 801a09e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a0a2:	2400      	movls	r4, #0
 801a0a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a0a8:	fa01 f000 	lsl.w	r0, r1, r0
 801a0ac:	fa24 f40c 	lsr.w	r4, r4, ip
 801a0b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a0b4:	ea40 0204 	orr.w	r2, r0, r4
 801a0b8:	e7db      	b.n	801a072 <__b2d+0x4a>
 801a0ba:	ea44 030c 	orr.w	r3, r4, ip
 801a0be:	460a      	mov	r2, r1
 801a0c0:	e7d7      	b.n	801a072 <__b2d+0x4a>
 801a0c2:	bf00      	nop
 801a0c4:	3ff00000 	.word	0x3ff00000

0801a0c8 <__d2b>:
 801a0c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a0cc:	4689      	mov	r9, r1
 801a0ce:	2101      	movs	r1, #1
 801a0d0:	ec57 6b10 	vmov	r6, r7, d0
 801a0d4:	4690      	mov	r8, r2
 801a0d6:	f7ff fc09 	bl	80198ec <_Balloc>
 801a0da:	4604      	mov	r4, r0
 801a0dc:	b930      	cbnz	r0, 801a0ec <__d2b+0x24>
 801a0de:	4602      	mov	r2, r0
 801a0e0:	4b25      	ldr	r3, [pc, #148]	; (801a178 <__d2b+0xb0>)
 801a0e2:	4826      	ldr	r0, [pc, #152]	; (801a17c <__d2b+0xb4>)
 801a0e4:	f240 310a 	movw	r1, #778	; 0x30a
 801a0e8:	f000 fb5c 	bl	801a7a4 <__assert_func>
 801a0ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a0f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a0f4:	bb35      	cbnz	r5, 801a144 <__d2b+0x7c>
 801a0f6:	2e00      	cmp	r6, #0
 801a0f8:	9301      	str	r3, [sp, #4]
 801a0fa:	d028      	beq.n	801a14e <__d2b+0x86>
 801a0fc:	4668      	mov	r0, sp
 801a0fe:	9600      	str	r6, [sp, #0]
 801a100:	f7ff fd06 	bl	8019b10 <__lo0bits>
 801a104:	9900      	ldr	r1, [sp, #0]
 801a106:	b300      	cbz	r0, 801a14a <__d2b+0x82>
 801a108:	9a01      	ldr	r2, [sp, #4]
 801a10a:	f1c0 0320 	rsb	r3, r0, #32
 801a10e:	fa02 f303 	lsl.w	r3, r2, r3
 801a112:	430b      	orrs	r3, r1
 801a114:	40c2      	lsrs	r2, r0
 801a116:	6163      	str	r3, [r4, #20]
 801a118:	9201      	str	r2, [sp, #4]
 801a11a:	9b01      	ldr	r3, [sp, #4]
 801a11c:	61a3      	str	r3, [r4, #24]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	bf14      	ite	ne
 801a122:	2202      	movne	r2, #2
 801a124:	2201      	moveq	r2, #1
 801a126:	6122      	str	r2, [r4, #16]
 801a128:	b1d5      	cbz	r5, 801a160 <__d2b+0x98>
 801a12a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a12e:	4405      	add	r5, r0
 801a130:	f8c9 5000 	str.w	r5, [r9]
 801a134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a138:	f8c8 0000 	str.w	r0, [r8]
 801a13c:	4620      	mov	r0, r4
 801a13e:	b003      	add	sp, #12
 801a140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a148:	e7d5      	b.n	801a0f6 <__d2b+0x2e>
 801a14a:	6161      	str	r1, [r4, #20]
 801a14c:	e7e5      	b.n	801a11a <__d2b+0x52>
 801a14e:	a801      	add	r0, sp, #4
 801a150:	f7ff fcde 	bl	8019b10 <__lo0bits>
 801a154:	9b01      	ldr	r3, [sp, #4]
 801a156:	6163      	str	r3, [r4, #20]
 801a158:	2201      	movs	r2, #1
 801a15a:	6122      	str	r2, [r4, #16]
 801a15c:	3020      	adds	r0, #32
 801a15e:	e7e3      	b.n	801a128 <__d2b+0x60>
 801a160:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a164:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a168:	f8c9 0000 	str.w	r0, [r9]
 801a16c:	6918      	ldr	r0, [r3, #16]
 801a16e:	f7ff fcaf 	bl	8019ad0 <__hi0bits>
 801a172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a176:	e7df      	b.n	801a138 <__d2b+0x70>
 801a178:	0801b9c8 	.word	0x0801b9c8
 801a17c:	0801ba54 	.word	0x0801ba54

0801a180 <__ratio>:
 801a180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a184:	4688      	mov	r8, r1
 801a186:	4669      	mov	r1, sp
 801a188:	4681      	mov	r9, r0
 801a18a:	f7ff ff4d 	bl	801a028 <__b2d>
 801a18e:	a901      	add	r1, sp, #4
 801a190:	4640      	mov	r0, r8
 801a192:	ec55 4b10 	vmov	r4, r5, d0
 801a196:	ee10 aa10 	vmov	sl, s0
 801a19a:	f7ff ff45 	bl	801a028 <__b2d>
 801a19e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a1a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a1a6:	1a59      	subs	r1, r3, r1
 801a1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a1ac:	1ad3      	subs	r3, r2, r3
 801a1ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801a1b2:	ec57 6b10 	vmov	r6, r7, d0
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	bfd6      	itet	le
 801a1ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a1be:	462a      	movgt	r2, r5
 801a1c0:	463a      	movle	r2, r7
 801a1c2:	46ab      	mov	fp, r5
 801a1c4:	bfd6      	itet	le
 801a1c6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801a1ca:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801a1ce:	ee00 3a90 	vmovle	s1, r3
 801a1d2:	ec4b ab17 	vmov	d7, sl, fp
 801a1d6:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801a1da:	b003      	add	sp, #12
 801a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1e0 <__copybits>:
 801a1e0:	3901      	subs	r1, #1
 801a1e2:	b570      	push	{r4, r5, r6, lr}
 801a1e4:	1149      	asrs	r1, r1, #5
 801a1e6:	6914      	ldr	r4, [r2, #16]
 801a1e8:	3101      	adds	r1, #1
 801a1ea:	f102 0314 	add.w	r3, r2, #20
 801a1ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a1f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a1f6:	1f05      	subs	r5, r0, #4
 801a1f8:	42a3      	cmp	r3, r4
 801a1fa:	d30c      	bcc.n	801a216 <__copybits+0x36>
 801a1fc:	1aa3      	subs	r3, r4, r2
 801a1fe:	3b11      	subs	r3, #17
 801a200:	f023 0303 	bic.w	r3, r3, #3
 801a204:	3211      	adds	r2, #17
 801a206:	42a2      	cmp	r2, r4
 801a208:	bf88      	it	hi
 801a20a:	2300      	movhi	r3, #0
 801a20c:	4418      	add	r0, r3
 801a20e:	2300      	movs	r3, #0
 801a210:	4288      	cmp	r0, r1
 801a212:	d305      	bcc.n	801a220 <__copybits+0x40>
 801a214:	bd70      	pop	{r4, r5, r6, pc}
 801a216:	f853 6b04 	ldr.w	r6, [r3], #4
 801a21a:	f845 6f04 	str.w	r6, [r5, #4]!
 801a21e:	e7eb      	b.n	801a1f8 <__copybits+0x18>
 801a220:	f840 3b04 	str.w	r3, [r0], #4
 801a224:	e7f4      	b.n	801a210 <__copybits+0x30>

0801a226 <__any_on>:
 801a226:	f100 0214 	add.w	r2, r0, #20
 801a22a:	6900      	ldr	r0, [r0, #16]
 801a22c:	114b      	asrs	r3, r1, #5
 801a22e:	4298      	cmp	r0, r3
 801a230:	b510      	push	{r4, lr}
 801a232:	db11      	blt.n	801a258 <__any_on+0x32>
 801a234:	dd0a      	ble.n	801a24c <__any_on+0x26>
 801a236:	f011 011f 	ands.w	r1, r1, #31
 801a23a:	d007      	beq.n	801a24c <__any_on+0x26>
 801a23c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a240:	fa24 f001 	lsr.w	r0, r4, r1
 801a244:	fa00 f101 	lsl.w	r1, r0, r1
 801a248:	428c      	cmp	r4, r1
 801a24a:	d10b      	bne.n	801a264 <__any_on+0x3e>
 801a24c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a250:	4293      	cmp	r3, r2
 801a252:	d803      	bhi.n	801a25c <__any_on+0x36>
 801a254:	2000      	movs	r0, #0
 801a256:	bd10      	pop	{r4, pc}
 801a258:	4603      	mov	r3, r0
 801a25a:	e7f7      	b.n	801a24c <__any_on+0x26>
 801a25c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a260:	2900      	cmp	r1, #0
 801a262:	d0f5      	beq.n	801a250 <__any_on+0x2a>
 801a264:	2001      	movs	r0, #1
 801a266:	e7f6      	b.n	801a256 <__any_on+0x30>

0801a268 <_calloc_r>:
 801a268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a26a:	fba1 2402 	umull	r2, r4, r1, r2
 801a26e:	b94c      	cbnz	r4, 801a284 <_calloc_r+0x1c>
 801a270:	4611      	mov	r1, r2
 801a272:	9201      	str	r2, [sp, #4]
 801a274:	f000 f87a 	bl	801a36c <_malloc_r>
 801a278:	9a01      	ldr	r2, [sp, #4]
 801a27a:	4605      	mov	r5, r0
 801a27c:	b930      	cbnz	r0, 801a28c <_calloc_r+0x24>
 801a27e:	4628      	mov	r0, r5
 801a280:	b003      	add	sp, #12
 801a282:	bd30      	pop	{r4, r5, pc}
 801a284:	220c      	movs	r2, #12
 801a286:	6002      	str	r2, [r0, #0]
 801a288:	2500      	movs	r5, #0
 801a28a:	e7f8      	b.n	801a27e <_calloc_r+0x16>
 801a28c:	4621      	mov	r1, r4
 801a28e:	f7fc fc5b 	bl	8016b48 <memset>
 801a292:	e7f4      	b.n	801a27e <_calloc_r+0x16>

0801a294 <_free_r>:
 801a294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a296:	2900      	cmp	r1, #0
 801a298:	d044      	beq.n	801a324 <_free_r+0x90>
 801a29a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a29e:	9001      	str	r0, [sp, #4]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	f1a1 0404 	sub.w	r4, r1, #4
 801a2a6:	bfb8      	it	lt
 801a2a8:	18e4      	addlt	r4, r4, r3
 801a2aa:	f000 fc7f 	bl	801abac <__malloc_lock>
 801a2ae:	4a1e      	ldr	r2, [pc, #120]	; (801a328 <_free_r+0x94>)
 801a2b0:	9801      	ldr	r0, [sp, #4]
 801a2b2:	6813      	ldr	r3, [r2, #0]
 801a2b4:	b933      	cbnz	r3, 801a2c4 <_free_r+0x30>
 801a2b6:	6063      	str	r3, [r4, #4]
 801a2b8:	6014      	str	r4, [r2, #0]
 801a2ba:	b003      	add	sp, #12
 801a2bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2c0:	f000 bc7a 	b.w	801abb8 <__malloc_unlock>
 801a2c4:	42a3      	cmp	r3, r4
 801a2c6:	d908      	bls.n	801a2da <_free_r+0x46>
 801a2c8:	6825      	ldr	r5, [r4, #0]
 801a2ca:	1961      	adds	r1, r4, r5
 801a2cc:	428b      	cmp	r3, r1
 801a2ce:	bf01      	itttt	eq
 801a2d0:	6819      	ldreq	r1, [r3, #0]
 801a2d2:	685b      	ldreq	r3, [r3, #4]
 801a2d4:	1949      	addeq	r1, r1, r5
 801a2d6:	6021      	streq	r1, [r4, #0]
 801a2d8:	e7ed      	b.n	801a2b6 <_free_r+0x22>
 801a2da:	461a      	mov	r2, r3
 801a2dc:	685b      	ldr	r3, [r3, #4]
 801a2de:	b10b      	cbz	r3, 801a2e4 <_free_r+0x50>
 801a2e0:	42a3      	cmp	r3, r4
 801a2e2:	d9fa      	bls.n	801a2da <_free_r+0x46>
 801a2e4:	6811      	ldr	r1, [r2, #0]
 801a2e6:	1855      	adds	r5, r2, r1
 801a2e8:	42a5      	cmp	r5, r4
 801a2ea:	d10b      	bne.n	801a304 <_free_r+0x70>
 801a2ec:	6824      	ldr	r4, [r4, #0]
 801a2ee:	4421      	add	r1, r4
 801a2f0:	1854      	adds	r4, r2, r1
 801a2f2:	42a3      	cmp	r3, r4
 801a2f4:	6011      	str	r1, [r2, #0]
 801a2f6:	d1e0      	bne.n	801a2ba <_free_r+0x26>
 801a2f8:	681c      	ldr	r4, [r3, #0]
 801a2fa:	685b      	ldr	r3, [r3, #4]
 801a2fc:	6053      	str	r3, [r2, #4]
 801a2fe:	4421      	add	r1, r4
 801a300:	6011      	str	r1, [r2, #0]
 801a302:	e7da      	b.n	801a2ba <_free_r+0x26>
 801a304:	d902      	bls.n	801a30c <_free_r+0x78>
 801a306:	230c      	movs	r3, #12
 801a308:	6003      	str	r3, [r0, #0]
 801a30a:	e7d6      	b.n	801a2ba <_free_r+0x26>
 801a30c:	6825      	ldr	r5, [r4, #0]
 801a30e:	1961      	adds	r1, r4, r5
 801a310:	428b      	cmp	r3, r1
 801a312:	bf04      	itt	eq
 801a314:	6819      	ldreq	r1, [r3, #0]
 801a316:	685b      	ldreq	r3, [r3, #4]
 801a318:	6063      	str	r3, [r4, #4]
 801a31a:	bf04      	itt	eq
 801a31c:	1949      	addeq	r1, r1, r5
 801a31e:	6021      	streq	r1, [r4, #0]
 801a320:	6054      	str	r4, [r2, #4]
 801a322:	e7ca      	b.n	801a2ba <_free_r+0x26>
 801a324:	b003      	add	sp, #12
 801a326:	bd30      	pop	{r4, r5, pc}
 801a328:	24002940 	.word	0x24002940

0801a32c <sbrk_aligned>:
 801a32c:	b570      	push	{r4, r5, r6, lr}
 801a32e:	4e0e      	ldr	r6, [pc, #56]	; (801a368 <sbrk_aligned+0x3c>)
 801a330:	460c      	mov	r4, r1
 801a332:	6831      	ldr	r1, [r6, #0]
 801a334:	4605      	mov	r5, r0
 801a336:	b911      	cbnz	r1, 801a33e <sbrk_aligned+0x12>
 801a338:	f000 fa02 	bl	801a740 <_sbrk_r>
 801a33c:	6030      	str	r0, [r6, #0]
 801a33e:	4621      	mov	r1, r4
 801a340:	4628      	mov	r0, r5
 801a342:	f000 f9fd 	bl	801a740 <_sbrk_r>
 801a346:	1c43      	adds	r3, r0, #1
 801a348:	d00a      	beq.n	801a360 <sbrk_aligned+0x34>
 801a34a:	1cc4      	adds	r4, r0, #3
 801a34c:	f024 0403 	bic.w	r4, r4, #3
 801a350:	42a0      	cmp	r0, r4
 801a352:	d007      	beq.n	801a364 <sbrk_aligned+0x38>
 801a354:	1a21      	subs	r1, r4, r0
 801a356:	4628      	mov	r0, r5
 801a358:	f000 f9f2 	bl	801a740 <_sbrk_r>
 801a35c:	3001      	adds	r0, #1
 801a35e:	d101      	bne.n	801a364 <sbrk_aligned+0x38>
 801a360:	f04f 34ff 	mov.w	r4, #4294967295
 801a364:	4620      	mov	r0, r4
 801a366:	bd70      	pop	{r4, r5, r6, pc}
 801a368:	24002944 	.word	0x24002944

0801a36c <_malloc_r>:
 801a36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a370:	1ccd      	adds	r5, r1, #3
 801a372:	f025 0503 	bic.w	r5, r5, #3
 801a376:	3508      	adds	r5, #8
 801a378:	2d0c      	cmp	r5, #12
 801a37a:	bf38      	it	cc
 801a37c:	250c      	movcc	r5, #12
 801a37e:	2d00      	cmp	r5, #0
 801a380:	4607      	mov	r7, r0
 801a382:	db01      	blt.n	801a388 <_malloc_r+0x1c>
 801a384:	42a9      	cmp	r1, r5
 801a386:	d905      	bls.n	801a394 <_malloc_r+0x28>
 801a388:	230c      	movs	r3, #12
 801a38a:	603b      	str	r3, [r7, #0]
 801a38c:	2600      	movs	r6, #0
 801a38e:	4630      	mov	r0, r6
 801a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a394:	4e2e      	ldr	r6, [pc, #184]	; (801a450 <_malloc_r+0xe4>)
 801a396:	f000 fc09 	bl	801abac <__malloc_lock>
 801a39a:	6833      	ldr	r3, [r6, #0]
 801a39c:	461c      	mov	r4, r3
 801a39e:	bb34      	cbnz	r4, 801a3ee <_malloc_r+0x82>
 801a3a0:	4629      	mov	r1, r5
 801a3a2:	4638      	mov	r0, r7
 801a3a4:	f7ff ffc2 	bl	801a32c <sbrk_aligned>
 801a3a8:	1c43      	adds	r3, r0, #1
 801a3aa:	4604      	mov	r4, r0
 801a3ac:	d14d      	bne.n	801a44a <_malloc_r+0xde>
 801a3ae:	6834      	ldr	r4, [r6, #0]
 801a3b0:	4626      	mov	r6, r4
 801a3b2:	2e00      	cmp	r6, #0
 801a3b4:	d140      	bne.n	801a438 <_malloc_r+0xcc>
 801a3b6:	6823      	ldr	r3, [r4, #0]
 801a3b8:	4631      	mov	r1, r6
 801a3ba:	4638      	mov	r0, r7
 801a3bc:	eb04 0803 	add.w	r8, r4, r3
 801a3c0:	f000 f9be 	bl	801a740 <_sbrk_r>
 801a3c4:	4580      	cmp	r8, r0
 801a3c6:	d13a      	bne.n	801a43e <_malloc_r+0xd2>
 801a3c8:	6821      	ldr	r1, [r4, #0]
 801a3ca:	3503      	adds	r5, #3
 801a3cc:	1a6d      	subs	r5, r5, r1
 801a3ce:	f025 0503 	bic.w	r5, r5, #3
 801a3d2:	3508      	adds	r5, #8
 801a3d4:	2d0c      	cmp	r5, #12
 801a3d6:	bf38      	it	cc
 801a3d8:	250c      	movcc	r5, #12
 801a3da:	4629      	mov	r1, r5
 801a3dc:	4638      	mov	r0, r7
 801a3de:	f7ff ffa5 	bl	801a32c <sbrk_aligned>
 801a3e2:	3001      	adds	r0, #1
 801a3e4:	d02b      	beq.n	801a43e <_malloc_r+0xd2>
 801a3e6:	6823      	ldr	r3, [r4, #0]
 801a3e8:	442b      	add	r3, r5
 801a3ea:	6023      	str	r3, [r4, #0]
 801a3ec:	e00e      	b.n	801a40c <_malloc_r+0xa0>
 801a3ee:	6822      	ldr	r2, [r4, #0]
 801a3f0:	1b52      	subs	r2, r2, r5
 801a3f2:	d41e      	bmi.n	801a432 <_malloc_r+0xc6>
 801a3f4:	2a0b      	cmp	r2, #11
 801a3f6:	d916      	bls.n	801a426 <_malloc_r+0xba>
 801a3f8:	1961      	adds	r1, r4, r5
 801a3fa:	42a3      	cmp	r3, r4
 801a3fc:	6025      	str	r5, [r4, #0]
 801a3fe:	bf18      	it	ne
 801a400:	6059      	strne	r1, [r3, #4]
 801a402:	6863      	ldr	r3, [r4, #4]
 801a404:	bf08      	it	eq
 801a406:	6031      	streq	r1, [r6, #0]
 801a408:	5162      	str	r2, [r4, r5]
 801a40a:	604b      	str	r3, [r1, #4]
 801a40c:	4638      	mov	r0, r7
 801a40e:	f104 060b 	add.w	r6, r4, #11
 801a412:	f000 fbd1 	bl	801abb8 <__malloc_unlock>
 801a416:	f026 0607 	bic.w	r6, r6, #7
 801a41a:	1d23      	adds	r3, r4, #4
 801a41c:	1af2      	subs	r2, r6, r3
 801a41e:	d0b6      	beq.n	801a38e <_malloc_r+0x22>
 801a420:	1b9b      	subs	r3, r3, r6
 801a422:	50a3      	str	r3, [r4, r2]
 801a424:	e7b3      	b.n	801a38e <_malloc_r+0x22>
 801a426:	6862      	ldr	r2, [r4, #4]
 801a428:	42a3      	cmp	r3, r4
 801a42a:	bf0c      	ite	eq
 801a42c:	6032      	streq	r2, [r6, #0]
 801a42e:	605a      	strne	r2, [r3, #4]
 801a430:	e7ec      	b.n	801a40c <_malloc_r+0xa0>
 801a432:	4623      	mov	r3, r4
 801a434:	6864      	ldr	r4, [r4, #4]
 801a436:	e7b2      	b.n	801a39e <_malloc_r+0x32>
 801a438:	4634      	mov	r4, r6
 801a43a:	6876      	ldr	r6, [r6, #4]
 801a43c:	e7b9      	b.n	801a3b2 <_malloc_r+0x46>
 801a43e:	230c      	movs	r3, #12
 801a440:	603b      	str	r3, [r7, #0]
 801a442:	4638      	mov	r0, r7
 801a444:	f000 fbb8 	bl	801abb8 <__malloc_unlock>
 801a448:	e7a1      	b.n	801a38e <_malloc_r+0x22>
 801a44a:	6025      	str	r5, [r4, #0]
 801a44c:	e7de      	b.n	801a40c <_malloc_r+0xa0>
 801a44e:	bf00      	nop
 801a450:	24002940 	.word	0x24002940

0801a454 <__ssputs_r>:
 801a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a458:	688e      	ldr	r6, [r1, #8]
 801a45a:	429e      	cmp	r6, r3
 801a45c:	4682      	mov	sl, r0
 801a45e:	460c      	mov	r4, r1
 801a460:	4690      	mov	r8, r2
 801a462:	461f      	mov	r7, r3
 801a464:	d838      	bhi.n	801a4d8 <__ssputs_r+0x84>
 801a466:	898a      	ldrh	r2, [r1, #12]
 801a468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a46c:	d032      	beq.n	801a4d4 <__ssputs_r+0x80>
 801a46e:	6825      	ldr	r5, [r4, #0]
 801a470:	6909      	ldr	r1, [r1, #16]
 801a472:	eba5 0901 	sub.w	r9, r5, r1
 801a476:	6965      	ldr	r5, [r4, #20]
 801a478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a480:	3301      	adds	r3, #1
 801a482:	444b      	add	r3, r9
 801a484:	106d      	asrs	r5, r5, #1
 801a486:	429d      	cmp	r5, r3
 801a488:	bf38      	it	cc
 801a48a:	461d      	movcc	r5, r3
 801a48c:	0553      	lsls	r3, r2, #21
 801a48e:	d531      	bpl.n	801a4f4 <__ssputs_r+0xa0>
 801a490:	4629      	mov	r1, r5
 801a492:	f7ff ff6b 	bl	801a36c <_malloc_r>
 801a496:	4606      	mov	r6, r0
 801a498:	b950      	cbnz	r0, 801a4b0 <__ssputs_r+0x5c>
 801a49a:	230c      	movs	r3, #12
 801a49c:	f8ca 3000 	str.w	r3, [sl]
 801a4a0:	89a3      	ldrh	r3, [r4, #12]
 801a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4a6:	81a3      	strh	r3, [r4, #12]
 801a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4b0:	6921      	ldr	r1, [r4, #16]
 801a4b2:	464a      	mov	r2, r9
 801a4b4:	f7fc fb3a 	bl	8016b2c <memcpy>
 801a4b8:	89a3      	ldrh	r3, [r4, #12]
 801a4ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4c2:	81a3      	strh	r3, [r4, #12]
 801a4c4:	6126      	str	r6, [r4, #16]
 801a4c6:	6165      	str	r5, [r4, #20]
 801a4c8:	444e      	add	r6, r9
 801a4ca:	eba5 0509 	sub.w	r5, r5, r9
 801a4ce:	6026      	str	r6, [r4, #0]
 801a4d0:	60a5      	str	r5, [r4, #8]
 801a4d2:	463e      	mov	r6, r7
 801a4d4:	42be      	cmp	r6, r7
 801a4d6:	d900      	bls.n	801a4da <__ssputs_r+0x86>
 801a4d8:	463e      	mov	r6, r7
 801a4da:	6820      	ldr	r0, [r4, #0]
 801a4dc:	4632      	mov	r2, r6
 801a4de:	4641      	mov	r1, r8
 801a4e0:	f000 fb4a 	bl	801ab78 <memmove>
 801a4e4:	68a3      	ldr	r3, [r4, #8]
 801a4e6:	1b9b      	subs	r3, r3, r6
 801a4e8:	60a3      	str	r3, [r4, #8]
 801a4ea:	6823      	ldr	r3, [r4, #0]
 801a4ec:	4433      	add	r3, r6
 801a4ee:	6023      	str	r3, [r4, #0]
 801a4f0:	2000      	movs	r0, #0
 801a4f2:	e7db      	b.n	801a4ac <__ssputs_r+0x58>
 801a4f4:	462a      	mov	r2, r5
 801a4f6:	f000 fb65 	bl	801abc4 <_realloc_r>
 801a4fa:	4606      	mov	r6, r0
 801a4fc:	2800      	cmp	r0, #0
 801a4fe:	d1e1      	bne.n	801a4c4 <__ssputs_r+0x70>
 801a500:	6921      	ldr	r1, [r4, #16]
 801a502:	4650      	mov	r0, sl
 801a504:	f7ff fec6 	bl	801a294 <_free_r>
 801a508:	e7c7      	b.n	801a49a <__ssputs_r+0x46>
	...

0801a50c <_svfiprintf_r>:
 801a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a510:	4698      	mov	r8, r3
 801a512:	898b      	ldrh	r3, [r1, #12]
 801a514:	061b      	lsls	r3, r3, #24
 801a516:	b09d      	sub	sp, #116	; 0x74
 801a518:	4607      	mov	r7, r0
 801a51a:	460d      	mov	r5, r1
 801a51c:	4614      	mov	r4, r2
 801a51e:	d50e      	bpl.n	801a53e <_svfiprintf_r+0x32>
 801a520:	690b      	ldr	r3, [r1, #16]
 801a522:	b963      	cbnz	r3, 801a53e <_svfiprintf_r+0x32>
 801a524:	2140      	movs	r1, #64	; 0x40
 801a526:	f7ff ff21 	bl	801a36c <_malloc_r>
 801a52a:	6028      	str	r0, [r5, #0]
 801a52c:	6128      	str	r0, [r5, #16]
 801a52e:	b920      	cbnz	r0, 801a53a <_svfiprintf_r+0x2e>
 801a530:	230c      	movs	r3, #12
 801a532:	603b      	str	r3, [r7, #0]
 801a534:	f04f 30ff 	mov.w	r0, #4294967295
 801a538:	e0d1      	b.n	801a6de <_svfiprintf_r+0x1d2>
 801a53a:	2340      	movs	r3, #64	; 0x40
 801a53c:	616b      	str	r3, [r5, #20]
 801a53e:	2300      	movs	r3, #0
 801a540:	9309      	str	r3, [sp, #36]	; 0x24
 801a542:	2320      	movs	r3, #32
 801a544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a548:	f8cd 800c 	str.w	r8, [sp, #12]
 801a54c:	2330      	movs	r3, #48	; 0x30
 801a54e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a6f8 <_svfiprintf_r+0x1ec>
 801a552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a556:	f04f 0901 	mov.w	r9, #1
 801a55a:	4623      	mov	r3, r4
 801a55c:	469a      	mov	sl, r3
 801a55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a562:	b10a      	cbz	r2, 801a568 <_svfiprintf_r+0x5c>
 801a564:	2a25      	cmp	r2, #37	; 0x25
 801a566:	d1f9      	bne.n	801a55c <_svfiprintf_r+0x50>
 801a568:	ebba 0b04 	subs.w	fp, sl, r4
 801a56c:	d00b      	beq.n	801a586 <_svfiprintf_r+0x7a>
 801a56e:	465b      	mov	r3, fp
 801a570:	4622      	mov	r2, r4
 801a572:	4629      	mov	r1, r5
 801a574:	4638      	mov	r0, r7
 801a576:	f7ff ff6d 	bl	801a454 <__ssputs_r>
 801a57a:	3001      	adds	r0, #1
 801a57c:	f000 80aa 	beq.w	801a6d4 <_svfiprintf_r+0x1c8>
 801a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a582:	445a      	add	r2, fp
 801a584:	9209      	str	r2, [sp, #36]	; 0x24
 801a586:	f89a 3000 	ldrb.w	r3, [sl]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f000 80a2 	beq.w	801a6d4 <_svfiprintf_r+0x1c8>
 801a590:	2300      	movs	r3, #0
 801a592:	f04f 32ff 	mov.w	r2, #4294967295
 801a596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a59a:	f10a 0a01 	add.w	sl, sl, #1
 801a59e:	9304      	str	r3, [sp, #16]
 801a5a0:	9307      	str	r3, [sp, #28]
 801a5a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a5a6:	931a      	str	r3, [sp, #104]	; 0x68
 801a5a8:	4654      	mov	r4, sl
 801a5aa:	2205      	movs	r2, #5
 801a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5b0:	4851      	ldr	r0, [pc, #324]	; (801a6f8 <_svfiprintf_r+0x1ec>)
 801a5b2:	f7e5 feb5 	bl	8000320 <memchr>
 801a5b6:	9a04      	ldr	r2, [sp, #16]
 801a5b8:	b9d8      	cbnz	r0, 801a5f2 <_svfiprintf_r+0xe6>
 801a5ba:	06d0      	lsls	r0, r2, #27
 801a5bc:	bf44      	itt	mi
 801a5be:	2320      	movmi	r3, #32
 801a5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5c4:	0711      	lsls	r1, r2, #28
 801a5c6:	bf44      	itt	mi
 801a5c8:	232b      	movmi	r3, #43	; 0x2b
 801a5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5ce:	f89a 3000 	ldrb.w	r3, [sl]
 801a5d2:	2b2a      	cmp	r3, #42	; 0x2a
 801a5d4:	d015      	beq.n	801a602 <_svfiprintf_r+0xf6>
 801a5d6:	9a07      	ldr	r2, [sp, #28]
 801a5d8:	4654      	mov	r4, sl
 801a5da:	2000      	movs	r0, #0
 801a5dc:	f04f 0c0a 	mov.w	ip, #10
 801a5e0:	4621      	mov	r1, r4
 801a5e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5e6:	3b30      	subs	r3, #48	; 0x30
 801a5e8:	2b09      	cmp	r3, #9
 801a5ea:	d94e      	bls.n	801a68a <_svfiprintf_r+0x17e>
 801a5ec:	b1b0      	cbz	r0, 801a61c <_svfiprintf_r+0x110>
 801a5ee:	9207      	str	r2, [sp, #28]
 801a5f0:	e014      	b.n	801a61c <_svfiprintf_r+0x110>
 801a5f2:	eba0 0308 	sub.w	r3, r0, r8
 801a5f6:	fa09 f303 	lsl.w	r3, r9, r3
 801a5fa:	4313      	orrs	r3, r2
 801a5fc:	9304      	str	r3, [sp, #16]
 801a5fe:	46a2      	mov	sl, r4
 801a600:	e7d2      	b.n	801a5a8 <_svfiprintf_r+0x9c>
 801a602:	9b03      	ldr	r3, [sp, #12]
 801a604:	1d19      	adds	r1, r3, #4
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	9103      	str	r1, [sp, #12]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	bfbb      	ittet	lt
 801a60e:	425b      	neglt	r3, r3
 801a610:	f042 0202 	orrlt.w	r2, r2, #2
 801a614:	9307      	strge	r3, [sp, #28]
 801a616:	9307      	strlt	r3, [sp, #28]
 801a618:	bfb8      	it	lt
 801a61a:	9204      	strlt	r2, [sp, #16]
 801a61c:	7823      	ldrb	r3, [r4, #0]
 801a61e:	2b2e      	cmp	r3, #46	; 0x2e
 801a620:	d10c      	bne.n	801a63c <_svfiprintf_r+0x130>
 801a622:	7863      	ldrb	r3, [r4, #1]
 801a624:	2b2a      	cmp	r3, #42	; 0x2a
 801a626:	d135      	bne.n	801a694 <_svfiprintf_r+0x188>
 801a628:	9b03      	ldr	r3, [sp, #12]
 801a62a:	1d1a      	adds	r2, r3, #4
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	9203      	str	r2, [sp, #12]
 801a630:	2b00      	cmp	r3, #0
 801a632:	bfb8      	it	lt
 801a634:	f04f 33ff 	movlt.w	r3, #4294967295
 801a638:	3402      	adds	r4, #2
 801a63a:	9305      	str	r3, [sp, #20]
 801a63c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a708 <_svfiprintf_r+0x1fc>
 801a640:	7821      	ldrb	r1, [r4, #0]
 801a642:	2203      	movs	r2, #3
 801a644:	4650      	mov	r0, sl
 801a646:	f7e5 fe6b 	bl	8000320 <memchr>
 801a64a:	b140      	cbz	r0, 801a65e <_svfiprintf_r+0x152>
 801a64c:	2340      	movs	r3, #64	; 0x40
 801a64e:	eba0 000a 	sub.w	r0, r0, sl
 801a652:	fa03 f000 	lsl.w	r0, r3, r0
 801a656:	9b04      	ldr	r3, [sp, #16]
 801a658:	4303      	orrs	r3, r0
 801a65a:	3401      	adds	r4, #1
 801a65c:	9304      	str	r3, [sp, #16]
 801a65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a662:	4826      	ldr	r0, [pc, #152]	; (801a6fc <_svfiprintf_r+0x1f0>)
 801a664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a668:	2206      	movs	r2, #6
 801a66a:	f7e5 fe59 	bl	8000320 <memchr>
 801a66e:	2800      	cmp	r0, #0
 801a670:	d038      	beq.n	801a6e4 <_svfiprintf_r+0x1d8>
 801a672:	4b23      	ldr	r3, [pc, #140]	; (801a700 <_svfiprintf_r+0x1f4>)
 801a674:	bb1b      	cbnz	r3, 801a6be <_svfiprintf_r+0x1b2>
 801a676:	9b03      	ldr	r3, [sp, #12]
 801a678:	3307      	adds	r3, #7
 801a67a:	f023 0307 	bic.w	r3, r3, #7
 801a67e:	3308      	adds	r3, #8
 801a680:	9303      	str	r3, [sp, #12]
 801a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a684:	4433      	add	r3, r6
 801a686:	9309      	str	r3, [sp, #36]	; 0x24
 801a688:	e767      	b.n	801a55a <_svfiprintf_r+0x4e>
 801a68a:	fb0c 3202 	mla	r2, ip, r2, r3
 801a68e:	460c      	mov	r4, r1
 801a690:	2001      	movs	r0, #1
 801a692:	e7a5      	b.n	801a5e0 <_svfiprintf_r+0xd4>
 801a694:	2300      	movs	r3, #0
 801a696:	3401      	adds	r4, #1
 801a698:	9305      	str	r3, [sp, #20]
 801a69a:	4619      	mov	r1, r3
 801a69c:	f04f 0c0a 	mov.w	ip, #10
 801a6a0:	4620      	mov	r0, r4
 801a6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6a6:	3a30      	subs	r2, #48	; 0x30
 801a6a8:	2a09      	cmp	r2, #9
 801a6aa:	d903      	bls.n	801a6b4 <_svfiprintf_r+0x1a8>
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d0c5      	beq.n	801a63c <_svfiprintf_r+0x130>
 801a6b0:	9105      	str	r1, [sp, #20]
 801a6b2:	e7c3      	b.n	801a63c <_svfiprintf_r+0x130>
 801a6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6b8:	4604      	mov	r4, r0
 801a6ba:	2301      	movs	r3, #1
 801a6bc:	e7f0      	b.n	801a6a0 <_svfiprintf_r+0x194>
 801a6be:	ab03      	add	r3, sp, #12
 801a6c0:	9300      	str	r3, [sp, #0]
 801a6c2:	462a      	mov	r2, r5
 801a6c4:	4b0f      	ldr	r3, [pc, #60]	; (801a704 <_svfiprintf_r+0x1f8>)
 801a6c6:	a904      	add	r1, sp, #16
 801a6c8:	4638      	mov	r0, r7
 801a6ca:	f7fc fad5 	bl	8016c78 <_printf_float>
 801a6ce:	1c42      	adds	r2, r0, #1
 801a6d0:	4606      	mov	r6, r0
 801a6d2:	d1d6      	bne.n	801a682 <_svfiprintf_r+0x176>
 801a6d4:	89ab      	ldrh	r3, [r5, #12]
 801a6d6:	065b      	lsls	r3, r3, #25
 801a6d8:	f53f af2c 	bmi.w	801a534 <_svfiprintf_r+0x28>
 801a6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6de:	b01d      	add	sp, #116	; 0x74
 801a6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6e4:	ab03      	add	r3, sp, #12
 801a6e6:	9300      	str	r3, [sp, #0]
 801a6e8:	462a      	mov	r2, r5
 801a6ea:	4b06      	ldr	r3, [pc, #24]	; (801a704 <_svfiprintf_r+0x1f8>)
 801a6ec:	a904      	add	r1, sp, #16
 801a6ee:	4638      	mov	r0, r7
 801a6f0:	f7fc fd4e 	bl	8017190 <_printf_i>
 801a6f4:	e7eb      	b.n	801a6ce <_svfiprintf_r+0x1c2>
 801a6f6:	bf00      	nop
 801a6f8:	0801bbac 	.word	0x0801bbac
 801a6fc:	0801bbb6 	.word	0x0801bbb6
 801a700:	08016c79 	.word	0x08016c79
 801a704:	0801a455 	.word	0x0801a455
 801a708:	0801bbb2 	.word	0x0801bbb2

0801a70c <_read_r>:
 801a70c:	b538      	push	{r3, r4, r5, lr}
 801a70e:	4d07      	ldr	r5, [pc, #28]	; (801a72c <_read_r+0x20>)
 801a710:	4604      	mov	r4, r0
 801a712:	4608      	mov	r0, r1
 801a714:	4611      	mov	r1, r2
 801a716:	2200      	movs	r2, #0
 801a718:	602a      	str	r2, [r5, #0]
 801a71a:	461a      	mov	r2, r3
 801a71c:	f7e8 ffc4 	bl	80036a8 <_read>
 801a720:	1c43      	adds	r3, r0, #1
 801a722:	d102      	bne.n	801a72a <_read_r+0x1e>
 801a724:	682b      	ldr	r3, [r5, #0]
 801a726:	b103      	cbz	r3, 801a72a <_read_r+0x1e>
 801a728:	6023      	str	r3, [r4, #0]
 801a72a:	bd38      	pop	{r3, r4, r5, pc}
 801a72c:	24002948 	.word	0x24002948

0801a730 <nan>:
 801a730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a738 <nan+0x8>
 801a734:	4770      	bx	lr
 801a736:	bf00      	nop
 801a738:	00000000 	.word	0x00000000
 801a73c:	7ff80000 	.word	0x7ff80000

0801a740 <_sbrk_r>:
 801a740:	b538      	push	{r3, r4, r5, lr}
 801a742:	4d06      	ldr	r5, [pc, #24]	; (801a75c <_sbrk_r+0x1c>)
 801a744:	2300      	movs	r3, #0
 801a746:	4604      	mov	r4, r0
 801a748:	4608      	mov	r0, r1
 801a74a:	602b      	str	r3, [r5, #0]
 801a74c:	f7e9 f81a 	bl	8003784 <_sbrk>
 801a750:	1c43      	adds	r3, r0, #1
 801a752:	d102      	bne.n	801a75a <_sbrk_r+0x1a>
 801a754:	682b      	ldr	r3, [r5, #0]
 801a756:	b103      	cbz	r3, 801a75a <_sbrk_r+0x1a>
 801a758:	6023      	str	r3, [r4, #0]
 801a75a:	bd38      	pop	{r3, r4, r5, pc}
 801a75c:	24002948 	.word	0x24002948

0801a760 <strncmp>:
 801a760:	b510      	push	{r4, lr}
 801a762:	b17a      	cbz	r2, 801a784 <strncmp+0x24>
 801a764:	4603      	mov	r3, r0
 801a766:	3901      	subs	r1, #1
 801a768:	1884      	adds	r4, r0, r2
 801a76a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a76e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a772:	4290      	cmp	r0, r2
 801a774:	d101      	bne.n	801a77a <strncmp+0x1a>
 801a776:	42a3      	cmp	r3, r4
 801a778:	d101      	bne.n	801a77e <strncmp+0x1e>
 801a77a:	1a80      	subs	r0, r0, r2
 801a77c:	bd10      	pop	{r4, pc}
 801a77e:	2800      	cmp	r0, #0
 801a780:	d1f3      	bne.n	801a76a <strncmp+0xa>
 801a782:	e7fa      	b.n	801a77a <strncmp+0x1a>
 801a784:	4610      	mov	r0, r2
 801a786:	e7f9      	b.n	801a77c <strncmp+0x1c>

0801a788 <__ascii_wctomb>:
 801a788:	b149      	cbz	r1, 801a79e <__ascii_wctomb+0x16>
 801a78a:	2aff      	cmp	r2, #255	; 0xff
 801a78c:	bf85      	ittet	hi
 801a78e:	238a      	movhi	r3, #138	; 0x8a
 801a790:	6003      	strhi	r3, [r0, #0]
 801a792:	700a      	strbls	r2, [r1, #0]
 801a794:	f04f 30ff 	movhi.w	r0, #4294967295
 801a798:	bf98      	it	ls
 801a79a:	2001      	movls	r0, #1
 801a79c:	4770      	bx	lr
 801a79e:	4608      	mov	r0, r1
 801a7a0:	4770      	bx	lr
	...

0801a7a4 <__assert_func>:
 801a7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7a6:	4614      	mov	r4, r2
 801a7a8:	461a      	mov	r2, r3
 801a7aa:	4b09      	ldr	r3, [pc, #36]	; (801a7d0 <__assert_func+0x2c>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	4605      	mov	r5, r0
 801a7b0:	68d8      	ldr	r0, [r3, #12]
 801a7b2:	b14c      	cbz	r4, 801a7c8 <__assert_func+0x24>
 801a7b4:	4b07      	ldr	r3, [pc, #28]	; (801a7d4 <__assert_func+0x30>)
 801a7b6:	9100      	str	r1, [sp, #0]
 801a7b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7bc:	4906      	ldr	r1, [pc, #24]	; (801a7d8 <__assert_func+0x34>)
 801a7be:	462b      	mov	r3, r5
 801a7c0:	f000 f9a6 	bl	801ab10 <fiprintf>
 801a7c4:	f000 fc46 	bl	801b054 <abort>
 801a7c8:	4b04      	ldr	r3, [pc, #16]	; (801a7dc <__assert_func+0x38>)
 801a7ca:	461c      	mov	r4, r3
 801a7cc:	e7f3      	b.n	801a7b6 <__assert_func+0x12>
 801a7ce:	bf00      	nop
 801a7d0:	24000128 	.word	0x24000128
 801a7d4:	0801bbbd 	.word	0x0801bbbd
 801a7d8:	0801bbca 	.word	0x0801bbca
 801a7dc:	0801bbf8 	.word	0x0801bbf8

0801a7e0 <__sflush_r>:
 801a7e0:	898a      	ldrh	r2, [r1, #12]
 801a7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7e6:	4605      	mov	r5, r0
 801a7e8:	0710      	lsls	r0, r2, #28
 801a7ea:	460c      	mov	r4, r1
 801a7ec:	d458      	bmi.n	801a8a0 <__sflush_r+0xc0>
 801a7ee:	684b      	ldr	r3, [r1, #4]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	dc05      	bgt.n	801a800 <__sflush_r+0x20>
 801a7f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	dc02      	bgt.n	801a800 <__sflush_r+0x20>
 801a7fa:	2000      	movs	r0, #0
 801a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a802:	2e00      	cmp	r6, #0
 801a804:	d0f9      	beq.n	801a7fa <__sflush_r+0x1a>
 801a806:	2300      	movs	r3, #0
 801a808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a80c:	682f      	ldr	r7, [r5, #0]
 801a80e:	602b      	str	r3, [r5, #0]
 801a810:	d032      	beq.n	801a878 <__sflush_r+0x98>
 801a812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a814:	89a3      	ldrh	r3, [r4, #12]
 801a816:	075a      	lsls	r2, r3, #29
 801a818:	d505      	bpl.n	801a826 <__sflush_r+0x46>
 801a81a:	6863      	ldr	r3, [r4, #4]
 801a81c:	1ac0      	subs	r0, r0, r3
 801a81e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a820:	b10b      	cbz	r3, 801a826 <__sflush_r+0x46>
 801a822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a824:	1ac0      	subs	r0, r0, r3
 801a826:	2300      	movs	r3, #0
 801a828:	4602      	mov	r2, r0
 801a82a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a82c:	6a21      	ldr	r1, [r4, #32]
 801a82e:	4628      	mov	r0, r5
 801a830:	47b0      	blx	r6
 801a832:	1c43      	adds	r3, r0, #1
 801a834:	89a3      	ldrh	r3, [r4, #12]
 801a836:	d106      	bne.n	801a846 <__sflush_r+0x66>
 801a838:	6829      	ldr	r1, [r5, #0]
 801a83a:	291d      	cmp	r1, #29
 801a83c:	d82c      	bhi.n	801a898 <__sflush_r+0xb8>
 801a83e:	4a2a      	ldr	r2, [pc, #168]	; (801a8e8 <__sflush_r+0x108>)
 801a840:	40ca      	lsrs	r2, r1
 801a842:	07d6      	lsls	r6, r2, #31
 801a844:	d528      	bpl.n	801a898 <__sflush_r+0xb8>
 801a846:	2200      	movs	r2, #0
 801a848:	6062      	str	r2, [r4, #4]
 801a84a:	04d9      	lsls	r1, r3, #19
 801a84c:	6922      	ldr	r2, [r4, #16]
 801a84e:	6022      	str	r2, [r4, #0]
 801a850:	d504      	bpl.n	801a85c <__sflush_r+0x7c>
 801a852:	1c42      	adds	r2, r0, #1
 801a854:	d101      	bne.n	801a85a <__sflush_r+0x7a>
 801a856:	682b      	ldr	r3, [r5, #0]
 801a858:	b903      	cbnz	r3, 801a85c <__sflush_r+0x7c>
 801a85a:	6560      	str	r0, [r4, #84]	; 0x54
 801a85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a85e:	602f      	str	r7, [r5, #0]
 801a860:	2900      	cmp	r1, #0
 801a862:	d0ca      	beq.n	801a7fa <__sflush_r+0x1a>
 801a864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a868:	4299      	cmp	r1, r3
 801a86a:	d002      	beq.n	801a872 <__sflush_r+0x92>
 801a86c:	4628      	mov	r0, r5
 801a86e:	f7ff fd11 	bl	801a294 <_free_r>
 801a872:	2000      	movs	r0, #0
 801a874:	6360      	str	r0, [r4, #52]	; 0x34
 801a876:	e7c1      	b.n	801a7fc <__sflush_r+0x1c>
 801a878:	6a21      	ldr	r1, [r4, #32]
 801a87a:	2301      	movs	r3, #1
 801a87c:	4628      	mov	r0, r5
 801a87e:	47b0      	blx	r6
 801a880:	1c41      	adds	r1, r0, #1
 801a882:	d1c7      	bne.n	801a814 <__sflush_r+0x34>
 801a884:	682b      	ldr	r3, [r5, #0]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d0c4      	beq.n	801a814 <__sflush_r+0x34>
 801a88a:	2b1d      	cmp	r3, #29
 801a88c:	d001      	beq.n	801a892 <__sflush_r+0xb2>
 801a88e:	2b16      	cmp	r3, #22
 801a890:	d101      	bne.n	801a896 <__sflush_r+0xb6>
 801a892:	602f      	str	r7, [r5, #0]
 801a894:	e7b1      	b.n	801a7fa <__sflush_r+0x1a>
 801a896:	89a3      	ldrh	r3, [r4, #12]
 801a898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a89c:	81a3      	strh	r3, [r4, #12]
 801a89e:	e7ad      	b.n	801a7fc <__sflush_r+0x1c>
 801a8a0:	690f      	ldr	r7, [r1, #16]
 801a8a2:	2f00      	cmp	r7, #0
 801a8a4:	d0a9      	beq.n	801a7fa <__sflush_r+0x1a>
 801a8a6:	0793      	lsls	r3, r2, #30
 801a8a8:	680e      	ldr	r6, [r1, #0]
 801a8aa:	bf08      	it	eq
 801a8ac:	694b      	ldreq	r3, [r1, #20]
 801a8ae:	600f      	str	r7, [r1, #0]
 801a8b0:	bf18      	it	ne
 801a8b2:	2300      	movne	r3, #0
 801a8b4:	eba6 0807 	sub.w	r8, r6, r7
 801a8b8:	608b      	str	r3, [r1, #8]
 801a8ba:	f1b8 0f00 	cmp.w	r8, #0
 801a8be:	dd9c      	ble.n	801a7fa <__sflush_r+0x1a>
 801a8c0:	6a21      	ldr	r1, [r4, #32]
 801a8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a8c4:	4643      	mov	r3, r8
 801a8c6:	463a      	mov	r2, r7
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	47b0      	blx	r6
 801a8cc:	2800      	cmp	r0, #0
 801a8ce:	dc06      	bgt.n	801a8de <__sflush_r+0xfe>
 801a8d0:	89a3      	ldrh	r3, [r4, #12]
 801a8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8d6:	81a3      	strh	r3, [r4, #12]
 801a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a8dc:	e78e      	b.n	801a7fc <__sflush_r+0x1c>
 801a8de:	4407      	add	r7, r0
 801a8e0:	eba8 0800 	sub.w	r8, r8, r0
 801a8e4:	e7e9      	b.n	801a8ba <__sflush_r+0xda>
 801a8e6:	bf00      	nop
 801a8e8:	20400001 	.word	0x20400001

0801a8ec <_fflush_r>:
 801a8ec:	b538      	push	{r3, r4, r5, lr}
 801a8ee:	690b      	ldr	r3, [r1, #16]
 801a8f0:	4605      	mov	r5, r0
 801a8f2:	460c      	mov	r4, r1
 801a8f4:	b913      	cbnz	r3, 801a8fc <_fflush_r+0x10>
 801a8f6:	2500      	movs	r5, #0
 801a8f8:	4628      	mov	r0, r5
 801a8fa:	bd38      	pop	{r3, r4, r5, pc}
 801a8fc:	b118      	cbz	r0, 801a906 <_fflush_r+0x1a>
 801a8fe:	6983      	ldr	r3, [r0, #24]
 801a900:	b90b      	cbnz	r3, 801a906 <_fflush_r+0x1a>
 801a902:	f000 f887 	bl	801aa14 <__sinit>
 801a906:	4b14      	ldr	r3, [pc, #80]	; (801a958 <_fflush_r+0x6c>)
 801a908:	429c      	cmp	r4, r3
 801a90a:	d11b      	bne.n	801a944 <_fflush_r+0x58>
 801a90c:	686c      	ldr	r4, [r5, #4]
 801a90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d0ef      	beq.n	801a8f6 <_fflush_r+0xa>
 801a916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a918:	07d0      	lsls	r0, r2, #31
 801a91a:	d404      	bmi.n	801a926 <_fflush_r+0x3a>
 801a91c:	0599      	lsls	r1, r3, #22
 801a91e:	d402      	bmi.n	801a926 <_fflush_r+0x3a>
 801a920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a922:	f000 f927 	bl	801ab74 <__retarget_lock_acquire_recursive>
 801a926:	4628      	mov	r0, r5
 801a928:	4621      	mov	r1, r4
 801a92a:	f7ff ff59 	bl	801a7e0 <__sflush_r>
 801a92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a930:	07da      	lsls	r2, r3, #31
 801a932:	4605      	mov	r5, r0
 801a934:	d4e0      	bmi.n	801a8f8 <_fflush_r+0xc>
 801a936:	89a3      	ldrh	r3, [r4, #12]
 801a938:	059b      	lsls	r3, r3, #22
 801a93a:	d4dd      	bmi.n	801a8f8 <_fflush_r+0xc>
 801a93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a93e:	f000 f91a 	bl	801ab76 <__retarget_lock_release_recursive>
 801a942:	e7d9      	b.n	801a8f8 <_fflush_r+0xc>
 801a944:	4b05      	ldr	r3, [pc, #20]	; (801a95c <_fflush_r+0x70>)
 801a946:	429c      	cmp	r4, r3
 801a948:	d101      	bne.n	801a94e <_fflush_r+0x62>
 801a94a:	68ac      	ldr	r4, [r5, #8]
 801a94c:	e7df      	b.n	801a90e <_fflush_r+0x22>
 801a94e:	4b04      	ldr	r3, [pc, #16]	; (801a960 <_fflush_r+0x74>)
 801a950:	429c      	cmp	r4, r3
 801a952:	bf08      	it	eq
 801a954:	68ec      	ldreq	r4, [r5, #12]
 801a956:	e7da      	b.n	801a90e <_fflush_r+0x22>
 801a958:	0801bc1c 	.word	0x0801bc1c
 801a95c:	0801bc3c 	.word	0x0801bc3c
 801a960:	0801bbfc 	.word	0x0801bbfc

0801a964 <std>:
 801a964:	2300      	movs	r3, #0
 801a966:	b510      	push	{r4, lr}
 801a968:	4604      	mov	r4, r0
 801a96a:	e9c0 3300 	strd	r3, r3, [r0]
 801a96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a972:	6083      	str	r3, [r0, #8]
 801a974:	8181      	strh	r1, [r0, #12]
 801a976:	6643      	str	r3, [r0, #100]	; 0x64
 801a978:	81c2      	strh	r2, [r0, #14]
 801a97a:	6183      	str	r3, [r0, #24]
 801a97c:	4619      	mov	r1, r3
 801a97e:	2208      	movs	r2, #8
 801a980:	305c      	adds	r0, #92	; 0x5c
 801a982:	f7fc f8e1 	bl	8016b48 <memset>
 801a986:	4b05      	ldr	r3, [pc, #20]	; (801a99c <std+0x38>)
 801a988:	6263      	str	r3, [r4, #36]	; 0x24
 801a98a:	4b05      	ldr	r3, [pc, #20]	; (801a9a0 <std+0x3c>)
 801a98c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a98e:	4b05      	ldr	r3, [pc, #20]	; (801a9a4 <std+0x40>)
 801a990:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a992:	4b05      	ldr	r3, [pc, #20]	; (801a9a8 <std+0x44>)
 801a994:	6224      	str	r4, [r4, #32]
 801a996:	6323      	str	r3, [r4, #48]	; 0x30
 801a998:	bd10      	pop	{r4, pc}
 801a99a:	bf00      	nop
 801a99c:	08017835 	.word	0x08017835
 801a9a0:	08017857 	.word	0x08017857
 801a9a4:	0801788f 	.word	0x0801788f
 801a9a8:	080178b3 	.word	0x080178b3

0801a9ac <_cleanup_r>:
 801a9ac:	4901      	ldr	r1, [pc, #4]	; (801a9b4 <_cleanup_r+0x8>)
 801a9ae:	f000 b8c1 	b.w	801ab34 <_fwalk_reent>
 801a9b2:	bf00      	nop
 801a9b4:	0801a8ed 	.word	0x0801a8ed

0801a9b8 <__sfmoreglue>:
 801a9b8:	b570      	push	{r4, r5, r6, lr}
 801a9ba:	2268      	movs	r2, #104	; 0x68
 801a9bc:	1e4d      	subs	r5, r1, #1
 801a9be:	4355      	muls	r5, r2
 801a9c0:	460e      	mov	r6, r1
 801a9c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a9c6:	f7ff fcd1 	bl	801a36c <_malloc_r>
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	b140      	cbz	r0, 801a9e0 <__sfmoreglue+0x28>
 801a9ce:	2100      	movs	r1, #0
 801a9d0:	e9c0 1600 	strd	r1, r6, [r0]
 801a9d4:	300c      	adds	r0, #12
 801a9d6:	60a0      	str	r0, [r4, #8]
 801a9d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a9dc:	f7fc f8b4 	bl	8016b48 <memset>
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	bd70      	pop	{r4, r5, r6, pc}

0801a9e4 <__sfp_lock_acquire>:
 801a9e4:	4801      	ldr	r0, [pc, #4]	; (801a9ec <__sfp_lock_acquire+0x8>)
 801a9e6:	f000 b8c5 	b.w	801ab74 <__retarget_lock_acquire_recursive>
 801a9ea:	bf00      	nop
 801a9ec:	2400294d 	.word	0x2400294d

0801a9f0 <__sfp_lock_release>:
 801a9f0:	4801      	ldr	r0, [pc, #4]	; (801a9f8 <__sfp_lock_release+0x8>)
 801a9f2:	f000 b8c0 	b.w	801ab76 <__retarget_lock_release_recursive>
 801a9f6:	bf00      	nop
 801a9f8:	2400294d 	.word	0x2400294d

0801a9fc <__sinit_lock_acquire>:
 801a9fc:	4801      	ldr	r0, [pc, #4]	; (801aa04 <__sinit_lock_acquire+0x8>)
 801a9fe:	f000 b8b9 	b.w	801ab74 <__retarget_lock_acquire_recursive>
 801aa02:	bf00      	nop
 801aa04:	2400294e 	.word	0x2400294e

0801aa08 <__sinit_lock_release>:
 801aa08:	4801      	ldr	r0, [pc, #4]	; (801aa10 <__sinit_lock_release+0x8>)
 801aa0a:	f000 b8b4 	b.w	801ab76 <__retarget_lock_release_recursive>
 801aa0e:	bf00      	nop
 801aa10:	2400294e 	.word	0x2400294e

0801aa14 <__sinit>:
 801aa14:	b510      	push	{r4, lr}
 801aa16:	4604      	mov	r4, r0
 801aa18:	f7ff fff0 	bl	801a9fc <__sinit_lock_acquire>
 801aa1c:	69a3      	ldr	r3, [r4, #24]
 801aa1e:	b11b      	cbz	r3, 801aa28 <__sinit+0x14>
 801aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa24:	f7ff bff0 	b.w	801aa08 <__sinit_lock_release>
 801aa28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa2c:	6523      	str	r3, [r4, #80]	; 0x50
 801aa2e:	4b13      	ldr	r3, [pc, #76]	; (801aa7c <__sinit+0x68>)
 801aa30:	4a13      	ldr	r2, [pc, #76]	; (801aa80 <__sinit+0x6c>)
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	62a2      	str	r2, [r4, #40]	; 0x28
 801aa36:	42a3      	cmp	r3, r4
 801aa38:	bf04      	itt	eq
 801aa3a:	2301      	moveq	r3, #1
 801aa3c:	61a3      	streq	r3, [r4, #24]
 801aa3e:	4620      	mov	r0, r4
 801aa40:	f000 f820 	bl	801aa84 <__sfp>
 801aa44:	6060      	str	r0, [r4, #4]
 801aa46:	4620      	mov	r0, r4
 801aa48:	f000 f81c 	bl	801aa84 <__sfp>
 801aa4c:	60a0      	str	r0, [r4, #8]
 801aa4e:	4620      	mov	r0, r4
 801aa50:	f000 f818 	bl	801aa84 <__sfp>
 801aa54:	2200      	movs	r2, #0
 801aa56:	60e0      	str	r0, [r4, #12]
 801aa58:	2104      	movs	r1, #4
 801aa5a:	6860      	ldr	r0, [r4, #4]
 801aa5c:	f7ff ff82 	bl	801a964 <std>
 801aa60:	68a0      	ldr	r0, [r4, #8]
 801aa62:	2201      	movs	r2, #1
 801aa64:	2109      	movs	r1, #9
 801aa66:	f7ff ff7d 	bl	801a964 <std>
 801aa6a:	68e0      	ldr	r0, [r4, #12]
 801aa6c:	2202      	movs	r2, #2
 801aa6e:	2112      	movs	r1, #18
 801aa70:	f7ff ff78 	bl	801a964 <std>
 801aa74:	2301      	movs	r3, #1
 801aa76:	61a3      	str	r3, [r4, #24]
 801aa78:	e7d2      	b.n	801aa20 <__sinit+0xc>
 801aa7a:	bf00      	nop
 801aa7c:	0801b7b4 	.word	0x0801b7b4
 801aa80:	0801a9ad 	.word	0x0801a9ad

0801aa84 <__sfp>:
 801aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa86:	4607      	mov	r7, r0
 801aa88:	f7ff ffac 	bl	801a9e4 <__sfp_lock_acquire>
 801aa8c:	4b1e      	ldr	r3, [pc, #120]	; (801ab08 <__sfp+0x84>)
 801aa8e:	681e      	ldr	r6, [r3, #0]
 801aa90:	69b3      	ldr	r3, [r6, #24]
 801aa92:	b913      	cbnz	r3, 801aa9a <__sfp+0x16>
 801aa94:	4630      	mov	r0, r6
 801aa96:	f7ff ffbd 	bl	801aa14 <__sinit>
 801aa9a:	3648      	adds	r6, #72	; 0x48
 801aa9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aaa0:	3b01      	subs	r3, #1
 801aaa2:	d503      	bpl.n	801aaac <__sfp+0x28>
 801aaa4:	6833      	ldr	r3, [r6, #0]
 801aaa6:	b30b      	cbz	r3, 801aaec <__sfp+0x68>
 801aaa8:	6836      	ldr	r6, [r6, #0]
 801aaaa:	e7f7      	b.n	801aa9c <__sfp+0x18>
 801aaac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aab0:	b9d5      	cbnz	r5, 801aae8 <__sfp+0x64>
 801aab2:	4b16      	ldr	r3, [pc, #88]	; (801ab0c <__sfp+0x88>)
 801aab4:	60e3      	str	r3, [r4, #12]
 801aab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aaba:	6665      	str	r5, [r4, #100]	; 0x64
 801aabc:	f000 f859 	bl	801ab72 <__retarget_lock_init_recursive>
 801aac0:	f7ff ff96 	bl	801a9f0 <__sfp_lock_release>
 801aac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aacc:	6025      	str	r5, [r4, #0]
 801aace:	61a5      	str	r5, [r4, #24]
 801aad0:	2208      	movs	r2, #8
 801aad2:	4629      	mov	r1, r5
 801aad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aad8:	f7fc f836 	bl	8016b48 <memset>
 801aadc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aae4:	4620      	mov	r0, r4
 801aae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aae8:	3468      	adds	r4, #104	; 0x68
 801aaea:	e7d9      	b.n	801aaa0 <__sfp+0x1c>
 801aaec:	2104      	movs	r1, #4
 801aaee:	4638      	mov	r0, r7
 801aaf0:	f7ff ff62 	bl	801a9b8 <__sfmoreglue>
 801aaf4:	4604      	mov	r4, r0
 801aaf6:	6030      	str	r0, [r6, #0]
 801aaf8:	2800      	cmp	r0, #0
 801aafa:	d1d5      	bne.n	801aaa8 <__sfp+0x24>
 801aafc:	f7ff ff78 	bl	801a9f0 <__sfp_lock_release>
 801ab00:	230c      	movs	r3, #12
 801ab02:	603b      	str	r3, [r7, #0]
 801ab04:	e7ee      	b.n	801aae4 <__sfp+0x60>
 801ab06:	bf00      	nop
 801ab08:	0801b7b4 	.word	0x0801b7b4
 801ab0c:	ffff0001 	.word	0xffff0001

0801ab10 <fiprintf>:
 801ab10:	b40e      	push	{r1, r2, r3}
 801ab12:	b503      	push	{r0, r1, lr}
 801ab14:	4601      	mov	r1, r0
 801ab16:	ab03      	add	r3, sp, #12
 801ab18:	4805      	ldr	r0, [pc, #20]	; (801ab30 <fiprintf+0x20>)
 801ab1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab1e:	6800      	ldr	r0, [r0, #0]
 801ab20:	9301      	str	r3, [sp, #4]
 801ab22:	f000 f8a7 	bl	801ac74 <_vfiprintf_r>
 801ab26:	b002      	add	sp, #8
 801ab28:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab2c:	b003      	add	sp, #12
 801ab2e:	4770      	bx	lr
 801ab30:	24000128 	.word	0x24000128

0801ab34 <_fwalk_reent>:
 801ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab38:	4606      	mov	r6, r0
 801ab3a:	4688      	mov	r8, r1
 801ab3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab40:	2700      	movs	r7, #0
 801ab42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab46:	f1b9 0901 	subs.w	r9, r9, #1
 801ab4a:	d505      	bpl.n	801ab58 <_fwalk_reent+0x24>
 801ab4c:	6824      	ldr	r4, [r4, #0]
 801ab4e:	2c00      	cmp	r4, #0
 801ab50:	d1f7      	bne.n	801ab42 <_fwalk_reent+0xe>
 801ab52:	4638      	mov	r0, r7
 801ab54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab58:	89ab      	ldrh	r3, [r5, #12]
 801ab5a:	2b01      	cmp	r3, #1
 801ab5c:	d907      	bls.n	801ab6e <_fwalk_reent+0x3a>
 801ab5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ab62:	3301      	adds	r3, #1
 801ab64:	d003      	beq.n	801ab6e <_fwalk_reent+0x3a>
 801ab66:	4629      	mov	r1, r5
 801ab68:	4630      	mov	r0, r6
 801ab6a:	47c0      	blx	r8
 801ab6c:	4307      	orrs	r7, r0
 801ab6e:	3568      	adds	r5, #104	; 0x68
 801ab70:	e7e9      	b.n	801ab46 <_fwalk_reent+0x12>

0801ab72 <__retarget_lock_init_recursive>:
 801ab72:	4770      	bx	lr

0801ab74 <__retarget_lock_acquire_recursive>:
 801ab74:	4770      	bx	lr

0801ab76 <__retarget_lock_release_recursive>:
 801ab76:	4770      	bx	lr

0801ab78 <memmove>:
 801ab78:	4288      	cmp	r0, r1
 801ab7a:	b510      	push	{r4, lr}
 801ab7c:	eb01 0402 	add.w	r4, r1, r2
 801ab80:	d902      	bls.n	801ab88 <memmove+0x10>
 801ab82:	4284      	cmp	r4, r0
 801ab84:	4623      	mov	r3, r4
 801ab86:	d807      	bhi.n	801ab98 <memmove+0x20>
 801ab88:	1e43      	subs	r3, r0, #1
 801ab8a:	42a1      	cmp	r1, r4
 801ab8c:	d008      	beq.n	801aba0 <memmove+0x28>
 801ab8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab92:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ab96:	e7f8      	b.n	801ab8a <memmove+0x12>
 801ab98:	4402      	add	r2, r0
 801ab9a:	4601      	mov	r1, r0
 801ab9c:	428a      	cmp	r2, r1
 801ab9e:	d100      	bne.n	801aba2 <memmove+0x2a>
 801aba0:	bd10      	pop	{r4, pc}
 801aba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801abaa:	e7f7      	b.n	801ab9c <memmove+0x24>

0801abac <__malloc_lock>:
 801abac:	4801      	ldr	r0, [pc, #4]	; (801abb4 <__malloc_lock+0x8>)
 801abae:	f7ff bfe1 	b.w	801ab74 <__retarget_lock_acquire_recursive>
 801abb2:	bf00      	nop
 801abb4:	2400294c 	.word	0x2400294c

0801abb8 <__malloc_unlock>:
 801abb8:	4801      	ldr	r0, [pc, #4]	; (801abc0 <__malloc_unlock+0x8>)
 801abba:	f7ff bfdc 	b.w	801ab76 <__retarget_lock_release_recursive>
 801abbe:	bf00      	nop
 801abc0:	2400294c 	.word	0x2400294c

0801abc4 <_realloc_r>:
 801abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abc8:	4680      	mov	r8, r0
 801abca:	4614      	mov	r4, r2
 801abcc:	460e      	mov	r6, r1
 801abce:	b921      	cbnz	r1, 801abda <_realloc_r+0x16>
 801abd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801abd4:	4611      	mov	r1, r2
 801abd6:	f7ff bbc9 	b.w	801a36c <_malloc_r>
 801abda:	b92a      	cbnz	r2, 801abe8 <_realloc_r+0x24>
 801abdc:	f7ff fb5a 	bl	801a294 <_free_r>
 801abe0:	4625      	mov	r5, r4
 801abe2:	4628      	mov	r0, r5
 801abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abe8:	f000 faa0 	bl	801b12c <_malloc_usable_size_r>
 801abec:	4284      	cmp	r4, r0
 801abee:	4607      	mov	r7, r0
 801abf0:	d802      	bhi.n	801abf8 <_realloc_r+0x34>
 801abf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801abf6:	d812      	bhi.n	801ac1e <_realloc_r+0x5a>
 801abf8:	4621      	mov	r1, r4
 801abfa:	4640      	mov	r0, r8
 801abfc:	f7ff fbb6 	bl	801a36c <_malloc_r>
 801ac00:	4605      	mov	r5, r0
 801ac02:	2800      	cmp	r0, #0
 801ac04:	d0ed      	beq.n	801abe2 <_realloc_r+0x1e>
 801ac06:	42bc      	cmp	r4, r7
 801ac08:	4622      	mov	r2, r4
 801ac0a:	4631      	mov	r1, r6
 801ac0c:	bf28      	it	cs
 801ac0e:	463a      	movcs	r2, r7
 801ac10:	f7fb ff8c 	bl	8016b2c <memcpy>
 801ac14:	4631      	mov	r1, r6
 801ac16:	4640      	mov	r0, r8
 801ac18:	f7ff fb3c 	bl	801a294 <_free_r>
 801ac1c:	e7e1      	b.n	801abe2 <_realloc_r+0x1e>
 801ac1e:	4635      	mov	r5, r6
 801ac20:	e7df      	b.n	801abe2 <_realloc_r+0x1e>

0801ac22 <__sfputc_r>:
 801ac22:	6893      	ldr	r3, [r2, #8]
 801ac24:	3b01      	subs	r3, #1
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	b410      	push	{r4}
 801ac2a:	6093      	str	r3, [r2, #8]
 801ac2c:	da08      	bge.n	801ac40 <__sfputc_r+0x1e>
 801ac2e:	6994      	ldr	r4, [r2, #24]
 801ac30:	42a3      	cmp	r3, r4
 801ac32:	db01      	blt.n	801ac38 <__sfputc_r+0x16>
 801ac34:	290a      	cmp	r1, #10
 801ac36:	d103      	bne.n	801ac40 <__sfputc_r+0x1e>
 801ac38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac3c:	f000 b94a 	b.w	801aed4 <__swbuf_r>
 801ac40:	6813      	ldr	r3, [r2, #0]
 801ac42:	1c58      	adds	r0, r3, #1
 801ac44:	6010      	str	r0, [r2, #0]
 801ac46:	7019      	strb	r1, [r3, #0]
 801ac48:	4608      	mov	r0, r1
 801ac4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ac4e:	4770      	bx	lr

0801ac50 <__sfputs_r>:
 801ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac52:	4606      	mov	r6, r0
 801ac54:	460f      	mov	r7, r1
 801ac56:	4614      	mov	r4, r2
 801ac58:	18d5      	adds	r5, r2, r3
 801ac5a:	42ac      	cmp	r4, r5
 801ac5c:	d101      	bne.n	801ac62 <__sfputs_r+0x12>
 801ac5e:	2000      	movs	r0, #0
 801ac60:	e007      	b.n	801ac72 <__sfputs_r+0x22>
 801ac62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac66:	463a      	mov	r2, r7
 801ac68:	4630      	mov	r0, r6
 801ac6a:	f7ff ffda 	bl	801ac22 <__sfputc_r>
 801ac6e:	1c43      	adds	r3, r0, #1
 801ac70:	d1f3      	bne.n	801ac5a <__sfputs_r+0xa>
 801ac72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ac74 <_vfiprintf_r>:
 801ac74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac78:	460d      	mov	r5, r1
 801ac7a:	b09d      	sub	sp, #116	; 0x74
 801ac7c:	4614      	mov	r4, r2
 801ac7e:	4698      	mov	r8, r3
 801ac80:	4606      	mov	r6, r0
 801ac82:	b118      	cbz	r0, 801ac8c <_vfiprintf_r+0x18>
 801ac84:	6983      	ldr	r3, [r0, #24]
 801ac86:	b90b      	cbnz	r3, 801ac8c <_vfiprintf_r+0x18>
 801ac88:	f7ff fec4 	bl	801aa14 <__sinit>
 801ac8c:	4b89      	ldr	r3, [pc, #548]	; (801aeb4 <_vfiprintf_r+0x240>)
 801ac8e:	429d      	cmp	r5, r3
 801ac90:	d11b      	bne.n	801acca <_vfiprintf_r+0x56>
 801ac92:	6875      	ldr	r5, [r6, #4]
 801ac94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac96:	07d9      	lsls	r1, r3, #31
 801ac98:	d405      	bmi.n	801aca6 <_vfiprintf_r+0x32>
 801ac9a:	89ab      	ldrh	r3, [r5, #12]
 801ac9c:	059a      	lsls	r2, r3, #22
 801ac9e:	d402      	bmi.n	801aca6 <_vfiprintf_r+0x32>
 801aca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aca2:	f7ff ff67 	bl	801ab74 <__retarget_lock_acquire_recursive>
 801aca6:	89ab      	ldrh	r3, [r5, #12]
 801aca8:	071b      	lsls	r3, r3, #28
 801acaa:	d501      	bpl.n	801acb0 <_vfiprintf_r+0x3c>
 801acac:	692b      	ldr	r3, [r5, #16]
 801acae:	b9eb      	cbnz	r3, 801acec <_vfiprintf_r+0x78>
 801acb0:	4629      	mov	r1, r5
 801acb2:	4630      	mov	r0, r6
 801acb4:	f000 f960 	bl	801af78 <__swsetup_r>
 801acb8:	b1c0      	cbz	r0, 801acec <_vfiprintf_r+0x78>
 801acba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acbc:	07dc      	lsls	r4, r3, #31
 801acbe:	d50e      	bpl.n	801acde <_vfiprintf_r+0x6a>
 801acc0:	f04f 30ff 	mov.w	r0, #4294967295
 801acc4:	b01d      	add	sp, #116	; 0x74
 801acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acca:	4b7b      	ldr	r3, [pc, #492]	; (801aeb8 <_vfiprintf_r+0x244>)
 801accc:	429d      	cmp	r5, r3
 801acce:	d101      	bne.n	801acd4 <_vfiprintf_r+0x60>
 801acd0:	68b5      	ldr	r5, [r6, #8]
 801acd2:	e7df      	b.n	801ac94 <_vfiprintf_r+0x20>
 801acd4:	4b79      	ldr	r3, [pc, #484]	; (801aebc <_vfiprintf_r+0x248>)
 801acd6:	429d      	cmp	r5, r3
 801acd8:	bf08      	it	eq
 801acda:	68f5      	ldreq	r5, [r6, #12]
 801acdc:	e7da      	b.n	801ac94 <_vfiprintf_r+0x20>
 801acde:	89ab      	ldrh	r3, [r5, #12]
 801ace0:	0598      	lsls	r0, r3, #22
 801ace2:	d4ed      	bmi.n	801acc0 <_vfiprintf_r+0x4c>
 801ace4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ace6:	f7ff ff46 	bl	801ab76 <__retarget_lock_release_recursive>
 801acea:	e7e9      	b.n	801acc0 <_vfiprintf_r+0x4c>
 801acec:	2300      	movs	r3, #0
 801acee:	9309      	str	r3, [sp, #36]	; 0x24
 801acf0:	2320      	movs	r3, #32
 801acf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801acf6:	f8cd 800c 	str.w	r8, [sp, #12]
 801acfa:	2330      	movs	r3, #48	; 0x30
 801acfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aec0 <_vfiprintf_r+0x24c>
 801ad00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad04:	f04f 0901 	mov.w	r9, #1
 801ad08:	4623      	mov	r3, r4
 801ad0a:	469a      	mov	sl, r3
 801ad0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad10:	b10a      	cbz	r2, 801ad16 <_vfiprintf_r+0xa2>
 801ad12:	2a25      	cmp	r2, #37	; 0x25
 801ad14:	d1f9      	bne.n	801ad0a <_vfiprintf_r+0x96>
 801ad16:	ebba 0b04 	subs.w	fp, sl, r4
 801ad1a:	d00b      	beq.n	801ad34 <_vfiprintf_r+0xc0>
 801ad1c:	465b      	mov	r3, fp
 801ad1e:	4622      	mov	r2, r4
 801ad20:	4629      	mov	r1, r5
 801ad22:	4630      	mov	r0, r6
 801ad24:	f7ff ff94 	bl	801ac50 <__sfputs_r>
 801ad28:	3001      	adds	r0, #1
 801ad2a:	f000 80aa 	beq.w	801ae82 <_vfiprintf_r+0x20e>
 801ad2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad30:	445a      	add	r2, fp
 801ad32:	9209      	str	r2, [sp, #36]	; 0x24
 801ad34:	f89a 3000 	ldrb.w	r3, [sl]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	f000 80a2 	beq.w	801ae82 <_vfiprintf_r+0x20e>
 801ad3e:	2300      	movs	r3, #0
 801ad40:	f04f 32ff 	mov.w	r2, #4294967295
 801ad44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad48:	f10a 0a01 	add.w	sl, sl, #1
 801ad4c:	9304      	str	r3, [sp, #16]
 801ad4e:	9307      	str	r3, [sp, #28]
 801ad50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad54:	931a      	str	r3, [sp, #104]	; 0x68
 801ad56:	4654      	mov	r4, sl
 801ad58:	2205      	movs	r2, #5
 801ad5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad5e:	4858      	ldr	r0, [pc, #352]	; (801aec0 <_vfiprintf_r+0x24c>)
 801ad60:	f7e5 fade 	bl	8000320 <memchr>
 801ad64:	9a04      	ldr	r2, [sp, #16]
 801ad66:	b9d8      	cbnz	r0, 801ada0 <_vfiprintf_r+0x12c>
 801ad68:	06d1      	lsls	r1, r2, #27
 801ad6a:	bf44      	itt	mi
 801ad6c:	2320      	movmi	r3, #32
 801ad6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad72:	0713      	lsls	r3, r2, #28
 801ad74:	bf44      	itt	mi
 801ad76:	232b      	movmi	r3, #43	; 0x2b
 801ad78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad7c:	f89a 3000 	ldrb.w	r3, [sl]
 801ad80:	2b2a      	cmp	r3, #42	; 0x2a
 801ad82:	d015      	beq.n	801adb0 <_vfiprintf_r+0x13c>
 801ad84:	9a07      	ldr	r2, [sp, #28]
 801ad86:	4654      	mov	r4, sl
 801ad88:	2000      	movs	r0, #0
 801ad8a:	f04f 0c0a 	mov.w	ip, #10
 801ad8e:	4621      	mov	r1, r4
 801ad90:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad94:	3b30      	subs	r3, #48	; 0x30
 801ad96:	2b09      	cmp	r3, #9
 801ad98:	d94e      	bls.n	801ae38 <_vfiprintf_r+0x1c4>
 801ad9a:	b1b0      	cbz	r0, 801adca <_vfiprintf_r+0x156>
 801ad9c:	9207      	str	r2, [sp, #28]
 801ad9e:	e014      	b.n	801adca <_vfiprintf_r+0x156>
 801ada0:	eba0 0308 	sub.w	r3, r0, r8
 801ada4:	fa09 f303 	lsl.w	r3, r9, r3
 801ada8:	4313      	orrs	r3, r2
 801adaa:	9304      	str	r3, [sp, #16]
 801adac:	46a2      	mov	sl, r4
 801adae:	e7d2      	b.n	801ad56 <_vfiprintf_r+0xe2>
 801adb0:	9b03      	ldr	r3, [sp, #12]
 801adb2:	1d19      	adds	r1, r3, #4
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	9103      	str	r1, [sp, #12]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	bfbb      	ittet	lt
 801adbc:	425b      	neglt	r3, r3
 801adbe:	f042 0202 	orrlt.w	r2, r2, #2
 801adc2:	9307      	strge	r3, [sp, #28]
 801adc4:	9307      	strlt	r3, [sp, #28]
 801adc6:	bfb8      	it	lt
 801adc8:	9204      	strlt	r2, [sp, #16]
 801adca:	7823      	ldrb	r3, [r4, #0]
 801adcc:	2b2e      	cmp	r3, #46	; 0x2e
 801adce:	d10c      	bne.n	801adea <_vfiprintf_r+0x176>
 801add0:	7863      	ldrb	r3, [r4, #1]
 801add2:	2b2a      	cmp	r3, #42	; 0x2a
 801add4:	d135      	bne.n	801ae42 <_vfiprintf_r+0x1ce>
 801add6:	9b03      	ldr	r3, [sp, #12]
 801add8:	1d1a      	adds	r2, r3, #4
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	9203      	str	r2, [sp, #12]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	bfb8      	it	lt
 801ade2:	f04f 33ff 	movlt.w	r3, #4294967295
 801ade6:	3402      	adds	r4, #2
 801ade8:	9305      	str	r3, [sp, #20]
 801adea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aed0 <_vfiprintf_r+0x25c>
 801adee:	7821      	ldrb	r1, [r4, #0]
 801adf0:	2203      	movs	r2, #3
 801adf2:	4650      	mov	r0, sl
 801adf4:	f7e5 fa94 	bl	8000320 <memchr>
 801adf8:	b140      	cbz	r0, 801ae0c <_vfiprintf_r+0x198>
 801adfa:	2340      	movs	r3, #64	; 0x40
 801adfc:	eba0 000a 	sub.w	r0, r0, sl
 801ae00:	fa03 f000 	lsl.w	r0, r3, r0
 801ae04:	9b04      	ldr	r3, [sp, #16]
 801ae06:	4303      	orrs	r3, r0
 801ae08:	3401      	adds	r4, #1
 801ae0a:	9304      	str	r3, [sp, #16]
 801ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae10:	482c      	ldr	r0, [pc, #176]	; (801aec4 <_vfiprintf_r+0x250>)
 801ae12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae16:	2206      	movs	r2, #6
 801ae18:	f7e5 fa82 	bl	8000320 <memchr>
 801ae1c:	2800      	cmp	r0, #0
 801ae1e:	d03f      	beq.n	801aea0 <_vfiprintf_r+0x22c>
 801ae20:	4b29      	ldr	r3, [pc, #164]	; (801aec8 <_vfiprintf_r+0x254>)
 801ae22:	bb1b      	cbnz	r3, 801ae6c <_vfiprintf_r+0x1f8>
 801ae24:	9b03      	ldr	r3, [sp, #12]
 801ae26:	3307      	adds	r3, #7
 801ae28:	f023 0307 	bic.w	r3, r3, #7
 801ae2c:	3308      	adds	r3, #8
 801ae2e:	9303      	str	r3, [sp, #12]
 801ae30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae32:	443b      	add	r3, r7
 801ae34:	9309      	str	r3, [sp, #36]	; 0x24
 801ae36:	e767      	b.n	801ad08 <_vfiprintf_r+0x94>
 801ae38:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae3c:	460c      	mov	r4, r1
 801ae3e:	2001      	movs	r0, #1
 801ae40:	e7a5      	b.n	801ad8e <_vfiprintf_r+0x11a>
 801ae42:	2300      	movs	r3, #0
 801ae44:	3401      	adds	r4, #1
 801ae46:	9305      	str	r3, [sp, #20]
 801ae48:	4619      	mov	r1, r3
 801ae4a:	f04f 0c0a 	mov.w	ip, #10
 801ae4e:	4620      	mov	r0, r4
 801ae50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae54:	3a30      	subs	r2, #48	; 0x30
 801ae56:	2a09      	cmp	r2, #9
 801ae58:	d903      	bls.n	801ae62 <_vfiprintf_r+0x1ee>
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d0c5      	beq.n	801adea <_vfiprintf_r+0x176>
 801ae5e:	9105      	str	r1, [sp, #20]
 801ae60:	e7c3      	b.n	801adea <_vfiprintf_r+0x176>
 801ae62:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae66:	4604      	mov	r4, r0
 801ae68:	2301      	movs	r3, #1
 801ae6a:	e7f0      	b.n	801ae4e <_vfiprintf_r+0x1da>
 801ae6c:	ab03      	add	r3, sp, #12
 801ae6e:	9300      	str	r3, [sp, #0]
 801ae70:	462a      	mov	r2, r5
 801ae72:	4b16      	ldr	r3, [pc, #88]	; (801aecc <_vfiprintf_r+0x258>)
 801ae74:	a904      	add	r1, sp, #16
 801ae76:	4630      	mov	r0, r6
 801ae78:	f7fb fefe 	bl	8016c78 <_printf_float>
 801ae7c:	4607      	mov	r7, r0
 801ae7e:	1c78      	adds	r0, r7, #1
 801ae80:	d1d6      	bne.n	801ae30 <_vfiprintf_r+0x1bc>
 801ae82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae84:	07d9      	lsls	r1, r3, #31
 801ae86:	d405      	bmi.n	801ae94 <_vfiprintf_r+0x220>
 801ae88:	89ab      	ldrh	r3, [r5, #12]
 801ae8a:	059a      	lsls	r2, r3, #22
 801ae8c:	d402      	bmi.n	801ae94 <_vfiprintf_r+0x220>
 801ae8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae90:	f7ff fe71 	bl	801ab76 <__retarget_lock_release_recursive>
 801ae94:	89ab      	ldrh	r3, [r5, #12]
 801ae96:	065b      	lsls	r3, r3, #25
 801ae98:	f53f af12 	bmi.w	801acc0 <_vfiprintf_r+0x4c>
 801ae9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae9e:	e711      	b.n	801acc4 <_vfiprintf_r+0x50>
 801aea0:	ab03      	add	r3, sp, #12
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	462a      	mov	r2, r5
 801aea6:	4b09      	ldr	r3, [pc, #36]	; (801aecc <_vfiprintf_r+0x258>)
 801aea8:	a904      	add	r1, sp, #16
 801aeaa:	4630      	mov	r0, r6
 801aeac:	f7fc f970 	bl	8017190 <_printf_i>
 801aeb0:	e7e4      	b.n	801ae7c <_vfiprintf_r+0x208>
 801aeb2:	bf00      	nop
 801aeb4:	0801bc1c 	.word	0x0801bc1c
 801aeb8:	0801bc3c 	.word	0x0801bc3c
 801aebc:	0801bbfc 	.word	0x0801bbfc
 801aec0:	0801bbac 	.word	0x0801bbac
 801aec4:	0801bbb6 	.word	0x0801bbb6
 801aec8:	08016c79 	.word	0x08016c79
 801aecc:	0801ac51 	.word	0x0801ac51
 801aed0:	0801bbb2 	.word	0x0801bbb2

0801aed4 <__swbuf_r>:
 801aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aed6:	460e      	mov	r6, r1
 801aed8:	4614      	mov	r4, r2
 801aeda:	4605      	mov	r5, r0
 801aedc:	b118      	cbz	r0, 801aee6 <__swbuf_r+0x12>
 801aede:	6983      	ldr	r3, [r0, #24]
 801aee0:	b90b      	cbnz	r3, 801aee6 <__swbuf_r+0x12>
 801aee2:	f7ff fd97 	bl	801aa14 <__sinit>
 801aee6:	4b21      	ldr	r3, [pc, #132]	; (801af6c <__swbuf_r+0x98>)
 801aee8:	429c      	cmp	r4, r3
 801aeea:	d12b      	bne.n	801af44 <__swbuf_r+0x70>
 801aeec:	686c      	ldr	r4, [r5, #4]
 801aeee:	69a3      	ldr	r3, [r4, #24]
 801aef0:	60a3      	str	r3, [r4, #8]
 801aef2:	89a3      	ldrh	r3, [r4, #12]
 801aef4:	071a      	lsls	r2, r3, #28
 801aef6:	d52f      	bpl.n	801af58 <__swbuf_r+0x84>
 801aef8:	6923      	ldr	r3, [r4, #16]
 801aefa:	b36b      	cbz	r3, 801af58 <__swbuf_r+0x84>
 801aefc:	6923      	ldr	r3, [r4, #16]
 801aefe:	6820      	ldr	r0, [r4, #0]
 801af00:	1ac0      	subs	r0, r0, r3
 801af02:	6963      	ldr	r3, [r4, #20]
 801af04:	b2f6      	uxtb	r6, r6
 801af06:	4283      	cmp	r3, r0
 801af08:	4637      	mov	r7, r6
 801af0a:	dc04      	bgt.n	801af16 <__swbuf_r+0x42>
 801af0c:	4621      	mov	r1, r4
 801af0e:	4628      	mov	r0, r5
 801af10:	f7ff fcec 	bl	801a8ec <_fflush_r>
 801af14:	bb30      	cbnz	r0, 801af64 <__swbuf_r+0x90>
 801af16:	68a3      	ldr	r3, [r4, #8]
 801af18:	3b01      	subs	r3, #1
 801af1a:	60a3      	str	r3, [r4, #8]
 801af1c:	6823      	ldr	r3, [r4, #0]
 801af1e:	1c5a      	adds	r2, r3, #1
 801af20:	6022      	str	r2, [r4, #0]
 801af22:	701e      	strb	r6, [r3, #0]
 801af24:	6963      	ldr	r3, [r4, #20]
 801af26:	3001      	adds	r0, #1
 801af28:	4283      	cmp	r3, r0
 801af2a:	d004      	beq.n	801af36 <__swbuf_r+0x62>
 801af2c:	89a3      	ldrh	r3, [r4, #12]
 801af2e:	07db      	lsls	r3, r3, #31
 801af30:	d506      	bpl.n	801af40 <__swbuf_r+0x6c>
 801af32:	2e0a      	cmp	r6, #10
 801af34:	d104      	bne.n	801af40 <__swbuf_r+0x6c>
 801af36:	4621      	mov	r1, r4
 801af38:	4628      	mov	r0, r5
 801af3a:	f7ff fcd7 	bl	801a8ec <_fflush_r>
 801af3e:	b988      	cbnz	r0, 801af64 <__swbuf_r+0x90>
 801af40:	4638      	mov	r0, r7
 801af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af44:	4b0a      	ldr	r3, [pc, #40]	; (801af70 <__swbuf_r+0x9c>)
 801af46:	429c      	cmp	r4, r3
 801af48:	d101      	bne.n	801af4e <__swbuf_r+0x7a>
 801af4a:	68ac      	ldr	r4, [r5, #8]
 801af4c:	e7cf      	b.n	801aeee <__swbuf_r+0x1a>
 801af4e:	4b09      	ldr	r3, [pc, #36]	; (801af74 <__swbuf_r+0xa0>)
 801af50:	429c      	cmp	r4, r3
 801af52:	bf08      	it	eq
 801af54:	68ec      	ldreq	r4, [r5, #12]
 801af56:	e7ca      	b.n	801aeee <__swbuf_r+0x1a>
 801af58:	4621      	mov	r1, r4
 801af5a:	4628      	mov	r0, r5
 801af5c:	f000 f80c 	bl	801af78 <__swsetup_r>
 801af60:	2800      	cmp	r0, #0
 801af62:	d0cb      	beq.n	801aefc <__swbuf_r+0x28>
 801af64:	f04f 37ff 	mov.w	r7, #4294967295
 801af68:	e7ea      	b.n	801af40 <__swbuf_r+0x6c>
 801af6a:	bf00      	nop
 801af6c:	0801bc1c 	.word	0x0801bc1c
 801af70:	0801bc3c 	.word	0x0801bc3c
 801af74:	0801bbfc 	.word	0x0801bbfc

0801af78 <__swsetup_r>:
 801af78:	4b32      	ldr	r3, [pc, #200]	; (801b044 <__swsetup_r+0xcc>)
 801af7a:	b570      	push	{r4, r5, r6, lr}
 801af7c:	681d      	ldr	r5, [r3, #0]
 801af7e:	4606      	mov	r6, r0
 801af80:	460c      	mov	r4, r1
 801af82:	b125      	cbz	r5, 801af8e <__swsetup_r+0x16>
 801af84:	69ab      	ldr	r3, [r5, #24]
 801af86:	b913      	cbnz	r3, 801af8e <__swsetup_r+0x16>
 801af88:	4628      	mov	r0, r5
 801af8a:	f7ff fd43 	bl	801aa14 <__sinit>
 801af8e:	4b2e      	ldr	r3, [pc, #184]	; (801b048 <__swsetup_r+0xd0>)
 801af90:	429c      	cmp	r4, r3
 801af92:	d10f      	bne.n	801afb4 <__swsetup_r+0x3c>
 801af94:	686c      	ldr	r4, [r5, #4]
 801af96:	89a3      	ldrh	r3, [r4, #12]
 801af98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af9c:	0719      	lsls	r1, r3, #28
 801af9e:	d42c      	bmi.n	801affa <__swsetup_r+0x82>
 801afa0:	06dd      	lsls	r5, r3, #27
 801afa2:	d411      	bmi.n	801afc8 <__swsetup_r+0x50>
 801afa4:	2309      	movs	r3, #9
 801afa6:	6033      	str	r3, [r6, #0]
 801afa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afac:	81a3      	strh	r3, [r4, #12]
 801afae:	f04f 30ff 	mov.w	r0, #4294967295
 801afb2:	e03e      	b.n	801b032 <__swsetup_r+0xba>
 801afb4:	4b25      	ldr	r3, [pc, #148]	; (801b04c <__swsetup_r+0xd4>)
 801afb6:	429c      	cmp	r4, r3
 801afb8:	d101      	bne.n	801afbe <__swsetup_r+0x46>
 801afba:	68ac      	ldr	r4, [r5, #8]
 801afbc:	e7eb      	b.n	801af96 <__swsetup_r+0x1e>
 801afbe:	4b24      	ldr	r3, [pc, #144]	; (801b050 <__swsetup_r+0xd8>)
 801afc0:	429c      	cmp	r4, r3
 801afc2:	bf08      	it	eq
 801afc4:	68ec      	ldreq	r4, [r5, #12]
 801afc6:	e7e6      	b.n	801af96 <__swsetup_r+0x1e>
 801afc8:	0758      	lsls	r0, r3, #29
 801afca:	d512      	bpl.n	801aff2 <__swsetup_r+0x7a>
 801afcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afce:	b141      	cbz	r1, 801afe2 <__swsetup_r+0x6a>
 801afd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afd4:	4299      	cmp	r1, r3
 801afd6:	d002      	beq.n	801afde <__swsetup_r+0x66>
 801afd8:	4630      	mov	r0, r6
 801afda:	f7ff f95b 	bl	801a294 <_free_r>
 801afde:	2300      	movs	r3, #0
 801afe0:	6363      	str	r3, [r4, #52]	; 0x34
 801afe2:	89a3      	ldrh	r3, [r4, #12]
 801afe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afe8:	81a3      	strh	r3, [r4, #12]
 801afea:	2300      	movs	r3, #0
 801afec:	6063      	str	r3, [r4, #4]
 801afee:	6923      	ldr	r3, [r4, #16]
 801aff0:	6023      	str	r3, [r4, #0]
 801aff2:	89a3      	ldrh	r3, [r4, #12]
 801aff4:	f043 0308 	orr.w	r3, r3, #8
 801aff8:	81a3      	strh	r3, [r4, #12]
 801affa:	6923      	ldr	r3, [r4, #16]
 801affc:	b94b      	cbnz	r3, 801b012 <__swsetup_r+0x9a>
 801affe:	89a3      	ldrh	r3, [r4, #12]
 801b000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b008:	d003      	beq.n	801b012 <__swsetup_r+0x9a>
 801b00a:	4621      	mov	r1, r4
 801b00c:	4630      	mov	r0, r6
 801b00e:	f000 f84d 	bl	801b0ac <__smakebuf_r>
 801b012:	89a0      	ldrh	r0, [r4, #12]
 801b014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b018:	f010 0301 	ands.w	r3, r0, #1
 801b01c:	d00a      	beq.n	801b034 <__swsetup_r+0xbc>
 801b01e:	2300      	movs	r3, #0
 801b020:	60a3      	str	r3, [r4, #8]
 801b022:	6963      	ldr	r3, [r4, #20]
 801b024:	425b      	negs	r3, r3
 801b026:	61a3      	str	r3, [r4, #24]
 801b028:	6923      	ldr	r3, [r4, #16]
 801b02a:	b943      	cbnz	r3, 801b03e <__swsetup_r+0xc6>
 801b02c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b030:	d1ba      	bne.n	801afa8 <__swsetup_r+0x30>
 801b032:	bd70      	pop	{r4, r5, r6, pc}
 801b034:	0781      	lsls	r1, r0, #30
 801b036:	bf58      	it	pl
 801b038:	6963      	ldrpl	r3, [r4, #20]
 801b03a:	60a3      	str	r3, [r4, #8]
 801b03c:	e7f4      	b.n	801b028 <__swsetup_r+0xb0>
 801b03e:	2000      	movs	r0, #0
 801b040:	e7f7      	b.n	801b032 <__swsetup_r+0xba>
 801b042:	bf00      	nop
 801b044:	24000128 	.word	0x24000128
 801b048:	0801bc1c 	.word	0x0801bc1c
 801b04c:	0801bc3c 	.word	0x0801bc3c
 801b050:	0801bbfc 	.word	0x0801bbfc

0801b054 <abort>:
 801b054:	b508      	push	{r3, lr}
 801b056:	2006      	movs	r0, #6
 801b058:	f000 f898 	bl	801b18c <raise>
 801b05c:	2001      	movs	r0, #1
 801b05e:	f7e8 fb19 	bl	8003694 <_exit>

0801b062 <__swhatbuf_r>:
 801b062:	b570      	push	{r4, r5, r6, lr}
 801b064:	460e      	mov	r6, r1
 801b066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b06a:	2900      	cmp	r1, #0
 801b06c:	b096      	sub	sp, #88	; 0x58
 801b06e:	4614      	mov	r4, r2
 801b070:	461d      	mov	r5, r3
 801b072:	da08      	bge.n	801b086 <__swhatbuf_r+0x24>
 801b074:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b078:	2200      	movs	r2, #0
 801b07a:	602a      	str	r2, [r5, #0]
 801b07c:	061a      	lsls	r2, r3, #24
 801b07e:	d410      	bmi.n	801b0a2 <__swhatbuf_r+0x40>
 801b080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b084:	e00e      	b.n	801b0a4 <__swhatbuf_r+0x42>
 801b086:	466a      	mov	r2, sp
 801b088:	f000 f89c 	bl	801b1c4 <_fstat_r>
 801b08c:	2800      	cmp	r0, #0
 801b08e:	dbf1      	blt.n	801b074 <__swhatbuf_r+0x12>
 801b090:	9a01      	ldr	r2, [sp, #4]
 801b092:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b096:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b09a:	425a      	negs	r2, r3
 801b09c:	415a      	adcs	r2, r3
 801b09e:	602a      	str	r2, [r5, #0]
 801b0a0:	e7ee      	b.n	801b080 <__swhatbuf_r+0x1e>
 801b0a2:	2340      	movs	r3, #64	; 0x40
 801b0a4:	2000      	movs	r0, #0
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	b016      	add	sp, #88	; 0x58
 801b0aa:	bd70      	pop	{r4, r5, r6, pc}

0801b0ac <__smakebuf_r>:
 801b0ac:	898b      	ldrh	r3, [r1, #12]
 801b0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b0b0:	079d      	lsls	r5, r3, #30
 801b0b2:	4606      	mov	r6, r0
 801b0b4:	460c      	mov	r4, r1
 801b0b6:	d507      	bpl.n	801b0c8 <__smakebuf_r+0x1c>
 801b0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b0bc:	6023      	str	r3, [r4, #0]
 801b0be:	6123      	str	r3, [r4, #16]
 801b0c0:	2301      	movs	r3, #1
 801b0c2:	6163      	str	r3, [r4, #20]
 801b0c4:	b002      	add	sp, #8
 801b0c6:	bd70      	pop	{r4, r5, r6, pc}
 801b0c8:	ab01      	add	r3, sp, #4
 801b0ca:	466a      	mov	r2, sp
 801b0cc:	f7ff ffc9 	bl	801b062 <__swhatbuf_r>
 801b0d0:	9900      	ldr	r1, [sp, #0]
 801b0d2:	4605      	mov	r5, r0
 801b0d4:	4630      	mov	r0, r6
 801b0d6:	f7ff f949 	bl	801a36c <_malloc_r>
 801b0da:	b948      	cbnz	r0, 801b0f0 <__smakebuf_r+0x44>
 801b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0e0:	059a      	lsls	r2, r3, #22
 801b0e2:	d4ef      	bmi.n	801b0c4 <__smakebuf_r+0x18>
 801b0e4:	f023 0303 	bic.w	r3, r3, #3
 801b0e8:	f043 0302 	orr.w	r3, r3, #2
 801b0ec:	81a3      	strh	r3, [r4, #12]
 801b0ee:	e7e3      	b.n	801b0b8 <__smakebuf_r+0xc>
 801b0f0:	4b0d      	ldr	r3, [pc, #52]	; (801b128 <__smakebuf_r+0x7c>)
 801b0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 801b0f4:	89a3      	ldrh	r3, [r4, #12]
 801b0f6:	6020      	str	r0, [r4, #0]
 801b0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0fc:	81a3      	strh	r3, [r4, #12]
 801b0fe:	9b00      	ldr	r3, [sp, #0]
 801b100:	6163      	str	r3, [r4, #20]
 801b102:	9b01      	ldr	r3, [sp, #4]
 801b104:	6120      	str	r0, [r4, #16]
 801b106:	b15b      	cbz	r3, 801b120 <__smakebuf_r+0x74>
 801b108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b10c:	4630      	mov	r0, r6
 801b10e:	f000 f86b 	bl	801b1e8 <_isatty_r>
 801b112:	b128      	cbz	r0, 801b120 <__smakebuf_r+0x74>
 801b114:	89a3      	ldrh	r3, [r4, #12]
 801b116:	f023 0303 	bic.w	r3, r3, #3
 801b11a:	f043 0301 	orr.w	r3, r3, #1
 801b11e:	81a3      	strh	r3, [r4, #12]
 801b120:	89a0      	ldrh	r0, [r4, #12]
 801b122:	4305      	orrs	r5, r0
 801b124:	81a5      	strh	r5, [r4, #12]
 801b126:	e7cd      	b.n	801b0c4 <__smakebuf_r+0x18>
 801b128:	0801a9ad 	.word	0x0801a9ad

0801b12c <_malloc_usable_size_r>:
 801b12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b130:	1f18      	subs	r0, r3, #4
 801b132:	2b00      	cmp	r3, #0
 801b134:	bfbc      	itt	lt
 801b136:	580b      	ldrlt	r3, [r1, r0]
 801b138:	18c0      	addlt	r0, r0, r3
 801b13a:	4770      	bx	lr

0801b13c <_raise_r>:
 801b13c:	291f      	cmp	r1, #31
 801b13e:	b538      	push	{r3, r4, r5, lr}
 801b140:	4604      	mov	r4, r0
 801b142:	460d      	mov	r5, r1
 801b144:	d904      	bls.n	801b150 <_raise_r+0x14>
 801b146:	2316      	movs	r3, #22
 801b148:	6003      	str	r3, [r0, #0]
 801b14a:	f04f 30ff 	mov.w	r0, #4294967295
 801b14e:	bd38      	pop	{r3, r4, r5, pc}
 801b150:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b152:	b112      	cbz	r2, 801b15a <_raise_r+0x1e>
 801b154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b158:	b94b      	cbnz	r3, 801b16e <_raise_r+0x32>
 801b15a:	4620      	mov	r0, r4
 801b15c:	f000 f830 	bl	801b1c0 <_getpid_r>
 801b160:	462a      	mov	r2, r5
 801b162:	4601      	mov	r1, r0
 801b164:	4620      	mov	r0, r4
 801b166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b16a:	f000 b817 	b.w	801b19c <_kill_r>
 801b16e:	2b01      	cmp	r3, #1
 801b170:	d00a      	beq.n	801b188 <_raise_r+0x4c>
 801b172:	1c59      	adds	r1, r3, #1
 801b174:	d103      	bne.n	801b17e <_raise_r+0x42>
 801b176:	2316      	movs	r3, #22
 801b178:	6003      	str	r3, [r0, #0]
 801b17a:	2001      	movs	r0, #1
 801b17c:	e7e7      	b.n	801b14e <_raise_r+0x12>
 801b17e:	2400      	movs	r4, #0
 801b180:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b184:	4628      	mov	r0, r5
 801b186:	4798      	blx	r3
 801b188:	2000      	movs	r0, #0
 801b18a:	e7e0      	b.n	801b14e <_raise_r+0x12>

0801b18c <raise>:
 801b18c:	4b02      	ldr	r3, [pc, #8]	; (801b198 <raise+0xc>)
 801b18e:	4601      	mov	r1, r0
 801b190:	6818      	ldr	r0, [r3, #0]
 801b192:	f7ff bfd3 	b.w	801b13c <_raise_r>
 801b196:	bf00      	nop
 801b198:	24000128 	.word	0x24000128

0801b19c <_kill_r>:
 801b19c:	b538      	push	{r3, r4, r5, lr}
 801b19e:	4d07      	ldr	r5, [pc, #28]	; (801b1bc <_kill_r+0x20>)
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	4608      	mov	r0, r1
 801b1a6:	4611      	mov	r1, r2
 801b1a8:	602b      	str	r3, [r5, #0]
 801b1aa:	f7e8 fa63 	bl	8003674 <_kill>
 801b1ae:	1c43      	adds	r3, r0, #1
 801b1b0:	d102      	bne.n	801b1b8 <_kill_r+0x1c>
 801b1b2:	682b      	ldr	r3, [r5, #0]
 801b1b4:	b103      	cbz	r3, 801b1b8 <_kill_r+0x1c>
 801b1b6:	6023      	str	r3, [r4, #0]
 801b1b8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ba:	bf00      	nop
 801b1bc:	24002948 	.word	0x24002948

0801b1c0 <_getpid_r>:
 801b1c0:	f7e8 ba50 	b.w	8003664 <_getpid>

0801b1c4 <_fstat_r>:
 801b1c4:	b538      	push	{r3, r4, r5, lr}
 801b1c6:	4d07      	ldr	r5, [pc, #28]	; (801b1e4 <_fstat_r+0x20>)
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	4608      	mov	r0, r1
 801b1ce:	4611      	mov	r1, r2
 801b1d0:	602b      	str	r3, [r5, #0]
 801b1d2:	f7e8 faae 	bl	8003732 <_fstat>
 801b1d6:	1c43      	adds	r3, r0, #1
 801b1d8:	d102      	bne.n	801b1e0 <_fstat_r+0x1c>
 801b1da:	682b      	ldr	r3, [r5, #0]
 801b1dc:	b103      	cbz	r3, 801b1e0 <_fstat_r+0x1c>
 801b1de:	6023      	str	r3, [r4, #0]
 801b1e0:	bd38      	pop	{r3, r4, r5, pc}
 801b1e2:	bf00      	nop
 801b1e4:	24002948 	.word	0x24002948

0801b1e8 <_isatty_r>:
 801b1e8:	b538      	push	{r3, r4, r5, lr}
 801b1ea:	4d06      	ldr	r5, [pc, #24]	; (801b204 <_isatty_r+0x1c>)
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	4608      	mov	r0, r1
 801b1f2:	602b      	str	r3, [r5, #0]
 801b1f4:	f7e8 faad 	bl	8003752 <_isatty>
 801b1f8:	1c43      	adds	r3, r0, #1
 801b1fa:	d102      	bne.n	801b202 <_isatty_r+0x1a>
 801b1fc:	682b      	ldr	r3, [r5, #0]
 801b1fe:	b103      	cbz	r3, 801b202 <_isatty_r+0x1a>
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	bd38      	pop	{r3, r4, r5, pc}
 801b204:	24002948 	.word	0x24002948

0801b208 <asin>:
 801b208:	b508      	push	{r3, lr}
 801b20a:	ed2d 8b04 	vpush	{d8-d9}
 801b20e:	eeb0 8b40 	vmov.f64	d8, d0
 801b212:	f000 f845 	bl	801b2a0 <__ieee754_asin>
 801b216:	eeb4 8b48 	vcmp.f64	d8, d8
 801b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b21e:	eeb0 9b40 	vmov.f64	d9, d0
 801b222:	d615      	bvs.n	801b250 <asin+0x48>
 801b224:	eeb0 0b48 	vmov.f64	d0, d8
 801b228:	f000 f94b 	bl	801b4c2 <fabs>
 801b22c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801b230:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b238:	dd0a      	ble.n	801b250 <asin+0x48>
 801b23a:	f7fb fc4d 	bl	8016ad8 <__errno>
 801b23e:	ecbd 8b04 	vpop	{d8-d9}
 801b242:	2321      	movs	r3, #33	; 0x21
 801b244:	6003      	str	r3, [r0, #0]
 801b246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b24a:	4804      	ldr	r0, [pc, #16]	; (801b25c <asin+0x54>)
 801b24c:	f7ff ba70 	b.w	801a730 <nan>
 801b250:	eeb0 0b49 	vmov.f64	d0, d9
 801b254:	ecbd 8b04 	vpop	{d8-d9}
 801b258:	bd08      	pop	{r3, pc}
 801b25a:	bf00      	nop
 801b25c:	0801bbf8 	.word	0x0801bbf8

0801b260 <sqrt>:
 801b260:	b508      	push	{r3, lr}
 801b262:	ed2d 8b04 	vpush	{d8-d9}
 801b266:	eeb0 8b40 	vmov.f64	d8, d0
 801b26a:	f000 f927 	bl	801b4bc <__ieee754_sqrt>
 801b26e:	eeb4 8b48 	vcmp.f64	d8, d8
 801b272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b276:	d60c      	bvs.n	801b292 <sqrt+0x32>
 801b278:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801b298 <sqrt+0x38>
 801b27c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b284:	d505      	bpl.n	801b292 <sqrt+0x32>
 801b286:	f7fb fc27 	bl	8016ad8 <__errno>
 801b28a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801b28e:	2321      	movs	r3, #33	; 0x21
 801b290:	6003      	str	r3, [r0, #0]
 801b292:	ecbd 8b04 	vpop	{d8-d9}
 801b296:	bd08      	pop	{r3, pc}
	...

0801b2a0 <__ieee754_asin>:
 801b2a0:	b538      	push	{r3, r4, r5, lr}
 801b2a2:	ee10 5a90 	vmov	r5, s1
 801b2a6:	4b82      	ldr	r3, [pc, #520]	; (801b4b0 <__ieee754_asin+0x210>)
 801b2a8:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b2ac:	429c      	cmp	r4, r3
 801b2ae:	ed2d 8b06 	vpush	{d8-d10}
 801b2b2:	dd19      	ble.n	801b2e8 <__ieee754_asin+0x48>
 801b2b4:	ee10 3a10 	vmov	r3, s0
 801b2b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b2bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b2c0:	4323      	orrs	r3, r4
 801b2c2:	d10c      	bne.n	801b2de <__ieee754_asin+0x3e>
 801b2c4:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 801b438 <__ieee754_asin+0x198>
 801b2c8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 801b440 <__ieee754_asin+0x1a0>
 801b2cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b2d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801b2d4:	eeb0 0b47 	vmov.f64	d0, d7
 801b2d8:	ecbd 8b06 	vpop	{d8-d10}
 801b2dc:	bd38      	pop	{r3, r4, r5, pc}
 801b2de:	ee30 7b40 	vsub.f64	d7, d0, d0
 801b2e2:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801b2e6:	e7f7      	b.n	801b2d8 <__ieee754_asin+0x38>
 801b2e8:	4b72      	ldr	r3, [pc, #456]	; (801b4b4 <__ieee754_asin+0x214>)
 801b2ea:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801b2ee:	429c      	cmp	r4, r3
 801b2f0:	dc0b      	bgt.n	801b30a <__ieee754_asin+0x6a>
 801b2f2:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801b2f6:	da52      	bge.n	801b39e <__ieee754_asin+0xfe>
 801b2f8:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801b448 <__ieee754_asin+0x1a8>
 801b2fc:	ee30 7b07 	vadd.f64	d7, d0, d7
 801b300:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801b304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b308:	dce6      	bgt.n	801b2d8 <__ieee754_asin+0x38>
 801b30a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801b30e:	f000 f8d8 	bl	801b4c2 <fabs>
 801b312:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 801b450 <__ieee754_asin+0x1b0>
 801b316:	ee39 0b40 	vsub.f64	d0, d9, d0
 801b31a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801b31e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801b458 <__ieee754_asin+0x1b8>
 801b322:	eeb0 0b48 	vmov.f64	d0, d8
 801b326:	eea8 6b07 	vfma.f64	d6, d8, d7
 801b32a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801b460 <__ieee754_asin+0x1c0>
 801b32e:	eea6 7b08 	vfma.f64	d7, d6, d8
 801b332:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801b468 <__ieee754_asin+0x1c8>
 801b336:	ed9f ab4e 	vldr	d10, [pc, #312]	; 801b470 <__ieee754_asin+0x1d0>
 801b33a:	eea7 6b08 	vfma.f64	d6, d7, d8
 801b33e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 801b478 <__ieee754_asin+0x1d8>
 801b342:	eea6 7b08 	vfma.f64	d7, d6, d8
 801b346:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801b480 <__ieee754_asin+0x1e0>
 801b34a:	eea7 ab08 	vfma.f64	d10, d7, d8
 801b34e:	ee2a ab08 	vmul.f64	d10, d10, d8
 801b352:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801b488 <__ieee754_asin+0x1e8>
 801b356:	eea8 7b06 	vfma.f64	d7, d8, d6
 801b35a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801b490 <__ieee754_asin+0x1f0>
 801b35e:	eea7 6b08 	vfma.f64	d6, d7, d8
 801b362:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801b498 <__ieee754_asin+0x1f8>
 801b366:	eea6 7b08 	vfma.f64	d7, d6, d8
 801b36a:	eea7 9b08 	vfma.f64	d9, d7, d8
 801b36e:	f000 f8a5 	bl	801b4bc <__ieee754_sqrt>
 801b372:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801b376:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801b37a:	4b4f      	ldr	r3, [pc, #316]	; (801b4b8 <__ieee754_asin+0x218>)
 801b37c:	429c      	cmp	r4, r3
 801b37e:	dd3d      	ble.n	801b3fc <__ieee754_asin+0x15c>
 801b380:	eea0 0b05 	vfma.f64	d0, d0, d5
 801b384:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801b4a0 <__ieee754_asin+0x200>
 801b388:	eea0 7b04 	vfma.f64	d7, d0, d4
 801b38c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 801b440 <__ieee754_asin+0x1a0>
 801b390:	ee30 0b47 	vsub.f64	d0, d0, d7
 801b394:	2d00      	cmp	r5, #0
 801b396:	bfd8      	it	le
 801b398:	eeb1 0b40 	vnegle.f64	d0, d0
 801b39c:	e79c      	b.n	801b2d8 <__ieee754_asin+0x38>
 801b39e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801b450 <__ieee754_asin+0x1b0>
 801b3a2:	ee20 7b00 	vmul.f64	d7, d0, d0
 801b3a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801b458 <__ieee754_asin+0x1b8>
 801b3aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b3ae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801b460 <__ieee754_asin+0x1c0>
 801b3b2:	eea6 5b07 	vfma.f64	d5, d6, d7
 801b3b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801b468 <__ieee754_asin+0x1c8>
 801b3ba:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b3be:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 801b478 <__ieee754_asin+0x1d8>
 801b3c2:	eea6 5b07 	vfma.f64	d5, d6, d7
 801b3c6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 801b470 <__ieee754_asin+0x1d0>
 801b3ca:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 801b480 <__ieee754_asin+0x1e0>
 801b3ce:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b3d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b3d6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801b488 <__ieee754_asin+0x1e8>
 801b3da:	eea7 5b04 	vfma.f64	d5, d7, d4
 801b3de:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 801b490 <__ieee754_asin+0x1f0>
 801b3e2:	eea5 4b07 	vfma.f64	d4, d5, d7
 801b3e6:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801b498 <__ieee754_asin+0x1f8>
 801b3ea:	eea4 5b07 	vfma.f64	d5, d4, d7
 801b3ee:	eea5 9b07 	vfma.f64	d9, d5, d7
 801b3f2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801b3f6:	eea0 0b07 	vfma.f64	d0, d0, d7
 801b3fa:	e76d      	b.n	801b2d8 <__ieee754_asin+0x38>
 801b3fc:	ec53 2b10 	vmov	r2, r3, d0
 801b400:	2200      	movs	r2, #0
 801b402:	ec43 2b16 	vmov	d6, r2, r3
 801b406:	ee30 7b06 	vadd.f64	d7, d0, d6
 801b40a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801b40e:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801b412:	ed9f 7b09 	vldr	d7, [pc, #36]	; 801b438 <__ieee754_asin+0x198>
 801b416:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b41a:	eea3 7b44 	vfms.f64	d7, d3, d4
 801b41e:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801b422:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801b4a8 <__ieee754_asin+0x208>
 801b426:	eeb0 0b45 	vmov.f64	d0, d5
 801b42a:	eea6 0b44 	vfms.f64	d0, d6, d4
 801b42e:	ee37 0b40 	vsub.f64	d0, d7, d0
 801b432:	ee35 0b40 	vsub.f64	d0, d5, d0
 801b436:	e7ad      	b.n	801b394 <__ieee754_asin+0xf4>
 801b438:	33145c07 	.word	0x33145c07
 801b43c:	3c91a626 	.word	0x3c91a626
 801b440:	54442d18 	.word	0x54442d18
 801b444:	3ff921fb 	.word	0x3ff921fb
 801b448:	8800759c 	.word	0x8800759c
 801b44c:	7e37e43c 	.word	0x7e37e43c
 801b450:	0dfdf709 	.word	0x0dfdf709
 801b454:	3f023de1 	.word	0x3f023de1
 801b458:	7501b288 	.word	0x7501b288
 801b45c:	3f49efe0 	.word	0x3f49efe0
 801b460:	b5688f3b 	.word	0xb5688f3b
 801b464:	bfa48228 	.word	0xbfa48228
 801b468:	0e884455 	.word	0x0e884455
 801b46c:	3fc9c155 	.word	0x3fc9c155
 801b470:	55555555 	.word	0x55555555
 801b474:	3fc55555 	.word	0x3fc55555
 801b478:	03eb6f7d 	.word	0x03eb6f7d
 801b47c:	bfd4d612 	.word	0xbfd4d612
 801b480:	b12e9282 	.word	0xb12e9282
 801b484:	3fb3b8c5 	.word	0x3fb3b8c5
 801b488:	1b8d0159 	.word	0x1b8d0159
 801b48c:	bfe6066c 	.word	0xbfe6066c
 801b490:	9c598ac8 	.word	0x9c598ac8
 801b494:	40002ae5 	.word	0x40002ae5
 801b498:	1c8a2d4b 	.word	0x1c8a2d4b
 801b49c:	c0033a27 	.word	0xc0033a27
 801b4a0:	33145c07 	.word	0x33145c07
 801b4a4:	bc91a626 	.word	0xbc91a626
 801b4a8:	54442d18 	.word	0x54442d18
 801b4ac:	3fe921fb 	.word	0x3fe921fb
 801b4b0:	3fefffff 	.word	0x3fefffff
 801b4b4:	3fdfffff 	.word	0x3fdfffff
 801b4b8:	3fef3332 	.word	0x3fef3332

0801b4bc <__ieee754_sqrt>:
 801b4bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801b4c0:	4770      	bx	lr

0801b4c2 <fabs>:
 801b4c2:	ec51 0b10 	vmov	r0, r1, d0
 801b4c6:	ee10 2a10 	vmov	r2, s0
 801b4ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b4ce:	ec43 2b10 	vmov	d0, r2, r3
 801b4d2:	4770      	bx	lr

0801b4d4 <_init>:
 801b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4d6:	bf00      	nop
 801b4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4da:	bc08      	pop	{r3}
 801b4dc:	469e      	mov	lr, r3
 801b4de:	4770      	bx	lr

0801b4e0 <_fini>:
 801b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4e2:	bf00      	nop
 801b4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b4e6:	bc08      	pop	{r3}
 801b4e8:	469e      	mov	lr, r3
 801b4ea:	4770      	bx	lr
