
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142dc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080145b0  080145b0  000245b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014768  08014768  00024768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014770  08014770  00024770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014774  08014774  00024774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08014778  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002de8  24000164  080148dc  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24002f4c  080148dc  00032f4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030f35  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005042  00000000  00000000  000610c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002570  00000000  00000000  00066110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002378  00000000  00000000  00068680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a581  00000000  00000000  0006a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030e73  00000000  00000000  000a4f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001765b2  00000000  00000000  000d5dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024c39e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a860  00000000  00000000  0024c3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014594 	.word	0x08014594

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08014594 	.word	0x08014594

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <add>:
int add(int a, int b){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	return a + b;
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4413      	add	r3, r2
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 500 + (500 * (angle/180)));
 80006ec:	ed97 7a00 	vldr	s14, [r7]
 80006f0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000760 <setServo+0x80>
 80006f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000764 <setServo+0x84>
 80006fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000700:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000764 <setServo+0x84>
 8000704:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070c:	ee17 3a90 	vmov	r3, s15
 8000710:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	2b03      	cmp	r3, #3
 8000718:	d81a      	bhi.n	8000750 <setServo+0x70>
 800071a:	a201      	add	r2, pc, #4	; (adr r2, 8000720 <setServo+0x40>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	08000731 	.word	0x08000731
 8000724:	08000739 	.word	0x08000739
 8000728:	08000741 	.word	0x08000741
 800072c:	08000749 	.word	0x08000749
		case 1:
			TIM4->CCR4 = timerVal;
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <setServo+0x88>)
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000736:	e00c      	b.n	8000752 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000738:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <setServo+0x88>)
 800073a:	89fb      	ldrh	r3, [r7, #14]
 800073c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800073e:	e008      	b.n	8000752 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <setServo+0x88>)
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000746:	e004      	b.n	8000752 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000748:	4a07      	ldr	r2, [pc, #28]	; (8000768 <setServo+0x88>)
 800074a:	89fb      	ldrh	r3, [r7, #14]
 800074c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800074e:	e000      	b.n	8000752 <setServo+0x72>

		default:
			break;
 8000750:	bf00      	nop
	}
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	43340000 	.word	0x43340000
 8000764:	43fa0000 	.word	0x43fa0000
 8000768:	40000800 	.word	0x40000800

0800076c <setLEDs>:

void setLEDs(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
 8000776:	e181      	b.n	8000a7c <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000778:	4aa1      	ldr	r2, [pc, #644]	; (8000a00 <setLEDs+0x294>)
 800077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000780:	2b03      	cmp	r3, #3
 8000782:	f200 8177 	bhi.w	8000a74 <setLEDs+0x308>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <setLEDs+0x20>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800079d 	.word	0x0800079d
 8000790:	0800084d 	.word	0x0800084d
 8000794:	080008fd 	.word	0x080008fd
 8000798:	080009ad 	.word	0x080009ad
		case 0:
			for (int j = 0; j < 3; j++) {
 800079c:	2300      	movs	r3, #0
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
 80007a0:	e042      	b.n	8000828 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a6:	e039      	b.n	800081c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007a8:	4996      	ldr	r1, [pc, #600]	; (8000a04 <setLEDs+0x298>)
 80007aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007b4:	4413      	add	r3, r2
 80007b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ba:	2180      	movs	r1, #128	; 0x80
 80007bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007be:	fa41 f202 	asr.w	r2, r1, r2
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80007c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	18d1      	adds	r1, r2, r3
 80007d0:	4a8b      	ldr	r2, [pc, #556]	; (8000a00 <setLEDs+0x294>)
 80007d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	440b      	add	r3, r1
 80007e4:	3308      	adds	r3, #8
 80007e6:	4a88      	ldr	r2, [pc, #544]	; (8000a08 <setLEDs+0x29c>)
 80007e8:	213c      	movs	r1, #60	; 0x3c
 80007ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007ee:	e012      	b.n	8000816 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80007f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007f2:	00da      	lsls	r2, r3, #3
 80007f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f6:	18d1      	adds	r1, r2, r3
 80007f8:	4a81      	ldr	r2, [pc, #516]	; (8000a00 <setLEDs+0x294>)
 80007fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	4413      	add	r3, r2
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	3308      	adds	r3, #8
 800080e:	4a7e      	ldr	r2, [pc, #504]	; (8000a08 <setLEDs+0x29c>)
 8000810:	211e      	movs	r1, #30
 8000812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	3301      	adds	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	2b07      	cmp	r3, #7
 8000820:	ddc2      	ble.n	80007a8 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000824:	3301      	adds	r3, #1
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
 8000828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800082a:	2b02      	cmp	r3, #2
 800082c:	ddb9      	ble.n	80007a2 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
 8000832:	e007      	b.n	8000844 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000834:	4a74      	ldr	r2, [pc, #464]	; (8000a08 <setLEDs+0x29c>)
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	3301      	adds	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
 8000844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000846:	2bb1      	cmp	r3, #177	; 0xb1
 8000848:	ddf4      	ble.n	8000834 <setLEDs+0xc8>
			}
			break;
 800084a:	e114      	b.n	8000a76 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
 8000850:	e042      	b.n	80008d8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	e039      	b.n	80008cc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000858:	496a      	ldr	r1, [pc, #424]	; (8000a04 <setLEDs+0x298>)
 800085a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000864:	4413      	add	r3, r2
 8000866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086a:	2180      	movs	r1, #128	; 0x80
 800086c:	6a3a      	ldr	r2, [r7, #32]
 800086e:	fa41 f202 	asr.w	r2, r1, r2
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	00da      	lsls	r2, r3, #3
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	4a5f      	ldr	r2, [pc, #380]	; (8000a00 <setLEDs+0x294>)
 8000882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
 8000894:	3308      	adds	r3, #8
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <setLEDs+0x2a0>)
 8000898:	213c      	movs	r1, #60	; 0x3c
 800089a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800089e:	e012      	b.n	80008c6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80008a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a2:	00da      	lsls	r2, r3, #3
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	18d1      	adds	r1, r2, r3
 80008a8:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <setLEDs+0x294>)
 80008aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	440b      	add	r3, r1
 80008bc:	3308      	adds	r3, #8
 80008be:	4a53      	ldr	r2, [pc, #332]	; (8000a0c <setLEDs+0x2a0>)
 80008c0:	211e      	movs	r1, #30
 80008c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	3301      	adds	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	ddc2      	ble.n	8000858 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	3301      	adds	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	2b02      	cmp	r3, #2
 80008dc:	ddb9      	ble.n	8000852 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	e007      	b.n	80008f4 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 80008e4:	4a49      	ldr	r2, [pc, #292]	; (8000a0c <setLEDs+0x2a0>)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	2100      	movs	r1, #0
 80008ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2bb1      	cmp	r3, #177	; 0xb1
 80008f8:	ddf4      	ble.n	80008e4 <setLEDs+0x178>
			}
			break;
 80008fa:	e0bc      	b.n	8000a76 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	e042      	b.n	8000988 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e039      	b.n	800097c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000908:	493e      	ldr	r1, [pc, #248]	; (8000a04 <setLEDs+0x298>)
 800090a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4413      	add	r3, r2
 8000916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	fa41 f202 	asr.w	r2, r1, r2
 8000922:	4013      	ands	r3, r2
 8000924:	2b00      	cmp	r3, #0
 8000926:	d013      	beq.n	8000950 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	00da      	lsls	r2, r3, #3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	18d1      	adds	r1, r2, r3
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <setLEDs+0x294>)
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	440b      	add	r3, r1
 8000944:	3308      	adds	r3, #8
 8000946:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <setLEDs+0x2a4>)
 8000948:	213c      	movs	r1, #60	; 0x3c
 800094a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800094e:	e012      	b.n	8000976 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	00da      	lsls	r2, r3, #3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	18d1      	adds	r1, r2, r3
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <setLEDs+0x294>)
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	4413      	add	r3, r2
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	3308      	adds	r3, #8
 800096e:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <setLEDs+0x2a4>)
 8000970:	211e      	movs	r1, #30
 8000972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	2b07      	cmp	r3, #7
 8000980:	ddc2      	ble.n	8000908 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	3301      	adds	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2b02      	cmp	r3, #2
 800098c:	ddb9      	ble.n	8000902 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800098e:	2338      	movs	r3, #56	; 0x38
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	e007      	b.n	80009a4 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <setLEDs+0x2a4>)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	2100      	movs	r1, #0
 800099a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	2b69      	cmp	r3, #105	; 0x69
 80009a8:	ddf4      	ble.n	8000994 <setLEDs+0x228>
			}
			break;
 80009aa:	e064      	b.n	8000a76 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e04e      	b.n	8000a50 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	e045      	b.n	8000a44 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <setLEDs+0x298>)
 80009ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4413      	add	r3, r2
 80009c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	fa41 f202 	asr.w	r2, r1, r2
 80009d2:	4013      	ands	r3, r2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d01f      	beq.n	8000a18 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	00da      	lsls	r2, r3, #3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	18d1      	adds	r1, r2, r3
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <setLEDs+0x294>)
 80009e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	440b      	add	r3, r1
 80009f4:	3308      	adds	r3, #8
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <setLEDs+0x2a8>)
 80009f8:	213c      	movs	r1, #60	; 0x3c
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01e      	b.n	8000a3e <setLEDs+0x2d2>
 8000a00:	0801463c 	.word	0x0801463c
 8000a04:	24000a60 	.word	0x24000a60
 8000a08:	24000180 	.word	0x24000180
 8000a0c:	24000448 	.word	0x24000448
 8000a10:	24000710 	.word	0x24000710
 8000a14:	240008b8 	.word	0x240008b8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	00da      	lsls	r2, r3, #3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	18d1      	adds	r1, r2, r3
 8000a20:	4a26      	ldr	r2, [pc, #152]	; (8000abc <setLEDs+0x350>)
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4413      	add	r3, r2
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3308      	adds	r3, #8
 8000a36:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <setLEDs+0x354>)
 8000a38:	211e      	movs	r1, #30
 8000a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	ddb6      	ble.n	80009b8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	ddad      	ble.n	80009b2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000a56:	2338      	movs	r3, #56	; 0x38
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e007      	b.n	8000a6c <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <setLEDs+0x354>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2100      	movs	r1, #0
 8000a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b69      	cmp	r3, #105	; 0x69
 8000a70:	ddf4      	ble.n	8000a5c <setLEDs+0x2f0>
			}
			break;
 8000a72:	e000      	b.n	8000a76 <setLEDs+0x30a>
		default:
			break;
 8000a74:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a78:	3301      	adds	r3, #1
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7e:	2b0d      	cmp	r3, #13
 8000a80:	f77f ae7a 	ble.w	8000778 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000a84:	23b2      	movs	r3, #178	; 0xb2
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <setLEDs+0x358>)
 8000a88:	210c      	movs	r1, #12
 8000a8a:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <setLEDs+0x35c>)
 8000a8c:	f00c fbce 	bl	800d22c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000a90:	23b2      	movs	r3, #178	; 0xb2
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <setLEDs+0x360>)
 8000a94:	2108      	movs	r1, #8
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <setLEDs+0x364>)
 8000a98:	f00c fbc8 	bl	800d22c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000a9c:	236a      	movs	r3, #106	; 0x6a
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <setLEDs+0x368>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <setLEDs+0x36c>)
 8000aa4:	f00c fbc2 	bl	800d22c <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000aa8:	236a      	movs	r3, #106	; 0x6a
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <setLEDs+0x354>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <setLEDs+0x36c>)
 8000ab0:	f00c fbbc 	bl	800d22c <HAL_TIM_PWM_Start_DMA>

}
 8000ab4:	bf00      	nop
 8000ab6:	3738      	adds	r7, #56	; 0x38
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	0801463c 	.word	0x0801463c
 8000ac0:	240008b8 	.word	0x240008b8
 8000ac4:	24000180 	.word	0x24000180
 8000ac8:	24000f58 	.word	0x24000f58
 8000acc:	24000448 	.word	0x24000448
 8000ad0:	24000e74 	.word	0x24000e74
 8000ad4:	24000710 	.word	0x24000710
 8000ad8:	24000ec0 	.word	0x24000ec0

08000adc <HAL_TIM_PWM_PulseFinishedCallback>:


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	//TIM2->CCR3= 0;
	datasentflag = 1;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	24001324 	.word	0x24001324
 8000afc:	00000000 	.word	0x00000000

08000b00 <triangle_space>:


//this function looks like this: /\_/\_/\_/\_
//so it's triangles with spaces between them
double triangle_space(double x)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	ed87 0b00 	vstr	d0, [r7]
	const double LENGTH = 3;
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <triangle_space+0xb0>)
 8000b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double normalized = fmod(fabs(x),LENGTH);
 8000b14:	ed97 7b00 	vldr	d7, [r7]
 8000b18:	eeb0 7bc7 	vabs.f64	d7, d7
 8000b1c:	ed97 1b04 	vldr	d1, [r7, #16]
 8000b20:	eeb0 0b47 	vmov.f64	d0, d7
 8000b24:	f013 fc00 	bl	8014328 <fmod>
 8000b28:	ed87 0b02 	vstr	d0, [r7, #8]
	if(normalized <= LENGTH/3)
 8000b2c:	ed97 6b04 	vldr	d6, [r7, #16]
 8000b30:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000b34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b38:	ed97 6b02 	vldr	d6, [r7, #8]
 8000b3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b44:	d80a      	bhi.n	8000b5c <triangle_space+0x5c>
	{
		return LENGTH/3 - normalized;
 8000b46:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b4a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000b4e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b52:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b56:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b5a:	e01d      	b.n	8000b98 <triangle_space+0x98>
	}
	else if(normalized <= LENGTH*2/3)
 8000b5c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b60:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000b64:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000b68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b6c:	ed97 6b02 	vldr	d6, [r7, #8]
 8000b70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d802      	bhi.n	8000b80 <triangle_space+0x80>
	{
		return 0;
 8000b7a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000ba8 <triangle_space+0xa8>
 8000b7e:	e00b      	b.n	8000b98 <triangle_space+0x98>
	}
	else
	{
		return normalized - LENGTH*2/3;
 8000b80:	ed97 7b04 	vldr	d7, [r7, #16]
 8000b84:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000b88:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000b8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b90:	ed97 6b02 	vldr	d6, [r7, #8]
 8000b94:	ee36 7b47 	vsub.f64	d7, d6, d7
	}
}
 8000b98:	eeb0 0b47 	vmov.f64	d0, d7
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	f3af 8000 	nop.w
	...
 8000bb0:	40080000 	.word	0x40080000

08000bb4 <LG2_Read_Register>:

uint8_t LG2_Read_Register(uint8_t addr){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LG2_Read_Register+0x50>)
 8000bd0:	f006 fc26 	bl	8007420 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000bd4:	1df9      	adds	r1, r7, #7
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	2201      	movs	r2, #1
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <LG2_Read_Register+0x54>)
 8000bdc:	f00b fd3e 	bl	800c65c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000be0:	f107 010f 	add.w	r1, r7, #15
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	2201      	movs	r2, #1
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <LG2_Read_Register+0x54>)
 8000bea:	f00b ff33 	bl	800ca54 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <LG2_Read_Register+0x50>)
 8000bf6:	f006 fc13 	bl	8007420 <HAL_GPIO_WritePin>

	return reg_value;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58020c00 	.word	0x58020c00
 8000c08:	24000d64 	.word	0x24000d64

08000c0c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <LG2_Write_Register+0x48>)
 8000c24:	f006 fbfc 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000c28:	1df9      	adds	r1, r7, #7
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <LG2_Write_Register+0x4c>)
 8000c30:	f00b fd14 	bl	800c65c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c34:	1db9      	adds	r1, r7, #6
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <LG2_Write_Register+0x4c>)
 8000c3c:	f00b fd0e 	bl	800c65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <LG2_Write_Register+0x48>)
 8000c48:	f006 fbea 	bl	8007420 <HAL_GPIO_WritePin>

}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58020c00 	.word	0x58020c00
 8000c58:	24000d64 	.word	0x24000d64

08000c5c <HG2_Write_Register>:


}


void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HG2_Write_Register+0x48>)
 8000c74:	f006 fbd4 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000c78:	1df9      	adds	r1, r7, #7
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <HG2_Write_Register+0x4c>)
 8000c80:	f00b fcec 	bl	800c65c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c84:	1db9      	adds	r1, r7, #6
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <HG2_Write_Register+0x4c>)
 8000c8c:	f00b fce6 	bl	800c65c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <HG2_Write_Register+0x48>)
 8000c98:	f006 fbc2 	bl	8007420 <HAL_GPIO_WritePin>

}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58020c00 	.word	0x58020c00
 8000ca8:	24000d64 	.word	0x24000d64

08000cac <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000cb2:	2022      	movs	r0, #34	; 0x22
 8000cb4:	f7ff ff7e 	bl	8000bb4 <LG2_Read_Register>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000cbc:	2023      	movs	r0, #35	; 0x23
 8000cbe:	f7ff ff79 	bl	8000bb4 <LG2_Read_Register>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000cd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ce0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000d04 <LG2_Get_Gyro_X+0x58>
 8000ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000d08 <LG2_Get_Gyro_X+0x5c>
 8000cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cf0:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	ee07 3a90 	vmov	s15, r3
}
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	46fffe00 	.word	0x46fffe00
 8000d08:	437a0000 	.word	0x437a0000

08000d0c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000d12:	2024      	movs	r0, #36	; 0x24
 8000d14:	f7ff ff4e 	bl	8000bb4 <LG2_Read_Register>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000d1c:	2025      	movs	r0, #37	; 0x25
 8000d1e:	f7ff ff49 	bl	8000bb4 <LG2_Read_Register>
 8000d22:	4603      	mov	r3, r0
 8000d24:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000d34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d40:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000d64 <LG2_Get_Gyro_Y+0x58>
 8000d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d48:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000d68 <LG2_Get_Gyro_Y+0x5c>
 8000d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d50:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	ee07 3a90 	vmov	s15, r3
}
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	46fffe00 	.word	0x46fffe00
 8000d68:	437a0000 	.word	0x437a0000

08000d6c <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000d72:	2026      	movs	r0, #38	; 0x26
 8000d74:	f7ff ff1e 	bl	8000bb4 <LG2_Read_Register>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000d7c:	2027      	movs	r0, #39	; 0x27
 8000d7e:	f7ff ff19 	bl	8000bb4 <LG2_Read_Register>
 8000d82:	4603      	mov	r3, r0
 8000d84:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	021b      	lsls	r3, r3, #8
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	b21b      	sxth	r3, r3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000d94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000dc4 <LG2_Get_Gyro_Z+0x58>
 8000da4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000da8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000dc8 <LG2_Get_Gyro_Z+0x5c>
 8000dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db0:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	ee07 3a90 	vmov	s15, r3
}
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	46fffe00 	.word	0x46fffe00
 8000dc8:	437a0000 	.word	0x437a0000
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <LG2_Get_Acc_X>:

float LG2_Get_Acc_X(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x28);
 8000dd6:	2028      	movs	r0, #40	; 0x28
 8000dd8:	f7ff feec 	bl	8000bb4 <LG2_Read_Register>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x29);
 8000de0:	2029      	movs	r0, #41	; 0x29
 8000de2:	f7ff fee7 	bl	8000bb4 <LG2_Read_Register>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	b21b      	sxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 8000df8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e04:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000e40 <LG2_Get_Acc_X+0x70>
 8000e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e10:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000e38 <LG2_Get_Acc_X+0x68>
 8000e14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e18:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000e1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e24:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	ee07 3a90 	vmov	s15, r3
}
 8000e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	9999999a 	.word	0x9999999a
 8000e3c:	40239999 	.word	0x40239999
 8000e40:	46fffe00 	.word	0x46fffe00
 8000e44:	00000000 	.word	0x00000000

08000e48 <LG2_Get_Acc_Y>:

float LG2_Get_Acc_Y(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2A);
 8000e4e:	202a      	movs	r0, #42	; 0x2a
 8000e50:	f7ff feb0 	bl	8000bb4 <LG2_Read_Register>
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2B);
 8000e58:	202b      	movs	r0, #43	; 0x2b
 8000e5a:	f7ff feab 	bl	8000bb4 <LG2_Read_Register>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 8000e70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000eb8 <LG2_Get_Acc_Y+0x70>
 8000e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e88:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000eb0 <LG2_Get_Acc_Y+0x68>
 8000e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e90:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000e94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9c:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	ee07 3a90 	vmov	s15, r3
}
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	9999999a 	.word	0x9999999a
 8000eb4:	40239999 	.word	0x40239999
 8000eb8:	46fffe00 	.word	0x46fffe00
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <LG2_Get_Acc_Z>:

float LG2_Get_Acc_Z(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	uint8_t Acc_L = LG2_Read_Register(0x2C);
 8000ec6:	202c      	movs	r0, #44	; 0x2c
 8000ec8:	f7ff fe74 	bl	8000bb4 <LG2_Read_Register>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	71fb      	strb	r3, [r7, #7]
	uint8_t Acc_H = LG2_Read_Register(0x2D);
 8000ed0:	202d      	movs	r0, #45	; 0x2d
 8000ed2:	f7ff fe6f 	bl	8000bb4 <LG2_Read_Register>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71bb      	strb	r3, [r7, #6]
	int16_t Acc = ((int16_t) Acc_H << 8) | Acc_L;
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	021b      	lsls	r3, r3, #8
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]

	float AccSI = ((float)Acc / 32767) * 9.8 * 8;
 8000ee8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000f30 <LG2_Get_Acc_Z+0x70>
 8000ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f00:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000f28 <LG2_Get_Acc_Z+0x68>
 8000f04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f08:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000f0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f14:	edc7 7a00 	vstr	s15, [r7]
	return AccSI;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
}
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	9999999a 	.word	0x9999999a
 8000f2c:	40239999 	.word	0x40239999
 8000f30:	46fffe00 	.word	0x46fffe00
 8000f34:	00000000 	.word	0x00000000

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	ed2d 8b02 	vpush	{d8}
 8000f3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f001 ff54 	bl	8002df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 fa00 	bl	800134c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f4c:	f000 fa7a 	bl	8001444 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 ffa0 	bl	8001e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f54:	f000 ff5e 	bl	8001e14 <MX_DMA_Init>
  MX_UART4_Init();
 8000f58:	f000 fec4 	bl	8001ce4 <MX_UART4_Init>
  MX_SPI3_Init();
 8000f5c:	f000 fcda 	bl	8001914 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000f60:	f000 fb88 	bl	8001674 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000f64:	f000 ff0a 	bl	8001d7c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000f68:	f000 fa9e 	bl	80014a8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000f6c:	f000 fde4 	bl	8001b38 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000f70:	f000 fb12 	bl	8001598 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000f74:	f000 fc78 	bl	8001868 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000f78:	f000 fbe0 	bl	800173c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000f7c:	f000 fd20 	bl	80019c0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f80:	f000 fe56 	bl	8001c30 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f84:	f000 fd74 	bl	8001a70 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000f88:	f012 f81a 	bl	8012fc0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000f8c:	f000 fc16 	bl	80017bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8000f90:	2332      	movs	r3, #50	; 0x32
 8000f92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	const double SPEED = 2.0/2000;
 8000f96:	a3eb      	add	r3, pc, #940	; (adr r3, 8001344 <main+0x40c>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
	const double r_offset = 0;
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
	const double g_offset = 1;
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4bd7      	ldr	r3, [pc, #860]	; (8001310 <main+0x3d8>)
 8000fb2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
	const double b_offset = 2;
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fbe:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8000fc2:	213c      	movs	r1, #60	; 0x3c
 8000fc4:	2010      	movs	r0, #16
 8000fc6:	f7ff fe21 	bl	8000c0c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8000fca:	2130      	movs	r1, #48	; 0x30
 8000fcc:	2011      	movs	r0, #17
 8000fce:	f7ff fe1d 	bl	8000c0c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	2013      	movs	r0, #19
 8000fd6:	f7ff fe19 	bl	8000c0c <LG2_Write_Register>

	HAL_Delay(3000);
 8000fda:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fde:	f001 ff99 	bl	8002f14 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8000fe2:	21bf      	movs	r1, #191	; 0xbf
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f7ff fe39 	bl	8000c5c <HG2_Write_Register>
	HAL_Delay(2);
 8000fea:	2002      	movs	r0, #2
 8000fec:	f001 ff92 	bl	8002f14 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8000ff0:	2158      	movs	r1, #88	; 0x58
 8000ff2:	201b      	movs	r0, #27
 8000ff4:	f7ff fe32 	bl	8000c5c <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8000ff8:	21d8      	movs	r1, #216	; 0xd8
 8000ffa:	201b      	movs	r0, #27
 8000ffc:	f7ff fe2e 	bl	8000c5c <HG2_Write_Register>

	float rotZ = 0;
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	uint32_t lastTime = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204

	float calOmegaX = 0;
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	float calOmegaY = 0;
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	float calOmegaZ = 0;
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800102c:	e022      	b.n	8001074 <main+0x13c>
		calOmegaX += LG2_Get_Gyro_X();
 800102e:	f7ff fe3d 	bl	8000cac <LG2_Get_Gyro_X>
 8001032:	eeb0 7a40 	vmov.f32	s14, s0
 8001036:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 800103a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800103e:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
		calOmegaY += LG2_Get_Gyro_Y();
 8001042:	f7ff fe63 	bl	8000d0c <LG2_Get_Gyro_Y>
 8001046:	eeb0 7a40 	vmov.f32	s14, s0
 800104a:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 800104e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001052:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
		calOmegaZ += LG2_Get_Gyro_Z();
 8001056:	f7ff fe89 	bl	8000d6c <LG2_Get_Gyro_Z>
 800105a:	eeb0 7a40 	vmov.f32	s14, s0
 800105e:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 8001062:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001066:	edc7 7a7e 	vstr	s15, [r7, #504]	; 0x1f8
	for(int i = 0; i < 500; i++){
 800106a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800106e:	3301      	adds	r3, #1
 8001070:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001074:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001078:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800107c:	dbd7      	blt.n	800102e <main+0xf6>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800107e:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
 8001082:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8001314 <main+0x3dc>
 8001086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108a:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
	calOmegaY /= 500;
 800108e:	ed97 7a7f 	vldr	s14, [r7, #508]	; 0x1fc
 8001092:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8001314 <main+0x3dc>
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	edc7 7a7f 	vstr	s15, [r7, #508]	; 0x1fc
	calOmegaZ /= 500;
 800109e:	ed97 7a7e 	vldr	s14, [r7, #504]	; 0x1f8
 80010a2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8001314 <main+0x3dc>
 80010a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010aa:	edc7 7a7e 	vstr	s15, [r7, #504]	; 0x1f8

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	4899      	ldr	r0, [pc, #612]	; (8001318 <main+0x3e0>)
 80010b4:	f006 f9b4 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f001 ff2b 	bl	8002f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2101      	movs	r1, #1
 80010c2:	4895      	ldr	r0, [pc, #596]	; (8001318 <main+0x3e0>)
 80010c4:	f006 f9ac 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80010c8:	20c8      	movs	r0, #200	; 0xc8
 80010ca:	f001 ff23 	bl	8002f14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2101      	movs	r1, #1
 80010d2:	4891      	ldr	r0, [pc, #580]	; (8001318 <main+0x3e0>)
 80010d4:	f006 f9a4 	bl	8007420 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80010d8:	2032      	movs	r0, #50	; 0x32
 80010da:	f001 ff1b 	bl	8002f14 <HAL_Delay>
//	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
//    LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
//	}


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010de:	2100      	movs	r1, #0
 80010e0:	488e      	ldr	r0, [pc, #568]	; (800131c <main+0x3e4>)
 80010e2:	f00b ff87 	bl	800cff4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010e6:	2104      	movs	r1, #4
 80010e8:	488c      	ldr	r0, [pc, #560]	; (800131c <main+0x3e4>)
 80010ea:	f00b ff83 	bl	800cff4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010ee:	2108      	movs	r1, #8
 80010f0:	488a      	ldr	r0, [pc, #552]	; (800131c <main+0x3e4>)
 80010f2:	f00b ff7f 	bl	800cff4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80010f6:	210c      	movs	r1, #12
 80010f8:	4888      	ldr	r0, [pc, #544]	; (800131c <main+0x3e4>)
 80010fa:	f00b ff7b 	bl	800cff4 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80010fe:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8001320 <main+0x3e8>
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff faec 	bl	80006e0 <setServo>
    setServo(2, 180);
 8001108:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8001324 <main+0x3ec>
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff fae7 	bl	80006e0 <setServo>
    setServo(3, 0);
 8001112:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8001328 <main+0x3f0>
 8001116:	2003      	movs	r0, #3
 8001118:	f7ff fae2 	bl	80006e0 <setServo>
    setServo(4, 45);
 800111c:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800132c <main+0x3f4>
 8001120:	2004      	movs	r0, #4
 8001122:	f7ff fadd 	bl	80006e0 <setServo>
  /* USER CODE BEGIN WHILE */
	while (1) {
		//WS2812_Send();
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		//TIM4->CCR3 = *ptr;
		for(int i = 0; i < 14; i++){
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800112c:	e08f      	b.n	800124e <main+0x316>

			int time = HAL_GetTick();
 800112e:	f001 fee5 	bl	8002efc <HAL_GetTick>
 8001132:	4603      	mov	r3, r0
 8001134:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			double height_offset = LED_order[i]*1.0/LED_num_max;
 8001138:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <main+0x3f8>)
 800113a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800114a:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001334 <main+0x3fc>
 800114e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001152:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001156:	ed87 7b66 	vstr	d7, [r7, #408]	; 0x198
			double color_offset = time*SPEED + height_offset;
 800115a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001166:	ed97 7b78 	vldr	d7, [r7, #480]	; 0x1e0
 800116a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800116e:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8001172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001176:	ed87 7b64 	vstr	d7, [r7, #400]	; 0x190

			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
 800117a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8001186:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 800118a:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800118e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001192:	eeb0 0b47 	vmov.f64	d0, d7
 8001196:	f7ff fcb3 	bl	8000b00 <triangle_space>
 800119a:	eeb0 7b40 	vmov.f64	d7, d0
 800119e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011a6:	ee17 0a90 	vmov	r0, s15
 80011aa:	4963      	ldr	r1, [pc, #396]	; (8001338 <main+0x400>)
 80011ac:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
 80011bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80011c8:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 80011cc:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80011d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011d4:	eeb0 0b47 	vmov.f64	d0, d7
 80011d8:	f7ff fc92 	bl	8000b00 <triangle_space>
 80011dc:	eeb0 7b40 	vmov.f64	d7, d0
 80011e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80011e8:	ee17 0a90 	vmov	r0, s15
 80011ec:	4952      	ldr	r1, [pc, #328]	; (8001338 <main+0x400>)
 80011ee:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3304      	adds	r3, #4
 80011fe:	6018      	str	r0, [r3, #0]
			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
 8001200:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800120c:	ed97 6b64 	vldr	d6, [r7, #400]	; 0x190
 8001210:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001214:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001218:	eeb0 0b47 	vmov.f64	d0, d7
 800121c:	f7ff fc70 	bl	8000b00 <triangle_space>
 8001220:	eeb0 7b40 	vmov.f64	d7, d0
 8001224:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001228:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	4941      	ldr	r1, [pc, #260]	; (8001338 <main+0x400>)
 8001232:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3308      	adds	r3, #8
 8001242:	6018      	str	r0, [r3, #0]
		for(int i = 0; i < 14; i++){
 8001244:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001248:	3301      	adds	r3, #1
 800124a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800124e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001252:	2b0d      	cmp	r3, #13
 8001254:	f77f af6b 	ble.w	800112e <main+0x1f6>
		}
		setLEDs();
 8001258:	f7ff fa88 	bl	800076c <setLEDs>

		uint8_t* data_gyro[100];
		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 800125c:	f001 fe4e 	bl	8002efc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001270:	eddf 6a32 	vldr	s13, [pc, #200]	; 800133c <main+0x404>
 8001274:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001278:	edc7 7a70 	vstr	s15, [r7, #448]	; 0x1c0

		//int16_t accZ = LG2_Get_Acc_X();

		//HG2_Get_Acc();
		//int16_t AccX = (int16_t)(HG2_Acc[1] << 8) | HG2_Acc[0];
		float AccX = LG2_Get_Acc_X();
 800127c:	f7ff fda8 	bl	8000dd0 <LG2_Get_Acc_X>
 8001280:	ed87 0a6f 	vstr	s0, [r7, #444]	; 0x1bc
		float AccY = LG2_Get_Acc_Y();
 8001284:	f7ff fde0 	bl	8000e48 <LG2_Get_Acc_Y>
 8001288:	ed87 0a6e 	vstr	s0, [r7, #440]	; 0x1b8
		float AccZ = LG2_Get_Acc_Z();
 800128c:	f7ff fe18 	bl	8000ec0 <LG2_Get_Acc_Z>
 8001290:	ed87 0a6d 	vstr	s0, [r7, #436]	; 0x1b4

		float GyroX = LG2_Get_Gyro_X() - calOmegaX;
 8001294:	f7ff fd0a 	bl	8000cac <LG2_Get_Gyro_X>
 8001298:	eeb0 7a40 	vmov.f32	s14, s0
 800129c:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80012a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a4:	edc7 7a6c 	vstr	s15, [r7, #432]	; 0x1b0
		float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
 80012a8:	f7ff fd30 	bl	8000d0c <LG2_Get_Gyro_Y>
 80012ac:	eeb0 7a40 	vmov.f32	s14, s0
 80012b0:	edd7 7a7f 	vldr	s15, [r7, #508]	; 0x1fc
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac
		float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;
 80012bc:	f7ff fd56 	bl	8000d6c <LG2_Get_Gyro_Z>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	edd7 7a7e 	vldr	s15, [r7, #504]	; 0x1f8
 80012c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012cc:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8

		lastTime = HAL_GetTick();
 80012d0:	f001 fe14 	bl	8002efc <HAL_GetTick>
 80012d4:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204

		int a = add(2, 5);
 80012d8:	2105      	movs	r1, #5
 80012da:	2002      	movs	r0, #2
 80012dc:	f7ff f9f2 	bl	80006c4 <add>
 80012e0:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4

		sprintf(data_gyro, "%d\n", a);
 80012e4:	463b      	mov	r3, r7
 80012e6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80012ea:	4915      	ldr	r1, [pc, #84]	; (8001340 <main+0x408>)
 80012ec:	4618      	mov	r0, r3
 80012ee:	f012 fbbb 	bl	8013a68 <siprintf>
		//sprintf( data_gyro,  "%d,%d,%d,%d\n", (int)(GyroX*1000), (int)(GyroY*1000), (int)(GyroZ*1000), lastTime);
		CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 80012f2:	463b      	mov	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f80b 	bl	8000310 <strlen>
 80012fa:	4602      	mov	r2, r0
 80012fc:	463b      	mov	r3, r7
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f011 ff1d 	bl	8013140 <CDC_Transmit_HS>

		HAL_Delay(1000);
 8001306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130a:	f001 fe03 	bl	8002f14 <HAL_Delay>
	while (1) {
 800130e:	e70a      	b.n	8001126 <main+0x1ee>
 8001310:	3ff00000 	.word	0x3ff00000
 8001314:	43fa0000 	.word	0x43fa0000
 8001318:	58020c00 	.word	0x58020c00
 800131c:	24000f0c 	.word	0x24000f0c
 8001320:	42b40000 	.word	0x42b40000
 8001324:	43340000 	.word	0x43340000
 8001328:	00000000 	.word	0x00000000
 800132c:	42340000 	.word	0x42340000
 8001330:	080146ac 	.word	0x080146ac
 8001334:	00000006 	.word	0x00000006
 8001338:	24000a60 	.word	0x24000a60
 800133c:	447a0000 	.word	0x447a0000
 8001340:	080145b0 	.word	0x080145b0
 8001344:	d2f1a9fc 	.word	0xd2f1a9fc
 8001348:	3f50624d 	.word	0x3f50624d

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b09c      	sub	sp, #112	; 0x70
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	224c      	movs	r2, #76	; 0x4c
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f012 fb7c 	bl	8013a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2220      	movs	r2, #32
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f012 fb76 	bl	8013a58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800136c:	2002      	movs	r0, #2
 800136e:	f007 fc51 	bl	8008c14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b32      	ldr	r3, [pc, #200]	; (8001440 <SystemClock_Config+0xf4>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800137e:	4a30      	ldr	r2, [pc, #192]	; (8001440 <SystemClock_Config+0xf4>)
 8001380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <SystemClock_Config+0xf4>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001392:	bf00      	nop
 8001394:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <SystemClock_Config+0xf4>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a0:	d1f8      	bne.n	8001394 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80013a2:	2323      	movs	r3, #35	; 0x23
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013ac:	2301      	movs	r3, #1
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80013b0:	2340      	movs	r3, #64	; 0x40
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b8:	2302      	movs	r3, #2
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013bc:	2300      	movs	r3, #0
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013c0:	2304      	movs	r3, #4
 80013c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80013c4:	2312      	movs	r3, #18
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013cc:	2303      	movs	r3, #3
 80013ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013d4:	230c      	movs	r3, #12
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013d8:	2300      	movs	r3, #0
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 fc5f 	bl	8008ca8 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80013f0:	f000 fe7c 	bl	80020ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	233f      	movs	r3, #63	; 0x3f
 80013f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2303      	movs	r3, #3
 80013fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001400:	2308      	movs	r3, #8
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001404:	2340      	movs	r3, #64	; 0x40
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001408:	2350      	movs	r3, #80	; 0x50
 800140a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2102      	movs	r1, #2
 800141a:	4618      	mov	r0, r3
 800141c:	f008 f81e 	bl	800945c <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001426:	f000 fe61 	bl	80020ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800142a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f008 f9c9 	bl	80097c8 <HAL_RCC_MCOConfig>
}
 8001436:	bf00      	nop
 8001438:	3770      	adds	r7, #112	; 0x70
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	58024800 	.word	0x58024800

08001444 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ae      	sub	sp, #184	; 0xb8
 8001448:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	22b8      	movs	r2, #184	; 0xb8
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f012 fb01 	bl	8013a58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001456:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001462:	2304      	movs	r3, #4
 8001464:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001466:	230c      	movs	r3, #12
 8001468:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800146e:	2302      	movs	r3, #2
 8001470:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001476:	23c0      	movs	r3, #192	; 0xc0
 8001478:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4618      	mov	r0, r3
 8001492:	f008 fbd9 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800149c:	f000 fe26 	bl	80020ec <Error_Handler>
  }
}
 80014a0:	bf00      	nop
 80014a2:	37b8      	adds	r7, #184	; 0xb8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f012 fac9 	bl	8013a58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014c6:	4b31      	ldr	r3, [pc, #196]	; (800158c <MX_ADC1_Init+0xe4>)
 80014c8:	4a31      	ldr	r2, [pc, #196]	; (8001590 <MX_ADC1_Init+0xe8>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <MX_ADC1_Init+0xe4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <MX_ADC1_Init+0xe4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_ADC1_Init+0xe4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_ADC1_Init+0xe4>)
 80014e0:	2204      	movs	r2, #4
 80014e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_ADC1_Init+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_ADC1_Init+0xe4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014f0:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_ADC1_Init+0xe4>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <MX_ADC1_Init+0xe4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_ADC1_Init+0xe4>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_ADC1_Init+0xe4>)
 8001506:	2200      	movs	r2, #0
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_ADC1_Init+0xe4>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_ADC1_Init+0xe4>)
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_ADC1_Init+0xe4>)
 8001518:	2200      	movs	r2, #0
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_ADC1_Init+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001524:	4819      	ldr	r0, [pc, #100]	; (800158c <MX_ADC1_Init+0xe4>)
 8001526:	f001 ff5f 	bl	80033e8 <HAL_ADC_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 fddc 	bl	80020ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_ADC1_Init+0xe4>)
 8001540:	f002 ff9a 	bl	8004478 <HAL_ADCEx_MultiModeConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800154a:	f000 fdcf 	bl	80020ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_ADC1_Init+0xec>)
 8001550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001552:	2306      	movs	r3, #6
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001560:	2304      	movs	r3, #4
 8001562:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	463b      	mov	r3, r7
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_ADC1_Init+0xe4>)
 8001574:	f002 f940 	bl	80037f8 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800157e:	f000 fdb5 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	; 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24000b08 	.word	0x24000b08
 8001590:	40022000 	.word	0x40022000
 8001594:	2a000400 	.word	0x2a000400

08001598 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f012 fa57 	bl	8013a58 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015ac:	4a2f      	ldr	r2, [pc, #188]	; (800166c <MX_ADC3_Init+0xd4>)
 80015ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b0:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_ADC3_Init+0xd0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_ADC3_Init+0xd0>)
 8001604:	2200      	movs	r2, #0
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_ADC3_Init+0xd0>)
 800160a:	2200      	movs	r2, #0
 800160c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_ADC3_Init+0xd0>)
 8001610:	2200      	movs	r2, #0
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_ADC3_Init+0xd0>)
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <MX_ADC3_Init+0xd0>)
 800161e:	f001 fee3 	bl	80033e8 <HAL_ADC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001628:	f000 fd60 	bl	80020ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_ADC3_Init+0xd8>)
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001630:	2306      	movs	r3, #6
 8001632:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001638:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800163c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800163e:	2304      	movs	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <MX_ADC3_Init+0xd0>)
 8001650:	f002 f8d2 	bl	80037f8 <HAL_ADC_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800165a:	f000 fd47 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	24000b78 	.word	0x24000b78
 800166c:	58026000 	.word	0x58026000
 8001670:	10c00010 	.word	0x10c00010

08001674 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001678:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 800167a:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <MX_FDCAN3_Init+0xc4>)
 800167c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001684:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 800168c:	2200      	movs	r2, #0
 800168e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001690:	4b28      	ldr	r3, [pc, #160]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001692:	2200      	movs	r2, #0
 8001694:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800169c:	4b25      	ldr	r3, [pc, #148]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 800169e:	2210      	movs	r2, #16
 80016a0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80016a2:	4b24      	ldr	r3, [pc, #144]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016aa:	2202      	movs	r2, #2
 80016ac:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016bc:	2201      	movs	r2, #1
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016f2:	2204      	movs	r2, #4
 80016f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 80016fe:	2204      	movs	r2, #4
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001704:	2200      	movs	r2, #0
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 800170a:	2200      	movs	r2, #0
 800170c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001710:	2200      	movs	r2, #0
 8001712:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001716:	2200      	movs	r2, #0
 8001718:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 800171c:	2204      	movs	r2, #4
 800171e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_FDCAN3_Init+0xc0>)
 8001722:	f005 f971 	bl	8006a08 <HAL_FDCAN_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800172c:	f000 fcde 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	24000be8 	.word	0x24000be8
 8001738:	4000d400 	.word	0x4000d400

0800173c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <MX_I2C2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <MX_I2C2_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <MX_I2C2_Init+0x74>)
 8001778:	f005 fe6c 	bl	8007454 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fcb3 	bl	80020ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <MX_I2C2_Init+0x74>)
 800178a:	f005 fef3 	bl	8007574 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fcaa 	bl	80020ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_I2C2_Init+0x74>)
 800179c:	f005 ff35 	bl	800760a <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fca1 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000c88 	.word	0x24000c88
 80017b4:	40005800 	.word	0x40005800
 80017b8:	00808cd2 	.word	0x00808cd2

080017bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017c2:	4a28      	ldr	r2, [pc, #160]	; (8001864 <MX_SPI1_Init+0xa8>)
 80017c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017f0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80017f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_SPI1_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_SPI1_Init+0xa4>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_SPI1_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <MX_SPI1_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001830:	2200      	movs	r2, #0
 8001832:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001836:	2200      	movs	r2, #0
 8001838:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI1_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI1_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_SPI1_Init+0xa4>)
 800184e:	f00a fde1 	bl	800c414 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001858:	f000 fc48 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000cdc 	.word	0x24000cdc
 8001864:	40013000 	.word	0x40013000

08001868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800186c:	4b27      	ldr	r3, [pc, #156]	; (800190c <MX_SPI2_Init+0xa4>)
 800186e:	4a28      	ldr	r2, [pc, #160]	; (8001910 <MX_SPI2_Init+0xa8>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <MX_SPI2_Init+0xa4>)
 8001874:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <MX_SPI2_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <MX_SPI2_Init+0xa4>)
 8001882:	2207      	movs	r2, #7
 8001884:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <MX_SPI2_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <MX_SPI2_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_SPI2_Init+0xa4>)
 8001894:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001898:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_SPI2_Init+0xa4>)
 800189c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80018a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_SPI2_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_SPI2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_SPI2_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI2_Init+0xa4>)
 80018bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI2_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_SPI2_Init+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI2_Init+0xa4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <MX_SPI2_Init+0xa4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI2_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI2_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI2_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI2_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI2_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI2_Init+0xa4>)
 80018fa:	f00a fd8b 	bl	800c414 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fbf2 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	24000d64 	.word	0x24000d64
 8001910:	40003800 	.word	0x40003800

08001914 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800191a:	4a28      	ldr	r2, [pc, #160]	; (80019bc <MX_SPI3_Init+0xa8>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001920:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001924:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800192e:	2207      	movs	r2, #7
 8001930:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001940:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001944:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001948:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800194c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001976:	2200      	movs	r2, #0
 8001978:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001988:	2200      	movs	r2, #0
 800198a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI3_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SPI3_Init+0xa4>)
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI3_Init+0xa4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SPI3_Init+0xa4>)
 80019a6:	f00a fd35 	bl	800c414 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80019b0:	f000 fb9c 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24000dec 	.word	0x24000dec
 80019bc:	40003c00 	.word	0x40003c00

080019c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <MX_TIM2_Init+0xac>)
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_TIM2_Init+0xac>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <MX_TIM2_Init+0xac>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <MX_TIM2_Init+0xac>)
 80019fa:	225a      	movs	r2, #90	; 0x5a
 80019fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a0a:	4818      	ldr	r0, [pc, #96]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a0c:	f00b fa9b 	bl	800cf46 <HAL_TIM_PWM_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f000 fb69 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	4810      	ldr	r0, [pc, #64]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a2a:	f00c fd17 	bl	800e45c <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a34:	f000 fb5a 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a38:	2360      	movs	r3, #96	; 0x60
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a50:	f00b ff40 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a5a:	f000 fb47 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <MX_TIM2_Init+0xac>)
 8001a60:	f000 ff00 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	24000e74 	.word	0x24000e74

08001a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <MX_TIM3_Init+0xc4>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001aa6:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001aa8:	225a      	movs	r2, #90	; 0x5a
 8001aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ab8:	481d      	ldr	r0, [pc, #116]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001aba:	f00b fa44 	bl	800cf46 <HAL_TIM_PWM_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f000 fb12 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4816      	ldr	r0, [pc, #88]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001ad8:	f00c fcc0 	bl	800e45c <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ae2:	f000 fb03 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae6:	2360      	movs	r3, #96	; 0x60
 8001ae8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001afe:	f00b fee9 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b08:	f000 faf0 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001b14:	f00b fede 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b1e:	f000 fae5 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <MX_TIM3_Init+0xc0>)
 8001b24:	f000 fe9e 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	24000ec0 	.word	0x24000ec0
 8001b34:	40000400 	.word	0x40000400

08001b38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
 8001b58:	615a      	str	r2, [r3, #20]
 8001b5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b5e:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <MX_TIM4_Init+0xf4>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144 - 1;
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b64:	228f      	movs	r2, #143	; 0x8f
 8001b66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b82:	4829      	ldr	r0, [pc, #164]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001b84:	f00b f9df 	bl	800cf46 <HAL_TIM_PWM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b8e:	f000 faad 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001ba2:	f00c fc5b 	bl	800e45c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001bac:	f000 fa9e 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb0:	2360      	movs	r3, #96	; 0x60
 8001bb2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4818      	ldr	r0, [pc, #96]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001bc8:	f00b fe84 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001bd2:	f000 fa8b 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001bde:	f00b fe79 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001be8:	f000 fa80 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	2208      	movs	r2, #8
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001bf4:	f00b fe6e 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001bfe:	f000 fa75 	bl	80020ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	220c      	movs	r2, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	4807      	ldr	r0, [pc, #28]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001c0a:	f00b fe63 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001c14:	f000 fa6a 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c18:	4803      	ldr	r0, [pc, #12]	; (8001c28 <MX_TIM4_Init+0xf0>)
 8001c1a:	f000 fe23 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24000f0c 	.word	0x24000f0c
 8001c2c:	40000800 	.word	0x40000800

08001c30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	463b      	mov	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
 8001c50:	615a      	str	r2, [r3, #20]
 8001c52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <MX_TIM5_Init+0xb0>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c68:	225a      	movs	r2, #90	; 0x5a
 8001c6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c78:	4818      	ldr	r0, [pc, #96]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c7a:	f00b f964 	bl	800cf46 <HAL_TIM_PWM_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c84:	f000 fa32 	bl	80020ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4811      	ldr	r0, [pc, #68]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001c98:	f00c fbe0 	bl	800e45c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001ca2:	f000 fa23 	bl	80020ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca6:	2360      	movs	r3, #96	; 0x60
 8001ca8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	220c      	movs	r2, #12
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001cbe:	f00b fe09 	bl	800d8d4 <HAL_TIM_PWM_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001cc8:	f000 fa10 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <MX_TIM5_Init+0xac>)
 8001cce:	f000 fdc9 	bl	8002864 <HAL_TIM_MspPostInit>

}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	24000f58 	.word	0x24000f58
 8001ce0:	40000c00 	.word	0x40000c00

08001ce4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <MX_UART4_Init+0x90>)
 8001cea:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <MX_UART4_Init+0x94>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <MX_UART4_Init+0x90>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_UART4_Init+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_UART4_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d2c:	4811      	ldr	r0, [pc, #68]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d2e:	f00c fc4f 	bl	800e5d0 <HAL_UART_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d38:	f000 f9d8 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d40:	f00d fd55 	bl	800f7ee <HAL_UARTEx_SetTxFifoThreshold>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d4a:	f000 f9cf 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d52:	f00d fd8a 	bl	800f86a <HAL_UARTEx_SetRxFifoThreshold>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d5c:	f000 f9c6 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d60:	4804      	ldr	r0, [pc, #16]	; (8001d74 <MX_UART4_Init+0x90>)
 8001d62:	f00d fd0b 	bl	800f77c <HAL_UARTEx_DisableFifoMode>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001d6c:	f000 f9be 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	240011fc 	.word	0x240011fc
 8001d78:	40004c00 	.word	0x40004c00

08001d7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <MX_USART6_UART_Init+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dc6:	f00c fc03 	bl	800e5d0 <HAL_UART_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001dd0:	f000 f98c 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	480d      	ldr	r0, [pc, #52]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dd8:	f00d fd09 	bl	800f7ee <HAL_UARTEx_SetTxFifoThreshold>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001de2:	f000 f983 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4808      	ldr	r0, [pc, #32]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dea:	f00d fd3e 	bl	800f86a <HAL_UARTEx_SetRxFifoThreshold>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001df4:	f000 f97a 	bl	80020ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_USART6_UART_Init+0x90>)
 8001dfa:	f00d fcbf 	bl	800f77c <HAL_UARTEx_DisableFifoMode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f000 f972 	bl	80020ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	24001290 	.word	0x24001290
 8001e10:	40011400 	.word	0x40011400

08001e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <MX_DMA_Init+0x7c>)
 8001e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e20:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <MX_DMA_Init+0x7c>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <MX_DMA_Init+0x7c>)
 8001e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	200b      	movs	r0, #11
 8001e3e:	f002 fcd8 	bl	80047f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e42:	200b      	movs	r0, #11
 8001e44:	f002 fcef 	bl	8004826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	200c      	movs	r0, #12
 8001e4e:	f002 fcd0 	bl	80047f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f002 fce7 	bl	8004826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	200d      	movs	r0, #13
 8001e5e:	f002 fcc8 	bl	80047f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e62:	200d      	movs	r0, #13
 8001e64:	f002 fcdf 	bl	8004826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	200e      	movs	r0, #14
 8001e6e:	f002 fcc0 	bl	80047f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e72:	200e      	movs	r0, #14
 8001e74:	f002 fcd7 	bl	8004826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	200f      	movs	r0, #15
 8001e7e:	f002 fcb8 	bl	80047f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f002 fccf 	bl	8004826 <HAL_NVIC_EnableIRQ>

}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58024400 	.word	0x58024400

08001e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	; 0x38
 8001e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eba:	4b85      	ldr	r3, [pc, #532]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ece:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001ed0:	f043 0320 	orr.w	r3, r3, #32
 8001ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed8:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee6:	4b7a      	ldr	r3, [pc, #488]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eec:	4a78      	ldr	r2, [pc, #480]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f04:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0a:	4a71      	ldr	r2, [pc, #452]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f14:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f40:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	4a62      	ldr	r2, [pc, #392]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f48:	f043 0302 	orr.w	r3, r3, #2
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f50:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a5a      	ldr	r2, [pc, #360]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f66:	f043 0308 	orr.w	r3, r3, #8
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f7c:	4b54      	ldr	r3, [pc, #336]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	4a53      	ldr	r2, [pc, #332]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <MX_GPIO_Init+0x23c>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	484d      	ldr	r0, [pc, #308]	; (80020d4 <MX_GPIO_Init+0x240>)
 8001fa0:	f005 fa3e 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f248 0106 	movw	r1, #32774	; 0x8006
 8001faa:	484b      	ldr	r0, [pc, #300]	; (80020d8 <MX_GPIO_Init+0x244>)
 8001fac:	f005 fa38 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2130      	movs	r1, #48	; 0x30
 8001fb4:	4849      	ldr	r0, [pc, #292]	; (80020dc <MX_GPIO_Init+0x248>)
 8001fb6:	f005 fa33 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4848      	ldr	r0, [pc, #288]	; (80020e0 <MX_GPIO_Init+0x24c>)
 8001fc0:	f005 fa2e 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f240 3101 	movw	r1, #769	; 0x301
 8001fca:	4846      	ldr	r0, [pc, #280]	; (80020e4 <MX_GPIO_Init+0x250>)
 8001fcc:	f005 fa28 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4844      	ldr	r0, [pc, #272]	; (80020e8 <MX_GPIO_Init+0x254>)
 8001fd6:	f005 fa23 	bl	8007420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4838      	ldr	r0, [pc, #224]	; (80020d4 <MX_GPIO_Init+0x240>)
 8001ff2:	f005 f86d 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8001ff6:	f248 0306 	movw	r3, #32774	; 0x8006
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	4832      	ldr	r0, [pc, #200]	; (80020d8 <MX_GPIO_Init+0x244>)
 8002010:	f005 f85e 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002014:	2330      	movs	r3, #48	; 0x30
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002028:	4619      	mov	r1, r3
 800202a:	482c      	ldr	r0, [pc, #176]	; (80020dc <MX_GPIO_Init+0x248>)
 800202c:	f005 f850 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002030:	2302      	movs	r3, #2
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4826      	ldr	r0, [pc, #152]	; (80020e0 <MX_GPIO_Init+0x24c>)
 8002048:	f005 f842 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 800204c:	f240 3301 	movw	r3, #769	; 0x301
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	481f      	ldr	r0, [pc, #124]	; (80020e4 <MX_GPIO_Init+0x250>)
 8002066:	f005 f833 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800206a:	2304      	movs	r3, #4
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	4619      	mov	r1, r3
 8002080:	4819      	ldr	r0, [pc, #100]	; (80020e8 <MX_GPIO_Init+0x254>)
 8002082:	f005 f825 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002098:	2300      	movs	r3, #0
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_GPIO_Init+0x244>)
 80020a4:	f005 f814 	bl	80070d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a8:	23c0      	movs	r3, #192	; 0xc0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80020b8:	230b      	movs	r3, #11
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	4808      	ldr	r0, [pc, #32]	; (80020e4 <MX_GPIO_Init+0x250>)
 80020c4:	f005 f804 	bl	80070d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020c8:	bf00      	nop
 80020ca:	3738      	adds	r7, #56	; 0x38
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58021000 	.word	0x58021000
 80020d8:	58020000 	.word	0x58020000
 80020dc:	58020800 	.word	0x58020800
 80020e0:	58020400 	.word	0x58020400
 80020e4:	58020c00 	.word	0x58020c00
 80020e8:	58021800 	.word	0x58021800

080020ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f0:	b672      	cpsid	i
}
 80020f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020f4:	e7fe      	b.n	80020f4 <Error_Handler+0x8>
	...

080020f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_MspInit+0x30>)
 8002100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002104:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x30>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x30>)
 8002110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	58024400 	.word	0x58024400

0800212c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a30      	ldr	r2, [pc, #192]	; (800220c <HAL_ADC_MspInit+0xe0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d12a      	bne.n	80021a4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 8002150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 8002160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217c:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 800217e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	481d      	ldr	r0, [pc, #116]	; (8002214 <HAL_ADC_MspInit+0xe8>)
 800219e:	f004 ff97 	bl	80070d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021a2:	e02e      	b.n	8002202 <HAL_ADC_MspInit+0xd6>
  else if(hadc->Instance==ADC3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_ADC_MspInit+0xec>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d129      	bne.n	8002202 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b4:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021d4:	f043 0320 	orr.w	r3, r3, #32
 80021d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_ADC_MspInit+0xe4>)
 80021de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80021ea:	2328      	movs	r3, #40	; 0x28
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4807      	ldr	r0, [pc, #28]	; (800221c <HAL_ADC_MspInit+0xf0>)
 80021fe:	f004 ff67 	bl	80070d0 <HAL_GPIO_Init>
}
 8002202:	bf00      	nop
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000
 8002210:	58024400 	.word	0x58024400
 8002214:	58020800 	.word	0x58020800
 8002218:	58026000 	.word	0x58026000
 800221c:	58021400 	.word	0x58021400

08002220 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0b8      	sub	sp, #224	; 0xe0
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	22b8      	movs	r2, #184	; 0xb8
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f011 fc09 	bl	8013a58 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <HAL_FDCAN_MspInit+0xc4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d144      	bne.n	80022da <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800225c:	2300      	movs	r3, #0
 800225e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f007 fcef 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002270:	f7ff ff3c 	bl	80020ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002274:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 8002276:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800227a:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 8002286:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 8002294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002298:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 800229a:	f043 0320 	orr.w	r3, r3, #32
 800229e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_FDCAN_MspInit+0xc8>)
 80022a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b0:	23c0      	movs	r3, #192	; 0xc0
 80022b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022d2:	4619      	mov	r1, r3
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_FDCAN_MspInit+0xcc>)
 80022d6:	f004 fefb 	bl	80070d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	37e0      	adds	r7, #224	; 0xe0
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	4000d400 	.word	0x4000d400
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58021400 	.word	0x58021400

080022f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0b8      	sub	sp, #224	; 0xe0
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	22b8      	movs	r2, #184	; 0xb8
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f011 fba1 	bl	8013a58 <memset>
  if(hi2c->Instance==I2C2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_I2C_MspInit+0xc4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d145      	bne.n	80023ac <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002320:	f04f 0208 	mov.w	r2, #8
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002332:	f107 0310 	add.w	r3, r7, #16
 8002336:	4618      	mov	r0, r3
 8002338:	f007 fc86 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002342:	f7ff fed3 	bl	80020ec <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 800234e:	f043 0320 	orr.w	r3, r3, #32
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002364:	2303      	movs	r3, #3
 8002366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236a:	2312      	movs	r3, #18
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800237c:	2304      	movs	r3, #4
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002382:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002386:	4619      	mov	r1, r3
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <HAL_I2C_MspInit+0xcc>)
 800238a:	f004 fea1 	bl	80070d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 8002396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800239a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_I2C_MspInit+0xc8>)
 80023a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	37e0      	adds	r7, #224	; 0xe0
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40005800 	.word	0x40005800
 80023b8:	58024400 	.word	0x58024400
 80023bc:	58021400 	.word	0x58021400

080023c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	; (800251c <HAL_SPI_MspInit+0x15c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d12e      	bne.n	8002440 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80023e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023e8:	4a4d      	ldr	r2, [pc, #308]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80023ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023f2:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80023f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_SPI_MspInit+0x160>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	4a46      	ldr	r2, [pc, #280]	; (8002520 <HAL_SPI_MspInit+0x160>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_SPI_MspInit+0x160>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800241e:	23e0      	movs	r3, #224	; 0xe0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800242e:	2305      	movs	r3, #5
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	483a      	ldr	r0, [pc, #232]	; (8002524 <HAL_SPI_MspInit+0x164>)
 800243a:	f004 fe49 	bl	80070d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800243e:	e068      	b.n	8002512 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_SPI_MspInit+0x168>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12f      	bne.n	80024aa <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <HAL_SPI_MspInit+0x160>)
 800244c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002450:	4a33      	ldr	r2, [pc, #204]	; (8002520 <HAL_SPI_MspInit+0x160>)
 8002452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002456:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_SPI_MspInit+0x160>)
 800245c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_SPI_MspInit+0x160>)
 800246a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_SPI_MspInit+0x160>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_SPI_MspInit+0x160>)
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002486:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002498:	2305      	movs	r3, #5
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	4822      	ldr	r0, [pc, #136]	; (800252c <HAL_SPI_MspInit+0x16c>)
 80024a4:	f004 fe14 	bl	80070d0 <HAL_GPIO_Init>
}
 80024a8:	e033      	b.n	8002512 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a20      	ldr	r2, [pc, #128]	; (8002530 <HAL_SPI_MspInit+0x170>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d12e      	bne.n	8002512 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_SPI_MspInit+0x160>)
 80024e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	2302      	movs	r3, #2
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002502:	2306      	movs	r3, #6
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4809      	ldr	r0, [pc, #36]	; (8002534 <HAL_SPI_MspInit+0x174>)
 800250e:	f004 fddf 	bl	80070d0 <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3738      	adds	r7, #56	; 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40013000 	.word	0x40013000
 8002520:	58024400 	.word	0x58024400
 8002524:	58020000 	.word	0x58020000
 8002528:	40003800 	.word	0x40003800
 800252c:	58020400 	.word	0x58020400
 8002530:	40003c00 	.word	0x40003c00
 8002534:	58020800 	.word	0x58020800

08002538 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d15d      	bne.n	8002616 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255a:	4b8e      	ldr	r3, [pc, #568]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 800255c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002560:	4a8c      	ldr	r2, [pc, #560]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800256a:	4b8a      	ldr	r3, [pc, #552]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 800256c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	4b86      	ldr	r3, [pc, #536]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 800257a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800257e:	4a85      	ldr	r2, [pc, #532]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002588:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 800258a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025a6:	2301      	movs	r3, #1
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4879      	ldr	r0, [pc, #484]	; (8002798 <HAL_TIM_PWM_MspInit+0x260>)
 80025b2:	f004 fd8d 	bl	80070d0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80025b6:	4b79      	ldr	r3, [pc, #484]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025b8:	4a79      	ldr	r2, [pc, #484]	; (80027a0 <HAL_TIM_PWM_MspInit+0x268>)
 80025ba:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80025bc:	4b77      	ldr	r3, [pc, #476]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025be:	2214      	movs	r2, #20
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025c2:	4b76      	ldr	r3, [pc, #472]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b74      	ldr	r3, [pc, #464]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b73      	ldr	r3, [pc, #460]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025de:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025e4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80025e6:	4b6d      	ldr	r3, [pc, #436]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80025ec:	4b6b      	ldr	r3, [pc, #428]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f2:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80025f8:	4868      	ldr	r0, [pc, #416]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 80025fa:	f002 f92f 	bl	800485c <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002604:	f7ff fd72 	bl	80020ec <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a64      	ldr	r2, [pc, #400]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
 800260e:	4a63      	ldr	r2, [pc, #396]	; (800279c <HAL_TIM_PWM_MspInit+0x264>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002614:	e119      	b.n	800284a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <HAL_TIM_PWM_MspInit+0x26c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d16d      	bne.n	80026fc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002620:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002626:	4a5b      	ldr	r2, [pc, #364]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002630:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002640:	4a5a      	ldr	r2, [pc, #360]	; (80027ac <HAL_TIM_PWM_MspInit+0x274>)
 8002642:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002644:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002646:	2218      	movs	r2, #24
 8002648:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800265e:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002664:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002666:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800266c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800266e:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002676:	2200      	movs	r2, #0
 8002678:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267a:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002680:	4849      	ldr	r0, [pc, #292]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002682:	f002 f8eb 	bl	800485c <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800268c:	f7ff fd2e 	bl	80020ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a45      	ldr	r2, [pc, #276]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
 8002696:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <HAL_TIM_PWM_MspInit+0x270>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 800269e:	4a45      	ldr	r2, [pc, #276]	; (80027b4 <HAL_TIM_PWM_MspInit+0x27c>)
 80026a0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80026a2:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026a4:	2217      	movs	r2, #23
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ba:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ca:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80026de:	4834      	ldr	r0, [pc, #208]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026e0:	f002 f8bc 	bl	800485c <HAL_DMA_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80026ea:	f7ff fcff 	bl	80020ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24
 80026f4:	4a2e      	ldr	r2, [pc, #184]	; (80027b0 <HAL_TIM_PWM_MspInit+0x278>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80026fa:	e0a6      	b.n	800284a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_TIM_PWM_MspInit+0x280>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d15e      	bne.n	80027c4 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800270c:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002716:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <HAL_TIM_PWM_MspInit+0x25c>)
 8002718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002726:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <HAL_TIM_PWM_MspInit+0x288>)
 8002728:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800272c:	221f      	movs	r2, #31
 800272e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002738:	2200      	movs	r2, #0
 800273a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800273e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002742:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800274a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800274e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002752:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002766:	4815      	ldr	r0, [pc, #84]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 8002768:	f002 f878 	bl	800485c <HAL_DMA_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002772:	f7ff fcbb 	bl	80020ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_TIM_PWM_MspInit+0x284>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	201e      	movs	r0, #30
 8002788:	f002 f833 	bl	80047f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800278c:	201e      	movs	r0, #30
 800278e:	f002 f84a 	bl	8004826 <HAL_NVIC_EnableIRQ>
}
 8002792:	e05a      	b.n	800284a <HAL_TIM_PWM_MspInit+0x312>
 8002794:	58024400 	.word	0x58024400
 8002798:	58020000 	.word	0x58020000
 800279c:	24000fa4 	.word	0x24000fa4
 80027a0:	40020028 	.word	0x40020028
 80027a4:	40000400 	.word	0x40000400
 80027a8:	2400101c 	.word	0x2400101c
 80027ac:	40020058 	.word	0x40020058
 80027b0:	24001094 	.word	0x24001094
 80027b4:	40020070 	.word	0x40020070
 80027b8:	40000800 	.word	0x40000800
 80027bc:	2400110c 	.word	0x2400110c
 80027c0:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_TIM_PWM_MspInit+0x31c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d13d      	bne.n	800284a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_TIM_PWM_MspInit+0x320>)
 80027d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d4:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_TIM_PWM_MspInit+0x320>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_TIM_PWM_MspInit+0x320>)
 80027e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_TIM_PWM_MspInit+0x328>)
 80027f0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 80027f4:	223a      	movs	r2, #58	; 0x3a
 80027f6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002800:	2200      	movs	r2, #0
 8002802:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 800280e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002812:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800281a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 800282e:	480b      	ldr	r0, [pc, #44]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002830:	f002 f814 	bl	800485c <HAL_DMA_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800283a:	f7ff fc57 	bl	80020ec <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
 8002844:	4a05      	ldr	r2, [pc, #20]	; (800285c <HAL_TIM_PWM_MspInit+0x324>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6393      	str	r3, [r2, #56]	; 0x38
}
 800284a:	bf00      	nop
 800284c:	3730      	adds	r7, #48	; 0x30
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40000c00 	.word	0x40000c00
 8002858:	58024400 	.word	0x58024400
 800285c:	24001184 	.word	0x24001184
 8002860:	40020040 	.word	0x40020040

08002864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	; 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d120      	bne.n	80028c8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	4a50      	ldr	r2, [pc, #320]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002896:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 8002898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028ae:	2302      	movs	r3, #2
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028b6:	2301      	movs	r3, #1
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4844      	ldr	r0, [pc, #272]	; (80029d4 <HAL_TIM_MspPostInit+0x170>)
 80028c2:	f004 fc05 	bl	80070d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80028c6:	e07f      	b.n	80029c8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <HAL_TIM_MspPostInit+0x174>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11f      	bne.n	8002912 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 80028d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d8:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 80028da:	f043 0302 	orr.w	r3, r3, #2
 80028de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028f0:	2330      	movs	r3, #48	; 0x30
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028f8:	2302      	movs	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002900:	2302      	movs	r3, #2
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4832      	ldr	r0, [pc, #200]	; (80029d4 <HAL_TIM_MspPostInit+0x170>)
 800290c:	f004 fbe0 	bl	80070d0 <HAL_GPIO_Init>
}
 8002910:	e05a      	b.n	80029c8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <HAL_TIM_MspPostInit+0x178>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d131      	bne.n	8002980 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800291c:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 800292e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800293a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800294c:	2302      	movs	r3, #2
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	4822      	ldr	r0, [pc, #136]	; (80029e0 <HAL_TIM_MspPostInit+0x17c>)
 8002958:	f004 fbba 	bl	80070d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800295c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002966:	2302      	movs	r3, #2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800296e:	2302      	movs	r3, #2
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4619      	mov	r1, r3
 8002978:	4819      	ldr	r0, [pc, #100]	; (80029e0 <HAL_TIM_MspPostInit+0x17c>)
 800297a:	f004 fba9 	bl	80070d0 <HAL_GPIO_Init>
}
 800297e:	e023      	b.n	80029c8 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_TIM_MspPostInit+0x180>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d11e      	bne.n	80029c8 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_TIM_MspPostInit+0x16c>)
 800299c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029a8:	2308      	movs	r3, #8
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029b0:	2302      	movs	r3, #2
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4619      	mov	r1, r3
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <HAL_TIM_MspPostInit+0x184>)
 80029c4:	f004 fb84 	bl	80070d0 <HAL_GPIO_Init>
}
 80029c8:	bf00      	nop
 80029ca:	3730      	adds	r7, #48	; 0x30
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58020400 	.word	0x58020400
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800
 80029e0:	58020c00 	.word	0x58020c00
 80029e4:	40000c00 	.word	0x40000c00
 80029e8:	58020000 	.word	0x58020000

080029ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	; 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a04:	f107 0318 	add.w	r3, r7, #24
 8002a08:	22b8      	movs	r2, #184	; 0xb8
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f011 f823 	bl	8013a58 <memset>
  if(huart->Instance==UART4)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4d      	ldr	r2, [pc, #308]	; (8002b4c <HAL_UART_MspInit+0x160>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d147      	bne.n	8002aac <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a1c:	f04f 0202 	mov.w	r2, #2
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a2e:	f107 0318 	add.w	r3, r7, #24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f007 f908 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a3e:	f7ff fb55 	bl	80020ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a48:	4a41      	ldr	r2, [pc, #260]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482b      	ldr	r0, [pc, #172]	; (8002b54 <HAL_UART_MspInit+0x168>)
 8002aa6:	f004 fb13 	bl	80070d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002aaa:	e04a      	b.n	8002b42 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <HAL_UART_MspInit+0x16c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d145      	bne.n	8002b42 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ab6:	f04f 0201 	mov.w	r2, #1
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac8:	f107 0318 	add.w	r3, r7, #24
 8002acc:	4618      	mov	r0, r3
 8002ace:	f007 f8bb 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002ad8:	f7ff fb08 	bl	80020ec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002ae4:	f043 0320 	orr.w	r3, r3, #32
 8002ae8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_UART_MspInit+0x164>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b18:	23c0      	movs	r3, #192	; 0xc0
 8002b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002b30:	2307      	movs	r3, #7
 8002b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4807      	ldr	r0, [pc, #28]	; (8002b5c <HAL_UART_MspInit+0x170>)
 8002b3e:	f004 fac7 	bl	80070d0 <HAL_GPIO_Init>
}
 8002b42:	bf00      	nop
 8002b44:	37e8      	adds	r7, #232	; 0xe8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40004c00 	.word	0x40004c00
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58020400 	.word	0x58020400
 8002b58:	40011400 	.word	0x40011400
 8002b5c:	58020800 	.word	0x58020800

08002b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <NMI_Handler+0x4>

08002b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <HardFault_Handler+0x4>

08002b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <MemManage_Handler+0x4>

08002b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b76:	e7fe      	b.n	8002b76 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bac:	f000 f992 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <DMA1_Stream0_IRQHandler+0x10>)
 8002bba:	f002 fc13 	bl	80053e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2400110c 	.word	0x2400110c

08002bc8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <DMA1_Stream1_IRQHandler+0x10>)
 8002bce:	f002 fc09 	bl	80053e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	24000fa4 	.word	0x24000fa4

08002bdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <DMA1_Stream2_IRQHandler+0x10>)
 8002be2:	f002 fbff 	bl	80053e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	24001184 	.word	0x24001184

08002bf0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <DMA1_Stream3_IRQHandler+0x10>)
 8002bf6:	f002 fbf5 	bl	80053e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2400101c 	.word	0x2400101c

08002c04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <DMA1_Stream4_IRQHandler+0x10>)
 8002c0a:	f002 fbeb 	bl	80053e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	24001094 	.word	0x24001094

08002c18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM4_IRQHandler+0x10>)
 8002c1e:	f00a fd39 	bl	800d694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24000f0c 	.word	0x24000f0c

08002c2c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c30:	4802      	ldr	r0, [pc, #8]	; (8002c3c <OTG_HS_IRQHandler+0x10>)
 8002c32:	f004 fe8f 	bl	8007954 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	24002810 	.word	0x24002810

08002c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <_sbrk+0x5c>)
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <_sbrk+0x60>)
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <_sbrk+0x64>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <_sbrk+0x68>)
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <_sbrk+0x64>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d207      	bcs.n	8002c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c70:	f010 feba 	bl	80139e8 <__errno>
 8002c74:	4603      	mov	r3, r0
 8002c76:	220c      	movs	r2, #12
 8002c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	e009      	b.n	8002c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <_sbrk+0x64>)
 8002c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	24050000 	.word	0x24050000
 8002ca0:	00000400 	.word	0x00000400
 8002ca4:	24001328 	.word	0x24001328
 8002ca8:	24002f50 	.word	0x24002f50

08002cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <SystemInit+0xd0>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <SystemInit+0xd0>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cc0:	4b2f      	ldr	r3, [pc, #188]	; (8002d80 <SystemInit+0xd4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d807      	bhi.n	8002cdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <SystemInit+0xd4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 030f 	bic.w	r3, r3, #15
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <SystemInit+0xd4>)
 8002cd6:	f043 0307 	orr.w	r3, r3, #7
 8002cda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <SystemInit+0xd8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a28      	ldr	r2, [pc, #160]	; (8002d84 <SystemInit+0xd8>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ce8:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <SystemInit+0xd8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <SystemInit+0xd8>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4924      	ldr	r1, [pc, #144]	; (8002d84 <SystemInit+0xd8>)
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <SystemInit+0xdc>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <SystemInit+0xd4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d007      	beq.n	8002d16 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <SystemInit+0xd4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 030f 	bic.w	r3, r3, #15
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <SystemInit+0xd4>)
 8002d10:	f043 0307 	orr.w	r3, r3, #7
 8002d14:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <SystemInit+0xd8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <SystemInit+0xd8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <SystemInit+0xd8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <SystemInit+0xd8>)
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <SystemInit+0xe0>)
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <SystemInit+0xd8>)
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <SystemInit+0xe4>)
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <SystemInit+0xd8>)
 8002d36:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <SystemInit+0xe8>)
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <SystemInit+0xd8>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <SystemInit+0xd8>)
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <SystemInit+0xe8>)
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <SystemInit+0xd8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <SystemInit+0xd8>)
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <SystemInit+0xe8>)
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <SystemInit+0xd8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <SystemInit+0xd8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <SystemInit+0xd8>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <SystemInit+0xd8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <SystemInit+0xec>)
 8002d6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d70:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	52002000 	.word	0x52002000
 8002d84:	58024400 	.word	0x58024400
 8002d88:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d8c:	02020200 	.word	0x02020200
 8002d90:	01ff0000 	.word	0x01ff0000
 8002d94:	01010280 	.word	0x01010280
 8002d98:	52004000 	.word	0x52004000

08002d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002da0:	f7ff ff84 	bl	8002cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dbc:	4c0a      	ldr	r4, [pc, #40]	; (8002de8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dca:	f010 fe13 	bl	80139f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dce:	f7fe f8b3 	bl	8000f38 <main>
  bx  lr
 8002dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dd4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002dd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ddc:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8002de0:	08014778 	.word	0x08014778
  ldr r2, =_sbss
 8002de4:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8002de8:	24002f4c 	.word	0x24002f4c

08002dec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC3_IRQHandler>
	...

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df6:	2003      	movs	r0, #3
 8002df8:	f001 fcf0 	bl	80047dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dfc:	f006 fd4e 	bl	800989c <HAL_RCC_GetSysClockFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_Init+0x68>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	4913      	ldr	r1, [pc, #76]	; (8002e5c <HAL_Init+0x6c>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_Init+0x68>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <HAL_Init+0x6c>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_Init+0x70>)
 8002e32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_Init+0x74>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	f000 f814 	bl	8002e68 <HAL_InitTick>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e002      	b.n	8002e50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e4a:	f7ff f955 	bl	80020f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	080146e4 	.word	0x080146e4
 8002e60:	24000004 	.word	0x24000004
 8002e64:	24000000 	.word	0x24000000

08002e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e70:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_InitTick+0x60>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e021      	b.n	8002ec0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_InitTick+0x64>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_InitTick+0x60>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 fcd5 	bl	8004842 <HAL_SYSTICK_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00e      	b.n	8002ec0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d80a      	bhi.n	8002ebe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f001 fc9f 	bl	80047f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb4:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <HAL_InitTick+0x68>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	2400000c 	.word	0x2400000c
 8002ecc:	24000000 	.word	0x24000000
 8002ed0:	24000008 	.word	0x24000008

08002ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x20>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <HAL_IncTick+0x24>)
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	2400000c 	.word	0x2400000c
 8002ef8:	2400132c 	.word	0x2400132c

08002efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return uwTick;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_GetTick+0x14>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	2400132c 	.word	0x2400132c

08002f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff ffee 	bl	8002efc <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d005      	beq.n	8002f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_Delay+0x44>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f3a:	bf00      	nop
 8002f3c:	f7ff ffde 	bl	8002efc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d8f7      	bhi.n	8002f3c <HAL_Delay+0x28>
  {
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2400000c 	.word	0x2400000c

08002f5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3360      	adds	r3, #96	; 0x60
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a10      	ldr	r2, [pc, #64]	; (8003024 <LL_ADC_SetOffset+0x60>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10b      	bne.n	8003000 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002ffe:	e00b      	b.n	8003018 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	430b      	orrs	r3, r1
 8003012:	431a      	orrs	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	58026000 	.word	0x58026000

08003028 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	461a      	mov	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	611a      	str	r2, [r3, #16]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3360      	adds	r3, #96	; 0x60
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	601a      	str	r2, [r3, #0]
  }
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	58026000 	.word	0x58026000

080030cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a0c      	ldr	r2, [pc, #48]	; (800310c <LL_ADC_SetOffsetSaturation+0x40>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10e      	bne.n	80030fe <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3360      	adds	r3, #96	; 0x60
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	58026000 	.word	0x58026000

08003110 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <LL_ADC_SetOffsetSign+0x40>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d10e      	bne.n	8003142 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	58026000 	.word	0x58026000

08003154 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3360      	adds	r3, #96	; 0x60
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <LL_ADC_SetOffsetState+0x50>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	431a      	orrs	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003186:	e007      	b.n	8003198 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	431a      	orrs	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	601a      	str	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	58026000 	.word	0x58026000

080031a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3330      	adds	r3, #48	; 0x30
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	4413      	add	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	211f      	movs	r1, #31
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0e9b      	lsrs	r3, r3, #26
 80031e0:	f003 011f 	and.w	r1, r3, #31
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	431a      	orrs	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3314      	adds	r3, #20
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	0e5b      	lsrs	r3, r3, #25
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	4413      	add	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	0d1b      	lsrs	r3, r3, #20
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2107      	movs	r1, #7
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	401a      	ands	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	0d1b      	lsrs	r3, r3, #20
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	fa01 f303 	lsl.w	r3, r1, r3
 8003244:	431a      	orrs	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d115      	bne.n	8003298 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003278:	43db      	mvns	r3, r3
 800327a:	401a      	ands	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0318 	and.w	r3, r3, #24
 8003282:	4914      	ldr	r1, [pc, #80]	; (80032d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003284:	40d9      	lsrs	r1, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	400b      	ands	r3, r1
 800328a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003296:	e014      	b.n	80032c2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0318 	and.w	r3, r3, #24
 80032ae:	4909      	ldr	r1, [pc, #36]	; (80032d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032b0:	40d9      	lsrs	r1, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	400b      	ands	r3, r1
 80032b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	58026000 	.word	0x58026000
 80032d4:	000fffff 	.word	0x000fffff

080032d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6093      	str	r3, [r2, #8]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	5fffffc0 	.word	0x5fffffc0

080032fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800330c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003310:	d101      	bne.n	8003316 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <LL_ADC_EnableInternalRegulator+0x24>)
 8003332:	4013      	ands	r3, r2
 8003334:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	6fffffc0 	.word	0x6fffffc0

0800334c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003360:	d101      	bne.n	8003366 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <LL_ADC_IsEnabled+0x18>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <LL_ADC_IsEnabled+0x1a>
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d101      	bne.n	80033b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d101      	bne.n	80033d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1ee      	b.n	80037e0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fe fe8b 	bl	800212c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff67 	bl	80032fc <LL_ADC_IsDeepPowerDownEnabled>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff4d 	bl	80032d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff82 	bl	800334c <LL_ADC_IsInternalRegulatorEnabled>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d114      	bne.n	8003478 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff ff66 	bl	8003324 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003458:	4b8e      	ldr	r3, [pc, #568]	; (8003694 <HAL_ADC_Init+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	4a8e      	ldr	r2, [pc, #568]	; (8003698 <HAL_ADC_Init+0x2b0>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3b01      	subs	r3, #1
 8003470:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f9      	bne.n	800346c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff65 	bl	800334c <LL_ADC_IsInternalRegulatorEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff76 	bl	800339a <LL_ADC_REG_IsConversionOngoing>
 80034ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 8188 	bne.w	80037ce <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 8184 	bne.w	80037ce <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff4a 	bl	8003374 <LL_ADC_IsEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d136      	bne.n	8003554 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6c      	ldr	r2, [pc, #432]	; (800369c <HAL_ADC_Init+0x2b4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_Init+0x112>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a6a      	ldr	r2, [pc, #424]	; (80036a0 <HAL_ADC_Init+0x2b8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d10e      	bne.n	8003518 <HAL_ADC_Init+0x130>
 80034fa:	4868      	ldr	r0, [pc, #416]	; (800369c <HAL_ADC_Init+0x2b4>)
 80034fc:	f7ff ff3a 	bl	8003374 <LL_ADC_IsEnabled>
 8003500:	4604      	mov	r4, r0
 8003502:	4867      	ldr	r0, [pc, #412]	; (80036a0 <HAL_ADC_Init+0x2b8>)
 8003504:	f7ff ff36 	bl	8003374 <LL_ADC_IsEnabled>
 8003508:	4603      	mov	r3, r0
 800350a:	4323      	orrs	r3, r4
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	e008      	b.n	800352a <HAL_ADC_Init+0x142>
 8003518:	4862      	ldr	r0, [pc, #392]	; (80036a4 <HAL_ADC_Init+0x2bc>)
 800351a:	f7ff ff2b 	bl	8003374 <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5a      	ldr	r2, [pc, #360]	; (800369c <HAL_ADC_Init+0x2b4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_ADC_Init+0x15a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_ADC_Init+0x2b8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_ADC_Init+0x15e>
 8003542:	4a59      	ldr	r2, [pc, #356]	; (80036a8 <HAL_ADC_Init+0x2c0>)
 8003544:	e000      	b.n	8003548 <HAL_ADC_Init+0x160>
 8003546:	4a59      	ldr	r2, [pc, #356]	; (80036ac <HAL_ADC_Init+0x2c4>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fd04 	bl	8002f5c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_ADC_Init+0x2bc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d129      	bne.n	80035b2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	7e5b      	ldrb	r3, [r3, #25]
 8003562:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003568:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800356e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d013      	beq.n	80035a0 <HAL_ADC_Init+0x1b8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b0c      	cmp	r3, #12
 800357e:	d00d      	beq.n	800359c <HAL_ADC_Init+0x1b4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b1c      	cmp	r3, #28
 8003586:	d007      	beq.n	8003598 <HAL_ADC_Init+0x1b0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b18      	cmp	r3, #24
 800358e:	d101      	bne.n	8003594 <HAL_ADC_Init+0x1ac>
 8003590:	2318      	movs	r3, #24
 8003592:	e006      	b.n	80035a2 <HAL_ADC_Init+0x1ba>
 8003594:	2300      	movs	r3, #0
 8003596:	e004      	b.n	80035a2 <HAL_ADC_Init+0x1ba>
 8003598:	2310      	movs	r3, #16
 800359a:	e002      	b.n	80035a2 <HAL_ADC_Init+0x1ba>
 800359c:	2308      	movs	r3, #8
 800359e:	e000      	b.n	80035a2 <HAL_ADC_Init+0x1ba>
 80035a0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80035a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e00e      	b.n	80035d0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7e5b      	ldrb	r3, [r3, #25]
 80035b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	3b01      	subs	r3, #1
 80035e0:	045b      	lsls	r3, r3, #17
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <HAL_ADC_Init+0x2bc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d115      	bne.n	800363a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_ADC_Init+0x2c8>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	430b      	orrs	r3, r1
 8003620:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	611a      	str	r2, [r3, #16]
 8003638:	e009      	b.n	800364e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_ADC_Init+0x2cc>)
 8003642:	4013      	ands	r3, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	430b      	orrs	r3, r1
 800364c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fea1 	bl	800339a <LL_ADC_REG_IsConversionOngoing>
 8003658:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff feae 	bl	80033c0 <LL_ADC_INJ_IsConversionOngoing>
 8003664:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f040 808e 	bne.w	800378a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 808a 	bne.w	800378a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_ADC_Init+0x2bc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d11b      	bne.n	80036b8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7e1b      	ldrb	r3, [r3, #24]
 8003684:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e018      	b.n	80036c6 <HAL_ADC_Init+0x2de>
 8003694:	24000000 	.word	0x24000000
 8003698:	053e2d63 	.word	0x053e2d63
 800369c:	40022000 	.word	0x40022000
 80036a0:	40022100 	.word	0x40022100
 80036a4:	58026000 	.word	0x58026000
 80036a8:	40022300 	.word	0x40022300
 80036ac:	58026300 	.word	0x58026300
 80036b0:	fff04007 	.word	0xfff04007
 80036b4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7e1b      	ldrb	r3, [r3, #24]
 80036bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4b46      	ldr	r3, [pc, #280]	; (80037e8 <HAL_ADC_Init+0x400>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	69b9      	ldr	r1, [r7, #24]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d137      	bne.n	8003754 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <HAL_ADC_Init+0x404>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d116      	bne.n	8003722 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_ADC_Init+0x408>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003712:	430a      	orrs	r2, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	611a      	str	r2, [r3, #16]
 8003720:	e020      	b.n	8003764 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_ADC_Init+0x40c>)
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003730:	3a01      	subs	r2, #1
 8003732:	0411      	lsls	r1, r2, #16
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003738:	4311      	orrs	r1, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800373e:	4311      	orrs	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003744:	430a      	orrs	r2, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e007      	b.n	8003764 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_ADC_Init+0x404>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d002      	beq.n	800378a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fd63 	bl	8004250 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d10c      	bne.n	80037ac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 010f 	bic.w	r1, r3, #15
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
 80037aa:	e007      	b.n	80037bc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 020f 	bic.w	r2, r2, #15
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	f023 0303 	bic.w	r3, r3, #3
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	661a      	str	r2, [r3, #96]	; 0x60
 80037cc:	e007      	b.n	80037de <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f043 0210 	orr.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037de:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3724      	adds	r7, #36	; 0x24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}
 80037e8:	ffffbffc 	.word	0xffffbffc
 80037ec:	58026000 	.word	0x58026000
 80037f0:	fc00f81f 	.word	0xfc00f81f
 80037f4:	fc00f81e 	.word	0xfc00f81e

080037f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b0b9      	sub	sp, #228	; 0xe4
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003812:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4aa9      	ldr	r2, [pc, #676]	; (8003ac0 <HAL_ADC_ConfigChannel+0x2c8>)
 800381a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <HAL_ADC_ConfigChannel+0x34>
 8003826:	2302      	movs	r3, #2
 8003828:	f000 bcfa 	b.w	8004220 <HAL_ADC_ConfigChannel+0xa28>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fdae 	bl	800339a <LL_ADC_REG_IsConversionOngoing>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 84de 	bne.w	8004202 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a9e      	ldr	r2, [pc, #632]	; (8003ac4 <HAL_ADC_ConfigChannel+0x2cc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d033      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_ADC_ConfigChannel+0x76>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2201      	movs	r2, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	e01d      	b.n	80038aa <HAL_ADC_ConfigChannel+0xb2>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800388a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003892:	2320      	movs	r3, #32
 8003894:	e004      	b.n	80038a0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2201      	movs	r2, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	69d1      	ldr	r1, [r2, #28]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	430b      	orrs	r3, r1
 80038b6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f7ff fc6f 	bl	80031a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fd63 	bl	800339a <LL_ADC_REG_IsConversionOngoing>
 80038d4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fd6f 	bl	80033c0 <LL_ADC_INJ_IsConversionOngoing>
 80038e2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f040 8270 	bne.w	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 826b 	bne.w	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	461a      	mov	r2, r3
 8003908:	f7ff fc7a 	bl	8003200 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a6c      	ldr	r2, [pc, #432]	; (8003ac4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d10d      	bne.n	8003932 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003930:	e032      	b.n	8003998 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800393a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393e:	d10b      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x160>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	e01d      	b.n	8003994 <HAL_ADC_ConfigChannel+0x19c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <HAL_ADC_ConfigChannel+0x186>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	e00a      	b.n	8003994 <HAL_ADC_ConfigChannel+0x19c>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d048      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6919      	ldr	r1, [r3, #16]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b0:	f7ff fb08 	bl	8002fc4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a42      	ldr	r2, [pc, #264]	; (8003ac4 <HAL_ADC_ConfigChannel+0x2cc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d119      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6919      	ldr	r1, [r3, #16]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7ff fba0 	bl	8003110 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6919      	ldr	r1, [r3, #16]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x1f0>
 80039e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e6:	e000      	b.n	80039ea <HAL_ADC_ConfigChannel+0x1f2>
 80039e8:	2300      	movs	r3, #0
 80039ea:	461a      	mov	r2, r3
 80039ec:	f7ff fb6e 	bl	80030cc <LL_ADC_SetOffsetSaturation>
 80039f0:	e1ee      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6919      	ldr	r1, [r3, #16]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x212>
 8003a04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x214>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f7ff fb3b 	bl	8003088 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	7e1b      	ldrb	r3, [r3, #24]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d102      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x230>
 8003a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x232>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f7ff fb12 	bl	8003054 <LL_ADC_SetDataRightShift>
 8003a30:	e1ce      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_ADC_ConfigChannel+0x2cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 8181 	bne.w	8003d40 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff faef 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x272>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fae4 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	0e9b      	lsrs	r3, r3, #26
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	e01e      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x2b0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fad9 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003a90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e004      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x2d4>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e9b      	lsrs	r3, r3, #26
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	e01e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x306>
 8003ac0:	47ff0000 	.word	0x47ff0000
 8003ac4:	58026000 	.word	0x58026000
 8003ac8:	5c001000 	.word	0x5c001000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003af0:	2320      	movs	r3, #32
 8003af2:	e004      	b.n	8003afe <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d106      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fb22 	bl	8003154 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff fa86 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <HAL_ADC_ConfigChannel+0x344>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fa7b 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	0e9b      	lsrs	r3, r3, #26
 8003b36:	f003 021f 	and.w	r2, r3, #31
 8003b3a:	e01e      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x382>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fa70 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003b62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e004      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x39a>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	e018      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x3cc>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003baa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	e004      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bbe:	fab3 f383 	clz	r3, r3
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d106      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2101      	movs	r1, #1
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fabf 	bl	8003154 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fa23 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x40a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fa18 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	0e9b      	lsrs	r3, r3, #26
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	e01e      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x448>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fa0d 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e004      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x460>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0e9b      	lsrs	r3, r3, #26
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	e014      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x48a>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003c74:	2320      	movs	r3, #32
 8003c76:	e004      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d106      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fa60 	bl	8003154 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2103      	movs	r1, #3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f9c4 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x4c8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2103      	movs	r1, #3
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff f9b9 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	f003 021f 	and.w	r2, r3, #31
 8003cbe:	e017      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x4f8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2103      	movs	r1, #3
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff f9ae 	bl	8003028 <LL_ADC_GetOffsetChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	e003      	b.n	8003cee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x510>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	e011      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x534>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d14f      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2103      	movs	r1, #3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fa0b 	bl	8003154 <LL_ADC_SetOffsetState>
 8003d3e:	e047      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	069b      	lsls	r3, r3, #26
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	069b      	lsls	r3, r3, #26
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d86:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	069b      	lsls	r3, r3, #26
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d107      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003daa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	069b      	lsls	r3, r3, #26
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff facd 	bl	8003374 <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 8219 	bne.w	8004214 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f7ff fa32 	bl	8003258 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4aa1      	ldr	r2, [pc, #644]	; (8004080 <HAL_ADC_ConfigChannel+0x888>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	f040 812e 	bne.w	800405c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x630>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	3301      	adds	r3, #1
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	bf94      	ite	ls
 8003e20:	2301      	movls	r3, #1
 8003e22:	2300      	movhi	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e019      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x664>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003e40:	2320      	movs	r3, #32
 8003e42:	e003      	b.n	8003e4c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	bf94      	ite	ls
 8003e56:	2301      	movls	r3, #1
 8003e58:	2300      	movhi	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d079      	beq.n	8003f54 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x684>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	3301      	adds	r3, #1
 8003e74:	069b      	lsls	r3, r3, #26
 8003e76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e7a:	e015      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x6b0>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	069b      	lsls	r3, r3, #26
 8003ea4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x6d0>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e9b      	lsrs	r3, r3, #26
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	e017      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x700>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	e003      	b.n	8003eec <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x726>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0e9b      	lsrs	r3, r3, #26
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	051b      	lsls	r3, r3, #20
 8003f1c:	e018      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x758>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003f36:	2320      	movs	r3, #32
 8003f38:	e003      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f50:	430b      	orrs	r3, r1
 8003f52:	e07e      	b.n	8004052 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x778>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e9b      	lsrs	r3, r3, #26
 8003f66:	3301      	adds	r3, #1
 8003f68:	069b      	lsls	r3, r3, #26
 8003f6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f6e:	e015      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x7a4>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e003      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3301      	adds	r3, #1
 8003f96:	069b      	lsls	r3, r3, #26
 8003f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x7c4>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	0e9b      	lsrs	r3, r3, #26
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	e017      	b.n	8003fec <HAL_ADC_ConfigChannel+0x7f4>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	61bb      	str	r3, [r7, #24]
  return result;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	ea42 0103 	orr.w	r1, r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10d      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x820>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	3301      	adds	r3, #1
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	3b1e      	subs	r3, #30
 8004010:	051b      	lsls	r3, r3, #20
 8004012:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004016:	e01b      	b.n	8004050 <HAL_ADC_ConfigChannel+0x858>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	60fb      	str	r3, [r7, #12]
  return result;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004030:	2320      	movs	r3, #32
 8004032:	e003      	b.n	800403c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	fab3 f383 	clz	r3, r3
 800403a:	b2db      	uxtb	r3, r3
 800403c:	3301      	adds	r3, #1
 800403e:	f003 021f 	and.w	r2, r3, #31
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	3b1e      	subs	r3, #30
 800404a:	051b      	lsls	r3, r3, #20
 800404c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004050:	430b      	orrs	r3, r1
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	6892      	ldr	r2, [r2, #8]
 8004056:	4619      	mov	r1, r3
 8004058:	f7ff f8d2 	bl	8003200 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f280 80d7 	bge.w	8004214 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_ADC_ConfigChannel+0x88c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_ADC_ConfigChannel+0x882>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_ADC_ConfigChannel+0x890>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10a      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x898>
 800407a:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_ADC_ConfigChannel+0x894>)
 800407c:	e009      	b.n	8004092 <HAL_ADC_ConfigChannel+0x89a>
 800407e:	bf00      	nop
 8004080:	47ff0000 	.word	0x47ff0000
 8004084:	40022000 	.word	0x40022000
 8004088:	40022100 	.word	0x40022100
 800408c:	40022300 	.word	0x40022300
 8004090:	4b65      	ldr	r3, [pc, #404]	; (8004228 <HAL_ADC_ConfigChannel+0xa30>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe ff88 	bl	8002fa8 <LL_ADC_GetCommonPathInternalCh>
 8004098:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a62      	ldr	r2, [pc, #392]	; (800422c <HAL_ADC_ConfigChannel+0xa34>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_ADC_ConfigChannel+0x8b8>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a61      	ldr	r2, [pc, #388]	; (8004230 <HAL_ADC_ConfigChannel+0xa38>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10e      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x8d6>
 80040b0:	485e      	ldr	r0, [pc, #376]	; (800422c <HAL_ADC_ConfigChannel+0xa34>)
 80040b2:	f7ff f95f 	bl	8003374 <LL_ADC_IsEnabled>
 80040b6:	4604      	mov	r4, r0
 80040b8:	485d      	ldr	r0, [pc, #372]	; (8004230 <HAL_ADC_ConfigChannel+0xa38>)
 80040ba:	f7ff f95b 	bl	8003374 <LL_ADC_IsEnabled>
 80040be:	4603      	mov	r3, r0
 80040c0:	4323      	orrs	r3, r4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e008      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x8e8>
 80040ce:	4859      	ldr	r0, [pc, #356]	; (8004234 <HAL_ADC_ConfigChannel+0xa3c>)
 80040d0:	f7ff f950 	bl	8003374 <LL_ADC_IsEnabled>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8084 	beq.w	80041ee <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a53      	ldr	r2, [pc, #332]	; (8004238 <HAL_ADC_ConfigChannel+0xa40>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d132      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x95e>
 80040f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d12c      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a4c      	ldr	r2, [pc, #304]	; (8004234 <HAL_ADC_ConfigChannel+0xa3c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f040 8086 	bne.w	8004214 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a47      	ldr	r2, [pc, #284]	; (800422c <HAL_ADC_ConfigChannel+0xa34>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_ADC_ConfigChannel+0x924>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a46      	ldr	r2, [pc, #280]	; (8004230 <HAL_ADC_ConfigChannel+0xa38>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x928>
 800411c:	4a47      	ldr	r2, [pc, #284]	; (800423c <HAL_ADC_ConfigChannel+0xa44>)
 800411e:	e000      	b.n	8004122 <HAL_ADC_ConfigChannel+0x92a>
 8004120:	4a41      	ldr	r2, [pc, #260]	; (8004228 <HAL_ADC_ConfigChannel+0xa30>)
 8004122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7fe ff28 	bl	8002f82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004132:	4b43      	ldr	r3, [pc, #268]	; (8004240 <HAL_ADC_ConfigChannel+0xa48>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_ADC_ConfigChannel+0xa4c>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	3301      	adds	r3, #1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004146:	e002      	b.n	800414e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	3b01      	subs	r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f9      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004154:	e05e      	b.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_ADC_ConfigChannel+0xa50>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d120      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x9aa>
 8004160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11a      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	; (8004234 <HAL_ADC_ConfigChannel+0xa3c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d14e      	bne.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2c      	ldr	r2, [pc, #176]	; (800422c <HAL_ADC_ConfigChannel+0xa34>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_ADC_ConfigChannel+0x992>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <HAL_ADC_ConfigChannel+0xa38>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_ADC_ConfigChannel+0x996>
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <HAL_ADC_ConfigChannel+0xa44>)
 800418c:	e000      	b.n	8004190 <HAL_ADC_ConfigChannel+0x998>
 800418e:	4a26      	ldr	r2, [pc, #152]	; (8004228 <HAL_ADC_ConfigChannel+0xa30>)
 8004190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004198:	4619      	mov	r1, r3
 800419a:	4610      	mov	r0, r2
 800419c:	f7fe fef1 	bl	8002f82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041a0:	e038      	b.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_ADC_ConfigChannel+0xa54>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d133      	bne.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
 80041ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d12d      	bne.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_ADC_ConfigChannel+0xa3c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d128      	bne.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a19      	ldr	r2, [pc, #100]	; (800422c <HAL_ADC_ConfigChannel+0xa34>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_ADC_ConfigChannel+0x9de>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_ADC_ConfigChannel+0xa38>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x9e2>
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_ADC_ConfigChannel+0xa44>)
 80041d8:	e000      	b.n	80041dc <HAL_ADC_ConfigChannel+0x9e4>
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <HAL_ADC_ConfigChannel+0xa30>)
 80041dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f7fe fecb 	bl	8002f82 <LL_ADC_SetCommonPathInternalCh>
 80041ec:	e012      	b.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004200:	e008      	b.n	8004214 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800421c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004220:	4618      	mov	r0, r3
 8004222:	37e4      	adds	r7, #228	; 0xe4
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}
 8004228:	58026300 	.word	0x58026300
 800422c:	40022000 	.word	0x40022000
 8004230:	40022100 	.word	0x40022100
 8004234:	58026000 	.word	0x58026000
 8004238:	c7520000 	.word	0xc7520000
 800423c:	40022300 	.word	0x40022300
 8004240:	24000000 	.word	0x24000000
 8004244:	053e2d63 	.word	0x053e2d63
 8004248:	c3210000 	.word	0xc3210000
 800424c:	cb840000 	.word	0xcb840000

08004250 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6c      	ldr	r2, [pc, #432]	; (8004410 <ADC_ConfigureBoostMode+0x1c0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <ADC_ConfigureBoostMode+0x1c>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6b      	ldr	r2, [pc, #428]	; (8004414 <ADC_ConfigureBoostMode+0x1c4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d109      	bne.n	8004280 <ADC_ConfigureBoostMode+0x30>
 800426c:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <ADC_ConfigureBoostMode+0x1c8>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e008      	b.n	8004292 <ADC_ConfigureBoostMode+0x42>
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <ADC_ConfigureBoostMode+0x1cc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01c      	beq.n	80042d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004296:	f005 fc7b 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 800429a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042a4:	d010      	beq.n	80042c8 <ADC_ConfigureBoostMode+0x78>
 80042a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042aa:	d873      	bhi.n	8004394 <ADC_ConfigureBoostMode+0x144>
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d002      	beq.n	80042b8 <ADC_ConfigureBoostMode+0x68>
 80042b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b6:	d16d      	bne.n	8004394 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	60fb      	str	r3, [r7, #12]
        break;
 80042c6:	e068      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	60fb      	str	r3, [r7, #12]
        break;
 80042ce:	e064      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	f006 fe56 	bl	800af88 <HAL_RCCEx_GetPeriphCLKFreq>
 80042dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042e6:	d051      	beq.n	800438c <ADC_ConfigureBoostMode+0x13c>
 80042e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042ec:	d854      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 80042ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042f2:	d047      	beq.n	8004384 <ADC_ConfigureBoostMode+0x134>
 80042f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042f8:	d84e      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 80042fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042fe:	d03d      	beq.n	800437c <ADC_ConfigureBoostMode+0x12c>
 8004300:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004304:	d848      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 8004306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800430a:	d033      	beq.n	8004374 <ADC_ConfigureBoostMode+0x124>
 800430c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004310:	d842      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 8004312:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004316:	d029      	beq.n	800436c <ADC_ConfigureBoostMode+0x11c>
 8004318:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800431c:	d83c      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 800431e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004322:	d01a      	beq.n	800435a <ADC_ConfigureBoostMode+0x10a>
 8004324:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004328:	d836      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 800432a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800432e:	d014      	beq.n	800435a <ADC_ConfigureBoostMode+0x10a>
 8004330:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004334:	d830      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433a:	d00e      	beq.n	800435a <ADC_ConfigureBoostMode+0x10a>
 800433c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004340:	d82a      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 8004342:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004346:	d008      	beq.n	800435a <ADC_ConfigureBoostMode+0x10a>
 8004348:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800434c:	d824      	bhi.n	8004398 <ADC_ConfigureBoostMode+0x148>
 800434e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004352:	d002      	beq.n	800435a <ADC_ConfigureBoostMode+0x10a>
 8004354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004358:	d11e      	bne.n	8004398 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	60fb      	str	r3, [r7, #12]
        break;
 800436a:	e016      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
        break;
 8004372:	e012      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	60fb      	str	r3, [r7, #12]
        break;
 800437a:	e00e      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	60fb      	str	r3, [r7, #12]
        break;
 8004382:	e00a      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	09db      	lsrs	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
        break;
 800438a:	e006      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	60fb      	str	r3, [r7, #12]
        break;
 8004392:	e002      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004398:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <ADC_ConfigureBoostMode+0x1d0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d808      	bhi.n	80043ba <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80043b8:	e025      	b.n	8004406 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <ADC_ConfigureBoostMode+0x1d4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d80a      	bhi.n	80043d8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d4:	609a      	str	r2, [r3, #8]
}
 80043d6:	e016      	b.n	8004406 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <ADC_ConfigureBoostMode+0x1d8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d80a      	bhi.n	80043f6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	e007      	b.n	8004406 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004404:	609a      	str	r2, [r3, #8]
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40022000 	.word	0x40022000
 8004414:	40022100 	.word	0x40022100
 8004418:	40022300 	.word	0x40022300
 800441c:	58026300 	.word	0x58026300
 8004420:	005f5e10 	.word	0x005f5e10
 8004424:	00bebc20 	.word	0x00bebc20
 8004428:	017d7840 	.word	0x017d7840

0800442c <LL_ADC_IsEnabled>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <LL_ADC_IsEnabled+0x18>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <LL_ADC_IsEnabled+0x1a>
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_ADC_REG_IsConversionOngoing>:
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d101      	bne.n	800446a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b0a3      	sub	sp, #140	; 0x8c
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004492:	2302      	movs	r3, #2
 8004494:	e0c1      	b.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5e      	ldr	r2, [pc, #376]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d102      	bne.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044b0:	4b5d      	ldr	r3, [pc, #372]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e001      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0a0      	b.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ffb9 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ffb2 	bl	8004452 <LL_ADC_REG_IsConversionOngoing>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 8081 	bne.w	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d17c      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a48      	ldr	r2, [pc, #288]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a46      	ldr	r2, [pc, #280]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004512:	4b46      	ldr	r3, [pc, #280]	; (800462c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004514:	e000      	b.n	8004518 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004518:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d039      	beq.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	431a      	orrs	r2, r3
 8004530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004532:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a39      	ldr	r2, [pc, #228]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10e      	bne.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004548:	4836      	ldr	r0, [pc, #216]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800454a:	f7ff ff6f 	bl	800442c <LL_ADC_IsEnabled>
 800454e:	4604      	mov	r4, r0
 8004550:	4835      	ldr	r0, [pc, #212]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004552:	f7ff ff6b 	bl	800442c <LL_ADC_IsEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	4323      	orrs	r3, r4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e008      	b.n	8004578 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004566:	4833      	ldr	r0, [pc, #204]	; (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004568:	f7ff ff60 	bl	800442c <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d047      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800457c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b2d      	ldr	r3, [pc, #180]	; (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004582:	4013      	ands	r3, r2
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	6811      	ldr	r1, [r2, #0]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	6892      	ldr	r2, [r2, #8]
 800458c:	430a      	orrs	r2, r1
 800458e:	431a      	orrs	r2, r3
 8004590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004592:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004594:	e03a      	b.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004596:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800459e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10e      	bne.n	80045d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80045b6:	481b      	ldr	r0, [pc, #108]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045b8:	f7ff ff38 	bl	800442c <LL_ADC_IsEnabled>
 80045bc:	4604      	mov	r4, r0
 80045be:	481a      	ldr	r0, [pc, #104]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045c0:	f7ff ff34 	bl	800442c <LL_ADC_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4323      	orrs	r3, r4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e008      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80045d4:	4817      	ldr	r0, [pc, #92]	; (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80045d6:	f7ff ff29 	bl	800442c <LL_ADC_IsEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045f6:	e009      	b.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800460a:	e000      	b.n	800460e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800460c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004616:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800461a:	4618      	mov	r0, r3
 800461c:	378c      	adds	r7, #140	; 0x8c
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	bf00      	nop
 8004624:	40022000 	.word	0x40022000
 8004628:	40022100 	.word	0x40022100
 800462c:	40022300 	.word	0x40022300
 8004630:	58026300 	.word	0x58026300
 8004634:	58026000 	.word	0x58026000
 8004638:	fffff0e0 	.word	0xfffff0e0

0800463c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <__NVIC_SetPriorityGrouping+0x40>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004658:	4013      	ands	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <__NVIC_SetPriorityGrouping+0x44>)
 8004666:	4313      	orrs	r3, r2
 8004668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800466a:	4a04      	ldr	r2, [pc, #16]	; (800467c <__NVIC_SetPriorityGrouping+0x40>)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	60d3      	str	r3, [r2, #12]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	e000ed00 	.word	0xe000ed00
 8004680:	05fa0000 	.word	0x05fa0000

08004684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <__NVIC_GetPriorityGrouping+0x18>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	f003 0307 	and.w	r3, r3, #7
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	db0b      	blt.n	80046ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	f003 021f 	and.w	r2, r3, #31
 80046b8:	4907      	ldr	r1, [pc, #28]	; (80046d8 <__NVIC_EnableIRQ+0x38>)
 80046ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2001      	movs	r0, #1
 80046c2:	fa00 f202 	lsl.w	r2, r0, r2
 80046c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	e000e100 	.word	0xe000e100

080046dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db0a      	blt.n	8004706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	490c      	ldr	r1, [pc, #48]	; (8004728 <__NVIC_SetPriority+0x4c>)
 80046f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	440b      	add	r3, r1
 8004700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004704:	e00a      	b.n	800471c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4908      	ldr	r1, [pc, #32]	; (800472c <__NVIC_SetPriority+0x50>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	3b04      	subs	r3, #4
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	440b      	add	r3, r1
 800471a:	761a      	strb	r2, [r3, #24]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000e100 	.word	0xe000e100
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f1c3 0307 	rsb	r3, r3, #7
 800474a:	2b04      	cmp	r3, #4
 800474c:	bf28      	it	cs
 800474e:	2304      	movcs	r3, #4
 8004750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3304      	adds	r3, #4
 8004756:	2b06      	cmp	r3, #6
 8004758:	d902      	bls.n	8004760 <NVIC_EncodePriority+0x30>
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3b03      	subs	r3, #3
 800475e:	e000      	b.n	8004762 <NVIC_EncodePriority+0x32>
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	401a      	ands	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004778:	f04f 31ff 	mov.w	r1, #4294967295
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	43d9      	mvns	r1, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004788:	4313      	orrs	r3, r2
         );
}
 800478a:	4618      	mov	r0, r3
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a8:	d301      	bcc.n	80047ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047aa:	2301      	movs	r3, #1
 80047ac:	e00f      	b.n	80047ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ae:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <SysTick_Config+0x40>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b6:	210f      	movs	r1, #15
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	f7ff ff8e 	bl	80046dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <SysTick_Config+0x40>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <SysTick_Config+0x40>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000e010 	.word	0xe000e010

080047dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff29 	bl	800463c <__NVIC_SetPriorityGrouping>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004800:	f7ff ff40 	bl	8004684 <__NVIC_GetPriorityGrouping>
 8004804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff ff90 	bl	8004730 <NVIC_EncodePriority>
 8004810:	4602      	mov	r2, r0
 8004812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff ff5f 	bl	80046dc <__NVIC_SetPriority>
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff33 	bl	80046a0 <__NVIC_EnableIRQ>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ffa4 	bl	8004798 <SysTick_Config>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004864:	f7fe fb4a 	bl	8002efc <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e314      	b.n	8004e9e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_DMA_Init+0x1b8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04a      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_DMA_Init+0x1bc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d045      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <HAL_DMA_Init+0x1c0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d040      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a62      	ldr	r2, [pc, #392]	; (8004a20 <HAL_DMA_Init+0x1c4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d03b      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_DMA_Init+0x1c8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d036      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5f      	ldr	r2, [pc, #380]	; (8004a28 <HAL_DMA_Init+0x1cc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d031      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5d      	ldr	r2, [pc, #372]	; (8004a2c <HAL_DMA_Init+0x1d0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02c      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a5c      	ldr	r2, [pc, #368]	; (8004a30 <HAL_DMA_Init+0x1d4>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d027      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5a      	ldr	r2, [pc, #360]	; (8004a34 <HAL_DMA_Init+0x1d8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <HAL_DMA_Init+0x1dc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01d      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a57      	ldr	r2, [pc, #348]	; (8004a3c <HAL_DMA_Init+0x1e0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a56      	ldr	r2, [pc, #344]	; (8004a40 <HAL_DMA_Init+0x1e4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a54      	ldr	r2, [pc, #336]	; (8004a44 <HAL_DMA_Init+0x1e8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a53      	ldr	r2, [pc, #332]	; (8004a48 <HAL_DMA_Init+0x1ec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a51      	ldr	r2, [pc, #324]	; (8004a4c <HAL_DMA_Init+0x1f0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_DMA_Init+0xb8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a50      	ldr	r2, [pc, #320]	; (8004a50 <HAL_DMA_Init+0x1f4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_DMA_Init+0xbc>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_DMA_Init+0xbe>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 813c 	beq.w	8004b98 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a37      	ldr	r2, [pc, #220]	; (8004a14 <HAL_DMA_Init+0x1b8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_DMA_Init+0x1bc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_DMA_Init+0x1c0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a33      	ldr	r2, [pc, #204]	; (8004a20 <HAL_DMA_Init+0x1c4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a31      	ldr	r2, [pc, #196]	; (8004a24 <HAL_DMA_Init+0x1c8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a30      	ldr	r2, [pc, #192]	; (8004a28 <HAL_DMA_Init+0x1cc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <HAL_DMA_Init+0x1d0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2d      	ldr	r2, [pc, #180]	; (8004a30 <HAL_DMA_Init+0x1d4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <HAL_DMA_Init+0x1d8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <HAL_DMA_Init+0x1dc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a28      	ldr	r2, [pc, #160]	; (8004a3c <HAL_DMA_Init+0x1e0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a27      	ldr	r2, [pc, #156]	; (8004a40 <HAL_DMA_Init+0x1e4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_DMA_Init+0x1e8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <HAL_DMA_Init+0x1ec>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_DMA_Init+0x1f0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_Init+0x174>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <HAL_DMA_Init+0x1f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <HAL_DMA_Init+0x186>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e007      	b.n	80049f2 <HAL_DMA_Init+0x196>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049f2:	e02f      	b.n	8004a54 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049f4:	f7fe fa82 	bl	8002efc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d928      	bls.n	8004a54 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e244      	b.n	8004e9e <HAL_DMA_Init+0x642>
 8004a14:	40020010 	.word	0x40020010
 8004a18:	40020028 	.word	0x40020028
 8004a1c:	40020040 	.word	0x40020040
 8004a20:	40020058 	.word	0x40020058
 8004a24:	40020070 	.word	0x40020070
 8004a28:	40020088 	.word	0x40020088
 8004a2c:	400200a0 	.word	0x400200a0
 8004a30:	400200b8 	.word	0x400200b8
 8004a34:	40020410 	.word	0x40020410
 8004a38:	40020428 	.word	0x40020428
 8004a3c:	40020440 	.word	0x40020440
 8004a40:	40020458 	.word	0x40020458
 8004a44:	40020470 	.word	0x40020470
 8004a48:	40020488 	.word	0x40020488
 8004a4c:	400204a0 	.word	0x400204a0
 8004a50:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1c8      	bne.n	80049f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4b84      	ldr	r3, [pc, #528]	; (8004c80 <HAL_DMA_Init+0x424>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a7a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a92:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d107      	bne.n	8004ab8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b28      	cmp	r3, #40	; 0x28
 8004abe:	d903      	bls.n	8004ac8 <HAL_DMA_Init+0x26c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac6:	d91f      	bls.n	8004b08 <HAL_DMA_Init+0x2ac>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ace:	d903      	bls.n	8004ad8 <HAL_DMA_Init+0x27c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b42      	cmp	r3, #66	; 0x42
 8004ad6:	d917      	bls.n	8004b08 <HAL_DMA_Init+0x2ac>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b46      	cmp	r3, #70	; 0x46
 8004ade:	d903      	bls.n	8004ae8 <HAL_DMA_Init+0x28c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b48      	cmp	r3, #72	; 0x48
 8004ae6:	d90f      	bls.n	8004b08 <HAL_DMA_Init+0x2ac>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b4e      	cmp	r3, #78	; 0x4e
 8004aee:	d903      	bls.n	8004af8 <HAL_DMA_Init+0x29c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b52      	cmp	r3, #82	; 0x52
 8004af6:	d907      	bls.n	8004b08 <HAL_DMA_Init+0x2ac>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b73      	cmp	r3, #115	; 0x73
 8004afe:	d905      	bls.n	8004b0c <HAL_DMA_Init+0x2b0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b77      	cmp	r3, #119	; 0x77
 8004b06:	d801      	bhi.n	8004b0c <HAL_DMA_Init+0x2b0>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_DMA_Init+0x2b2>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b18:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f023 0307 	bic.w	r3, r3, #7
 8004b30:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d117      	bne.n	8004b74 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f001 fdcc 	bl	80066f4 <DMA_CheckFifoParam>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e194      	b.n	8004e9e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f001 fd07 	bl	8006590 <DMA_CalcBaseAndBitshift>
 8004b82:	4603      	mov	r3, r0
 8004b84:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	223f      	movs	r2, #63	; 0x3f
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	e0ca      	b.n	8004d2e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a39      	ldr	r2, [pc, #228]	; (8004c84 <HAL_DMA_Init+0x428>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a38      	ldr	r2, [pc, #224]	; (8004c88 <HAL_DMA_Init+0x42c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a36      	ldr	r2, [pc, #216]	; (8004c8c <HAL_DMA_Init+0x430>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a35      	ldr	r2, [pc, #212]	; (8004c90 <HAL_DMA_Init+0x434>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a33      	ldr	r2, [pc, #204]	; (8004c94 <HAL_DMA_Init+0x438>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a32      	ldr	r2, [pc, #200]	; (8004c98 <HAL_DMA_Init+0x43c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <HAL_DMA_Init+0x440>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <HAL_DMA_Init+0x38c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <HAL_DMA_Init+0x444>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Init+0x390>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_DMA_Init+0x392>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8094 	beq.w	8004d1c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <HAL_DMA_Init+0x428>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d021      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <HAL_DMA_Init+0x42c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d01c      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_DMA_Init+0x430>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d017      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_DMA_Init+0x434>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d012      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <HAL_DMA_Init+0x438>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00d      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_DMA_Init+0x43c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d008      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_DMA_Init+0x440>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <HAL_DMA_Init+0x3e6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_DMA_Init+0x444>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_DMA_Init+0x448>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	d01d      	beq.n	8004ca8 <HAL_DMA_Init+0x44c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d102      	bne.n	8004c7a <HAL_DMA_Init+0x41e>
 8004c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c78:	e017      	b.n	8004caa <HAL_DMA_Init+0x44e>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e015      	b.n	8004caa <HAL_DMA_Init+0x44e>
 8004c7e:	bf00      	nop
 8004c80:	fe10803f 	.word	0xfe10803f
 8004c84:	58025408 	.word	0x58025408
 8004c88:	5802541c 	.word	0x5802541c
 8004c8c:	58025430 	.word	0x58025430
 8004c90:	58025444 	.word	0x58025444
 8004c94:	58025458 	.word	0x58025458
 8004c98:	5802546c 	.word	0x5802546c
 8004c9c:	58025480 	.word	0x58025480
 8004ca0:	58025494 	.word	0x58025494
 8004ca4:	fffe000f 	.word	0xfffe000f
 8004ca8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <HAL_DMA_Init+0x64c>)
 8004cf0:	4413      	add	r3, r2
 8004cf2:	4a6e      	ldr	r2, [pc, #440]	; (8004eac <HAL_DMA_Init+0x650>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	009a      	lsls	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fc45 	bl	8006590 <DMA_CalcBaseAndBitshift>
 8004d06:	4603      	mov	r3, r0
 8004d08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2201      	movs	r2, #1
 8004d14:	409a      	lsls	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	e008      	b.n	8004d2e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0b7      	b.n	8004e9e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_DMA_Init+0x654>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d072      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a5d      	ldr	r2, [pc, #372]	; (8004eb4 <HAL_DMA_Init+0x658>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d06d      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a5c      	ldr	r2, [pc, #368]	; (8004eb8 <HAL_DMA_Init+0x65c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d068      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5a      	ldr	r2, [pc, #360]	; (8004ebc <HAL_DMA_Init+0x660>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d063      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a59      	ldr	r2, [pc, #356]	; (8004ec0 <HAL_DMA_Init+0x664>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d05e      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a57      	ldr	r2, [pc, #348]	; (8004ec4 <HAL_DMA_Init+0x668>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d059      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_DMA_Init+0x66c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d054      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a54      	ldr	r2, [pc, #336]	; (8004ecc <HAL_DMA_Init+0x670>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d04f      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a53      	ldr	r2, [pc, #332]	; (8004ed0 <HAL_DMA_Init+0x674>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d04a      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a51      	ldr	r2, [pc, #324]	; (8004ed4 <HAL_DMA_Init+0x678>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d045      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a50      	ldr	r2, [pc, #320]	; (8004ed8 <HAL_DMA_Init+0x67c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d040      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a4e      	ldr	r2, [pc, #312]	; (8004edc <HAL_DMA_Init+0x680>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d03b      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4d      	ldr	r2, [pc, #308]	; (8004ee0 <HAL_DMA_Init+0x684>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d036      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a4b      	ldr	r2, [pc, #300]	; (8004ee4 <HAL_DMA_Init+0x688>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d031      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a4a      	ldr	r2, [pc, #296]	; (8004ee8 <HAL_DMA_Init+0x68c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d02c      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a48      	ldr	r2, [pc, #288]	; (8004eec <HAL_DMA_Init+0x690>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d027      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a47      	ldr	r2, [pc, #284]	; (8004ef0 <HAL_DMA_Init+0x694>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d022      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a45      	ldr	r2, [pc, #276]	; (8004ef4 <HAL_DMA_Init+0x698>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01d      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a44      	ldr	r2, [pc, #272]	; (8004ef8 <HAL_DMA_Init+0x69c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a42      	ldr	r2, [pc, #264]	; (8004efc <HAL_DMA_Init+0x6a0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a41      	ldr	r2, [pc, #260]	; (8004f00 <HAL_DMA_Init+0x6a4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <HAL_DMA_Init+0x6a8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a3e      	ldr	r2, [pc, #248]	; (8004f08 <HAL_DMA_Init+0x6ac>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_DMA_Init+0x5c2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <HAL_DMA_Init+0x6b0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d101      	bne.n	8004e22 <HAL_DMA_Init+0x5c6>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_DMA_Init+0x5c8>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d032      	beq.n	8004e8e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 fcdf 	bl	80067ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d102      	bne.n	8004e3c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <HAL_DMA_Init+0x620>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d80c      	bhi.n	8004e7c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fd5c 	bl	8006920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	e008      	b.n	8004e8e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	a7fdabf8 	.word	0xa7fdabf8
 8004eac:	cccccccd 	.word	0xcccccccd
 8004eb0:	40020010 	.word	0x40020010
 8004eb4:	40020028 	.word	0x40020028
 8004eb8:	40020040 	.word	0x40020040
 8004ebc:	40020058 	.word	0x40020058
 8004ec0:	40020070 	.word	0x40020070
 8004ec4:	40020088 	.word	0x40020088
 8004ec8:	400200a0 	.word	0x400200a0
 8004ecc:	400200b8 	.word	0x400200b8
 8004ed0:	40020410 	.word	0x40020410
 8004ed4:	40020428 	.word	0x40020428
 8004ed8:	40020440 	.word	0x40020440
 8004edc:	40020458 	.word	0x40020458
 8004ee0:	40020470 	.word	0x40020470
 8004ee4:	40020488 	.word	0x40020488
 8004ee8:	400204a0 	.word	0x400204a0
 8004eec:	400204b8 	.word	0x400204b8
 8004ef0:	58025408 	.word	0x58025408
 8004ef4:	5802541c 	.word	0x5802541c
 8004ef8:	58025430 	.word	0x58025430
 8004efc:	58025444 	.word	0x58025444
 8004f00:	58025458 	.word	0x58025458
 8004f04:	5802546c 	.word	0x5802546c
 8004f08:	58025480 	.word	0x58025480
 8004f0c:	58025494 	.word	0x58025494

08004f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e226      	b.n	800537a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_Start_IT+0x2a>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e21f      	b.n	800537a <HAL_DMA_Start_IT+0x46a>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	f040 820a 	bne.w	8005364 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a68      	ldr	r2, [pc, #416]	; (8005104 <HAL_DMA_Start_IT+0x1f4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a66      	ldr	r2, [pc, #408]	; (8005108 <HAL_DMA_Start_IT+0x1f8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a65      	ldr	r2, [pc, #404]	; (800510c <HAL_DMA_Start_IT+0x1fc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a63      	ldr	r2, [pc, #396]	; (8005110 <HAL_DMA_Start_IT+0x200>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a62      	ldr	r2, [pc, #392]	; (8005114 <HAL_DMA_Start_IT+0x204>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a60      	ldr	r2, [pc, #384]	; (8005118 <HAL_DMA_Start_IT+0x208>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a5f      	ldr	r2, [pc, #380]	; (800511c <HAL_DMA_Start_IT+0x20c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a5d      	ldr	r2, [pc, #372]	; (8005120 <HAL_DMA_Start_IT+0x210>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a5c      	ldr	r2, [pc, #368]	; (8005124 <HAL_DMA_Start_IT+0x214>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5a      	ldr	r2, [pc, #360]	; (8005128 <HAL_DMA_Start_IT+0x218>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a59      	ldr	r2, [pc, #356]	; (800512c <HAL_DMA_Start_IT+0x21c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a57      	ldr	r2, [pc, #348]	; (8005130 <HAL_DMA_Start_IT+0x220>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a56      	ldr	r2, [pc, #344]	; (8005134 <HAL_DMA_Start_IT+0x224>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a54      	ldr	r2, [pc, #336]	; (8005138 <HAL_DMA_Start_IT+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a53      	ldr	r2, [pc, #332]	; (800513c <HAL_DMA_Start_IT+0x22c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_Start_IT+0xee>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a51      	ldr	r2, [pc, #324]	; (8005140 <HAL_DMA_Start_IT+0x230>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <HAL_DMA_Start_IT+0x100>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e007      	b.n	8005020 <HAL_DMA_Start_IT+0x110>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f001 f906 	bl	8006238 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a34      	ldr	r2, [pc, #208]	; (8005104 <HAL_DMA_Start_IT+0x1f4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d04a      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a33      	ldr	r2, [pc, #204]	; (8005108 <HAL_DMA_Start_IT+0x1f8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d045      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a31      	ldr	r2, [pc, #196]	; (800510c <HAL_DMA_Start_IT+0x1fc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_DMA_Start_IT+0x200>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d03b      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2e      	ldr	r2, [pc, #184]	; (8005114 <HAL_DMA_Start_IT+0x204>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d036      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2d      	ldr	r2, [pc, #180]	; (8005118 <HAL_DMA_Start_IT+0x208>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d031      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2b      	ldr	r2, [pc, #172]	; (800511c <HAL_DMA_Start_IT+0x20c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d02c      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_DMA_Start_IT+0x210>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d027      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a28      	ldr	r2, [pc, #160]	; (8005124 <HAL_DMA_Start_IT+0x214>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d022      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a27      	ldr	r2, [pc, #156]	; (8005128 <HAL_DMA_Start_IT+0x218>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d01d      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a25      	ldr	r2, [pc, #148]	; (800512c <HAL_DMA_Start_IT+0x21c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d018      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_DMA_Start_IT+0x220>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a22      	ldr	r2, [pc, #136]	; (8005134 <HAL_DMA_Start_IT+0x224>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00e      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <HAL_DMA_Start_IT+0x228>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d009      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_DMA_Start_IT+0x22c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_DMA_Start_IT+0x1bc>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_DMA_Start_IT+0x230>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_DMA_Start_IT+0x1c0>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_DMA_Start_IT+0x1c2>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d036      	beq.n	8005144 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 021e 	bic.w	r2, r3, #30
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0216 	orr.w	r2, r2, #22
 80050e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d03e      	beq.n	8005170 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0208 	orr.w	r2, r2, #8
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e035      	b.n	8005170 <HAL_DMA_Start_IT+0x260>
 8005104:	40020010 	.word	0x40020010
 8005108:	40020028 	.word	0x40020028
 800510c:	40020040 	.word	0x40020040
 8005110:	40020058 	.word	0x40020058
 8005114:	40020070 	.word	0x40020070
 8005118:	40020088 	.word	0x40020088
 800511c:	400200a0 	.word	0x400200a0
 8005120:	400200b8 	.word	0x400200b8
 8005124:	40020410 	.word	0x40020410
 8005128:	40020428 	.word	0x40020428
 800512c:	40020440 	.word	0x40020440
 8005130:	40020458 	.word	0x40020458
 8005134:	40020470 	.word	0x40020470
 8005138:	40020488 	.word	0x40020488
 800513c:	400204a0 	.word	0x400204a0
 8005140:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 020e 	bic.w	r2, r3, #14
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 020a 	orr.w	r2, r2, #10
 8005156:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0204 	orr.w	r2, r2, #4
 800516e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a83      	ldr	r2, [pc, #524]	; (8005384 <HAL_DMA_Start_IT+0x474>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d072      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a82      	ldr	r2, [pc, #520]	; (8005388 <HAL_DMA_Start_IT+0x478>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d06d      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a80      	ldr	r2, [pc, #512]	; (800538c <HAL_DMA_Start_IT+0x47c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d068      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a7f      	ldr	r2, [pc, #508]	; (8005390 <HAL_DMA_Start_IT+0x480>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d063      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a7d      	ldr	r2, [pc, #500]	; (8005394 <HAL_DMA_Start_IT+0x484>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d05e      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_DMA_Start_IT+0x488>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d059      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a7a      	ldr	r2, [pc, #488]	; (800539c <HAL_DMA_Start_IT+0x48c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d054      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a79      	ldr	r2, [pc, #484]	; (80053a0 <HAL_DMA_Start_IT+0x490>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04f      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a77      	ldr	r2, [pc, #476]	; (80053a4 <HAL_DMA_Start_IT+0x494>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04a      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a76      	ldr	r2, [pc, #472]	; (80053a8 <HAL_DMA_Start_IT+0x498>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d045      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a74      	ldr	r2, [pc, #464]	; (80053ac <HAL_DMA_Start_IT+0x49c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d040      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a73      	ldr	r2, [pc, #460]	; (80053b0 <HAL_DMA_Start_IT+0x4a0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d03b      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a71      	ldr	r2, [pc, #452]	; (80053b4 <HAL_DMA_Start_IT+0x4a4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d036      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a70      	ldr	r2, [pc, #448]	; (80053b8 <HAL_DMA_Start_IT+0x4a8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6e      	ldr	r2, [pc, #440]	; (80053bc <HAL_DMA_Start_IT+0x4ac>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02c      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a6d      	ldr	r2, [pc, #436]	; (80053c0 <HAL_DMA_Start_IT+0x4b0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a6b      	ldr	r2, [pc, #428]	; (80053c4 <HAL_DMA_Start_IT+0x4b4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6a      	ldr	r2, [pc, #424]	; (80053c8 <HAL_DMA_Start_IT+0x4b8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a68      	ldr	r2, [pc, #416]	; (80053cc <HAL_DMA_Start_IT+0x4bc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a67      	ldr	r2, [pc, #412]	; (80053d0 <HAL_DMA_Start_IT+0x4c0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a65      	ldr	r2, [pc, #404]	; (80053d4 <HAL_DMA_Start_IT+0x4c4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a64      	ldr	r2, [pc, #400]	; (80053d8 <HAL_DMA_Start_IT+0x4c8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a62      	ldr	r2, [pc, #392]	; (80053dc <HAL_DMA_Start_IT+0x4cc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_DMA_Start_IT+0x350>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a61      	ldr	r2, [pc, #388]	; (80053e0 <HAL_DMA_Start_IT+0x4d0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <HAL_DMA_Start_IT+0x354>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_DMA_Start_IT+0x356>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01a      	beq.n	80052a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005286:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a37      	ldr	r2, [pc, #220]	; (8005384 <HAL_DMA_Start_IT+0x474>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d04a      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a36      	ldr	r2, [pc, #216]	; (8005388 <HAL_DMA_Start_IT+0x478>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d045      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a34      	ldr	r2, [pc, #208]	; (800538c <HAL_DMA_Start_IT+0x47c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d040      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a33      	ldr	r2, [pc, #204]	; (8005390 <HAL_DMA_Start_IT+0x480>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d03b      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a31      	ldr	r2, [pc, #196]	; (8005394 <HAL_DMA_Start_IT+0x484>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d036      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a30      	ldr	r2, [pc, #192]	; (8005398 <HAL_DMA_Start_IT+0x488>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d031      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2e      	ldr	r2, [pc, #184]	; (800539c <HAL_DMA_Start_IT+0x48c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d02c      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2d      	ldr	r2, [pc, #180]	; (80053a0 <HAL_DMA_Start_IT+0x490>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d027      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2b      	ldr	r2, [pc, #172]	; (80053a4 <HAL_DMA_Start_IT+0x494>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d022      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2a      	ldr	r2, [pc, #168]	; (80053a8 <HAL_DMA_Start_IT+0x498>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d01d      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a28      	ldr	r2, [pc, #160]	; (80053ac <HAL_DMA_Start_IT+0x49c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d018      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <HAL_DMA_Start_IT+0x4a0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a25      	ldr	r2, [pc, #148]	; (80053b4 <HAL_DMA_Start_IT+0x4a4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00e      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <HAL_DMA_Start_IT+0x4a8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d009      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <HAL_DMA_Start_IT+0x4ac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d004      	beq.n	8005340 <HAL_DMA_Start_IT+0x430>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_DMA_Start_IT+0x4b0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d108      	bne.n	8005352 <HAL_DMA_Start_IT+0x442>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e012      	b.n	8005378 <HAL_DMA_Start_IT+0x468>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e009      	b.n	8005378 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800536a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40020010 	.word	0x40020010
 8005388:	40020028 	.word	0x40020028
 800538c:	40020040 	.word	0x40020040
 8005390:	40020058 	.word	0x40020058
 8005394:	40020070 	.word	0x40020070
 8005398:	40020088 	.word	0x40020088
 800539c:	400200a0 	.word	0x400200a0
 80053a0:	400200b8 	.word	0x400200b8
 80053a4:	40020410 	.word	0x40020410
 80053a8:	40020428 	.word	0x40020428
 80053ac:	40020440 	.word	0x40020440
 80053b0:	40020458 	.word	0x40020458
 80053b4:	40020470 	.word	0x40020470
 80053b8:	40020488 	.word	0x40020488
 80053bc:	400204a0 	.word	0x400204a0
 80053c0:	400204b8 	.word	0x400204b8
 80053c4:	58025408 	.word	0x58025408
 80053c8:	5802541c 	.word	0x5802541c
 80053cc:	58025430 	.word	0x58025430
 80053d0:	58025444 	.word	0x58025444
 80053d4:	58025458 	.word	0x58025458
 80053d8:	5802546c 	.word	0x5802546c
 80053dc:	58025480 	.word	0x58025480
 80053e0:	58025494 	.word	0x58025494

080053e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053f0:	4b67      	ldr	r3, [pc, #412]	; (8005590 <HAL_DMA_IRQHandler+0x1ac>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a67      	ldr	r2, [pc, #412]	; (8005594 <HAL_DMA_IRQHandler+0x1b0>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	0a9b      	lsrs	r3, r3, #10
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5f      	ldr	r2, [pc, #380]	; (8005598 <HAL_DMA_IRQHandler+0x1b4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d04a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a5d      	ldr	r2, [pc, #372]	; (800559c <HAL_DMA_IRQHandler+0x1b8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d045      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a5c      	ldr	r2, [pc, #368]	; (80055a0 <HAL_DMA_IRQHandler+0x1bc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d040      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a5a      	ldr	r2, [pc, #360]	; (80055a4 <HAL_DMA_IRQHandler+0x1c0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d03b      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a59      	ldr	r2, [pc, #356]	; (80055a8 <HAL_DMA_IRQHandler+0x1c4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d036      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a57      	ldr	r2, [pc, #348]	; (80055ac <HAL_DMA_IRQHandler+0x1c8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a56      	ldr	r2, [pc, #344]	; (80055b0 <HAL_DMA_IRQHandler+0x1cc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d02c      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a54      	ldr	r2, [pc, #336]	; (80055b4 <HAL_DMA_IRQHandler+0x1d0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d027      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a53      	ldr	r2, [pc, #332]	; (80055b8 <HAL_DMA_IRQHandler+0x1d4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a51      	ldr	r2, [pc, #324]	; (80055bc <HAL_DMA_IRQHandler+0x1d8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01d      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a50      	ldr	r2, [pc, #320]	; (80055c0 <HAL_DMA_IRQHandler+0x1dc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a4e      	ldr	r2, [pc, #312]	; (80055c4 <HAL_DMA_IRQHandler+0x1e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a4d      	ldr	r2, [pc, #308]	; (80055c8 <HAL_DMA_IRQHandler+0x1e4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a4b      	ldr	r2, [pc, #300]	; (80055cc <HAL_DMA_IRQHandler+0x1e8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4a      	ldr	r2, [pc, #296]	; (80055d0 <HAL_DMA_IRQHandler+0x1ec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xd2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a48      	ldr	r2, [pc, #288]	; (80055d4 <HAL_DMA_IRQHandler+0x1f0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_DMA_IRQHandler+0xd6>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_DMA_IRQHandler+0xd8>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 842b 	beq.w	8005d18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2208      	movs	r2, #8
 80054cc:	409a      	lsls	r2, r3
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80a2 	beq.w	800561c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_DMA_IRQHandler+0x1b4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d04a      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_DMA_IRQHandler+0x1b8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d045      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_DMA_IRQHandler+0x1bc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d040      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <HAL_DMA_IRQHandler+0x1c0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d03b      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a28      	ldr	r2, [pc, #160]	; (80055a8 <HAL_DMA_IRQHandler+0x1c4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d036      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <HAL_DMA_IRQHandler+0x1c8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d031      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_DMA_IRQHandler+0x1cc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02c      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_DMA_IRQHandler+0x1d0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d027      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_DMA_IRQHandler+0x1d4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d022      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a21      	ldr	r2, [pc, #132]	; (80055bc <HAL_DMA_IRQHandler+0x1d8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d01d      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_DMA_IRQHandler+0x1dc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d018      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_DMA_IRQHandler+0x1e0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <HAL_DMA_IRQHandler+0x1e4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00e      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_DMA_IRQHandler+0x1e8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_DMA_IRQHandler+0x1ec>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_DMA_IRQHandler+0x194>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_DMA_IRQHandler+0x1f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d12f      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x1f4>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e02e      	b.n	80055ec <HAL_DMA_IRQHandler+0x208>
 800558e:	bf00      	nop
 8005590:	24000000 	.word	0x24000000
 8005594:	1b4e81b5 	.word	0x1b4e81b5
 8005598:	40020010 	.word	0x40020010
 800559c:	40020028 	.word	0x40020028
 80055a0:	40020040 	.word	0x40020040
 80055a4:	40020058 	.word	0x40020058
 80055a8:	40020070 	.word	0x40020070
 80055ac:	40020088 	.word	0x40020088
 80055b0:	400200a0 	.word	0x400200a0
 80055b4:	400200b8 	.word	0x400200b8
 80055b8:	40020410 	.word	0x40020410
 80055bc:	40020428 	.word	0x40020428
 80055c0:	40020440 	.word	0x40020440
 80055c4:	40020458 	.word	0x40020458
 80055c8:	40020470 	.word	0x40020470
 80055cc:	40020488 	.word	0x40020488
 80055d0:	400204a0 	.word	0x400204a0
 80055d4:	400204b8 	.word	0x400204b8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0204 	bic.w	r2, r2, #4
 80055fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2208      	movs	r2, #8
 800560a:	409a      	lsls	r2, r3
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	fa22 f303 	lsr.w	r3, r2, r3
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d06e      	beq.n	8005710 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a69      	ldr	r2, [pc, #420]	; (80057dc <HAL_DMA_IRQHandler+0x3f8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d04a      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a67      	ldr	r2, [pc, #412]	; (80057e0 <HAL_DMA_IRQHandler+0x3fc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d045      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a66      	ldr	r2, [pc, #408]	; (80057e4 <HAL_DMA_IRQHandler+0x400>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d040      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a64      	ldr	r2, [pc, #400]	; (80057e8 <HAL_DMA_IRQHandler+0x404>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d03b      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a63      	ldr	r2, [pc, #396]	; (80057ec <HAL_DMA_IRQHandler+0x408>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d036      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a61      	ldr	r2, [pc, #388]	; (80057f0 <HAL_DMA_IRQHandler+0x40c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d031      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a60      	ldr	r2, [pc, #384]	; (80057f4 <HAL_DMA_IRQHandler+0x410>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d02c      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a5e      	ldr	r2, [pc, #376]	; (80057f8 <HAL_DMA_IRQHandler+0x414>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d027      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5d      	ldr	r2, [pc, #372]	; (80057fc <HAL_DMA_IRQHandler+0x418>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d022      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5b      	ldr	r2, [pc, #364]	; (8005800 <HAL_DMA_IRQHandler+0x41c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01d      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a5a      	ldr	r2, [pc, #360]	; (8005804 <HAL_DMA_IRQHandler+0x420>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d018      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a58      	ldr	r2, [pc, #352]	; (8005808 <HAL_DMA_IRQHandler+0x424>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a57      	ldr	r2, [pc, #348]	; (800580c <HAL_DMA_IRQHandler+0x428>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00e      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a55      	ldr	r2, [pc, #340]	; (8005810 <HAL_DMA_IRQHandler+0x42c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a54      	ldr	r2, [pc, #336]	; (8005814 <HAL_DMA_IRQHandler+0x430>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x2ee>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a52      	ldr	r2, [pc, #328]	; (8005818 <HAL_DMA_IRQHandler+0x434>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10a      	bne.n	80056e8 <HAL_DMA_IRQHandler+0x304>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e003      	b.n	80056f0 <HAL_DMA_IRQHandler+0x30c>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2300      	movs	r3, #0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2201      	movs	r2, #1
 80056fe:	409a      	lsls	r2, r3
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005708:	f043 0202 	orr.w	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	2204      	movs	r2, #4
 800571a:	409a      	lsls	r2, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 808f 	beq.w	8005844 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <HAL_DMA_IRQHandler+0x3f8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d04a      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2a      	ldr	r2, [pc, #168]	; (80057e0 <HAL_DMA_IRQHandler+0x3fc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d045      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a29      	ldr	r2, [pc, #164]	; (80057e4 <HAL_DMA_IRQHandler+0x400>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d040      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_DMA_IRQHandler+0x404>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d03b      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a26      	ldr	r2, [pc, #152]	; (80057ec <HAL_DMA_IRQHandler+0x408>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d036      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <HAL_DMA_IRQHandler+0x40c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d031      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <HAL_DMA_IRQHandler+0x410>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d02c      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a21      	ldr	r2, [pc, #132]	; (80057f8 <HAL_DMA_IRQHandler+0x414>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d027      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <HAL_DMA_IRQHandler+0x418>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d022      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_DMA_IRQHandler+0x41c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_DMA_IRQHandler+0x420>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_DMA_IRQHandler+0x424>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1a      	ldr	r2, [pc, #104]	; (800580c <HAL_DMA_IRQHandler+0x428>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_DMA_IRQHandler+0x42c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a17      	ldr	r2, [pc, #92]	; (8005814 <HAL_DMA_IRQHandler+0x430>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x3e2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a15      	ldr	r2, [pc, #84]	; (8005818 <HAL_DMA_IRQHandler+0x434>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d12a      	bne.n	800581c <HAL_DMA_IRQHandler+0x438>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	e023      	b.n	8005824 <HAL_DMA_IRQHandler+0x440>
 80057dc:	40020010 	.word	0x40020010
 80057e0:	40020028 	.word	0x40020028
 80057e4:	40020040 	.word	0x40020040
 80057e8:	40020058 	.word	0x40020058
 80057ec:	40020070 	.word	0x40020070
 80057f0:	40020088 	.word	0x40020088
 80057f4:	400200a0 	.word	0x400200a0
 80057f8:	400200b8 	.word	0x400200b8
 80057fc:	40020410 	.word	0x40020410
 8005800:	40020428 	.word	0x40020428
 8005804:	40020440 	.word	0x40020440
 8005808:	40020458 	.word	0x40020458
 800580c:	40020470 	.word	0x40020470
 8005810:	40020488 	.word	0x40020488
 8005814:	400204a0 	.word	0x400204a0
 8005818:	400204b8 	.word	0x400204b8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2204      	movs	r2, #4
 8005832:	409a      	lsls	r2, r3
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	f043 0204 	orr.w	r2, r3, #4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2210      	movs	r2, #16
 800584e:	409a      	lsls	r2, r3
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80a6 	beq.w	80059a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a85      	ldr	r2, [pc, #532]	; (8005a74 <HAL_DMA_IRQHandler+0x690>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d04a      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a83      	ldr	r2, [pc, #524]	; (8005a78 <HAL_DMA_IRQHandler+0x694>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d045      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a82      	ldr	r2, [pc, #520]	; (8005a7c <HAL_DMA_IRQHandler+0x698>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d040      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a80      	ldr	r2, [pc, #512]	; (8005a80 <HAL_DMA_IRQHandler+0x69c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d03b      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7f      	ldr	r2, [pc, #508]	; (8005a84 <HAL_DMA_IRQHandler+0x6a0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d036      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7d      	ldr	r2, [pc, #500]	; (8005a88 <HAL_DMA_IRQHandler+0x6a4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d031      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7c      	ldr	r2, [pc, #496]	; (8005a8c <HAL_DMA_IRQHandler+0x6a8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d02c      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7a      	ldr	r2, [pc, #488]	; (8005a90 <HAL_DMA_IRQHandler+0x6ac>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d027      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a79      	ldr	r2, [pc, #484]	; (8005a94 <HAL_DMA_IRQHandler+0x6b0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d022      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a77      	ldr	r2, [pc, #476]	; (8005a98 <HAL_DMA_IRQHandler+0x6b4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01d      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a76      	ldr	r2, [pc, #472]	; (8005a9c <HAL_DMA_IRQHandler+0x6b8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d018      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_DMA_IRQHandler+0x6bc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a73      	ldr	r2, [pc, #460]	; (8005aa4 <HAL_DMA_IRQHandler+0x6c0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a71      	ldr	r2, [pc, #452]	; (8005aa8 <HAL_DMA_IRQHandler+0x6c4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a70      	ldr	r2, [pc, #448]	; (8005aac <HAL_DMA_IRQHandler+0x6c8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_DMA_IRQHandler+0x516>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6e      	ldr	r2, [pc, #440]	; (8005ab0 <HAL_DMA_IRQHandler+0x6cc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10a      	bne.n	8005910 <HAL_DMA_IRQHandler+0x52c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	b2db      	uxtb	r3, r3
 800590e:	e009      	b.n	8005924 <HAL_DMA_IRQHandler+0x540>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d03e      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2210      	movs	r2, #16
 8005932:	409a      	lsls	r2, r3
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d108      	bne.n	8005966 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d024      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	e01f      	b.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01b      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
 8005976:	e016      	b.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d107      	bne.n	8005996 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0208 	bic.w	r2, r2, #8
 8005994:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2220      	movs	r2, #32
 80059b0:	409a      	lsls	r2, r3
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8110 	beq.w	8005bdc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <HAL_DMA_IRQHandler+0x690>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d04a      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <HAL_DMA_IRQHandler+0x694>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d045      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <HAL_DMA_IRQHandler+0x698>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d040      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <HAL_DMA_IRQHandler+0x69c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d03b      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a26      	ldr	r2, [pc, #152]	; (8005a84 <HAL_DMA_IRQHandler+0x6a0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d036      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_DMA_IRQHandler+0x6a4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d031      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <HAL_DMA_IRQHandler+0x6a8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d02c      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_DMA_IRQHandler+0x6ac>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d027      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a20      	ldr	r2, [pc, #128]	; (8005a94 <HAL_DMA_IRQHandler+0x6b0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d022      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_DMA_IRQHandler+0x6b4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01d      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_DMA_IRQHandler+0x6b8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d018      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d013      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00e      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d009      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_DMA_IRQHandler+0x6c8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x678>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a16      	ldr	r2, [pc, #88]	; (8005ab0 <HAL_DMA_IRQHandler+0x6cc>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d12b      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0x6d0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0310 	and.w	r3, r3, #16
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bf14      	ite	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	2300      	moveq	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e02a      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x6e4>
 8005a72:	bf00      	nop
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8087 	beq.w	8005bdc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	409a      	lsls	r2, r3
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d139      	bne.n	8005b5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0216 	bic.w	r2, r2, #22
 8005af8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <HAL_DMA_IRQHandler+0x736>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0208 	bic.w	r2, r2, #8
 8005b28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	223f      	movs	r2, #63	; 0x3f
 8005b34:	409a      	lsls	r2, r3
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 834a 	beq.w	80061e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
          }
          return;
 8005b5c:	e344      	b.n	80061e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d108      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d02c      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
 8005b8a:	e027      	b.n	8005bdc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d023      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
 8005b9c:	e01e      	b.n	8005bdc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0210 	bic.w	r2, r2, #16
 8005bba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8306 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8088 	beq.w	8005d04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a7a      	ldr	r2, [pc, #488]	; (8005dec <HAL_DMA_IRQHandler+0xa08>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d04a      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a79      	ldr	r2, [pc, #484]	; (8005df0 <HAL_DMA_IRQHandler+0xa0c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d045      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a77      	ldr	r2, [pc, #476]	; (8005df4 <HAL_DMA_IRQHandler+0xa10>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d040      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a76      	ldr	r2, [pc, #472]	; (8005df8 <HAL_DMA_IRQHandler+0xa14>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d03b      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a74      	ldr	r2, [pc, #464]	; (8005dfc <HAL_DMA_IRQHandler+0xa18>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d036      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a73      	ldr	r2, [pc, #460]	; (8005e00 <HAL_DMA_IRQHandler+0xa1c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d031      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a71      	ldr	r2, [pc, #452]	; (8005e04 <HAL_DMA_IRQHandler+0xa20>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02c      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a70      	ldr	r2, [pc, #448]	; (8005e08 <HAL_DMA_IRQHandler+0xa24>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d027      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a6e      	ldr	r2, [pc, #440]	; (8005e0c <HAL_DMA_IRQHandler+0xa28>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d022      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6d      	ldr	r2, [pc, #436]	; (8005e10 <HAL_DMA_IRQHandler+0xa2c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d01d      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <HAL_DMA_IRQHandler+0xa30>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d018      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6a      	ldr	r2, [pc, #424]	; (8005e18 <HAL_DMA_IRQHandler+0xa34>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a68      	ldr	r2, [pc, #416]	; (8005e1c <HAL_DMA_IRQHandler+0xa38>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00e      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a67      	ldr	r2, [pc, #412]	; (8005e20 <HAL_DMA_IRQHandler+0xa3c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d009      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <HAL_DMA_IRQHandler+0xa40>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d004      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x8b8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a64      	ldr	r2, [pc, #400]	; (8005e28 <HAL_DMA_IRQHandler+0xa44>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <HAL_DMA_IRQHandler+0x8ca>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e007      	b.n	8005cbe <HAL_DMA_IRQHandler+0x8da>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d307      	bcc.n	8005cda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f2      	bne.n	8005cbe <HAL_DMA_IRQHandler+0x8da>
 8005cd8:	e000      	b.n	8005cdc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2203      	movs	r2, #3
 8005cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cf2:	e003      	b.n	8005cfc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8272 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
 8005d16:	e26c      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a43      	ldr	r2, [pc, #268]	; (8005e2c <HAL_DMA_IRQHandler+0xa48>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d022      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a42      	ldr	r2, [pc, #264]	; (8005e30 <HAL_DMA_IRQHandler+0xa4c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d01d      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <HAL_DMA_IRQHandler+0xa50>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d018      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3f      	ldr	r2, [pc, #252]	; (8005e38 <HAL_DMA_IRQHandler+0xa54>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d013      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a3d      	ldr	r2, [pc, #244]	; (8005e3c <HAL_DMA_IRQHandler+0xa58>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00e      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3c      	ldr	r2, [pc, #240]	; (8005e40 <HAL_DMA_IRQHandler+0xa5c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d009      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <HAL_DMA_IRQHandler+0xa60>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x984>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a39      	ldr	r2, [pc, #228]	; (8005e48 <HAL_DMA_IRQHandler+0xa64>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d101      	bne.n	8005d6c <HAL_DMA_IRQHandler+0x988>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <HAL_DMA_IRQHandler+0x98a>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 823f 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	2204      	movs	r2, #4
 8005d86:	409a      	lsls	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80cd 	beq.w	8005f2c <HAL_DMA_IRQHandler+0xb48>
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80c7 	beq.w	8005f2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2204      	movs	r2, #4
 8005da8:	409a      	lsls	r2, r3
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d049      	beq.n	8005e4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8210 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd4:	e20a      	b.n	80061ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8206 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005de8:	e200      	b.n	80061ec <HAL_DMA_IRQHandler+0xe08>
 8005dea:	bf00      	nop
 8005dec:	40020010 	.word	0x40020010
 8005df0:	40020028 	.word	0x40020028
 8005df4:	40020040 	.word	0x40020040
 8005df8:	40020058 	.word	0x40020058
 8005dfc:	40020070 	.word	0x40020070
 8005e00:	40020088 	.word	0x40020088
 8005e04:	400200a0 	.word	0x400200a0
 8005e08:	400200b8 	.word	0x400200b8
 8005e0c:	40020410 	.word	0x40020410
 8005e10:	40020428 	.word	0x40020428
 8005e14:	40020440 	.word	0x40020440
 8005e18:	40020458 	.word	0x40020458
 8005e1c:	40020470 	.word	0x40020470
 8005e20:	40020488 	.word	0x40020488
 8005e24:	400204a0 	.word	0x400204a0
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	58025408 	.word	0x58025408
 8005e30:	5802541c 	.word	0x5802541c
 8005e34:	58025430 	.word	0x58025430
 8005e38:	58025444 	.word	0x58025444
 8005e3c:	58025458 	.word	0x58025458
 8005e40:	5802546c 	.word	0x5802546c
 8005e44:	58025480 	.word	0x58025480
 8005e48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d160      	bne.n	8005f18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7f      	ldr	r2, [pc, #508]	; (8006058 <HAL_DMA_IRQHandler+0xc74>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d04a      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7d      	ldr	r2, [pc, #500]	; (800605c <HAL_DMA_IRQHandler+0xc78>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d045      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a7c      	ldr	r2, [pc, #496]	; (8006060 <HAL_DMA_IRQHandler+0xc7c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d040      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a7a      	ldr	r2, [pc, #488]	; (8006064 <HAL_DMA_IRQHandler+0xc80>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d03b      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a79      	ldr	r2, [pc, #484]	; (8006068 <HAL_DMA_IRQHandler+0xc84>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d036      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a77      	ldr	r2, [pc, #476]	; (800606c <HAL_DMA_IRQHandler+0xc88>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d031      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a76      	ldr	r2, [pc, #472]	; (8006070 <HAL_DMA_IRQHandler+0xc8c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d02c      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a74      	ldr	r2, [pc, #464]	; (8006074 <HAL_DMA_IRQHandler+0xc90>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d027      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	; (8006078 <HAL_DMA_IRQHandler+0xc94>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d022      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a71      	ldr	r2, [pc, #452]	; (800607c <HAL_DMA_IRQHandler+0xc98>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01d      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a70      	ldr	r2, [pc, #448]	; (8006080 <HAL_DMA_IRQHandler+0xc9c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d018      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	; (8006084 <HAL_DMA_IRQHandler+0xca0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6d      	ldr	r2, [pc, #436]	; (8006088 <HAL_DMA_IRQHandler+0xca4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	; (800608c <HAL_DMA_IRQHandler+0xca8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d009      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6a      	ldr	r2, [pc, #424]	; (8006090 <HAL_DMA_IRQHandler+0xcac>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_IRQHandler+0xb12>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a68      	ldr	r2, [pc, #416]	; (8006094 <HAL_DMA_IRQHandler+0xcb0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <HAL_DMA_IRQHandler+0xb24>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0208 	bic.w	r2, r2, #8
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e007      	b.n	8005f18 <HAL_DMA_IRQHandler+0xb34>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8165 	beq.w	80061ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2a:	e15f      	b.n	80061ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2202      	movs	r2, #2
 8005f36:	409a      	lsls	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80c5 	beq.w	80060cc <HAL_DMA_IRQHandler+0xce8>
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80bf 	beq.w	80060cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2202      	movs	r2, #2
 8005f58:	409a      	lsls	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d018      	beq.n	8005f9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 813a 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f84:	e134      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8130 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f98:	e12a      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8089 	bne.w	80060b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2b      	ldr	r2, [pc, #172]	; (8006058 <HAL_DMA_IRQHandler+0xc74>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d04a      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <HAL_DMA_IRQHandler+0xc78>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d045      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a28      	ldr	r2, [pc, #160]	; (8006060 <HAL_DMA_IRQHandler+0xc7c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d040      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a26      	ldr	r2, [pc, #152]	; (8006064 <HAL_DMA_IRQHandler+0xc80>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d03b      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a25      	ldr	r2, [pc, #148]	; (8006068 <HAL_DMA_IRQHandler+0xc84>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d036      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a23      	ldr	r2, [pc, #140]	; (800606c <HAL_DMA_IRQHandler+0xc88>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d031      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_DMA_IRQHandler+0xc8c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d02c      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a20      	ldr	r2, [pc, #128]	; (8006074 <HAL_DMA_IRQHandler+0xc90>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d027      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_DMA_IRQHandler+0xc94>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1d      	ldr	r2, [pc, #116]	; (800607c <HAL_DMA_IRQHandler+0xc98>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_DMA_IRQHandler+0xc9c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1a      	ldr	r2, [pc, #104]	; (8006084 <HAL_DMA_IRQHandler+0xca0>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_DMA_IRQHandler+0xca4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <HAL_DMA_IRQHandler+0xca8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a16      	ldr	r2, [pc, #88]	; (8006090 <HAL_DMA_IRQHandler+0xcac>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_DMA_IRQHandler+0xc62>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <HAL_DMA_IRQHandler+0xcb0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d128      	bne.n	8006098 <HAL_DMA_IRQHandler+0xcb4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0214 	bic.w	r2, r2, #20
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e027      	b.n	80060a8 <HAL_DMA_IRQHandler+0xcc4>
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 020a 	bic.w	r2, r2, #10
 80060a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8097 	beq.w	80061f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ca:	e091      	b.n	80061f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2208      	movs	r2, #8
 80060d6:	409a      	lsls	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8088 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe0e>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8082 	beq.w	80061f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a41      	ldr	r2, [pc, #260]	; (80061f8 <HAL_DMA_IRQHandler+0xe14>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	; (80061fc <HAL_DMA_IRQHandler+0xe18>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3e      	ldr	r2, [pc, #248]	; (8006200 <HAL_DMA_IRQHandler+0xe1c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3c      	ldr	r2, [pc, #240]	; (8006204 <HAL_DMA_IRQHandler+0xe20>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3b      	ldr	r2, [pc, #236]	; (8006208 <HAL_DMA_IRQHandler+0xe24>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a39      	ldr	r2, [pc, #228]	; (800620c <HAL_DMA_IRQHandler+0xe28>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a38      	ldr	r2, [pc, #224]	; (8006210 <HAL_DMA_IRQHandler+0xe2c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a36      	ldr	r2, [pc, #216]	; (8006214 <HAL_DMA_IRQHandler+0xe30>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a35      	ldr	r2, [pc, #212]	; (8006218 <HAL_DMA_IRQHandler+0xe34>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a33      	ldr	r2, [pc, #204]	; (800621c <HAL_DMA_IRQHandler+0xe38>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a32      	ldr	r2, [pc, #200]	; (8006220 <HAL_DMA_IRQHandler+0xe3c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a30      	ldr	r2, [pc, #192]	; (8006224 <HAL_DMA_IRQHandler+0xe40>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2f      	ldr	r2, [pc, #188]	; (8006228 <HAL_DMA_IRQHandler+0xe44>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2d      	ldr	r2, [pc, #180]	; (800622c <HAL_DMA_IRQHandler+0xe48>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <HAL_DMA_IRQHandler+0xe4c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_IRQHandler+0xdaa>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <HAL_DMA_IRQHandler+0xe50>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d108      	bne.n	80061a0 <HAL_DMA_IRQHandler+0xdbc>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 021c 	bic.w	r2, r2, #28
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e007      	b.n	80061b0 <HAL_DMA_IRQHandler+0xdcc>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 020e 	bic.w	r2, r2, #14
 80061ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	2201      	movs	r2, #1
 80061ba:	409a      	lsls	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
 80061e6:	e004      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061f2:	3728      	adds	r7, #40	; 0x28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40020010 	.word	0x40020010
 80061fc:	40020028 	.word	0x40020028
 8006200:	40020040 	.word	0x40020040
 8006204:	40020058 	.word	0x40020058
 8006208:	40020070 	.word	0x40020070
 800620c:	40020088 	.word	0x40020088
 8006210:	400200a0 	.word	0x400200a0
 8006214:	400200b8 	.word	0x400200b8
 8006218:	40020410 	.word	0x40020410
 800621c:	40020428 	.word	0x40020428
 8006220:	40020440 	.word	0x40020440
 8006224:	40020458 	.word	0x40020458
 8006228:	40020470 	.word	0x40020470
 800622c:	40020488 	.word	0x40020488
 8006230:	400204a0 	.word	0x400204a0
 8006234:	400204b8 	.word	0x400204b8

08006238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006250:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a7f      	ldr	r2, [pc, #508]	; (8006454 <DMA_SetConfig+0x21c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d072      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a7d      	ldr	r2, [pc, #500]	; (8006458 <DMA_SetConfig+0x220>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d06d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a7c      	ldr	r2, [pc, #496]	; (800645c <DMA_SetConfig+0x224>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d068      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a7a      	ldr	r2, [pc, #488]	; (8006460 <DMA_SetConfig+0x228>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d063      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a79      	ldr	r2, [pc, #484]	; (8006464 <DMA_SetConfig+0x22c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d05e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a77      	ldr	r2, [pc, #476]	; (8006468 <DMA_SetConfig+0x230>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d059      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a76      	ldr	r2, [pc, #472]	; (800646c <DMA_SetConfig+0x234>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d054      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a74      	ldr	r2, [pc, #464]	; (8006470 <DMA_SetConfig+0x238>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d04f      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a73      	ldr	r2, [pc, #460]	; (8006474 <DMA_SetConfig+0x23c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a71      	ldr	r2, [pc, #452]	; (8006478 <DMA_SetConfig+0x240>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a70      	ldr	r2, [pc, #448]	; (800647c <DMA_SetConfig+0x244>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a6e      	ldr	r2, [pc, #440]	; (8006480 <DMA_SetConfig+0x248>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a6d      	ldr	r2, [pc, #436]	; (8006484 <DMA_SetConfig+0x24c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6b      	ldr	r2, [pc, #428]	; (8006488 <DMA_SetConfig+0x250>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6a      	ldr	r2, [pc, #424]	; (800648c <DMA_SetConfig+0x254>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a68      	ldr	r2, [pc, #416]	; (8006490 <DMA_SetConfig+0x258>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a67      	ldr	r2, [pc, #412]	; (8006494 <DMA_SetConfig+0x25c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <DMA_SetConfig+0x10a>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a65      	ldr	r2, [pc, #404]	; (8006498 <DMA_SetConfig+0x260>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a64      	ldr	r2, [pc, #400]	; (800649c <DMA_SetConfig+0x264>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a62      	ldr	r2, [pc, #392]	; (80064a0 <DMA_SetConfig+0x268>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a61      	ldr	r2, [pc, #388]	; (80064a4 <DMA_SetConfig+0x26c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a5f      	ldr	r2, [pc, #380]	; (80064a8 <DMA_SetConfig+0x270>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <DMA_SetConfig+0x10a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a5e      	ldr	r2, [pc, #376]	; (80064ac <DMA_SetConfig+0x274>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <DMA_SetConfig+0x10a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a5c      	ldr	r2, [pc, #368]	; (80064b0 <DMA_SetConfig+0x278>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <DMA_SetConfig+0x10e>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <DMA_SetConfig+0x110>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006354:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006366:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a39      	ldr	r2, [pc, #228]	; (8006454 <DMA_SetConfig+0x21c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d04a      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a38      	ldr	r2, [pc, #224]	; (8006458 <DMA_SetConfig+0x220>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d045      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a36      	ldr	r2, [pc, #216]	; (800645c <DMA_SetConfig+0x224>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d040      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a35      	ldr	r2, [pc, #212]	; (8006460 <DMA_SetConfig+0x228>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d03b      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a33      	ldr	r2, [pc, #204]	; (8006464 <DMA_SetConfig+0x22c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d036      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a32      	ldr	r2, [pc, #200]	; (8006468 <DMA_SetConfig+0x230>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d031      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a30      	ldr	r2, [pc, #192]	; (800646c <DMA_SetConfig+0x234>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02c      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	; (8006470 <DMA_SetConfig+0x238>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d027      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	; (8006474 <DMA_SetConfig+0x23c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d022      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2c      	ldr	r2, [pc, #176]	; (8006478 <DMA_SetConfig+0x240>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d01d      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2a      	ldr	r2, [pc, #168]	; (800647c <DMA_SetConfig+0x244>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d018      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a29      	ldr	r2, [pc, #164]	; (8006480 <DMA_SetConfig+0x248>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a27      	ldr	r2, [pc, #156]	; (8006484 <DMA_SetConfig+0x24c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00e      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <DMA_SetConfig+0x250>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d009      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a24      	ldr	r2, [pc, #144]	; (800648c <DMA_SetConfig+0x254>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d004      	beq.n	8006408 <DMA_SetConfig+0x1d0>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a23      	ldr	r2, [pc, #140]	; (8006490 <DMA_SetConfig+0x258>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d101      	bne.n	800640c <DMA_SetConfig+0x1d4>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <DMA_SetConfig+0x1d6>
 800640c:	2300      	movs	r3, #0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d059      	beq.n	80064c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	223f      	movs	r2, #63	; 0x3f
 800641c:	409a      	lsls	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006430:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	d138      	bne.n	80064b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006452:	e086      	b.n	8006562 <DMA_SetConfig+0x32a>
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	58025408 	.word	0x58025408
 8006498:	5802541c 	.word	0x5802541c
 800649c:	58025430 	.word	0x58025430
 80064a0:	58025444 	.word	0x58025444
 80064a4:	58025458 	.word	0x58025458
 80064a8:	5802546c 	.word	0x5802546c
 80064ac:	58025480 	.word	0x58025480
 80064b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
}
 80064c4:	e04d      	b.n	8006562 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a29      	ldr	r2, [pc, #164]	; (8006570 <DMA_SetConfig+0x338>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <DMA_SetConfig+0x33c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <DMA_SetConfig+0x340>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a24      	ldr	r2, [pc, #144]	; (800657c <DMA_SetConfig+0x344>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a23      	ldr	r2, [pc, #140]	; (8006580 <DMA_SetConfig+0x348>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <DMA_SetConfig+0x2de>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a21      	ldr	r2, [pc, #132]	; (8006584 <DMA_SetConfig+0x34c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <DMA_SetConfig+0x2de>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a20      	ldr	r2, [pc, #128]	; (8006588 <DMA_SetConfig+0x350>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <DMA_SetConfig+0x2de>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <DMA_SetConfig+0x354>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <DMA_SetConfig+0x2e2>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <DMA_SetConfig+0x2e4>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d108      	bne.n	8006552 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	e007      	b.n	8006562 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	58025408 	.word	0x58025408
 8006574:	5802541c 	.word	0x5802541c
 8006578:	58025430 	.word	0x58025430
 800657c:	58025444 	.word	0x58025444
 8006580:	58025458 	.word	0x58025458
 8006584:	5802546c 	.word	0x5802546c
 8006588:	58025480 	.word	0x58025480
 800658c:	58025494 	.word	0x58025494

08006590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a42      	ldr	r2, [pc, #264]	; (80066a8 <DMA_CalcBaseAndBitshift+0x118>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a41      	ldr	r2, [pc, #260]	; (80066ac <DMA_CalcBaseAndBitshift+0x11c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d045      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3f      	ldr	r2, [pc, #252]	; (80066b0 <DMA_CalcBaseAndBitshift+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d040      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3e      	ldr	r2, [pc, #248]	; (80066b4 <DMA_CalcBaseAndBitshift+0x124>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d03b      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3c      	ldr	r2, [pc, #240]	; (80066b8 <DMA_CalcBaseAndBitshift+0x128>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d036      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a3b      	ldr	r2, [pc, #236]	; (80066bc <DMA_CalcBaseAndBitshift+0x12c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d031      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a39      	ldr	r2, [pc, #228]	; (80066c0 <DMA_CalcBaseAndBitshift+0x130>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d02c      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a38      	ldr	r2, [pc, #224]	; (80066c4 <DMA_CalcBaseAndBitshift+0x134>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d027      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a36      	ldr	r2, [pc, #216]	; (80066c8 <DMA_CalcBaseAndBitshift+0x138>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d022      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a35      	ldr	r2, [pc, #212]	; (80066cc <DMA_CalcBaseAndBitshift+0x13c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d01d      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <DMA_CalcBaseAndBitshift+0x140>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d018      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a32      	ldr	r2, [pc, #200]	; (80066d4 <DMA_CalcBaseAndBitshift+0x144>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d013      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <DMA_CalcBaseAndBitshift+0x148>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00e      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <DMA_CalcBaseAndBitshift+0x14c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d009      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <DMA_CalcBaseAndBitshift+0x150>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <DMA_CalcBaseAndBitshift+0x154>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <DMA_CalcBaseAndBitshift+0xac>
 8006638:	2301      	movs	r3, #1
 800663a:	e000      	b.n	800663e <DMA_CalcBaseAndBitshift+0xae>
 800663c:	2300      	movs	r3, #0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d024      	beq.n	800668c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	3b10      	subs	r3, #16
 800664a:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <DMA_CalcBaseAndBitshift+0x158>)
 800664c:	fba2 2303 	umull	r2, r3, r2, r3
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	4a24      	ldr	r2, [pc, #144]	; (80066ec <DMA_CalcBaseAndBitshift+0x15c>)
 800665c:	5cd3      	ldrb	r3, [r2, r3]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d908      	bls.n	800667c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <DMA_CalcBaseAndBitshift+0x160>)
 8006672:	4013      	ands	r3, r2
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	659a      	str	r2, [r3, #88]	; 0x58
 800667a:	e00d      	b.n	8006698 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <DMA_CalcBaseAndBitshift+0x160>)
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6593      	str	r3, [r2, #88]	; 0x58
 800668a:	e005      	b.n	8006698 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40020010 	.word	0x40020010
 80066ac:	40020028 	.word	0x40020028
 80066b0:	40020040 	.word	0x40020040
 80066b4:	40020058 	.word	0x40020058
 80066b8:	40020070 	.word	0x40020070
 80066bc:	40020088 	.word	0x40020088
 80066c0:	400200a0 	.word	0x400200a0
 80066c4:	400200b8 	.word	0x400200b8
 80066c8:	40020410 	.word	0x40020410
 80066cc:	40020428 	.word	0x40020428
 80066d0:	40020440 	.word	0x40020440
 80066d4:	40020458 	.word	0x40020458
 80066d8:	40020470 	.word	0x40020470
 80066dc:	40020488 	.word	0x40020488
 80066e0:	400204a0 	.word	0x400204a0
 80066e4:	400204b8 	.word	0x400204b8
 80066e8:	aaaaaaab 	.word	0xaaaaaaab
 80066ec:	080146f4 	.word	0x080146f4
 80066f0:	fffffc00 	.word	0xfffffc00

080066f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d120      	bne.n	800674a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	2b03      	cmp	r3, #3
 800670e:	d858      	bhi.n	80067c2 <DMA_CheckFifoParam+0xce>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <DMA_CheckFifoParam+0x24>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	08006729 	.word	0x08006729
 800671c:	0800673b 	.word	0x0800673b
 8006720:	08006729 	.word	0x08006729
 8006724:	080067c3 	.word	0x080067c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d048      	beq.n	80067c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006738:	e045      	b.n	80067c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006742:	d142      	bne.n	80067ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006748:	e03f      	b.n	80067ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006752:	d123      	bne.n	800679c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	2b03      	cmp	r3, #3
 800675a:	d838      	bhi.n	80067ce <DMA_CheckFifoParam+0xda>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <DMA_CheckFifoParam+0x70>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	0800677b 	.word	0x0800677b
 800676c:	08006775 	.word	0x08006775
 8006770:	0800678d 	.word	0x0800678d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
        break;
 8006778:	e030      	b.n	80067dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d025      	beq.n	80067d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800678a:	e022      	b.n	80067d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006794:	d11f      	bne.n	80067d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800679a:	e01c      	b.n	80067d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d902      	bls.n	80067aa <DMA_CheckFifoParam+0xb6>
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d003      	beq.n	80067b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067a8:	e018      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	73fb      	strb	r3, [r7, #15]
        break;
 80067ae:	e015      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00e      	beq.n	80067da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    break;
 80067c0:	e00b      	b.n	80067da <DMA_CheckFifoParam+0xe6>
        break;
 80067c2:	bf00      	nop
 80067c4:	e00a      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e008      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e006      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
        break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <DMA_CheckFifoParam+0xe8>
    break;
 80067da:	bf00      	nop
    }
  }

  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop

080067ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a38      	ldr	r2, [pc, #224]	; (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a36      	ldr	r2, [pc, #216]	; (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01d      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a35      	ldr	r2, [pc, #212]	; (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d018      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a33      	ldr	r2, [pc, #204]	; (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d013      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00e      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a30      	ldr	r2, [pc, #192]	; (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d009      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d004      	beq.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2d      	ldr	r2, [pc, #180]	; (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01a      	beq.n	800688a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	3b08      	subs	r3, #8
 800685c:	4a28      	ldr	r2, [pc, #160]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	091b      	lsrs	r3, r3, #4
 8006864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4b26      	ldr	r3, [pc, #152]	; (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a24      	ldr	r2, [pc, #144]	; (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006878:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006888:	e024      	b.n	80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	3b10      	subs	r3, #16
 8006892:	4a1e      	ldr	r2, [pc, #120]	; (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006894:	fba2 2303 	umull	r2, r3, r2, r3
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d806      	bhi.n	80068b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d902      	bls.n	80068b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3308      	adds	r3, #8
 80068b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4b18      	ldr	r3, [pc, #96]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2201      	movs	r2, #1
 80068ce:	409a      	lsls	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	58025408 	.word	0x58025408
 80068e4:	5802541c 	.word	0x5802541c
 80068e8:	58025430 	.word	0x58025430
 80068ec:	58025444 	.word	0x58025444
 80068f0:	58025458 	.word	0x58025458
 80068f4:	5802546c 	.word	0x5802546c
 80068f8:	58025480 	.word	0x58025480
 80068fc:	58025494 	.word	0x58025494
 8006900:	cccccccd 	.word	0xcccccccd
 8006904:	16009600 	.word	0x16009600
 8006908:	58025880 	.word	0x58025880
 800690c:	aaaaaaab 	.word	0xaaaaaaab
 8006910:	400204b8 	.word	0x400204b8
 8006914:	4002040f 	.word	0x4002040f
 8006918:	10008200 	.word	0x10008200
 800691c:	40020880 	.word	0x40020880

08006920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d04a      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d847      	bhi.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a25      	ldr	r2, [pc, #148]	; (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d022      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a24      	ldr	r2, [pc, #144]	; (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01d      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d018      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d013      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00e      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d009      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d004      	beq.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1b      	ldr	r2, [pc, #108]	; (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d101      	bne.n	8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a15      	ldr	r2, [pc, #84]	; (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069a8:	671a      	str	r2, [r3, #112]	; 0x70
 80069aa:	e009      	b.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	58025408 	.word	0x58025408
 80069dc:	5802541c 	.word	0x5802541c
 80069e0:	58025430 	.word	0x58025430
 80069e4:	58025444 	.word	0x58025444
 80069e8:	58025458 	.word	0x58025458
 80069ec:	5802546c 	.word	0x5802546c
 80069f0:	58025480 	.word	0x58025480
 80069f4:	58025494 	.word	0x58025494
 80069f8:	1600963f 	.word	0x1600963f
 80069fc:	58025940 	.word	0x58025940
 8006a00:	1000823f 	.word	0x1000823f
 8006a04:	40020940 	.word	0x40020940

08006a08 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b098      	sub	sp, #96	; 0x60
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a10:	4a84      	ldr	r2, [pc, #528]	; (8006c24 <HAL_FDCAN_Init+0x21c>)
 8006a12:	f107 030c 	add.w	r3, r7, #12
 8006a16:	4611      	mov	r1, r2
 8006a18:	224c      	movs	r2, #76	; 0x4c
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f00d f80e 	bl	8013a3c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e1c6      	b.n	8006db8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a7e      	ldr	r2, [pc, #504]	; (8006c28 <HAL_FDCAN_Init+0x220>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d106      	bne.n	8006a42 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d106      	bne.n	8006a5c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7fb fbe2 	bl	8002220 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0210 	bic.w	r2, r2, #16
 8006a6a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a6c:	f7fc fa46 	bl	8002efc <HAL_GetTick>
 8006a70:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a72:	e014      	b.n	8006a9e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a74:	f7fc fa42 	bl	8002efc <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b0a      	cmp	r3, #10
 8006a80:	d90d      	bls.n	8006a9e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a88:	f043 0201 	orr.w	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2203      	movs	r2, #3
 8006a96:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e18c      	b.n	8006db8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f003 0308 	and.w	r3, r3, #8
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d0e3      	beq.n	8006a74 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006abc:	f7fc fa1e 	bl	8002efc <HAL_GetTick>
 8006ac0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ac2:	e014      	b.n	8006aee <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ac4:	f7fc fa1a 	bl	8002efc <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b0a      	cmp	r3, #10
 8006ad0:	d90d      	bls.n	8006aee <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e164      	b.n	8006db8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0e3      	beq.n	8006ac4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0202 	orr.w	r2, r2, #2
 8006b0a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7c1b      	ldrb	r3, [r3, #16]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d108      	bne.n	8006b26 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b22:	619a      	str	r2, [r3, #24]
 8006b24:	e007      	b.n	8006b36 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b34:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7c5b      	ldrb	r3, [r3, #17]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d108      	bne.n	8006b50 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b4c:	619a      	str	r2, [r3, #24]
 8006b4e:	e007      	b.n	8006b60 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b5e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7c9b      	ldrb	r3, [r3, #18]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d108      	bne.n	8006b7a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b76:	619a      	str	r2, [r3, #24]
 8006b78:	e007      	b.n	8006b8a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b88:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006bae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0210 	bic.w	r2, r2, #16
 8006bbe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d108      	bne.n	8006bda <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0204 	orr.w	r2, r2, #4
 8006bd6:	619a      	str	r2, [r3, #24]
 8006bd8:	e030      	b.n	8006c3c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d02c      	beq.n	8006c3c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d020      	beq.n	8006c2c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f042 0210 	orr.w	r2, r2, #16
 8006c08:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d114      	bne.n	8006c3c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0220 	orr.w	r2, r2, #32
 8006c20:	619a      	str	r2, [r3, #24]
 8006c22:	e00b      	b.n	8006c3c <HAL_FDCAN_Init+0x234>
 8006c24:	080145b4 	.word	0x080145b4
 8006c28:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0220 	orr.w	r2, r2, #32
 8006c3a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c4c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c54:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c64:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c66:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c70:	d115      	bne.n	8006c9e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c80:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	3b01      	subs	r3, #1
 8006c88:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c9a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c9c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc4:	4413      	add	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cd2:	f023 0107 	bic.w	r1, r3, #7
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	3360      	adds	r3, #96	; 0x60
 8006cde:	443b      	add	r3, r7
 8006ce0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d011      	beq.n	8006d1a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cfe:	f023 0107 	bic.w	r1, r3, #7
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	3360      	adds	r3, #96	; 0x60
 8006d0a:	443b      	add	r3, r7
 8006d0c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d012      	beq.n	8006d48 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d2a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	3360      	adds	r3, #96	; 0x60
 8006d36:	443b      	add	r3, r7
 8006d38:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d58:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	3360      	adds	r3, #96	; 0x60
 8006d64:	443b      	add	r3, r7
 8006d66:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <HAL_FDCAN_Init+0x3b8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d107      	bne.n	8006d90 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f022 0203 	bic.w	r2, r2, #3
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f80b 	bl	8006dc4 <FDCAN_CalcultateRamBlockAddresses>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006db4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3760      	adds	r7, #96	; 0x60
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	4000a000 	.word	0x4000a000

08006dc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006dda:	4ba7      	ldr	r3, [pc, #668]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	0091      	lsls	r1, r2, #2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	430b      	orrs	r3, r1
 8006de8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	041a      	lsls	r2, r3, #16
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	4413      	add	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e1a:	4b97      	ldr	r3, [pc, #604]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	0091      	lsls	r1, r2, #2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	041a      	lsls	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4413      	add	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006e5c:	4b86      	ldr	r3, [pc, #536]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0091      	lsls	r1, r2, #2
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	041a      	lsls	r2, r3, #16
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ea4:	4b74      	ldr	r3, [pc, #464]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	0091      	lsls	r1, r2, #2
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ebe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec6:	041a      	lsls	r2, r3, #16
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006eec:	4b62      	ldr	r3, [pc, #392]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	0091      	lsls	r1, r2, #2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f06:	fb02 f303 	mul.w	r3, r2, r3
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006f18:	4b57      	ldr	r3, [pc, #348]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	0091      	lsls	r1, r2, #2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	430b      	orrs	r3, r1
 8006f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3a:	041a      	lsls	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	4413      	add	r3, r2
 8006f50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006f5a:	4b47      	ldr	r3, [pc, #284]	; (8007078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	0091      	lsls	r1, r2, #2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	430b      	orrs	r3, r1
 8006f68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7c:	041a      	lsls	r2, r3, #16
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006f90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f98:	061a      	lsls	r2, r3, #24
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	4b34      	ldr	r3, [pc, #208]	; (800707c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006faa:	4413      	add	r3, r2
 8006fac:	009a      	lsls	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	441a      	add	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800703e:	fb01 f303 	mul.w	r3, r1, r3
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	441a      	add	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706e:	4a04      	ldr	r2, [pc, #16]	; (8007080 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d915      	bls.n	80070a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007074:	e006      	b.n	8007084 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007076:	bf00      	nop
 8007078:	ffff0003 	.word	0xffff0003
 800707c:	10002b00 	.word	0x10002b00
 8007080:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708a:	f043 0220 	orr.w	r2, r3, #32
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2203      	movs	r2, #3
 8007098:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e010      	b.n	80070c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e005      	b.n	80070b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3304      	adds	r3, #4
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d3f3      	bcc.n	80070a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop

080070d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b089      	sub	sp, #36	; 0x24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070da:	2300      	movs	r3, #0
 80070dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070de:	4b86      	ldr	r3, [pc, #536]	; (80072f8 <HAL_GPIO_Init+0x228>)
 80070e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070e2:	e18c      	b.n	80073fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	2101      	movs	r1, #1
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	fa01 f303 	lsl.w	r3, r1, r3
 80070f0:	4013      	ands	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 817e 	beq.w	80073f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d005      	beq.n	8007114 <HAL_GPIO_Init+0x44>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d130      	bne.n	8007176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	2203      	movs	r2, #3
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	4013      	ands	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4313      	orrs	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800714a:	2201      	movs	r2, #1
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43db      	mvns	r3, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4013      	ands	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	f003 0201 	and.w	r2, r3, #1
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4313      	orrs	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69ba      	ldr	r2, [r7, #24]
 8007174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d017      	beq.n	80071b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	2203      	movs	r2, #3
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	43db      	mvns	r3, r3
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	4013      	ands	r3, r2
 8007198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d123      	bne.n	8007206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	08da      	lsrs	r2, r3, #3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3208      	adds	r2, #8
 80071c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	220f      	movs	r2, #15
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43db      	mvns	r3, r3
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	4013      	ands	r3, r2
 80071e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	08da      	lsrs	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3208      	adds	r2, #8
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	2203      	movs	r2, #3
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	43db      	mvns	r3, r3
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	4013      	ands	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f003 0203 	and.w	r2, r3, #3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	fa02 f303 	lsl.w	r3, r2, r3
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	4313      	orrs	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80d8 	beq.w	80073f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007248:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <HAL_GPIO_Init+0x22c>)
 800724a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <HAL_GPIO_Init+0x22c>)
 8007250:	f043 0302 	orr.w	r3, r3, #2
 8007254:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007258:	4b28      	ldr	r3, [pc, #160]	; (80072fc <HAL_GPIO_Init+0x22c>)
 800725a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007266:	4a26      	ldr	r2, [pc, #152]	; (8007300 <HAL_GPIO_Init+0x230>)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	3302      	adds	r3, #2
 800726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	220f      	movs	r2, #15
 800727e:	fa02 f303 	lsl.w	r3, r2, r3
 8007282:	43db      	mvns	r3, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <HAL_GPIO_Init+0x234>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d04a      	beq.n	8007328 <HAL_GPIO_Init+0x258>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a1c      	ldr	r2, [pc, #112]	; (8007308 <HAL_GPIO_Init+0x238>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d02b      	beq.n	80072f2 <HAL_GPIO_Init+0x222>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_GPIO_Init+0x23c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d025      	beq.n	80072ee <HAL_GPIO_Init+0x21e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_GPIO_Init+0x240>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01f      	beq.n	80072ea <HAL_GPIO_Init+0x21a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a19      	ldr	r2, [pc, #100]	; (8007314 <HAL_GPIO_Init+0x244>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d019      	beq.n	80072e6 <HAL_GPIO_Init+0x216>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a18      	ldr	r2, [pc, #96]	; (8007318 <HAL_GPIO_Init+0x248>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <HAL_GPIO_Init+0x212>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a17      	ldr	r2, [pc, #92]	; (800731c <HAL_GPIO_Init+0x24c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00d      	beq.n	80072de <HAL_GPIO_Init+0x20e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <HAL_GPIO_Init+0x250>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <HAL_GPIO_Init+0x20a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a15      	ldr	r2, [pc, #84]	; (8007324 <HAL_GPIO_Init+0x254>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d101      	bne.n	80072d6 <HAL_GPIO_Init+0x206>
 80072d2:	2309      	movs	r3, #9
 80072d4:	e029      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072d6:	230a      	movs	r3, #10
 80072d8:	e027      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072da:	2307      	movs	r3, #7
 80072dc:	e025      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072de:	2306      	movs	r3, #6
 80072e0:	e023      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072e2:	2305      	movs	r3, #5
 80072e4:	e021      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072e6:	2304      	movs	r3, #4
 80072e8:	e01f      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072ea:	2303      	movs	r3, #3
 80072ec:	e01d      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e01b      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e019      	b.n	800732a <HAL_GPIO_Init+0x25a>
 80072f6:	bf00      	nop
 80072f8:	58000080 	.word	0x58000080
 80072fc:	58024400 	.word	0x58024400
 8007300:	58000400 	.word	0x58000400
 8007304:	58020000 	.word	0x58020000
 8007308:	58020400 	.word	0x58020400
 800730c:	58020800 	.word	0x58020800
 8007310:	58020c00 	.word	0x58020c00
 8007314:	58021000 	.word	0x58021000
 8007318:	58021400 	.word	0x58021400
 800731c:	58021800 	.word	0x58021800
 8007320:	58021c00 	.word	0x58021c00
 8007324:	58022400 	.word	0x58022400
 8007328:	2300      	movs	r3, #0
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	f002 0203 	and.w	r2, r2, #3
 8007330:	0092      	lsls	r2, r2, #2
 8007332:	4093      	lsls	r3, r2
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4313      	orrs	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800733a:	4938      	ldr	r1, [pc, #224]	; (800741c <HAL_GPIO_Init+0x34c>)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	3302      	adds	r3, #2
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800736e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	43db      	mvns	r3, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4013      	ands	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800739c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	4013      	ands	r3, r2
 80073b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	43db      	mvns	r3, r3
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	4013      	ands	r3, r2
 80073dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	f47f ae6b 	bne.w	80070e4 <HAL_GPIO_Init+0x14>
  }
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	3724      	adds	r7, #36	; 0x24
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	58000400 	.word	0x58000400

08007420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007430:	787b      	ldrb	r3, [r7, #1]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007436:	887a      	ldrh	r2, [r7, #2]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800743c:	e003      	b.n	8007446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	041a      	lsls	r2, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	619a      	str	r2, [r3, #24]
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07f      	b.n	8007566 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7fa ff38 	bl	80022f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2224      	movs	r2, #36	; 0x24
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0201 	bic.w	r2, r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d107      	bne.n	80074ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	e006      	b.n	80074dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d104      	bne.n	80074ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6859      	ldr	r1, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <HAL_I2C_Init+0x11c>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800750c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69d9      	ldr	r1, [r3, #28]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1a      	ldr	r2, [r3, #32]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	02008000 	.word	0x02008000

08007574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b20      	cmp	r3, #32
 8007588:	d138      	bne.n	80075fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007594:	2302      	movs	r3, #2
 8007596:	e032      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2224      	movs	r2, #36	; 0x24
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d139      	bne.n	8007694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800762a:	2302      	movs	r3, #2
 800762c:	e033      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	; 0x24
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800765c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80076a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a4:	b08f      	sub	sp, #60	; 0x3c
 80076a6:	af0a      	add	r7, sp, #40	; 0x28
 80076a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e116      	b.n	80078e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f00b fe7e 	bl	80133d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2203      	movs	r2, #3
 80076d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f008 fa67 	bl	800fbc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	687e      	ldr	r6, [r7, #4]
 8007700:	466d      	mov	r5, sp
 8007702:	f106 0410 	add.w	r4, r6, #16
 8007706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800770a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800770c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800770e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007712:	e885 0003 	stmia.w	r5, {r0, r1}
 8007716:	1d33      	adds	r3, r6, #4
 8007718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800771a:	6838      	ldr	r0, [r7, #0]
 800771c:	f008 f932 	bl	800f984 <USB_CoreInit>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0d7      	b.n	80078e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f008 fa55 	bl	800fbe8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800773e:	2300      	movs	r3, #0
 8007740:	73fb      	strb	r3, [r7, #15]
 8007742:	e04a      	b.n	80077da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007744:	7bfa      	ldrb	r2, [r7, #15]
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	333d      	adds	r3, #61	; 0x3d
 8007754:	2201      	movs	r2, #1
 8007756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007758:	7bfa      	ldrb	r2, [r7, #15]
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	4613      	mov	r3, r2
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	440b      	add	r3, r1
 8007766:	333c      	adds	r3, #60	; 0x3c
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800776c:	7bfa      	ldrb	r2, [r7, #15]
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	b298      	uxth	r0, r3
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	4613      	mov	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	3356      	adds	r3, #86	; 0x56
 8007780:	4602      	mov	r2, r0
 8007782:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007784:	7bfa      	ldrb	r2, [r7, #15]
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	3340      	adds	r3, #64	; 0x40
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007798:	7bfa      	ldrb	r2, [r7, #15]
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	440b      	add	r3, r1
 80077a6:	3344      	adds	r3, #68	; 0x44
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077ac:	7bfa      	ldrb	r2, [r7, #15]
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	3348      	adds	r3, #72	; 0x48
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80077c0:	7bfa      	ldrb	r2, [r7, #15]
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	334c      	adds	r3, #76	; 0x4c
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	3301      	adds	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]
 80077da:	7bfa      	ldrb	r2, [r7, #15]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d3af      	bcc.n	8007744 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
 80077e8:	e044      	b.n	8007874 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80077ea:	7bfa      	ldrb	r2, [r7, #15]
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007800:	7bfa      	ldrb	r2, [r7, #15]
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007812:	7bfa      	ldrb	r2, [r7, #15]
 8007814:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4613      	mov	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	4613      	mov	r3, r2
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007858:	7bfa      	ldrb	r2, [r7, #15]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	3301      	adds	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
 8007874:	7bfa      	ldrb	r2, [r7, #15]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	429a      	cmp	r2, r3
 800787c:	d3b5      	bcc.n	80077ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	687e      	ldr	r6, [r7, #4]
 8007886:	466d      	mov	r5, sp
 8007888:	f106 0410 	add.w	r4, r6, #16
 800788c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800788e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007898:	e885 0003 	stmia.w	r5, {r0, r1}
 800789c:	1d33      	adds	r3, r6, #4
 800789e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078a0:	6838      	ldr	r0, [r7, #0]
 80078a2:	f008 f9ed 	bl	800fc80 <USB_DevInit>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e014      	b.n	80078e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d102      	bne.n	80078d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f96f 	bl	8008bb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f009 fa2f 	bl	8010d3e <USB_DevDisconnect>

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_PCD_Start+0x1c>
 8007902:	2302      	movs	r3, #2
 8007904:	e022      	b.n	800794c <HAL_PCD_Start+0x62>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800791e:	2b01      	cmp	r3, #1
 8007920:	d105      	bne.n	800792e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f008 f936 	bl	800fba4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f009 f9dd 	bl	8010cfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b08d      	sub	sp, #52	; 0x34
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4618      	mov	r0, r3
 800796c:	f009 fa9b 	bl	8010ea6 <USB_GetMode>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 84b7 	bne.w	80082e6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4618      	mov	r0, r3
 800797e:	f009 f9ff 	bl	8010d80 <USB_ReadInterrupts>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 84ad 	beq.w	80082e4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f009 f9ec 	bl	8010d80 <USB_ReadInterrupts>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d107      	bne.n	80079c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f002 0202 	and.w	r2, r2, #2
 80079c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f009 f9da 	bl	8010d80 <USB_ReadInterrupts>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d161      	bne.n	8007a9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699a      	ldr	r2, [r3, #24]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0210 	bic.w	r2, r2, #16
 80079e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f003 020f 	and.w	r2, r3, #15
 80079f2:	4613      	mov	r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	0c5b      	lsrs	r3, r3, #17
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d124      	bne.n	8007a5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d035      	beq.n	8007a8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	091b      	lsrs	r3, r3, #4
 8007a26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6a38      	ldr	r0, [r7, #32]
 8007a32:	f009 f811 	bl	8010a58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a42:	441a      	add	r2, r3
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	091b      	lsrs	r3, r3, #4
 8007a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a54:	441a      	add	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	615a      	str	r2, [r3, #20]
 8007a5a:	e016      	b.n	8007a8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	0c5b      	lsrs	r3, r3, #17
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	d110      	bne.n	8007a8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a6e:	2208      	movs	r2, #8
 8007a70:	4619      	mov	r1, r3
 8007a72:	6a38      	ldr	r0, [r7, #32]
 8007a74:	f008 fff0 	bl	8010a58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a84:	441a      	add	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0210 	orr.w	r2, r2, #16
 8007a98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f009 f96e 	bl	8010d80 <USB_ReadInterrupts>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007aae:	f040 80a7 	bne.w	8007c00 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f009 f973 	bl	8010da6 <USB_ReadDevAllOutEpInterrupt>
 8007ac0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007ac2:	e099      	b.n	8007bf8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 808e 	beq.w	8007bec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	4611      	mov	r1, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f009 f997 	bl	8010e0e <USB_ReadDevOutEPInterrupt>
 8007ae0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00c      	beq.n	8007b06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2301      	movs	r3, #1
 8007afc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fed1 	bl	80088a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00c      	beq.n	8007b2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2308      	movs	r3, #8
 8007b20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 ffa7 	bl	8008a78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b40:	461a      	mov	r2, r3
 8007b42:	2310      	movs	r3, #16
 8007b44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d030      	beq.n	8007bb2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b58:	2b80      	cmp	r3, #128	; 0x80
 8007b5a:	d109      	bne.n	8007b70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	69fa      	ldr	r2, [r7, #28]
 8007b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	3304      	adds	r3, #4
 8007b84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	78db      	ldrb	r3, [r3, #3]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d108      	bne.n	8007ba0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f00b fd10 	bl	80135c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	461a      	mov	r2, r3
 8007bae:	2302      	movs	r3, #2
 8007bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2320      	movs	r3, #32
 8007bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d009      	beq.n	8007bec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	461a      	mov	r2, r3
 8007be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	3301      	adds	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	085b      	lsrs	r3, r3, #1
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f47f af62 	bne.w	8007ac4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f009 f8bb 	bl	8010d80 <USB_ReadInterrupts>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c14:	f040 80db 	bne.w	8007dce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f009 f8dc 	bl	8010dda <USB_ReadDevAllInEpInterrupt>
 8007c22:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007c28:	e0cd      	b.n	8007dc6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80c2 	beq.w	8007dba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f009 f902 	bl	8010e4a <USB_ReadDevInEPInterrupt>
 8007c46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d057      	beq.n	8007d02 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	f003 030f 	and.w	r3, r3, #15
 8007c58:	2201      	movs	r2, #1
 8007c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69f9      	ldr	r1, [r7, #28]
 8007c6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c72:	4013      	ands	r3, r2
 8007c74:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c82:	461a      	mov	r2, r3
 8007c84:	2301      	movs	r3, #1
 8007c86:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d132      	bne.n	8007cf6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	4613      	mov	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3348      	adds	r3, #72	; 0x48
 8007ca0:	6819      	ldr	r1, [r3, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4403      	add	r3, r0
 8007cb0:	3344      	adds	r3, #68	; 0x44
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4419      	add	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4403      	add	r3, r0
 8007cc4:	3348      	adds	r3, #72	; 0x48
 8007cc6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d113      	bne.n	8007cf6 <HAL_PCD_IRQHandler+0x3a2>
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	00db      	lsls	r3, r3, #3
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	334c      	adds	r3, #76	; 0x4c
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d108      	bne.n	8007cf6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	f009 f90b 	bl	8010f0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f00b fbda 	bl	80134b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d008      	beq.n	8007d1e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	461a      	mov	r2, r3
 8007d36:	2310      	movs	r3, #16
 8007d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	461a      	mov	r2, r3
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d023      	beq.n	8007da8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d62:	6a38      	ldr	r0, [r7, #32]
 8007d64:	f008 f8ea 	bl	800ff3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	3338      	adds	r3, #56	; 0x38
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4413      	add	r3, r2
 8007d78:	3304      	adds	r3, #4
 8007d7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	78db      	ldrb	r3, [r3, #3]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d108      	bne.n	8007d96 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2200      	movs	r2, #0
 8007d88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f00b fc27 	bl	80135e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da2:	461a      	mov	r2, r3
 8007da4:	2302      	movs	r3, #2
 8007da6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fcea 	bl	800878e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f47f af2e 	bne.w	8007c2a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f008 ffd4 	bl	8010d80 <USB_ReadInterrupts>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007de2:	d122      	bne.n	8007e2a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d108      	bne.n	8007e14 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fef5 	bl	8008bfc <HAL_PCDEx_LPM_Callback>
 8007e12:	e002      	b.n	8007e1a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f00b fbc5 	bl	80135a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695a      	ldr	r2, [r3, #20]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f008 ffa6 	bl	8010d80 <USB_ReadInterrupts>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3e:	d112      	bne.n	8007e66 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d102      	bne.n	8007e56 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f00b fb81 	bl	8013558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f008 ff88 	bl	8010d80 <USB_ReadInterrupts>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e7a:	d121      	bne.n	8007ec0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695a      	ldr	r2, [r3, #20]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007e8a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d111      	bne.n	8007eba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea4:	089b      	lsrs	r3, r3, #2
 8007ea6:	f003 020f 	and.w	r2, r3, #15
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fea2 	bl	8008bfc <HAL_PCDEx_LPM_Callback>
 8007eb8:	e002      	b.n	8007ec0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f00b fb4c 	bl	8013558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f008 ff5b 	bl	8010d80 <USB_ReadInterrupts>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed4:	f040 80b7 	bne.w	8008046 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	69fa      	ldr	r2, [r7, #28]
 8007ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2110      	movs	r1, #16
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f008 f822 	bl	800ff3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efc:	e046      	b.n	8007f8c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	3301      	adds	r3, #1
 8007f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d3b3      	bcc.n	8007efe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007fa8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d016      	beq.n	8007fe0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f043 030b 	orr.w	r3, r3, #11
 8007fc6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd8:	f043 030b 	orr.w	r3, r3, #11
 8007fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8007fde:	e015      	b.n	800800c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe6:	695a      	ldr	r2, [r3, #20]
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fee:	4619      	mov	r1, r3
 8007ff0:	f242 032b 	movw	r3, #8235	; 0x202b
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	69fa      	ldr	r2, [r7, #28]
 8008002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008006:	f043 030b 	orr.w	r3, r3, #11
 800800a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800801a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800801e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008030:	461a      	mov	r2, r3
 8008032:	f008 ff6b 	bl	8010f0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695a      	ldr	r2, [r3, #20]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f008 fe98 	bl	8010d80 <USB_ReadInterrupts>
 8008050:	4603      	mov	r3, r0
 8008052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805a:	d124      	bne.n	80080a6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f008 ff2f 	bl	8010ec4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4618      	mov	r0, r3
 800806c:	f007 ffe3 	bl	8010036 <USB_GetDevSpeed>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681c      	ldr	r4, [r3, #0]
 800807c:	f001 fd88 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8008080:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	4620      	mov	r0, r4
 800808c:	f007 fce8 	bl	800fa60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f00b fa38 	bl	8013506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80080a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f008 fe68 	bl	8010d80 <USB_ReadInterrupts>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d10a      	bne.n	80080d0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f00b fa15 	bl	80134ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695a      	ldr	r2, [r3, #20]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f002 0208 	and.w	r2, r2, #8
 80080ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f008 fe53 	bl	8010d80 <USB_ReadInterrupts>
 80080da:	4603      	mov	r3, r0
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d122      	bne.n	800812a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80080f0:	2301      	movs	r3, #1
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
 80080f4:	e014      	b.n	8008120 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	4613      	mov	r3, r2
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d105      	bne.n	800811a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	b2db      	uxtb	r3, r3
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb09 	bl	800872c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	3301      	adds	r3, #1
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	429a      	cmp	r2, r3
 8008128:	d3e5      	bcc.n	80080f6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f008 fe26 	bl	8010d80 <USB_ReadInterrupts>
 8008134:	4603      	mov	r3, r0
 8008136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800813a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800813e:	d13b      	bne.n	80081b8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008140:	2301      	movs	r3, #1
 8008142:	627b      	str	r3, [r7, #36]	; 0x24
 8008144:	e02b      	b.n	800819e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815a:	4613      	mov	r3, r2
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	3340      	adds	r3, #64	; 0x40
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d115      	bne.n	8008198 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800816c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800816e:	2b00      	cmp	r3, #0
 8008170:	da12      	bge.n	8008198 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	333f      	adds	r3, #63	; 0x3f
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 faca 	bl	800872c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	3301      	adds	r3, #1
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d3ce      	bcc.n	8008146 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80081b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4618      	mov	r0, r3
 80081be:	f008 fddf 	bl	8010d80 <USB_ReadInterrupts>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081cc:	d155      	bne.n	800827a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081ce:	2301      	movs	r3, #1
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
 80081d2:	e045      	b.n	8008260 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d12e      	bne.n	800825a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80081fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80081fe:	2b00      	cmp	r3, #0
 8008200:	da2b      	bge.n	800825a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800820e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008212:	429a      	cmp	r2, r3
 8008214:	d121      	bne.n	800825a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	4613      	mov	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	440b      	add	r3, r1
 8008224:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008228:	2201      	movs	r2, #1
 800822a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10a      	bne.n	800825a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008256:	6053      	str	r3, [r2, #4]
            break;
 8008258:	e007      	b.n	800826a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	3301      	adds	r3, #1
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008266:	429a      	cmp	r2, r3
 8008268:	d3b4      	bcc.n	80081d4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f008 fd7e 	bl	8010d80 <USB_ReadInterrupts>
 8008284:	4603      	mov	r3, r0
 8008286:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d10a      	bne.n	80082a6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f00b f9b9 	bl	8013608 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695a      	ldr	r2, [r3, #20]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80082a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f008 fd68 	bl	8010d80 <USB_ReadInterrupts>
 80082b0:	4603      	mov	r3, r0
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d115      	bne.n	80082e6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f00b f9a9 	bl	8013624 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6859      	ldr	r1, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	e000      	b.n	80082e6 <HAL_PCD_IRQHandler+0x992>
      return;
 80082e4:	bf00      	nop
    }
  }
}
 80082e6:	3734      	adds	r7, #52	; 0x34
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd90      	pop	{r4, r7, pc}

080082ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_PCD_SetAddress+0x1a>
 8008302:	2302      	movs	r3, #2
 8008304:	e013      	b.n	800832e <HAL_PCD_SetAddress+0x42>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	78fa      	ldrb	r2, [r7, #3]
 800831c:	4611      	mov	r1, r2
 800831e:	4618      	mov	r0, r3
 8008320:	f008 fcc6 	bl	8010cb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	461a      	mov	r2, r3
 8008344:	4603      	mov	r3, r0
 8008346:	70fb      	strb	r3, [r7, #3]
 8008348:	460b      	mov	r3, r1
 800834a:	803b      	strh	r3, [r7, #0]
 800834c:	4613      	mov	r3, r2
 800834e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008358:	2b00      	cmp	r3, #0
 800835a:	da0f      	bge.n	800837c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	f003 020f 	and.w	r2, r3, #15
 8008362:	4613      	mov	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	3338      	adds	r3, #56	; 0x38
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	705a      	strb	r2, [r3, #1]
 800837a:	e00f      	b.n	800839c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	4613      	mov	r3, r2
 8008384:	00db      	lsls	r3, r3, #3
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4413      	add	r3, r2
 8008392:	3304      	adds	r3, #4
 8008394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	f003 030f 	and.w	r3, r3, #15
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80083a8:	883a      	ldrh	r2, [r7, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	78ba      	ldrb	r2, [r7, #2]
 80083b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	785b      	ldrb	r3, [r3, #1]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80083c6:	78bb      	ldrb	r3, [r7, #2]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d102      	bne.n	80083d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_PCD_EP_Open+0xaa>
 80083dc:	2302      	movs	r3, #2
 80083de:	e00e      	b.n	80083fe <HAL_PCD_EP_Open+0xc8>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68f9      	ldr	r1, [r7, #12]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f007 fe46 	bl	8010080 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80083fc:	7afb      	ldrb	r3, [r7, #11]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	460b      	mov	r3, r1
 8008410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008416:	2b00      	cmp	r3, #0
 8008418:	da0f      	bge.n	800843a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	3338      	adds	r3, #56	; 0x38
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	3304      	adds	r3, #4
 8008430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	705a      	strb	r2, [r3, #1]
 8008438:	e00f      	b.n	800845a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	4613      	mov	r3, r2
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	4413      	add	r3, r2
 8008450:	3304      	adds	r3, #4
 8008452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	f003 030f 	and.w	r3, r3, #15
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_PCD_EP_Close+0x6e>
 8008470:	2302      	movs	r3, #2
 8008472:	e00e      	b.n	8008492 <HAL_PCD_EP_Close+0x8c>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68f9      	ldr	r1, [r7, #12]
 8008482:	4618      	mov	r0, r3
 8008484:	f007 fe84 	bl	8010190 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
 80084a6:	460b      	mov	r3, r1
 80084a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	f003 020f 	and.w	r2, r3, #15
 80084b0:	4613      	mov	r3, r2
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	3304      	adds	r3, #4
 80084c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2200      	movs	r2, #0
 80084d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d102      	bne.n	80084f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	f007 ff20 	bl	8010348 <USB_EPStartXfer>

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008534:	681b      	ldr	r3, [r3, #0]
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	460b      	mov	r3, r1
 8008550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	f003 020f 	and.w	r2, r3, #15
 8008558:	4613      	mov	r3, r2
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	3338      	adds	r3, #56	; 0x38
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2200      	movs	r2, #0
 800857a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2201      	movs	r2, #1
 8008580:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d102      	bne.n	800859c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	f007 fecd 	bl	8010348 <USB_EPStartXfer>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	f003 020f 	and.w	r2, r3, #15
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d901      	bls.n	80085d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e050      	b.n	8008678 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80085d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da0f      	bge.n	80085fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	f003 020f 	and.w	r2, r3, #15
 80085e4:	4613      	mov	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	3338      	adds	r3, #56	; 0x38
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	3304      	adds	r3, #4
 80085f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	705a      	strb	r2, [r3, #1]
 80085fc:	e00d      	b.n	800861a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	4613      	mov	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	4413      	add	r3, r2
 8008610:	3304      	adds	r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	b2da      	uxtb	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008632:	2b01      	cmp	r3, #1
 8008634:	d101      	bne.n	800863a <HAL_PCD_EP_SetStall+0x82>
 8008636:	2302      	movs	r3, #2
 8008638:	e01e      	b.n	8008678 <HAL_PCD_EP_SetStall+0xc0>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68f9      	ldr	r1, [r7, #12]
 8008648:	4618      	mov	r0, r3
 800864a:	f008 fa5d 	bl	8010b08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	b2d9      	uxtb	r1, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008668:	461a      	mov	r2, r3
 800866a:	f008 fc4f 	bl	8010f0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	f003 020f 	and.w	r2, r3, #15
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d901      	bls.n	800869e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e042      	b.n	8008724 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800869e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da0f      	bge.n	80086c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	f003 020f 	and.w	r2, r3, #15
 80086ac:	4613      	mov	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	3338      	adds	r3, #56	; 0x38
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	3304      	adds	r3, #4
 80086bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	705a      	strb	r2, [r3, #1]
 80086c4:	e00f      	b.n	80086e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4413      	add	r3, r2
 80086dc:	3304      	adds	r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d101      	bne.n	8008706 <HAL_PCD_EP_ClrStall+0x86>
 8008702:	2302      	movs	r3, #2
 8008704:	e00e      	b.n	8008724 <HAL_PCD_EP_ClrStall+0xa4>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	4618      	mov	r0, r3
 8008716:	f008 fa65 	bl	8010be4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	da0c      	bge.n	800875a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	f003 020f 	and.w	r2, r3, #15
 8008746:	4613      	mov	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	3338      	adds	r3, #56	; 0x38
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	4413      	add	r3, r2
 8008754:	3304      	adds	r3, #4
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e00c      	b.n	8008774 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	f003 020f 	and.w	r2, r3, #15
 8008760:	4613      	mov	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68f9      	ldr	r1, [r7, #12]
 800877a:	4618      	mov	r0, r3
 800877c:	f008 f884 	bl	8010888 <USB_EPStopXfer>
 8008780:	4603      	mov	r3, r0
 8008782:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008784:	7afb      	ldrb	r3, [r7, #11]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b08a      	sub	sp, #40	; 0x28
 8008792:	af02      	add	r7, sp, #8
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	3338      	adds	r3, #56	; 0x38
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	4413      	add	r3, r2
 80087b2:	3304      	adds	r3, #4
 80087b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d901      	bls.n	80087c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e06c      	b.n	80088a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	69fa      	ldr	r2, [r7, #28]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d902      	bls.n	80087e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	3303      	adds	r3, #3
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80087ea:	e02b      	b.n	8008844 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	691a      	ldr	r2, [r3, #16]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d902      	bls.n	8008808 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3303      	adds	r3, #3
 800880c:	089b      	lsrs	r3, r3, #2
 800880e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68d9      	ldr	r1, [r3, #12]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008820:	b2db      	uxtb	r3, r3
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	4603      	mov	r3, r0
 8008826:	6978      	ldr	r0, [r7, #20]
 8008828:	f008 f8d8 	bl	80109dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	441a      	add	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	b29b      	uxth	r3, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	429a      	cmp	r2, r3
 8008858:	d809      	bhi.n	800886e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d203      	bcs.n	800886e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1be      	bne.n	80087ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	429a      	cmp	r2, r3
 8008878:	d811      	bhi.n	800889e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	2201      	movs	r2, #1
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	43db      	mvns	r3, r3
 8008894:	6939      	ldr	r1, [r7, #16]
 8008896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800889a:	4013      	ands	r3, r2
 800889c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	333c      	adds	r3, #60	; 0x3c
 80088c0:	3304      	adds	r3, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	015a      	lsls	r2, r3, #5
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	4413      	add	r3, r2
 80088ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d17b      	bne.n	80089d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d015      	beq.n	8008914 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4a61      	ldr	r2, [pc, #388]	; (8008a70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	f240 80b9 	bls.w	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80b3 	beq.w	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890a:	461a      	mov	r2, r3
 800890c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008910:	6093      	str	r3, [r2, #8]
 8008912:	e0a7      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	4413      	add	r3, r2
 8008926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892a:	461a      	mov	r2, r3
 800892c:	2320      	movs	r3, #32
 800892e:	6093      	str	r3, [r2, #8]
 8008930:	e098      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	f040 8093 	bne.w	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4a4b      	ldr	r2, [pc, #300]	; (8008a70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d90f      	bls.n	8008966 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	461a      	mov	r2, r3
 800895e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008962:	6093      	str	r3, [r2, #8]
 8008964:	e07e      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	00db      	lsls	r3, r3, #3
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	3304      	adds	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a1a      	ldr	r2, [r3, #32]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	0159      	lsls	r1, r3, #5
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	440b      	add	r3, r1
 8008988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008992:	1ad2      	subs	r2, r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d114      	bne.n	80089c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d109      	bne.n	80089ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089b0:	461a      	mov	r2, r3
 80089b2:	2101      	movs	r1, #1
 80089b4:	f008 faaa 	bl	8010f0c <USB_EP0_OutStart>
 80089b8:	e006      	b.n	80089c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	441a      	add	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f00a fd56 	bl	8013480 <HAL_PCD_DataOutStageCallback>
 80089d4:	e046      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	4a26      	ldr	r2, [pc, #152]	; (8008a74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d124      	bne.n	8008a28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	461a      	mov	r2, r3
 80089f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089fa:	6093      	str	r3, [r2, #8]
 80089fc:	e032      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d008      	beq.n	8008a1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a14:	461a      	mov	r2, r3
 8008a16:	2320      	movs	r3, #32
 8008a18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f00a fd2d 	bl	8013480 <HAL_PCD_DataOutStageCallback>
 8008a26:	e01d      	b.n	8008a64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d114      	bne.n	8008a58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	440b      	add	r3, r1
 8008a3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d108      	bne.n	8008a58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a50:	461a      	mov	r2, r3
 8008a52:	2100      	movs	r1, #0
 8008a54:	f008 fa5a 	bl	8010f0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f00a fd0e 	bl	8013480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	4f54300a 	.word	0x4f54300a
 8008a74:	4f54310a 	.word	0x4f54310a

08008a78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	333c      	adds	r3, #60	; 0x3c
 8008a90:	3304      	adds	r3, #4
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <PCD_EP_OutSetupPacket_int+0x88>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d90e      	bls.n	8008acc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f00a fcc5 	bl	801345c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4a0a      	ldr	r2, [pc, #40]	; (8008b00 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d90c      	bls.n	8008af4 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d108      	bne.n	8008af4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aec:	461a      	mov	r2, r3
 8008aee:	2101      	movs	r1, #1
 8008af0:	f008 fa0c 	bl	8010f0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	4f54300a 	.word	0x4f54300a

08008b04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
 8008b10:	4613      	mov	r3, r2
 8008b12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d107      	bne.n	8008b32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b22:	883b      	ldrh	r3, [r7, #0]
 8008b24:	0419      	lsls	r1, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8008b30:	e028      	b.n	8008b84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b38:	0c1b      	lsrs	r3, r3, #16
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
 8008b44:	e00d      	b.n	8008b62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	3340      	adds	r3, #64	; 0x40
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	4413      	add	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	7bfa      	ldrb	r2, [r7, #15]
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d3ec      	bcc.n	8008b46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008b6c:	883b      	ldrh	r3, [r7, #0]
 8008b6e:	0418      	lsls	r0, r3, #16
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6819      	ldr	r1, [r3, #0]
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	4302      	orrs	r2, r0
 8008b7c:	3340      	adds	r3, #64	; 0x40
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	887a      	ldrh	r2, [r7, #2]
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008be2:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_PCDEx_ActivateLPM+0x44>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	10000003 	.word	0x10000003

08008bfc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c1c:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <HAL_PWREx_ConfigSupply+0x70>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d00a      	beq.n	8008c3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c28:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <HAL_PWREx_ConfigSupply+0x70>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d001      	beq.n	8008c3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e01f      	b.n	8008c7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e01d      	b.n	8008c7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c3e:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <HAL_PWREx_ConfigSupply+0x70>)
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f023 0207 	bic.w	r2, r3, #7
 8008c46:	490f      	ldr	r1, [pc, #60]	; (8008c84 <HAL_PWREx_ConfigSupply+0x70>)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c4e:	f7fa f955 	bl	8002efc <HAL_GetTick>
 8008c52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c54:	e009      	b.n	8008c6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c56:	f7fa f951 	bl	8002efc <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c64:	d901      	bls.n	8008c6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e007      	b.n	8008c7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <HAL_PWREx_ConfigSupply+0x70>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c76:	d1ee      	bne.n	8008c56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	58024800 	.word	0x58024800

08008c88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	4a04      	ldr	r2, [pc, #16]	; (8008ca4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c96:	60d3      	str	r3, [r2, #12]
}
 8008c98:	bf00      	nop
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	58024800 	.word	0x58024800

08008ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08c      	sub	sp, #48	; 0x30
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e3c8      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 8087 	beq.w	8008dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc8:	4b88      	ldr	r3, [pc, #544]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cd2:	4b86      	ldr	r3, [pc, #536]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	2b10      	cmp	r3, #16
 8008cdc:	d007      	beq.n	8008cee <HAL_RCC_OscConfig+0x46>
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	2b18      	cmp	r3, #24
 8008ce2:	d110      	bne.n	8008d06 <HAL_RCC_OscConfig+0x5e>
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d10b      	bne.n	8008d06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cee:	4b7f      	ldr	r3, [pc, #508]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d06c      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x12c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d168      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e3a2      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCC_OscConfig+0x76>
 8008d10:	4b76      	ldr	r3, [pc, #472]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a75      	ldr	r2, [pc, #468]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	e02e      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCC_OscConfig+0x98>
 8008d26:	4b71      	ldr	r3, [pc, #452]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a70      	ldr	r2, [pc, #448]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4b6e      	ldr	r3, [pc, #440]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a6d      	ldr	r2, [pc, #436]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	e01d      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d48:	d10c      	bne.n	8008d64 <HAL_RCC_OscConfig+0xbc>
 8008d4a:	4b68      	ldr	r3, [pc, #416]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a67      	ldr	r2, [pc, #412]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	4b65      	ldr	r3, [pc, #404]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a64      	ldr	r2, [pc, #400]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	e00b      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d64:	4b61      	ldr	r3, [pc, #388]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a60      	ldr	r2, [pc, #384]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	4b5e      	ldr	r3, [pc, #376]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a5d      	ldr	r2, [pc, #372]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d013      	beq.n	8008dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d84:	f7fa f8ba 	bl	8002efc <HAL_GetTick>
 8008d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d8c:	f7fa f8b6 	bl	8002efc <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b64      	cmp	r3, #100	; 0x64
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e356      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d9e:	4b53      	ldr	r3, [pc, #332]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0f0      	beq.n	8008d8c <HAL_RCC_OscConfig+0xe4>
 8008daa:	e014      	b.n	8008dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7fa f8a6 	bl	8002efc <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008db4:	f7fa f8a2 	bl	8002efc <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b64      	cmp	r3, #100	; 0x64
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e342      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dc6:	4b49      	ldr	r3, [pc, #292]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f0      	bne.n	8008db4 <HAL_RCC_OscConfig+0x10c>
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 808c 	beq.w	8008efc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008de4:	4b41      	ldr	r3, [pc, #260]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dee:	4b3f      	ldr	r3, [pc, #252]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <HAL_RCC_OscConfig+0x162>
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	2b18      	cmp	r3, #24
 8008dfe:	d137      	bne.n	8008e70 <HAL_RCC_OscConfig+0x1c8>
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d132      	bne.n	8008e70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e0a:	4b38      	ldr	r3, [pc, #224]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d005      	beq.n	8008e22 <HAL_RCC_OscConfig+0x17a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e314      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e22:	4b32      	ldr	r3, [pc, #200]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f023 0219 	bic.w	r2, r3, #25
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	492f      	ldr	r1, [pc, #188]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e34:	f7fa f862 	bl	8002efc <HAL_GetTick>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e3c:	f7fa f85e 	bl	8002efc <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e2fe      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e4e:	4b27      	ldr	r3, [pc, #156]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e5a:	4b24      	ldr	r3, [pc, #144]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	4920      	ldr	r1, [pc, #128]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e6e:	e045      	b.n	8008efc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d026      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e78:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f023 0219 	bic.w	r2, r3, #25
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	4919      	ldr	r1, [pc, #100]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8a:	f7fa f837 	bl	8002efc <HAL_GetTick>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e92:	f7fa f833 	bl	8002efc <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e2d3      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ea4:	4b11      	ldr	r3, [pc, #68]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0f0      	beq.n	8008e92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb0:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	490b      	ldr	r1, [pc, #44]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	604b      	str	r3, [r1, #4]
 8008ec4:	e01a      	b.n	8008efc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ec6:	4b09      	ldr	r3, [pc, #36]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a08      	ldr	r2, [pc, #32]	; (8008eec <HAL_RCC_OscConfig+0x244>)
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed2:	f7fa f813 	bl	8002efc <HAL_GetTick>
 8008ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ed8:	e00a      	b.n	8008ef0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eda:	f7fa f80f 	bl	8002efc <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d903      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e2af      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
 8008eec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ef0:	4b96      	ldr	r3, [pc, #600]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1ee      	bne.n	8008eda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d06a      	beq.n	8008fde <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f08:	4b90      	ldr	r3, [pc, #576]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f12:	4b8e      	ldr	r3, [pc, #568]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d007      	beq.n	8008f2e <HAL_RCC_OscConfig+0x286>
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b18      	cmp	r3, #24
 8008f22:	d11b      	bne.n	8008f5c <HAL_RCC_OscConfig+0x2b4>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d116      	bne.n	8008f5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f2e:	4b87      	ldr	r3, [pc, #540]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_RCC_OscConfig+0x29e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	2b80      	cmp	r3, #128	; 0x80
 8008f40:	d001      	beq.n	8008f46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e282      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f46:	4b81      	ldr	r3, [pc, #516]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	061b      	lsls	r3, r3, #24
 8008f54:	497d      	ldr	r1, [pc, #500]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f5a:	e040      	b.n	8008fde <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d023      	beq.n	8008fac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f64:	4b79      	ldr	r3, [pc, #484]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a78      	ldr	r2, [pc, #480]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7f9 ffc4 	bl	8002efc <HAL_GetTick>
 8008f74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008f78:	f7f9 ffc0 	bl	8002efc <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e260      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f8a:	4b70      	ldr	r3, [pc, #448]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f96:	4b6d      	ldr	r3, [pc, #436]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	061b      	lsls	r3, r3, #24
 8008fa4:	4969      	ldr	r1, [pc, #420]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	60cb      	str	r3, [r1, #12]
 8008faa:	e018      	b.n	8008fde <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fac:	4b67      	ldr	r3, [pc, #412]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a66      	ldr	r2, [pc, #408]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb8:	f7f9 ffa0 	bl	8002efc <HAL_GetTick>
 8008fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008fc0:	f7f9 ff9c 	bl	8002efc <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e23c      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fd2:	4b5e      	ldr	r3, [pc, #376]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f0      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d036      	beq.n	8009058 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d019      	beq.n	8009026 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ff2:	4b56      	ldr	r3, [pc, #344]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff6:	4a55      	ldr	r2, [pc, #340]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8008ff8:	f043 0301 	orr.w	r3, r3, #1
 8008ffc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ffe:	f7f9 ff7d 	bl	8002efc <HAL_GetTick>
 8009002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009006:	f7f9 ff79 	bl	8002efc <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e219      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009018:	4b4c      	ldr	r3, [pc, #304]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800901a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0f0      	beq.n	8009006 <HAL_RCC_OscConfig+0x35e>
 8009024:	e018      	b.n	8009058 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009026:	4b49      	ldr	r3, [pc, #292]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902a:	4a48      	ldr	r2, [pc, #288]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009032:	f7f9 ff63 	bl	8002efc <HAL_GetTick>
 8009036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009038:	e008      	b.n	800904c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800903a:	f7f9 ff5f 	bl	8002efc <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b02      	cmp	r3, #2
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e1ff      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800904c:	4b3f      	ldr	r3, [pc, #252]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800904e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f0      	bne.n	800903a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b00      	cmp	r3, #0
 8009062:	d036      	beq.n	80090d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d019      	beq.n	80090a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800906c:	4b37      	ldr	r3, [pc, #220]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a36      	ldr	r2, [pc, #216]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009072:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009078:	f7f9 ff40 	bl	8002efc <HAL_GetTick>
 800907c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800907e:	e008      	b.n	8009092 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009080:	f7f9 ff3c 	bl	8002efc <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b02      	cmp	r3, #2
 800908c:	d901      	bls.n	8009092 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e1dc      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009092:	4b2e      	ldr	r3, [pc, #184]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0f0      	beq.n	8009080 <HAL_RCC_OscConfig+0x3d8>
 800909e:	e018      	b.n	80090d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090a0:	4b2a      	ldr	r3, [pc, #168]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a29      	ldr	r2, [pc, #164]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 80090a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090ac:	f7f9 ff26 	bl	8002efc <HAL_GetTick>
 80090b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090b2:	e008      	b.n	80090c6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090b4:	f7f9 ff22 	bl	8002efc <HAL_GetTick>
 80090b8:	4602      	mov	r2, r0
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d901      	bls.n	80090c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e1c2      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090c6:	4b21      	ldr	r3, [pc, #132]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f0      	bne.n	80090b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 8086 	beq.w	80091ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090e0:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <HAL_RCC_OscConfig+0x4a8>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <HAL_RCC_OscConfig+0x4a8>)
 80090e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090ec:	f7f9 ff06 	bl	8002efc <HAL_GetTick>
 80090f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090f4:	f7f9 ff02 	bl	8002efc <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b64      	cmp	r3, #100	; 0x64
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e1a2      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009106:	4b12      	ldr	r3, [pc, #72]	; (8009150 <HAL_RCC_OscConfig+0x4a8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0f0      	beq.n	80090f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d106      	bne.n	8009128 <HAL_RCC_OscConfig+0x480>
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4a0b      	ldr	r2, [pc, #44]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009120:	f043 0301 	orr.w	r3, r3, #1
 8009124:	6713      	str	r3, [r2, #112]	; 0x70
 8009126:	e032      	b.n	800918e <HAL_RCC_OscConfig+0x4e6>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d111      	bne.n	8009154 <HAL_RCC_OscConfig+0x4ac>
 8009130:	4b06      	ldr	r3, [pc, #24]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009134:	4a05      	ldr	r2, [pc, #20]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009136:	f023 0301 	bic.w	r3, r3, #1
 800913a:	6713      	str	r3, [r2, #112]	; 0x70
 800913c:	4b03      	ldr	r3, [pc, #12]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 800913e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009140:	4a02      	ldr	r2, [pc, #8]	; (800914c <HAL_RCC_OscConfig+0x4a4>)
 8009142:	f023 0304 	bic.w	r3, r3, #4
 8009146:	6713      	str	r3, [r2, #112]	; 0x70
 8009148:	e021      	b.n	800918e <HAL_RCC_OscConfig+0x4e6>
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	58024800 	.word	0x58024800
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b05      	cmp	r3, #5
 800915a:	d10c      	bne.n	8009176 <HAL_RCC_OscConfig+0x4ce>
 800915c:	4b83      	ldr	r3, [pc, #524]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800915e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009160:	4a82      	ldr	r2, [pc, #520]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009162:	f043 0304 	orr.w	r3, r3, #4
 8009166:	6713      	str	r3, [r2, #112]	; 0x70
 8009168:	4b80      	ldr	r3, [pc, #512]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800916a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916c:	4a7f      	ldr	r2, [pc, #508]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	6713      	str	r3, [r2, #112]	; 0x70
 8009174:	e00b      	b.n	800918e <HAL_RCC_OscConfig+0x4e6>
 8009176:	4b7d      	ldr	r3, [pc, #500]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	4a7c      	ldr	r2, [pc, #496]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800917c:	f023 0301 	bic.w	r3, r3, #1
 8009180:	6713      	str	r3, [r2, #112]	; 0x70
 8009182:	4b7a      	ldr	r3, [pc, #488]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	4a79      	ldr	r2, [pc, #484]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009188:	f023 0304 	bic.w	r3, r3, #4
 800918c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d015      	beq.n	80091c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009196:	f7f9 feb1 	bl	8002efc <HAL_GetTick>
 800919a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800919c:	e00a      	b.n	80091b4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800919e:	f7f9 fead 	bl	8002efc <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d901      	bls.n	80091b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e14b      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091b4:	4b6d      	ldr	r3, [pc, #436]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80091b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0ee      	beq.n	800919e <HAL_RCC_OscConfig+0x4f6>
 80091c0:	e014      	b.n	80091ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c2:	f7f9 fe9b 	bl	8002efc <HAL_GetTick>
 80091c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091c8:	e00a      	b.n	80091e0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091ca:	f7f9 fe97 	bl	8002efc <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d8:	4293      	cmp	r3, r2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e135      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091e0:	4b62      	ldr	r3, [pc, #392]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1ee      	bne.n	80091ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 812a 	beq.w	800944a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091f6:	4b5d      	ldr	r3, [pc, #372]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091fe:	2b18      	cmp	r3, #24
 8009200:	f000 80ba 	beq.w	8009378 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b02      	cmp	r3, #2
 800920a:	f040 8095 	bne.w	8009338 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800920e:	4b57      	ldr	r3, [pc, #348]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a56      	ldr	r2, [pc, #344]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921a:	f7f9 fe6f 	bl	8002efc <HAL_GetTick>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009222:	f7f9 fe6b 	bl	8002efc <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e10b      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009234:	4b4d      	ldr	r3, [pc, #308]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f0      	bne.n	8009222 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009240:	4b4a      	ldr	r3, [pc, #296]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009244:	4b4a      	ldr	r3, [pc, #296]	; (8009370 <HAL_RCC_OscConfig+0x6c8>)
 8009246:	4013      	ands	r3, r2
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009250:	0112      	lsls	r2, r2, #4
 8009252:	430a      	orrs	r2, r1
 8009254:	4945      	ldr	r1, [pc, #276]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009256:	4313      	orrs	r3, r2
 8009258:	628b      	str	r3, [r1, #40]	; 0x28
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	3b01      	subs	r3, #1
 8009260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	3b01      	subs	r3, #1
 800926a:	025b      	lsls	r3, r3, #9
 800926c:	b29b      	uxth	r3, r3
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	3b01      	subs	r3, #1
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800927c:	431a      	orrs	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	3b01      	subs	r3, #1
 8009284:	061b      	lsls	r3, r3, #24
 8009286:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800928a:	4938      	ldr	r1, [pc, #224]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800928c:	4313      	orrs	r3, r2
 800928e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009290:	4b36      	ldr	r3, [pc, #216]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a35      	ldr	r2, [pc, #212]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800929c:	4b33      	ldr	r3, [pc, #204]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800929e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a0:	4b34      	ldr	r3, [pc, #208]	; (8009374 <HAL_RCC_OscConfig+0x6cc>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092a8:	00d2      	lsls	r2, r2, #3
 80092aa:	4930      	ldr	r1, [pc, #192]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092b0:	4b2e      	ldr	r3, [pc, #184]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	f023 020c 	bic.w	r2, r3, #12
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092bc:	492b      	ldr	r1, [pc, #172]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092c2:	4b2a      	ldr	r3, [pc, #168]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	f023 0202 	bic.w	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	4927      	ldr	r1, [pc, #156]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	4a24      	ldr	r2, [pc, #144]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e0:	4b22      	ldr	r3, [pc, #136]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a21      	ldr	r2, [pc, #132]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092ec:	4b1f      	ldr	r3, [pc, #124]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a1e      	ldr	r2, [pc, #120]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80092f8:	4b1c      	ldr	r3, [pc, #112]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a1b      	ldr	r2, [pc, #108]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009304:	4b19      	ldr	r3, [pc, #100]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a18      	ldr	r2, [pc, #96]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800930a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800930e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009310:	f7f9 fdf4 	bl	8002efc <HAL_GetTick>
 8009314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009318:	f7f9 fdf0 	bl	8002efc <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e090      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0f0      	beq.n	8009318 <HAL_RCC_OscConfig+0x670>
 8009336:	e088      	b.n	800944a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a0b      	ldr	r2, [pc, #44]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 800933e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7f9 fdda 	bl	8002efc <HAL_GetTick>
 8009348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800934c:	f7f9 fdd6 	bl	8002efc <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e076      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <HAL_RCC_OscConfig+0x6c4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x6a4>
 800936a:	e06e      	b.n	800944a <HAL_RCC_OscConfig+0x7a2>
 800936c:	58024400 	.word	0x58024400
 8009370:	fffffc0c 	.word	0xfffffc0c
 8009374:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009378:	4b36      	ldr	r3, [pc, #216]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800937e:	4b35      	ldr	r3, [pc, #212]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 8009380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009382:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b01      	cmp	r3, #1
 800938a:	d031      	beq.n	80093f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f003 0203 	and.w	r2, r3, #3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009396:	429a      	cmp	r2, r3
 8009398:	d12a      	bne.n	80093f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	091b      	lsrs	r3, r3, #4
 800939e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d122      	bne.n	80093f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d11a      	bne.n	80093f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	0a5b      	lsrs	r3, r3, #9
 80093be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d111      	bne.n	80093f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	0c1b      	lsrs	r3, r3, #16
 80093d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093da:	429a      	cmp	r2, r3
 80093dc:	d108      	bne.n	80093f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	0e1b      	lsrs	r3, r3, #24
 80093e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d001      	beq.n	80093f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e02b      	b.n	800944c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80093f4:	4b17      	ldr	r3, [pc, #92]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 80093f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f8:	08db      	lsrs	r3, r3, #3
 80093fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	429a      	cmp	r2, r3
 8009408:	d01f      	beq.n	800944a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800940a:	4b12      	ldr	r3, [pc, #72]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a11      	ldr	r2, [pc, #68]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009416:	f7f9 fd71 	bl	8002efc <HAL_GetTick>
 800941a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800941c:	bf00      	nop
 800941e:	f7f9 fd6d 	bl	8002efc <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009426:	4293      	cmp	r3, r2
 8009428:	d0f9      	beq.n	800941e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800942a:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 800942c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <HAL_RCC_OscConfig+0x7b0>)
 8009430:	4013      	ands	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009436:	00d2      	lsls	r2, r2, #3
 8009438:	4906      	ldr	r1, [pc, #24]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 800943a:	4313      	orrs	r3, r2
 800943c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800943e:	4b05      	ldr	r3, [pc, #20]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <HAL_RCC_OscConfig+0x7ac>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3730      	adds	r7, #48	; 0x30
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	58024400 	.word	0x58024400
 8009458:	ffff0007 	.word	0xffff0007

0800945c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e19c      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009470:	4b8a      	ldr	r3, [pc, #552]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d910      	bls.n	80094a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800947e:	4b87      	ldr	r3, [pc, #540]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f023 020f 	bic.w	r2, r3, #15
 8009486:	4985      	ldr	r1, [pc, #532]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	4313      	orrs	r3, r2
 800948c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800948e:	4b83      	ldr	r3, [pc, #524]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d001      	beq.n	80094a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e184      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d010      	beq.n	80094ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691a      	ldr	r2, [r3, #16]
 80094b0:	4b7b      	ldr	r3, [pc, #492]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d908      	bls.n	80094ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094bc:	4b78      	ldr	r3, [pc, #480]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	4975      	ldr	r1, [pc, #468]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d010      	beq.n	80094fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	4b70      	ldr	r3, [pc, #448]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d908      	bls.n	80094fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ea:	4b6d      	ldr	r3, [pc, #436]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	496a      	ldr	r1, [pc, #424]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0310 	and.w	r3, r3, #16
 8009504:	2b00      	cmp	r3, #0
 8009506:	d010      	beq.n	800952a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699a      	ldr	r2, [r3, #24]
 800950c:	4b64      	ldr	r3, [pc, #400]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009514:	429a      	cmp	r2, r3
 8009516:	d908      	bls.n	800952a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009518:	4b61      	ldr	r3, [pc, #388]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	495e      	ldr	r1, [pc, #376]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009526:	4313      	orrs	r3, r2
 8009528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d010      	beq.n	8009558 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69da      	ldr	r2, [r3, #28]
 800953a:	4b59      	ldr	r3, [pc, #356]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009542:	429a      	cmp	r2, r3
 8009544:	d908      	bls.n	8009558 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009546:	4b56      	ldr	r3, [pc, #344]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4953      	ldr	r1, [pc, #332]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009554:	4313      	orrs	r3, r2
 8009556:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d010      	beq.n	8009586 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	4b4d      	ldr	r3, [pc, #308]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	f003 030f 	and.w	r3, r3, #15
 8009570:	429a      	cmp	r2, r3
 8009572:	d908      	bls.n	8009586 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009574:	4b4a      	ldr	r3, [pc, #296]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f023 020f 	bic.w	r2, r3, #15
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	4947      	ldr	r1, [pc, #284]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009582:	4313      	orrs	r3, r2
 8009584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d055      	beq.n	800963e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009592:	4b43      	ldr	r3, [pc, #268]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4940      	ldr	r1, [pc, #256]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d107      	bne.n	80095bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095ac:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d121      	bne.n	80095fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0f6      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d107      	bne.n	80095d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095c4:	4b36      	ldr	r3, [pc, #216]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d115      	bne.n	80095fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0ea      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d107      	bne.n	80095ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095dc:	4b30      	ldr	r3, [pc, #192]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0de      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095ec:	4b2c      	ldr	r3, [pc, #176]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e0d6      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f023 0207 	bic.w	r2, r3, #7
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	4925      	ldr	r1, [pc, #148]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800960a:	4313      	orrs	r3, r2
 800960c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800960e:	f7f9 fc75 	bl	8002efc <HAL_GetTick>
 8009612:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009614:	e00a      	b.n	800962c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009616:	f7f9 fc71 	bl	8002efc <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	f241 3288 	movw	r2, #5000	; 0x1388
 8009624:	4293      	cmp	r3, r2
 8009626:	d901      	bls.n	800962c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e0be      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	429a      	cmp	r2, r3
 800963c:	d1eb      	bne.n	8009616 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d010      	beq.n	800966c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 030f 	and.w	r3, r3, #15
 8009656:	429a      	cmp	r2, r3
 8009658:	d208      	bcs.n	800966c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800965a:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f023 020f 	bic.w	r2, r3, #15
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	490e      	ldr	r1, [pc, #56]	; (80096a0 <HAL_RCC_ClockConfig+0x244>)
 8009668:	4313      	orrs	r3, r2
 800966a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800966c:	4b0b      	ldr	r3, [pc, #44]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	683a      	ldr	r2, [r7, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d214      	bcs.n	80096a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f023 020f 	bic.w	r2, r3, #15
 8009682:	4906      	ldr	r1, [pc, #24]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	4313      	orrs	r3, r2
 8009688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800968a:	4b04      	ldr	r3, [pc, #16]	; (800969c <HAL_RCC_ClockConfig+0x240>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d005      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e086      	b.n	80097aa <HAL_RCC_ClockConfig+0x34e>
 800969c:	52002000 	.word	0x52002000
 80096a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	4b3f      	ldr	r3, [pc, #252]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096bc:	429a      	cmp	r2, r3
 80096be:	d208      	bcs.n	80096d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096c0:	4b3c      	ldr	r3, [pc, #240]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	4939      	ldr	r1, [pc, #228]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0308 	and.w	r3, r3, #8
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d010      	beq.n	8009700 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	695a      	ldr	r2, [r3, #20]
 80096e2:	4b34      	ldr	r3, [pc, #208]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d208      	bcs.n	8009700 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ee:	4b31      	ldr	r3, [pc, #196]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	492e      	ldr	r1, [pc, #184]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b00      	cmp	r3, #0
 800970a:	d010      	beq.n	800972e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	4b28      	ldr	r3, [pc, #160]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009718:	429a      	cmp	r2, r3
 800971a:	d208      	bcs.n	800972e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800971c:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	4922      	ldr	r1, [pc, #136]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 800972a:	4313      	orrs	r3, r2
 800972c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0320 	and.w	r3, r3, #32
 8009736:	2b00      	cmp	r3, #0
 8009738:	d010      	beq.n	800975c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	69da      	ldr	r2, [r3, #28]
 800973e:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009746:	429a      	cmp	r2, r3
 8009748:	d208      	bcs.n	800975c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800974a:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	4917      	ldr	r1, [pc, #92]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 8009758:	4313      	orrs	r3, r2
 800975a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800975c:	f000 f89e 	bl	800989c <HAL_RCC_GetSysClockFreq>
 8009760:	4602      	mov	r2, r0
 8009762:	4b14      	ldr	r3, [pc, #80]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	0a1b      	lsrs	r3, r3, #8
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	4912      	ldr	r1, [pc, #72]	; (80097b8 <HAL_RCC_ClockConfig+0x35c>)
 800976e:	5ccb      	ldrb	r3, [r1, r3]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
 8009778:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <HAL_RCC_ClockConfig+0x358>)
 800977c:	699b      	ldr	r3, [r3, #24]
 800977e:	f003 030f 	and.w	r3, r3, #15
 8009782:	4a0d      	ldr	r2, [pc, #52]	; (80097b8 <HAL_RCC_ClockConfig+0x35c>)
 8009784:	5cd3      	ldrb	r3, [r2, r3]
 8009786:	f003 031f 	and.w	r3, r3, #31
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	fa22 f303 	lsr.w	r3, r2, r3
 8009790:	4a0a      	ldr	r2, [pc, #40]	; (80097bc <HAL_RCC_ClockConfig+0x360>)
 8009792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009794:	4a0a      	ldr	r2, [pc, #40]	; (80097c0 <HAL_RCC_ClockConfig+0x364>)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800979a:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <HAL_RCC_ClockConfig+0x368>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f9 fb62 	bl	8002e68 <HAL_InitTick>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	58024400 	.word	0x58024400
 80097b8:	080146e4 	.word	0x080146e4
 80097bc:	24000004 	.word	0x24000004
 80097c0:	24000000 	.word	0x24000000
 80097c4:	24000008 	.word	0x24000008

080097c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08c      	sub	sp, #48	; 0x30
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d12a      	bne.n	8009830 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80097da:	4b2d      	ldr	r3, [pc, #180]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 80097dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097e0:	4a2b      	ldr	r2, [pc, #172]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ea:	4b29      	ldr	r3, [pc, #164]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 80097ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80097f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097fe:	2302      	movs	r3, #2
 8009800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009802:	2303      	movs	r3, #3
 8009804:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009806:	2300      	movs	r3, #0
 8009808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800980a:	2300      	movs	r3, #0
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800980e:	f107 031c 	add.w	r3, r7, #28
 8009812:	4619      	mov	r1, r3
 8009814:	481f      	ldr	r0, [pc, #124]	; (8009894 <HAL_RCC_MCOConfig+0xcc>)
 8009816:	f7fd fc5b 	bl	80070d0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800981a:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	430b      	orrs	r3, r1
 8009828:	4919      	ldr	r1, [pc, #100]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 800982a:	4313      	orrs	r3, r2
 800982c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800982e:	e02a      	b.n	8009886 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009830:	4b17      	ldr	r3, [pc, #92]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 8009832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009836:	4a16      	ldr	r2, [pc, #88]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 8009838:	f043 0304 	orr.w	r3, r3, #4
 800983c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009840:	4b13      	ldr	r3, [pc, #76]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 8009842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800984e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009854:	2302      	movs	r3, #2
 8009856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009858:	2303      	movs	r3, #3
 800985a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985c:	2300      	movs	r3, #0
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009860:	2300      	movs	r3, #0
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009864:	f107 031c 	add.w	r3, r7, #28
 8009868:	4619      	mov	r1, r3
 800986a:	480b      	ldr	r0, [pc, #44]	; (8009898 <HAL_RCC_MCOConfig+0xd0>)
 800986c:	f7fd fc30 	bl	80070d0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	01d9      	lsls	r1, r3, #7
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	430b      	orrs	r3, r1
 8009880:	4903      	ldr	r1, [pc, #12]	; (8009890 <HAL_RCC_MCOConfig+0xc8>)
 8009882:	4313      	orrs	r3, r2
 8009884:	610b      	str	r3, [r1, #16]
}
 8009886:	bf00      	nop
 8009888:	3730      	adds	r7, #48	; 0x30
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
 8009894:	58020000 	.word	0x58020000
 8009898:	58020800 	.word	0x58020800

0800989c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800989c:	b480      	push	{r7}
 800989e:	b089      	sub	sp, #36	; 0x24
 80098a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098a2:	4bb3      	ldr	r3, [pc, #716]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098aa:	2b18      	cmp	r3, #24
 80098ac:	f200 8155 	bhi.w	8009b5a <HAL_RCC_GetSysClockFreq+0x2be>
 80098b0:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b6:	bf00      	nop
 80098b8:	0800991d 	.word	0x0800991d
 80098bc:	08009b5b 	.word	0x08009b5b
 80098c0:	08009b5b 	.word	0x08009b5b
 80098c4:	08009b5b 	.word	0x08009b5b
 80098c8:	08009b5b 	.word	0x08009b5b
 80098cc:	08009b5b 	.word	0x08009b5b
 80098d0:	08009b5b 	.word	0x08009b5b
 80098d4:	08009b5b 	.word	0x08009b5b
 80098d8:	08009943 	.word	0x08009943
 80098dc:	08009b5b 	.word	0x08009b5b
 80098e0:	08009b5b 	.word	0x08009b5b
 80098e4:	08009b5b 	.word	0x08009b5b
 80098e8:	08009b5b 	.word	0x08009b5b
 80098ec:	08009b5b 	.word	0x08009b5b
 80098f0:	08009b5b 	.word	0x08009b5b
 80098f4:	08009b5b 	.word	0x08009b5b
 80098f8:	08009949 	.word	0x08009949
 80098fc:	08009b5b 	.word	0x08009b5b
 8009900:	08009b5b 	.word	0x08009b5b
 8009904:	08009b5b 	.word	0x08009b5b
 8009908:	08009b5b 	.word	0x08009b5b
 800990c:	08009b5b 	.word	0x08009b5b
 8009910:	08009b5b 	.word	0x08009b5b
 8009914:	08009b5b 	.word	0x08009b5b
 8009918:	0800994f 	.word	0x0800994f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800991c:	4b94      	ldr	r3, [pc, #592]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b00      	cmp	r3, #0
 8009926:	d009      	beq.n	800993c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009928:	4b91      	ldr	r3, [pc, #580]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	4a90      	ldr	r2, [pc, #576]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
 8009938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800993a:	e111      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800993c:	4b8d      	ldr	r3, [pc, #564]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800993e:	61bb      	str	r3, [r7, #24]
      break;
 8009940:	e10e      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009942:	4b8d      	ldr	r3, [pc, #564]	; (8009b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009944:	61bb      	str	r3, [r7, #24]
      break;
 8009946:	e10b      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009948:	4b8c      	ldr	r3, [pc, #560]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800994a:	61bb      	str	r3, [r7, #24]
      break;
 800994c:	e108      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800994e:	4b88      	ldr	r3, [pc, #544]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009958:	4b85      	ldr	r3, [pc, #532]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995c:	091b      	lsrs	r3, r3, #4
 800995e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009962:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009964:	4b82      	ldr	r3, [pc, #520]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800996e:	4b80      	ldr	r3, [pc, #512]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009972:	08db      	lsrs	r3, r3, #3
 8009974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	fb02 f303 	mul.w	r3, r2, r3
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009986:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80e1 	beq.w	8009b54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b02      	cmp	r3, #2
 8009996:	f000 8083 	beq.w	8009aa0 <HAL_RCC_GetSysClockFreq+0x204>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b02      	cmp	r3, #2
 800999e:	f200 80a1 	bhi.w	8009ae4 <HAL_RCC_GetSysClockFreq+0x248>
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_RCC_GetSysClockFreq+0x114>
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d056      	beq.n	8009a5c <HAL_RCC_GetSysClockFreq+0x1c0>
 80099ae:	e099      	b.n	8009ae4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099b0:	4b6f      	ldr	r3, [pc, #444]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d02d      	beq.n	8009a18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099bc:	4b6c      	ldr	r3, [pc, #432]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	08db      	lsrs	r3, r3, #3
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	4a6b      	ldr	r2, [pc, #428]	; (8009b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099c8:	fa22 f303 	lsr.w	r3, r2, r3
 80099cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	ee07 3a90 	vmov	s15, r3
 80099d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099e6:	4b62      	ldr	r3, [pc, #392]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009a16:	e087      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	ee07 3a90 	vmov	s15, r3
 8009a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2a:	4b51      	ldr	r3, [pc, #324]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a5a:	e065      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6e:	4b40      	ldr	r3, [pc, #256]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009a9e:	e043      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ab2:	4b2f      	ldr	r3, [pc, #188]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ae2:	e021      	b.n	8009b28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009af6:	4b1e      	ldr	r3, [pc, #120]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009b28:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2c:	0a5b      	lsrs	r3, r3, #9
 8009b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b32:	3301      	adds	r3, #1
 8009b34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4c:	ee17 3a90 	vmov	r3, s15
 8009b50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009b52:	e005      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61bb      	str	r3, [r7, #24]
      break;
 8009b58:	e002      	b.n	8009b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009b5a:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b5c:	61bb      	str	r3, [r7, #24]
      break;
 8009b5e:	bf00      	nop
  }

  return sysclockfreq;
 8009b60:	69bb      	ldr	r3, [r7, #24]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3724      	adds	r7, #36	; 0x24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	58024400 	.word	0x58024400
 8009b74:	03d09000 	.word	0x03d09000
 8009b78:	003d0900 	.word	0x003d0900
 8009b7c:	02faf080 	.word	0x02faf080
 8009b80:	46000000 	.word	0x46000000
 8009b84:	4c742400 	.word	0x4c742400
 8009b88:	4a742400 	.word	0x4a742400
 8009b8c:	4c3ebc20 	.word	0x4c3ebc20

08009b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b96:	f7ff fe81 	bl	800989c <HAL_RCC_GetSysClockFreq>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	490f      	ldr	r1, [pc, #60]	; (8009be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ba8:	5ccb      	ldrb	r3, [r1, r3]
 8009baa:	f003 031f 	and.w	r3, r3, #31
 8009bae:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	4a09      	ldr	r2, [pc, #36]	; (8009be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bbe:	5cd3      	ldrb	r3, [r2, r3]
 8009bc0:	f003 031f 	and.w	r3, r3, #31
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bca:	4a07      	ldr	r2, [pc, #28]	; (8009be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bce:	4a07      	ldr	r2, [pc, #28]	; (8009bec <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	58024400 	.word	0x58024400
 8009be4:	080146e4 	.word	0x080146e4
 8009be8:	24000004 	.word	0x24000004
 8009bec:	24000000 	.word	0x24000000

08009bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bf4:	f7ff ffcc 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	091b      	lsrs	r3, r3, #4
 8009c00:	f003 0307 	and.w	r3, r3, #7
 8009c04:	4904      	ldr	r1, [pc, #16]	; (8009c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c06:	5ccb      	ldrb	r3, [r1, r3]
 8009c08:	f003 031f 	and.w	r3, r3, #31
 8009c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	58024400 	.word	0x58024400
 8009c18:	080146e4 	.word	0x080146e4

08009c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c20:	f7ff ffb6 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 8009c24:	4602      	mov	r2, r0
 8009c26:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c28:	69db      	ldr	r3, [r3, #28]
 8009c2a:	0a1b      	lsrs	r3, r3, #8
 8009c2c:	f003 0307 	and.w	r3, r3, #7
 8009c30:	4904      	ldr	r1, [pc, #16]	; (8009c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c32:	5ccb      	ldrb	r3, [r1, r3]
 8009c34:	f003 031f 	and.w	r3, r3, #31
 8009c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	58024400 	.word	0x58024400
 8009c44:	080146e4 	.word	0x080146e4

08009c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c4c:	b0c6      	sub	sp, #280	; 0x118
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c54:	2300      	movs	r3, #0
 8009c56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009c6c:	2500      	movs	r5, #0
 8009c6e:	ea54 0305 	orrs.w	r3, r4, r5
 8009c72:	d049      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7e:	d02f      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c84:	d828      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8a:	d01a      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c90:	d822      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c9a:	d007      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c9c:	e01c      	b.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c9e:	4bab      	ldr	r3, [pc, #684]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	4aaa      	ldr	r2, [pc, #680]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009caa:	e01a      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 fa49 	bl	800c14c <RCCEx_PLL2_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cc0:	e00f      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc6:	3328      	adds	r3, #40	; 0x28
 8009cc8:	2102      	movs	r1, #2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f002 faf0 	bl	800c2b0 <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009cd6:	e004      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cde:	e000      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cea:	4b98      	ldr	r3, [pc, #608]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cf8:	4a94      	ldr	r2, [pc, #592]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	6513      	str	r3, [r2, #80]	; 0x50
 8009cfe:	e003      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009d14:	f04f 0900 	mov.w	r9, #0
 8009d18:	ea58 0309 	orrs.w	r3, r8, r9
 8009d1c:	d047      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d82a      	bhi.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009d28:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d53 	.word	0x08009d53
 8009d38:	08009d69 	.word	0x08009d69
 8009d3c:	08009d87 	.word	0x08009d87
 8009d40:	08009d87 	.word	0x08009d87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d44:	4b81      	ldr	r3, [pc, #516]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	4a80      	ldr	r2, [pc, #512]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d50:	e01a      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d56:	3308      	adds	r3, #8
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f002 f9f6 	bl	800c14c <RCCEx_PLL2_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d66:	e00f      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d6c:	3328      	adds	r3, #40	; 0x28
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f002 fa9d 	bl	800c2b0 <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d7c:	e004      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d84:	e000      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d90:	4b6e      	ldr	r3, [pc, #440]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	f023 0107 	bic.w	r1, r3, #7
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9e:	4a6b      	ldr	r2, [pc, #428]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009da0:	430b      	orrs	r3, r1
 8009da2:	6513      	str	r3, [r2, #80]	; 0x50
 8009da4:	e003      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009daa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009dba:	f04f 0b00 	mov.w	fp, #0
 8009dbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009dc2:	d05b      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009dcc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009dd0:	d03b      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009dd2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009dd6:	d834      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009dd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ddc:	d037      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009dde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009de2:	d82e      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009de4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009de8:	d033      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dee:	d828      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009df4:	d01a      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dfa:	d822      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d003      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009e00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e04:	d007      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009e06:	e01c      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e08:	4b50      	ldr	r3, [pc, #320]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a4f      	ldr	r2, [pc, #316]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e14:	e01e      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 f994 	bl	800c14c <RCCEx_PLL2_Config>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e2a:	e013      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e30:	3328      	adds	r3, #40	; 0x28
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f002 fa3b 	bl	800c2b0 <RCCEx_PLL3_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e40:	e008      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e48:	e004      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e4a:	bf00      	nop
 8009e4c:	e002      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e4e:	bf00      	nop
 8009e50:	e000      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e5c:	4b3b      	ldr	r3, [pc, #236]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e60:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e6c:	4a37      	ldr	r2, [pc, #220]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	6593      	str	r3, [r2, #88]	; 0x58
 8009e72:	e003      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009e96:	460b      	mov	r3, r1
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	d05d      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ea8:	d03b      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009eaa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009eae:	d834      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009eb4:	d037      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009eba:	d82e      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ec0:	d033      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ec6:	d828      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ecc:	d01a      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ed2:	d822      	bhi.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009edc:	d007      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ede:	e01c      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a19      	ldr	r2, [pc, #100]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009eec:	e01e      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 f928 	bl	800c14c <RCCEx_PLL2_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f02:	e013      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f08:	3328      	adds	r3, #40	; 0x28
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f002 f9cf 	bl	800c2b0 <RCCEx_PLL3_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f18:	e008      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f20:	e004      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f22:	bf00      	nop
 8009f24:	e002      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f26:	bf00      	nop
 8009f28:	e000      	b.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10d      	bne.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f34:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f38:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f44:	4a01      	ldr	r2, [pc, #4]	; (8009f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f46:	430b      	orrs	r3, r1
 8009f48:	6593      	str	r3, [r2, #88]	; 0x58
 8009f4a:	e005      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009f64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009f6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4313      	orrs	r3, r2
 8009f76:	d03a      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7e:	2b30      	cmp	r3, #48	; 0x30
 8009f80:	d01f      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009f82:	2b30      	cmp	r3, #48	; 0x30
 8009f84:	d819      	bhi.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d00c      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d815      	bhi.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d019      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009f92:	2b10      	cmp	r3, #16
 8009f94:	d111      	bne.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f96:	4baa      	ldr	r3, [pc, #680]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	4aa9      	ldr	r2, [pc, #676]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009fa2:	e011      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa8:	3308      	adds	r3, #8
 8009faa:	2102      	movs	r1, #2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f002 f8cd 	bl	800c14c <RCCEx_PLL2_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009fb8:	e006      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009fc0:	e002      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009fc2:	bf00      	nop
 8009fc4:	e000      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009fd0:	4b9b      	ldr	r3, [pc, #620]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fde:	4a98      	ldr	r2, [pc, #608]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fe4:	e003      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ffe:	2300      	movs	r3, #0
 800a000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a004:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a008:	460b      	mov	r3, r1
 800a00a:	4313      	orrs	r3, r2
 800a00c:	d051      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a018:	d035      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a01a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a01e:	d82e      	bhi.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a024:	d031      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a02a:	d828      	bhi.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a030:	d01a      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a036:	d822      	bhi.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a040:	d007      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a042:	e01c      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a044:	4b7e      	ldr	r3, [pc, #504]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	4a7d      	ldr	r2, [pc, #500]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a04e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a050:	e01c      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a056:	3308      	adds	r3, #8
 800a058:	2100      	movs	r1, #0
 800a05a:	4618      	mov	r0, r3
 800a05c:	f002 f876 	bl	800c14c <RCCEx_PLL2_Config>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a066:	e011      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06c:	3328      	adds	r3, #40	; 0x28
 800a06e:	2100      	movs	r1, #0
 800a070:	4618      	mov	r0, r3
 800a072:	f002 f91d 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a076:	4603      	mov	r3, r0
 800a078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a07c:	e006      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a084:	e002      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a086:	bf00      	nop
 800a088:	e000      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10a      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a094:	4b6a      	ldr	r3, [pc, #424]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a098:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0a2:	4a67      	ldr	r2, [pc, #412]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6513      	str	r3, [r2, #80]	; 0x50
 800a0a8:	e003      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a0be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	d053      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0dc:	d033      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a0de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0e2:	d82c      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a0e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0e8:	d02f      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a0ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0ee:	d826      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a0f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0f4:	d02b      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a0f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a0fa:	d820      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a100:	d012      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a106:	d81a      	bhi.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d022      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a110:	d115      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a116:	3308      	adds	r3, #8
 800a118:	2101      	movs	r1, #1
 800a11a:	4618      	mov	r0, r3
 800a11c:	f002 f816 	bl	800c14c <RCCEx_PLL2_Config>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a126:	e015      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12c:	3328      	adds	r3, #40	; 0x28
 800a12e:	2101      	movs	r1, #1
 800a130:	4618      	mov	r0, r3
 800a132:	f002 f8bd 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a13c:	e00a      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a144:	e006      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a146:	bf00      	nop
 800a148:	e004      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a14a:	bf00      	nop
 800a14c:	e002      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a14e:	bf00      	nop
 800a150:	e000      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a152:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a154:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a15c:	4b38      	ldr	r3, [pc, #224]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a160:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a16a:	4a35      	ldr	r2, [pc, #212]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a16c:	430b      	orrs	r3, r1
 800a16e:	6513      	str	r3, [r2, #80]	; 0x50
 800a170:	e003      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a172:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a176:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a18a:	2300      	movs	r3, #0
 800a18c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a190:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a194:	460b      	mov	r3, r1
 800a196:	4313      	orrs	r3, r2
 800a198:	d058      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a19e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1a6:	d033      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1ac:	d82c      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b2:	d02f      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b8:	d826      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1be:	d02b      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a1c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1c4:	d820      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ca:	d012      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a1cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1d0:	d81a      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d022      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a1d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1da:	d115      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f001 ffb1 	bl	800c14c <RCCEx_PLL2_Config>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a1f0:	e015      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f6:	3328      	adds	r3, #40	; 0x28
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 f858 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a206:	e00a      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a20e:	e006      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a210:	bf00      	nop
 800a212:	e004      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a214:	bf00      	nop
 800a216:	e002      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a218:	bf00      	nop
 800a21a:	e000      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10e      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a226:	4b06      	ldr	r3, [pc, #24]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a236:	4a02      	ldr	r2, [pc, #8]	; (800a240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a238:	430b      	orrs	r3, r1
 800a23a:	6593      	str	r3, [r2, #88]	; 0x58
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a23e:	bf00      	nop
 800a240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a244:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a248:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a25c:	2300      	movs	r3, #0
 800a25e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a266:	460b      	mov	r3, r1
 800a268:	4313      	orrs	r3, r2
 800a26a:	d037      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a276:	d00e      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27c:	d816      	bhi.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d018      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a286:	d111      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a288:	4bc4      	ldr	r3, [pc, #784]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28c:	4ac3      	ldr	r2, [pc, #780]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a28e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a292:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a294:	e00f      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a29a:	3308      	adds	r3, #8
 800a29c:	2101      	movs	r1, #1
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 ff54 	bl	800c14c <RCCEx_PLL2_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a2aa:	e004      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2be:	4bb7      	ldr	r3, [pc, #732]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	4ab3      	ldr	r2, [pc, #716]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	6513      	str	r3, [r2, #80]	; 0x50
 800a2d2:	e003      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a2e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	d039      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a302:	2b03      	cmp	r3, #3
 800a304:	d81c      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a349 	.word	0x0800a349
 800a310:	0800a31d 	.word	0x0800a31d
 800a314:	0800a32b 	.word	0x0800a32b
 800a318:	0800a349 	.word	0x0800a349
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a31c:	4b9f      	ldr	r3, [pc, #636]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	4a9e      	ldr	r2, [pc, #632]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a328:	e00f      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32e:	3308      	adds	r3, #8
 800a330:	2102      	movs	r1, #2
 800a332:	4618      	mov	r0, r3
 800a334:	f001 ff0a 	bl	800c14c <RCCEx_PLL2_Config>
 800a338:	4603      	mov	r3, r0
 800a33a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a33e:	e004      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a346:	e000      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a34a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a352:	4b92      	ldr	r3, [pc, #584]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a356:	f023 0103 	bic.w	r1, r3, #3
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a360:	4a8e      	ldr	r2, [pc, #568]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a362:	430b      	orrs	r3, r1
 800a364:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a366:	e003      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a368:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a36c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a37c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a380:	2300      	movs	r3, #0
 800a382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a386:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4313      	orrs	r3, r2
 800a38e:	f000 8099 	beq.w	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a392:	4b83      	ldr	r3, [pc, #524]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a82      	ldr	r2, [pc, #520]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a39c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a39e:	f7f8 fdad 	bl	8002efc <HAL_GetTick>
 800a3a2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3a6:	e00b      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3a8:	f7f8 fda8 	bl	8002efc <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b64      	cmp	r3, #100	; 0x64
 800a3b6:	d903      	bls.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3be:	e005      	b.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3c0:	4b77      	ldr	r3, [pc, #476]	; (800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0ed      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a3cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d173      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3d4:	4b71      	ldr	r3, [pc, #452]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3e0:	4053      	eors	r3, r2
 800a3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d015      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3ea:	4b6c      	ldr	r3, [pc, #432]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3f6:	4b69      	ldr	r3, [pc, #420]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fa:	4a68      	ldr	r2, [pc, #416]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a400:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a402:	4b66      	ldr	r3, [pc, #408]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a406:	4a65      	ldr	r2, [pc, #404]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a40c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a40e:	4a63      	ldr	r2, [pc, #396]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a414:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a422:	d118      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a424:	f7f8 fd6a 	bl	8002efc <HAL_GetTick>
 800a428:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a42c:	e00d      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a42e:	f7f8 fd65 	bl	8002efc <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a438:	1ad2      	subs	r2, r2, r3
 800a43a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a43e:	429a      	cmp	r2, r3
 800a440:	d903      	bls.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a448:	e005      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a44a:	4b54      	ldr	r3, [pc, #336]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0eb      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d129      	bne.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a46e:	d10e      	bne.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a470:	4b4a      	ldr	r3, [pc, #296]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a480:	091a      	lsrs	r2, r3, #4
 800a482:	4b48      	ldr	r3, [pc, #288]	; (800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a484:	4013      	ands	r3, r2
 800a486:	4a45      	ldr	r2, [pc, #276]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a488:	430b      	orrs	r3, r1
 800a48a:	6113      	str	r3, [r2, #16]
 800a48c:	e005      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a48e:	4b43      	ldr	r3, [pc, #268]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	4a42      	ldr	r2, [pc, #264]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a494:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a498:	6113      	str	r3, [r2, #16]
 800a49a:	4b40      	ldr	r3, [pc, #256]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a49c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4aa:	4a3c      	ldr	r2, [pc, #240]	; (800a59c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a4ba:	e003      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f002 0301 	and.w	r3, r2, #1
 800a4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a4da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	f000 808f 	beq.w	800a604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ec:	2b28      	cmp	r3, #40	; 0x28
 800a4ee:	d871      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a5dd 	.word	0x0800a5dd
 800a4fc:	0800a5d5 	.word	0x0800a5d5
 800a500:	0800a5d5 	.word	0x0800a5d5
 800a504:	0800a5d5 	.word	0x0800a5d5
 800a508:	0800a5d5 	.word	0x0800a5d5
 800a50c:	0800a5d5 	.word	0x0800a5d5
 800a510:	0800a5d5 	.word	0x0800a5d5
 800a514:	0800a5d5 	.word	0x0800a5d5
 800a518:	0800a5a9 	.word	0x0800a5a9
 800a51c:	0800a5d5 	.word	0x0800a5d5
 800a520:	0800a5d5 	.word	0x0800a5d5
 800a524:	0800a5d5 	.word	0x0800a5d5
 800a528:	0800a5d5 	.word	0x0800a5d5
 800a52c:	0800a5d5 	.word	0x0800a5d5
 800a530:	0800a5d5 	.word	0x0800a5d5
 800a534:	0800a5d5 	.word	0x0800a5d5
 800a538:	0800a5bf 	.word	0x0800a5bf
 800a53c:	0800a5d5 	.word	0x0800a5d5
 800a540:	0800a5d5 	.word	0x0800a5d5
 800a544:	0800a5d5 	.word	0x0800a5d5
 800a548:	0800a5d5 	.word	0x0800a5d5
 800a54c:	0800a5d5 	.word	0x0800a5d5
 800a550:	0800a5d5 	.word	0x0800a5d5
 800a554:	0800a5d5 	.word	0x0800a5d5
 800a558:	0800a5dd 	.word	0x0800a5dd
 800a55c:	0800a5d5 	.word	0x0800a5d5
 800a560:	0800a5d5 	.word	0x0800a5d5
 800a564:	0800a5d5 	.word	0x0800a5d5
 800a568:	0800a5d5 	.word	0x0800a5d5
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a5d5 	.word	0x0800a5d5
 800a574:	0800a5d5 	.word	0x0800a5d5
 800a578:	0800a5dd 	.word	0x0800a5dd
 800a57c:	0800a5d5 	.word	0x0800a5d5
 800a580:	0800a5d5 	.word	0x0800a5d5
 800a584:	0800a5d5 	.word	0x0800a5d5
 800a588:	0800a5d5 	.word	0x0800a5d5
 800a58c:	0800a5d5 	.word	0x0800a5d5
 800a590:	0800a5d5 	.word	0x0800a5d5
 800a594:	0800a5d5 	.word	0x0800a5d5
 800a598:	0800a5dd 	.word	0x0800a5dd
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	58024800 	.word	0x58024800
 800a5a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 fdcb 	bl	800c14c <RCCEx_PLL2_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5bc:	e00f      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c2:	3328      	adds	r3, #40	; 0x28
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 fe72 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a5d2:	e004      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5da:	e000      	b.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5e6:	4bbf      	ldr	r3, [pc, #764]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5f4:	4abb      	ldr	r2, [pc, #748]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	6553      	str	r3, [r2, #84]	; 0x54
 800a5fa:	e003      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a600:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f002 0302 	and.w	r3, r2, #2
 800a610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a614:	2300      	movs	r3, #0
 800a616:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a61a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a61e:	460b      	mov	r3, r1
 800a620:	4313      	orrs	r3, r2
 800a622:	d041      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d824      	bhi.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a62e:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a681 	.word	0x0800a681
 800a638:	0800a64d 	.word	0x0800a64d
 800a63c:	0800a663 	.word	0x0800a663
 800a640:	0800a681 	.word	0x0800a681
 800a644:	0800a681 	.word	0x0800a681
 800a648:	0800a681 	.word	0x0800a681
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a650:	3308      	adds	r3, #8
 800a652:	2101      	movs	r1, #1
 800a654:	4618      	mov	r0, r3
 800a656:	f001 fd79 	bl	800c14c <RCCEx_PLL2_Config>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a660:	e00f      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a666:	3328      	adds	r3, #40	; 0x28
 800a668:	2101      	movs	r1, #1
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fe20 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a676:	e004      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a67e:	e000      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a680:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a682:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10a      	bne.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a68a:	4b96      	ldr	r3, [pc, #600]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68e:	f023 0107 	bic.w	r1, r3, #7
 800a692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a698:	4a92      	ldr	r2, [pc, #584]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a69a:	430b      	orrs	r3, r1
 800a69c:	6553      	str	r3, [r2, #84]	; 0x54
 800a69e:	e003      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f002 0304 	and.w	r3, r2, #4
 800a6b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	d044      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	d825      	bhi.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a6f5 	.word	0x0800a6f5
 800a6e4:	0800a70b 	.word	0x0800a70b
 800a6e8:	0800a729 	.word	0x0800a729
 800a6ec:	0800a729 	.word	0x0800a729
 800a6f0:	0800a729 	.word	0x0800a729
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	3308      	adds	r3, #8
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 fd25 	bl	800c14c <RCCEx_PLL2_Config>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a708:	e00f      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70e:	3328      	adds	r3, #40	; 0x28
 800a710:	2101      	movs	r1, #1
 800a712:	4618      	mov	r0, r3
 800a714:	f001 fdcc 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a71e:	e004      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a726:	e000      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a732:	4b6c      	ldr	r3, [pc, #432]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a736:	f023 0107 	bic.w	r1, r3, #7
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a742:	4a68      	ldr	r2, [pc, #416]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6593      	str	r3, [r2, #88]	; 0x58
 800a748:	e003      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a74e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	f002 0320 	and.w	r3, r2, #32
 800a75e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a762:	2300      	movs	r3, #0
 800a764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4313      	orrs	r3, r2
 800a770:	d055      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a77e:	d033      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a784:	d82c      	bhi.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78a:	d02f      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a790:	d826      	bhi.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a796:	d02b      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a79c:	d820      	bhi.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a79e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a2:	d012      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a7a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7a8:	d81a      	bhi.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d022      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a7ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7b2:	d115      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b8:	3308      	adds	r3, #8
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 fcc5 	bl	800c14c <RCCEx_PLL2_Config>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7c8:	e015      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	3328      	adds	r3, #40	; 0x28
 800a7d0:	2102      	movs	r1, #2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 fd6c 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a7de:	e00a      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7e6:	e006      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7e8:	bf00      	nop
 800a7ea:	e004      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7ec:	bf00      	nop
 800a7ee:	e002      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7f0:	bf00      	nop
 800a7f2:	e000      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a7f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10b      	bne.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7fe:	4b39      	ldr	r3, [pc, #228]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a802:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a80e:	4a35      	ldr	r2, [pc, #212]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a810:	430b      	orrs	r3, r1
 800a812:	6553      	str	r3, [r2, #84]	; 0x54
 800a814:	e003      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a816:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a81a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a82a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a82e:	2300      	movs	r3, #0
 800a830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a834:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a838:	460b      	mov	r3, r1
 800a83a:	4313      	orrs	r3, r2
 800a83c:	d058      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a84a:	d033      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a84c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a850:	d82c      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a856:	d02f      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85c:	d826      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a85e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a862:	d02b      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a864:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a868:	d820      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a86e:	d012      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a874:	d81a      	bhi.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d022      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a87e:	d115      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a884:	3308      	adds	r3, #8
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 fc5f 	bl	800c14c <RCCEx_PLL2_Config>
 800a88e:	4603      	mov	r3, r0
 800a890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a894:	e015      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89a:	3328      	adds	r3, #40	; 0x28
 800a89c:	2102      	movs	r1, #2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 fd06 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a8aa:	e00a      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8b2:	e006      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8b4:	bf00      	nop
 800a8b6:	e004      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a8c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10e      	bne.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8ca:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8da:	4a02      	ldr	r2, [pc, #8]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	6593      	str	r3, [r2, #88]	; 0x58
 800a8e0:	e006      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a8e2:	bf00      	nop
 800a8e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a8fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a900:	2300      	movs	r3, #0
 800a902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a90a:	460b      	mov	r3, r1
 800a90c:	4313      	orrs	r3, r2
 800a90e:	d055      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a918:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a91c:	d033      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a91e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a922:	d82c      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a928:	d02f      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a92a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92e:	d826      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a930:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a934:	d02b      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a936:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a93a:	d820      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a93c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a940:	d012      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a946:	d81a      	bhi.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d022      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a94c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a950:	d115      	bne.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a956:	3308      	adds	r3, #8
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fbf6 	bl	800c14c <RCCEx_PLL2_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a966:	e015      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a96c:	3328      	adds	r3, #40	; 0x28
 800a96e:	2102      	movs	r1, #2
 800a970:	4618      	mov	r0, r3
 800a972:	f001 fc9d 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a976:	4603      	mov	r3, r0
 800a978:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a97c:	e00a      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a984:	e006      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a986:	bf00      	nop
 800a988:	e004      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a98a:	bf00      	nop
 800a98c:	e002      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a98e:	bf00      	nop
 800a990:	e000      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a992:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a994:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10b      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a99c:	4ba0      	ldr	r3, [pc, #640]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9ac:	4a9c      	ldr	r2, [pc, #624]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	6593      	str	r3, [r2, #88]	; 0x58
 800a9b2:	e003      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f002 0308 	and.w	r3, r2, #8
 800a9c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a9d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	d01e      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	3328      	adds	r3, #40	; 0x28
 800a9f0:	2102      	movs	r1, #2
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f001 fc5c 	bl	800c2b0 <RCCEx_PLL3_Config>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800aa04:	4b86      	ldr	r3, [pc, #536]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa14:	4a82      	ldr	r2, [pc, #520]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa16:	430b      	orrs	r3, r1
 800aa18:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f002 0310 	and.w	r3, r2, #16
 800aa26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800aa34:	460b      	mov	r3, r1
 800aa36:	4313      	orrs	r3, r2
 800aa38:	d01e      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aa3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa46:	d10c      	bne.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa4c:	3328      	adds	r3, #40	; 0x28
 800aa4e:	2102      	movs	r1, #2
 800aa50:	4618      	mov	r0, r3
 800aa52:	f001 fc2d 	bl	800c2b0 <RCCEx_PLL3_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d002      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa62:	4b6f      	ldr	r3, [pc, #444]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa72:	4a6b      	ldr	r2, [pc, #428]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800aa84:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa86:	2300      	movs	r3, #0
 800aa88:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4313      	orrs	r3, r2
 800aa92:	d03e      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa0:	d022      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aaa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaa6:	d81b      	bhi.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d003      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800aaac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab0:	d00b      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800aab2:	e015      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab8:	3308      	adds	r3, #8
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 fb45 	bl	800c14c <RCCEx_PLL2_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aac8:	e00f      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aace:	3328      	adds	r3, #40	; 0x28
 800aad0:	2102      	movs	r1, #2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f001 fbec 	bl	800c2b0 <RCCEx_PLL3_Config>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aade:	e004      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aae6:	e000      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800aae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10b      	bne.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aaf2:	4b4b      	ldr	r3, [pc, #300]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aaf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800aafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab02:	4a47      	ldr	r2, [pc, #284]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab04:	430b      	orrs	r3, r1
 800ab06:	6593      	str	r3, [r2, #88]	; 0x58
 800ab08:	e003      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ab12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ab1e:	673b      	str	r3, [r7, #112]	; 0x70
 800ab20:	2300      	movs	r3, #0
 800ab22:	677b      	str	r3, [r7, #116]	; 0x74
 800ab24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	d03b      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab3a:	d01f      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ab3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab40:	d818      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ab42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab46:	d003      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ab48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab4c:	d007      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ab4e:	e011      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab50:	4b33      	ldr	r3, [pc, #204]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a32      	ldr	r2, [pc, #200]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab62:	3328      	adds	r3, #40	; 0x28
 800ab64:	2101      	movs	r1, #1
 800ab66:	4618      	mov	r0, r3
 800ab68:	f001 fba2 	bl	800c2b0 <RCCEx_PLL3_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ab72:	e004      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab7a:	e000      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ab7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10b      	bne.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab86:	4b26      	ldr	r3, [pc, #152]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab96:	4a22      	ldr	r2, [pc, #136]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab98:	430b      	orrs	r3, r1
 800ab9a:	6553      	str	r3, [r2, #84]	; 0x54
 800ab9c:	e003      	b.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800abb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb4:	2300      	movs	r3, #0
 800abb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d034      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800abc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800abcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd0:	d007      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800abd2:	e011      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abd4:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	4a11      	ldr	r2, [pc, #68]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abe0:	e00e      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe6:	3308      	adds	r3, #8
 800abe8:	2102      	movs	r1, #2
 800abea:	4618      	mov	r0, r3
 800abec:	f001 faae 	bl	800c14c <RCCEx_PLL2_Config>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800abf6:	e003      	b.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10d      	bne.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ac08:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac16:	4a02      	ldr	r2, [pc, #8]	; (800ac20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac1c:	e006      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ac1e:	bf00      	nop
 800ac20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ac2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ac38:	663b      	str	r3, [r7, #96]	; 0x60
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ac42:	460b      	mov	r3, r1
 800ac44:	4313      	orrs	r3, r2
 800ac46:	d00c      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4c:	3328      	adds	r3, #40	; 0x28
 800ac4e:	2102      	movs	r1, #2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 fb2d 	bl	800c2b0 <RCCEx_PLL3_Config>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ac6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac70:	2300      	movs	r3, #0
 800ac72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	d036      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac88:	d018      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ac8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac8e:	d811      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac94:	d014      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ac96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac9a:	d80b      	bhi.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d011      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca4:	d106      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca6:	4bb7      	ldr	r3, [pc, #732]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	4ab6      	ldr	r2, [pc, #728]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800acb2:	e008      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acba:	e004      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acbc:	bf00      	nop
 800acbe:	e002      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800acc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10a      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800acce:	4bad      	ldr	r3, [pc, #692]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acdc:	4aa9      	ldr	r2, [pc, #676]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800acde:	430b      	orrs	r3, r1
 800ace0:	6553      	str	r3, [r2, #84]	; 0x54
 800ace2:	e003      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ace8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800acec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800acf8:	653b      	str	r3, [r7, #80]	; 0x50
 800acfa:	2300      	movs	r3, #0
 800acfc:	657b      	str	r3, [r7, #84]	; 0x54
 800acfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ad02:	460b      	mov	r3, r1
 800ad04:	4313      	orrs	r3, r2
 800ad06:	d009      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad08:	4b9e      	ldr	r3, [pc, #632]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	4a9b      	ldr	r2, [pc, #620]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ad28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ad32:	460b      	mov	r3, r1
 800ad34:	4313      	orrs	r3, r2
 800ad36:	d009      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ad38:	4b92      	ldr	r3, [pc, #584]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad3c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad46:	4a8f      	ldr	r2, [pc, #572]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad48:	430b      	orrs	r3, r1
 800ad4a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ad58:	643b      	str	r3, [r7, #64]	; 0x40
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ad62:	460b      	mov	r3, r1
 800ad64:	4313      	orrs	r3, r2
 800ad66:	d00e      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad68:	4b86      	ldr	r3, [pc, #536]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	4a85      	ldr	r2, [pc, #532]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad72:	6113      	str	r3, [r2, #16]
 800ad74:	4b83      	ldr	r3, [pc, #524]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad76:	6919      	ldr	r1, [r3, #16]
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ad80:	4a80      	ldr	r2, [pc, #512]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ad82:	430b      	orrs	r3, r1
 800ad84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ad86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ad92:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	d009      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ada2:	4b78      	ldr	r3, [pc, #480]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ada4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ada6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb0:	4a74      	ldr	r2, [pc, #464]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800adb2:	430b      	orrs	r3, r1
 800adb4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800adc2:	633b      	str	r3, [r7, #48]	; 0x30
 800adc4:	2300      	movs	r3, #0
 800adc6:	637b      	str	r3, [r7, #52]	; 0x34
 800adc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800adcc:	460b      	mov	r3, r1
 800adce:	4313      	orrs	r3, r2
 800add0:	d00a      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800add2:	4b6c      	ldr	r3, [pc, #432]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800add4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800add6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800adda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade2:	4a68      	ldr	r2, [pc, #416]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ade4:	430b      	orrs	r3, r1
 800ade6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	2100      	movs	r1, #0
 800adf2:	62b9      	str	r1, [r7, #40]	; 0x28
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800adfe:	460b      	mov	r3, r1
 800ae00:	4313      	orrs	r3, r2
 800ae02:	d011      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae08:	3308      	adds	r3, #8
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 f99d 	bl	800c14c <RCCEx_PLL2_Config>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	2100      	movs	r1, #0
 800ae32:	6239      	str	r1, [r7, #32]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
 800ae3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4313      	orrs	r3, r2
 800ae42:	d011      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae48:	3308      	adds	r3, #8
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f97d 	bl	800c14c <RCCEx_PLL2_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ae68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	2100      	movs	r1, #0
 800ae72:	61b9      	str	r1, [r7, #24]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	d011      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae88:	3308      	adds	r3, #8
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f001 f95d 	bl	800c14c <RCCEx_PLL2_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ae98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d003      	beq.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aea4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	6139      	str	r1, [r7, #16]
 800aeb4:	f003 0308 	and.w	r3, r3, #8
 800aeb8:	617b      	str	r3, [r7, #20]
 800aeba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aebe:	460b      	mov	r3, r1
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d011      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	3328      	adds	r3, #40	; 0x28
 800aeca:	2100      	movs	r1, #0
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 f9ef 	bl	800c2b0 <RCCEx_PLL3_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800aed8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	2100      	movs	r1, #0
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	f003 0310 	and.w	r3, r3, #16
 800aef8:	60fb      	str	r3, [r7, #12]
 800aefa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aefe:	460b      	mov	r3, r1
 800af00:	4313      	orrs	r3, r2
 800af02:	d011      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af08:	3328      	adds	r3, #40	; 0x28
 800af0a:	2101      	movs	r1, #1
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f9cf 	bl	800c2b0 <RCCEx_PLL3_Config>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800af18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	2100      	movs	r1, #0
 800af32:	6039      	str	r1, [r7, #0]
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800af3e:	460b      	mov	r3, r1
 800af40:	4313      	orrs	r3, r2
 800af42:	d011      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	3328      	adds	r3, #40	; 0x28
 800af4a:	2102      	movs	r1, #2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 f9af 	bl	800c2b0 <RCCEx_PLL3_Config>
 800af52:	4603      	mov	r3, r0
 800af54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800af58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800af68:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	e000      	b.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800af74:	2301      	movs	r3, #1
}
 800af76:	4618      	mov	r0, r3
 800af78:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800af7c:	46bd      	mov	sp, r7
 800af7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af82:	bf00      	nop
 800af84:	58024400 	.word	0x58024400

0800af88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b090      	sub	sp, #64	; 0x40
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af96:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800af9a:	430b      	orrs	r3, r1
 800af9c:	f040 8094 	bne.w	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800afa0:	4b9b      	ldr	r3, [pc, #620]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa4:	f003 0307 	and.w	r3, r3, #7
 800afa8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	2b04      	cmp	r3, #4
 800afae:	f200 8087 	bhi.w	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800afb2:	a201      	add	r2, pc, #4	; (adr r2, 800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800afb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb8:	0800afcd 	.word	0x0800afcd
 800afbc:	0800aff5 	.word	0x0800aff5
 800afc0:	0800b01d 	.word	0x0800b01d
 800afc4:	0800b0b9 	.word	0x0800b0b9
 800afc8:	0800b045 	.word	0x0800b045
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afcc:	4b90      	ldr	r3, [pc, #576]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afd8:	d108      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 ff62 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afe8:	f000 bc93 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff0:	f000 bc8f 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aff4:	4b86      	ldr	r3, [pc, #536]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800affc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b000:	d108      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b002:	f107 0318 	add.w	r3, r7, #24
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fca6 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b010:	f000 bc7f 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b018:	f000 bc7b 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b01c:	4b7c      	ldr	r3, [pc, #496]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b028:	d108      	bne.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b02a:	f107 030c 	add.w	r3, r7, #12
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fde6 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b038:	f000 bc6b 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b040:	f000 bc67 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b044:	4b72      	ldr	r3, [pc, #456]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b04c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b04e:	4b70      	ldr	r3, [pc, #448]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b04      	cmp	r3, #4
 800b058:	d10c      	bne.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d109      	bne.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b060:	4b6b      	ldr	r3, [pc, #428]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	08db      	lsrs	r3, r3, #3
 800b066:	f003 0303 	and.w	r3, r3, #3
 800b06a:	4a6a      	ldr	r2, [pc, #424]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b06c:	fa22 f303 	lsr.w	r3, r2, r3
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b072:	e01f      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b074:	4b66      	ldr	r3, [pc, #408]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b080:	d106      	bne.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b088:	d102      	bne.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b08a:	4b63      	ldr	r3, [pc, #396]	; (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b08e:	e011      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b090:	4b5f      	ldr	r3, [pc, #380]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b09c:	d106      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0a4:	d102      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0a6:	4b5d      	ldr	r3, [pc, #372]	; (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0aa:	e003      	b.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0b0:	f000 bc2f 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0b4:	f000 bc2d 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0b8:	4b59      	ldr	r3, [pc, #356]	; (800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0bc:	f000 bc29 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c4:	f000 bc25 	b.w	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b0d0:	430b      	orrs	r3, r1
 800b0d2:	f040 80a7 	bne.w	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b0d6:	4b4e      	ldr	r3, [pc, #312]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b0de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0e6:	d054      	beq.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0ee:	f200 808b 	bhi.w	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b0f8:	f000 8083 	beq.w	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b102:	f200 8081 	bhi.w	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b10c:	d02f      	beq.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b114:	d878      	bhi.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d004      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b122:	d012      	beq.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b124:	e070      	b.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b126:	4b3a      	ldr	r3, [pc, #232]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b12e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b132:	d107      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 feb5 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b142:	e3e6      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b148:	e3e3      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b14a:	4b31      	ldr	r3, [pc, #196]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b156:	d107      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b158:	f107 0318 	add.w	r3, r7, #24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 fbfb 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b166:	e3d4      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b16c:	e3d1      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b16e:	4b28      	ldr	r3, [pc, #160]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b17a:	d107      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17c:	f107 030c 	add.w	r3, r7, #12
 800b180:	4618      	mov	r0, r3
 800b182:	f000 fd3d 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18a:	e3c2      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b190:	e3bf      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b192:	4b1f      	ldr	r3, [pc, #124]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b19a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b19c:	4b1c      	ldr	r3, [pc, #112]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d10c      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d109      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ae:	4b18      	ldr	r3, [pc, #96]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	08db      	lsrs	r3, r3, #3
 800b1b4:	f003 0303 	and.w	r3, r3, #3
 800b1b8:	4a16      	ldr	r2, [pc, #88]	; (800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c0:	e01e      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1c2:	4b13      	ldr	r3, [pc, #76]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ce:	d106      	bne.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1d6:	d102      	bne.n	800b1de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1dc:	e010      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ea:	d106      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f2:	d102      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1f4:	4b09      	ldr	r3, [pc, #36]	; (800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f8:	e002      	b.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1fe:	e388      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b200:	e387      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b202:	4b07      	ldr	r3, [pc, #28]	; (800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b206:	e384      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20c:	e381      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b20e:	bf00      	nop
 800b210:	58024400 	.word	0x58024400
 800b214:	03d09000 	.word	0x03d09000
 800b218:	003d0900 	.word	0x003d0900
 800b21c:	02faf080 	.word	0x02faf080
 800b220:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b228:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b22c:	430b      	orrs	r3, r1
 800b22e:	f040 809c 	bne.w	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b232:	4b9e      	ldr	r3, [pc, #632]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b23a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b242:	d054      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b24a:	f200 808b 	bhi.w	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b254:	f000 8083 	beq.w	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b25e:	f200 8081 	bhi.w	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b268:	d02f      	beq.n	800b2ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b270:	d878      	bhi.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	2b00      	cmp	r3, #0
 800b276:	d004      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b27e:	d012      	beq.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b280:	e070      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b282:	4b8a      	ldr	r3, [pc, #552]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b28a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b28e:	d107      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b294:	4618      	mov	r0, r3
 800b296:	f000 fe07 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29e:	e338      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2a4:	e335      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2a6:	4b81      	ldr	r3, [pc, #516]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b2:	d107      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b4:	f107 0318 	add.w	r3, r7, #24
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fb4d 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c2:	e326      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c8:	e323      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ca:	4b78      	ldr	r3, [pc, #480]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d6:	d107      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d8:	f107 030c 	add.w	r3, r7, #12
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fc8f 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e6:	e314      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ec:	e311      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2ee:	4b6f      	ldr	r3, [pc, #444]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2f8:	4b6c      	ldr	r3, [pc, #432]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0304 	and.w	r3, r3, #4
 800b300:	2b04      	cmp	r3, #4
 800b302:	d10c      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30a:	4b68      	ldr	r3, [pc, #416]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	08db      	lsrs	r3, r3, #3
 800b310:	f003 0303 	and.w	r3, r3, #3
 800b314:	4a66      	ldr	r2, [pc, #408]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b316:	fa22 f303 	lsr.w	r3, r2, r3
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31c:	e01e      	b.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b31e:	4b63      	ldr	r3, [pc, #396]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32a:	d106      	bne.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b332:	d102      	bne.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b334:	4b5f      	ldr	r3, [pc, #380]	; (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b338:	e010      	b.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b33a:	4b5c      	ldr	r3, [pc, #368]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b346:	d106      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b34e:	d102      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b350:	4b59      	ldr	r3, [pc, #356]	; (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b354:	e002      	b.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b35a:	e2da      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b35c:	e2d9      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b35e:	4b57      	ldr	r3, [pc, #348]	; (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b362:	e2d6      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b368:	e2d3      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b372:	430b      	orrs	r3, r1
 800b374:	f040 80a7 	bne.w	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b378:	4b4c      	ldr	r3, [pc, #304]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b380:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b388:	d055      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b390:	f200 8096 	bhi.w	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b39a:	f000 8084 	beq.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b3a4:	f200 808c 	bhi.w	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3ae:	d030      	beq.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3b6:	f200 8083 	bhi.w	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c6:	d012      	beq.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b3c8:	e07a      	b.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ca:	4b38      	ldr	r3, [pc, #224]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3d6:	d107      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 fd63 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e6:	e294      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ec:	e291      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ee:	4b2f      	ldr	r3, [pc, #188]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3fa:	d107      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3fc:	f107 0318 	add.w	r3, r7, #24
 800b400:	4618      	mov	r0, r3
 800b402:	f000 faa9 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b40a:	e282      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b410:	e27f      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b412:	4b26      	ldr	r3, [pc, #152]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b41e:	d107      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	4618      	mov	r0, r3
 800b426:	f000 fbeb 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42e:	e270      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b434:	e26d      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b436:	4b1d      	ldr	r3, [pc, #116]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b43a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b440:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b04      	cmp	r3, #4
 800b44a:	d10c      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d109      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b452:	4b16      	ldr	r3, [pc, #88]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	08db      	lsrs	r3, r3, #3
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	4a14      	ldr	r2, [pc, #80]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b45e:	fa22 f303 	lsr.w	r3, r2, r3
 800b462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b464:	e01e      	b.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b466:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b472:	d106      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b47a:	d102      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b480:	e010      	b.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b482:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b48a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b48e:	d106      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b496:	d102      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49c:	e002      	b.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4a2:	e236      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4a4:	e235      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4a6:	4b05      	ldr	r3, [pc, #20]	; (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4aa:	e232      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4ac:	58024400 	.word	0x58024400
 800b4b0:	03d09000 	.word	0x03d09000
 800b4b4:	003d0900 	.word	0x003d0900
 800b4b8:	02faf080 	.word	0x02faf080
 800b4bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c4:	e225      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b4ce:	430b      	orrs	r3, r1
 800b4d0:	f040 8085 	bne.w	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b4d4:	4b9c      	ldr	r3, [pc, #624]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b4dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4e4:	d06b      	beq.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4ec:	d874      	bhi.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4f4:	d056      	beq.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4fc:	d86c      	bhi.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b504:	d03b      	beq.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b50c:	d864      	bhi.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b514:	d021      	beq.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b51c:	d85c      	bhi.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	2b00      	cmp	r3, #0
 800b522:	d004      	beq.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b52a:	d004      	beq.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b52c:	e054      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b52e:	f7fe fb5f 	bl	8009bf0 <HAL_RCC_GetPCLK1Freq>
 800b532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b534:	e1ed      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b536:	4b84      	ldr	r3, [pc, #528]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b542:	d107      	bne.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b544:	f107 0318 	add.w	r3, r7, #24
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fa05 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b552:	e1de      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b558:	e1db      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b55a:	4b7b      	ldr	r3, [pc, #492]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b566:	d107      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b568:	f107 030c 	add.w	r3, r7, #12
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fb47 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b576:	e1cc      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b57c:	e1c9      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b57e:	4b72      	ldr	r3, [pc, #456]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0304 	and.w	r3, r3, #4
 800b586:	2b04      	cmp	r3, #4
 800b588:	d109      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b58a:	4b6f      	ldr	r3, [pc, #444]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	08db      	lsrs	r3, r3, #3
 800b590:	f003 0303 	and.w	r3, r3, #3
 800b594:	4a6d      	ldr	r2, [pc, #436]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b596:	fa22 f303 	lsr.w	r3, r2, r3
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b59c:	e1b9      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a2:	e1b6      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5a4:	4b68      	ldr	r3, [pc, #416]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b0:	d102      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b5b2:	4b67      	ldr	r3, [pc, #412]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b6:	e1ac      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5bc:	e1a9      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5be:	4b62      	ldr	r3, [pc, #392]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ca:	d102      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b5cc:	4b61      	ldr	r3, [pc, #388]	; (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d0:	e19f      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d6:	e19c      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5dc:	e199      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	d173      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b5ea:	4b57      	ldr	r3, [pc, #348]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b5f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fa:	d02f      	beq.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b602:	d863      	bhi.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	2b00      	cmp	r3, #0
 800b608:	d004      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b610:	d012      	beq.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b612:	e05b      	b.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b614:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b61c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b620:	d107      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b622:	f107 0318 	add.w	r3, r7, #24
 800b626:	4618      	mov	r0, r3
 800b628:	f000 f996 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b630:	e16f      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b636:	e16c      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b638:	4b43      	ldr	r3, [pc, #268]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b644:	d107      	bne.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b646:	f107 030c 	add.w	r3, r7, #12
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fad8 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b654:	e15d      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65a:	e15a      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b65c:	4b3a      	ldr	r3, [pc, #232]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b65e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b664:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b666:	4b38      	ldr	r3, [pc, #224]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d10c      	bne.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b674:	2b00      	cmp	r3, #0
 800b676:	d109      	bne.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b678:	4b33      	ldr	r3, [pc, #204]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	08db      	lsrs	r3, r3, #3
 800b67e:	f003 0303 	and.w	r3, r3, #3
 800b682:	4a32      	ldr	r2, [pc, #200]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b684:	fa22 f303 	lsr.w	r3, r2, r3
 800b688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b68a:	e01e      	b.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b68c:	4b2e      	ldr	r3, [pc, #184]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b698:	d106      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6a0:	d102      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6a2:	4b2b      	ldr	r3, [pc, #172]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a6:	e010      	b.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6a8:	4b27      	ldr	r3, [pc, #156]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6b4:	d106      	bne.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6bc:	d102      	bne.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6be:	4b25      	ldr	r3, [pc, #148]	; (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c2:	e002      	b.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b6c8:	e123      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6ca:	e122      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d0:	e11f      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b6da:	430b      	orrs	r3, r1
 800b6dc:	d13c      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b6de:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f4:	d012      	beq.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b6f6:	e023      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6f8:	4b13      	ldr	r3, [pc, #76]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b704:	d107      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 fbcc 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b714:	e0fd      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b71a:	e0fa      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b71c:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b728:	d107      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b72a:	f107 0318 	add.w	r3, r7, #24
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f912 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b738:	e0eb      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b73e:	e0e8      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b744:	e0e5      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b746:	bf00      	nop
 800b748:	58024400 	.word	0x58024400
 800b74c:	03d09000 	.word	0x03d09000
 800b750:	003d0900 	.word	0x003d0900
 800b754:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b75c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b760:	430b      	orrs	r3, r1
 800b762:	f040 8085 	bne.w	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b766:	4b6d      	ldr	r3, [pc, #436]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b76e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b776:	d06b      	beq.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b77e:	d874      	bhi.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b786:	d056      	beq.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b78e:	d86c      	bhi.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b796:	d03b      	beq.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b79e:	d864      	bhi.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7a6:	d021      	beq.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ae:	d85c      	bhi.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d004      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7bc:	d004      	beq.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b7be:	e054      	b.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b7c0:	f000 f8b4 	bl	800b92c <HAL_RCCEx_GetD3PCLK1Freq>
 800b7c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7c6:	e0a4      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7c8:	4b54      	ldr	r3, [pc, #336]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7d4:	d107      	bne.n	800b7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7d6:	f107 0318 	add.w	r3, r7, #24
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f8bc 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7e4:	e095      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ea:	e092      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7ec:	4b4b      	ldr	r3, [pc, #300]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f8:	d107      	bne.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7fa:	f107 030c 	add.w	r3, r7, #12
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 f9fe 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b808:	e083      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b80e:	e080      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b810:	4b42      	ldr	r3, [pc, #264]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b04      	cmp	r3, #4
 800b81a:	d109      	bne.n	800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b81c:	4b3f      	ldr	r3, [pc, #252]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	08db      	lsrs	r3, r3, #3
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	4a3e      	ldr	r2, [pc, #248]	; (800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b828:	fa22 f303 	lsr.w	r3, r2, r3
 800b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b82e:	e070      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b834:	e06d      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b836:	4b39      	ldr	r3, [pc, #228]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b842:	d102      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b844:	4b37      	ldr	r3, [pc, #220]	; (800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b848:	e063      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84e:	e060      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b850:	4b32      	ldr	r3, [pc, #200]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b85c:	d102      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b85e:	4b32      	ldr	r3, [pc, #200]	; (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b862:	e056      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b868:	e053      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b86e:	e050      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b874:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b878:	430b      	orrs	r3, r1
 800b87a:	d148      	bne.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b87c:	4b27      	ldr	r3, [pc, #156]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b880:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b884:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b88c:	d02a      	beq.n	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b894:	d838      	bhi.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a2:	d00d      	beq.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b8a4:	e030      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8a6:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b2:	d102      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	; (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8b8:	e02b      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8be:	e028      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8c0:	4b16      	ldr	r3, [pc, #88]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8cc:	d107      	bne.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fae8 	bl	800bea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8dc:	e019      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8e2:	e016      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8f0:	d107      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f2:	f107 0318 	add.w	r3, r7, #24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f82e 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b900:	e007      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b906:	e004      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b90c:	e001      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b914:	4618      	mov	r0, r3
 800b916:	3740      	adds	r7, #64	; 0x40
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	58024400 	.word	0x58024400
 800b920:	03d09000 	.word	0x03d09000
 800b924:	003d0900 	.word	0x003d0900
 800b928:	02faf080 	.word	0x02faf080

0800b92c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b930:	f7fe f92e 	bl	8009b90 <HAL_RCC_GetHCLKFreq>
 800b934:	4602      	mov	r2, r0
 800b936:	4b06      	ldr	r3, [pc, #24]	; (800b950 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	091b      	lsrs	r3, r3, #4
 800b93c:	f003 0307 	and.w	r3, r3, #7
 800b940:	4904      	ldr	r1, [pc, #16]	; (800b954 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b942:	5ccb      	ldrb	r3, [r1, r3]
 800b944:	f003 031f 	and.w	r3, r3, #31
 800b948:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	58024400 	.word	0x58024400
 800b954:	080146e4 	.word	0x080146e4

0800b958 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b958:	b480      	push	{r7}
 800b95a:	b089      	sub	sp, #36	; 0x24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b960:	4ba1      	ldr	r3, [pc, #644]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b96a:	4b9f      	ldr	r3, [pc, #636]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96e:	0b1b      	lsrs	r3, r3, #12
 800b970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b974:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b976:	4b9c      	ldr	r3, [pc, #624]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	091b      	lsrs	r3, r3, #4
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b982:	4b99      	ldr	r3, [pc, #612]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b986:	08db      	lsrs	r3, r3, #3
 800b988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	fb02 f303 	mul.w	r3, r2, r3
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 8111 	beq.w	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	f000 8083 	beq.w	800bab4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	f200 80a1 	bhi.w	800baf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d056      	beq.n	800ba70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b9c2:	e099      	b.n	800baf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c4:	4b88      	ldr	r3, [pc, #544]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0320 	and.w	r3, r3, #32
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d02d      	beq.n	800ba2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d0:	4b85      	ldr	r3, [pc, #532]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	08db      	lsrs	r3, r3, #3
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	4a84      	ldr	r2, [pc, #528]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	ee07 3a90 	vmov	s15, r3
 800b9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fa:	4b7b      	ldr	r3, [pc, #492]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba2a:	e087      	b.n	800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3e:	4b6a      	ldr	r3, [pc, #424]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6e:	e065      	b.n	800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba82:	4b59      	ldr	r3, [pc, #356]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab2:	e043      	b.n	800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac6:	4b48      	ldr	r3, [pc, #288]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bada:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baf6:	e021      	b.n	800bb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	ee07 3a90 	vmov	s15, r3
 800bafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0a:	4b37      	ldr	r3, [pc, #220]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb12:	ee07 3a90 	vmov	s15, r3
 800bb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb3c:	4b2a      	ldr	r3, [pc, #168]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	0a5b      	lsrs	r3, r3, #9
 800bb42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb62:	ee17 2a90 	vmov	r2, s15
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb6a:	4b1f      	ldr	r3, [pc, #124]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	0c1b      	lsrs	r3, r3, #16
 800bb70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb74:	ee07 3a90 	vmov	s15, r3
 800bb78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb84:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb90:	ee17 2a90 	vmov	r2, s15
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bb98:	4b13      	ldr	r3, [pc, #76]	; (800bbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9c:	0e1b      	lsrs	r3, r3, #24
 800bb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbbe:	ee17 2a90 	vmov	r2, s15
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbc6:	e008      	b.n	800bbda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	609a      	str	r2, [r3, #8]
}
 800bbda:	bf00      	nop
 800bbdc:	3724      	adds	r7, #36	; 0x24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	58024400 	.word	0x58024400
 800bbec:	03d09000 	.word	0x03d09000
 800bbf0:	46000000 	.word	0x46000000
 800bbf4:	4c742400 	.word	0x4c742400
 800bbf8:	4a742400 	.word	0x4a742400
 800bbfc:	4c3ebc20 	.word	0x4c3ebc20

0800bc00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b089      	sub	sp, #36	; 0x24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc08:	4ba1      	ldr	r3, [pc, #644]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0c:	f003 0303 	and.w	r3, r3, #3
 800bc10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc12:	4b9f      	ldr	r3, [pc, #636]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc16:	0d1b      	lsrs	r3, r3, #20
 800bc18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc1e:	4b9c      	ldr	r3, [pc, #624]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc22:	0a1b      	lsrs	r3, r3, #8
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc2a:	4b99      	ldr	r3, [pc, #612]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc2e:	08db      	lsrs	r3, r3, #3
 800bc30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
 800bc3a:	ee07 3a90 	vmov	s15, r3
 800bc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 8111 	beq.w	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	f000 8083 	beq.w	800bd5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	f200 80a1 	bhi.w	800bda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d056      	beq.n	800bd18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc6a:	e099      	b.n	800bda0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc6c:	4b88      	ldr	r3, [pc, #544]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0320 	and.w	r3, r3, #32
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d02d      	beq.n	800bcd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc78:	4b85      	ldr	r3, [pc, #532]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	08db      	lsrs	r3, r3, #3
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	4a84      	ldr	r2, [pc, #528]	; (800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
 800bc88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	ee07 3a90 	vmov	s15, r3
 800bc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca2:	4b7b      	ldr	r3, [pc, #492]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcd2:	e087      	b.n	800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce6:	4b6a      	ldr	r3, [pc, #424]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd16:	e065      	b.n	800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2a:	4b59      	ldr	r3, [pc, #356]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd5a:	e043      	b.n	800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd6e:	4b48      	ldr	r3, [pc, #288]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd76:	ee07 3a90 	vmov	s15, r3
 800bd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd9e:	e021      	b.n	800bde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb2:	4b37      	ldr	r3, [pc, #220]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdba:	ee07 3a90 	vmov	s15, r3
 800bdbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bde2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bde4:	4b2a      	ldr	r3, [pc, #168]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	0a5b      	lsrs	r3, r3, #9
 800bdea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800be02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be0a:	ee17 2a90 	vmov	r2, s15
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be12:	4b1f      	ldr	r3, [pc, #124]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	0c1b      	lsrs	r3, r3, #16
 800be18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be38:	ee17 2a90 	vmov	r2, s15
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be40:	4b13      	ldr	r3, [pc, #76]	; (800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be44:	0e1b      	lsrs	r3, r3, #24
 800be46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4a:	ee07 3a90 	vmov	s15, r3
 800be4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be66:	ee17 2a90 	vmov	r2, s15
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be6e:	e008      	b.n	800be82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	609a      	str	r2, [r3, #8]
}
 800be82:	bf00      	nop
 800be84:	3724      	adds	r7, #36	; 0x24
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	58024400 	.word	0x58024400
 800be94:	03d09000 	.word	0x03d09000
 800be98:	46000000 	.word	0x46000000
 800be9c:	4c742400 	.word	0x4c742400
 800bea0:	4a742400 	.word	0x4a742400
 800bea4:	4c3ebc20 	.word	0x4c3ebc20

0800bea8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b089      	sub	sp, #36	; 0x24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800beb0:	4ba0      	ldr	r3, [pc, #640]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800beb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb4:	f003 0303 	and.w	r3, r3, #3
 800beb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800beba:	4b9e      	ldr	r3, [pc, #632]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebe:	091b      	lsrs	r3, r3, #4
 800bec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bec4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bec6:	4b9b      	ldr	r3, [pc, #620]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bed0:	4b98      	ldr	r3, [pc, #608]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bed4:	08db      	lsrs	r3, r3, #3
 800bed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	fb02 f303 	mul.w	r3, r2, r3
 800bee0:	ee07 3a90 	vmov	s15, r3
 800bee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8111 	beq.w	800c116 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	f000 8083 	beq.w	800c002 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	f200 80a1 	bhi.w	800c046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d056      	beq.n	800bfbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf10:	e099      	b.n	800c046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf12:	4b88      	ldr	r3, [pc, #544]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 0320 	and.w	r3, r3, #32
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d02d      	beq.n	800bf7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf1e:	4b85      	ldr	r3, [pc, #532]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	08db      	lsrs	r3, r3, #3
 800bf24:	f003 0303 	and.w	r3, r3, #3
 800bf28:	4a83      	ldr	r2, [pc, #524]	; (800c138 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	ee07 3a90 	vmov	s15, r3
 800bf40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf48:	4b7a      	ldr	r3, [pc, #488]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf50:	ee07 3a90 	vmov	s15, r3
 800bf54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf58:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf78:	e087      	b.n	800c08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	ee07 3a90 	vmov	s15, r3
 800bf80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8c:	4b69      	ldr	r3, [pc, #420]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf94:	ee07 3a90 	vmov	s15, r3
 800bf98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfbc:	e065      	b.n	800c08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	ee07 3a90 	vmov	s15, r3
 800bfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c144 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bfcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd0:	4b58      	ldr	r3, [pc, #352]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd8:	ee07 3a90 	vmov	s15, r3
 800bfdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c000:	e043      	b.n	800c08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	ee07 3a90 	vmov	s15, r3
 800c008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c014:	4b47      	ldr	r3, [pc, #284]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c01c:	ee07 3a90 	vmov	s15, r3
 800c020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c024:	ed97 6a03 	vldr	s12, [r7, #12]
 800c028:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c044:	e021      	b.n	800c08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	ee07 3a90 	vmov	s15, r3
 800c04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c050:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c058:	4b36      	ldr	r3, [pc, #216]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c060:	ee07 3a90 	vmov	s15, r3
 800c064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c068:	ed97 6a03 	vldr	s12, [r7, #12]
 800c06c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c088:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c08a:	4b2a      	ldr	r3, [pc, #168]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	0a5b      	lsrs	r3, r3, #9
 800c090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c09c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0b0:	ee17 2a90 	vmov	r2, s15
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c0b8:	4b1e      	ldr	r3, [pc, #120]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0bc:	0c1b      	lsrs	r3, r3, #16
 800c0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0de:	ee17 2a90 	vmov	r2, s15
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c0e6:	4b13      	ldr	r3, [pc, #76]	; (800c134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ea:	0e1b      	lsrs	r3, r3, #24
 800c0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c100:	edd7 6a07 	vldr	s13, [r7, #28]
 800c104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10c:	ee17 2a90 	vmov	r2, s15
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c114:	e008      	b.n	800c128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	609a      	str	r2, [r3, #8]
}
 800c128:	bf00      	nop
 800c12a:	3724      	adds	r7, #36	; 0x24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr
 800c134:	58024400 	.word	0x58024400
 800c138:	03d09000 	.word	0x03d09000
 800c13c:	46000000 	.word	0x46000000
 800c140:	4c742400 	.word	0x4c742400
 800c144:	4a742400 	.word	0x4a742400
 800c148:	4c3ebc20 	.word	0x4c3ebc20

0800c14c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c15a:	4b53      	ldr	r3, [pc, #332]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15e:	f003 0303 	and.w	r3, r3, #3
 800c162:	2b03      	cmp	r3, #3
 800c164:	d101      	bne.n	800c16a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	e099      	b.n	800c29e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c16a:	4b4f      	ldr	r3, [pc, #316]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a4e      	ldr	r2, [pc, #312]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c170:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c176:	f7f6 fec1 	bl	8002efc <HAL_GetTick>
 800c17a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c17c:	e008      	b.n	800c190 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c17e:	f7f6 febd 	bl	8002efc <HAL_GetTick>
 800c182:	4602      	mov	r2, r0
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d901      	bls.n	800c190 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e086      	b.n	800c29e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c190:	4b45      	ldr	r3, [pc, #276]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1f0      	bne.n	800c17e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c19c:	4b42      	ldr	r3, [pc, #264]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	031b      	lsls	r3, r3, #12
 800c1aa:	493f      	ldr	r1, [pc, #252]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	628b      	str	r3, [r1, #40]	; 0x28
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	3b01      	subs	r3, #1
 800c1c0:	025b      	lsls	r3, r3, #9
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	431a      	orrs	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	041b      	lsls	r3, r3, #16
 800c1ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1d2:	431a      	orrs	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	691b      	ldr	r3, [r3, #16]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	061b      	lsls	r3, r3, #24
 800c1dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1e0:	4931      	ldr	r1, [pc, #196]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1e6:	4b30      	ldr	r3, [pc, #192]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	695b      	ldr	r3, [r3, #20]
 800c1f2:	492d      	ldr	r1, [pc, #180]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1f8:	4b2b      	ldr	r3, [pc, #172]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	f023 0220 	bic.w	r2, r3, #32
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	699b      	ldr	r3, [r3, #24]
 800c204:	4928      	ldr	r1, [pc, #160]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c206:	4313      	orrs	r3, r2
 800c208:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c20a:	4b27      	ldr	r3, [pc, #156]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20e:	4a26      	ldr	r2, [pc, #152]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c210:	f023 0310 	bic.w	r3, r3, #16
 800c214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c216:	4b24      	ldr	r3, [pc, #144]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c21a:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <RCCEx_PLL2_Config+0x160>)
 800c21c:	4013      	ands	r3, r2
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	69d2      	ldr	r2, [r2, #28]
 800c222:	00d2      	lsls	r2, r2, #3
 800c224:	4920      	ldr	r1, [pc, #128]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c226:	4313      	orrs	r3, r2
 800c228:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c22a:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22e:	4a1e      	ldr	r2, [pc, #120]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c230:	f043 0310 	orr.w	r3, r3, #16
 800c234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d106      	bne.n	800c24a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c23c:	4b1a      	ldr	r3, [pc, #104]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	4a19      	ldr	r2, [pc, #100]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c246:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c248:	e00f      	b.n	800c26a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d106      	bne.n	800c25e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c250:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	4a14      	ldr	r2, [pc, #80]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c25a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c25c:	e005      	b.n	800c26a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c25e:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c262:	4a11      	ldr	r2, [pc, #68]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c268:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c26a:	4b0f      	ldr	r3, [pc, #60]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a0e      	ldr	r2, [pc, #56]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c276:	f7f6 fe41 	bl	8002efc <HAL_GetTick>
 800c27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c27c:	e008      	b.n	800c290 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c27e:	f7f6 fe3d 	bl	8002efc <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d901      	bls.n	800c290 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e006      	b.n	800c29e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c290:	4b05      	ldr	r3, [pc, #20]	; (800c2a8 <RCCEx_PLL2_Config+0x15c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0f0      	beq.n	800c27e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	ffff0007 	.word	0xffff0007

0800c2b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2be:	4b53      	ldr	r3, [pc, #332]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2c2:	f003 0303 	and.w	r3, r3, #3
 800c2c6:	2b03      	cmp	r3, #3
 800c2c8:	d101      	bne.n	800c2ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e099      	b.n	800c402 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2ce:	4b4f      	ldr	r3, [pc, #316]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a4e      	ldr	r2, [pc, #312]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2da:	f7f6 fe0f 	bl	8002efc <HAL_GetTick>
 800c2de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2e0:	e008      	b.n	800c2f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2e2:	f7f6 fe0b 	bl	8002efc <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	2b02      	cmp	r3, #2
 800c2ee:	d901      	bls.n	800c2f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e086      	b.n	800c402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2f4:	4b45      	ldr	r3, [pc, #276]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1f0      	bne.n	800c2e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c300:	4b42      	ldr	r3, [pc, #264]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c304:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	051b      	lsls	r3, r3, #20
 800c30e:	493f      	ldr	r1, [pc, #252]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c310:	4313      	orrs	r3, r2
 800c312:	628b      	str	r3, [r1, #40]	; 0x28
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	3b01      	subs	r3, #1
 800c31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	3b01      	subs	r3, #1
 800c324:	025b      	lsls	r3, r3, #9
 800c326:	b29b      	uxth	r3, r3
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	3b01      	subs	r3, #1
 800c330:	041b      	lsls	r3, r3, #16
 800c332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	061b      	lsls	r3, r3, #24
 800c340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c344:	4931      	ldr	r1, [pc, #196]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c346:	4313      	orrs	r3, r2
 800c348:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c34a:	4b30      	ldr	r3, [pc, #192]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	492d      	ldr	r1, [pc, #180]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c35c:	4b2b      	ldr	r3, [pc, #172]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	699b      	ldr	r3, [r3, #24]
 800c368:	4928      	ldr	r1, [pc, #160]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c36e:	4b27      	ldr	r3, [pc, #156]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	4a26      	ldr	r2, [pc, #152]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c37a:	4b24      	ldr	r3, [pc, #144]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c37e:	4b24      	ldr	r3, [pc, #144]	; (800c410 <RCCEx_PLL3_Config+0x160>)
 800c380:	4013      	ands	r3, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	69d2      	ldr	r2, [r2, #28]
 800c386:	00d2      	lsls	r2, r2, #3
 800c388:	4920      	ldr	r1, [pc, #128]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c38a:	4313      	orrs	r3, r2
 800c38c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c38e:	4b1f      	ldr	r3, [pc, #124]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	4a1e      	ldr	r2, [pc, #120]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d106      	bne.n	800c3ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a19      	ldr	r2, [pc, #100]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3ac:	e00f      	b.n	800c3ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d106      	bne.n	800c3c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	4a14      	ldr	r2, [pc, #80]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3c0:	e005      	b.n	800c3ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	4a11      	ldr	r2, [pc, #68]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3ce:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a0e      	ldr	r2, [pc, #56]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3da:	f7f6 fd8f 	bl	8002efc <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3e0:	e008      	b.n	800c3f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3e2:	f7f6 fd8b 	bl	8002efc <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e006      	b.n	800c402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d0f0      	beq.n	800c3e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	58024400 	.word	0x58024400
 800c410:	ffff0007 	.word	0xffff0007

0800c414 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	e10f      	b.n	800c646 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a87      	ldr	r2, [pc, #540]	; (800c650 <HAL_SPI_Init+0x23c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d00f      	beq.n	800c456 <HAL_SPI_Init+0x42>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a86      	ldr	r2, [pc, #536]	; (800c654 <HAL_SPI_Init+0x240>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00a      	beq.n	800c456 <HAL_SPI_Init+0x42>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a84      	ldr	r2, [pc, #528]	; (800c658 <HAL_SPI_Init+0x244>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d005      	beq.n	800c456 <HAL_SPI_Init+0x42>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	2b0f      	cmp	r3, #15
 800c450:	d901      	bls.n	800c456 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e0f7      	b.n	800c646 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fd5a 	bl	800cf10 <SPI_GetPacketSize>
 800c45c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a7b      	ldr	r2, [pc, #492]	; (800c650 <HAL_SPI_Init+0x23c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d00c      	beq.n	800c482 <HAL_SPI_Init+0x6e>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a79      	ldr	r2, [pc, #484]	; (800c654 <HAL_SPI_Init+0x240>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d007      	beq.n	800c482 <HAL_SPI_Init+0x6e>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a78      	ldr	r2, [pc, #480]	; (800c658 <HAL_SPI_Init+0x244>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d002      	beq.n	800c482 <HAL_SPI_Init+0x6e>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b08      	cmp	r3, #8
 800c480:	d811      	bhi.n	800c4a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c486:	4a72      	ldr	r2, [pc, #456]	; (800c650 <HAL_SPI_Init+0x23c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d009      	beq.n	800c4a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a70      	ldr	r2, [pc, #448]	; (800c654 <HAL_SPI_Init+0x240>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d004      	beq.n	800c4a0 <HAL_SPI_Init+0x8c>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a6f      	ldr	r2, [pc, #444]	; (800c658 <HAL_SPI_Init+0x244>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d104      	bne.n	800c4aa <HAL_SPI_Init+0x96>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b10      	cmp	r3, #16
 800c4a4:	d901      	bls.n	800c4aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	e0cd      	b.n	800c646 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7f5 ff7e 	bl	80023c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f022 0201 	bic.w	r2, r2, #1
 800c4da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c4e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4f0:	d119      	bne.n	800c526 <HAL_SPI_Init+0x112>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4fa:	d103      	bne.n	800c504 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c500:	2b00      	cmp	r3, #0
 800c502:	d008      	beq.n	800c516 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10c      	bne.n	800c526 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c514:	d107      	bne.n	800c526 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c524:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00f      	beq.n	800c552 <HAL_SPI_Init+0x13e>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	2b06      	cmp	r3, #6
 800c538:	d90b      	bls.n	800c552 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	430a      	orrs	r2, r1
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	e007      	b.n	800c562 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c560:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	69da      	ldr	r2, [r3, #28]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56a:	431a      	orrs	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c574:	ea42 0103 	orr.w	r1, r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	68da      	ldr	r2, [r3, #12]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	430a      	orrs	r2, r1
 800c582:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	431a      	orrs	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	431a      	orrs	r2, r3
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	431a      	orrs	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5c2:	ea42 0103 	orr.w	r1, r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d113      	bne.n	800c602 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c600:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 0201 	bic.w	r2, r2, #1
 800c610:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	430a      	orrs	r2, r1
 800c632:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	40013000 	.word	0x40013000
 800c654:	40003800 	.word	0x40003800
 800c658:	40003c00 	.word	0x40003c00

0800c65c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	; 0x28
 800c660:	af02      	add	r7, sp, #8
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3320      	adds	r3, #32
 800c672:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c674:	2300      	movs	r3, #0
 800c676:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d101      	bne.n	800c686 <HAL_SPI_Transmit+0x2a>
 800c682:	2302      	movs	r3, #2
 800c684:	e1e1      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c68e:	f7f6 fc35 	bl	8002efc <HAL_GetTick>
 800c692:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d007      	beq.n	800c6b0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c6ac:	7efb      	ldrb	r3, [r7, #27]
 800c6ae:	e1cc      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <HAL_SPI_Transmit+0x60>
 800c6b6:	88fb      	ldrh	r3, [r7, #6]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d107      	bne.n	800c6cc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c6c8:	7efb      	ldrb	r3, [r7, #27]
 800c6ca:	e1be      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2203      	movs	r2, #3
 800c6d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	88fa      	ldrh	r2, [r7, #6]
 800c6e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	88fa      	ldrh	r2, [r7, #6]
 800c6ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c71c:	d108      	bne.n	800c730 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	e009      	b.n	800c744 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c742:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	4b96      	ldr	r3, [pc, #600]	; (800c9a4 <HAL_SPI_Transmit+0x348>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	88f9      	ldrh	r1, [r7, #6]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	6812      	ldr	r2, [r2, #0]
 800c754:	430b      	orrs	r3, r1
 800c756:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f042 0201 	orr.w	r2, r2, #1
 800c766:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c770:	d107      	bne.n	800c782 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c780:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d947      	bls.n	800c81a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c78a:	e03f      	b.n	800c80c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b02      	cmp	r3, #2
 800c798:	d114      	bne.n	800c7c4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6812      	ldr	r2, [r2, #0]
 800c7a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7aa:	1d1a      	adds	r2, r3, #4
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c7c2:	e023      	b.n	800c80c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7c4:	f7f6 fb9a 	bl	8002efc <HAL_GetTick>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d803      	bhi.n	800c7dc <HAL_SPI_Transmit+0x180>
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7da:	d102      	bne.n	800c7e2 <HAL_SPI_Transmit+0x186>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d114      	bne.n	800c80c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 fac6 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c808:	2303      	movs	r3, #3
 800c80a:	e11e      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c812:	b29b      	uxth	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1b9      	bne.n	800c78c <HAL_SPI_Transmit+0x130>
 800c818:	e0f1      	b.n	800c9fe <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	2b07      	cmp	r3, #7
 800c820:	f240 80e6 	bls.w	800c9f0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c824:	e05d      	b.n	800c8e2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b02      	cmp	r3, #2
 800c832:	d132      	bne.n	800c89a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d918      	bls.n	800c872 <HAL_SPI_Transmit+0x216>
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d014      	beq.n	800c872 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6812      	ldr	r2, [r2, #0]
 800c852:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c864:	b29b      	uxth	r3, r3
 800c866:	3b02      	subs	r3, #2
 800c868:	b29a      	uxth	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c870:	e037      	b.n	800c8e2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c876:	881a      	ldrh	r2, [r3, #0]
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c880:	1c9a      	adds	r2, r3, #2
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	3b01      	subs	r3, #1
 800c890:	b29a      	uxth	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c898:	e023      	b.n	800c8e2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c89a:	f7f6 fb2f 	bl	8002efc <HAL_GetTick>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	683a      	ldr	r2, [r7, #0]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d803      	bhi.n	800c8b2 <HAL_SPI_Transmit+0x256>
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b0:	d102      	bne.n	800c8b8 <HAL_SPI_Transmit+0x25c>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d114      	bne.n	800c8e2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f000 fa5b 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	e0b3      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d19b      	bne.n	800c826 <HAL_SPI_Transmit+0x1ca>
 800c8ee:	e086      	b.n	800c9fe <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d154      	bne.n	800c9a8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c904:	b29b      	uxth	r3, r3
 800c906:	2b03      	cmp	r3, #3
 800c908:	d918      	bls.n	800c93c <HAL_SPI_Transmit+0x2e0>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c90e:	2b40      	cmp	r3, #64	; 0x40
 800c910:	d914      	bls.n	800c93c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c922:	1d1a      	adds	r2, r3, #4
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c92e:	b29b      	uxth	r3, r3
 800c930:	3b04      	subs	r3, #4
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c93a:	e059      	b.n	800c9f0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c942:	b29b      	uxth	r3, r3
 800c944:	2b01      	cmp	r3, #1
 800c946:	d917      	bls.n	800c978 <HAL_SPI_Transmit+0x31c>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d013      	beq.n	800c978 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c954:	881a      	ldrh	r2, [r3, #0]
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c95e:	1c9a      	adds	r2, r3, #2
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	3b02      	subs	r3, #2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c976:	e03b      	b.n	800c9f0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3320      	adds	r3, #32
 800c982:	7812      	ldrb	r2, [r2, #0]
 800c984:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c996:	b29b      	uxth	r3, r3
 800c998:	3b01      	subs	r3, #1
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c9a2:	e025      	b.n	800c9f0 <HAL_SPI_Transmit+0x394>
 800c9a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9a8:	f7f6 faa8 	bl	8002efc <HAL_GetTick>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d803      	bhi.n	800c9c0 <HAL_SPI_Transmit+0x364>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9be:	d102      	bne.n	800c9c6 <HAL_SPI_Transmit+0x36a>
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d114      	bne.n	800c9f0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f000 f9d4 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c9ec:	2303      	movs	r3, #3
 800c9ee:	e02c      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f47f af79 	bne.w	800c8f0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2200      	movs	r2, #0
 800ca06:	2108      	movs	r1, #8
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 fa53 	bl	800ceb4 <SPI_WaitOnFlagUntilTimeout>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d007      	beq.n	800ca24 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca1a:	f043 0220 	orr.w	r2, r3, #32
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f9a5 	bl	800cd74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e000      	b.n	800ca4a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ca48:	7efb      	ldrb	r3, [r7, #27]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3720      	adds	r7, #32
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop

0800ca54 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	603b      	str	r3, [r7, #0]
 800ca60:	4613      	mov	r3, r2
 800ca62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3330      	adds	r3, #48	; 0x30
 800ca6e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d101      	bne.n	800ca7e <HAL_SPI_Receive+0x2a>
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	e173      	b.n	800cd66 <HAL_SPI_Receive+0x312>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca86:	f7f6 fa39 	bl	8002efc <HAL_GetTick>
 800ca8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d007      	beq.n	800caa8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ca98:	2302      	movs	r3, #2
 800ca9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800caa4:	7ffb      	ldrb	r3, [r7, #31]
 800caa6:	e15e      	b.n	800cd66 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d002      	beq.n	800cab4 <HAL_SPI_Receive+0x60>
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d107      	bne.n	800cac4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cac0:	7ffb      	ldrb	r3, [r7, #31]
 800cac2:	e150      	b.n	800cd66 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2204      	movs	r2, #4
 800cac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	88fa      	ldrh	r2, [r7, #6]
 800cade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	88fa      	ldrh	r2, [r7, #6]
 800cae6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cb14:	d108      	bne.n	800cb28 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	e009      	b.n	800cb3c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cb3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	4b8b      	ldr	r3, [pc, #556]	; (800cd70 <HAL_SPI_Receive+0x31c>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	88f9      	ldrh	r1, [r7, #6]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	6812      	ldr	r2, [r2, #0]
 800cb4c:	430b      	orrs	r3, r1
 800cb4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f042 0201 	orr.w	r2, r2, #1
 800cb5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb68:	d107      	bne.n	800cb7a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	2b0f      	cmp	r3, #15
 800cb80:	d948      	bls.n	800cc14 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb82:	e040      	b.n	800cc06 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	695a      	ldr	r2, [r3, #20]
 800cb8a:	f248 0308 	movw	r3, #32776	; 0x8008
 800cb8e:	4013      	ands	r3, r2
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d014      	beq.n	800cbbe <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb9e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbbc:	e023      	b.n	800cc06 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbbe:	f7f6 f99d 	bl	8002efc <HAL_GetTick>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d803      	bhi.n	800cbd6 <HAL_SPI_Receive+0x182>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd4:	d102      	bne.n	800cbdc <HAL_SPI_Receive+0x188>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d114      	bne.n	800cc06 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f000 f8c9 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbf0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e0af      	b.n	800cd66 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1b8      	bne.n	800cb84 <HAL_SPI_Receive+0x130>
 800cc12:	e095      	b.n	800cd40 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	f240 808b 	bls.w	800cd34 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cc1e:	e03f      	b.n	800cca0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d114      	bne.n	800cc58 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	8812      	ldrh	r2, [r2, #0]
 800cc36:	b292      	uxth	r2, r2
 800cc38:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc3e:	1c9a      	adds	r2, r3, #2
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cc56:	e023      	b.n	800cca0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc58:	f7f6 f950 	bl	8002efc <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d803      	bhi.n	800cc70 <HAL_SPI_Receive+0x21c>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d102      	bne.n	800cc76 <HAL_SPI_Receive+0x222>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d114      	bne.n	800cca0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 f87c 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e062      	b.n	800cd66 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1b9      	bne.n	800cc20 <HAL_SPI_Receive+0x1cc>
 800ccac:	e048      	b.n	800cd40 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d117      	bne.n	800ccec <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccc8:	7812      	ldrb	r2, [r2, #0]
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ccea:	e023      	b.n	800cd34 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccec:	f7f6 f906 	bl	8002efc <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d803      	bhi.n	800cd04 <HAL_SPI_Receive+0x2b0>
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd02:	d102      	bne.n	800cd0a <HAL_SPI_Receive+0x2b6>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d114      	bne.n	800cd34 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f832 	bl	800cd74 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e018      	b.n	800cd66 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1b6      	bne.n	800ccae <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 f817 	bl	800cd74 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800cd64:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3720      	adds	r7, #32
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	ffff0000 	.word	0xffff0000

0800cd74 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b085      	sub	sp, #20
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699a      	ldr	r2, [r3, #24]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f042 0208 	orr.w	r2, r2, #8
 800cd92:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	699a      	ldr	r2, [r3, #24]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0210 	orr.w	r2, r2, #16
 800cda2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f022 0201 	bic.w	r2, r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6919      	ldr	r1, [r3, #16]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4b3c      	ldr	r3, [pc, #240]	; (800ceb0 <SPI_CloseTransfer+0x13c>)
 800cdc0:	400b      	ands	r3, r1
 800cdc2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689a      	ldr	r2, [r3, #8]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cdd2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	2b04      	cmp	r3, #4
 800cdde:	d014      	beq.n	800ce0a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00f      	beq.n	800ce0a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	699a      	ldr	r2, [r3, #24]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f042 0220 	orr.w	r2, r2, #32
 800ce08:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d014      	beq.n	800ce40 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00f      	beq.n	800ce40 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce26:	f043 0204 	orr.w	r2, r3, #4
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	699a      	ldr	r2, [r3, #24]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce3e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00f      	beq.n	800ce6a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce50:	f043 0201 	orr.w	r2, r3, #1
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	699a      	ldr	r2, [r3, #24]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce68:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00f      	beq.n	800ce94 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce7a:	f043 0208 	orr.w	r2, r3, #8
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	699a      	ldr	r2, [r3, #24]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce92:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cea4:	bf00      	nop
 800cea6:	3714      	adds	r7, #20
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	fffffc90 	.word	0xfffffc90

0800ceb4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4613      	mov	r3, r2
 800cec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cec4:	e010      	b.n	800cee8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cec6:	f7f6 f819 	bl	8002efc <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d803      	bhi.n	800cede <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cedc:	d102      	bne.n	800cee4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e00f      	b.n	800cf08 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	695a      	ldr	r2, [r3, #20]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4013      	ands	r3, r2
 800cef2:	68ba      	ldr	r2, [r7, #8]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	bf0c      	ite	eq
 800cef8:	2301      	moveq	r3, #1
 800cefa:	2300      	movne	r3, #0
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	461a      	mov	r2, r3
 800cf00:	79fb      	ldrb	r3, [r7, #7]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d0df      	beq.n	800cec6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b085      	sub	sp, #20
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1c:	095b      	lsrs	r3, r3, #5
 800cf1e:	3301      	adds	r3, #1
 800cf20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	3301      	adds	r3, #1
 800cf28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	3307      	adds	r3, #7
 800cf2e:	08db      	lsrs	r3, r3, #3
 800cf30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d101      	bne.n	800cf58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e049      	b.n	800cfec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d106      	bne.n	800cf72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f5 fae3 	bl	8002538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2202      	movs	r2, #2
 800cf76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4619      	mov	r1, r3
 800cf84:	4610      	mov	r0, r2
 800cf86:	f000 fec7 	bl	800dd18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d109      	bne.n	800d018 <HAL_TIM_PWM_Start+0x24>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	bf14      	ite	ne
 800d010:	2301      	movne	r3, #1
 800d012:	2300      	moveq	r3, #0
 800d014:	b2db      	uxtb	r3, r3
 800d016:	e03c      	b.n	800d092 <HAL_TIM_PWM_Start+0x9e>
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	d109      	bne.n	800d032 <HAL_TIM_PWM_Start+0x3e>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b01      	cmp	r3, #1
 800d028:	bf14      	ite	ne
 800d02a:	2301      	movne	r3, #1
 800d02c:	2300      	moveq	r3, #0
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	e02f      	b.n	800d092 <HAL_TIM_PWM_Start+0x9e>
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2b08      	cmp	r3, #8
 800d036:	d109      	bne.n	800d04c <HAL_TIM_PWM_Start+0x58>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b01      	cmp	r3, #1
 800d042:	bf14      	ite	ne
 800d044:	2301      	movne	r3, #1
 800d046:	2300      	moveq	r3, #0
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	e022      	b.n	800d092 <HAL_TIM_PWM_Start+0x9e>
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2b0c      	cmp	r3, #12
 800d050:	d109      	bne.n	800d066 <HAL_TIM_PWM_Start+0x72>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	bf14      	ite	ne
 800d05e:	2301      	movne	r3, #1
 800d060:	2300      	moveq	r3, #0
 800d062:	b2db      	uxtb	r3, r3
 800d064:	e015      	b.n	800d092 <HAL_TIM_PWM_Start+0x9e>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b10      	cmp	r3, #16
 800d06a:	d109      	bne.n	800d080 <HAL_TIM_PWM_Start+0x8c>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b01      	cmp	r3, #1
 800d076:	bf14      	ite	ne
 800d078:	2301      	movne	r3, #1
 800d07a:	2300      	moveq	r3, #0
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	e008      	b.n	800d092 <HAL_TIM_PWM_Start+0x9e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b01      	cmp	r3, #1
 800d08a:	bf14      	ite	ne
 800d08c:	2301      	movne	r3, #1
 800d08e:	2300      	moveq	r3, #0
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d096:	2301      	movs	r3, #1
 800d098:	e0ab      	b.n	800d1f2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d104      	bne.n	800d0aa <HAL_TIM_PWM_Start+0xb6>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0a8:	e023      	b.n	800d0f2 <HAL_TIM_PWM_Start+0xfe>
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d104      	bne.n	800d0ba <HAL_TIM_PWM_Start+0xc6>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0b8:	e01b      	b.n	800d0f2 <HAL_TIM_PWM_Start+0xfe>
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	2b08      	cmp	r3, #8
 800d0be:	d104      	bne.n	800d0ca <HAL_TIM_PWM_Start+0xd6>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0c8:	e013      	b.n	800d0f2 <HAL_TIM_PWM_Start+0xfe>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b0c      	cmp	r3, #12
 800d0ce:	d104      	bne.n	800d0da <HAL_TIM_PWM_Start+0xe6>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0d8:	e00b      	b.n	800d0f2 <HAL_TIM_PWM_Start+0xfe>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b10      	cmp	r3, #16
 800d0de:	d104      	bne.n	800d0ea <HAL_TIM_PWM_Start+0xf6>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0e8:	e003      	b.n	800d0f2 <HAL_TIM_PWM_Start+0xfe>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 f988 	bl	800e410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a3d      	ldr	r2, [pc, #244]	; (800d1fc <HAL_TIM_PWM_Start+0x208>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d013      	beq.n	800d132 <HAL_TIM_PWM_Start+0x13e>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a3c      	ldr	r2, [pc, #240]	; (800d200 <HAL_TIM_PWM_Start+0x20c>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d00e      	beq.n	800d132 <HAL_TIM_PWM_Start+0x13e>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a3a      	ldr	r2, [pc, #232]	; (800d204 <HAL_TIM_PWM_Start+0x210>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d009      	beq.n	800d132 <HAL_TIM_PWM_Start+0x13e>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a39      	ldr	r2, [pc, #228]	; (800d208 <HAL_TIM_PWM_Start+0x214>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d004      	beq.n	800d132 <HAL_TIM_PWM_Start+0x13e>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a37      	ldr	r2, [pc, #220]	; (800d20c <HAL_TIM_PWM_Start+0x218>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d101      	bne.n	800d136 <HAL_TIM_PWM_Start+0x142>
 800d132:	2301      	movs	r3, #1
 800d134:	e000      	b.n	800d138 <HAL_TIM_PWM_Start+0x144>
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d14a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a2a      	ldr	r2, [pc, #168]	; (800d1fc <HAL_TIM_PWM_Start+0x208>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d02c      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d15e:	d027      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a2a      	ldr	r2, [pc, #168]	; (800d210 <HAL_TIM_PWM_Start+0x21c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d022      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a29      	ldr	r2, [pc, #164]	; (800d214 <HAL_TIM_PWM_Start+0x220>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d01d      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a27      	ldr	r2, [pc, #156]	; (800d218 <HAL_TIM_PWM_Start+0x224>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d018      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a1f      	ldr	r2, [pc, #124]	; (800d200 <HAL_TIM_PWM_Start+0x20c>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d013      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a23      	ldr	r2, [pc, #140]	; (800d21c <HAL_TIM_PWM_Start+0x228>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d00e      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a1b      	ldr	r2, [pc, #108]	; (800d204 <HAL_TIM_PWM_Start+0x210>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d009      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <HAL_TIM_PWM_Start+0x22c>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d004      	beq.n	800d1b0 <HAL_TIM_PWM_Start+0x1bc>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a1e      	ldr	r2, [pc, #120]	; (800d224 <HAL_TIM_PWM_Start+0x230>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d115      	bne.n	800d1dc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	4b1c      	ldr	r3, [pc, #112]	; (800d228 <HAL_TIM_PWM_Start+0x234>)
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b06      	cmp	r3, #6
 800d1c0:	d015      	beq.n	800d1ee <HAL_TIM_PWM_Start+0x1fa>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1c8:	d011      	beq.n	800d1ee <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f042 0201 	orr.w	r2, r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1da:	e008      	b.n	800d1ee <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f042 0201 	orr.w	r2, r2, #1
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	e000      	b.n	800d1f0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	40010000 	.word	0x40010000
 800d200:	40010400 	.word	0x40010400
 800d204:	40014000 	.word	0x40014000
 800d208:	40014400 	.word	0x40014400
 800d20c:	40014800 	.word	0x40014800
 800d210:	40000400 	.word	0x40000400
 800d214:	40000800 	.word	0x40000800
 800d218:	40000c00 	.word	0x40000c00
 800d21c:	40001800 	.word	0x40001800
 800d220:	4000e000 	.word	0x4000e000
 800d224:	4000e400 	.word	0x4000e400
 800d228:	00010007 	.word	0x00010007

0800d22c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
 800d238:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d109      	bne.n	800d258 <HAL_TIM_PWM_Start_DMA+0x2c>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	bf0c      	ite	eq
 800d250:	2301      	moveq	r3, #1
 800d252:	2300      	movne	r3, #0
 800d254:	b2db      	uxtb	r3, r3
 800d256:	e03c      	b.n	800d2d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	d109      	bne.n	800d272 <HAL_TIM_PWM_Start_DMA+0x46>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d264:	b2db      	uxtb	r3, r3
 800d266:	2b02      	cmp	r3, #2
 800d268:	bf0c      	ite	eq
 800d26a:	2301      	moveq	r3, #1
 800d26c:	2300      	movne	r3, #0
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	e02f      	b.n	800d2d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	2b08      	cmp	r3, #8
 800d276:	d109      	bne.n	800d28c <HAL_TIM_PWM_Start_DMA+0x60>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b02      	cmp	r3, #2
 800d282:	bf0c      	ite	eq
 800d284:	2301      	moveq	r3, #1
 800d286:	2300      	movne	r3, #0
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	e022      	b.n	800d2d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b0c      	cmp	r3, #12
 800d290:	d109      	bne.n	800d2a6 <HAL_TIM_PWM_Start_DMA+0x7a>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b02      	cmp	r3, #2
 800d29c:	bf0c      	ite	eq
 800d29e:	2301      	moveq	r3, #1
 800d2a0:	2300      	movne	r3, #0
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	e015      	b.n	800d2d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	2b10      	cmp	r3, #16
 800d2aa:	d109      	bne.n	800d2c0 <HAL_TIM_PWM_Start_DMA+0x94>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	bf0c      	ite	eq
 800d2b8:	2301      	moveq	r3, #1
 800d2ba:	2300      	movne	r3, #0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	e008      	b.n	800d2d2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	bf0c      	ite	eq
 800d2cc:	2301      	moveq	r3, #1
 800d2ce:	2300      	movne	r3, #0
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	e1ba      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d109      	bne.n	800d2f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	bf0c      	ite	eq
 800d2ec:	2301      	moveq	r3, #1
 800d2ee:	2300      	movne	r3, #0
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	e03c      	b.n	800d36e <HAL_TIM_PWM_Start_DMA+0x142>
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b04      	cmp	r3, #4
 800d2f8:	d109      	bne.n	800d30e <HAL_TIM_PWM_Start_DMA+0xe2>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d300:	b2db      	uxtb	r3, r3
 800d302:	2b01      	cmp	r3, #1
 800d304:	bf0c      	ite	eq
 800d306:	2301      	moveq	r3, #1
 800d308:	2300      	movne	r3, #0
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	e02f      	b.n	800d36e <HAL_TIM_PWM_Start_DMA+0x142>
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b08      	cmp	r3, #8
 800d312:	d109      	bne.n	800d328 <HAL_TIM_PWM_Start_DMA+0xfc>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	bf0c      	ite	eq
 800d320:	2301      	moveq	r3, #1
 800d322:	2300      	movne	r3, #0
 800d324:	b2db      	uxtb	r3, r3
 800d326:	e022      	b.n	800d36e <HAL_TIM_PWM_Start_DMA+0x142>
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b0c      	cmp	r3, #12
 800d32c:	d109      	bne.n	800d342 <HAL_TIM_PWM_Start_DMA+0x116>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b01      	cmp	r3, #1
 800d338:	bf0c      	ite	eq
 800d33a:	2301      	moveq	r3, #1
 800d33c:	2300      	movne	r3, #0
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	e015      	b.n	800d36e <HAL_TIM_PWM_Start_DMA+0x142>
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b10      	cmp	r3, #16
 800d346:	d109      	bne.n	800d35c <HAL_TIM_PWM_Start_DMA+0x130>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b01      	cmp	r3, #1
 800d352:	bf0c      	ite	eq
 800d354:	2301      	moveq	r3, #1
 800d356:	2300      	movne	r3, #0
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	e008      	b.n	800d36e <HAL_TIM_PWM_Start_DMA+0x142>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d362:	b2db      	uxtb	r3, r3
 800d364:	2b01      	cmp	r3, #1
 800d366:	bf0c      	ite	eq
 800d368:	2301      	moveq	r3, #1
 800d36a:	2300      	movne	r3, #0
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d034      	beq.n	800d3dc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <HAL_TIM_PWM_Start_DMA+0x152>
 800d378:	887b      	ldrh	r3, [r7, #2]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e166      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <HAL_TIM_PWM_Start_DMA+0x166>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d390:	e026      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	2b04      	cmp	r3, #4
 800d396:	d104      	bne.n	800d3a2 <HAL_TIM_PWM_Start_DMA+0x176>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3a0:	e01e      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2b08      	cmp	r3, #8
 800d3a6:	d104      	bne.n	800d3b2 <HAL_TIM_PWM_Start_DMA+0x186>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3b0:	e016      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b0c      	cmp	r3, #12
 800d3b6:	d104      	bne.n	800d3c2 <HAL_TIM_PWM_Start_DMA+0x196>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3c0:	e00e      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b10      	cmp	r3, #16
 800d3c6:	d104      	bne.n	800d3d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2202      	movs	r2, #2
 800d3cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3d0:	e006      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3da:	e001      	b.n	800d3e0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e137      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2b0c      	cmp	r3, #12
 800d3e4:	f200 80ae 	bhi.w	800d544 <HAL_TIM_PWM_Start_DMA+0x318>
 800d3e8:	a201      	add	r2, pc, #4	; (adr r2, 800d3f0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ee:	bf00      	nop
 800d3f0:	0800d425 	.word	0x0800d425
 800d3f4:	0800d545 	.word	0x0800d545
 800d3f8:	0800d545 	.word	0x0800d545
 800d3fc:	0800d545 	.word	0x0800d545
 800d400:	0800d46d 	.word	0x0800d46d
 800d404:	0800d545 	.word	0x0800d545
 800d408:	0800d545 	.word	0x0800d545
 800d40c:	0800d545 	.word	0x0800d545
 800d410:	0800d4b5 	.word	0x0800d4b5
 800d414:	0800d545 	.word	0x0800d545
 800d418:	0800d545 	.word	0x0800d545
 800d41c:	0800d545 	.word	0x0800d545
 800d420:	0800d4fd 	.word	0x0800d4fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d428:	4a8b      	ldr	r2, [pc, #556]	; (800d658 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d42a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	4a8a      	ldr	r2, [pc, #552]	; (800d65c <HAL_TIM_PWM_Start_DMA+0x430>)
 800d432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d438:	4a89      	ldr	r2, [pc, #548]	; (800d660 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d43a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d440:	6879      	ldr	r1, [r7, #4]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3334      	adds	r3, #52	; 0x34
 800d448:	461a      	mov	r2, r3
 800d44a:	887b      	ldrh	r3, [r7, #2]
 800d44c:	f7f7 fd60 	bl	8004f10 <HAL_DMA_Start_IT>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	d001      	beq.n	800d45a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e0fa      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d468:	60da      	str	r2, [r3, #12]
      break;
 800d46a:	e06e      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d470:	4a79      	ldr	r2, [pc, #484]	; (800d658 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d472:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d478:	4a78      	ldr	r2, [pc, #480]	; (800d65c <HAL_TIM_PWM_Start_DMA+0x430>)
 800d47a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	4a77      	ldr	r2, [pc, #476]	; (800d660 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d482:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d488:	6879      	ldr	r1, [r7, #4]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3338      	adds	r3, #56	; 0x38
 800d490:	461a      	mov	r2, r3
 800d492:	887b      	ldrh	r3, [r7, #2]
 800d494:	f7f7 fd3c 	bl	8004f10 <HAL_DMA_Start_IT>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d001      	beq.n	800d4a2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e0d6      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4b0:	60da      	str	r2, [r3, #12]
      break;
 800d4b2:	e04a      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b8:	4a67      	ldr	r2, [pc, #412]	; (800d658 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d4ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	4a66      	ldr	r2, [pc, #408]	; (800d65c <HAL_TIM_PWM_Start_DMA+0x430>)
 800d4c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c8:	4a65      	ldr	r2, [pc, #404]	; (800d660 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d4ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	333c      	adds	r3, #60	; 0x3c
 800d4d8:	461a      	mov	r2, r3
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	f7f7 fd18 	bl	8004f10 <HAL_DMA_Start_IT>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e0b2      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68da      	ldr	r2, [r3, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4f8:	60da      	str	r2, [r3, #12]
      break;
 800d4fa:	e026      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d500:	4a55      	ldr	r2, [pc, #340]	; (800d658 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d502:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d508:	4a54      	ldr	r2, [pc, #336]	; (800d65c <HAL_TIM_PWM_Start_DMA+0x430>)
 800d50a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d510:	4a53      	ldr	r2, [pc, #332]	; (800d660 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d512:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d518:	6879      	ldr	r1, [r7, #4]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3340      	adds	r3, #64	; 0x40
 800d520:	461a      	mov	r2, r3
 800d522:	887b      	ldrh	r3, [r7, #2]
 800d524:	f7f7 fcf4 	bl	8004f10 <HAL_DMA_Start_IT>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e08e      	b.n	800d650 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68da      	ldr	r2, [r3, #12]
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d540:	60da      	str	r2, [r3, #12]
      break;
 800d542:	e002      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]
      break;
 800d548:	bf00      	nop
  }

  if (status == HAL_OK)
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d17e      	bne.n	800d64e <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2201      	movs	r2, #1
 800d556:	68b9      	ldr	r1, [r7, #8]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 ff59 	bl	800e410 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a40      	ldr	r2, [pc, #256]	; (800d664 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d013      	beq.n	800d590 <HAL_TIM_PWM_Start_DMA+0x364>
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a3e      	ldr	r2, [pc, #248]	; (800d668 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d00e      	beq.n	800d590 <HAL_TIM_PWM_Start_DMA+0x364>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a3d      	ldr	r2, [pc, #244]	; (800d66c <HAL_TIM_PWM_Start_DMA+0x440>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d009      	beq.n	800d590 <HAL_TIM_PWM_Start_DMA+0x364>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a3b      	ldr	r2, [pc, #236]	; (800d670 <HAL_TIM_PWM_Start_DMA+0x444>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d004      	beq.n	800d590 <HAL_TIM_PWM_Start_DMA+0x364>
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a3a      	ldr	r2, [pc, #232]	; (800d674 <HAL_TIM_PWM_Start_DMA+0x448>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d101      	bne.n	800d594 <HAL_TIM_PWM_Start_DMA+0x368>
 800d590:	2301      	movs	r3, #1
 800d592:	e000      	b.n	800d596 <HAL_TIM_PWM_Start_DMA+0x36a>
 800d594:	2300      	movs	r3, #0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d007      	beq.n	800d5aa <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a2d      	ldr	r2, [pc, #180]	; (800d664 <HAL_TIM_PWM_Start_DMA+0x438>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d02c      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5bc:	d027      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a2d      	ldr	r2, [pc, #180]	; (800d678 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d022      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a2b      	ldr	r2, [pc, #172]	; (800d67c <HAL_TIM_PWM_Start_DMA+0x450>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d01d      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a2a      	ldr	r2, [pc, #168]	; (800d680 <HAL_TIM_PWM_Start_DMA+0x454>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d018      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a21      	ldr	r2, [pc, #132]	; (800d668 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d013      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a26      	ldr	r2, [pc, #152]	; (800d684 <HAL_TIM_PWM_Start_DMA+0x458>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d00e      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a1d      	ldr	r2, [pc, #116]	; (800d66c <HAL_TIM_PWM_Start_DMA+0x440>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d009      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a22      	ldr	r2, [pc, #136]	; (800d688 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d004      	beq.n	800d60e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a20      	ldr	r2, [pc, #128]	; (800d68c <HAL_TIM_PWM_Start_DMA+0x460>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d115      	bne.n	800d63a <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	689a      	ldr	r2, [r3, #8]
 800d614:	4b1e      	ldr	r3, [pc, #120]	; (800d690 <HAL_TIM_PWM_Start_DMA+0x464>)
 800d616:	4013      	ands	r3, r2
 800d618:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	2b06      	cmp	r3, #6
 800d61e:	d015      	beq.n	800d64c <HAL_TIM_PWM_Start_DMA+0x420>
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d626:	d011      	beq.n	800d64c <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f042 0201 	orr.w	r2, r2, #1
 800d636:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d638:	e008      	b.n	800d64c <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f042 0201 	orr.w	r2, r2, #1
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	e000      	b.n	800d64e <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d64c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	0800dc07 	.word	0x0800dc07
 800d65c:	0800dcaf 	.word	0x0800dcaf
 800d660:	0800db75 	.word	0x0800db75
 800d664:	40010000 	.word	0x40010000
 800d668:	40010400 	.word	0x40010400
 800d66c:	40014000 	.word	0x40014000
 800d670:	40014400 	.word	0x40014400
 800d674:	40014800 	.word	0x40014800
 800d678:	40000400 	.word	0x40000400
 800d67c:	40000800 	.word	0x40000800
 800d680:	40000c00 	.word	0x40000c00
 800d684:	40001800 	.word	0x40001800
 800d688:	4000e000 	.word	0x4000e000
 800d68c:	4000e400 	.word	0x4000e400
 800d690:	00010007 	.word	0x00010007

0800d694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	f003 0302 	and.w	r3, r3, #2
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d122      	bne.n	800d6f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	f003 0302 	and.w	r3, r3, #2
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d11b      	bne.n	800d6f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f06f 0202 	mvn.w	r2, #2
 800d6c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	f003 0303 	and.w	r3, r3, #3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa24 	bl	800db24 <HAL_TIM_IC_CaptureCallback>
 800d6dc:	e005      	b.n	800d6ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fa16 	bl	800db10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7f3 f9f9 	bl	8000adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	f003 0304 	and.w	r3, r3, #4
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	d122      	bne.n	800d744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	f003 0304 	and.w	r3, r3, #4
 800d708:	2b04      	cmp	r3, #4
 800d70a:	d11b      	bne.n	800d744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f06f 0204 	mvn.w	r2, #4
 800d714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2202      	movs	r2, #2
 800d71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 f9fa 	bl	800db24 <HAL_TIM_IC_CaptureCallback>
 800d730:	e005      	b.n	800d73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f9ec 	bl	800db10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7f3 f9cf 	bl	8000adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	f003 0308 	and.w	r3, r3, #8
 800d74e:	2b08      	cmp	r3, #8
 800d750:	d122      	bne.n	800d798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	f003 0308 	and.w	r3, r3, #8
 800d75c:	2b08      	cmp	r3, #8
 800d75e:	d11b      	bne.n	800d798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f06f 0208 	mvn.w	r2, #8
 800d768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2204      	movs	r2, #4
 800d76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	f003 0303 	and.w	r3, r3, #3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f9d0 	bl	800db24 <HAL_TIM_IC_CaptureCallback>
 800d784:	e005      	b.n	800d792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f9c2 	bl	800db10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7f3 f9a5 	bl	8000adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d122      	bne.n	800d7ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	f003 0310 	and.w	r3, r3, #16
 800d7b0:	2b10      	cmp	r3, #16
 800d7b2:	d11b      	bne.n	800d7ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f06f 0210 	mvn.w	r2, #16
 800d7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	69db      	ldr	r3, [r3, #28]
 800d7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 f9a6 	bl	800db24 <HAL_TIM_IC_CaptureCallback>
 800d7d8:	e005      	b.n	800d7e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f998 	bl	800db10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7f3 f97b 	bl	8000adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d10e      	bne.n	800d818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	2b01      	cmp	r3, #1
 800d806:	d107      	bne.n	800d818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f06f 0201 	mvn.w	r2, #1
 800d810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 f972 	bl	800dafc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d822:	2b80      	cmp	r3, #128	; 0x80
 800d824:	d10e      	bne.n	800d844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d830:	2b80      	cmp	r3, #128	; 0x80
 800d832:	d107      	bne.n	800d844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 feb2 	bl	800e5a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d852:	d10e      	bne.n	800d872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d85e:	2b80      	cmp	r3, #128	; 0x80
 800d860:	d107      	bne.n	800d872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 fea5 	bl	800e5bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87c:	2b40      	cmp	r3, #64	; 0x40
 800d87e:	d10e      	bne.n	800d89e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d107      	bne.n	800d89e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f957 	bl	800db4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	691b      	ldr	r3, [r3, #16]
 800d8a4:	f003 0320 	and.w	r3, r3, #32
 800d8a8:	2b20      	cmp	r3, #32
 800d8aa:	d10e      	bne.n	800d8ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	f003 0320 	and.w	r3, r3, #32
 800d8b6:	2b20      	cmp	r3, #32
 800d8b8:	d107      	bne.n	800d8ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f06f 0220 	mvn.w	r2, #32
 800d8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 fe65 	bl	800e594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d101      	bne.n	800d8f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8ee:	2302      	movs	r3, #2
 800d8f0:	e0ff      	b.n	800daf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b14      	cmp	r3, #20
 800d8fe:	f200 80f0 	bhi.w	800dae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d902:	a201      	add	r2, pc, #4	; (adr r2, 800d908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d908:	0800d95d 	.word	0x0800d95d
 800d90c:	0800dae3 	.word	0x0800dae3
 800d910:	0800dae3 	.word	0x0800dae3
 800d914:	0800dae3 	.word	0x0800dae3
 800d918:	0800d99d 	.word	0x0800d99d
 800d91c:	0800dae3 	.word	0x0800dae3
 800d920:	0800dae3 	.word	0x0800dae3
 800d924:	0800dae3 	.word	0x0800dae3
 800d928:	0800d9df 	.word	0x0800d9df
 800d92c:	0800dae3 	.word	0x0800dae3
 800d930:	0800dae3 	.word	0x0800dae3
 800d934:	0800dae3 	.word	0x0800dae3
 800d938:	0800da1f 	.word	0x0800da1f
 800d93c:	0800dae3 	.word	0x0800dae3
 800d940:	0800dae3 	.word	0x0800dae3
 800d944:	0800dae3 	.word	0x0800dae3
 800d948:	0800da61 	.word	0x0800da61
 800d94c:	0800dae3 	.word	0x0800dae3
 800d950:	0800dae3 	.word	0x0800dae3
 800d954:	0800dae3 	.word	0x0800dae3
 800d958:	0800daa1 	.word	0x0800daa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68b9      	ldr	r1, [r7, #8]
 800d962:	4618      	mov	r0, r3
 800d964:	f000 fa7e 	bl	800de64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	699a      	ldr	r2, [r3, #24]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f042 0208 	orr.w	r2, r2, #8
 800d976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	699a      	ldr	r2, [r3, #24]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f022 0204 	bic.w	r2, r2, #4
 800d986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6999      	ldr	r1, [r3, #24]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	691a      	ldr	r2, [r3, #16]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	430a      	orrs	r2, r1
 800d998:	619a      	str	r2, [r3, #24]
      break;
 800d99a:	e0a5      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68b9      	ldr	r1, [r7, #8]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 faee 	bl	800df84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	699a      	ldr	r2, [r3, #24]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	699a      	ldr	r2, [r3, #24]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	6999      	ldr	r1, [r3, #24]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	021a      	lsls	r2, r3, #8
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	430a      	orrs	r2, r1
 800d9da:	619a      	str	r2, [r3, #24]
      break;
 800d9dc:	e084      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68b9      	ldr	r1, [r7, #8]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f000 fb57 	bl	800e098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	69da      	ldr	r2, [r3, #28]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f042 0208 	orr.w	r2, r2, #8
 800d9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	69da      	ldr	r2, [r3, #28]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f022 0204 	bic.w	r2, r2, #4
 800da08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	69d9      	ldr	r1, [r3, #28]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	691a      	ldr	r2, [r3, #16]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	430a      	orrs	r2, r1
 800da1a:	61da      	str	r2, [r3, #28]
      break;
 800da1c:	e064      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68b9      	ldr	r1, [r7, #8]
 800da24:	4618      	mov	r0, r3
 800da26:	f000 fbbf 	bl	800e1a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69da      	ldr	r2, [r3, #28]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	69da      	ldr	r2, [r3, #28]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	69d9      	ldr	r1, [r3, #28]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	021a      	lsls	r2, r3, #8
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	430a      	orrs	r2, r1
 800da5c:	61da      	str	r2, [r3, #28]
      break;
 800da5e:	e043      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	4618      	mov	r0, r3
 800da68:	f000 fc08 	bl	800e27c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f042 0208 	orr.w	r2, r2, #8
 800da7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f022 0204 	bic.w	r2, r2, #4
 800da8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	691a      	ldr	r2, [r3, #16]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	430a      	orrs	r2, r1
 800da9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da9e:	e023      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68b9      	ldr	r1, [r7, #8]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 fc4c 	bl	800e344 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800daca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	021a      	lsls	r2, r3, #8
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	430a      	orrs	r2, r1
 800dade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dae0:	e002      	b.n	800dae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	75fb      	strb	r3, [r7, #23]
      break;
 800dae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800daf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop

0800dafc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db80:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d107      	bne.n	800db9c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2201      	movs	r2, #1
 800db90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db9a:	e02a      	b.n	800dbf2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d107      	bne.n	800dbb6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2202      	movs	r2, #2
 800dbaa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbb4:	e01d      	b.n	800dbf2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d107      	bne.n	800dbd0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2204      	movs	r2, #4
 800dbc4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbce:	e010      	b.n	800dbf2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d107      	bne.n	800dbea <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2208      	movs	r2, #8
 800dbde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbe8:	e003      	b.n	800dbf2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2201      	movs	r2, #1
 800dbee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f7ff ffb4 	bl	800db60 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	771a      	strb	r2, [r3, #28]
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc12:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d10b      	bne.n	800dc36 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2201      	movs	r2, #1
 800dc22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	69db      	ldr	r3, [r3, #28]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d136      	bne.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc34:	e031      	b.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d10b      	bne.n	800dc58 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2202      	movs	r2, #2
 800dc44:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d125      	bne.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc56:	e020      	b.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d10b      	bne.n	800dc7a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2204      	movs	r2, #4
 800dc66:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	69db      	ldr	r3, [r3, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d114      	bne.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc78:	e00f      	b.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d10a      	bne.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2208      	movs	r2, #8
 800dc88:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	69db      	ldr	r3, [r3, #28]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d103      	bne.n	800dc9a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7f2 ff1e 	bl	8000adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	771a      	strb	r2, [r3, #28]
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b084      	sub	sp, #16
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d103      	bne.n	800dcce <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	771a      	strb	r2, [r3, #28]
 800dccc:	e019      	b.n	800dd02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d103      	bne.n	800dce0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2202      	movs	r2, #2
 800dcdc:	771a      	strb	r2, [r3, #28]
 800dcde:	e010      	b.n	800dd02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d103      	bne.n	800dcf2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2204      	movs	r2, #4
 800dcee:	771a      	strb	r2, [r3, #28]
 800dcf0:	e007      	b.n	800dd02 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d102      	bne.n	800dd02 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2208      	movs	r2, #8
 800dd00:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7ff ff18 	bl	800db38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	771a      	strb	r2, [r3, #28]
}
 800dd0e:	bf00      	nop
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4a44      	ldr	r2, [pc, #272]	; (800de3c <TIM_Base_SetConfig+0x124>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d013      	beq.n	800dd58 <TIM_Base_SetConfig+0x40>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd36:	d00f      	beq.n	800dd58 <TIM_Base_SetConfig+0x40>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a41      	ldr	r2, [pc, #260]	; (800de40 <TIM_Base_SetConfig+0x128>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d00b      	beq.n	800dd58 <TIM_Base_SetConfig+0x40>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a40      	ldr	r2, [pc, #256]	; (800de44 <TIM_Base_SetConfig+0x12c>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d007      	beq.n	800dd58 <TIM_Base_SetConfig+0x40>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a3f      	ldr	r2, [pc, #252]	; (800de48 <TIM_Base_SetConfig+0x130>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d003      	beq.n	800dd58 <TIM_Base_SetConfig+0x40>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a3e      	ldr	r2, [pc, #248]	; (800de4c <TIM_Base_SetConfig+0x134>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d108      	bne.n	800dd6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a33      	ldr	r2, [pc, #204]	; (800de3c <TIM_Base_SetConfig+0x124>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d027      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd78:	d023      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a30      	ldr	r2, [pc, #192]	; (800de40 <TIM_Base_SetConfig+0x128>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d01f      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a2f      	ldr	r2, [pc, #188]	; (800de44 <TIM_Base_SetConfig+0x12c>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d01b      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a2e      	ldr	r2, [pc, #184]	; (800de48 <TIM_Base_SetConfig+0x130>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d017      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a2d      	ldr	r2, [pc, #180]	; (800de4c <TIM_Base_SetConfig+0x134>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d013      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4a2c      	ldr	r2, [pc, #176]	; (800de50 <TIM_Base_SetConfig+0x138>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d00f      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4a2b      	ldr	r2, [pc, #172]	; (800de54 <TIM_Base_SetConfig+0x13c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d00b      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4a2a      	ldr	r2, [pc, #168]	; (800de58 <TIM_Base_SetConfig+0x140>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d007      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a29      	ldr	r2, [pc, #164]	; (800de5c <TIM_Base_SetConfig+0x144>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d003      	beq.n	800ddc2 <TIM_Base_SetConfig+0xaa>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a28      	ldr	r2, [pc, #160]	; (800de60 <TIM_Base_SetConfig+0x148>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d108      	bne.n	800ddd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ddc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a10      	ldr	r2, [pc, #64]	; (800de3c <TIM_Base_SetConfig+0x124>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d00f      	beq.n	800de20 <TIM_Base_SetConfig+0x108>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4a12      	ldr	r2, [pc, #72]	; (800de4c <TIM_Base_SetConfig+0x134>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d00b      	beq.n	800de20 <TIM_Base_SetConfig+0x108>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a11      	ldr	r2, [pc, #68]	; (800de50 <TIM_Base_SetConfig+0x138>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d007      	beq.n	800de20 <TIM_Base_SetConfig+0x108>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a10      	ldr	r2, [pc, #64]	; (800de54 <TIM_Base_SetConfig+0x13c>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d003      	beq.n	800de20 <TIM_Base_SetConfig+0x108>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	4a0f      	ldr	r2, [pc, #60]	; (800de58 <TIM_Base_SetConfig+0x140>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d103      	bne.n	800de28 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	691a      	ldr	r2, [r3, #16]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	615a      	str	r2, [r3, #20]
}
 800de2e:	bf00      	nop
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	40010000 	.word	0x40010000
 800de40:	40000400 	.word	0x40000400
 800de44:	40000800 	.word	0x40000800
 800de48:	40000c00 	.word	0x40000c00
 800de4c:	40010400 	.word	0x40010400
 800de50:	40014000 	.word	0x40014000
 800de54:	40014400 	.word	0x40014400
 800de58:	40014800 	.word	0x40014800
 800de5c:	4000e000 	.word	0x4000e000
 800de60:	4000e400 	.word	0x4000e400

0800de64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	f023 0201 	bic.w	r2, r3, #1
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4b37      	ldr	r3, [pc, #220]	; (800df6c <TIM_OC1_SetConfig+0x108>)
 800de90:	4013      	ands	r3, r2
 800de92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f023 0303 	bic.w	r3, r3, #3
 800de9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	f023 0302 	bic.w	r3, r3, #2
 800deac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a2d      	ldr	r2, [pc, #180]	; (800df70 <TIM_OC1_SetConfig+0x10c>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d00f      	beq.n	800dee0 <TIM_OC1_SetConfig+0x7c>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a2c      	ldr	r2, [pc, #176]	; (800df74 <TIM_OC1_SetConfig+0x110>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d00b      	beq.n	800dee0 <TIM_OC1_SetConfig+0x7c>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a2b      	ldr	r2, [pc, #172]	; (800df78 <TIM_OC1_SetConfig+0x114>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d007      	beq.n	800dee0 <TIM_OC1_SetConfig+0x7c>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a2a      	ldr	r2, [pc, #168]	; (800df7c <TIM_OC1_SetConfig+0x118>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d003      	beq.n	800dee0 <TIM_OC1_SetConfig+0x7c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a29      	ldr	r2, [pc, #164]	; (800df80 <TIM_OC1_SetConfig+0x11c>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d10c      	bne.n	800defa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f023 0308 	bic.w	r3, r3, #8
 800dee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	4313      	orrs	r3, r2
 800def0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	f023 0304 	bic.w	r3, r3, #4
 800def8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4a1c      	ldr	r2, [pc, #112]	; (800df70 <TIM_OC1_SetConfig+0x10c>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d00f      	beq.n	800df22 <TIM_OC1_SetConfig+0xbe>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a1b      	ldr	r2, [pc, #108]	; (800df74 <TIM_OC1_SetConfig+0x110>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d00b      	beq.n	800df22 <TIM_OC1_SetConfig+0xbe>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4a1a      	ldr	r2, [pc, #104]	; (800df78 <TIM_OC1_SetConfig+0x114>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d007      	beq.n	800df22 <TIM_OC1_SetConfig+0xbe>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a19      	ldr	r2, [pc, #100]	; (800df7c <TIM_OC1_SetConfig+0x118>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d003      	beq.n	800df22 <TIM_OC1_SetConfig+0xbe>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a18      	ldr	r2, [pc, #96]	; (800df80 <TIM_OC1_SetConfig+0x11c>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d111      	bne.n	800df46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	695b      	ldr	r3, [r3, #20]
 800df36:	693a      	ldr	r2, [r7, #16]
 800df38:	4313      	orrs	r3, r2
 800df3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	4313      	orrs	r3, r2
 800df44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	68fa      	ldr	r2, [r7, #12]
 800df50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	697a      	ldr	r2, [r7, #20]
 800df5e:	621a      	str	r2, [r3, #32]
}
 800df60:	bf00      	nop
 800df62:	371c      	adds	r7, #28
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	fffeff8f 	.word	0xfffeff8f
 800df70:	40010000 	.word	0x40010000
 800df74:	40010400 	.word	0x40010400
 800df78:	40014000 	.word	0x40014000
 800df7c:	40014400 	.word	0x40014400
 800df80:	40014800 	.word	0x40014800

0800df84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df84:	b480      	push	{r7}
 800df86:	b087      	sub	sp, #28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	f023 0210 	bic.w	r2, r3, #16
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a1b      	ldr	r3, [r3, #32]
 800df9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	699b      	ldr	r3, [r3, #24]
 800dfaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	4b34      	ldr	r3, [pc, #208]	; (800e080 <TIM_OC2_SetConfig+0xfc>)
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	f023 0320 	bic.w	r3, r3, #32
 800dfce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	011b      	lsls	r3, r3, #4
 800dfd6:	697a      	ldr	r2, [r7, #20]
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a29      	ldr	r2, [pc, #164]	; (800e084 <TIM_OC2_SetConfig+0x100>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d003      	beq.n	800dfec <TIM_OC2_SetConfig+0x68>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a28      	ldr	r2, [pc, #160]	; (800e088 <TIM_OC2_SetConfig+0x104>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d10d      	bne.n	800e008 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	011b      	lsls	r3, r3, #4
 800dffa:	697a      	ldr	r2, [r7, #20]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	4a1e      	ldr	r2, [pc, #120]	; (800e084 <TIM_OC2_SetConfig+0x100>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d00f      	beq.n	800e030 <TIM_OC2_SetConfig+0xac>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4a1d      	ldr	r2, [pc, #116]	; (800e088 <TIM_OC2_SetConfig+0x104>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d00b      	beq.n	800e030 <TIM_OC2_SetConfig+0xac>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a1c      	ldr	r2, [pc, #112]	; (800e08c <TIM_OC2_SetConfig+0x108>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d007      	beq.n	800e030 <TIM_OC2_SetConfig+0xac>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a1b      	ldr	r2, [pc, #108]	; (800e090 <TIM_OC2_SetConfig+0x10c>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d003      	beq.n	800e030 <TIM_OC2_SetConfig+0xac>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a1a      	ldr	r2, [pc, #104]	; (800e094 <TIM_OC2_SetConfig+0x110>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d113      	bne.n	800e058 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e03e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	695b      	ldr	r3, [r3, #20]
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	4313      	orrs	r3, r2
 800e04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	699b      	ldr	r3, [r3, #24]
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	4313      	orrs	r3, r2
 800e056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	621a      	str	r2, [r3, #32]
}
 800e072:	bf00      	nop
 800e074:	371c      	adds	r7, #28
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	feff8fff 	.word	0xfeff8fff
 800e084:	40010000 	.word	0x40010000
 800e088:	40010400 	.word	0x40010400
 800e08c:	40014000 	.word	0x40014000
 800e090:	40014400 	.word	0x40014400
 800e094:	40014800 	.word	0x40014800

0800e098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e098:	b480      	push	{r7}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a1b      	ldr	r3, [r3, #32]
 800e0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	4b33      	ldr	r3, [pc, #204]	; (800e190 <TIM_OC3_SetConfig+0xf8>)
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f023 0303 	bic.w	r3, r3, #3
 800e0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	021b      	lsls	r3, r3, #8
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a28      	ldr	r2, [pc, #160]	; (800e194 <TIM_OC3_SetConfig+0xfc>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d003      	beq.n	800e0fe <TIM_OC3_SetConfig+0x66>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4a27      	ldr	r2, [pc, #156]	; (800e198 <TIM_OC3_SetConfig+0x100>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d10d      	bne.n	800e11a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	021b      	lsls	r3, r3, #8
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	4313      	orrs	r3, r2
 800e110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a1d      	ldr	r2, [pc, #116]	; (800e194 <TIM_OC3_SetConfig+0xfc>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d00f      	beq.n	800e142 <TIM_OC3_SetConfig+0xaa>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	4a1c      	ldr	r2, [pc, #112]	; (800e198 <TIM_OC3_SetConfig+0x100>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d00b      	beq.n	800e142 <TIM_OC3_SetConfig+0xaa>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	4a1b      	ldr	r2, [pc, #108]	; (800e19c <TIM_OC3_SetConfig+0x104>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d007      	beq.n	800e142 <TIM_OC3_SetConfig+0xaa>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4a1a      	ldr	r2, [pc, #104]	; (800e1a0 <TIM_OC3_SetConfig+0x108>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d003      	beq.n	800e142 <TIM_OC3_SetConfig+0xaa>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	4a19      	ldr	r2, [pc, #100]	; (800e1a4 <TIM_OC3_SetConfig+0x10c>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d113      	bne.n	800e16a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	011b      	lsls	r3, r3, #4
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	011b      	lsls	r3, r3, #4
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	4313      	orrs	r3, r2
 800e168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	68fa      	ldr	r2, [r7, #12]
 800e174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	621a      	str	r2, [r3, #32]
}
 800e184:	bf00      	nop
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	fffeff8f 	.word	0xfffeff8f
 800e194:	40010000 	.word	0x40010000
 800e198:	40010400 	.word	0x40010400
 800e19c:	40014000 	.word	0x40014000
 800e1a0:	40014400 	.word	0x40014400
 800e1a4:	40014800 	.word	0x40014800

0800e1a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b087      	sub	sp, #28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	4b24      	ldr	r3, [pc, #144]	; (800e264 <TIM_OC4_SetConfig+0xbc>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	021b      	lsls	r3, r3, #8
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e1f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	031b      	lsls	r3, r3, #12
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a19      	ldr	r2, [pc, #100]	; (800e268 <TIM_OC4_SetConfig+0xc0>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d00f      	beq.n	800e228 <TIM_OC4_SetConfig+0x80>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	4a18      	ldr	r2, [pc, #96]	; (800e26c <TIM_OC4_SetConfig+0xc4>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d00b      	beq.n	800e228 <TIM_OC4_SetConfig+0x80>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a17      	ldr	r2, [pc, #92]	; (800e270 <TIM_OC4_SetConfig+0xc8>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d007      	beq.n	800e228 <TIM_OC4_SetConfig+0x80>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a16      	ldr	r2, [pc, #88]	; (800e274 <TIM_OC4_SetConfig+0xcc>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d003      	beq.n	800e228 <TIM_OC4_SetConfig+0x80>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a15      	ldr	r2, [pc, #84]	; (800e278 <TIM_OC4_SetConfig+0xd0>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d109      	bne.n	800e23c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e22e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	695b      	ldr	r3, [r3, #20]
 800e234:	019b      	lsls	r3, r3, #6
 800e236:	697a      	ldr	r2, [r7, #20]
 800e238:	4313      	orrs	r3, r2
 800e23a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	697a      	ldr	r2, [r7, #20]
 800e240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	685a      	ldr	r2, [r3, #4]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	693a      	ldr	r2, [r7, #16]
 800e254:	621a      	str	r2, [r3, #32]
}
 800e256:	bf00      	nop
 800e258:	371c      	adds	r7, #28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	feff8fff 	.word	0xfeff8fff
 800e268:	40010000 	.word	0x40010000
 800e26c:	40010400 	.word	0x40010400
 800e270:	40014000 	.word	0x40014000
 800e274:	40014400 	.word	0x40014400
 800e278:	40014800 	.word	0x40014800

0800e27c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	4b21      	ldr	r3, [pc, #132]	; (800e32c <TIM_OC5_SetConfig+0xb0>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e2bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	041b      	lsls	r3, r3, #16
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a18      	ldr	r2, [pc, #96]	; (800e330 <TIM_OC5_SetConfig+0xb4>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d00f      	beq.n	800e2f2 <TIM_OC5_SetConfig+0x76>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a17      	ldr	r2, [pc, #92]	; (800e334 <TIM_OC5_SetConfig+0xb8>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d00b      	beq.n	800e2f2 <TIM_OC5_SetConfig+0x76>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4a16      	ldr	r2, [pc, #88]	; (800e338 <TIM_OC5_SetConfig+0xbc>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d007      	beq.n	800e2f2 <TIM_OC5_SetConfig+0x76>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a15      	ldr	r2, [pc, #84]	; (800e33c <TIM_OC5_SetConfig+0xc0>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d003      	beq.n	800e2f2 <TIM_OC5_SetConfig+0x76>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a14      	ldr	r2, [pc, #80]	; (800e340 <TIM_OC5_SetConfig+0xc4>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d109      	bne.n	800e306 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	021b      	lsls	r3, r3, #8
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	4313      	orrs	r3, r2
 800e304:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	621a      	str	r2, [r3, #32]
}
 800e320:	bf00      	nop
 800e322:	371c      	adds	r7, #28
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	fffeff8f 	.word	0xfffeff8f
 800e330:	40010000 	.word	0x40010000
 800e334:	40010400 	.word	0x40010400
 800e338:	40014000 	.word	0x40014000
 800e33c:	40014400 	.word	0x40014400
 800e340:	40014800 	.word	0x40014800

0800e344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e344:	b480      	push	{r7}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a1b      	ldr	r3, [r3, #32]
 800e352:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	4b22      	ldr	r3, [pc, #136]	; (800e3f8 <TIM_OC6_SetConfig+0xb4>)
 800e370:	4013      	ands	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	021b      	lsls	r3, r3, #8
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	051b      	lsls	r3, r3, #20
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	4313      	orrs	r3, r2
 800e392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4a19      	ldr	r2, [pc, #100]	; (800e3fc <TIM_OC6_SetConfig+0xb8>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d00f      	beq.n	800e3bc <TIM_OC6_SetConfig+0x78>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	4a18      	ldr	r2, [pc, #96]	; (800e400 <TIM_OC6_SetConfig+0xbc>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d00b      	beq.n	800e3bc <TIM_OC6_SetConfig+0x78>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4a17      	ldr	r2, [pc, #92]	; (800e404 <TIM_OC6_SetConfig+0xc0>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d007      	beq.n	800e3bc <TIM_OC6_SetConfig+0x78>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	4a16      	ldr	r2, [pc, #88]	; (800e408 <TIM_OC6_SetConfig+0xc4>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d003      	beq.n	800e3bc <TIM_OC6_SetConfig+0x78>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	4a15      	ldr	r2, [pc, #84]	; (800e40c <TIM_OC6_SetConfig+0xc8>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d109      	bne.n	800e3d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	695b      	ldr	r3, [r3, #20]
 800e3c8:	029b      	lsls	r3, r3, #10
 800e3ca:	697a      	ldr	r2, [r7, #20]
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	685a      	ldr	r2, [r3, #4]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	693a      	ldr	r2, [r7, #16]
 800e3e8:	621a      	str	r2, [r3, #32]
}
 800e3ea:	bf00      	nop
 800e3ec:	371c      	adds	r7, #28
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	feff8fff 	.word	0xfeff8fff
 800e3fc:	40010000 	.word	0x40010000
 800e400:	40010400 	.word	0x40010400
 800e404:	40014000 	.word	0x40014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	40014800 	.word	0x40014800

0800e410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f003 031f 	and.w	r3, r3, #31
 800e422:	2201      	movs	r2, #1
 800e424:	fa02 f303 	lsl.w	r3, r2, r3
 800e428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	6a1a      	ldr	r2, [r3, #32]
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	43db      	mvns	r3, r3
 800e432:	401a      	ands	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6a1a      	ldr	r2, [r3, #32]
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	f003 031f 	and.w	r3, r3, #31
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	fa01 f303 	lsl.w	r3, r1, r3
 800e448:	431a      	orrs	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	621a      	str	r2, [r3, #32]
}
 800e44e:	bf00      	nop
 800e450:	371c      	adds	r7, #28
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
	...

0800e45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d101      	bne.n	800e474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e470:	2302      	movs	r3, #2
 800e472:	e077      	b.n	800e564 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2202      	movs	r2, #2
 800e480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a35      	ldr	r2, [pc, #212]	; (800e570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d004      	beq.n	800e4a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a34      	ldr	r2, [pc, #208]	; (800e574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d108      	bne.n	800e4ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e4ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a25      	ldr	r2, [pc, #148]	; (800e570 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d02c      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4e6:	d027      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a22      	ldr	r2, [pc, #136]	; (800e578 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d022      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a21      	ldr	r2, [pc, #132]	; (800e57c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d01d      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a1f      	ldr	r2, [pc, #124]	; (800e580 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d018      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a1a      	ldr	r2, [pc, #104]	; (800e574 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d013      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a1b      	ldr	r2, [pc, #108]	; (800e584 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d00e      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a1a      	ldr	r2, [pc, #104]	; (800e588 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d009      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a18      	ldr	r2, [pc, #96]	; (800e58c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d004      	beq.n	800e538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4a17      	ldr	r2, [pc, #92]	; (800e590 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d10c      	bne.n	800e552 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e53e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	4313      	orrs	r3, r2
 800e548:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	40010000 	.word	0x40010000
 800e574:	40010400 	.word	0x40010400
 800e578:	40000400 	.word	0x40000400
 800e57c:	40000800 	.word	0x40000800
 800e580:	40000c00 	.word	0x40000c00
 800e584:	40001800 	.word	0x40001800
 800e588:	40014000 	.word	0x40014000
 800e58c:	4000e000 	.word	0x4000e000
 800e590:	4000e400 	.word	0x4000e400

0800e594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d101      	bne.n	800e5e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e042      	b.n	800e668 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d106      	bne.n	800e5fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7f4 f9f9 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2224      	movs	r2, #36	; 0x24
 800e5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f022 0201 	bic.w	r2, r2, #1
 800e610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f82c 	bl	800e670 <UART_SetConfig>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d101      	bne.n	800e622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e61e:	2301      	movs	r3, #1
 800e620:	e022      	b.n	800e668 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e626:	2b00      	cmp	r3, #0
 800e628:	d002      	beq.n	800e630 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fe8c 	bl	800f348 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	685a      	ldr	r2, [r3, #4]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e63e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	689a      	ldr	r2, [r3, #8]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e64e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f042 0201 	orr.w	r2, r2, #1
 800e65e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 ff13 	bl	800f48c <UART_CheckIdleState>
 800e666:	4603      	mov	r3, r0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e674:	b092      	sub	sp, #72	; 0x48
 800e676:	af00      	add	r7, sp, #0
 800e678:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e67a:	2300      	movs	r3, #0
 800e67c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	431a      	orrs	r2, r3
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	431a      	orrs	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	69db      	ldr	r3, [r3, #28]
 800e694:	4313      	orrs	r3, r2
 800e696:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	4bbe      	ldr	r3, [pc, #760]	; (800e998 <UART_SetConfig+0x328>)
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	6812      	ldr	r2, [r2, #0]
 800e6a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6a8:	430b      	orrs	r3, r1
 800e6aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	68da      	ldr	r2, [r3, #12]
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	430a      	orrs	r2, r1
 800e6c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4ab3      	ldr	r2, [pc, #716]	; (800e99c <UART_SetConfig+0x32c>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d004      	beq.n	800e6dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	689a      	ldr	r2, [r3, #8]
 800e6e2:	4baf      	ldr	r3, [pc, #700]	; (800e9a0 <UART_SetConfig+0x330>)
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	6812      	ldr	r2, [r2, #0]
 800e6ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ec:	430b      	orrs	r3, r1
 800e6ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f6:	f023 010f 	bic.w	r1, r3, #15
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	430a      	orrs	r2, r1
 800e704:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4aa6      	ldr	r2, [pc, #664]	; (800e9a4 <UART_SetConfig+0x334>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d177      	bne.n	800e800 <UART_SetConfig+0x190>
 800e710:	4ba5      	ldr	r3, [pc, #660]	; (800e9a8 <UART_SetConfig+0x338>)
 800e712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e718:	2b28      	cmp	r3, #40	; 0x28
 800e71a:	d86d      	bhi.n	800e7f8 <UART_SetConfig+0x188>
 800e71c:	a201      	add	r2, pc, #4	; (adr r2, 800e724 <UART_SetConfig+0xb4>)
 800e71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e722:	bf00      	nop
 800e724:	0800e7c9 	.word	0x0800e7c9
 800e728:	0800e7f9 	.word	0x0800e7f9
 800e72c:	0800e7f9 	.word	0x0800e7f9
 800e730:	0800e7f9 	.word	0x0800e7f9
 800e734:	0800e7f9 	.word	0x0800e7f9
 800e738:	0800e7f9 	.word	0x0800e7f9
 800e73c:	0800e7f9 	.word	0x0800e7f9
 800e740:	0800e7f9 	.word	0x0800e7f9
 800e744:	0800e7d1 	.word	0x0800e7d1
 800e748:	0800e7f9 	.word	0x0800e7f9
 800e74c:	0800e7f9 	.word	0x0800e7f9
 800e750:	0800e7f9 	.word	0x0800e7f9
 800e754:	0800e7f9 	.word	0x0800e7f9
 800e758:	0800e7f9 	.word	0x0800e7f9
 800e75c:	0800e7f9 	.word	0x0800e7f9
 800e760:	0800e7f9 	.word	0x0800e7f9
 800e764:	0800e7d9 	.word	0x0800e7d9
 800e768:	0800e7f9 	.word	0x0800e7f9
 800e76c:	0800e7f9 	.word	0x0800e7f9
 800e770:	0800e7f9 	.word	0x0800e7f9
 800e774:	0800e7f9 	.word	0x0800e7f9
 800e778:	0800e7f9 	.word	0x0800e7f9
 800e77c:	0800e7f9 	.word	0x0800e7f9
 800e780:	0800e7f9 	.word	0x0800e7f9
 800e784:	0800e7e1 	.word	0x0800e7e1
 800e788:	0800e7f9 	.word	0x0800e7f9
 800e78c:	0800e7f9 	.word	0x0800e7f9
 800e790:	0800e7f9 	.word	0x0800e7f9
 800e794:	0800e7f9 	.word	0x0800e7f9
 800e798:	0800e7f9 	.word	0x0800e7f9
 800e79c:	0800e7f9 	.word	0x0800e7f9
 800e7a0:	0800e7f9 	.word	0x0800e7f9
 800e7a4:	0800e7e9 	.word	0x0800e7e9
 800e7a8:	0800e7f9 	.word	0x0800e7f9
 800e7ac:	0800e7f9 	.word	0x0800e7f9
 800e7b0:	0800e7f9 	.word	0x0800e7f9
 800e7b4:	0800e7f9 	.word	0x0800e7f9
 800e7b8:	0800e7f9 	.word	0x0800e7f9
 800e7bc:	0800e7f9 	.word	0x0800e7f9
 800e7c0:	0800e7f9 	.word	0x0800e7f9
 800e7c4:	0800e7f1 	.word	0x0800e7f1
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ce:	e326      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7d0:	2304      	movs	r3, #4
 800e7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7d6:	e322      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7d8:	2308      	movs	r3, #8
 800e7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7de:	e31e      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7e0:	2310      	movs	r3, #16
 800e7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e6:	e31a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7e8:	2320      	movs	r3, #32
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e316      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7f0:	2340      	movs	r3, #64	; 0x40
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e312      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e7f8:	2380      	movs	r3, #128	; 0x80
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e30e      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a69      	ldr	r2, [pc, #420]	; (800e9ac <UART_SetConfig+0x33c>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d130      	bne.n	800e86c <UART_SetConfig+0x1fc>
 800e80a:	4b67      	ldr	r3, [pc, #412]	; (800e9a8 <UART_SetConfig+0x338>)
 800e80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e80e:	f003 0307 	and.w	r3, r3, #7
 800e812:	2b05      	cmp	r3, #5
 800e814:	d826      	bhi.n	800e864 <UART_SetConfig+0x1f4>
 800e816:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <UART_SetConfig+0x1ac>)
 800e818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81c:	0800e835 	.word	0x0800e835
 800e820:	0800e83d 	.word	0x0800e83d
 800e824:	0800e845 	.word	0x0800e845
 800e828:	0800e84d 	.word	0x0800e84d
 800e82c:	0800e855 	.word	0x0800e855
 800e830:	0800e85d 	.word	0x0800e85d
 800e834:	2300      	movs	r3, #0
 800e836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e83a:	e2f0      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e83c:	2304      	movs	r3, #4
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e2ec      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e844:	2308      	movs	r3, #8
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e2e8      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e84c:	2310      	movs	r3, #16
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e2e4      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e854:	2320      	movs	r3, #32
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e2e0      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e85c:	2340      	movs	r3, #64	; 0x40
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e2dc      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e864:	2380      	movs	r3, #128	; 0x80
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e2d8      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a4f      	ldr	r2, [pc, #316]	; (800e9b0 <UART_SetConfig+0x340>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d130      	bne.n	800e8d8 <UART_SetConfig+0x268>
 800e876:	4b4c      	ldr	r3, [pc, #304]	; (800e9a8 <UART_SetConfig+0x338>)
 800e878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e87a:	f003 0307 	and.w	r3, r3, #7
 800e87e:	2b05      	cmp	r3, #5
 800e880:	d826      	bhi.n	800e8d0 <UART_SetConfig+0x260>
 800e882:	a201      	add	r2, pc, #4	; (adr r2, 800e888 <UART_SetConfig+0x218>)
 800e884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e888:	0800e8a1 	.word	0x0800e8a1
 800e88c:	0800e8a9 	.word	0x0800e8a9
 800e890:	0800e8b1 	.word	0x0800e8b1
 800e894:	0800e8b9 	.word	0x0800e8b9
 800e898:	0800e8c1 	.word	0x0800e8c1
 800e89c:	0800e8c9 	.word	0x0800e8c9
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8a6:	e2ba      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8a8:	2304      	movs	r3, #4
 800e8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ae:	e2b6      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8b0:	2308      	movs	r3, #8
 800e8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b6:	e2b2      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8b8:	2310      	movs	r3, #16
 800e8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8be:	e2ae      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8c0:	2320      	movs	r3, #32
 800e8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c6:	e2aa      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8c8:	2340      	movs	r3, #64	; 0x40
 800e8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ce:	e2a6      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8d0:	2380      	movs	r3, #128	; 0x80
 800e8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d6:	e2a2      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4a35      	ldr	r2, [pc, #212]	; (800e9b4 <UART_SetConfig+0x344>)
 800e8de:	4293      	cmp	r3, r2
 800e8e0:	d130      	bne.n	800e944 <UART_SetConfig+0x2d4>
 800e8e2:	4b31      	ldr	r3, [pc, #196]	; (800e9a8 <UART_SetConfig+0x338>)
 800e8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e6:	f003 0307 	and.w	r3, r3, #7
 800e8ea:	2b05      	cmp	r3, #5
 800e8ec:	d826      	bhi.n	800e93c <UART_SetConfig+0x2cc>
 800e8ee:	a201      	add	r2, pc, #4	; (adr r2, 800e8f4 <UART_SetConfig+0x284>)
 800e8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f4:	0800e90d 	.word	0x0800e90d
 800e8f8:	0800e915 	.word	0x0800e915
 800e8fc:	0800e91d 	.word	0x0800e91d
 800e900:	0800e925 	.word	0x0800e925
 800e904:	0800e92d 	.word	0x0800e92d
 800e908:	0800e935 	.word	0x0800e935
 800e90c:	2300      	movs	r3, #0
 800e90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e912:	e284      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e914:	2304      	movs	r3, #4
 800e916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91a:	e280      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e91c:	2308      	movs	r3, #8
 800e91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e922:	e27c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e924:	2310      	movs	r3, #16
 800e926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92a:	e278      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e92c:	2320      	movs	r3, #32
 800e92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e932:	e274      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e934:	2340      	movs	r3, #64	; 0x40
 800e936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93a:	e270      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e93c:	2380      	movs	r3, #128	; 0x80
 800e93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e942:	e26c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a1b      	ldr	r2, [pc, #108]	; (800e9b8 <UART_SetConfig+0x348>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d142      	bne.n	800e9d4 <UART_SetConfig+0x364>
 800e94e:	4b16      	ldr	r3, [pc, #88]	; (800e9a8 <UART_SetConfig+0x338>)
 800e950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e952:	f003 0307 	and.w	r3, r3, #7
 800e956:	2b05      	cmp	r3, #5
 800e958:	d838      	bhi.n	800e9cc <UART_SetConfig+0x35c>
 800e95a:	a201      	add	r2, pc, #4	; (adr r2, 800e960 <UART_SetConfig+0x2f0>)
 800e95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e960:	0800e979 	.word	0x0800e979
 800e964:	0800e981 	.word	0x0800e981
 800e968:	0800e989 	.word	0x0800e989
 800e96c:	0800e991 	.word	0x0800e991
 800e970:	0800e9bd 	.word	0x0800e9bd
 800e974:	0800e9c5 	.word	0x0800e9c5
 800e978:	2300      	movs	r3, #0
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e24e      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e980:	2304      	movs	r3, #4
 800e982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e986:	e24a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e988:	2308      	movs	r3, #8
 800e98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e98e:	e246      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e990:	2310      	movs	r3, #16
 800e992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e996:	e242      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e998:	cfff69f3 	.word	0xcfff69f3
 800e99c:	58000c00 	.word	0x58000c00
 800e9a0:	11fff4ff 	.word	0x11fff4ff
 800e9a4:	40011000 	.word	0x40011000
 800e9a8:	58024400 	.word	0x58024400
 800e9ac:	40004400 	.word	0x40004400
 800e9b0:	40004800 	.word	0x40004800
 800e9b4:	40004c00 	.word	0x40004c00
 800e9b8:	40005000 	.word	0x40005000
 800e9bc:	2320      	movs	r3, #32
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c2:	e22c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e9c4:	2340      	movs	r3, #64	; 0x40
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e228      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e9cc:	2380      	movs	r3, #128	; 0x80
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e224      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4ab1      	ldr	r2, [pc, #708]	; (800eca0 <UART_SetConfig+0x630>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d176      	bne.n	800eacc <UART_SetConfig+0x45c>
 800e9de:	4bb1      	ldr	r3, [pc, #708]	; (800eca4 <UART_SetConfig+0x634>)
 800e9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9e6:	2b28      	cmp	r3, #40	; 0x28
 800e9e8:	d86c      	bhi.n	800eac4 <UART_SetConfig+0x454>
 800e9ea:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <UART_SetConfig+0x380>)
 800e9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f0:	0800ea95 	.word	0x0800ea95
 800e9f4:	0800eac5 	.word	0x0800eac5
 800e9f8:	0800eac5 	.word	0x0800eac5
 800e9fc:	0800eac5 	.word	0x0800eac5
 800ea00:	0800eac5 	.word	0x0800eac5
 800ea04:	0800eac5 	.word	0x0800eac5
 800ea08:	0800eac5 	.word	0x0800eac5
 800ea0c:	0800eac5 	.word	0x0800eac5
 800ea10:	0800ea9d 	.word	0x0800ea9d
 800ea14:	0800eac5 	.word	0x0800eac5
 800ea18:	0800eac5 	.word	0x0800eac5
 800ea1c:	0800eac5 	.word	0x0800eac5
 800ea20:	0800eac5 	.word	0x0800eac5
 800ea24:	0800eac5 	.word	0x0800eac5
 800ea28:	0800eac5 	.word	0x0800eac5
 800ea2c:	0800eac5 	.word	0x0800eac5
 800ea30:	0800eaa5 	.word	0x0800eaa5
 800ea34:	0800eac5 	.word	0x0800eac5
 800ea38:	0800eac5 	.word	0x0800eac5
 800ea3c:	0800eac5 	.word	0x0800eac5
 800ea40:	0800eac5 	.word	0x0800eac5
 800ea44:	0800eac5 	.word	0x0800eac5
 800ea48:	0800eac5 	.word	0x0800eac5
 800ea4c:	0800eac5 	.word	0x0800eac5
 800ea50:	0800eaad 	.word	0x0800eaad
 800ea54:	0800eac5 	.word	0x0800eac5
 800ea58:	0800eac5 	.word	0x0800eac5
 800ea5c:	0800eac5 	.word	0x0800eac5
 800ea60:	0800eac5 	.word	0x0800eac5
 800ea64:	0800eac5 	.word	0x0800eac5
 800ea68:	0800eac5 	.word	0x0800eac5
 800ea6c:	0800eac5 	.word	0x0800eac5
 800ea70:	0800eab5 	.word	0x0800eab5
 800ea74:	0800eac5 	.word	0x0800eac5
 800ea78:	0800eac5 	.word	0x0800eac5
 800ea7c:	0800eac5 	.word	0x0800eac5
 800ea80:	0800eac5 	.word	0x0800eac5
 800ea84:	0800eac5 	.word	0x0800eac5
 800ea88:	0800eac5 	.word	0x0800eac5
 800ea8c:	0800eac5 	.word	0x0800eac5
 800ea90:	0800eabd 	.word	0x0800eabd
 800ea94:	2301      	movs	r3, #1
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9a:	e1c0      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ea9c:	2304      	movs	r3, #4
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa2:	e1bc      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eaa4:	2308      	movs	r3, #8
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaaa:	e1b8      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eaac:	2310      	movs	r3, #16
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab2:	e1b4      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eab4:	2320      	movs	r3, #32
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaba:	e1b0      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac2:	e1ac      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eac4:	2380      	movs	r3, #128	; 0x80
 800eac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaca:	e1a8      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a75      	ldr	r2, [pc, #468]	; (800eca8 <UART_SetConfig+0x638>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d130      	bne.n	800eb38 <UART_SetConfig+0x4c8>
 800ead6:	4b73      	ldr	r3, [pc, #460]	; (800eca4 <UART_SetConfig+0x634>)
 800ead8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eada:	f003 0307 	and.w	r3, r3, #7
 800eade:	2b05      	cmp	r3, #5
 800eae0:	d826      	bhi.n	800eb30 <UART_SetConfig+0x4c0>
 800eae2:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <UART_SetConfig+0x478>)
 800eae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae8:	0800eb01 	.word	0x0800eb01
 800eaec:	0800eb09 	.word	0x0800eb09
 800eaf0:	0800eb11 	.word	0x0800eb11
 800eaf4:	0800eb19 	.word	0x0800eb19
 800eaf8:	0800eb21 	.word	0x0800eb21
 800eafc:	0800eb29 	.word	0x0800eb29
 800eb00:	2300      	movs	r3, #0
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb06:	e18a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb08:	2304      	movs	r3, #4
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e186      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb10:	2308      	movs	r3, #8
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb16:	e182      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb18:	2310      	movs	r3, #16
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1e:	e17e      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb20:	2320      	movs	r3, #32
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb26:	e17a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb28:	2340      	movs	r3, #64	; 0x40
 800eb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2e:	e176      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb30:	2380      	movs	r3, #128	; 0x80
 800eb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb36:	e172      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a5b      	ldr	r2, [pc, #364]	; (800ecac <UART_SetConfig+0x63c>)
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d130      	bne.n	800eba4 <UART_SetConfig+0x534>
 800eb42:	4b58      	ldr	r3, [pc, #352]	; (800eca4 <UART_SetConfig+0x634>)
 800eb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb46:	f003 0307 	and.w	r3, r3, #7
 800eb4a:	2b05      	cmp	r3, #5
 800eb4c:	d826      	bhi.n	800eb9c <UART_SetConfig+0x52c>
 800eb4e:	a201      	add	r2, pc, #4	; (adr r2, 800eb54 <UART_SetConfig+0x4e4>)
 800eb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb54:	0800eb6d 	.word	0x0800eb6d
 800eb58:	0800eb75 	.word	0x0800eb75
 800eb5c:	0800eb7d 	.word	0x0800eb7d
 800eb60:	0800eb85 	.word	0x0800eb85
 800eb64:	0800eb8d 	.word	0x0800eb8d
 800eb68:	0800eb95 	.word	0x0800eb95
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e154      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb74:	2304      	movs	r3, #4
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e150      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb7c:	2308      	movs	r3, #8
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e14c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb84:	2310      	movs	r3, #16
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8a:	e148      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb8c:	2320      	movs	r3, #32
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb92:	e144      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb94:	2340      	movs	r3, #64	; 0x40
 800eb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9a:	e140      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eb9c:	2380      	movs	r3, #128	; 0x80
 800eb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba2:	e13c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a41      	ldr	r2, [pc, #260]	; (800ecb0 <UART_SetConfig+0x640>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	f040 8082 	bne.w	800ecb4 <UART_SetConfig+0x644>
 800ebb0:	4b3c      	ldr	r3, [pc, #240]	; (800eca4 <UART_SetConfig+0x634>)
 800ebb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebb8:	2b28      	cmp	r3, #40	; 0x28
 800ebba:	d86d      	bhi.n	800ec98 <UART_SetConfig+0x628>
 800ebbc:	a201      	add	r2, pc, #4	; (adr r2, 800ebc4 <UART_SetConfig+0x554>)
 800ebbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc2:	bf00      	nop
 800ebc4:	0800ec69 	.word	0x0800ec69
 800ebc8:	0800ec99 	.word	0x0800ec99
 800ebcc:	0800ec99 	.word	0x0800ec99
 800ebd0:	0800ec99 	.word	0x0800ec99
 800ebd4:	0800ec99 	.word	0x0800ec99
 800ebd8:	0800ec99 	.word	0x0800ec99
 800ebdc:	0800ec99 	.word	0x0800ec99
 800ebe0:	0800ec99 	.word	0x0800ec99
 800ebe4:	0800ec71 	.word	0x0800ec71
 800ebe8:	0800ec99 	.word	0x0800ec99
 800ebec:	0800ec99 	.word	0x0800ec99
 800ebf0:	0800ec99 	.word	0x0800ec99
 800ebf4:	0800ec99 	.word	0x0800ec99
 800ebf8:	0800ec99 	.word	0x0800ec99
 800ebfc:	0800ec99 	.word	0x0800ec99
 800ec00:	0800ec99 	.word	0x0800ec99
 800ec04:	0800ec79 	.word	0x0800ec79
 800ec08:	0800ec99 	.word	0x0800ec99
 800ec0c:	0800ec99 	.word	0x0800ec99
 800ec10:	0800ec99 	.word	0x0800ec99
 800ec14:	0800ec99 	.word	0x0800ec99
 800ec18:	0800ec99 	.word	0x0800ec99
 800ec1c:	0800ec99 	.word	0x0800ec99
 800ec20:	0800ec99 	.word	0x0800ec99
 800ec24:	0800ec81 	.word	0x0800ec81
 800ec28:	0800ec99 	.word	0x0800ec99
 800ec2c:	0800ec99 	.word	0x0800ec99
 800ec30:	0800ec99 	.word	0x0800ec99
 800ec34:	0800ec99 	.word	0x0800ec99
 800ec38:	0800ec99 	.word	0x0800ec99
 800ec3c:	0800ec99 	.word	0x0800ec99
 800ec40:	0800ec99 	.word	0x0800ec99
 800ec44:	0800ec89 	.word	0x0800ec89
 800ec48:	0800ec99 	.word	0x0800ec99
 800ec4c:	0800ec99 	.word	0x0800ec99
 800ec50:	0800ec99 	.word	0x0800ec99
 800ec54:	0800ec99 	.word	0x0800ec99
 800ec58:	0800ec99 	.word	0x0800ec99
 800ec5c:	0800ec99 	.word	0x0800ec99
 800ec60:	0800ec99 	.word	0x0800ec99
 800ec64:	0800ec91 	.word	0x0800ec91
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec6e:	e0d6      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec70:	2304      	movs	r3, #4
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec76:	e0d2      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec78:	2308      	movs	r3, #8
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7e:	e0ce      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec80:	2310      	movs	r3, #16
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e0ca      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec88:	2320      	movs	r3, #32
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e0c6      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec90:	2340      	movs	r3, #64	; 0x40
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e0c2      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ec98:	2380      	movs	r3, #128	; 0x80
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e0be      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eca0:	40011400 	.word	0x40011400
 800eca4:	58024400 	.word	0x58024400
 800eca8:	40007800 	.word	0x40007800
 800ecac:	40007c00 	.word	0x40007c00
 800ecb0:	40011800 	.word	0x40011800
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4aad      	ldr	r2, [pc, #692]	; (800ef70 <UART_SetConfig+0x900>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d176      	bne.n	800edac <UART_SetConfig+0x73c>
 800ecbe:	4bad      	ldr	r3, [pc, #692]	; (800ef74 <UART_SetConfig+0x904>)
 800ecc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecc6:	2b28      	cmp	r3, #40	; 0x28
 800ecc8:	d86c      	bhi.n	800eda4 <UART_SetConfig+0x734>
 800ecca:	a201      	add	r2, pc, #4	; (adr r2, 800ecd0 <UART_SetConfig+0x660>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800ed75 	.word	0x0800ed75
 800ecd4:	0800eda5 	.word	0x0800eda5
 800ecd8:	0800eda5 	.word	0x0800eda5
 800ecdc:	0800eda5 	.word	0x0800eda5
 800ece0:	0800eda5 	.word	0x0800eda5
 800ece4:	0800eda5 	.word	0x0800eda5
 800ece8:	0800eda5 	.word	0x0800eda5
 800ecec:	0800eda5 	.word	0x0800eda5
 800ecf0:	0800ed7d 	.word	0x0800ed7d
 800ecf4:	0800eda5 	.word	0x0800eda5
 800ecf8:	0800eda5 	.word	0x0800eda5
 800ecfc:	0800eda5 	.word	0x0800eda5
 800ed00:	0800eda5 	.word	0x0800eda5
 800ed04:	0800eda5 	.word	0x0800eda5
 800ed08:	0800eda5 	.word	0x0800eda5
 800ed0c:	0800eda5 	.word	0x0800eda5
 800ed10:	0800ed85 	.word	0x0800ed85
 800ed14:	0800eda5 	.word	0x0800eda5
 800ed18:	0800eda5 	.word	0x0800eda5
 800ed1c:	0800eda5 	.word	0x0800eda5
 800ed20:	0800eda5 	.word	0x0800eda5
 800ed24:	0800eda5 	.word	0x0800eda5
 800ed28:	0800eda5 	.word	0x0800eda5
 800ed2c:	0800eda5 	.word	0x0800eda5
 800ed30:	0800ed8d 	.word	0x0800ed8d
 800ed34:	0800eda5 	.word	0x0800eda5
 800ed38:	0800eda5 	.word	0x0800eda5
 800ed3c:	0800eda5 	.word	0x0800eda5
 800ed40:	0800eda5 	.word	0x0800eda5
 800ed44:	0800eda5 	.word	0x0800eda5
 800ed48:	0800eda5 	.word	0x0800eda5
 800ed4c:	0800eda5 	.word	0x0800eda5
 800ed50:	0800ed95 	.word	0x0800ed95
 800ed54:	0800eda5 	.word	0x0800eda5
 800ed58:	0800eda5 	.word	0x0800eda5
 800ed5c:	0800eda5 	.word	0x0800eda5
 800ed60:	0800eda5 	.word	0x0800eda5
 800ed64:	0800eda5 	.word	0x0800eda5
 800ed68:	0800eda5 	.word	0x0800eda5
 800ed6c:	0800eda5 	.word	0x0800eda5
 800ed70:	0800ed9d 	.word	0x0800ed9d
 800ed74:	2301      	movs	r3, #1
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7a:	e050      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ed7c:	2304      	movs	r3, #4
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e04c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ed84:	2308      	movs	r3, #8
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e048      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ed8c:	2310      	movs	r3, #16
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e044      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ed94:	2320      	movs	r3, #32
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e040      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ed9c:	2340      	movs	r3, #64	; 0x40
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda2:	e03c      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800eda4:	2380      	movs	r3, #128	; 0x80
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e038      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a71      	ldr	r2, [pc, #452]	; (800ef78 <UART_SetConfig+0x908>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d130      	bne.n	800ee18 <UART_SetConfig+0x7a8>
 800edb6:	4b6f      	ldr	r3, [pc, #444]	; (800ef74 <UART_SetConfig+0x904>)
 800edb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d826      	bhi.n	800ee10 <UART_SetConfig+0x7a0>
 800edc2:	a201      	add	r2, pc, #4	; (adr r2, 800edc8 <UART_SetConfig+0x758>)
 800edc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc8:	0800ede1 	.word	0x0800ede1
 800edcc:	0800ede9 	.word	0x0800ede9
 800edd0:	0800edf1 	.word	0x0800edf1
 800edd4:	0800edf9 	.word	0x0800edf9
 800edd8:	0800ee01 	.word	0x0800ee01
 800eddc:	0800ee09 	.word	0x0800ee09
 800ede0:	2302      	movs	r3, #2
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede6:	e01a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ede8:	2304      	movs	r3, #4
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e016      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800edf0:	2308      	movs	r3, #8
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e012      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800edf8:	2310      	movs	r3, #16
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e00e      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ee00:	2320      	movs	r3, #32
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e00a      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0e:	e006      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ee10:	2380      	movs	r3, #128	; 0x80
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e002      	b.n	800ee1e <UART_SetConfig+0x7ae>
 800ee18:	2380      	movs	r3, #128	; 0x80
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a55      	ldr	r2, [pc, #340]	; (800ef78 <UART_SetConfig+0x908>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	f040 80f8 	bne.w	800f01a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee2e:	2b20      	cmp	r3, #32
 800ee30:	dc46      	bgt.n	800eec0 <UART_SetConfig+0x850>
 800ee32:	2b02      	cmp	r3, #2
 800ee34:	db75      	blt.n	800ef22 <UART_SetConfig+0x8b2>
 800ee36:	3b02      	subs	r3, #2
 800ee38:	2b1e      	cmp	r3, #30
 800ee3a:	d872      	bhi.n	800ef22 <UART_SetConfig+0x8b2>
 800ee3c:	a201      	add	r2, pc, #4	; (adr r2, 800ee44 <UART_SetConfig+0x7d4>)
 800ee3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee42:	bf00      	nop
 800ee44:	0800eec7 	.word	0x0800eec7
 800ee48:	0800ef23 	.word	0x0800ef23
 800ee4c:	0800eecf 	.word	0x0800eecf
 800ee50:	0800ef23 	.word	0x0800ef23
 800ee54:	0800ef23 	.word	0x0800ef23
 800ee58:	0800ef23 	.word	0x0800ef23
 800ee5c:	0800eedf 	.word	0x0800eedf
 800ee60:	0800ef23 	.word	0x0800ef23
 800ee64:	0800ef23 	.word	0x0800ef23
 800ee68:	0800ef23 	.word	0x0800ef23
 800ee6c:	0800ef23 	.word	0x0800ef23
 800ee70:	0800ef23 	.word	0x0800ef23
 800ee74:	0800ef23 	.word	0x0800ef23
 800ee78:	0800ef23 	.word	0x0800ef23
 800ee7c:	0800eeef 	.word	0x0800eeef
 800ee80:	0800ef23 	.word	0x0800ef23
 800ee84:	0800ef23 	.word	0x0800ef23
 800ee88:	0800ef23 	.word	0x0800ef23
 800ee8c:	0800ef23 	.word	0x0800ef23
 800ee90:	0800ef23 	.word	0x0800ef23
 800ee94:	0800ef23 	.word	0x0800ef23
 800ee98:	0800ef23 	.word	0x0800ef23
 800ee9c:	0800ef23 	.word	0x0800ef23
 800eea0:	0800ef23 	.word	0x0800ef23
 800eea4:	0800ef23 	.word	0x0800ef23
 800eea8:	0800ef23 	.word	0x0800ef23
 800eeac:	0800ef23 	.word	0x0800ef23
 800eeb0:	0800ef23 	.word	0x0800ef23
 800eeb4:	0800ef23 	.word	0x0800ef23
 800eeb8:	0800ef23 	.word	0x0800ef23
 800eebc:	0800ef15 	.word	0x0800ef15
 800eec0:	2b40      	cmp	r3, #64	; 0x40
 800eec2:	d02a      	beq.n	800ef1a <UART_SetConfig+0x8aa>
 800eec4:	e02d      	b.n	800ef22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800eec6:	f7fc fd31 	bl	800b92c <HAL_RCCEx_GetD3PCLK1Freq>
 800eeca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eecc:	e02f      	b.n	800ef2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fc fd40 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eedc:	e027      	b.n	800ef2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eede:	f107 0318 	add.w	r3, r7, #24
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fc fe8c 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeec:	e01f      	b.n	800ef2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <UART_SetConfig+0x904>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f003 0320 	and.w	r3, r3, #32
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d009      	beq.n	800ef0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eefa:	4b1e      	ldr	r3, [pc, #120]	; (800ef74 <UART_SetConfig+0x904>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	08db      	lsrs	r3, r3, #3
 800ef00:	f003 0303 	and.w	r3, r3, #3
 800ef04:	4a1d      	ldr	r2, [pc, #116]	; (800ef7c <UART_SetConfig+0x90c>)
 800ef06:	fa22 f303 	lsr.w	r3, r2, r3
 800ef0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef0c:	e00f      	b.n	800ef2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ef0e:	4b1b      	ldr	r3, [pc, #108]	; (800ef7c <UART_SetConfig+0x90c>)
 800ef10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef12:	e00c      	b.n	800ef2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef14:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <UART_SetConfig+0x910>)
 800ef16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef18:	e009      	b.n	800ef2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef20:	e005      	b.n	800ef2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ef22:	2300      	movs	r3, #0
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ef2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f000 81ee 	beq.w	800f312 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3a:	4a12      	ldr	r2, [pc, #72]	; (800ef84 <UART_SetConfig+0x914>)
 800ef3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef40:	461a      	mov	r2, r3
 800ef42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef48:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	005b      	lsls	r3, r3, #1
 800ef52:	4413      	add	r3, r2
 800ef54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d305      	bcc.n	800ef66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d910      	bls.n	800ef88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ef66:	2301      	movs	r3, #1
 800ef68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ef6c:	e1d1      	b.n	800f312 <UART_SetConfig+0xca2>
 800ef6e:	bf00      	nop
 800ef70:	40011c00 	.word	0x40011c00
 800ef74:	58024400 	.word	0x58024400
 800ef78:	58000c00 	.word	0x58000c00
 800ef7c:	03d09000 	.word	0x03d09000
 800ef80:	003d0900 	.word	0x003d0900
 800ef84:	080146fc 	.word	0x080146fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	60bb      	str	r3, [r7, #8]
 800ef8e:	60fa      	str	r2, [r7, #12]
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef94:	4ac0      	ldr	r2, [pc, #768]	; (800f298 <UART_SetConfig+0xc28>)
 800ef96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	603b      	str	r3, [r7, #0]
 800efa0:	607a      	str	r2, [r7, #4]
 800efa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800efaa:	f7f1 fa09 	bl	80003c0 <__aeabi_uldivmod>
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	4610      	mov	r0, r2
 800efb4:	4619      	mov	r1, r3
 800efb6:	f04f 0200 	mov.w	r2, #0
 800efba:	f04f 0300 	mov.w	r3, #0
 800efbe:	020b      	lsls	r3, r1, #8
 800efc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800efc4:	0202      	lsls	r2, r0, #8
 800efc6:	6979      	ldr	r1, [r7, #20]
 800efc8:	6849      	ldr	r1, [r1, #4]
 800efca:	0849      	lsrs	r1, r1, #1
 800efcc:	2000      	movs	r0, #0
 800efce:	460c      	mov	r4, r1
 800efd0:	4605      	mov	r5, r0
 800efd2:	eb12 0804 	adds.w	r8, r2, r4
 800efd6:	eb43 0905 	adc.w	r9, r3, r5
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	469a      	mov	sl, r3
 800efe2:	4693      	mov	fp, r2
 800efe4:	4652      	mov	r2, sl
 800efe6:	465b      	mov	r3, fp
 800efe8:	4640      	mov	r0, r8
 800efea:	4649      	mov	r1, r9
 800efec:	f7f1 f9e8 	bl	80003c0 <__aeabi_uldivmod>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4613      	mov	r3, r2
 800eff6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800effe:	d308      	bcc.n	800f012 <UART_SetConfig+0x9a2>
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f006:	d204      	bcs.n	800f012 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f00e:	60da      	str	r2, [r3, #12]
 800f010:	e17f      	b.n	800f312 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f018:	e17b      	b.n	800f312 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	69db      	ldr	r3, [r3, #28]
 800f01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f022:	f040 80bd 	bne.w	800f1a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f026:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f02a:	2b20      	cmp	r3, #32
 800f02c:	dc48      	bgt.n	800f0c0 <UART_SetConfig+0xa50>
 800f02e:	2b00      	cmp	r3, #0
 800f030:	db7b      	blt.n	800f12a <UART_SetConfig+0xaba>
 800f032:	2b20      	cmp	r3, #32
 800f034:	d879      	bhi.n	800f12a <UART_SetConfig+0xaba>
 800f036:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <UART_SetConfig+0x9cc>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f0c7 	.word	0x0800f0c7
 800f040:	0800f0cf 	.word	0x0800f0cf
 800f044:	0800f12b 	.word	0x0800f12b
 800f048:	0800f12b 	.word	0x0800f12b
 800f04c:	0800f0d7 	.word	0x0800f0d7
 800f050:	0800f12b 	.word	0x0800f12b
 800f054:	0800f12b 	.word	0x0800f12b
 800f058:	0800f12b 	.word	0x0800f12b
 800f05c:	0800f0e7 	.word	0x0800f0e7
 800f060:	0800f12b 	.word	0x0800f12b
 800f064:	0800f12b 	.word	0x0800f12b
 800f068:	0800f12b 	.word	0x0800f12b
 800f06c:	0800f12b 	.word	0x0800f12b
 800f070:	0800f12b 	.word	0x0800f12b
 800f074:	0800f12b 	.word	0x0800f12b
 800f078:	0800f12b 	.word	0x0800f12b
 800f07c:	0800f0f7 	.word	0x0800f0f7
 800f080:	0800f12b 	.word	0x0800f12b
 800f084:	0800f12b 	.word	0x0800f12b
 800f088:	0800f12b 	.word	0x0800f12b
 800f08c:	0800f12b 	.word	0x0800f12b
 800f090:	0800f12b 	.word	0x0800f12b
 800f094:	0800f12b 	.word	0x0800f12b
 800f098:	0800f12b 	.word	0x0800f12b
 800f09c:	0800f12b 	.word	0x0800f12b
 800f0a0:	0800f12b 	.word	0x0800f12b
 800f0a4:	0800f12b 	.word	0x0800f12b
 800f0a8:	0800f12b 	.word	0x0800f12b
 800f0ac:	0800f12b 	.word	0x0800f12b
 800f0b0:	0800f12b 	.word	0x0800f12b
 800f0b4:	0800f12b 	.word	0x0800f12b
 800f0b8:	0800f12b 	.word	0x0800f12b
 800f0bc:	0800f11d 	.word	0x0800f11d
 800f0c0:	2b40      	cmp	r3, #64	; 0x40
 800f0c2:	d02e      	beq.n	800f122 <UART_SetConfig+0xab2>
 800f0c4:	e031      	b.n	800f12a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0c6:	f7fa fd93 	bl	8009bf0 <HAL_RCC_GetPCLK1Freq>
 800f0ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0cc:	e033      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0ce:	f7fa fda5 	bl	8009c1c <HAL_RCC_GetPCLK2Freq>
 800f0d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f0d4:	e02f      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fc fc3c 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0e4:	e027      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0e6:	f107 0318 	add.w	r3, r7, #24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fc fd88 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0f4:	e01f      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0f6:	4b69      	ldr	r3, [pc, #420]	; (800f29c <UART_SetConfig+0xc2c>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 0320 	and.w	r3, r3, #32
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d009      	beq.n	800f116 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f102:	4b66      	ldr	r3, [pc, #408]	; (800f29c <UART_SetConfig+0xc2c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	08db      	lsrs	r3, r3, #3
 800f108:	f003 0303 	and.w	r3, r3, #3
 800f10c:	4a64      	ldr	r2, [pc, #400]	; (800f2a0 <UART_SetConfig+0xc30>)
 800f10e:	fa22 f303 	lsr.w	r3, r2, r3
 800f112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f114:	e00f      	b.n	800f136 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f116:	4b62      	ldr	r3, [pc, #392]	; (800f2a0 <UART_SetConfig+0xc30>)
 800f118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f11a:	e00c      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f11c:	4b61      	ldr	r3, [pc, #388]	; (800f2a4 <UART_SetConfig+0xc34>)
 800f11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f120:	e009      	b.n	800f136 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f128:	e005      	b.n	800f136 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f12a:	2300      	movs	r3, #0
 800f12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f12e:	2301      	movs	r3, #1
 800f130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f000 80ea 	beq.w	800f312 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f142:	4a55      	ldr	r2, [pc, #340]	; (800f298 <UART_SetConfig+0xc28>)
 800f144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f148:	461a      	mov	r2, r3
 800f14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f150:	005a      	lsls	r2, r3, #1
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	085b      	lsrs	r3, r3, #1
 800f158:	441a      	add	r2, r3
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f162:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	2b0f      	cmp	r3, #15
 800f168:	d916      	bls.n	800f198 <UART_SetConfig+0xb28>
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f170:	d212      	bcs.n	800f198 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f174:	b29b      	uxth	r3, r3
 800f176:	f023 030f 	bic.w	r3, r3, #15
 800f17a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17e:	085b      	lsrs	r3, r3, #1
 800f180:	b29b      	uxth	r3, r3
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	b29a      	uxth	r2, r3
 800f188:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f18a:	4313      	orrs	r3, r2
 800f18c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f194:	60da      	str	r2, [r3, #12]
 800f196:	e0bc      	b.n	800f312 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f19e:	e0b8      	b.n	800f312 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f1a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f1a4:	2b20      	cmp	r3, #32
 800f1a6:	dc4b      	bgt.n	800f240 <UART_SetConfig+0xbd0>
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f2c0 8087 	blt.w	800f2bc <UART_SetConfig+0xc4c>
 800f1ae:	2b20      	cmp	r3, #32
 800f1b0:	f200 8084 	bhi.w	800f2bc <UART_SetConfig+0xc4c>
 800f1b4:	a201      	add	r2, pc, #4	; (adr r2, 800f1bc <UART_SetConfig+0xb4c>)
 800f1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ba:	bf00      	nop
 800f1bc:	0800f247 	.word	0x0800f247
 800f1c0:	0800f24f 	.word	0x0800f24f
 800f1c4:	0800f2bd 	.word	0x0800f2bd
 800f1c8:	0800f2bd 	.word	0x0800f2bd
 800f1cc:	0800f257 	.word	0x0800f257
 800f1d0:	0800f2bd 	.word	0x0800f2bd
 800f1d4:	0800f2bd 	.word	0x0800f2bd
 800f1d8:	0800f2bd 	.word	0x0800f2bd
 800f1dc:	0800f267 	.word	0x0800f267
 800f1e0:	0800f2bd 	.word	0x0800f2bd
 800f1e4:	0800f2bd 	.word	0x0800f2bd
 800f1e8:	0800f2bd 	.word	0x0800f2bd
 800f1ec:	0800f2bd 	.word	0x0800f2bd
 800f1f0:	0800f2bd 	.word	0x0800f2bd
 800f1f4:	0800f2bd 	.word	0x0800f2bd
 800f1f8:	0800f2bd 	.word	0x0800f2bd
 800f1fc:	0800f277 	.word	0x0800f277
 800f200:	0800f2bd 	.word	0x0800f2bd
 800f204:	0800f2bd 	.word	0x0800f2bd
 800f208:	0800f2bd 	.word	0x0800f2bd
 800f20c:	0800f2bd 	.word	0x0800f2bd
 800f210:	0800f2bd 	.word	0x0800f2bd
 800f214:	0800f2bd 	.word	0x0800f2bd
 800f218:	0800f2bd 	.word	0x0800f2bd
 800f21c:	0800f2bd 	.word	0x0800f2bd
 800f220:	0800f2bd 	.word	0x0800f2bd
 800f224:	0800f2bd 	.word	0x0800f2bd
 800f228:	0800f2bd 	.word	0x0800f2bd
 800f22c:	0800f2bd 	.word	0x0800f2bd
 800f230:	0800f2bd 	.word	0x0800f2bd
 800f234:	0800f2bd 	.word	0x0800f2bd
 800f238:	0800f2bd 	.word	0x0800f2bd
 800f23c:	0800f2af 	.word	0x0800f2af
 800f240:	2b40      	cmp	r3, #64	; 0x40
 800f242:	d037      	beq.n	800f2b4 <UART_SetConfig+0xc44>
 800f244:	e03a      	b.n	800f2bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f246:	f7fa fcd3 	bl	8009bf0 <HAL_RCC_GetPCLK1Freq>
 800f24a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f24c:	e03c      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f24e:	f7fa fce5 	bl	8009c1c <HAL_RCC_GetPCLK2Freq>
 800f252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f254:	e038      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fc fb7c 	bl	800b958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f264:	e030      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f266:	f107 0318 	add.w	r3, r7, #24
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fc fcc8 	bl	800bc00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f274:	e028      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f276:	4b09      	ldr	r3, [pc, #36]	; (800f29c <UART_SetConfig+0xc2c>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f003 0320 	and.w	r3, r3, #32
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d012      	beq.n	800f2a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f282:	4b06      	ldr	r3, [pc, #24]	; (800f29c <UART_SetConfig+0xc2c>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	08db      	lsrs	r3, r3, #3
 800f288:	f003 0303 	and.w	r3, r3, #3
 800f28c:	4a04      	ldr	r2, [pc, #16]	; (800f2a0 <UART_SetConfig+0xc30>)
 800f28e:	fa22 f303 	lsr.w	r3, r2, r3
 800f292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f294:	e018      	b.n	800f2c8 <UART_SetConfig+0xc58>
 800f296:	bf00      	nop
 800f298:	080146fc 	.word	0x080146fc
 800f29c:	58024400 	.word	0x58024400
 800f2a0:	03d09000 	.word	0x03d09000
 800f2a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f2a8:	4b24      	ldr	r3, [pc, #144]	; (800f33c <UART_SetConfig+0xccc>)
 800f2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ac:	e00c      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f2ae:	4b24      	ldr	r3, [pc, #144]	; (800f340 <UART_SetConfig+0xcd0>)
 800f2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2b2:	e009      	b.n	800f2c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f2b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ba:	e005      	b.n	800f2c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f2c6:	bf00      	nop
    }

    if (pclk != 0U)
 800f2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d021      	beq.n	800f312 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	4a1c      	ldr	r2, [pc, #112]	; (800f344 <UART_SetConfig+0xcd4>)
 800f2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2dc:	fbb3 f2f2 	udiv	r2, r3, r2
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	085b      	lsrs	r3, r3, #1
 800f2e6:	441a      	add	r2, r3
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	2b0f      	cmp	r3, #15
 800f2f6:	d909      	bls.n	800f30c <UART_SetConfig+0xc9c>
 800f2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2fe:	d205      	bcs.n	800f30c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	b29a      	uxth	r2, r3
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	60da      	str	r2, [r3, #12]
 800f30a:	e002      	b.n	800f312 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2201      	movs	r2, #1
 800f316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	2200      	movs	r2, #0
 800f326:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	2200      	movs	r2, #0
 800f32c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f32e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f332:	4618      	mov	r0, r3
 800f334:	3748      	adds	r7, #72	; 0x48
 800f336:	46bd      	mov	sp, r7
 800f338:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f33c:	03d09000 	.word	0x03d09000
 800f340:	003d0900 	.word	0x003d0900
 800f344:	080146fc 	.word	0x080146fc

0800f348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f354:	f003 0301 	and.w	r3, r3, #1
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00a      	beq.n	800f372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	430a      	orrs	r2, r1
 800f370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00a      	beq.n	800f394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	430a      	orrs	r2, r1
 800f392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f398:	f003 0304 	and.w	r3, r3, #4
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00a      	beq.n	800f3b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	430a      	orrs	r2, r1
 800f3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ba:	f003 0308 	and.w	r3, r3, #8
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d00a      	beq.n	800f3d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3dc:	f003 0310 	and.w	r3, r3, #16
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00a      	beq.n	800f3fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	430a      	orrs	r2, r1
 800f3f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3fe:	f003 0320 	and.w	r3, r3, #32
 800f402:	2b00      	cmp	r3, #0
 800f404:	d00a      	beq.n	800f41c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	430a      	orrs	r2, r1
 800f41a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f424:	2b00      	cmp	r3, #0
 800f426:	d01a      	beq.n	800f45e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	430a      	orrs	r2, r1
 800f43c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f446:	d10a      	bne.n	800f45e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	430a      	orrs	r2, r1
 800f45c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00a      	beq.n	800f480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	430a      	orrs	r2, r1
 800f47e:	605a      	str	r2, [r3, #4]
  }
}
 800f480:	bf00      	nop
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b098      	sub	sp, #96	; 0x60
 800f490:	af02      	add	r7, sp, #8
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2200      	movs	r2, #0
 800f498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f49c:	f7f3 fd2e 	bl	8002efc <HAL_GetTick>
 800f4a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b08      	cmp	r3, #8
 800f4ae:	d12f      	bne.n	800f510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f4b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f000 f88e 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d022      	beq.n	800f510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d2:	e853 3f00 	ldrex	r3, [r3]
 800f4d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4de:	653b      	str	r3, [r7, #80]	; 0x50
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e8:	647b      	str	r3, [r7, #68]	; 0x44
 800f4ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4f0:	e841 2300 	strex	r3, r2, [r1]
 800f4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1e6      	bne.n	800f4ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2220      	movs	r2, #32
 800f500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f50c:	2303      	movs	r3, #3
 800f50e:	e063      	b.n	800f5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f003 0304 	and.w	r3, r3, #4
 800f51a:	2b04      	cmp	r3, #4
 800f51c:	d149      	bne.n	800f5b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f51e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f526:	2200      	movs	r2, #0
 800f528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f857 	bl	800f5e0 <UART_WaitOnFlagUntilTimeout>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d03c      	beq.n	800f5b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	e853 3f00 	ldrex	r3, [r3]
 800f544:	623b      	str	r3, [r7, #32]
   return(result);
 800f546:	6a3b      	ldr	r3, [r7, #32]
 800f548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f54c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	461a      	mov	r2, r3
 800f554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f556:	633b      	str	r3, [r7, #48]	; 0x30
 800f558:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f55e:	e841 2300 	strex	r3, r2, [r1]
 800f562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f566:	2b00      	cmp	r3, #0
 800f568:	d1e6      	bne.n	800f538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3308      	adds	r3, #8
 800f570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	e853 3f00 	ldrex	r3, [r3]
 800f578:	60fb      	str	r3, [r7, #12]
   return(result);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	64bb      	str	r3, [r7, #72]	; 0x48
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	3308      	adds	r3, #8
 800f588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f58a:	61fa      	str	r2, [r7, #28]
 800f58c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58e:	69b9      	ldr	r1, [r7, #24]
 800f590:	69fa      	ldr	r2, [r7, #28]
 800f592:	e841 2300 	strex	r3, r2, [r1]
 800f596:	617b      	str	r3, [r7, #20]
   return(result);
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1e5      	bne.n	800f56a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2220      	movs	r2, #32
 800f5a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	e012      	b.n	800f5d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2220      	movs	r2, #32
 800f5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2220      	movs	r2, #32
 800f5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3758      	adds	r7, #88	; 0x58
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	603b      	str	r3, [r7, #0]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5f0:	e049      	b.n	800f686 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d045      	beq.n	800f686 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5fa:	f7f3 fc7f 	bl	8002efc <HAL_GetTick>
 800f5fe:	4602      	mov	r2, r0
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	1ad3      	subs	r3, r2, r3
 800f604:	69ba      	ldr	r2, [r7, #24]
 800f606:	429a      	cmp	r2, r3
 800f608:	d302      	bcc.n	800f610 <UART_WaitOnFlagUntilTimeout+0x30>
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f610:	2303      	movs	r3, #3
 800f612:	e048      	b.n	800f6a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f003 0304 	and.w	r3, r3, #4
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d031      	beq.n	800f686 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	f003 0308 	and.w	r3, r3, #8
 800f62c:	2b08      	cmp	r3, #8
 800f62e:	d110      	bne.n	800f652 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2208      	movs	r2, #8
 800f636:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f839 	bl	800f6b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2208      	movs	r2, #8
 800f642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e029      	b.n	800f6a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	69db      	ldr	r3, [r3, #28]
 800f658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f65c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f660:	d111      	bne.n	800f686 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f66a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f000 f81f 	bl	800f6b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2220      	movs	r2, #32
 800f676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2200      	movs	r2, #0
 800f67e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f682:	2303      	movs	r3, #3
 800f684:	e00f      	b.n	800f6a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	69da      	ldr	r2, [r3, #28]
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	4013      	ands	r3, r2
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	429a      	cmp	r2, r3
 800f694:	bf0c      	ite	eq
 800f696:	2301      	moveq	r3, #1
 800f698:	2300      	movne	r3, #0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	461a      	mov	r2, r3
 800f69e:	79fb      	ldrb	r3, [r7, #7]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d0a6      	beq.n	800f5f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
	...

0800f6b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b095      	sub	sp, #84	; 0x54
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6d6:	643b      	str	r3, [r7, #64]	; 0x40
 800f6d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6de:	e841 2300 	strex	r3, r2, [r1]
 800f6e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1e6      	bne.n	800f6b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6f2:	6a3b      	ldr	r3, [r7, #32]
 800f6f4:	e853 3f00 	ldrex	r3, [r3]
 800f6f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6fa:	69fa      	ldr	r2, [r7, #28]
 800f6fc:	4b1e      	ldr	r3, [pc, #120]	; (800f778 <UART_EndRxTransfer+0xc8>)
 800f6fe:	4013      	ands	r3, r2
 800f700:	64bb      	str	r3, [r7, #72]	; 0x48
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	3308      	adds	r3, #8
 800f708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f70a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f70c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f70e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f712:	e841 2300 	strex	r3, r2, [r1]
 800f716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1e5      	bne.n	800f6ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f722:	2b01      	cmp	r3, #1
 800f724:	d118      	bne.n	800f758 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	e853 3f00 	ldrex	r3, [r3]
 800f732:	60bb      	str	r3, [r7, #8]
   return(result);
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	f023 0310 	bic.w	r3, r3, #16
 800f73a:	647b      	str	r3, [r7, #68]	; 0x44
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f744:	61bb      	str	r3, [r7, #24]
 800f746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f748:	6979      	ldr	r1, [r7, #20]
 800f74a:	69ba      	ldr	r2, [r7, #24]
 800f74c:	e841 2300 	strex	r3, r2, [r1]
 800f750:	613b      	str	r3, [r7, #16]
   return(result);
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1e6      	bne.n	800f726 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2220      	movs	r2, #32
 800f75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2200      	movs	r2, #0
 800f76a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f76c:	bf00      	nop
 800f76e:	3754      	adds	r7, #84	; 0x54
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr
 800f778:	effffffe 	.word	0xeffffffe

0800f77c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	d101      	bne.n	800f792 <HAL_UARTEx_DisableFifoMode+0x16>
 800f78e:	2302      	movs	r3, #2
 800f790:	e027      	b.n	800f7e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2201      	movs	r2, #1
 800f796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2224      	movs	r2, #36	; 0x24
 800f79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681a      	ldr	r2, [r3, #0]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f022 0201 	bic.w	r2, r2, #1
 800f7b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f7c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2220      	movs	r2, #32
 800f7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7ee:	b580      	push	{r7, lr}
 800f7f0:	b084      	sub	sp, #16
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d101      	bne.n	800f806 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f802:	2302      	movs	r3, #2
 800f804:	e02d      	b.n	800f862 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2201      	movs	r2, #1
 800f80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2224      	movs	r2, #36	; 0x24
 800f812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f022 0201 	bic.w	r2, r2, #1
 800f82c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f850 	bl	800f8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2220      	movs	r2, #32
 800f854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b084      	sub	sp, #16
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d101      	bne.n	800f882 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f87e:	2302      	movs	r3, #2
 800f880:	e02d      	b.n	800f8de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2201      	movs	r2, #1
 800f886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2224      	movs	r2, #36	; 0x24
 800f88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f022 0201 	bic.w	r2, r2, #1
 800f8a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	683a      	ldr	r2, [r7, #0]
 800f8ba:	430a      	orrs	r2, r1
 800f8bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f812 	bl	800f8e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2220      	movs	r2, #32
 800f8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d108      	bne.n	800f90a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2201      	movs	r2, #1
 800f904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f908:	e031      	b.n	800f96e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f90a:	2310      	movs	r3, #16
 800f90c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f90e:	2310      	movs	r3, #16
 800f910:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	0e5b      	lsrs	r3, r3, #25
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	f003 0307 	and.w	r3, r3, #7
 800f920:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	0f5b      	lsrs	r3, r3, #29
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	f003 0307 	and.w	r3, r3, #7
 800f930:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	7b3a      	ldrb	r2, [r7, #12]
 800f936:	4911      	ldr	r1, [pc, #68]	; (800f97c <UARTEx_SetNbDataToProcess+0x94>)
 800f938:	5c8a      	ldrb	r2, [r1, r2]
 800f93a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f93e:	7b3a      	ldrb	r2, [r7, #12]
 800f940:	490f      	ldr	r1, [pc, #60]	; (800f980 <UARTEx_SetNbDataToProcess+0x98>)
 800f942:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f944:	fb93 f3f2 	sdiv	r3, r3, r2
 800f948:	b29a      	uxth	r2, r3
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	7b7a      	ldrb	r2, [r7, #13]
 800f954:	4909      	ldr	r1, [pc, #36]	; (800f97c <UARTEx_SetNbDataToProcess+0x94>)
 800f956:	5c8a      	ldrb	r2, [r1, r2]
 800f958:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f95c:	7b7a      	ldrb	r2, [r7, #13]
 800f95e:	4908      	ldr	r1, [pc, #32]	; (800f980 <UARTEx_SetNbDataToProcess+0x98>)
 800f960:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f962:	fb93 f3f2 	sdiv	r3, r3, r2
 800f966:	b29a      	uxth	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f96e:	bf00      	nop
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	08014714 	.word	0x08014714
 800f980:	0801471c 	.word	0x0801471c

0800f984 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f984:	b084      	sub	sp, #16
 800f986:	b580      	push	{r7, lr}
 800f988:	b084      	sub	sp, #16
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	f107 001c 	add.w	r0, r7, #28
 800f992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d120      	bne.n	800f9de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	68da      	ldr	r2, [r3, #12]
 800f9ac:	4b2a      	ldr	r3, [pc, #168]	; (800fa58 <USB_CoreInit+0xd4>)
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d105      	bne.n	800f9d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f001 faf8 	bl	8010fc8 <USB_CoreReset>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	73fb      	strb	r3, [r7, #15]
 800f9dc:	e01a      	b.n	800fa14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 faec 	bl	8010fc8 <USB_CoreReset>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d106      	bne.n	800fa08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	639a      	str	r2, [r3, #56]	; 0x38
 800fa06:	e005      	b.n	800fa14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d116      	bne.n	800fa48 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa28:	4b0c      	ldr	r3, [pc, #48]	; (800fa5c <USB_CoreInit+0xd8>)
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	f043 0206 	orr.w	r2, r3, #6
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	689b      	ldr	r3, [r3, #8]
 800fa40:	f043 0220 	orr.w	r2, r3, #32
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa54:	b004      	add	sp, #16
 800fa56:	4770      	bx	lr
 800fa58:	ffbdffbf 	.word	0xffbdffbf
 800fa5c:	03ee0000 	.word	0x03ee0000

0800fa60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b087      	sub	sp, #28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa6e:	79fb      	ldrb	r3, [r7, #7]
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	d165      	bne.n	800fb40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	4a41      	ldr	r2, [pc, #260]	; (800fb7c <USB_SetTurnaroundTime+0x11c>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d906      	bls.n	800fa8a <USB_SetTurnaroundTime+0x2a>
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	4a40      	ldr	r2, [pc, #256]	; (800fb80 <USB_SetTurnaroundTime+0x120>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d202      	bcs.n	800fa8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa84:	230f      	movs	r3, #15
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e062      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	4a3c      	ldr	r2, [pc, #240]	; (800fb80 <USB_SetTurnaroundTime+0x120>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d306      	bcc.n	800faa0 <USB_SetTurnaroundTime+0x40>
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	4a3b      	ldr	r2, [pc, #236]	; (800fb84 <USB_SetTurnaroundTime+0x124>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d202      	bcs.n	800faa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fa9a:	230e      	movs	r3, #14
 800fa9c:	617b      	str	r3, [r7, #20]
 800fa9e:	e057      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	4a38      	ldr	r2, [pc, #224]	; (800fb84 <USB_SetTurnaroundTime+0x124>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d306      	bcc.n	800fab6 <USB_SetTurnaroundTime+0x56>
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	4a37      	ldr	r2, [pc, #220]	; (800fb88 <USB_SetTurnaroundTime+0x128>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d202      	bcs.n	800fab6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fab0:	230d      	movs	r3, #13
 800fab2:	617b      	str	r3, [r7, #20]
 800fab4:	e04c      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	4a33      	ldr	r2, [pc, #204]	; (800fb88 <USB_SetTurnaroundTime+0x128>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d306      	bcc.n	800facc <USB_SetTurnaroundTime+0x6c>
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	4a32      	ldr	r2, [pc, #200]	; (800fb8c <USB_SetTurnaroundTime+0x12c>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d802      	bhi.n	800facc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fac6:	230c      	movs	r3, #12
 800fac8:	617b      	str	r3, [r7, #20]
 800faca:	e041      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	4a2f      	ldr	r2, [pc, #188]	; (800fb8c <USB_SetTurnaroundTime+0x12c>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d906      	bls.n	800fae2 <USB_SetTurnaroundTime+0x82>
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	4a2e      	ldr	r2, [pc, #184]	; (800fb90 <USB_SetTurnaroundTime+0x130>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d802      	bhi.n	800fae2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fadc:	230b      	movs	r3, #11
 800fade:	617b      	str	r3, [r7, #20]
 800fae0:	e036      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	4a2a      	ldr	r2, [pc, #168]	; (800fb90 <USB_SetTurnaroundTime+0x130>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d906      	bls.n	800faf8 <USB_SetTurnaroundTime+0x98>
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	4a29      	ldr	r2, [pc, #164]	; (800fb94 <USB_SetTurnaroundTime+0x134>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d802      	bhi.n	800faf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800faf2:	230a      	movs	r3, #10
 800faf4:	617b      	str	r3, [r7, #20]
 800faf6:	e02b      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	4a26      	ldr	r2, [pc, #152]	; (800fb94 <USB_SetTurnaroundTime+0x134>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d906      	bls.n	800fb0e <USB_SetTurnaroundTime+0xae>
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	4a25      	ldr	r2, [pc, #148]	; (800fb98 <USB_SetTurnaroundTime+0x138>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d202      	bcs.n	800fb0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fb08:	2309      	movs	r3, #9
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	e020      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	4a21      	ldr	r2, [pc, #132]	; (800fb98 <USB_SetTurnaroundTime+0x138>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d306      	bcc.n	800fb24 <USB_SetTurnaroundTime+0xc4>
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	4a20      	ldr	r2, [pc, #128]	; (800fb9c <USB_SetTurnaroundTime+0x13c>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d802      	bhi.n	800fb24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fb1e:	2308      	movs	r3, #8
 800fb20:	617b      	str	r3, [r7, #20]
 800fb22:	e015      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	4a1d      	ldr	r2, [pc, #116]	; (800fb9c <USB_SetTurnaroundTime+0x13c>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d906      	bls.n	800fb3a <USB_SetTurnaroundTime+0xda>
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	4a1c      	ldr	r2, [pc, #112]	; (800fba0 <USB_SetTurnaroundTime+0x140>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d202      	bcs.n	800fb3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fb34:	2307      	movs	r3, #7
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e00a      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fb3a:	2306      	movs	r3, #6
 800fb3c:	617b      	str	r3, [r7, #20]
 800fb3e:	e007      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fb40:	79fb      	ldrb	r3, [r7, #7]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d102      	bne.n	800fb4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fb46:	2309      	movs	r3, #9
 800fb48:	617b      	str	r3, [r7, #20]
 800fb4a:	e001      	b.n	800fb50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fb4c:	2309      	movs	r3, #9
 800fb4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	68db      	ldr	r3, [r3, #12]
 800fb54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	68da      	ldr	r2, [r3, #12]
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	029b      	lsls	r3, r3, #10
 800fb64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fb68:	431a      	orrs	r2, r3
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	371c      	adds	r7, #28
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	00d8acbf 	.word	0x00d8acbf
 800fb80:	00e4e1c0 	.word	0x00e4e1c0
 800fb84:	00f42400 	.word	0x00f42400
 800fb88:	01067380 	.word	0x01067380
 800fb8c:	011a499f 	.word	0x011a499f
 800fb90:	01312cff 	.word	0x01312cff
 800fb94:	014ca43f 	.word	0x014ca43f
 800fb98:	016e3600 	.word	0x016e3600
 800fb9c:	01a6ab1f 	.word	0x01a6ab1f
 800fba0:	01e84800 	.word	0x01e84800

0800fba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	f043 0201 	orr.w	r2, r3, #1
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	370c      	adds	r7, #12
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr

0800fbc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbc6:	b480      	push	{r7}
 800fbc8:	b083      	sub	sp, #12
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	f023 0201 	bic.w	r2, r3, #1
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fc04:	78fb      	ldrb	r3, [r7, #3]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d115      	bne.n	800fc36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc16:	2001      	movs	r0, #1
 800fc18:	f7f3 f97c 	bl	8002f14 <HAL_Delay>
      ms++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f001 f93f 	bl	8010ea6 <USB_GetMode>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d01e      	beq.n	800fc6c <USB_SetCurrentMode+0x84>
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2b31      	cmp	r3, #49	; 0x31
 800fc32:	d9f0      	bls.n	800fc16 <USB_SetCurrentMode+0x2e>
 800fc34:	e01a      	b.n	800fc6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fc36:	78fb      	ldrb	r3, [r7, #3]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d115      	bne.n	800fc68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc48:	2001      	movs	r0, #1
 800fc4a:	f7f3 f963 	bl	8002f14 <HAL_Delay>
      ms++;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3301      	adds	r3, #1
 800fc52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f001 f926 	bl	8010ea6 <USB_GetMode>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d005      	beq.n	800fc6c <USB_SetCurrentMode+0x84>
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2b31      	cmp	r3, #49	; 0x31
 800fc64:	d9f0      	bls.n	800fc48 <USB_SetCurrentMode+0x60>
 800fc66:	e001      	b.n	800fc6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e005      	b.n	800fc78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b32      	cmp	r3, #50	; 0x32
 800fc70:	d101      	bne.n	800fc76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	e000      	b.n	800fc78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc80:	b084      	sub	sp, #16
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b086      	sub	sp, #24
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fc92:	2300      	movs	r3, #0
 800fc94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	613b      	str	r3, [r7, #16]
 800fc9e:	e009      	b.n	800fcb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	3340      	adds	r3, #64	; 0x40
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4413      	add	r3, r2
 800fcaa:	2200      	movs	r2, #0
 800fcac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	613b      	str	r3, [r7, #16]
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	2b0e      	cmp	r3, #14
 800fcb8:	d9f2      	bls.n	800fca0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fcba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d11c      	bne.n	800fcfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcce:	f043 0302 	orr.w	r3, r3, #2
 800fcd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	e005      	b.n	800fd06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	2300      	movs	r3, #0
 800fd10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd18:	4619      	mov	r1, r3
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd20:	461a      	mov	r2, r3
 800fd22:	680b      	ldr	r3, [r1, #0]
 800fd24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d10c      	bne.n	800fd46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d104      	bne.n	800fd3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fd32:	2100      	movs	r1, #0
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 f965 	bl	8010004 <USB_SetDevSpeed>
 800fd3a:	e008      	b.n	800fd4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 f960 	bl	8010004 <USB_SetDevSpeed>
 800fd44:	e003      	b.n	800fd4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fd46:	2103      	movs	r1, #3
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 f95b 	bl	8010004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fd4e:	2110      	movs	r1, #16
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f8f3 	bl	800ff3c <USB_FlushTxFifo>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d001      	beq.n	800fd60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f91f 	bl	800ffa4 <USB_FlushRxFifo>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d001      	beq.n	800fd70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd76:	461a      	mov	r2, r3
 800fd78:	2300      	movs	r3, #0
 800fd7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd82:	461a      	mov	r2, r3
 800fd84:	2300      	movs	r3, #0
 800fd86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd8e:	461a      	mov	r2, r3
 800fd90:	2300      	movs	r3, #0
 800fd92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd94:	2300      	movs	r3, #0
 800fd96:	613b      	str	r3, [r7, #16]
 800fd98:	e043      	b.n	800fe22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	015a      	lsls	r2, r3, #5
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	4413      	add	r3, r2
 800fda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdb0:	d118      	bne.n	800fde4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10a      	bne.n	800fdce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	015a      	lsls	r2, r3, #5
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	e013      	b.n	800fdf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdda:	461a      	mov	r2, r3
 800fddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	e008      	b.n	800fdf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	015a      	lsls	r2, r3, #5
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe02:	461a      	mov	r2, r3
 800fe04:	2300      	movs	r3, #0
 800fe06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	015a      	lsls	r2, r3, #5
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe14:	461a      	mov	r2, r3
 800fe16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	613b      	str	r3, [r7, #16]
 800fe22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe24:	693a      	ldr	r2, [r7, #16]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d3b7      	bcc.n	800fd9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	613b      	str	r3, [r7, #16]
 800fe2e:	e043      	b.n	800feb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	015a      	lsls	r2, r3, #5
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	4413      	add	r3, r2
 800fe38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe46:	d118      	bne.n	800fe7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	015a      	lsls	r2, r3, #5
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4413      	add	r3, r2
 800fe56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	e013      	b.n	800fe8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	015a      	lsls	r2, r3, #5
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe70:	461a      	mov	r2, r3
 800fe72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe76:	6013      	str	r3, [r2, #0]
 800fe78:	e008      	b.n	800fe8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	015a      	lsls	r2, r3, #5
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	4413      	add	r3, r2
 800fe82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe86:	461a      	mov	r2, r3
 800fe88:	2300      	movs	r3, #0
 800fe8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe98:	461a      	mov	r2, r3
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	015a      	lsls	r2, r3, #5
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	4413      	add	r3, r2
 800fea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feaa:	461a      	mov	r2, r3
 800feac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800feb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	3301      	adds	r3, #1
 800feb6:	613b      	str	r3, [r7, #16]
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	429a      	cmp	r2, r3
 800febe:	d3b7      	bcc.n	800fe30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fed2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fee0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d105      	bne.n	800fef4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	f043 0210 	orr.w	r2, r3, #16
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	699a      	ldr	r2, [r3, #24]
 800fef8:	4b0e      	ldr	r3, [pc, #56]	; (800ff34 <USB_DevInit+0x2b4>)
 800fefa:	4313      	orrs	r3, r2
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ff00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	699b      	ldr	r3, [r3, #24]
 800ff0a:	f043 0208 	orr.w	r2, r3, #8
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ff12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d105      	bne.n	800ff24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	699a      	ldr	r2, [r3, #24]
 800ff1c:	4b06      	ldr	r3, [pc, #24]	; (800ff38 <USB_DevInit+0x2b8>)
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ff24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff30:	b004      	add	sp, #16
 800ff32:	4770      	bx	lr
 800ff34:	803c3800 	.word	0x803c3800
 800ff38:	40000004 	.word	0x40000004

0800ff3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b085      	sub	sp, #20
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff46:	2300      	movs	r3, #0
 800ff48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	4a13      	ldr	r2, [pc, #76]	; (800ffa0 <USB_FlushTxFifo+0x64>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d901      	bls.n	800ff5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ff58:	2303      	movs	r3, #3
 800ff5a:	e01b      	b.n	800ff94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	daf2      	bge.n	800ff4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ff64:	2300      	movs	r3, #0
 800ff66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	019b      	lsls	r3, r3, #6
 800ff6c:	f043 0220 	orr.w	r2, r3, #32
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	3301      	adds	r3, #1
 800ff78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	4a08      	ldr	r2, [pc, #32]	; (800ffa0 <USB_FlushTxFifo+0x64>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d901      	bls.n	800ff86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ff82:	2303      	movs	r3, #3
 800ff84:	e006      	b.n	800ff94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	f003 0320 	and.w	r3, r3, #32
 800ff8e:	2b20      	cmp	r3, #32
 800ff90:	d0f0      	beq.n	800ff74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ff92:	2300      	movs	r3, #0
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3714      	adds	r7, #20
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr
 800ffa0:	00030d40 	.word	0x00030d40

0800ffa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ffac:	2300      	movs	r3, #0
 800ffae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	4a11      	ldr	r2, [pc, #68]	; (8010000 <USB_FlushRxFifo+0x5c>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d901      	bls.n	800ffc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e018      	b.n	800fff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	daf2      	bge.n	800ffb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2210      	movs	r2, #16
 800ffd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	4a08      	ldr	r2, [pc, #32]	; (8010000 <USB_FlushRxFifo+0x5c>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d901      	bls.n	800ffe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e006      	b.n	800fff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	f003 0310 	and.w	r3, r3, #16
 800ffee:	2b10      	cmp	r3, #16
 800fff0:	d0f0      	beq.n	800ffd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fff2:	2300      	movs	r3, #0
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3714      	adds	r7, #20
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr
 8010000:	00030d40 	.word	0x00030d40

08010004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010004:	b480      	push	{r7}
 8010006:	b085      	sub	sp, #20
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	460b      	mov	r3, r1
 801000e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	78fb      	ldrb	r3, [r7, #3]
 801001e:	68f9      	ldr	r1, [r7, #12]
 8010020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010024:	4313      	orrs	r3, r2
 8010026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3714      	adds	r7, #20
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010036:	b480      	push	{r7}
 8010038:	b087      	sub	sp, #28
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	f003 0306 	and.w	r3, r3, #6
 801004e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d102      	bne.n	801005c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010056:	2300      	movs	r3, #0
 8010058:	75fb      	strb	r3, [r7, #23]
 801005a:	e00a      	b.n	8010072 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b02      	cmp	r3, #2
 8010060:	d002      	beq.n	8010068 <USB_GetDevSpeed+0x32>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b06      	cmp	r3, #6
 8010066:	d102      	bne.n	801006e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010068:	2302      	movs	r3, #2
 801006a:	75fb      	strb	r3, [r7, #23]
 801006c:	e001      	b.n	8010072 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801006e:	230f      	movs	r3, #15
 8010070:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010072:	7dfb      	ldrb	r3, [r7, #23]
}
 8010074:	4618      	mov	r0, r3
 8010076:	371c      	adds	r7, #28
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010080:	b480      	push	{r7}
 8010082:	b085      	sub	sp, #20
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	785b      	ldrb	r3, [r3, #1]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d139      	bne.n	8010110 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100a2:	69da      	ldr	r2, [r3, #28]
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	f003 030f 	and.w	r3, r3, #15
 80100ac:	2101      	movs	r1, #1
 80100ae:	fa01 f303 	lsl.w	r3, r1, r3
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	68f9      	ldr	r1, [r7, #12]
 80100b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100ba:	4313      	orrs	r3, r2
 80100bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	015a      	lsls	r2, r3, #5
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	4413      	add	r3, r2
 80100c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d153      	bne.n	801017c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	791b      	ldrb	r3, [r3, #4]
 80100ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	059b      	lsls	r3, r3, #22
 80100f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100f8:	431a      	orrs	r2, r3
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	0159      	lsls	r1, r3, #5
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	440b      	add	r3, r1
 8010102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010106:	4619      	mov	r1, r3
 8010108:	4b20      	ldr	r3, [pc, #128]	; (801018c <USB_ActivateEndpoint+0x10c>)
 801010a:	4313      	orrs	r3, r2
 801010c:	600b      	str	r3, [r1, #0]
 801010e:	e035      	b.n	801017c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010116:	69da      	ldr	r2, [r3, #28]
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	f003 030f 	and.w	r3, r3, #15
 8010120:	2101      	movs	r1, #1
 8010122:	fa01 f303 	lsl.w	r3, r1, r3
 8010126:	041b      	lsls	r3, r3, #16
 8010128:	68f9      	ldr	r1, [r7, #12]
 801012a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801012e:	4313      	orrs	r3, r2
 8010130:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	015a      	lsls	r2, r3, #5
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	4413      	add	r3, r2
 801013a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010144:	2b00      	cmp	r3, #0
 8010146:	d119      	bne.n	801017c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	015a      	lsls	r2, r3, #5
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	791b      	ldrb	r3, [r3, #4]
 8010162:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010164:	430b      	orrs	r3, r1
 8010166:	431a      	orrs	r2, r3
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	0159      	lsls	r1, r3, #5
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	440b      	add	r3, r1
 8010170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010174:	4619      	mov	r1, r3
 8010176:	4b05      	ldr	r3, [pc, #20]	; (801018c <USB_ActivateEndpoint+0x10c>)
 8010178:	4313      	orrs	r3, r2
 801017a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3714      	adds	r7, #20
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	10008000 	.word	0x10008000

08010190 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	785b      	ldrb	r3, [r3, #1]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d161      	bne.n	8010270 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	015a      	lsls	r2, r3, #5
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	4413      	add	r3, r2
 80101b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101c2:	d11f      	bne.n	8010204 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	015a      	lsls	r2, r3, #5
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	4413      	add	r3, r2
 80101cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	0151      	lsls	r1, r2, #5
 80101d6:	68fa      	ldr	r2, [r7, #12]
 80101d8:	440a      	add	r2, r1
 80101da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	015a      	lsls	r2, r3, #5
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	0151      	lsls	r1, r2, #5
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	440a      	add	r2, r1
 80101fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801020a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 030f 	and.w	r3, r3, #15
 8010214:	2101      	movs	r1, #1
 8010216:	fa01 f303 	lsl.w	r3, r1, r3
 801021a:	b29b      	uxth	r3, r3
 801021c:	43db      	mvns	r3, r3
 801021e:	68f9      	ldr	r1, [r7, #12]
 8010220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010224:	4013      	ands	r3, r2
 8010226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801022e:	69da      	ldr	r2, [r3, #28]
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 030f 	and.w	r3, r3, #15
 8010238:	2101      	movs	r1, #1
 801023a:	fa01 f303 	lsl.w	r3, r1, r3
 801023e:	b29b      	uxth	r3, r3
 8010240:	43db      	mvns	r3, r3
 8010242:	68f9      	ldr	r1, [r7, #12]
 8010244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010248:	4013      	ands	r3, r2
 801024a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	015a      	lsls	r2, r3, #5
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	4413      	add	r3, r2
 8010254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	0159      	lsls	r1, r3, #5
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	440b      	add	r3, r1
 8010262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010266:	4619      	mov	r1, r3
 8010268:	4b35      	ldr	r3, [pc, #212]	; (8010340 <USB_DeactivateEndpoint+0x1b0>)
 801026a:	4013      	ands	r3, r2
 801026c:	600b      	str	r3, [r1, #0]
 801026e:	e060      	b.n	8010332 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	015a      	lsls	r2, r3, #5
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	4413      	add	r3, r2
 8010278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010286:	d11f      	bne.n	80102c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	0151      	lsls	r1, r2, #5
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	440a      	add	r2, r1
 801029e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	015a      	lsls	r2, r3, #5
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4413      	add	r3, r2
 80102b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	0151      	lsls	r1, r2, #5
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	440a      	add	r2, r1
 80102be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 030f 	and.w	r3, r3, #15
 80102d8:	2101      	movs	r1, #1
 80102da:	fa01 f303 	lsl.w	r3, r1, r3
 80102de:	041b      	lsls	r3, r3, #16
 80102e0:	43db      	mvns	r3, r3
 80102e2:	68f9      	ldr	r1, [r7, #12]
 80102e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102e8:	4013      	ands	r3, r2
 80102ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	f003 030f 	and.w	r3, r3, #15
 80102fc:	2101      	movs	r1, #1
 80102fe:	fa01 f303 	lsl.w	r3, r1, r3
 8010302:	041b      	lsls	r3, r3, #16
 8010304:	43db      	mvns	r3, r3
 8010306:	68f9      	ldr	r1, [r7, #12]
 8010308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801030c:	4013      	ands	r3, r2
 801030e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	015a      	lsls	r2, r3, #5
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	4413      	add	r3, r2
 8010318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	0159      	lsls	r1, r3, #5
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	440b      	add	r3, r1
 8010326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801032a:	4619      	mov	r1, r3
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <USB_DeactivateEndpoint+0x1b4>)
 801032e:	4013      	ands	r3, r2
 8010330:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010332:	2300      	movs	r3, #0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	ec337800 	.word	0xec337800
 8010344:	eff37800 	.word	0xeff37800

08010348 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b08a      	sub	sp, #40	; 0x28
 801034c:	af02      	add	r7, sp, #8
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	785b      	ldrb	r3, [r3, #1]
 8010364:	2b01      	cmp	r3, #1
 8010366:	f040 8181 	bne.w	801066c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d132      	bne.n	80103d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	015a      	lsls	r2, r3, #5
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	4413      	add	r3, r2
 801037a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801037e:	691a      	ldr	r2, [r3, #16]
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	0159      	lsls	r1, r3, #5
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	440b      	add	r3, r1
 8010388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038c:	4619      	mov	r1, r3
 801038e:	4ba5      	ldr	r3, [pc, #660]	; (8010624 <USB_EPStartXfer+0x2dc>)
 8010390:	4013      	ands	r3, r2
 8010392:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	015a      	lsls	r2, r3, #5
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	4413      	add	r3, r2
 801039c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	69ba      	ldr	r2, [r7, #24]
 80103a4:	0151      	lsls	r1, r2, #5
 80103a6:	69fa      	ldr	r2, [r7, #28]
 80103a8:	440a      	add	r2, r1
 80103aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103b4:	69bb      	ldr	r3, [r7, #24]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103c0:	691a      	ldr	r2, [r3, #16]
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	0159      	lsls	r1, r3, #5
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	440b      	add	r3, r1
 80103ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ce:	4619      	mov	r1, r3
 80103d0:	4b95      	ldr	r3, [pc, #596]	; (8010628 <USB_EPStartXfer+0x2e0>)
 80103d2:	4013      	ands	r3, r2
 80103d4:	610b      	str	r3, [r1, #16]
 80103d6:	e092      	b.n	80104fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	015a      	lsls	r2, r3, #5
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	4413      	add	r3, r2
 80103e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e4:	691a      	ldr	r2, [r3, #16]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	0159      	lsls	r1, r3, #5
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	440b      	add	r3, r1
 80103ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f2:	4619      	mov	r1, r3
 80103f4:	4b8c      	ldr	r3, [pc, #560]	; (8010628 <USB_EPStartXfer+0x2e0>)
 80103f6:	4013      	ands	r3, r2
 80103f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	015a      	lsls	r2, r3, #5
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	4413      	add	r3, r2
 8010402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010406:	691a      	ldr	r2, [r3, #16]
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	0159      	lsls	r1, r3, #5
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	440b      	add	r3, r1
 8010410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010414:	4619      	mov	r1, r3
 8010416:	4b83      	ldr	r3, [pc, #524]	; (8010624 <USB_EPStartXfer+0x2dc>)
 8010418:	4013      	ands	r3, r2
 801041a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d11a      	bne.n	8010458 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	691a      	ldr	r2, [r3, #16]
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	429a      	cmp	r2, r3
 801042c:	d903      	bls.n	8010436 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	689a      	ldr	r2, [r3, #8]
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	015a      	lsls	r2, r3, #5
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	4413      	add	r3, r2
 801043e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	0151      	lsls	r1, r2, #5
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	440a      	add	r2, r1
 801044c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010454:	6113      	str	r3, [r2, #16]
 8010456:	e01b      	b.n	8010490 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	015a      	lsls	r2, r3, #5
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	4413      	add	r3, r2
 8010460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010464:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	6919      	ldr	r1, [r3, #16]
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	689b      	ldr	r3, [r3, #8]
 801046e:	440b      	add	r3, r1
 8010470:	1e59      	subs	r1, r3, #1
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	689b      	ldr	r3, [r3, #8]
 8010476:	fbb1 f3f3 	udiv	r3, r1, r3
 801047a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801047c:	4b6b      	ldr	r3, [pc, #428]	; (801062c <USB_EPStartXfer+0x2e4>)
 801047e:	400b      	ands	r3, r1
 8010480:	69b9      	ldr	r1, [r7, #24]
 8010482:	0148      	lsls	r0, r1, #5
 8010484:	69f9      	ldr	r1, [r7, #28]
 8010486:	4401      	add	r1, r0
 8010488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801048c:	4313      	orrs	r3, r2
 801048e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	015a      	lsls	r2, r3, #5
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	4413      	add	r3, r2
 8010498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801049c:	691a      	ldr	r2, [r3, #16]
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104a6:	69b9      	ldr	r1, [r7, #24]
 80104a8:	0148      	lsls	r0, r1, #5
 80104aa:	69f9      	ldr	r1, [r7, #28]
 80104ac:	4401      	add	r1, r0
 80104ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80104b2:	4313      	orrs	r3, r2
 80104b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	791b      	ldrb	r3, [r3, #4]
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d11f      	bne.n	80104fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	0151      	lsls	r1, r2, #5
 80104d0:	69fa      	ldr	r2, [r7, #28]
 80104d2:	440a      	add	r2, r1
 80104d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80104dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	015a      	lsls	r2, r3, #5
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	4413      	add	r3, r2
 80104e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	69ba      	ldr	r2, [r7, #24]
 80104ee:	0151      	lsls	r1, r2, #5
 80104f0:	69fa      	ldr	r2, [r7, #28]
 80104f2:	440a      	add	r2, r1
 80104f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80104fe:	79fb      	ldrb	r3, [r7, #7]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d14b      	bne.n	801059c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	69db      	ldr	r3, [r3, #28]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d009      	beq.n	8010520 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	015a      	lsls	r2, r3, #5
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	4413      	add	r3, r2
 8010514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010518:	461a      	mov	r2, r3
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	69db      	ldr	r3, [r3, #28]
 801051e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	791b      	ldrb	r3, [r3, #4]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d128      	bne.n	801057a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801052e:	689b      	ldr	r3, [r3, #8]
 8010530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010534:	2b00      	cmp	r3, #0
 8010536:	d110      	bne.n	801055a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	015a      	lsls	r2, r3, #5
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	4413      	add	r3, r2
 8010540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	69ba      	ldr	r2, [r7, #24]
 8010548:	0151      	lsls	r1, r2, #5
 801054a:	69fa      	ldr	r2, [r7, #28]
 801054c:	440a      	add	r2, r1
 801054e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	e00f      	b.n	801057a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	015a      	lsls	r2, r3, #5
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	4413      	add	r3, r2
 8010562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	69ba      	ldr	r2, [r7, #24]
 801056a:	0151      	lsls	r1, r2, #5
 801056c:	69fa      	ldr	r2, [r7, #28]
 801056e:	440a      	add	r2, r1
 8010570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	015a      	lsls	r2, r3, #5
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	4413      	add	r3, r2
 8010582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	69ba      	ldr	r2, [r7, #24]
 801058a:	0151      	lsls	r1, r2, #5
 801058c:	69fa      	ldr	r2, [r7, #28]
 801058e:	440a      	add	r2, r1
 8010590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010598:	6013      	str	r3, [r2, #0]
 801059a:	e16a      	b.n	8010872 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	015a      	lsls	r2, r3, #5
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	4413      	add	r3, r2
 80105a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	69ba      	ldr	r2, [r7, #24]
 80105ac:	0151      	lsls	r1, r2, #5
 80105ae:	69fa      	ldr	r2, [r7, #28]
 80105b0:	440a      	add	r2, r1
 80105b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	791b      	ldrb	r3, [r3, #4]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d015      	beq.n	80105f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 8152 	beq.w	8010872 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	f003 030f 	and.w	r3, r3, #15
 80105de:	2101      	movs	r1, #1
 80105e0:	fa01 f303 	lsl.w	r3, r1, r3
 80105e4:	69f9      	ldr	r1, [r7, #28]
 80105e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105ea:	4313      	orrs	r3, r2
 80105ec:	634b      	str	r3, [r1, #52]	; 0x34
 80105ee:	e140      	b.n	8010872 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d117      	bne.n	8010630 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	015a      	lsls	r2, r3, #5
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	4413      	add	r3, r2
 8010608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	69ba      	ldr	r2, [r7, #24]
 8010610:	0151      	lsls	r1, r2, #5
 8010612:	69fa      	ldr	r2, [r7, #28]
 8010614:	440a      	add	r2, r1
 8010616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801061a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801061e:	6013      	str	r3, [r2, #0]
 8010620:	e016      	b.n	8010650 <USB_EPStartXfer+0x308>
 8010622:	bf00      	nop
 8010624:	e007ffff 	.word	0xe007ffff
 8010628:	fff80000 	.word	0xfff80000
 801062c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	4413      	add	r3, r2
 8010638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	69ba      	ldr	r2, [r7, #24]
 8010640:	0151      	lsls	r1, r2, #5
 8010642:	69fa      	ldr	r2, [r7, #28]
 8010644:	440a      	add	r2, r1
 8010646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801064e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	68d9      	ldr	r1, [r3, #12]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	781a      	ldrb	r2, [r3, #0]
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	b298      	uxth	r0, r3
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	9300      	str	r3, [sp, #0]
 8010662:	4603      	mov	r3, r0
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f000 f9b9 	bl	80109dc <USB_WritePacket>
 801066a:	e102      	b.n	8010872 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	015a      	lsls	r2, r3, #5
 8010670:	69fb      	ldr	r3, [r7, #28]
 8010672:	4413      	add	r3, r2
 8010674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010678:	691a      	ldr	r2, [r3, #16]
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	0159      	lsls	r1, r3, #5
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	440b      	add	r3, r1
 8010682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010686:	4619      	mov	r1, r3
 8010688:	4b7c      	ldr	r3, [pc, #496]	; (801087c <USB_EPStartXfer+0x534>)
 801068a:	4013      	ands	r3, r2
 801068c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	015a      	lsls	r2, r3, #5
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	4413      	add	r3, r2
 8010696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801069a:	691a      	ldr	r2, [r3, #16]
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	0159      	lsls	r1, r3, #5
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	440b      	add	r3, r1
 80106a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a8:	4619      	mov	r1, r3
 80106aa:	4b75      	ldr	r3, [pc, #468]	; (8010880 <USB_EPStartXfer+0x538>)
 80106ac:	4013      	ands	r3, r2
 80106ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d12f      	bne.n	8010716 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	691b      	ldr	r3, [r3, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d003      	beq.n	80106c6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	689a      	ldr	r2, [r3, #8]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	689a      	ldr	r2, [r3, #8]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	015a      	lsls	r2, r3, #5
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	4413      	add	r3, r2
 80106d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	6a1b      	ldr	r3, [r3, #32]
 80106e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106e4:	69b9      	ldr	r1, [r7, #24]
 80106e6:	0148      	lsls	r0, r1, #5
 80106e8:	69f9      	ldr	r1, [r7, #28]
 80106ea:	4401      	add	r1, r0
 80106ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80106f0:	4313      	orrs	r3, r2
 80106f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010700:	691b      	ldr	r3, [r3, #16]
 8010702:	69ba      	ldr	r2, [r7, #24]
 8010704:	0151      	lsls	r1, r2, #5
 8010706:	69fa      	ldr	r2, [r7, #28]
 8010708:	440a      	add	r2, r1
 801070a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010712:	6113      	str	r3, [r2, #16]
 8010714:	e05f      	b.n	80107d6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	691b      	ldr	r3, [r3, #16]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d123      	bne.n	8010766 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	015a      	lsls	r2, r3, #5
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	4413      	add	r3, r2
 8010726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801072a:	691a      	ldr	r2, [r3, #16]
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	689b      	ldr	r3, [r3, #8]
 8010730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010734:	69b9      	ldr	r1, [r7, #24]
 8010736:	0148      	lsls	r0, r1, #5
 8010738:	69f9      	ldr	r1, [r7, #28]
 801073a:	4401      	add	r1, r0
 801073c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010740:	4313      	orrs	r3, r2
 8010742:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	015a      	lsls	r2, r3, #5
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	4413      	add	r3, r2
 801074c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010750:	691b      	ldr	r3, [r3, #16]
 8010752:	69ba      	ldr	r2, [r7, #24]
 8010754:	0151      	lsls	r1, r2, #5
 8010756:	69fa      	ldr	r2, [r7, #28]
 8010758:	440a      	add	r2, r1
 801075a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801075e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010762:	6113      	str	r3, [r2, #16]
 8010764:	e037      	b.n	80107d6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	691a      	ldr	r2, [r3, #16]
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	4413      	add	r3, r2
 8010770:	1e5a      	subs	r2, r3, #1
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	689b      	ldr	r3, [r3, #8]
 8010776:	fbb2 f3f3 	udiv	r3, r2, r3
 801077a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	8afa      	ldrh	r2, [r7, #22]
 8010782:	fb03 f202 	mul.w	r2, r3, r2
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	015a      	lsls	r2, r3, #5
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	4413      	add	r3, r2
 8010792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010796:	691a      	ldr	r2, [r3, #16]
 8010798:	8afb      	ldrh	r3, [r7, #22]
 801079a:	04d9      	lsls	r1, r3, #19
 801079c:	4b39      	ldr	r3, [pc, #228]	; (8010884 <USB_EPStartXfer+0x53c>)
 801079e:	400b      	ands	r3, r1
 80107a0:	69b9      	ldr	r1, [r7, #24]
 80107a2:	0148      	lsls	r0, r1, #5
 80107a4:	69f9      	ldr	r1, [r7, #28]
 80107a6:	4401      	add	r1, r0
 80107a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107ac:	4313      	orrs	r3, r2
 80107ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	015a      	lsls	r2, r3, #5
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	4413      	add	r3, r2
 80107b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107bc:	691a      	ldr	r2, [r3, #16]
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	6a1b      	ldr	r3, [r3, #32]
 80107c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107c6:	69b9      	ldr	r1, [r7, #24]
 80107c8:	0148      	lsls	r0, r1, #5
 80107ca:	69f9      	ldr	r1, [r7, #28]
 80107cc:	4401      	add	r1, r0
 80107ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107d2:	4313      	orrs	r3, r2
 80107d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80107d6:	79fb      	ldrb	r3, [r7, #7]
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d10d      	bne.n	80107f8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d009      	beq.n	80107f8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	68d9      	ldr	r1, [r3, #12]
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	015a      	lsls	r2, r3, #5
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	4413      	add	r3, r2
 80107f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f4:	460a      	mov	r2, r1
 80107f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	791b      	ldrb	r3, [r3, #4]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d128      	bne.n	8010852 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010800:	69fb      	ldr	r3, [r7, #28]
 8010802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801080c:	2b00      	cmp	r3, #0
 801080e:	d110      	bne.n	8010832 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	69ba      	ldr	r2, [r7, #24]
 8010820:	0151      	lsls	r1, r2, #5
 8010822:	69fa      	ldr	r2, [r7, #28]
 8010824:	440a      	add	r2, r1
 8010826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	e00f      	b.n	8010852 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	015a      	lsls	r2, r3, #5
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	4413      	add	r3, r2
 801083a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	69ba      	ldr	r2, [r7, #24]
 8010842:	0151      	lsls	r1, r2, #5
 8010844:	69fa      	ldr	r2, [r7, #28]
 8010846:	440a      	add	r2, r1
 8010848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010850:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	015a      	lsls	r2, r3, #5
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	4413      	add	r3, r2
 801085a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	69ba      	ldr	r2, [r7, #24]
 8010862:	0151      	lsls	r1, r2, #5
 8010864:	69fa      	ldr	r2, [r7, #28]
 8010866:	440a      	add	r2, r1
 8010868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801086c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3720      	adds	r7, #32
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	fff80000 	.word	0xfff80000
 8010880:	e007ffff 	.word	0xe007ffff
 8010884:	1ff80000 	.word	0x1ff80000

08010888 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010888:	b480      	push	{r7}
 801088a:	b087      	sub	sp, #28
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010892:	2300      	movs	r3, #0
 8010894:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010896:	2300      	movs	r3, #0
 8010898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	785b      	ldrb	r3, [r3, #1]
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d14a      	bne.n	801093c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	015a      	lsls	r2, r3, #5
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	4413      	add	r3, r2
 80108b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108be:	f040 8086 	bne.w	80109ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	015a      	lsls	r2, r3, #5
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	4413      	add	r3, r2
 80108cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	7812      	ldrb	r2, [r2, #0]
 80108d6:	0151      	lsls	r1, r2, #5
 80108d8:	693a      	ldr	r2, [r7, #16]
 80108da:	440a      	add	r2, r1
 80108dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	015a      	lsls	r2, r3, #5
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	4413      	add	r3, r2
 80108f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	7812      	ldrb	r2, [r2, #0]
 80108fa:	0151      	lsls	r1, r2, #5
 80108fc:	693a      	ldr	r2, [r7, #16]
 80108fe:	440a      	add	r2, r1
 8010900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010908:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3301      	adds	r3, #1
 801090e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f242 7210 	movw	r2, #10000	; 0x2710
 8010916:	4293      	cmp	r3, r2
 8010918:	d902      	bls.n	8010920 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801091a:	2301      	movs	r3, #1
 801091c:	75fb      	strb	r3, [r7, #23]
          break;
 801091e:	e056      	b.n	80109ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	015a      	lsls	r2, r3, #5
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	4413      	add	r3, r2
 801092a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010938:	d0e7      	beq.n	801090a <USB_EPStopXfer+0x82>
 801093a:	e048      	b.n	80109ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	015a      	lsls	r2, r3, #5
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	4413      	add	r3, r2
 8010946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010954:	d13b      	bne.n	80109ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	015a      	lsls	r2, r3, #5
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	4413      	add	r3, r2
 8010960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	683a      	ldr	r2, [r7, #0]
 8010968:	7812      	ldrb	r2, [r2, #0]
 801096a:	0151      	lsls	r1, r2, #5
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	440a      	add	r2, r1
 8010970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010978:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	015a      	lsls	r2, r3, #5
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	4413      	add	r3, r2
 8010984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	7812      	ldrb	r2, [r2, #0]
 801098e:	0151      	lsls	r1, r2, #5
 8010990:	693a      	ldr	r2, [r7, #16]
 8010992:	440a      	add	r2, r1
 8010994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801099c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	3301      	adds	r3, #1
 80109a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d902      	bls.n	80109b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80109ae:	2301      	movs	r3, #1
 80109b0:	75fb      	strb	r3, [r7, #23]
          break;
 80109b2:	e00c      	b.n	80109ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	015a      	lsls	r2, r3, #5
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	4413      	add	r3, r2
 80109be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109cc:	d0e7      	beq.n	801099e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80109ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	371c      	adds	r7, #28
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80109dc:	b480      	push	{r7}
 80109de:	b089      	sub	sp, #36	; 0x24
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	4611      	mov	r1, r2
 80109e8:	461a      	mov	r2, r3
 80109ea:	460b      	mov	r3, r1
 80109ec:	71fb      	strb	r3, [r7, #7]
 80109ee:	4613      	mov	r3, r2
 80109f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80109fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d123      	bne.n	8010a4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010a02:	88bb      	ldrh	r3, [r7, #4]
 8010a04:	3303      	adds	r3, #3
 8010a06:	089b      	lsrs	r3, r3, #2
 8010a08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	61bb      	str	r3, [r7, #24]
 8010a0e:	e018      	b.n	8010a42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010a10:	79fb      	ldrb	r3, [r7, #7]
 8010a12:	031a      	lsls	r2, r3, #12
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	4413      	add	r3, r2
 8010a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	3301      	adds	r3, #1
 8010a28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	3301      	adds	r3, #1
 8010a34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010a3c:	69bb      	ldr	r3, [r7, #24]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	61bb      	str	r3, [r7, #24]
 8010a42:	69ba      	ldr	r2, [r7, #24]
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d3e2      	bcc.n	8010a10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010a4a:	2300      	movs	r3, #0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3724      	adds	r7, #36	; 0x24
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b08b      	sub	sp, #44	; 0x2c
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	60f8      	str	r0, [r7, #12]
 8010a60:	60b9      	str	r1, [r7, #8]
 8010a62:	4613      	mov	r3, r2
 8010a64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010a6e:	88fb      	ldrh	r3, [r7, #6]
 8010a70:	089b      	lsrs	r3, r3, #2
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010a76:	88fb      	ldrh	r3, [r7, #6]
 8010a78:	f003 0303 	and.w	r3, r3, #3
 8010a7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010a7e:	2300      	movs	r3, #0
 8010a80:	623b      	str	r3, [r7, #32]
 8010a82:	e014      	b.n	8010aae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a92:	3301      	adds	r3, #1
 8010a94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	3301      	adds	r3, #1
 8010a9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010aa8:	6a3b      	ldr	r3, [r7, #32]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	623b      	str	r3, [r7, #32]
 8010aae:	6a3a      	ldr	r2, [r7, #32]
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d3e6      	bcc.n	8010a84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010ab6:	8bfb      	ldrh	r3, [r7, #30]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d01e      	beq.n	8010afa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010abc:	2300      	movs	r3, #0
 8010abe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	f107 0310 	add.w	r3, r7, #16
 8010acc:	6812      	ldr	r2, [r2, #0]
 8010ace:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010ad0:	693a      	ldr	r2, [r7, #16]
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	701a      	strb	r2, [r3, #0]
      i++;
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	3301      	adds	r3, #1
 8010ae6:	623b      	str	r3, [r7, #32]
      pDest++;
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	3301      	adds	r3, #1
 8010aec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010aee:	8bfb      	ldrh	r3, [r7, #30]
 8010af0:	3b01      	subs	r3, #1
 8010af2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010af4:	8bfb      	ldrh	r3, [r7, #30]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1ea      	bne.n	8010ad0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	372c      	adds	r7, #44	; 0x2c
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	785b      	ldrb	r3, [r3, #1]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d12c      	bne.n	8010b7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	015a      	lsls	r2, r3, #5
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	db12      	blt.n	8010b5c <USB_EPSetStall+0x54>
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d00f      	beq.n	8010b5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	015a      	lsls	r2, r3, #5
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	4413      	add	r3, r2
 8010b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	68ba      	ldr	r2, [r7, #8]
 8010b4c:	0151      	lsls	r1, r2, #5
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	440a      	add	r2, r1
 8010b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010b5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	015a      	lsls	r2, r3, #5
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	4413      	add	r3, r2
 8010b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	0151      	lsls	r1, r2, #5
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	440a      	add	r2, r1
 8010b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b7a:	6013      	str	r3, [r2, #0]
 8010b7c:	e02b      	b.n	8010bd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	015a      	lsls	r2, r3, #5
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	4413      	add	r3, r2
 8010b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	db12      	blt.n	8010bb6 <USB_EPSetStall+0xae>
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00f      	beq.n	8010bb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	015a      	lsls	r2, r3, #5
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	68ba      	ldr	r2, [r7, #8]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010bb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	015a      	lsls	r2, r3, #5
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	0151      	lsls	r1, r2, #5
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	440a      	add	r2, r1
 8010bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010bd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3714      	adds	r7, #20
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	785b      	ldrb	r3, [r3, #1]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d128      	bne.n	8010c52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	015a      	lsls	r2, r3, #5
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	4413      	add	r3, r2
 8010c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	0151      	lsls	r1, r2, #5
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	440a      	add	r2, r1
 8010c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	791b      	ldrb	r3, [r3, #4]
 8010c24:	2b03      	cmp	r3, #3
 8010c26:	d003      	beq.n	8010c30 <USB_EPClearStall+0x4c>
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	791b      	ldrb	r3, [r3, #4]
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d138      	bne.n	8010ca2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	015a      	lsls	r2, r3, #5
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	4413      	add	r3, r2
 8010c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	68ba      	ldr	r2, [r7, #8]
 8010c40:	0151      	lsls	r1, r2, #5
 8010c42:	68fa      	ldr	r2, [r7, #12]
 8010c44:	440a      	add	r2, r1
 8010c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c4e:	6013      	str	r3, [r2, #0]
 8010c50:	e027      	b.n	8010ca2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	015a      	lsls	r2, r3, #5
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	4413      	add	r3, r2
 8010c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	0151      	lsls	r1, r2, #5
 8010c64:	68fa      	ldr	r2, [r7, #12]
 8010c66:	440a      	add	r2, r1
 8010c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	791b      	ldrb	r3, [r3, #4]
 8010c76:	2b03      	cmp	r3, #3
 8010c78:	d003      	beq.n	8010c82 <USB_EPClearStall+0x9e>
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	791b      	ldrb	r3, [r3, #4]
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d10f      	bne.n	8010ca2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	015a      	lsls	r2, r3, #5
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	4413      	add	r3, r2
 8010c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68ba      	ldr	r2, [r7, #8]
 8010c92:	0151      	lsls	r1, r2, #5
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	440a      	add	r2, r1
 8010c98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ca0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010cd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	78fb      	ldrb	r3, [r7, #3]
 8010cde:	011b      	lsls	r3, r3, #4
 8010ce0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010ce4:	68f9      	ldr	r1, [r7, #12]
 8010ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cea:	4313      	orrs	r3, r2
 8010cec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b085      	sub	sp, #20
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d16:	f023 0303 	bic.w	r3, r3, #3
 8010d1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d2a:	f023 0302 	bic.w	r3, r3, #2
 8010d2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr

08010d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d3e:	b480      	push	{r7}
 8010d40:	b085      	sub	sp, #20
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d58:	f023 0303 	bic.w	r3, r3, #3
 8010d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	68fa      	ldr	r2, [r7, #12]
 8010d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d6c:	f043 0302 	orr.w	r3, r3, #2
 8010d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d72:	2300      	movs	r3, #0
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b085      	sub	sp, #20
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	695b      	ldr	r3, [r3, #20]
 8010d8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	699b      	ldr	r3, [r3, #24]
 8010d92:	68fa      	ldr	r2, [r7, #12]
 8010d94:	4013      	ands	r3, r2
 8010d96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010d98:	68fb      	ldr	r3, [r7, #12]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3714      	adds	r7, #20
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b085      	sub	sp, #20
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010db8:	699b      	ldr	r3, [r3, #24]
 8010dba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc2:	69db      	ldr	r3, [r3, #28]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	4013      	ands	r3, r2
 8010dc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	0c1b      	lsrs	r3, r3, #16
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3714      	adds	r7, #20
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b085      	sub	sp, #20
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dec:	699b      	ldr	r3, [r3, #24]
 8010dee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010df6:	69db      	ldr	r3, [r3, #28]
 8010df8:	68ba      	ldr	r2, [r7, #8]
 8010dfa:	4013      	ands	r3, r2
 8010dfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	b29b      	uxth	r3, r3
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3714      	adds	r7, #20
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e0e:	b480      	push	{r7}
 8010e10:	b085      	sub	sp, #20
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
 8010e16:	460b      	mov	r3, r1
 8010e18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010e1e:	78fb      	ldrb	r3, [r7, #3]
 8010e20:	015a      	lsls	r2, r3, #5
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	4413      	add	r3, r2
 8010e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	4013      	ands	r3, r2
 8010e3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e3c:	68bb      	ldr	r3, [r7, #8]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3714      	adds	r7, #20
 8010e42:	46bd      	mov	sp, r7
 8010e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e48:	4770      	bx	lr

08010e4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e4a:	b480      	push	{r7}
 8010e4c:	b087      	sub	sp, #28
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
 8010e52:	460b      	mov	r3, r1
 8010e54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e60:	691b      	ldr	r3, [r3, #16]
 8010e62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010e6e:	78fb      	ldrb	r3, [r7, #3]
 8010e70:	f003 030f 	and.w	r3, r3, #15
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	fa22 f303 	lsr.w	r3, r2, r3
 8010e7a:	01db      	lsls	r3, r3, #7
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	693a      	ldr	r2, [r7, #16]
 8010e80:	4313      	orrs	r3, r2
 8010e82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010e84:	78fb      	ldrb	r3, [r7, #3]
 8010e86:	015a      	lsls	r2, r3, #5
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	4413      	add	r3, r2
 8010e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	4013      	ands	r3, r2
 8010e96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e98:	68bb      	ldr	r3, [r7, #8]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	371c      	adds	r7, #28
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea4:	4770      	bx	lr

08010ea6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010ea6:	b480      	push	{r7}
 8010ea8:	b083      	sub	sp, #12
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	695b      	ldr	r3, [r3, #20]
 8010eb2:	f003 0301 	and.w	r3, r3, #1
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	370c      	adds	r7, #12
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr
	...

08010ec4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b085      	sub	sp, #20
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4b09      	ldr	r3, [pc, #36]	; (8010f08 <USB_ActivateSetup+0x44>)
 8010ee2:	4013      	ands	r3, r2
 8010ee4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	68fa      	ldr	r2, [r7, #12]
 8010ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ef8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010efa:	2300      	movs	r3, #0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3714      	adds	r7, #20
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr
 8010f08:	fffff800 	.word	0xfffff800

08010f0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b087      	sub	sp, #28
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	460b      	mov	r3, r1
 8010f16:	607a      	str	r2, [r7, #4]
 8010f18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	333c      	adds	r3, #60	; 0x3c
 8010f22:	3304      	adds	r3, #4
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	4a26      	ldr	r2, [pc, #152]	; (8010fc4 <USB_EP0_OutStart+0xb8>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d90a      	bls.n	8010f46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f40:	d101      	bne.n	8010f46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010f42:	2300      	movs	r3, #0
 8010f44:	e037      	b.n	8010fb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	2300      	movs	r3, #0
 8010f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f6c:	691b      	ldr	r3, [r3, #16]
 8010f6e:	697a      	ldr	r2, [r7, #20]
 8010f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f74:	f043 0318 	orr.w	r3, r3, #24
 8010f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	697a      	ldr	r2, [r7, #20]
 8010f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010f8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010f8e:	7afb      	ldrb	r3, [r7, #11]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d10f      	bne.n	8010fb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	697a      	ldr	r2, [r7, #20]
 8010faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	371c      	adds	r7, #28
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr
 8010fc2:	bf00      	nop
 8010fc4:	4f54300a 	.word	0x4f54300a

08010fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	4a13      	ldr	r2, [pc, #76]	; (801102c <USB_CoreReset+0x64>)
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d901      	bls.n	8010fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010fe2:	2303      	movs	r3, #3
 8010fe4:	e01b      	b.n	801101e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	daf2      	bge.n	8010fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	f043 0201 	orr.w	r2, r3, #1
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	3301      	adds	r3, #1
 8011002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	4a09      	ldr	r2, [pc, #36]	; (801102c <USB_CoreReset+0x64>)
 8011008:	4293      	cmp	r3, r2
 801100a:	d901      	bls.n	8011010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801100c:	2303      	movs	r3, #3
 801100e:	e006      	b.n	801101e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	2b01      	cmp	r3, #1
 801101a:	d0f0      	beq.n	8010ffe <USB_CoreReset+0x36>

  return HAL_OK;
 801101c:	2300      	movs	r3, #0
}
 801101e:	4618      	mov	r0, r3
 8011020:	3714      	adds	r7, #20
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop
 801102c:	00030d40 	.word	0x00030d40

08011030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
 8011038:	460b      	mov	r3, r1
 801103a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801103c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011040:	f002 fc8e 	bl	8013960 <USBD_static_malloc>
 8011044:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d109      	bne.n	8011060 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	32b0      	adds	r2, #176	; 0xb0
 8011056:	2100      	movs	r1, #0
 8011058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801105c:	2302      	movs	r3, #2
 801105e:	e0d4      	b.n	801120a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011060:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011064:	2100      	movs	r1, #0
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f002 fcf6 	bl	8013a58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	32b0      	adds	r2, #176	; 0xb0
 8011076:	68f9      	ldr	r1, [r7, #12]
 8011078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	32b0      	adds	r2, #176	; 0xb0
 8011086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	7c1b      	ldrb	r3, [r3, #16]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d138      	bne.n	801110a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011098:	4b5e      	ldr	r3, [pc, #376]	; (8011214 <USBD_CDC_Init+0x1e4>)
 801109a:	7819      	ldrb	r1, [r3, #0]
 801109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110a0:	2202      	movs	r2, #2
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f002 fb39 	bl	801371a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80110a8:	4b5a      	ldr	r3, [pc, #360]	; (8011214 <USBD_CDC_Init+0x1e4>)
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f003 020f 	and.w	r2, r3, #15
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	4613      	mov	r3, r2
 80110b4:	009b      	lsls	r3, r3, #2
 80110b6:	4413      	add	r3, r2
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	440b      	add	r3, r1
 80110bc:	3324      	adds	r3, #36	; 0x24
 80110be:	2201      	movs	r2, #1
 80110c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80110c2:	4b55      	ldr	r3, [pc, #340]	; (8011218 <USBD_CDC_Init+0x1e8>)
 80110c4:	7819      	ldrb	r1, [r3, #0]
 80110c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80110ca:	2202      	movs	r2, #2
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f002 fb24 	bl	801371a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80110d2:	4b51      	ldr	r3, [pc, #324]	; (8011218 <USBD_CDC_Init+0x1e8>)
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	f003 020f 	and.w	r2, r3, #15
 80110da:	6879      	ldr	r1, [r7, #4]
 80110dc:	4613      	mov	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	4413      	add	r3, r2
 80110e2:	009b      	lsls	r3, r3, #2
 80110e4:	440b      	add	r3, r1
 80110e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80110ea:	2201      	movs	r2, #1
 80110ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80110ee:	4b4b      	ldr	r3, [pc, #300]	; (801121c <USBD_CDC_Init+0x1ec>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	f003 020f 	and.w	r2, r3, #15
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	4613      	mov	r3, r2
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	4413      	add	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	440b      	add	r3, r1
 8011102:	3326      	adds	r3, #38	; 0x26
 8011104:	2210      	movs	r2, #16
 8011106:	801a      	strh	r2, [r3, #0]
 8011108:	e035      	b.n	8011176 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801110a:	4b42      	ldr	r3, [pc, #264]	; (8011214 <USBD_CDC_Init+0x1e4>)
 801110c:	7819      	ldrb	r1, [r3, #0]
 801110e:	2340      	movs	r3, #64	; 0x40
 8011110:	2202      	movs	r2, #2
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f002 fb01 	bl	801371a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011118:	4b3e      	ldr	r3, [pc, #248]	; (8011214 <USBD_CDC_Init+0x1e4>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f003 020f 	and.w	r2, r3, #15
 8011120:	6879      	ldr	r1, [r7, #4]
 8011122:	4613      	mov	r3, r2
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	4413      	add	r3, r2
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	440b      	add	r3, r1
 801112c:	3324      	adds	r3, #36	; 0x24
 801112e:	2201      	movs	r2, #1
 8011130:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011132:	4b39      	ldr	r3, [pc, #228]	; (8011218 <USBD_CDC_Init+0x1e8>)
 8011134:	7819      	ldrb	r1, [r3, #0]
 8011136:	2340      	movs	r3, #64	; 0x40
 8011138:	2202      	movs	r2, #2
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f002 faed 	bl	801371a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011140:	4b35      	ldr	r3, [pc, #212]	; (8011218 <USBD_CDC_Init+0x1e8>)
 8011142:	781b      	ldrb	r3, [r3, #0]
 8011144:	f003 020f 	and.w	r2, r3, #15
 8011148:	6879      	ldr	r1, [r7, #4]
 801114a:	4613      	mov	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4413      	add	r3, r2
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	440b      	add	r3, r1
 8011154:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011158:	2201      	movs	r2, #1
 801115a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801115c:	4b2f      	ldr	r3, [pc, #188]	; (801121c <USBD_CDC_Init+0x1ec>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 020f 	and.w	r2, r3, #15
 8011164:	6879      	ldr	r1, [r7, #4]
 8011166:	4613      	mov	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	440b      	add	r3, r1
 8011170:	3326      	adds	r3, #38	; 0x26
 8011172:	2210      	movs	r2, #16
 8011174:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011176:	4b29      	ldr	r3, [pc, #164]	; (801121c <USBD_CDC_Init+0x1ec>)
 8011178:	7819      	ldrb	r1, [r3, #0]
 801117a:	2308      	movs	r3, #8
 801117c:	2203      	movs	r2, #3
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f002 facb 	bl	801371a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011184:	4b25      	ldr	r3, [pc, #148]	; (801121c <USBD_CDC_Init+0x1ec>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	f003 020f 	and.w	r2, r3, #15
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	4613      	mov	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	440b      	add	r3, r1
 8011198:	3324      	adds	r3, #36	; 0x24
 801119a:	2201      	movs	r2, #1
 801119c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2200      	movs	r2, #0
 80111a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	33b0      	adds	r3, #176	; 0xb0
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	4413      	add	r3, r2
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2200      	movs	r2, #0
 80111be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2200      	movs	r2, #0
 80111c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d101      	bne.n	80111d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80111d4:	2302      	movs	r3, #2
 80111d6:	e018      	b.n	801120a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	7c1b      	ldrb	r3, [r3, #16]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d10a      	bne.n	80111f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80111e0:	4b0d      	ldr	r3, [pc, #52]	; (8011218 <USBD_CDC_Init+0x1e8>)
 80111e2:	7819      	ldrb	r1, [r3, #0]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f002 fb82 	bl	80138f8 <USBD_LL_PrepareReceive>
 80111f4:	e008      	b.n	8011208 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80111f6:	4b08      	ldr	r3, [pc, #32]	; (8011218 <USBD_CDC_Init+0x1e8>)
 80111f8:	7819      	ldrb	r1, [r3, #0]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011200:	2340      	movs	r3, #64	; 0x40
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f002 fb78 	bl	80138f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	24000097 	.word	0x24000097
 8011218:	24000098 	.word	0x24000098
 801121c:	24000099 	.word	0x24000099

08011220 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	460b      	mov	r3, r1
 801122a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801122c:	4b3a      	ldr	r3, [pc, #232]	; (8011318 <USBD_CDC_DeInit+0xf8>)
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	4619      	mov	r1, r3
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f002 fa97 	bl	8013766 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011238:	4b37      	ldr	r3, [pc, #220]	; (8011318 <USBD_CDC_DeInit+0xf8>)
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	f003 020f 	and.w	r2, r3, #15
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	4613      	mov	r3, r2
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	4413      	add	r3, r2
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	440b      	add	r3, r1
 801124c:	3324      	adds	r3, #36	; 0x24
 801124e:	2200      	movs	r2, #0
 8011250:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011252:	4b32      	ldr	r3, [pc, #200]	; (801131c <USBD_CDC_DeInit+0xfc>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	4619      	mov	r1, r3
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f002 fa84 	bl	8013766 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801125e:	4b2f      	ldr	r3, [pc, #188]	; (801131c <USBD_CDC_DeInit+0xfc>)
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	f003 020f 	and.w	r2, r3, #15
 8011266:	6879      	ldr	r1, [r7, #4]
 8011268:	4613      	mov	r3, r2
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	4413      	add	r3, r2
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	440b      	add	r3, r1
 8011272:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011276:	2200      	movs	r2, #0
 8011278:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801127a:	4b29      	ldr	r3, [pc, #164]	; (8011320 <USBD_CDC_DeInit+0x100>)
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	4619      	mov	r1, r3
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f002 fa70 	bl	8013766 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011286:	4b26      	ldr	r3, [pc, #152]	; (8011320 <USBD_CDC_DeInit+0x100>)
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	f003 020f 	and.w	r2, r3, #15
 801128e:	6879      	ldr	r1, [r7, #4]
 8011290:	4613      	mov	r3, r2
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	4413      	add	r3, r2
 8011296:	009b      	lsls	r3, r3, #2
 8011298:	440b      	add	r3, r1
 801129a:	3324      	adds	r3, #36	; 0x24
 801129c:	2200      	movs	r2, #0
 801129e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80112a0:	4b1f      	ldr	r3, [pc, #124]	; (8011320 <USBD_CDC_DeInit+0x100>)
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	f003 020f 	and.w	r2, r3, #15
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	4613      	mov	r3, r2
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	4413      	add	r3, r2
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	440b      	add	r3, r1
 80112b4:	3326      	adds	r3, #38	; 0x26
 80112b6:	2200      	movs	r2, #0
 80112b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	32b0      	adds	r2, #176	; 0xb0
 80112c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d01f      	beq.n	801130c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	33b0      	adds	r3, #176	; 0xb0
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	4413      	add	r3, r2
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	32b0      	adds	r2, #176	; 0xb0
 80112ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f002 fb44 	bl	801397c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	32b0      	adds	r2, #176	; 0xb0
 80112fe:	2100      	movs	r1, #0
 8011300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3708      	adds	r7, #8
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	24000097 	.word	0x24000097
 801131c:	24000098 	.word	0x24000098
 8011320:	24000099 	.word	0x24000099

08011324 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b086      	sub	sp, #24
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	32b0      	adds	r2, #176	; 0xb0
 8011338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801133c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801133e:	2300      	movs	r3, #0
 8011340:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011342:	2300      	movs	r3, #0
 8011344:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d101      	bne.n	8011354 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011350:	2303      	movs	r3, #3
 8011352:	e0bf      	b.n	80114d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801135c:	2b00      	cmp	r3, #0
 801135e:	d050      	beq.n	8011402 <USBD_CDC_Setup+0xde>
 8011360:	2b20      	cmp	r3, #32
 8011362:	f040 80af 	bne.w	80114c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	88db      	ldrh	r3, [r3, #6]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d03a      	beq.n	80113e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	b25b      	sxtb	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	da1b      	bge.n	80113b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	33b0      	adds	r3, #176	; 0xb0
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	4413      	add	r3, r2
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	689b      	ldr	r3, [r3, #8]
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801138e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011390:	683a      	ldr	r2, [r7, #0]
 8011392:	88d2      	ldrh	r2, [r2, #6]
 8011394:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	88db      	ldrh	r3, [r3, #6]
 801139a:	2b07      	cmp	r3, #7
 801139c:	bf28      	it	cs
 801139e:	2307      	movcs	r3, #7
 80113a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	89fa      	ldrh	r2, [r7, #14]
 80113a6:	4619      	mov	r1, r3
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f001 fd89 	bl	8012ec0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80113ae:	e090      	b.n	80114d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	785a      	ldrb	r2, [r3, #1]
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	88db      	ldrh	r3, [r3, #6]
 80113be:	2b3f      	cmp	r3, #63	; 0x3f
 80113c0:	d803      	bhi.n	80113ca <USBD_CDC_Setup+0xa6>
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	88db      	ldrh	r3, [r3, #6]
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	e000      	b.n	80113cc <USBD_CDC_Setup+0xa8>
 80113ca:	2240      	movs	r2, #64	; 0x40
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80113d2:	6939      	ldr	r1, [r7, #16]
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80113da:	461a      	mov	r2, r3
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f001 fd9b 	bl	8012f18 <USBD_CtlPrepareRx>
      break;
 80113e2:	e076      	b.n	80114d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	33b0      	adds	r3, #176	; 0xb0
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	683a      	ldr	r2, [r7, #0]
 80113f8:	7850      	ldrb	r0, [r2, #1]
 80113fa:	2200      	movs	r2, #0
 80113fc:	6839      	ldr	r1, [r7, #0]
 80113fe:	4798      	blx	r3
      break;
 8011400:	e067      	b.n	80114d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	2b0b      	cmp	r3, #11
 8011408:	d851      	bhi.n	80114ae <USBD_CDC_Setup+0x18a>
 801140a:	a201      	add	r2, pc, #4	; (adr r2, 8011410 <USBD_CDC_Setup+0xec>)
 801140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011410:	08011441 	.word	0x08011441
 8011414:	080114bd 	.word	0x080114bd
 8011418:	080114af 	.word	0x080114af
 801141c:	080114af 	.word	0x080114af
 8011420:	080114af 	.word	0x080114af
 8011424:	080114af 	.word	0x080114af
 8011428:	080114af 	.word	0x080114af
 801142c:	080114af 	.word	0x080114af
 8011430:	080114af 	.word	0x080114af
 8011434:	080114af 	.word	0x080114af
 8011438:	0801146b 	.word	0x0801146b
 801143c:	08011495 	.word	0x08011495
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011446:	b2db      	uxtb	r3, r3
 8011448:	2b03      	cmp	r3, #3
 801144a:	d107      	bne.n	801145c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801144c:	f107 030a 	add.w	r3, r7, #10
 8011450:	2202      	movs	r2, #2
 8011452:	4619      	mov	r1, r3
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f001 fd33 	bl	8012ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801145a:	e032      	b.n	80114c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f001 fcbd 	bl	8012dde <USBD_CtlError>
            ret = USBD_FAIL;
 8011464:	2303      	movs	r3, #3
 8011466:	75fb      	strb	r3, [r7, #23]
          break;
 8011468:	e02b      	b.n	80114c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011470:	b2db      	uxtb	r3, r3
 8011472:	2b03      	cmp	r3, #3
 8011474:	d107      	bne.n	8011486 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011476:	f107 030d 	add.w	r3, r7, #13
 801147a:	2201      	movs	r2, #1
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f001 fd1e 	bl	8012ec0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011484:	e01d      	b.n	80114c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f001 fca8 	bl	8012dde <USBD_CtlError>
            ret = USBD_FAIL;
 801148e:	2303      	movs	r3, #3
 8011490:	75fb      	strb	r3, [r7, #23]
          break;
 8011492:	e016      	b.n	80114c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b03      	cmp	r3, #3
 801149e:	d00f      	beq.n	80114c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f001 fc9b 	bl	8012dde <USBD_CtlError>
            ret = USBD_FAIL;
 80114a8:	2303      	movs	r3, #3
 80114aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80114ac:	e008      	b.n	80114c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80114ae:	6839      	ldr	r1, [r7, #0]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f001 fc94 	bl	8012dde <USBD_CtlError>
          ret = USBD_FAIL;
 80114b6:	2303      	movs	r3, #3
 80114b8:	75fb      	strb	r3, [r7, #23]
          break;
 80114ba:	e002      	b.n	80114c2 <USBD_CDC_Setup+0x19e>
          break;
 80114bc:	bf00      	nop
 80114be:	e008      	b.n	80114d2 <USBD_CDC_Setup+0x1ae>
          break;
 80114c0:	bf00      	nop
      }
      break;
 80114c2:	e006      	b.n	80114d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f001 fc89 	bl	8012dde <USBD_CtlError>
      ret = USBD_FAIL;
 80114cc:	2303      	movs	r3, #3
 80114ce:	75fb      	strb	r3, [r7, #23]
      break;
 80114d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80114d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3718      	adds	r7, #24
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	460b      	mov	r3, r1
 80114e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	32b0      	adds	r2, #176	; 0xb0
 80114fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d101      	bne.n	8011506 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011502:	2303      	movs	r3, #3
 8011504:	e065      	b.n	80115d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	32b0      	adds	r2, #176	; 0xb0
 8011510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011514:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011516:	78fb      	ldrb	r3, [r7, #3]
 8011518:	f003 020f 	and.w	r2, r3, #15
 801151c:	6879      	ldr	r1, [r7, #4]
 801151e:	4613      	mov	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	440b      	add	r3, r1
 8011528:	3318      	adds	r3, #24
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d02f      	beq.n	8011590 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011530:	78fb      	ldrb	r3, [r7, #3]
 8011532:	f003 020f 	and.w	r2, r3, #15
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	4613      	mov	r3, r2
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	440b      	add	r3, r1
 8011542:	3318      	adds	r3, #24
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	78fb      	ldrb	r3, [r7, #3]
 8011548:	f003 010f 	and.w	r1, r3, #15
 801154c:	68f8      	ldr	r0, [r7, #12]
 801154e:	460b      	mov	r3, r1
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	440b      	add	r3, r1
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	4403      	add	r3, r0
 8011558:	3344      	adds	r3, #68	; 0x44
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011560:	fb01 f303 	mul.w	r3, r1, r3
 8011564:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011566:	2b00      	cmp	r3, #0
 8011568:	d112      	bne.n	8011590 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801156a:	78fb      	ldrb	r3, [r7, #3]
 801156c:	f003 020f 	and.w	r2, r3, #15
 8011570:	6879      	ldr	r1, [r7, #4]
 8011572:	4613      	mov	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	440b      	add	r3, r1
 801157c:	3318      	adds	r3, #24
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011582:	78f9      	ldrb	r1, [r7, #3]
 8011584:	2300      	movs	r3, #0
 8011586:	2200      	movs	r2, #0
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f002 f994 	bl	80138b6 <USBD_LL_Transmit>
 801158e:	e01f      	b.n	80115d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2200      	movs	r2, #0
 8011594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	33b0      	adds	r3, #176	; 0xb0
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	4413      	add	r3, r2
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	691b      	ldr	r3, [r3, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d010      	beq.n	80115d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	33b0      	adds	r3, #176	; 0xb0
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4413      	add	r3, r2
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	691b      	ldr	r3, [r3, #16]
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80115c6:	68ba      	ldr	r2, [r7, #8]
 80115c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80115cc:	78fa      	ldrb	r2, [r7, #3]
 80115ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80115d0:	2300      	movs	r3, #0
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
 80115e2:	460b      	mov	r3, r1
 80115e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	32b0      	adds	r2, #176	; 0xb0
 80115f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	32b0      	adds	r2, #176	; 0xb0
 8011600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d101      	bne.n	801160c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011608:	2303      	movs	r3, #3
 801160a:	e01a      	b.n	8011642 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801160c:	78fb      	ldrb	r3, [r7, #3]
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f002 f992 	bl	801393a <USBD_LL_GetRxDataSize>
 8011616:	4602      	mov	r2, r0
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	33b0      	adds	r3, #176	; 0xb0
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801163c:	4611      	mov	r1, r2
 801163e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011640:	2300      	movs	r3, #0
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b084      	sub	sp, #16
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	32b0      	adds	r2, #176	; 0xb0
 801165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011660:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d101      	bne.n	801166c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011668:	2303      	movs	r3, #3
 801166a:	e025      	b.n	80116b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	33b0      	adds	r3, #176	; 0xb0
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d01a      	beq.n	80116b6 <USBD_CDC_EP0_RxReady+0x6c>
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011686:	2bff      	cmp	r3, #255	; 0xff
 8011688:	d015      	beq.n	80116b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	33b0      	adds	r3, #176	; 0xb0
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80116a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80116aa:	b292      	uxth	r2, r2
 80116ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	22ff      	movs	r2, #255	; 0xff
 80116b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3710      	adds	r7, #16
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80116c8:	2182      	movs	r1, #130	; 0x82
 80116ca:	4818      	ldr	r0, [pc, #96]	; (801172c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80116cc:	f000 fd4f 	bl	801216e <USBD_GetEpDesc>
 80116d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80116d2:	2101      	movs	r1, #1
 80116d4:	4815      	ldr	r0, [pc, #84]	; (801172c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80116d6:	f000 fd4a 	bl	801216e <USBD_GetEpDesc>
 80116da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80116dc:	2181      	movs	r1, #129	; 0x81
 80116de:	4813      	ldr	r0, [pc, #76]	; (801172c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80116e0:	f000 fd45 	bl	801216e <USBD_GetEpDesc>
 80116e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d002      	beq.n	80116f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2210      	movs	r2, #16
 80116f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d006      	beq.n	8011706 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011700:	711a      	strb	r2, [r3, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d006      	beq.n	801171a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011714:	711a      	strb	r2, [r3, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2243      	movs	r2, #67	; 0x43
 801171e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011720:	4b02      	ldr	r3, [pc, #8]	; (801172c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011722:	4618      	mov	r0, r3
 8011724:	3718      	adds	r7, #24
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	24000054 	.word	0x24000054

08011730 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011738:	2182      	movs	r1, #130	; 0x82
 801173a:	4818      	ldr	r0, [pc, #96]	; (801179c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801173c:	f000 fd17 	bl	801216e <USBD_GetEpDesc>
 8011740:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011742:	2101      	movs	r1, #1
 8011744:	4815      	ldr	r0, [pc, #84]	; (801179c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011746:	f000 fd12 	bl	801216e <USBD_GetEpDesc>
 801174a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801174c:	2181      	movs	r1, #129	; 0x81
 801174e:	4813      	ldr	r0, [pc, #76]	; (801179c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011750:	f000 fd0d 	bl	801216e <USBD_GetEpDesc>
 8011754:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2210      	movs	r2, #16
 8011760:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d006      	beq.n	8011776 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	2200      	movs	r2, #0
 801176c:	711a      	strb	r2, [r3, #4]
 801176e:	2200      	movs	r2, #0
 8011770:	f042 0202 	orr.w	r2, r2, #2
 8011774:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d006      	beq.n	801178a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2200      	movs	r2, #0
 8011780:	711a      	strb	r2, [r3, #4]
 8011782:	2200      	movs	r2, #0
 8011784:	f042 0202 	orr.w	r2, r2, #2
 8011788:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2243      	movs	r2, #67	; 0x43
 801178e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011790:	4b02      	ldr	r3, [pc, #8]	; (801179c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011792:	4618      	mov	r0, r3
 8011794:	3718      	adds	r7, #24
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	24000054 	.word	0x24000054

080117a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80117a8:	2182      	movs	r1, #130	; 0x82
 80117aa:	4818      	ldr	r0, [pc, #96]	; (801180c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80117ac:	f000 fcdf 	bl	801216e <USBD_GetEpDesc>
 80117b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80117b2:	2101      	movs	r1, #1
 80117b4:	4815      	ldr	r0, [pc, #84]	; (801180c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80117b6:	f000 fcda 	bl	801216e <USBD_GetEpDesc>
 80117ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80117bc:	2181      	movs	r1, #129	; 0x81
 80117be:	4813      	ldr	r0, [pc, #76]	; (801180c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80117c0:	f000 fcd5 	bl	801216e <USBD_GetEpDesc>
 80117c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	2210      	movs	r2, #16
 80117d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d006      	beq.n	80117e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	2200      	movs	r2, #0
 80117dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117e0:	711a      	strb	r2, [r3, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d006      	beq.n	80117fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2200      	movs	r2, #0
 80117f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117f4:	711a      	strb	r2, [r3, #4]
 80117f6:	2200      	movs	r2, #0
 80117f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2243      	movs	r2, #67	; 0x43
 80117fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011800:	4b02      	ldr	r3, [pc, #8]	; (801180c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	24000054 	.word	0x24000054

08011810 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	220a      	movs	r2, #10
 801181c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801181e:	4b03      	ldr	r3, [pc, #12]	; (801182c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011820:	4618      	mov	r0, r3
 8011822:	370c      	adds	r7, #12
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr
 801182c:	24000010 	.word	0x24000010

08011830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d101      	bne.n	8011844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011840:	2303      	movs	r3, #3
 8011842:	e009      	b.n	8011858 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	33b0      	adds	r3, #176	; 0xb0
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	4413      	add	r3, r2
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011856:	2300      	movs	r3, #0
}
 8011858:	4618      	mov	r0, r3
 801185a:	370c      	adds	r7, #12
 801185c:	46bd      	mov	sp, r7
 801185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011862:	4770      	bx	lr

08011864 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011864:	b480      	push	{r7}
 8011866:	b087      	sub	sp, #28
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	32b0      	adds	r2, #176	; 0xb0
 801187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801187e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d101      	bne.n	801188a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011886:	2303      	movs	r3, #3
 8011888:	e008      	b.n	801189c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801189a:	2300      	movs	r3, #0
}
 801189c:	4618      	mov	r0, r3
 801189e:	371c      	adds	r7, #28
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	32b0      	adds	r2, #176	; 0xb0
 80118bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80118c8:	2303      	movs	r3, #3
 80118ca:	e004      	b.n	80118d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80118d4:	2300      	movs	r3, #0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3714      	adds	r7, #20
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
	...

080118e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	32b0      	adds	r2, #176	; 0xb0
 80118f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80118fc:	2301      	movs	r3, #1
 80118fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d101      	bne.n	801190a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011906:	2303      	movs	r3, #3
 8011908:	e025      	b.n	8011956 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011910:	2b00      	cmp	r3, #0
 8011912:	d11f      	bne.n	8011954 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	2201      	movs	r2, #1
 8011918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801191c:	4b10      	ldr	r3, [pc, #64]	; (8011960 <USBD_CDC_TransmitPacket+0x7c>)
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	f003 020f 	and.w	r2, r3, #15
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	4613      	mov	r3, r2
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	4413      	add	r3, r2
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	4403      	add	r3, r0
 8011936:	3318      	adds	r3, #24
 8011938:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801193a:	4b09      	ldr	r3, [pc, #36]	; (8011960 <USBD_CDC_TransmitPacket+0x7c>)
 801193c:	7819      	ldrb	r1, [r3, #0]
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f001 ffb3 	bl	80138b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011950:	2300      	movs	r3, #0
 8011952:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011954:	7bfb      	ldrb	r3, [r7, #15]
}
 8011956:	4618      	mov	r0, r3
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	24000097 	.word	0x24000097

08011964 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	32b0      	adds	r2, #176	; 0xb0
 8011976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801197a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	32b0      	adds	r2, #176	; 0xb0
 8011986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801198e:	2303      	movs	r3, #3
 8011990:	e018      	b.n	80119c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	7c1b      	ldrb	r3, [r3, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10a      	bne.n	80119b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801199a:	4b0c      	ldr	r3, [pc, #48]	; (80119cc <USBD_CDC_ReceivePacket+0x68>)
 801199c:	7819      	ldrb	r1, [r3, #0]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80119a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f001 ffa5 	bl	80138f8 <USBD_LL_PrepareReceive>
 80119ae:	e008      	b.n	80119c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80119b0:	4b06      	ldr	r3, [pc, #24]	; (80119cc <USBD_CDC_ReceivePacket+0x68>)
 80119b2:	7819      	ldrb	r1, [r3, #0]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80119ba:	2340      	movs	r3, #64	; 0x40
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f001 ff9b 	bl	80138f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80119c2:	2300      	movs	r3, #0
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	24000098 	.word	0x24000098

080119d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	4613      	mov	r3, r2
 80119dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d101      	bne.n	80119e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80119e4:	2303      	movs	r3, #3
 80119e6:	e01f      	b.n	8011a28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2200      	movs	r2, #0
 80119ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2200      	movs	r2, #0
 80119fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d003      	beq.n	8011a0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	68ba      	ldr	r2, [r7, #8]
 8011a0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2201      	movs	r2, #1
 8011a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	79fa      	ldrb	r2, [r7, #7]
 8011a1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	f001 fe0f 	bl	8013640 <USBD_LL_Init>
 8011a22:	4603      	mov	r3, r0
 8011a24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3718      	adds	r7, #24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d101      	bne.n	8011a48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011a44:	2303      	movs	r3, #3
 8011a46:	e025      	b.n	8011a94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	32ae      	adds	r2, #174	; 0xae
 8011a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00f      	beq.n	8011a84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	32ae      	adds	r2, #174	; 0xae
 8011a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	f107 020e 	add.w	r2, r7, #14
 8011a78:	4610      	mov	r0, r2
 8011a7a:	4798      	blx	r3
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011a8a:	1c5a      	adds	r2, r3, #1
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f001 fe1d 	bl	80136e4 <USBD_LL_Start>
 8011aaa:	4603      	mov	r3, r0
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011abc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b084      	sub	sp, #16
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d009      	beq.n	8011af8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	78fa      	ldrb	r2, [r7, #3]
 8011aee:	4611      	mov	r1, r2
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	4798      	blx	r3
 8011af4:	4603      	mov	r3, r0
 8011af6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	460b      	mov	r3, r1
 8011b0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	78fa      	ldrb	r2, [r7, #3]
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	4798      	blx	r3
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d001      	beq.n	8011b2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b084      	sub	sp, #16
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b46:	6839      	ldr	r1, [r7, #0]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f001 f90e 	bl	8012d6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2201      	movs	r2, #1
 8011b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011b6a:	f003 031f 	and.w	r3, r3, #31
 8011b6e:	2b02      	cmp	r3, #2
 8011b70:	d01a      	beq.n	8011ba8 <USBD_LL_SetupStage+0x72>
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d822      	bhi.n	8011bbc <USBD_LL_SetupStage+0x86>
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d002      	beq.n	8011b80 <USBD_LL_SetupStage+0x4a>
 8011b7a:	2b01      	cmp	r3, #1
 8011b7c:	d00a      	beq.n	8011b94 <USBD_LL_SetupStage+0x5e>
 8011b7e:	e01d      	b.n	8011bbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b86:	4619      	mov	r1, r3
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f000 fb65 	bl	8012258 <USBD_StdDevReq>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	73fb      	strb	r3, [r7, #15]
      break;
 8011b92:	e020      	b.n	8011bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 fbcd 	bl	801233c <USBD_StdItfReq>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8011ba6:	e016      	b.n	8011bd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f000 fc2f 	bl	8012414 <USBD_StdEPReq>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8011bba:	e00c      	b.n	8011bd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f001 fdea 	bl	80137a4 <USBD_LL_StallEP>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8011bd4:	bf00      	nop
  }

  return ret;
 8011bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	60f8      	str	r0, [r7, #12]
 8011be8:	460b      	mov	r3, r1
 8011bea:	607a      	str	r2, [r7, #4]
 8011bec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011bf2:	7afb      	ldrb	r3, [r7, #11]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d16e      	bne.n	8011cd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011bfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	f040 8098 	bne.w	8011d3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	689a      	ldr	r2, [r3, #8]
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d913      	bls.n	8011c40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	689a      	ldr	r2, [r3, #8]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	1ad2      	subs	r2, r2, r3
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	68da      	ldr	r2, [r3, #12]
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	689b      	ldr	r3, [r3, #8]
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	bf28      	it	cs
 8011c32:	4613      	movcs	r3, r2
 8011c34:	461a      	mov	r2, r3
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f001 f98a 	bl	8012f52 <USBD_CtlContinueRx>
 8011c3e:	e07d      	b.n	8011d3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c46:	f003 031f 	and.w	r3, r3, #31
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d014      	beq.n	8011c78 <USBD_LL_DataOutStage+0x98>
 8011c4e:	2b02      	cmp	r3, #2
 8011c50:	d81d      	bhi.n	8011c8e <USBD_LL_DataOutStage+0xae>
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d002      	beq.n	8011c5c <USBD_LL_DataOutStage+0x7c>
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d003      	beq.n	8011c62 <USBD_LL_DataOutStage+0x82>
 8011c5a:	e018      	b.n	8011c8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	75bb      	strb	r3, [r7, #22]
            break;
 8011c60:	e018      	b.n	8011c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f000 fa64 	bl	801213a <USBD_CoreFindIF>
 8011c72:	4603      	mov	r3, r0
 8011c74:	75bb      	strb	r3, [r7, #22]
            break;
 8011c76:	e00d      	b.n	8011c94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	4619      	mov	r1, r3
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f000 fa66 	bl	8012154 <USBD_CoreFindEP>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	75bb      	strb	r3, [r7, #22]
            break;
 8011c8c:	e002      	b.n	8011c94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	75bb      	strb	r3, [r7, #22]
            break;
 8011c92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011c94:	7dbb      	ldrb	r3, [r7, #22]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d119      	bne.n	8011cce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d113      	bne.n	8011cce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011ca6:	7dba      	ldrb	r2, [r7, #22]
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	32ae      	adds	r2, #174	; 0xae
 8011cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cb0:	691b      	ldr	r3, [r3, #16]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00b      	beq.n	8011cce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011cb6:	7dba      	ldrb	r2, [r7, #22]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011cbe:	7dba      	ldrb	r2, [r7, #22]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	32ae      	adds	r2, #174	; 0xae
 8011cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011cce:	68f8      	ldr	r0, [r7, #12]
 8011cd0:	f001 f950 	bl	8012f74 <USBD_CtlSendStatus>
 8011cd4:	e032      	b.n	8011d3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	4619      	mov	r1, r3
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f000 fa37 	bl	8012154 <USBD_CoreFindEP>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cea:	7dbb      	ldrb	r3, [r7, #22]
 8011cec:	2bff      	cmp	r3, #255	; 0xff
 8011cee:	d025      	beq.n	8011d3c <USBD_LL_DataOutStage+0x15c>
 8011cf0:	7dbb      	ldrb	r3, [r7, #22]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d122      	bne.n	8011d3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	2b03      	cmp	r3, #3
 8011d00:	d117      	bne.n	8011d32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011d02:	7dba      	ldrb	r2, [r7, #22]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	32ae      	adds	r2, #174	; 0xae
 8011d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00f      	beq.n	8011d32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011d12:	7dba      	ldrb	r2, [r7, #22]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011d1a:	7dba      	ldrb	r2, [r7, #22]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	32ae      	adds	r2, #174	; 0xae
 8011d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d24:	699b      	ldr	r3, [r3, #24]
 8011d26:	7afa      	ldrb	r2, [r7, #11]
 8011d28:	4611      	mov	r1, r2
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	4798      	blx	r3
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	e000      	b.n	8011d3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3718      	adds	r7, #24
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b086      	sub	sp, #24
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	60f8      	str	r0, [r7, #12]
 8011d4e:	460b      	mov	r3, r1
 8011d50:	607a      	str	r2, [r7, #4]
 8011d52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011d54:	7afb      	ldrb	r3, [r7, #11]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d16f      	bne.n	8011e3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	3314      	adds	r3, #20
 8011d5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d15a      	bne.n	8011e20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	689a      	ldr	r2, [r3, #8]
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d914      	bls.n	8011da0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	689a      	ldr	r2, [r3, #8]
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	6879      	ldr	r1, [r7, #4]
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f001 f8b2 	bl	8012ef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d92:	2300      	movs	r3, #0
 8011d94:	2200      	movs	r2, #0
 8011d96:	2100      	movs	r1, #0
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f001 fdad 	bl	80138f8 <USBD_LL_PrepareReceive>
 8011d9e:	e03f      	b.n	8011e20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	689b      	ldr	r3, [r3, #8]
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d11c      	bne.n	8011de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d316      	bcc.n	8011de6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	685a      	ldr	r2, [r3, #4]
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d20f      	bcs.n	8011de6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	2100      	movs	r1, #0
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f001 f893 	bl	8012ef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011dd8:	2300      	movs	r3, #0
 8011dda:	2200      	movs	r2, #0
 8011ddc:	2100      	movs	r1, #0
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f001 fd8a 	bl	80138f8 <USBD_LL_PrepareReceive>
 8011de4:	e01c      	b.n	8011e20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b03      	cmp	r3, #3
 8011df0:	d10f      	bne.n	8011e12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d009      	beq.n	8011e12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	2200      	movs	r2, #0
 8011e02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e0c:	68db      	ldr	r3, [r3, #12]
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e12:	2180      	movs	r1, #128	; 0x80
 8011e14:	68f8      	ldr	r0, [r7, #12]
 8011e16:	f001 fcc5 	bl	80137a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f001 f8bd 	bl	8012f9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d03a      	beq.n	8011ea0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f7ff fe42 	bl	8011ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2200      	movs	r2, #0
 8011e34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011e38:	e032      	b.n	8011ea0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011e3a:	7afb      	ldrb	r3, [r7, #11]
 8011e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	4619      	mov	r1, r3
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f985 	bl	8012154 <USBD_CoreFindEP>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e4e:	7dfb      	ldrb	r3, [r7, #23]
 8011e50:	2bff      	cmp	r3, #255	; 0xff
 8011e52:	d025      	beq.n	8011ea0 <USBD_LL_DataInStage+0x15a>
 8011e54:	7dfb      	ldrb	r3, [r7, #23]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d122      	bne.n	8011ea0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	2b03      	cmp	r3, #3
 8011e64:	d11c      	bne.n	8011ea0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011e66:	7dfa      	ldrb	r2, [r7, #23]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	32ae      	adds	r2, #174	; 0xae
 8011e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e70:	695b      	ldr	r3, [r3, #20]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d014      	beq.n	8011ea0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011e76:	7dfa      	ldrb	r2, [r7, #23]
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011e7e:	7dfa      	ldrb	r2, [r7, #23]
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	32ae      	adds	r2, #174	; 0xae
 8011e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e88:	695b      	ldr	r3, [r3, #20]
 8011e8a:	7afa      	ldrb	r2, [r7, #11]
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	4798      	blx	r3
 8011e92:	4603      	mov	r3, r0
 8011e94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011e96:	7dbb      	ldrb	r3, [r7, #22]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d001      	beq.n	8011ea0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011e9c:	7dbb      	ldrb	r3, [r7, #22]
 8011e9e:	e000      	b.n	8011ea2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3718      	adds	r7, #24
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2201      	movs	r2, #1
 8011eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d014      	beq.n	8011f10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00e      	beq.n	8011f10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	6852      	ldr	r2, [r2, #4]
 8011efe:	b2d2      	uxtb	r2, r2
 8011f00:	4611      	mov	r1, r2
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	4798      	blx	r3
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d001      	beq.n	8011f10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011f0c:	2303      	movs	r3, #3
 8011f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f10:	2340      	movs	r3, #64	; 0x40
 8011f12:	2200      	movs	r2, #0
 8011f14:	2100      	movs	r1, #0
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f001 fbff 	bl	801371a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2201      	movs	r2, #1
 8011f20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2240      	movs	r2, #64	; 0x40
 8011f28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011f2c:	2340      	movs	r3, #64	; 0x40
 8011f2e:	2200      	movs	r2, #0
 8011f30:	2180      	movs	r1, #128	; 0x80
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f001 fbf1 	bl	801371a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2240      	movs	r2, #64	; 0x40
 8011f42:	621a      	str	r2, [r3, #32]

  return ret;
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}

08011f4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011f4e:	b480      	push	{r7}
 8011f50:	b083      	sub	sp, #12
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
 8011f56:	460b      	mov	r3, r1
 8011f58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	78fa      	ldrb	r2, [r7, #3]
 8011f5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011f60:	2300      	movs	r3, #0
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	370c      	adds	r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6c:	4770      	bx	lr

08011f6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011f6e:	b480      	push	{r7}
 8011f70:	b083      	sub	sp, #12
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b04      	cmp	r3, #4
 8011f80:	d006      	beq.n	8011f90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f88:	b2da      	uxtb	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2204      	movs	r2, #4
 8011f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011f98:	2300      	movs	r3, #0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr

08011fa6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011fa6:	b480      	push	{r7}
 8011fa8:	b083      	sub	sp, #12
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	2b04      	cmp	r3, #4
 8011fb8:	d106      	bne.n	8011fc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011fc0:	b2da      	uxtb	r2, r3
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011fc8:	2300      	movs	r3, #0
}
 8011fca:	4618      	mov	r0, r3
 8011fcc:	370c      	adds	r7, #12
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b082      	sub	sp, #8
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d110      	bne.n	801200c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00b      	beq.n	801200c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ffa:	69db      	ldr	r3, [r3, #28]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d005      	beq.n	801200c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012006:	69db      	ldr	r3, [r3, #28]
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801200c:	2300      	movs	r3, #0
}
 801200e:	4618      	mov	r0, r3
 8012010:	3708      	adds	r7, #8
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}

08012016 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012016:	b580      	push	{r7, lr}
 8012018:	b082      	sub	sp, #8
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	460b      	mov	r3, r1
 8012020:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	32ae      	adds	r2, #174	; 0xae
 801202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d101      	bne.n	8012038 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012034:	2303      	movs	r3, #3
 8012036:	e01c      	b.n	8012072 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801203e:	b2db      	uxtb	r3, r3
 8012040:	2b03      	cmp	r3, #3
 8012042:	d115      	bne.n	8012070 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	32ae      	adds	r2, #174	; 0xae
 801204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012052:	6a1b      	ldr	r3, [r3, #32]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d00b      	beq.n	8012070 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	32ae      	adds	r2, #174	; 0xae
 8012062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012066:	6a1b      	ldr	r3, [r3, #32]
 8012068:	78fa      	ldrb	r2, [r7, #3]
 801206a:	4611      	mov	r1, r2
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3708      	adds	r7, #8
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801207a:	b580      	push	{r7, lr}
 801207c:	b082      	sub	sp, #8
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	460b      	mov	r3, r1
 8012084:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	32ae      	adds	r2, #174	; 0xae
 8012090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012098:	2303      	movs	r3, #3
 801209a:	e01c      	b.n	80120d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	2b03      	cmp	r3, #3
 80120a6:	d115      	bne.n	80120d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	32ae      	adds	r2, #174	; 0xae
 80120b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00b      	beq.n	80120d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	32ae      	adds	r2, #174	; 0xae
 80120c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120cc:	78fa      	ldrb	r2, [r7, #3]
 80120ce:	4611      	mov	r1, r2
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80120d4:	2300      	movs	r3, #0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}

080120de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80120de:	b480      	push	{r7}
 80120e0:	b083      	sub	sp, #12
 80120e2:	af00      	add	r7, sp, #0
 80120e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80120e6:	2300      	movs	r3, #0
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80120fc:	2300      	movs	r3, #0
 80120fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00e      	beq.n	8012130 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	6852      	ldr	r2, [r2, #4]
 801211e:	b2d2      	uxtb	r2, r2
 8012120:	4611      	mov	r1, r2
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	4798      	blx	r3
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d001      	beq.n	8012130 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801212c:	2303      	movs	r3, #3
 801212e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012130:	7bfb      	ldrb	r3, [r7, #15]
}
 8012132:	4618      	mov	r0, r3
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}

0801213a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801213a:	b480      	push	{r7}
 801213c:	b083      	sub	sp, #12
 801213e:	af00      	add	r7, sp, #0
 8012140:	6078      	str	r0, [r7, #4]
 8012142:	460b      	mov	r3, r1
 8012144:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012146:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012148:	4618      	mov	r0, r3
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr

08012154 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	460b      	mov	r3, r1
 801215e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012160:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012162:	4618      	mov	r0, r3
 8012164:	370c      	adds	r7, #12
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr

0801216e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b086      	sub	sp, #24
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
 8012176:	460b      	mov	r3, r1
 8012178:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012182:	2300      	movs	r3, #0
 8012184:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	885b      	ldrh	r3, [r3, #2]
 801218a:	b29a      	uxth	r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	781b      	ldrb	r3, [r3, #0]
 8012190:	b29b      	uxth	r3, r3
 8012192:	429a      	cmp	r2, r3
 8012194:	d920      	bls.n	80121d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	b29b      	uxth	r3, r3
 801219c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801219e:	e013      	b.n	80121c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80121a0:	f107 030a 	add.w	r3, r7, #10
 80121a4:	4619      	mov	r1, r3
 80121a6:	6978      	ldr	r0, [r7, #20]
 80121a8:	f000 f81b 	bl	80121e2 <USBD_GetNextDesc>
 80121ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	785b      	ldrb	r3, [r3, #1]
 80121b2:	2b05      	cmp	r3, #5
 80121b4:	d108      	bne.n	80121c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	789b      	ldrb	r3, [r3, #2]
 80121be:	78fa      	ldrb	r2, [r7, #3]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d008      	beq.n	80121d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80121c4:	2300      	movs	r3, #0
 80121c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	885b      	ldrh	r3, [r3, #2]
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	897b      	ldrh	r3, [r7, #10]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d8e5      	bhi.n	80121a0 <USBD_GetEpDesc+0x32>
 80121d4:	e000      	b.n	80121d8 <USBD_GetEpDesc+0x6a>
          break;
 80121d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80121d8:	693b      	ldr	r3, [r7, #16]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}

080121e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80121e2:	b480      	push	{r7}
 80121e4:	b085      	sub	sp, #20
 80121e6:	af00      	add	r7, sp, #0
 80121e8:	6078      	str	r0, [r7, #4]
 80121ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	881a      	ldrh	r2, [r3, #0]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	4413      	add	r3, r2
 80121fc:	b29a      	uxth	r2, r3
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	461a      	mov	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	4413      	add	r3, r2
 801220c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801220e:	68fb      	ldr	r3, [r7, #12]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3714      	adds	r7, #20
 8012214:	46bd      	mov	sp, r7
 8012216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221a:	4770      	bx	lr

0801221c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801221c:	b480      	push	{r7}
 801221e:	b087      	sub	sp, #28
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	3301      	adds	r3, #1
 8012232:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801223a:	8a3b      	ldrh	r3, [r7, #16]
 801223c:	021b      	lsls	r3, r3, #8
 801223e:	b21a      	sxth	r2, r3
 8012240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012244:	4313      	orrs	r3, r2
 8012246:	b21b      	sxth	r3, r3
 8012248:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801224a:	89fb      	ldrh	r3, [r7, #14]
}
 801224c:	4618      	mov	r0, r3
 801224e:	371c      	adds	r7, #28
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b084      	sub	sp, #16
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012262:	2300      	movs	r3, #0
 8012264:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801226e:	2b40      	cmp	r3, #64	; 0x40
 8012270:	d005      	beq.n	801227e <USBD_StdDevReq+0x26>
 8012272:	2b40      	cmp	r3, #64	; 0x40
 8012274:	d857      	bhi.n	8012326 <USBD_StdDevReq+0xce>
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00f      	beq.n	801229a <USBD_StdDevReq+0x42>
 801227a:	2b20      	cmp	r3, #32
 801227c:	d153      	bne.n	8012326 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	32ae      	adds	r2, #174	; 0xae
 8012288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801228c:	689b      	ldr	r3, [r3, #8]
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	4798      	blx	r3
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
      break;
 8012298:	e04a      	b.n	8012330 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	785b      	ldrb	r3, [r3, #1]
 801229e:	2b09      	cmp	r3, #9
 80122a0:	d83b      	bhi.n	801231a <USBD_StdDevReq+0xc2>
 80122a2:	a201      	add	r2, pc, #4	; (adr r2, 80122a8 <USBD_StdDevReq+0x50>)
 80122a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122a8:	080122fd 	.word	0x080122fd
 80122ac:	08012311 	.word	0x08012311
 80122b0:	0801231b 	.word	0x0801231b
 80122b4:	08012307 	.word	0x08012307
 80122b8:	0801231b 	.word	0x0801231b
 80122bc:	080122db 	.word	0x080122db
 80122c0:	080122d1 	.word	0x080122d1
 80122c4:	0801231b 	.word	0x0801231b
 80122c8:	080122f3 	.word	0x080122f3
 80122cc:	080122e5 	.word	0x080122e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 fa3c 	bl	8012750 <USBD_GetDescriptor>
          break;
 80122d8:	e024      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80122da:	6839      	ldr	r1, [r7, #0]
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fba1 	bl	8012a24 <USBD_SetAddress>
          break;
 80122e2:	e01f      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fbe0 	bl	8012aac <USBD_SetConfig>
 80122ec:	4603      	mov	r3, r0
 80122ee:	73fb      	strb	r3, [r7, #15]
          break;
 80122f0:	e018      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80122f2:	6839      	ldr	r1, [r7, #0]
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 fc83 	bl	8012c00 <USBD_GetConfig>
          break;
 80122fa:	e013      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fcb4 	bl	8012c6c <USBD_GetStatus>
          break;
 8012304:	e00e      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 fce3 	bl	8012cd4 <USBD_SetFeature>
          break;
 801230e:	e009      	b.n	8012324 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012310:	6839      	ldr	r1, [r7, #0]
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fd07 	bl	8012d26 <USBD_ClrFeature>
          break;
 8012318:	e004      	b.n	8012324 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801231a:	6839      	ldr	r1, [r7, #0]
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 fd5e 	bl	8012dde <USBD_CtlError>
          break;
 8012322:	bf00      	nop
      }
      break;
 8012324:	e004      	b.n	8012330 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012326:	6839      	ldr	r1, [r7, #0]
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 fd58 	bl	8012dde <USBD_CtlError>
      break;
 801232e:	bf00      	nop
  }

  return ret;
 8012330:	7bfb      	ldrb	r3, [r7, #15]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop

0801233c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012352:	2b40      	cmp	r3, #64	; 0x40
 8012354:	d005      	beq.n	8012362 <USBD_StdItfReq+0x26>
 8012356:	2b40      	cmp	r3, #64	; 0x40
 8012358:	d852      	bhi.n	8012400 <USBD_StdItfReq+0xc4>
 801235a:	2b00      	cmp	r3, #0
 801235c:	d001      	beq.n	8012362 <USBD_StdItfReq+0x26>
 801235e:	2b20      	cmp	r3, #32
 8012360:	d14e      	bne.n	8012400 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012368:	b2db      	uxtb	r3, r3
 801236a:	3b01      	subs	r3, #1
 801236c:	2b02      	cmp	r3, #2
 801236e:	d840      	bhi.n	80123f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	889b      	ldrh	r3, [r3, #4]
 8012374:	b2db      	uxtb	r3, r3
 8012376:	2b01      	cmp	r3, #1
 8012378:	d836      	bhi.n	80123e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	889b      	ldrh	r3, [r3, #4]
 801237e:	b2db      	uxtb	r3, r3
 8012380:	4619      	mov	r1, r3
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f7ff fed9 	bl	801213a <USBD_CoreFindIF>
 8012388:	4603      	mov	r3, r0
 801238a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	2bff      	cmp	r3, #255	; 0xff
 8012390:	d01d      	beq.n	80123ce <USBD_StdItfReq+0x92>
 8012392:	7bbb      	ldrb	r3, [r7, #14]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d11a      	bne.n	80123ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012398:	7bba      	ldrb	r2, [r7, #14]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	32ae      	adds	r2, #174	; 0xae
 801239e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123a2:	689b      	ldr	r3, [r3, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00f      	beq.n	80123c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80123a8:	7bba      	ldrb	r2, [r7, #14]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80123b0:	7bba      	ldrb	r2, [r7, #14]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	32ae      	adds	r2, #174	; 0xae
 80123b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	4798      	blx	r3
 80123c2:	4603      	mov	r3, r0
 80123c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80123c6:	e004      	b.n	80123d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80123c8:	2303      	movs	r3, #3
 80123ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80123cc:	e001      	b.n	80123d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80123ce:	2303      	movs	r3, #3
 80123d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	88db      	ldrh	r3, [r3, #6]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d110      	bne.n	80123fc <USBD_StdItfReq+0xc0>
 80123da:	7bfb      	ldrb	r3, [r7, #15]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d10d      	bne.n	80123fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 fdc7 	bl	8012f74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80123e6:	e009      	b.n	80123fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80123e8:	6839      	ldr	r1, [r7, #0]
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f000 fcf7 	bl	8012dde <USBD_CtlError>
          break;
 80123f0:	e004      	b.n	80123fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f000 fcf2 	bl	8012dde <USBD_CtlError>
          break;
 80123fa:	e000      	b.n	80123fe <USBD_StdItfReq+0xc2>
          break;
 80123fc:	bf00      	nop
      }
      break;
 80123fe:	e004      	b.n	801240a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012400:	6839      	ldr	r1, [r7, #0]
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 fceb 	bl	8012dde <USBD_CtlError>
      break;
 8012408:	bf00      	nop
  }

  return ret;
 801240a:	7bfb      	ldrb	r3, [r7, #15]
}
 801240c:	4618      	mov	r0, r3
 801240e:	3710      	adds	r7, #16
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801241e:	2300      	movs	r3, #0
 8012420:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	889b      	ldrh	r3, [r3, #4]
 8012426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012430:	2b40      	cmp	r3, #64	; 0x40
 8012432:	d007      	beq.n	8012444 <USBD_StdEPReq+0x30>
 8012434:	2b40      	cmp	r3, #64	; 0x40
 8012436:	f200 817f 	bhi.w	8012738 <USBD_StdEPReq+0x324>
 801243a:	2b00      	cmp	r3, #0
 801243c:	d02a      	beq.n	8012494 <USBD_StdEPReq+0x80>
 801243e:	2b20      	cmp	r3, #32
 8012440:	f040 817a 	bne.w	8012738 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012444:	7bbb      	ldrb	r3, [r7, #14]
 8012446:	4619      	mov	r1, r3
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fe83 	bl	8012154 <USBD_CoreFindEP>
 801244e:	4603      	mov	r3, r0
 8012450:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012452:	7b7b      	ldrb	r3, [r7, #13]
 8012454:	2bff      	cmp	r3, #255	; 0xff
 8012456:	f000 8174 	beq.w	8012742 <USBD_StdEPReq+0x32e>
 801245a:	7b7b      	ldrb	r3, [r7, #13]
 801245c:	2b00      	cmp	r3, #0
 801245e:	f040 8170 	bne.w	8012742 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012462:	7b7a      	ldrb	r2, [r7, #13]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801246a:	7b7a      	ldrb	r2, [r7, #13]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	32ae      	adds	r2, #174	; 0xae
 8012470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012474:	689b      	ldr	r3, [r3, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	f000 8163 	beq.w	8012742 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801247c:	7b7a      	ldrb	r2, [r7, #13]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	32ae      	adds	r2, #174	; 0xae
 8012482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	4798      	blx	r3
 801248e:	4603      	mov	r3, r0
 8012490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012492:	e156      	b.n	8012742 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	785b      	ldrb	r3, [r3, #1]
 8012498:	2b03      	cmp	r3, #3
 801249a:	d008      	beq.n	80124ae <USBD_StdEPReq+0x9a>
 801249c:	2b03      	cmp	r3, #3
 801249e:	f300 8145 	bgt.w	801272c <USBD_StdEPReq+0x318>
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f000 809b 	beq.w	80125de <USBD_StdEPReq+0x1ca>
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d03c      	beq.n	8012526 <USBD_StdEPReq+0x112>
 80124ac:	e13e      	b.n	801272c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b02      	cmp	r3, #2
 80124b8:	d002      	beq.n	80124c0 <USBD_StdEPReq+0xac>
 80124ba:	2b03      	cmp	r3, #3
 80124bc:	d016      	beq.n	80124ec <USBD_StdEPReq+0xd8>
 80124be:	e02c      	b.n	801251a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80124c0:	7bbb      	ldrb	r3, [r7, #14]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00d      	beq.n	80124e2 <USBD_StdEPReq+0xce>
 80124c6:	7bbb      	ldrb	r3, [r7, #14]
 80124c8:	2b80      	cmp	r3, #128	; 0x80
 80124ca:	d00a      	beq.n	80124e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80124cc:	7bbb      	ldrb	r3, [r7, #14]
 80124ce:	4619      	mov	r1, r3
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f001 f967 	bl	80137a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80124d6:	2180      	movs	r1, #128	; 0x80
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f001 f963 	bl	80137a4 <USBD_LL_StallEP>
 80124de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80124e0:	e020      	b.n	8012524 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 fc7a 	bl	8012dde <USBD_CtlError>
              break;
 80124ea:	e01b      	b.n	8012524 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	885b      	ldrh	r3, [r3, #2]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10e      	bne.n	8012512 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80124f4:	7bbb      	ldrb	r3, [r7, #14]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00b      	beq.n	8012512 <USBD_StdEPReq+0xfe>
 80124fa:	7bbb      	ldrb	r3, [r7, #14]
 80124fc:	2b80      	cmp	r3, #128	; 0x80
 80124fe:	d008      	beq.n	8012512 <USBD_StdEPReq+0xfe>
 8012500:	683b      	ldr	r3, [r7, #0]
 8012502:	88db      	ldrh	r3, [r3, #6]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d104      	bne.n	8012512 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f001 f949 	bl	80137a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f000 fd2e 	bl	8012f74 <USBD_CtlSendStatus>

              break;
 8012518:	e004      	b.n	8012524 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801251a:	6839      	ldr	r1, [r7, #0]
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f000 fc5e 	bl	8012dde <USBD_CtlError>
              break;
 8012522:	bf00      	nop
          }
          break;
 8012524:	e107      	b.n	8012736 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801252c:	b2db      	uxtb	r3, r3
 801252e:	2b02      	cmp	r3, #2
 8012530:	d002      	beq.n	8012538 <USBD_StdEPReq+0x124>
 8012532:	2b03      	cmp	r3, #3
 8012534:	d016      	beq.n	8012564 <USBD_StdEPReq+0x150>
 8012536:	e04b      	b.n	80125d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012538:	7bbb      	ldrb	r3, [r7, #14]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00d      	beq.n	801255a <USBD_StdEPReq+0x146>
 801253e:	7bbb      	ldrb	r3, [r7, #14]
 8012540:	2b80      	cmp	r3, #128	; 0x80
 8012542:	d00a      	beq.n	801255a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012544:	7bbb      	ldrb	r3, [r7, #14]
 8012546:	4619      	mov	r1, r3
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f001 f92b 	bl	80137a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801254e:	2180      	movs	r1, #128	; 0x80
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f001 f927 	bl	80137a4 <USBD_LL_StallEP>
 8012556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012558:	e040      	b.n	80125dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801255a:	6839      	ldr	r1, [r7, #0]
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f000 fc3e 	bl	8012dde <USBD_CtlError>
              break;
 8012562:	e03b      	b.n	80125dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	885b      	ldrh	r3, [r3, #2]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d136      	bne.n	80125da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801256c:	7bbb      	ldrb	r3, [r7, #14]
 801256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012572:	2b00      	cmp	r3, #0
 8012574:	d004      	beq.n	8012580 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012576:	7bbb      	ldrb	r3, [r7, #14]
 8012578:	4619      	mov	r1, r3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 f931 	bl	80137e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fcf7 	bl	8012f74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012586:	7bbb      	ldrb	r3, [r7, #14]
 8012588:	4619      	mov	r1, r3
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff fde2 	bl	8012154 <USBD_CoreFindEP>
 8012590:	4603      	mov	r3, r0
 8012592:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012594:	7b7b      	ldrb	r3, [r7, #13]
 8012596:	2bff      	cmp	r3, #255	; 0xff
 8012598:	d01f      	beq.n	80125da <USBD_StdEPReq+0x1c6>
 801259a:	7b7b      	ldrb	r3, [r7, #13]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d11c      	bne.n	80125da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80125a0:	7b7a      	ldrb	r2, [r7, #13]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80125a8:	7b7a      	ldrb	r2, [r7, #13]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	32ae      	adds	r2, #174	; 0xae
 80125ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125b2:	689b      	ldr	r3, [r3, #8]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d010      	beq.n	80125da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80125b8:	7b7a      	ldrb	r2, [r7, #13]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	32ae      	adds	r2, #174	; 0xae
 80125be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c2:	689b      	ldr	r3, [r3, #8]
 80125c4:	6839      	ldr	r1, [r7, #0]
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	4798      	blx	r3
 80125ca:	4603      	mov	r3, r0
 80125cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80125ce:	e004      	b.n	80125da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80125d0:	6839      	ldr	r1, [r7, #0]
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f000 fc03 	bl	8012dde <USBD_CtlError>
              break;
 80125d8:	e000      	b.n	80125dc <USBD_StdEPReq+0x1c8>
              break;
 80125da:	bf00      	nop
          }
          break;
 80125dc:	e0ab      	b.n	8012736 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b02      	cmp	r3, #2
 80125e8:	d002      	beq.n	80125f0 <USBD_StdEPReq+0x1dc>
 80125ea:	2b03      	cmp	r3, #3
 80125ec:	d032      	beq.n	8012654 <USBD_StdEPReq+0x240>
 80125ee:	e097      	b.n	8012720 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80125f0:	7bbb      	ldrb	r3, [r7, #14]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d007      	beq.n	8012606 <USBD_StdEPReq+0x1f2>
 80125f6:	7bbb      	ldrb	r3, [r7, #14]
 80125f8:	2b80      	cmp	r3, #128	; 0x80
 80125fa:	d004      	beq.n	8012606 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 fbed 	bl	8012dde <USBD_CtlError>
                break;
 8012604:	e091      	b.n	801272a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801260a:	2b00      	cmp	r3, #0
 801260c:	da0b      	bge.n	8012626 <USBD_StdEPReq+0x212>
 801260e:	7bbb      	ldrb	r3, [r7, #14]
 8012610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012614:	4613      	mov	r3, r2
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	4413      	add	r3, r2
 801261a:	009b      	lsls	r3, r3, #2
 801261c:	3310      	adds	r3, #16
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	4413      	add	r3, r2
 8012622:	3304      	adds	r3, #4
 8012624:	e00b      	b.n	801263e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012626:	7bbb      	ldrb	r3, [r7, #14]
 8012628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801262c:	4613      	mov	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	009b      	lsls	r3, r3, #2
 8012634:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	4413      	add	r3, r2
 801263c:	3304      	adds	r3, #4
 801263e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	2202      	movs	r2, #2
 801264a:	4619      	mov	r1, r3
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fc37 	bl	8012ec0 <USBD_CtlSendData>
              break;
 8012652:	e06a      	b.n	801272a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012658:	2b00      	cmp	r3, #0
 801265a:	da11      	bge.n	8012680 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801265c:	7bbb      	ldrb	r3, [r7, #14]
 801265e:	f003 020f 	and.w	r2, r3, #15
 8012662:	6879      	ldr	r1, [r7, #4]
 8012664:	4613      	mov	r3, r2
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	4413      	add	r3, r2
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	440b      	add	r3, r1
 801266e:	3324      	adds	r3, #36	; 0x24
 8012670:	881b      	ldrh	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d117      	bne.n	80126a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012676:	6839      	ldr	r1, [r7, #0]
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 fbb0 	bl	8012dde <USBD_CtlError>
                  break;
 801267e:	e054      	b.n	801272a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012680:	7bbb      	ldrb	r3, [r7, #14]
 8012682:	f003 020f 	and.w	r2, r3, #15
 8012686:	6879      	ldr	r1, [r7, #4]
 8012688:	4613      	mov	r3, r2
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	4413      	add	r3, r2
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	440b      	add	r3, r1
 8012692:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012696:	881b      	ldrh	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d104      	bne.n	80126a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801269c:	6839      	ldr	r1, [r7, #0]
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 fb9d 	bl	8012dde <USBD_CtlError>
                  break;
 80126a4:	e041      	b.n	801272a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	da0b      	bge.n	80126c6 <USBD_StdEPReq+0x2b2>
 80126ae:	7bbb      	ldrb	r3, [r7, #14]
 80126b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126b4:	4613      	mov	r3, r2
 80126b6:	009b      	lsls	r3, r3, #2
 80126b8:	4413      	add	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	3310      	adds	r3, #16
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	4413      	add	r3, r2
 80126c2:	3304      	adds	r3, #4
 80126c4:	e00b      	b.n	80126de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80126c6:	7bbb      	ldrb	r3, [r7, #14]
 80126c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126cc:	4613      	mov	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	4413      	add	r3, r2
 80126dc:	3304      	adds	r3, #4
 80126de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80126e0:	7bbb      	ldrb	r3, [r7, #14]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d002      	beq.n	80126ec <USBD_StdEPReq+0x2d8>
 80126e6:	7bbb      	ldrb	r3, [r7, #14]
 80126e8:	2b80      	cmp	r3, #128	; 0x80
 80126ea:	d103      	bne.n	80126f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	e00e      	b.n	8012712 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80126f4:	7bbb      	ldrb	r3, [r7, #14]
 80126f6:	4619      	mov	r1, r3
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f001 f891 	bl	8013820 <USBD_LL_IsStallEP>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	d003      	beq.n	801270c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	2201      	movs	r2, #1
 8012708:	601a      	str	r2, [r3, #0]
 801270a:	e002      	b.n	8012712 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	2200      	movs	r2, #0
 8012710:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	2202      	movs	r2, #2
 8012716:	4619      	mov	r1, r3
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fbd1 	bl	8012ec0 <USBD_CtlSendData>
              break;
 801271e:	e004      	b.n	801272a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012720:	6839      	ldr	r1, [r7, #0]
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 fb5b 	bl	8012dde <USBD_CtlError>
              break;
 8012728:	bf00      	nop
          }
          break;
 801272a:	e004      	b.n	8012736 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801272c:	6839      	ldr	r1, [r7, #0]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 fb55 	bl	8012dde <USBD_CtlError>
          break;
 8012734:	bf00      	nop
      }
      break;
 8012736:	e005      	b.n	8012744 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 fb4f 	bl	8012dde <USBD_CtlError>
      break;
 8012740:	e000      	b.n	8012744 <USBD_StdEPReq+0x330>
      break;
 8012742:	bf00      	nop
  }

  return ret;
 8012744:	7bfb      	ldrb	r3, [r7, #15]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3710      	adds	r7, #16
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
	...

08012750 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801275a:	2300      	movs	r3, #0
 801275c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801275e:	2300      	movs	r3, #0
 8012760:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012762:	2300      	movs	r3, #0
 8012764:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	885b      	ldrh	r3, [r3, #2]
 801276a:	0a1b      	lsrs	r3, r3, #8
 801276c:	b29b      	uxth	r3, r3
 801276e:	3b01      	subs	r3, #1
 8012770:	2b06      	cmp	r3, #6
 8012772:	f200 8128 	bhi.w	80129c6 <USBD_GetDescriptor+0x276>
 8012776:	a201      	add	r2, pc, #4	; (adr r2, 801277c <USBD_GetDescriptor+0x2c>)
 8012778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801277c:	08012799 	.word	0x08012799
 8012780:	080127b1 	.word	0x080127b1
 8012784:	080127f1 	.word	0x080127f1
 8012788:	080129c7 	.word	0x080129c7
 801278c:	080129c7 	.word	0x080129c7
 8012790:	08012967 	.word	0x08012967
 8012794:	08012993 	.word	0x08012993
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	7c12      	ldrb	r2, [r2, #16]
 80127a4:	f107 0108 	add.w	r1, r7, #8
 80127a8:	4610      	mov	r0, r2
 80127aa:	4798      	blx	r3
 80127ac:	60f8      	str	r0, [r7, #12]
      break;
 80127ae:	e112      	b.n	80129d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	7c1b      	ldrb	r3, [r3, #16]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d10d      	bne.n	80127d4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127c0:	f107 0208 	add.w	r2, r7, #8
 80127c4:	4610      	mov	r0, r2
 80127c6:	4798      	blx	r3
 80127c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	3301      	adds	r3, #1
 80127ce:	2202      	movs	r2, #2
 80127d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80127d2:	e100      	b.n	80129d6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127dc:	f107 0208 	add.w	r2, r7, #8
 80127e0:	4610      	mov	r0, r2
 80127e2:	4798      	blx	r3
 80127e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	3301      	adds	r3, #1
 80127ea:	2202      	movs	r2, #2
 80127ec:	701a      	strb	r2, [r3, #0]
      break;
 80127ee:	e0f2      	b.n	80129d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	885b      	ldrh	r3, [r3, #2]
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	2b05      	cmp	r3, #5
 80127f8:	f200 80ac 	bhi.w	8012954 <USBD_GetDescriptor+0x204>
 80127fc:	a201      	add	r2, pc, #4	; (adr r2, 8012804 <USBD_GetDescriptor+0xb4>)
 80127fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012802:	bf00      	nop
 8012804:	0801281d 	.word	0x0801281d
 8012808:	08012851 	.word	0x08012851
 801280c:	08012885 	.word	0x08012885
 8012810:	080128b9 	.word	0x080128b9
 8012814:	080128ed 	.word	0x080128ed
 8012818:	08012921 	.word	0x08012921
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d00b      	beq.n	8012840 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	7c12      	ldrb	r2, [r2, #16]
 8012834:	f107 0108 	add.w	r1, r7, #8
 8012838:	4610      	mov	r0, r2
 801283a:	4798      	blx	r3
 801283c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801283e:	e091      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012840:	6839      	ldr	r1, [r7, #0]
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 facb 	bl	8012dde <USBD_CtlError>
            err++;
 8012848:	7afb      	ldrb	r3, [r7, #11]
 801284a:	3301      	adds	r3, #1
 801284c:	72fb      	strb	r3, [r7, #11]
          break;
 801284e:	e089      	b.n	8012964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012856:	689b      	ldr	r3, [r3, #8]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00b      	beq.n	8012874 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012862:	689b      	ldr	r3, [r3, #8]
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	7c12      	ldrb	r2, [r2, #16]
 8012868:	f107 0108 	add.w	r1, r7, #8
 801286c:	4610      	mov	r0, r2
 801286e:	4798      	blx	r3
 8012870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012872:	e077      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012874:	6839      	ldr	r1, [r7, #0]
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fab1 	bl	8012dde <USBD_CtlError>
            err++;
 801287c:	7afb      	ldrb	r3, [r7, #11]
 801287e:	3301      	adds	r3, #1
 8012880:	72fb      	strb	r3, [r7, #11]
          break;
 8012882:	e06f      	b.n	8012964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00b      	beq.n	80128a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012896:	68db      	ldr	r3, [r3, #12]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	7c12      	ldrb	r2, [r2, #16]
 801289c:	f107 0108 	add.w	r1, r7, #8
 80128a0:	4610      	mov	r0, r2
 80128a2:	4798      	blx	r3
 80128a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128a6:	e05d      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128a8:	6839      	ldr	r1, [r7, #0]
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fa97 	bl	8012dde <USBD_CtlError>
            err++;
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	3301      	adds	r3, #1
 80128b4:	72fb      	strb	r3, [r7, #11]
          break;
 80128b6:	e055      	b.n	8012964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00b      	beq.n	80128dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	7c12      	ldrb	r2, [r2, #16]
 80128d0:	f107 0108 	add.w	r1, r7, #8
 80128d4:	4610      	mov	r0, r2
 80128d6:	4798      	blx	r3
 80128d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80128da:	e043      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fa7d 	bl	8012dde <USBD_CtlError>
            err++;
 80128e4:	7afb      	ldrb	r3, [r7, #11]
 80128e6:	3301      	adds	r3, #1
 80128e8:	72fb      	strb	r3, [r7, #11]
          break;
 80128ea:	e03b      	b.n	8012964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128f2:	695b      	ldr	r3, [r3, #20]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d00b      	beq.n	8012910 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128fe:	695b      	ldr	r3, [r3, #20]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	7c12      	ldrb	r2, [r2, #16]
 8012904:	f107 0108 	add.w	r1, r7, #8
 8012908:	4610      	mov	r0, r2
 801290a:	4798      	blx	r3
 801290c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801290e:	e029      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012910:	6839      	ldr	r1, [r7, #0]
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fa63 	bl	8012dde <USBD_CtlError>
            err++;
 8012918:	7afb      	ldrb	r3, [r7, #11]
 801291a:	3301      	adds	r3, #1
 801291c:	72fb      	strb	r3, [r7, #11]
          break;
 801291e:	e021      	b.n	8012964 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012926:	699b      	ldr	r3, [r3, #24]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d00b      	beq.n	8012944 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012932:	699b      	ldr	r3, [r3, #24]
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	7c12      	ldrb	r2, [r2, #16]
 8012938:	f107 0108 	add.w	r1, r7, #8
 801293c:	4610      	mov	r0, r2
 801293e:	4798      	blx	r3
 8012940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012942:	e00f      	b.n	8012964 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012944:	6839      	ldr	r1, [r7, #0]
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 fa49 	bl	8012dde <USBD_CtlError>
            err++;
 801294c:	7afb      	ldrb	r3, [r7, #11]
 801294e:	3301      	adds	r3, #1
 8012950:	72fb      	strb	r3, [r7, #11]
          break;
 8012952:	e007      	b.n	8012964 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012954:	6839      	ldr	r1, [r7, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 fa41 	bl	8012dde <USBD_CtlError>
          err++;
 801295c:	7afb      	ldrb	r3, [r7, #11]
 801295e:	3301      	adds	r3, #1
 8012960:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012962:	bf00      	nop
      }
      break;
 8012964:	e037      	b.n	80129d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	7c1b      	ldrb	r3, [r3, #16]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d109      	bne.n	8012982 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012976:	f107 0208 	add.w	r2, r7, #8
 801297a:	4610      	mov	r0, r2
 801297c:	4798      	blx	r3
 801297e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012980:	e029      	b.n	80129d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012982:	6839      	ldr	r1, [r7, #0]
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f000 fa2a 	bl	8012dde <USBD_CtlError>
        err++;
 801298a:	7afb      	ldrb	r3, [r7, #11]
 801298c:	3301      	adds	r3, #1
 801298e:	72fb      	strb	r3, [r7, #11]
      break;
 8012990:	e021      	b.n	80129d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	7c1b      	ldrb	r3, [r3, #16]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d10d      	bne.n	80129b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129a2:	f107 0208 	add.w	r2, r7, #8
 80129a6:	4610      	mov	r0, r2
 80129a8:	4798      	blx	r3
 80129aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	3301      	adds	r3, #1
 80129b0:	2207      	movs	r2, #7
 80129b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80129b4:	e00f      	b.n	80129d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80129b6:	6839      	ldr	r1, [r7, #0]
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f000 fa10 	bl	8012dde <USBD_CtlError>
        err++;
 80129be:	7afb      	ldrb	r3, [r7, #11]
 80129c0:	3301      	adds	r3, #1
 80129c2:	72fb      	strb	r3, [r7, #11]
      break;
 80129c4:	e007      	b.n	80129d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80129c6:	6839      	ldr	r1, [r7, #0]
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 fa08 	bl	8012dde <USBD_CtlError>
      err++;
 80129ce:	7afb      	ldrb	r3, [r7, #11]
 80129d0:	3301      	adds	r3, #1
 80129d2:	72fb      	strb	r3, [r7, #11]
      break;
 80129d4:	bf00      	nop
  }

  if (err != 0U)
 80129d6:	7afb      	ldrb	r3, [r7, #11]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d11e      	bne.n	8012a1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	88db      	ldrh	r3, [r3, #6]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d016      	beq.n	8012a12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80129e4:	893b      	ldrh	r3, [r7, #8]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00e      	beq.n	8012a08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	88da      	ldrh	r2, [r3, #6]
 80129ee:	893b      	ldrh	r3, [r7, #8]
 80129f0:	4293      	cmp	r3, r2
 80129f2:	bf28      	it	cs
 80129f4:	4613      	movcs	r3, r2
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80129fa:	893b      	ldrh	r3, [r7, #8]
 80129fc:	461a      	mov	r2, r3
 80129fe:	68f9      	ldr	r1, [r7, #12]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 fa5d 	bl	8012ec0 <USBD_CtlSendData>
 8012a06:	e009      	b.n	8012a1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f9e7 	bl	8012dde <USBD_CtlError>
 8012a10:	e004      	b.n	8012a1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 faae 	bl	8012f74 <USBD_CtlSendStatus>
 8012a18:	e000      	b.n	8012a1c <USBD_GetDescriptor+0x2cc>
    return;
 8012a1a:	bf00      	nop
  }
}
 8012a1c:	3710      	adds	r7, #16
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}
 8012a22:	bf00      	nop

08012a24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	889b      	ldrh	r3, [r3, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d131      	bne.n	8012a9a <USBD_SetAddress+0x76>
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	88db      	ldrh	r3, [r3, #6]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d12d      	bne.n	8012a9a <USBD_SetAddress+0x76>
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	885b      	ldrh	r3, [r3, #2]
 8012a42:	2b7f      	cmp	r3, #127	; 0x7f
 8012a44:	d829      	bhi.n	8012a9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	885b      	ldrh	r3, [r3, #2]
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b03      	cmp	r3, #3
 8012a5c:	d104      	bne.n	8012a68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012a5e:	6839      	ldr	r1, [r7, #0]
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 f9bc 	bl	8012dde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a66:	e01d      	b.n	8012aa4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	7bfa      	ldrb	r2, [r7, #15]
 8012a6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012a70:	7bfb      	ldrb	r3, [r7, #15]
 8012a72:	4619      	mov	r1, r3
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 feff 	bl	8013878 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 fa7a 	bl	8012f74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012a80:	7bfb      	ldrb	r3, [r7, #15]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d004      	beq.n	8012a90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2202      	movs	r2, #2
 8012a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a8e:	e009      	b.n	8012aa4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2201      	movs	r2, #1
 8012a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a98:	e004      	b.n	8012aa4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012a9a:	6839      	ldr	r1, [r7, #0]
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f000 f99e 	bl	8012dde <USBD_CtlError>
  }
}
 8012aa2:	bf00      	nop
 8012aa4:	bf00      	nop
 8012aa6:	3710      	adds	r7, #16
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	885b      	ldrh	r3, [r3, #2]
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	4b4e      	ldr	r3, [pc, #312]	; (8012bfc <USBD_SetConfig+0x150>)
 8012ac2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ac4:	4b4d      	ldr	r3, [pc, #308]	; (8012bfc <USBD_SetConfig+0x150>)
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d905      	bls.n	8012ad8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012acc:	6839      	ldr	r1, [r7, #0]
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f000 f985 	bl	8012dde <USBD_CtlError>
    return USBD_FAIL;
 8012ad4:	2303      	movs	r3, #3
 8012ad6:	e08c      	b.n	8012bf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	2b02      	cmp	r3, #2
 8012ae2:	d002      	beq.n	8012aea <USBD_SetConfig+0x3e>
 8012ae4:	2b03      	cmp	r3, #3
 8012ae6:	d029      	beq.n	8012b3c <USBD_SetConfig+0x90>
 8012ae8:	e075      	b.n	8012bd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012aea:	4b44      	ldr	r3, [pc, #272]	; (8012bfc <USBD_SetConfig+0x150>)
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d020      	beq.n	8012b34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012af2:	4b42      	ldr	r3, [pc, #264]	; (8012bfc <USBD_SetConfig+0x150>)
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	461a      	mov	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012afc:	4b3f      	ldr	r3, [pc, #252]	; (8012bfc <USBD_SetConfig+0x150>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	4619      	mov	r1, r3
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7fe ffe1 	bl	8011aca <USBD_SetClassConfig>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012b0c:	7bfb      	ldrb	r3, [r7, #15]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d008      	beq.n	8012b24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012b12:	6839      	ldr	r1, [r7, #0]
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f000 f962 	bl	8012dde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2202      	movs	r2, #2
 8012b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b22:	e065      	b.n	8012bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 fa25 	bl	8012f74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2203      	movs	r2, #3
 8012b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012b32:	e05d      	b.n	8012bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f000 fa1d 	bl	8012f74 <USBD_CtlSendStatus>
      break;
 8012b3a:	e059      	b.n	8012bf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012b3c:	4b2f      	ldr	r3, [pc, #188]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d112      	bne.n	8012b6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2202      	movs	r2, #2
 8012b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012b4c:	4b2b      	ldr	r3, [pc, #172]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	461a      	mov	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b56:	4b29      	ldr	r3, [pc, #164]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f7fe ffd0 	bl	8011b02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 fa06 	bl	8012f74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012b68:	e042      	b.n	8012bf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012b6a:	4b24      	ldr	r3, [pc, #144]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d02a      	beq.n	8012bce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	4619      	mov	r1, r3
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f7fe ffbe 	bl	8011b02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012b86:	4b1d      	ldr	r3, [pc, #116]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012b90:	4b1a      	ldr	r3, [pc, #104]	; (8012bfc <USBD_SetConfig+0x150>)
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	4619      	mov	r1, r3
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fe ff97 	bl	8011aca <USBD_SetClassConfig>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012ba0:	7bfb      	ldrb	r3, [r7, #15]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00f      	beq.n	8012bc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012ba6:	6839      	ldr	r1, [r7, #0]
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 f918 	bl	8012dde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	b2db      	uxtb	r3, r3
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f7fe ffa3 	bl	8011b02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012bc4:	e014      	b.n	8012bf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 f9d4 	bl	8012f74 <USBD_CtlSendStatus>
      break;
 8012bcc:	e010      	b.n	8012bf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 f9d0 	bl	8012f74 <USBD_CtlSendStatus>
      break;
 8012bd4:	e00c      	b.n	8012bf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012bd6:	6839      	ldr	r1, [r7, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f000 f900 	bl	8012dde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012bde:	4b07      	ldr	r3, [pc, #28]	; (8012bfc <USBD_SetConfig+0x150>)
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7fe ff8c 	bl	8011b02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012bea:	2303      	movs	r3, #3
 8012bec:	73fb      	strb	r3, [r7, #15]
      break;
 8012bee:	bf00      	nop
  }

  return ret;
 8012bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	24001330 	.word	0x24001330

08012c00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	88db      	ldrh	r3, [r3, #6]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d004      	beq.n	8012c1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012c12:	6839      	ldr	r1, [r7, #0]
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 f8e2 	bl	8012dde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012c1a:	e023      	b.n	8012c64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	dc02      	bgt.n	8012c2e <USBD_GetConfig+0x2e>
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	dc03      	bgt.n	8012c34 <USBD_GetConfig+0x34>
 8012c2c:	e015      	b.n	8012c5a <USBD_GetConfig+0x5a>
 8012c2e:	2b03      	cmp	r3, #3
 8012c30:	d00b      	beq.n	8012c4a <USBD_GetConfig+0x4a>
 8012c32:	e012      	b.n	8012c5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2200      	movs	r2, #0
 8012c38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	3308      	adds	r3, #8
 8012c3e:	2201      	movs	r2, #1
 8012c40:	4619      	mov	r1, r3
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 f93c 	bl	8012ec0 <USBD_CtlSendData>
        break;
 8012c48:	e00c      	b.n	8012c64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3304      	adds	r3, #4
 8012c4e:	2201      	movs	r2, #1
 8012c50:	4619      	mov	r1, r3
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 f934 	bl	8012ec0 <USBD_CtlSendData>
        break;
 8012c58:	e004      	b.n	8012c64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012c5a:	6839      	ldr	r1, [r7, #0]
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 f8be 	bl	8012dde <USBD_CtlError>
        break;
 8012c62:	bf00      	nop
}
 8012c64:	bf00      	nop
 8012c66:	3708      	adds	r7, #8
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c7c:	b2db      	uxtb	r3, r3
 8012c7e:	3b01      	subs	r3, #1
 8012c80:	2b02      	cmp	r3, #2
 8012c82:	d81e      	bhi.n	8012cc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	88db      	ldrh	r3, [r3, #6]
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d004      	beq.n	8012c96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012c8c:	6839      	ldr	r1, [r7, #0]
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 f8a5 	bl	8012dde <USBD_CtlError>
        break;
 8012c94:	e01a      	b.n	8012ccc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d005      	beq.n	8012cb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	68db      	ldr	r3, [r3, #12]
 8012caa:	f043 0202 	orr.w	r2, r3, #2
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	330c      	adds	r3, #12
 8012cb6:	2202      	movs	r2, #2
 8012cb8:	4619      	mov	r1, r3
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f000 f900 	bl	8012ec0 <USBD_CtlSendData>
      break;
 8012cc0:	e004      	b.n	8012ccc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012cc2:	6839      	ldr	r1, [r7, #0]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f000 f88a 	bl	8012dde <USBD_CtlError>
      break;
 8012cca:	bf00      	nop
  }
}
 8012ccc:	bf00      	nop
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	885b      	ldrh	r3, [r3, #2]
 8012ce2:	2b01      	cmp	r3, #1
 8012ce4:	d107      	bne.n	8012cf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2201      	movs	r2, #1
 8012cea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 f940 	bl	8012f74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012cf4:	e013      	b.n	8012d1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	885b      	ldrh	r3, [r3, #2]
 8012cfa:	2b02      	cmp	r3, #2
 8012cfc:	d10b      	bne.n	8012d16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	889b      	ldrh	r3, [r3, #4]
 8012d02:	0a1b      	lsrs	r3, r3, #8
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	b2da      	uxtb	r2, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 f930 	bl	8012f74 <USBD_CtlSendStatus>
}
 8012d14:	e003      	b.n	8012d1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012d16:	6839      	ldr	r1, [r7, #0]
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f000 f860 	bl	8012dde <USBD_CtlError>
}
 8012d1e:	bf00      	nop
 8012d20:	3708      	adds	r7, #8
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d26:	b580      	push	{r7, lr}
 8012d28:	b082      	sub	sp, #8
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	d80b      	bhi.n	8012d56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	885b      	ldrh	r3, [r3, #2]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d10c      	bne.n	8012d60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 f910 	bl	8012f74 <USBD_CtlSendStatus>
      }
      break;
 8012d54:	e004      	b.n	8012d60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012d56:	6839      	ldr	r1, [r7, #0]
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 f840 	bl	8012dde <USBD_CtlError>
      break;
 8012d5e:	e000      	b.n	8012d62 <USBD_ClrFeature+0x3c>
      break;
 8012d60:	bf00      	nop
  }
}
 8012d62:	bf00      	nop
 8012d64:	3708      	adds	r7, #8
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bd80      	pop	{r7, pc}

08012d6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	b084      	sub	sp, #16
 8012d6e:	af00      	add	r7, sp, #0
 8012d70:	6078      	str	r0, [r7, #4]
 8012d72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	781a      	ldrb	r2, [r3, #0]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	3301      	adds	r3, #1
 8012d84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	781a      	ldrb	r2, [r3, #0]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	3301      	adds	r3, #1
 8012d92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012d94:	68f8      	ldr	r0, [r7, #12]
 8012d96:	f7ff fa41 	bl	801221c <SWAPBYTE>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	3301      	adds	r3, #1
 8012da6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	3301      	adds	r3, #1
 8012dac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012dae:	68f8      	ldr	r0, [r7, #12]
 8012db0:	f7ff fa34 	bl	801221c <SWAPBYTE>
 8012db4:	4603      	mov	r3, r0
 8012db6:	461a      	mov	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f7ff fa27 	bl	801221c <SWAPBYTE>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	80da      	strh	r2, [r3, #6]
}
 8012dd6:	bf00      	nop
 8012dd8:	3710      	adds	r7, #16
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}

08012dde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dde:	b580      	push	{r7, lr}
 8012de0:	b082      	sub	sp, #8
 8012de2:	af00      	add	r7, sp, #0
 8012de4:	6078      	str	r0, [r7, #4]
 8012de6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012de8:	2180      	movs	r1, #128	; 0x80
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 fcda 	bl	80137a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012df0:	2100      	movs	r1, #0
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 fcd6 	bl	80137a4 <USBD_LL_StallEP>
}
 8012df8:	bf00      	nop
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b086      	sub	sp, #24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d036      	beq.n	8012e84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012e1a:	6938      	ldr	r0, [r7, #16]
 8012e1c:	f000 f836 	bl	8012e8c <USBD_GetLen>
 8012e20:	4603      	mov	r3, r0
 8012e22:	3301      	adds	r3, #1
 8012e24:	b29b      	uxth	r3, r3
 8012e26:	005b      	lsls	r3, r3, #1
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012e2e:	7dfb      	ldrb	r3, [r7, #23]
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	4413      	add	r3, r2
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	7812      	ldrb	r2, [r2, #0]
 8012e38:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012e40:	7dfb      	ldrb	r3, [r7, #23]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	4413      	add	r3, r2
 8012e46:	2203      	movs	r2, #3
 8012e48:	701a      	strb	r2, [r3, #0]
  idx++;
 8012e4a:	7dfb      	ldrb	r3, [r7, #23]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012e50:	e013      	b.n	8012e7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012e52:	7dfb      	ldrb	r3, [r7, #23]
 8012e54:	68ba      	ldr	r2, [r7, #8]
 8012e56:	4413      	add	r3, r2
 8012e58:	693a      	ldr	r2, [r7, #16]
 8012e5a:	7812      	ldrb	r2, [r2, #0]
 8012e5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	3301      	adds	r3, #1
 8012e62:	613b      	str	r3, [r7, #16]
    idx++;
 8012e64:	7dfb      	ldrb	r3, [r7, #23]
 8012e66:	3301      	adds	r3, #1
 8012e68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012e6a:	7dfb      	ldrb	r3, [r7, #23]
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	4413      	add	r3, r2
 8012e70:	2200      	movs	r2, #0
 8012e72:	701a      	strb	r2, [r3, #0]
    idx++;
 8012e74:	7dfb      	ldrb	r3, [r7, #23]
 8012e76:	3301      	adds	r3, #1
 8012e78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d1e7      	bne.n	8012e52 <USBD_GetString+0x52>
 8012e82:	e000      	b.n	8012e86 <USBD_GetString+0x86>
    return;
 8012e84:	bf00      	nop
  }
}
 8012e86:	3718      	adds	r7, #24
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012e9c:	e005      	b.n	8012eaa <USBD_GetLen+0x1e>
  {
    len++;
 8012e9e:	7bfb      	ldrb	r3, [r7, #15]
 8012ea0:	3301      	adds	r3, #1
 8012ea2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d1f5      	bne.n	8012e9e <USBD_GetLen+0x12>
  }

  return len;
 8012eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3714      	adds	r7, #20
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	60f8      	str	r0, [r7, #12]
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2202      	movs	r2, #2
 8012ed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f000 fce5 	bl	80138b6 <USBD_LL_Transmit>

  return USBD_OK;
 8012eec:	2300      	movs	r3, #0
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3710      	adds	r7, #16
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b084      	sub	sp, #16
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	60f8      	str	r0, [r7, #12]
 8012efe:	60b9      	str	r1, [r7, #8]
 8012f00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	68ba      	ldr	r2, [r7, #8]
 8012f06:	2100      	movs	r1, #0
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 fcd4 	bl	80138b6 <USBD_LL_Transmit>

  return USBD_OK;
 8012f0e:	2300      	movs	r3, #0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3710      	adds	r7, #16
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}

08012f18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2203      	movs	r2, #3
 8012f28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	2100      	movs	r1, #0
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f000 fcd8 	bl	80138f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b084      	sub	sp, #16
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	60f8      	str	r0, [r7, #12]
 8012f5a:	60b9      	str	r1, [r7, #8]
 8012f5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	68ba      	ldr	r2, [r7, #8]
 8012f62:	2100      	movs	r1, #0
 8012f64:	68f8      	ldr	r0, [r7, #12]
 8012f66:	f000 fcc7 	bl	80138f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012f6a:	2300      	movs	r3, #0
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3710      	adds	r7, #16
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	2204      	movs	r2, #4
 8012f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012f84:	2300      	movs	r3, #0
 8012f86:	2200      	movs	r2, #0
 8012f88:	2100      	movs	r1, #0
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 fc93 	bl	80138b6 <USBD_LL_Transmit>

  return USBD_OK;
 8012f90:	2300      	movs	r3, #0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3708      	adds	r7, #8
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b082      	sub	sp, #8
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2205      	movs	r2, #5
 8012fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012faa:	2300      	movs	r3, #0
 8012fac:	2200      	movs	r2, #0
 8012fae:	2100      	movs	r1, #0
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 fca1 	bl	80138f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012fb6:	2300      	movs	r3, #0
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012fc4:	2201      	movs	r2, #1
 8012fc6:	4913      	ldr	r1, [pc, #76]	; (8013014 <MX_USB_DEVICE_Init+0x54>)
 8012fc8:	4813      	ldr	r0, [pc, #76]	; (8013018 <MX_USB_DEVICE_Init+0x58>)
 8012fca:	f7fe fd01 	bl	80119d0 <USBD_Init>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d001      	beq.n	8012fd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012fd4:	f7ef f88a 	bl	80020ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012fd8:	4910      	ldr	r1, [pc, #64]	; (801301c <MX_USB_DEVICE_Init+0x5c>)
 8012fda:	480f      	ldr	r0, [pc, #60]	; (8013018 <MX_USB_DEVICE_Init+0x58>)
 8012fdc:	f7fe fd28 	bl	8011a30 <USBD_RegisterClass>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d001      	beq.n	8012fea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012fe6:	f7ef f881 	bl	80020ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012fea:	490d      	ldr	r1, [pc, #52]	; (8013020 <MX_USB_DEVICE_Init+0x60>)
 8012fec:	480a      	ldr	r0, [pc, #40]	; (8013018 <MX_USB_DEVICE_Init+0x58>)
 8012fee:	f7fe fc1f 	bl	8011830 <USBD_CDC_RegisterInterface>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d001      	beq.n	8012ffc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012ff8:	f7ef f878 	bl	80020ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012ffc:	4806      	ldr	r0, [pc, #24]	; (8013018 <MX_USB_DEVICE_Init+0x58>)
 8012ffe:	f7fe fd4d 	bl	8011a9c <USBD_Start>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d001      	beq.n	801300c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013008:	f7ef f870 	bl	80020ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801300c:	f7f5 fe3c 	bl	8008c88 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013010:	bf00      	nop
 8013012:	bd80      	pop	{r7, pc}
 8013014:	240000b0 	.word	0x240000b0
 8013018:	24001334 	.word	0x24001334
 801301c:	2400001c 	.word	0x2400001c
 8013020:	2400009c 	.word	0x2400009c

08013024 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8013028:	2200      	movs	r2, #0
 801302a:	4905      	ldr	r1, [pc, #20]	; (8013040 <CDC_Init_HS+0x1c>)
 801302c:	4805      	ldr	r0, [pc, #20]	; (8013044 <CDC_Init_HS+0x20>)
 801302e:	f7fe fc19 	bl	8011864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8013032:	4905      	ldr	r1, [pc, #20]	; (8013048 <CDC_Init_HS+0x24>)
 8013034:	4803      	ldr	r0, [pc, #12]	; (8013044 <CDC_Init_HS+0x20>)
 8013036:	f7fe fc37 	bl	80118a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801303a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801303c:	4618      	mov	r0, r3
 801303e:	bd80      	pop	{r7, pc}
 8013040:	24001e10 	.word	0x24001e10
 8013044:	24001334 	.word	0x24001334
 8013048:	24001610 	.word	0x24001610

0801304c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801304c:	b480      	push	{r7}
 801304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013050:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013052:	4618      	mov	r0, r3
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801305c:	b480      	push	{r7}
 801305e:	b083      	sub	sp, #12
 8013060:	af00      	add	r7, sp, #0
 8013062:	4603      	mov	r3, r0
 8013064:	6039      	str	r1, [r7, #0]
 8013066:	71fb      	strb	r3, [r7, #7]
 8013068:	4613      	mov	r3, r2
 801306a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801306c:	79fb      	ldrb	r3, [r7, #7]
 801306e:	2b23      	cmp	r3, #35	; 0x23
 8013070:	d84a      	bhi.n	8013108 <CDC_Control_HS+0xac>
 8013072:	a201      	add	r2, pc, #4	; (adr r2, 8013078 <CDC_Control_HS+0x1c>)
 8013074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013078:	08013109 	.word	0x08013109
 801307c:	08013109 	.word	0x08013109
 8013080:	08013109 	.word	0x08013109
 8013084:	08013109 	.word	0x08013109
 8013088:	08013109 	.word	0x08013109
 801308c:	08013109 	.word	0x08013109
 8013090:	08013109 	.word	0x08013109
 8013094:	08013109 	.word	0x08013109
 8013098:	08013109 	.word	0x08013109
 801309c:	08013109 	.word	0x08013109
 80130a0:	08013109 	.word	0x08013109
 80130a4:	08013109 	.word	0x08013109
 80130a8:	08013109 	.word	0x08013109
 80130ac:	08013109 	.word	0x08013109
 80130b0:	08013109 	.word	0x08013109
 80130b4:	08013109 	.word	0x08013109
 80130b8:	08013109 	.word	0x08013109
 80130bc:	08013109 	.word	0x08013109
 80130c0:	08013109 	.word	0x08013109
 80130c4:	08013109 	.word	0x08013109
 80130c8:	08013109 	.word	0x08013109
 80130cc:	08013109 	.word	0x08013109
 80130d0:	08013109 	.word	0x08013109
 80130d4:	08013109 	.word	0x08013109
 80130d8:	08013109 	.word	0x08013109
 80130dc:	08013109 	.word	0x08013109
 80130e0:	08013109 	.word	0x08013109
 80130e4:	08013109 	.word	0x08013109
 80130e8:	08013109 	.word	0x08013109
 80130ec:	08013109 	.word	0x08013109
 80130f0:	08013109 	.word	0x08013109
 80130f4:	08013109 	.word	0x08013109
 80130f8:	08013109 	.word	0x08013109
 80130fc:	08013109 	.word	0x08013109
 8013100:	08013109 	.word	0x08013109
 8013104:	08013109 	.word	0x08013109
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013108:	bf00      	nop
  }

  return (USBD_OK);
 801310a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr

08013118 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8013122:	6879      	ldr	r1, [r7, #4]
 8013124:	4805      	ldr	r0, [pc, #20]	; (801313c <CDC_Receive_HS+0x24>)
 8013126:	f7fe fbbf 	bl	80118a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801312a:	4804      	ldr	r0, [pc, #16]	; (801313c <CDC_Receive_HS+0x24>)
 801312c:	f7fe fc1a 	bl	8011964 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013130:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013132:	4618      	mov	r0, r3
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	24001334 	.word	0x24001334

08013140 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	460b      	mov	r3, r1
 801314a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801314c:	2300      	movs	r3, #0
 801314e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8013150:	4b0d      	ldr	r3, [pc, #52]	; (8013188 <CDC_Transmit_HS+0x48>)
 8013152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013156:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8013162:	2301      	movs	r3, #1
 8013164:	e00b      	b.n	801317e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8013166:	887b      	ldrh	r3, [r7, #2]
 8013168:	461a      	mov	r2, r3
 801316a:	6879      	ldr	r1, [r7, #4]
 801316c:	4806      	ldr	r0, [pc, #24]	; (8013188 <CDC_Transmit_HS+0x48>)
 801316e:	f7fe fb79 	bl	8011864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8013172:	4805      	ldr	r0, [pc, #20]	; (8013188 <CDC_Transmit_HS+0x48>)
 8013174:	f7fe fbb6 	bl	80118e4 <USBD_CDC_TransmitPacket>
 8013178:	4603      	mov	r3, r0
 801317a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801317c:	7bfb      	ldrb	r3, [r7, #15]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	24001334 	.word	0x24001334

0801318c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801318c:	b480      	push	{r7}
 801318e:	b087      	sub	sp, #28
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	4613      	mov	r3, r2
 8013198:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801319a:	2300      	movs	r3, #0
 801319c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801319e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	371c      	adds	r7, #28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr
	...

080131b0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	4603      	mov	r3, r0
 80131b8:	6039      	str	r1, [r7, #0]
 80131ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	2212      	movs	r2, #18
 80131c0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80131c2:	4b03      	ldr	r3, [pc, #12]	; (80131d0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	370c      	adds	r7, #12
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr
 80131d0:	240000cc 	.word	0x240000cc

080131d4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	4603      	mov	r3, r0
 80131dc:	6039      	str	r1, [r7, #0]
 80131de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	2204      	movs	r2, #4
 80131e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80131e6:	4b03      	ldr	r3, [pc, #12]	; (80131f4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr
 80131f4:	240000e0 	.word	0x240000e0

080131f8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b082      	sub	sp, #8
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	6039      	str	r1, [r7, #0]
 8013202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013204:	79fb      	ldrb	r3, [r7, #7]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d105      	bne.n	8013216 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801320a:	683a      	ldr	r2, [r7, #0]
 801320c:	4907      	ldr	r1, [pc, #28]	; (801322c <USBD_HS_ProductStrDescriptor+0x34>)
 801320e:	4808      	ldr	r0, [pc, #32]	; (8013230 <USBD_HS_ProductStrDescriptor+0x38>)
 8013210:	f7ff fdf6 	bl	8012e00 <USBD_GetString>
 8013214:	e004      	b.n	8013220 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	4904      	ldr	r1, [pc, #16]	; (801322c <USBD_HS_ProductStrDescriptor+0x34>)
 801321a:	4805      	ldr	r0, [pc, #20]	; (8013230 <USBD_HS_ProductStrDescriptor+0x38>)
 801321c:	f7ff fdf0 	bl	8012e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013220:	4b02      	ldr	r3, [pc, #8]	; (801322c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013222:	4618      	mov	r0, r3
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	24002610 	.word	0x24002610
 8013230:	08014600 	.word	0x08014600

08013234 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	6039      	str	r1, [r7, #0]
 801323e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	4904      	ldr	r1, [pc, #16]	; (8013254 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8013244:	4804      	ldr	r0, [pc, #16]	; (8013258 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8013246:	f7ff fddb 	bl	8012e00 <USBD_GetString>
  return USBD_StrDesc;
 801324a:	4b02      	ldr	r3, [pc, #8]	; (8013254 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801324c:	4618      	mov	r0, r3
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	24002610 	.word	0x24002610
 8013258:	0801461c 	.word	0x0801461c

0801325c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	4603      	mov	r3, r0
 8013264:	6039      	str	r1, [r7, #0]
 8013266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	221a      	movs	r2, #26
 801326c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801326e:	f000 f843 	bl	80132f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013272:	4b02      	ldr	r3, [pc, #8]	; (801327c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8013274:	4618      	mov	r0, r3
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	240000e4 	.word	0x240000e4

08013280 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	4603      	mov	r3, r0
 8013288:	6039      	str	r1, [r7, #0]
 801328a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801328c:	79fb      	ldrb	r3, [r7, #7]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d105      	bne.n	801329e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013292:	683a      	ldr	r2, [r7, #0]
 8013294:	4907      	ldr	r1, [pc, #28]	; (80132b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013296:	4808      	ldr	r0, [pc, #32]	; (80132b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013298:	f7ff fdb2 	bl	8012e00 <USBD_GetString>
 801329c:	e004      	b.n	80132a8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801329e:	683a      	ldr	r2, [r7, #0]
 80132a0:	4904      	ldr	r1, [pc, #16]	; (80132b4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80132a2:	4805      	ldr	r0, [pc, #20]	; (80132b8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80132a4:	f7ff fdac 	bl	8012e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80132a8:	4b02      	ldr	r3, [pc, #8]	; (80132b4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3708      	adds	r7, #8
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	24002610 	.word	0x24002610
 80132b8:	08014620 	.word	0x08014620

080132bc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	4603      	mov	r3, r0
 80132c4:	6039      	str	r1, [r7, #0]
 80132c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80132c8:	79fb      	ldrb	r3, [r7, #7]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d105      	bne.n	80132da <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80132ce:	683a      	ldr	r2, [r7, #0]
 80132d0:	4907      	ldr	r1, [pc, #28]	; (80132f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80132d2:	4808      	ldr	r0, [pc, #32]	; (80132f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80132d4:	f7ff fd94 	bl	8012e00 <USBD_GetString>
 80132d8:	e004      	b.n	80132e4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80132da:	683a      	ldr	r2, [r7, #0]
 80132dc:	4904      	ldr	r1, [pc, #16]	; (80132f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80132de:	4805      	ldr	r0, [pc, #20]	; (80132f4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80132e0:	f7ff fd8e 	bl	8012e00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80132e4:	4b02      	ldr	r3, [pc, #8]	; (80132f0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3708      	adds	r7, #8
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	24002610 	.word	0x24002610
 80132f4:	0801462c 	.word	0x0801462c

080132f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80132fe:	4b0f      	ldr	r3, [pc, #60]	; (801333c <Get_SerialNum+0x44>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013304:	4b0e      	ldr	r3, [pc, #56]	; (8013340 <Get_SerialNum+0x48>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801330a:	4b0e      	ldr	r3, [pc, #56]	; (8013344 <Get_SerialNum+0x4c>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4413      	add	r3, r2
 8013316:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d009      	beq.n	8013332 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801331e:	2208      	movs	r2, #8
 8013320:	4909      	ldr	r1, [pc, #36]	; (8013348 <Get_SerialNum+0x50>)
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f000 f814 	bl	8013350 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013328:	2204      	movs	r2, #4
 801332a:	4908      	ldr	r1, [pc, #32]	; (801334c <Get_SerialNum+0x54>)
 801332c:	68b8      	ldr	r0, [r7, #8]
 801332e:	f000 f80f 	bl	8013350 <IntToUnicode>
  }
}
 8013332:	bf00      	nop
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	1ff1e800 	.word	0x1ff1e800
 8013340:	1ff1e804 	.word	0x1ff1e804
 8013344:	1ff1e808 	.word	0x1ff1e808
 8013348:	240000e6 	.word	0x240000e6
 801334c:	240000f6 	.word	0x240000f6

08013350 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013350:	b480      	push	{r7}
 8013352:	b087      	sub	sp, #28
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	4613      	mov	r3, r2
 801335c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013362:	2300      	movs	r3, #0
 8013364:	75fb      	strb	r3, [r7, #23]
 8013366:	e027      	b.n	80133b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	0f1b      	lsrs	r3, r3, #28
 801336c:	2b09      	cmp	r3, #9
 801336e:	d80b      	bhi.n	8013388 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	0f1b      	lsrs	r3, r3, #28
 8013374:	b2da      	uxtb	r2, r3
 8013376:	7dfb      	ldrb	r3, [r7, #23]
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4619      	mov	r1, r3
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	440b      	add	r3, r1
 8013380:	3230      	adds	r2, #48	; 0x30
 8013382:	b2d2      	uxtb	r2, r2
 8013384:	701a      	strb	r2, [r3, #0]
 8013386:	e00a      	b.n	801339e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	0f1b      	lsrs	r3, r3, #28
 801338c:	b2da      	uxtb	r2, r3
 801338e:	7dfb      	ldrb	r3, [r7, #23]
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	4619      	mov	r1, r3
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	440b      	add	r3, r1
 8013398:	3237      	adds	r2, #55	; 0x37
 801339a:	b2d2      	uxtb	r2, r2
 801339c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	011b      	lsls	r3, r3, #4
 80133a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80133a4:	7dfb      	ldrb	r3, [r7, #23]
 80133a6:	005b      	lsls	r3, r3, #1
 80133a8:	3301      	adds	r3, #1
 80133aa:	68ba      	ldr	r2, [r7, #8]
 80133ac:	4413      	add	r3, r2
 80133ae:	2200      	movs	r2, #0
 80133b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80133b2:	7dfb      	ldrb	r3, [r7, #23]
 80133b4:	3301      	adds	r3, #1
 80133b6:	75fb      	strb	r3, [r7, #23]
 80133b8:	7dfa      	ldrb	r2, [r7, #23]
 80133ba:	79fb      	ldrb	r3, [r7, #7]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d3d3      	bcc.n	8013368 <IntToUnicode+0x18>
  }
}
 80133c0:	bf00      	nop
 80133c2:	bf00      	nop
 80133c4:	371c      	adds	r7, #28
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
	...

080133d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b0b2      	sub	sp, #200	; 0xc8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80133d8:	f107 0310 	add.w	r3, r7, #16
 80133dc:	22b8      	movs	r2, #184	; 0xb8
 80133de:	2100      	movs	r1, #0
 80133e0:	4618      	mov	r0, r3
 80133e2:	f000 fb39 	bl	8013a58 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4a1a      	ldr	r2, [pc, #104]	; (8013454 <HAL_PCD_MspInit+0x84>)
 80133ec:	4293      	cmp	r3, r2
 80133ee:	d12c      	bne.n	801344a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80133f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80133f4:	f04f 0300 	mov.w	r3, #0
 80133f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80133fc:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8013400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013404:	f107 0310 	add.w	r3, r7, #16
 8013408:	4618      	mov	r0, r3
 801340a:	f7f6 fc1d 	bl	8009c48 <HAL_RCCEx_PeriphCLKConfig>
 801340e:	4603      	mov	r3, r0
 8013410:	2b00      	cmp	r3, #0
 8013412:	d001      	beq.n	8013418 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8013414:	f7ee fe6a 	bl	80020ec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013418:	f7f5 fc36 	bl	8008c88 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801341c:	4b0e      	ldr	r3, [pc, #56]	; (8013458 <HAL_PCD_MspInit+0x88>)
 801341e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013422:	4a0d      	ldr	r2, [pc, #52]	; (8013458 <HAL_PCD_MspInit+0x88>)
 8013424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013428:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801342c:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <HAL_PCD_MspInit+0x88>)
 801342e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013436:	60fb      	str	r3, [r7, #12]
 8013438:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801343a:	2200      	movs	r2, #0
 801343c:	2100      	movs	r1, #0
 801343e:	204d      	movs	r0, #77	; 0x4d
 8013440:	f7f1 f9d7 	bl	80047f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013444:	204d      	movs	r0, #77	; 0x4d
 8013446:	f7f1 f9ee 	bl	8004826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801344a:	bf00      	nop
 801344c:	37c8      	adds	r7, #200	; 0xc8
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	40040000 	.word	0x40040000
 8013458:	58024400 	.word	0x58024400

0801345c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013470:	4619      	mov	r1, r3
 8013472:	4610      	mov	r0, r2
 8013474:	f7fe fb5f 	bl	8011b36 <USBD_LL_SetupStage>
}
 8013478:	bf00      	nop
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	460b      	mov	r3, r1
 801348a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013492:	78fa      	ldrb	r2, [r7, #3]
 8013494:	6879      	ldr	r1, [r7, #4]
 8013496:	4613      	mov	r3, r2
 8013498:	00db      	lsls	r3, r3, #3
 801349a:	4413      	add	r3, r2
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	440b      	add	r3, r1
 80134a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	78fb      	ldrb	r3, [r7, #3]
 80134a8:	4619      	mov	r1, r3
 80134aa:	f7fe fb99 	bl	8011be0 <USBD_LL_DataOutStage>
}
 80134ae:	bf00      	nop
 80134b0:	3708      	adds	r7, #8
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}

080134b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b082      	sub	sp, #8
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
 80134be:	460b      	mov	r3, r1
 80134c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80134c8:	78fa      	ldrb	r2, [r7, #3]
 80134ca:	6879      	ldr	r1, [r7, #4]
 80134cc:	4613      	mov	r3, r2
 80134ce:	00db      	lsls	r3, r3, #3
 80134d0:	4413      	add	r3, r2
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	440b      	add	r3, r1
 80134d6:	3348      	adds	r3, #72	; 0x48
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	78fb      	ldrb	r3, [r7, #3]
 80134dc:	4619      	mov	r1, r3
 80134de:	f7fe fc32 	bl	8011d46 <USBD_LL_DataInStage>
}
 80134e2:	bf00      	nop
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b082      	sub	sp, #8
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe fd6c 	bl	8011fd6 <USBD_LL_SOF>
}
 80134fe:	bf00      	nop
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013506:	b580      	push	{r7, lr}
 8013508:	b084      	sub	sp, #16
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801350e:	2301      	movs	r3, #1
 8013510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d102      	bne.n	8013520 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801351a:	2300      	movs	r3, #0
 801351c:	73fb      	strb	r3, [r7, #15]
 801351e:	e008      	b.n	8013532 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	691b      	ldr	r3, [r3, #16]
 8013524:	2b02      	cmp	r3, #2
 8013526:	d102      	bne.n	801352e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013528:	2301      	movs	r3, #1
 801352a:	73fb      	strb	r3, [r7, #15]
 801352c:	e001      	b.n	8013532 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801352e:	f7ee fddd 	bl	80020ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013538:	7bfa      	ldrb	r2, [r7, #15]
 801353a:	4611      	mov	r1, r2
 801353c:	4618      	mov	r0, r3
 801353e:	f7fe fd06 	bl	8011f4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013548:	4618      	mov	r0, r3
 801354a:	f7fe fcae 	bl	8011eaa <USBD_LL_Reset>
}
 801354e:	bf00      	nop
 8013550:	3710      	adds	r7, #16
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
	...

08013558 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013566:	4618      	mov	r0, r3
 8013568:	f7fe fd01 	bl	8011f6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	6812      	ldr	r2, [r2, #0]
 801357a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801357e:	f043 0301 	orr.w	r3, r3, #1
 8013582:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a1b      	ldr	r3, [r3, #32]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d005      	beq.n	8013598 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801358c:	4b04      	ldr	r3, [pc, #16]	; (80135a0 <HAL_PCD_SuspendCallback+0x48>)
 801358e:	691b      	ldr	r3, [r3, #16]
 8013590:	4a03      	ldr	r2, [pc, #12]	; (80135a0 <HAL_PCD_SuspendCallback+0x48>)
 8013592:	f043 0306 	orr.w	r3, r3, #6
 8013596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013598:	bf00      	nop
 801359a:	3708      	adds	r7, #8
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	e000ed00 	.word	0xe000ed00

080135a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fe fcf7 	bl	8011fa6 <USBD_LL_Resume>
}
 80135b8:	bf00      	nop
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	460b      	mov	r3, r1
 80135ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135d2:	78fa      	ldrb	r2, [r7, #3]
 80135d4:	4611      	mov	r1, r2
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7fe fd4f 	bl	801207a <USBD_LL_IsoOUTIncomplete>
}
 80135dc:	bf00      	nop
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	460b      	mov	r3, r1
 80135ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135f6:	78fa      	ldrb	r2, [r7, #3]
 80135f8:	4611      	mov	r1, r2
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7fe fd0b 	bl	8012016 <USBD_LL_IsoINIncomplete>
}
 8013600:	bf00      	nop
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b082      	sub	sp, #8
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013616:	4618      	mov	r0, r3
 8013618:	f7fe fd61 	bl	80120de <USBD_LL_DevConnected>
}
 801361c:	bf00      	nop
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}

08013624 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b082      	sub	sp, #8
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013632:	4618      	mov	r0, r3
 8013634:	f7fe fd5e 	bl	80120f4 <USBD_LL_DevDisconnected>
}
 8013638:	bf00      	nop
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d140      	bne.n	80136d2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013650:	4a22      	ldr	r2, [pc, #136]	; (80136dc <USBD_LL_Init+0x9c>)
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	4a20      	ldr	r2, [pc, #128]	; (80136dc <USBD_LL_Init+0x9c>)
 801365c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013660:	4b1e      	ldr	r3, [pc, #120]	; (80136dc <USBD_LL_Init+0x9c>)
 8013662:	4a1f      	ldr	r2, [pc, #124]	; (80136e0 <USBD_LL_Init+0xa0>)
 8013664:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013666:	4b1d      	ldr	r3, [pc, #116]	; (80136dc <USBD_LL_Init+0x9c>)
 8013668:	2209      	movs	r2, #9
 801366a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801366c:	4b1b      	ldr	r3, [pc, #108]	; (80136dc <USBD_LL_Init+0x9c>)
 801366e:	2202      	movs	r2, #2
 8013670:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013672:	4b1a      	ldr	r3, [pc, #104]	; (80136dc <USBD_LL_Init+0x9c>)
 8013674:	2200      	movs	r2, #0
 8013676:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013678:	4b18      	ldr	r3, [pc, #96]	; (80136dc <USBD_LL_Init+0x9c>)
 801367a:	2202      	movs	r2, #2
 801367c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801367e:	4b17      	ldr	r3, [pc, #92]	; (80136dc <USBD_LL_Init+0x9c>)
 8013680:	2200      	movs	r2, #0
 8013682:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013684:	4b15      	ldr	r3, [pc, #84]	; (80136dc <USBD_LL_Init+0x9c>)
 8013686:	2200      	movs	r2, #0
 8013688:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801368a:	4b14      	ldr	r3, [pc, #80]	; (80136dc <USBD_LL_Init+0x9c>)
 801368c:	2200      	movs	r2, #0
 801368e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8013690:	4b12      	ldr	r3, [pc, #72]	; (80136dc <USBD_LL_Init+0x9c>)
 8013692:	2200      	movs	r2, #0
 8013694:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013696:	4b11      	ldr	r3, [pc, #68]	; (80136dc <USBD_LL_Init+0x9c>)
 8013698:	2200      	movs	r2, #0
 801369a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801369c:	4b0f      	ldr	r3, [pc, #60]	; (80136dc <USBD_LL_Init+0x9c>)
 801369e:	2200      	movs	r2, #0
 80136a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80136a2:	480e      	ldr	r0, [pc, #56]	; (80136dc <USBD_LL_Init+0x9c>)
 80136a4:	f7f3 fffd 	bl	80076a2 <HAL_PCD_Init>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d001      	beq.n	80136b2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80136ae:	f7ee fd1d 	bl	80020ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80136b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80136b6:	4809      	ldr	r0, [pc, #36]	; (80136dc <USBD_LL_Init+0x9c>)
 80136b8:	f7f5 fa6b 	bl	8008b92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80136bc:	2280      	movs	r2, #128	; 0x80
 80136be:	2100      	movs	r1, #0
 80136c0:	4806      	ldr	r0, [pc, #24]	; (80136dc <USBD_LL_Init+0x9c>)
 80136c2:	f7f5 fa1f 	bl	8008b04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80136c6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80136ca:	2101      	movs	r1, #1
 80136cc:	4803      	ldr	r0, [pc, #12]	; (80136dc <USBD_LL_Init+0x9c>)
 80136ce:	f7f5 fa19 	bl	8008b04 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80136d2:	2300      	movs	r3, #0
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	24002810 	.word	0x24002810
 80136e0:	40040000 	.word	0x40040000

080136e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136ec:	2300      	movs	r3, #0
 80136ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f4 f8f5 	bl	80078ea <HAL_PCD_Start>
 8013700:	4603      	mov	r3, r0
 8013702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013704:	7bfb      	ldrb	r3, [r7, #15]
 8013706:	4618      	mov	r0, r3
 8013708:	f000 f942 	bl	8013990 <USBD_Get_USB_Status>
 801370c:	4603      	mov	r3, r0
 801370e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013710:	7bbb      	ldrb	r3, [r7, #14]
}
 8013712:	4618      	mov	r0, r3
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b084      	sub	sp, #16
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	4608      	mov	r0, r1
 8013724:	4611      	mov	r1, r2
 8013726:	461a      	mov	r2, r3
 8013728:	4603      	mov	r3, r0
 801372a:	70fb      	strb	r3, [r7, #3]
 801372c:	460b      	mov	r3, r1
 801372e:	70bb      	strb	r3, [r7, #2]
 8013730:	4613      	mov	r3, r2
 8013732:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013734:	2300      	movs	r3, #0
 8013736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013738:	2300      	movs	r3, #0
 801373a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013742:	78bb      	ldrb	r3, [r7, #2]
 8013744:	883a      	ldrh	r2, [r7, #0]
 8013746:	78f9      	ldrb	r1, [r7, #3]
 8013748:	f7f4 fdf5 	bl	8008336 <HAL_PCD_EP_Open>
 801374c:	4603      	mov	r3, r0
 801374e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013750:	7bfb      	ldrb	r3, [r7, #15]
 8013752:	4618      	mov	r0, r3
 8013754:	f000 f91c 	bl	8013990 <USBD_Get_USB_Status>
 8013758:	4603      	mov	r3, r0
 801375a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801375c:	7bbb      	ldrb	r3, [r7, #14]
}
 801375e:	4618      	mov	r0, r3
 8013760:	3710      	adds	r7, #16
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013766:	b580      	push	{r7, lr}
 8013768:	b084      	sub	sp, #16
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
 801376e:	460b      	mov	r3, r1
 8013770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013772:	2300      	movs	r3, #0
 8013774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013776:	2300      	movs	r3, #0
 8013778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013780:	78fa      	ldrb	r2, [r7, #3]
 8013782:	4611      	mov	r1, r2
 8013784:	4618      	mov	r0, r3
 8013786:	f7f4 fe3e 	bl	8008406 <HAL_PCD_EP_Close>
 801378a:	4603      	mov	r3, r0
 801378c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801378e:	7bfb      	ldrb	r3, [r7, #15]
 8013790:	4618      	mov	r0, r3
 8013792:	f000 f8fd 	bl	8013990 <USBD_Get_USB_Status>
 8013796:	4603      	mov	r3, r0
 8013798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801379a:	7bbb      	ldrb	r3, [r7, #14]
}
 801379c:	4618      	mov	r0, r3
 801379e:	3710      	adds	r7, #16
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
 80137ac:	460b      	mov	r3, r1
 80137ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137b0:	2300      	movs	r3, #0
 80137b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137b4:	2300      	movs	r3, #0
 80137b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80137be:	78fa      	ldrb	r2, [r7, #3]
 80137c0:	4611      	mov	r1, r2
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f4 fef8 	bl	80085b8 <HAL_PCD_EP_SetStall>
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f000 f8de 	bl	8013990 <USBD_Get_USB_Status>
 80137d4:	4603      	mov	r3, r0
 80137d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}

080137e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137e2:	b580      	push	{r7, lr}
 80137e4:	b084      	sub	sp, #16
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	6078      	str	r0, [r7, #4]
 80137ea:	460b      	mov	r3, r1
 80137ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137ee:	2300      	movs	r3, #0
 80137f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137f2:	2300      	movs	r3, #0
 80137f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80137fc:	78fa      	ldrb	r2, [r7, #3]
 80137fe:	4611      	mov	r1, r2
 8013800:	4618      	mov	r0, r3
 8013802:	f7f4 ff3d 	bl	8008680 <HAL_PCD_EP_ClrStall>
 8013806:	4603      	mov	r3, r0
 8013808:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801380a:	7bfb      	ldrb	r3, [r7, #15]
 801380c:	4618      	mov	r0, r3
 801380e:	f000 f8bf 	bl	8013990 <USBD_Get_USB_Status>
 8013812:	4603      	mov	r3, r0
 8013814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013816:	7bbb      	ldrb	r3, [r7, #14]
}
 8013818:	4618      	mov	r0, r3
 801381a:	3710      	adds	r7, #16
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013820:	b480      	push	{r7}
 8013822:	b085      	sub	sp, #20
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013832:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013838:	2b00      	cmp	r3, #0
 801383a:	da0b      	bge.n	8013854 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801383c:	78fb      	ldrb	r3, [r7, #3]
 801383e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013842:	68f9      	ldr	r1, [r7, #12]
 8013844:	4613      	mov	r3, r2
 8013846:	00db      	lsls	r3, r3, #3
 8013848:	4413      	add	r3, r2
 801384a:	009b      	lsls	r3, r3, #2
 801384c:	440b      	add	r3, r1
 801384e:	333e      	adds	r3, #62	; 0x3e
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	e00b      	b.n	801386c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013854:	78fb      	ldrb	r3, [r7, #3]
 8013856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801385a:	68f9      	ldr	r1, [r7, #12]
 801385c:	4613      	mov	r3, r2
 801385e:	00db      	lsls	r3, r3, #3
 8013860:	4413      	add	r3, r2
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	440b      	add	r3, r1
 8013866:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801386a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801386c:	4618      	mov	r0, r3
 801386e:	3714      	adds	r7, #20
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013888:	2300      	movs	r3, #0
 801388a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013892:	78fa      	ldrb	r2, [r7, #3]
 8013894:	4611      	mov	r1, r2
 8013896:	4618      	mov	r0, r3
 8013898:	f7f4 fd28 	bl	80082ec <HAL_PCD_SetAddress>
 801389c:	4603      	mov	r3, r0
 801389e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
 80138a2:	4618      	mov	r0, r3
 80138a4:	f000 f874 	bl	8013990 <USBD_Get_USB_Status>
 80138a8:	4603      	mov	r3, r0
 80138aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}

080138b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b086      	sub	sp, #24
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	60f8      	str	r0, [r7, #12]
 80138be:	607a      	str	r2, [r7, #4]
 80138c0:	603b      	str	r3, [r7, #0]
 80138c2:	460b      	mov	r3, r1
 80138c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c6:	2300      	movs	r3, #0
 80138c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138ca:	2300      	movs	r3, #0
 80138cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80138d4:	7af9      	ldrb	r1, [r7, #11]
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	f7f4 fe32 	bl	8008542 <HAL_PCD_EP_Transmit>
 80138de:	4603      	mov	r3, r0
 80138e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138e2:	7dfb      	ldrb	r3, [r7, #23]
 80138e4:	4618      	mov	r0, r3
 80138e6:	f000 f853 	bl	8013990 <USBD_Get_USB_Status>
 80138ea:	4603      	mov	r3, r0
 80138ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80138ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3718      	adds	r7, #24
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b086      	sub	sp, #24
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	607a      	str	r2, [r7, #4]
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	460b      	mov	r3, r1
 8013906:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013908:	2300      	movs	r3, #0
 801390a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801390c:	2300      	movs	r3, #0
 801390e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013916:	7af9      	ldrb	r1, [r7, #11]
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	687a      	ldr	r2, [r7, #4]
 801391c:	f7f4 fdbd 	bl	800849a <HAL_PCD_EP_Receive>
 8013920:	4603      	mov	r3, r0
 8013922:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013924:	7dfb      	ldrb	r3, [r7, #23]
 8013926:	4618      	mov	r0, r3
 8013928:	f000 f832 	bl	8013990 <USBD_Get_USB_Status>
 801392c:	4603      	mov	r3, r0
 801392e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013930:	7dbb      	ldrb	r3, [r7, #22]
}
 8013932:	4618      	mov	r0, r3
 8013934:	3718      	adds	r7, #24
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b082      	sub	sp, #8
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
 8013942:	460b      	mov	r3, r1
 8013944:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801394c:	78fa      	ldrb	r2, [r7, #3]
 801394e:	4611      	mov	r1, r2
 8013950:	4618      	mov	r0, r3
 8013952:	f7f4 fdde 	bl	8008512 <HAL_PCD_EP_GetRxCount>
 8013956:	4603      	mov	r3, r0
}
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013968:	4b03      	ldr	r3, [pc, #12]	; (8013978 <USBD_static_malloc+0x18>)
}
 801396a:	4618      	mov	r0, r3
 801396c:	370c      	adds	r7, #12
 801396e:	46bd      	mov	sp, r7
 8013970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013974:	4770      	bx	lr
 8013976:	bf00      	nop
 8013978:	24002d1c 	.word	0x24002d1c

0801397c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013984:	bf00      	nop
 8013986:	370c      	adds	r7, #12
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr

08013990 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013990:	b480      	push	{r7}
 8013992:	b085      	sub	sp, #20
 8013994:	af00      	add	r7, sp, #0
 8013996:	4603      	mov	r3, r0
 8013998:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801399a:	2300      	movs	r3, #0
 801399c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801399e:	79fb      	ldrb	r3, [r7, #7]
 80139a0:	2b03      	cmp	r3, #3
 80139a2:	d817      	bhi.n	80139d4 <USBD_Get_USB_Status+0x44>
 80139a4:	a201      	add	r2, pc, #4	; (adr r2, 80139ac <USBD_Get_USB_Status+0x1c>)
 80139a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139aa:	bf00      	nop
 80139ac:	080139bd 	.word	0x080139bd
 80139b0:	080139c3 	.word	0x080139c3
 80139b4:	080139c9 	.word	0x080139c9
 80139b8:	080139cf 	.word	0x080139cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80139bc:	2300      	movs	r3, #0
 80139be:	73fb      	strb	r3, [r7, #15]
    break;
 80139c0:	e00b      	b.n	80139da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80139c2:	2303      	movs	r3, #3
 80139c4:	73fb      	strb	r3, [r7, #15]
    break;
 80139c6:	e008      	b.n	80139da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80139c8:	2301      	movs	r3, #1
 80139ca:	73fb      	strb	r3, [r7, #15]
    break;
 80139cc:	e005      	b.n	80139da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80139ce:	2303      	movs	r3, #3
 80139d0:	73fb      	strb	r3, [r7, #15]
    break;
 80139d2:	e002      	b.n	80139da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80139d4:	2303      	movs	r3, #3
 80139d6:	73fb      	strb	r3, [r7, #15]
    break;
 80139d8:	bf00      	nop
  }
  return usb_status;
 80139da:	7bfb      	ldrb	r3, [r7, #15]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3714      	adds	r7, #20
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <__errno>:
 80139e8:	4b01      	ldr	r3, [pc, #4]	; (80139f0 <__errno+0x8>)
 80139ea:	6818      	ldr	r0, [r3, #0]
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	24000100 	.word	0x24000100

080139f4 <__libc_init_array>:
 80139f4:	b570      	push	{r4, r5, r6, lr}
 80139f6:	4d0d      	ldr	r5, [pc, #52]	; (8013a2c <__libc_init_array+0x38>)
 80139f8:	4c0d      	ldr	r4, [pc, #52]	; (8013a30 <__libc_init_array+0x3c>)
 80139fa:	1b64      	subs	r4, r4, r5
 80139fc:	10a4      	asrs	r4, r4, #2
 80139fe:	2600      	movs	r6, #0
 8013a00:	42a6      	cmp	r6, r4
 8013a02:	d109      	bne.n	8013a18 <__libc_init_array+0x24>
 8013a04:	4d0b      	ldr	r5, [pc, #44]	; (8013a34 <__libc_init_array+0x40>)
 8013a06:	4c0c      	ldr	r4, [pc, #48]	; (8013a38 <__libc_init_array+0x44>)
 8013a08:	f000 fdc4 	bl	8014594 <_init>
 8013a0c:	1b64      	subs	r4, r4, r5
 8013a0e:	10a4      	asrs	r4, r4, #2
 8013a10:	2600      	movs	r6, #0
 8013a12:	42a6      	cmp	r6, r4
 8013a14:	d105      	bne.n	8013a22 <__libc_init_array+0x2e>
 8013a16:	bd70      	pop	{r4, r5, r6, pc}
 8013a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a1c:	4798      	blx	r3
 8013a1e:	3601      	adds	r6, #1
 8013a20:	e7ee      	b.n	8013a00 <__libc_init_array+0xc>
 8013a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a26:	4798      	blx	r3
 8013a28:	3601      	adds	r6, #1
 8013a2a:	e7f2      	b.n	8013a12 <__libc_init_array+0x1e>
 8013a2c:	08014770 	.word	0x08014770
 8013a30:	08014770 	.word	0x08014770
 8013a34:	08014770 	.word	0x08014770
 8013a38:	08014774 	.word	0x08014774

08013a3c <memcpy>:
 8013a3c:	440a      	add	r2, r1
 8013a3e:	4291      	cmp	r1, r2
 8013a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8013a44:	d100      	bne.n	8013a48 <memcpy+0xc>
 8013a46:	4770      	bx	lr
 8013a48:	b510      	push	{r4, lr}
 8013a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a52:	4291      	cmp	r1, r2
 8013a54:	d1f9      	bne.n	8013a4a <memcpy+0xe>
 8013a56:	bd10      	pop	{r4, pc}

08013a58 <memset>:
 8013a58:	4402      	add	r2, r0
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d100      	bne.n	8013a62 <memset+0xa>
 8013a60:	4770      	bx	lr
 8013a62:	f803 1b01 	strb.w	r1, [r3], #1
 8013a66:	e7f9      	b.n	8013a5c <memset+0x4>

08013a68 <siprintf>:
 8013a68:	b40e      	push	{r1, r2, r3}
 8013a6a:	b500      	push	{lr}
 8013a6c:	b09c      	sub	sp, #112	; 0x70
 8013a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8013a70:	9002      	str	r0, [sp, #8]
 8013a72:	9006      	str	r0, [sp, #24]
 8013a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a78:	4809      	ldr	r0, [pc, #36]	; (8013aa0 <siprintf+0x38>)
 8013a7a:	9107      	str	r1, [sp, #28]
 8013a7c:	9104      	str	r1, [sp, #16]
 8013a7e:	4909      	ldr	r1, [pc, #36]	; (8013aa4 <siprintf+0x3c>)
 8013a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a84:	9105      	str	r1, [sp, #20]
 8013a86:	6800      	ldr	r0, [r0, #0]
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	a902      	add	r1, sp, #8
 8013a8c:	f000 f868 	bl	8013b60 <_svfiprintf_r>
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	2200      	movs	r2, #0
 8013a94:	701a      	strb	r2, [r3, #0]
 8013a96:	b01c      	add	sp, #112	; 0x70
 8013a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a9c:	b003      	add	sp, #12
 8013a9e:	4770      	bx	lr
 8013aa0:	24000100 	.word	0x24000100
 8013aa4:	ffff0208 	.word	0xffff0208

08013aa8 <__ssputs_r>:
 8013aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aac:	688e      	ldr	r6, [r1, #8]
 8013aae:	429e      	cmp	r6, r3
 8013ab0:	4682      	mov	sl, r0
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	4690      	mov	r8, r2
 8013ab6:	461f      	mov	r7, r3
 8013ab8:	d838      	bhi.n	8013b2c <__ssputs_r+0x84>
 8013aba:	898a      	ldrh	r2, [r1, #12]
 8013abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ac0:	d032      	beq.n	8013b28 <__ssputs_r+0x80>
 8013ac2:	6825      	ldr	r5, [r4, #0]
 8013ac4:	6909      	ldr	r1, [r1, #16]
 8013ac6:	eba5 0901 	sub.w	r9, r5, r1
 8013aca:	6965      	ldr	r5, [r4, #20]
 8013acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	444b      	add	r3, r9
 8013ad8:	106d      	asrs	r5, r5, #1
 8013ada:	429d      	cmp	r5, r3
 8013adc:	bf38      	it	cc
 8013ade:	461d      	movcc	r5, r3
 8013ae0:	0553      	lsls	r3, r2, #21
 8013ae2:	d531      	bpl.n	8013b48 <__ssputs_r+0xa0>
 8013ae4:	4629      	mov	r1, r5
 8013ae6:	f000 fb55 	bl	8014194 <_malloc_r>
 8013aea:	4606      	mov	r6, r0
 8013aec:	b950      	cbnz	r0, 8013b04 <__ssputs_r+0x5c>
 8013aee:	230c      	movs	r3, #12
 8013af0:	f8ca 3000 	str.w	r3, [sl]
 8013af4:	89a3      	ldrh	r3, [r4, #12]
 8013af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013afa:	81a3      	strh	r3, [r4, #12]
 8013afc:	f04f 30ff 	mov.w	r0, #4294967295
 8013b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b04:	6921      	ldr	r1, [r4, #16]
 8013b06:	464a      	mov	r2, r9
 8013b08:	f7ff ff98 	bl	8013a3c <memcpy>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b16:	81a3      	strh	r3, [r4, #12]
 8013b18:	6126      	str	r6, [r4, #16]
 8013b1a:	6165      	str	r5, [r4, #20]
 8013b1c:	444e      	add	r6, r9
 8013b1e:	eba5 0509 	sub.w	r5, r5, r9
 8013b22:	6026      	str	r6, [r4, #0]
 8013b24:	60a5      	str	r5, [r4, #8]
 8013b26:	463e      	mov	r6, r7
 8013b28:	42be      	cmp	r6, r7
 8013b2a:	d900      	bls.n	8013b2e <__ssputs_r+0x86>
 8013b2c:	463e      	mov	r6, r7
 8013b2e:	6820      	ldr	r0, [r4, #0]
 8013b30:	4632      	mov	r2, r6
 8013b32:	4641      	mov	r1, r8
 8013b34:	f000 faa8 	bl	8014088 <memmove>
 8013b38:	68a3      	ldr	r3, [r4, #8]
 8013b3a:	1b9b      	subs	r3, r3, r6
 8013b3c:	60a3      	str	r3, [r4, #8]
 8013b3e:	6823      	ldr	r3, [r4, #0]
 8013b40:	4433      	add	r3, r6
 8013b42:	6023      	str	r3, [r4, #0]
 8013b44:	2000      	movs	r0, #0
 8013b46:	e7db      	b.n	8013b00 <__ssputs_r+0x58>
 8013b48:	462a      	mov	r2, r5
 8013b4a:	f000 fb97 	bl	801427c <_realloc_r>
 8013b4e:	4606      	mov	r6, r0
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d1e1      	bne.n	8013b18 <__ssputs_r+0x70>
 8013b54:	6921      	ldr	r1, [r4, #16]
 8013b56:	4650      	mov	r0, sl
 8013b58:	f000 fab0 	bl	80140bc <_free_r>
 8013b5c:	e7c7      	b.n	8013aee <__ssputs_r+0x46>
	...

08013b60 <_svfiprintf_r>:
 8013b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	4698      	mov	r8, r3
 8013b66:	898b      	ldrh	r3, [r1, #12]
 8013b68:	061b      	lsls	r3, r3, #24
 8013b6a:	b09d      	sub	sp, #116	; 0x74
 8013b6c:	4607      	mov	r7, r0
 8013b6e:	460d      	mov	r5, r1
 8013b70:	4614      	mov	r4, r2
 8013b72:	d50e      	bpl.n	8013b92 <_svfiprintf_r+0x32>
 8013b74:	690b      	ldr	r3, [r1, #16]
 8013b76:	b963      	cbnz	r3, 8013b92 <_svfiprintf_r+0x32>
 8013b78:	2140      	movs	r1, #64	; 0x40
 8013b7a:	f000 fb0b 	bl	8014194 <_malloc_r>
 8013b7e:	6028      	str	r0, [r5, #0]
 8013b80:	6128      	str	r0, [r5, #16]
 8013b82:	b920      	cbnz	r0, 8013b8e <_svfiprintf_r+0x2e>
 8013b84:	230c      	movs	r3, #12
 8013b86:	603b      	str	r3, [r7, #0]
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	e0d1      	b.n	8013d32 <_svfiprintf_r+0x1d2>
 8013b8e:	2340      	movs	r3, #64	; 0x40
 8013b90:	616b      	str	r3, [r5, #20]
 8013b92:	2300      	movs	r3, #0
 8013b94:	9309      	str	r3, [sp, #36]	; 0x24
 8013b96:	2320      	movs	r3, #32
 8013b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ba0:	2330      	movs	r3, #48	; 0x30
 8013ba2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013d4c <_svfiprintf_r+0x1ec>
 8013ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013baa:	f04f 0901 	mov.w	r9, #1
 8013bae:	4623      	mov	r3, r4
 8013bb0:	469a      	mov	sl, r3
 8013bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bb6:	b10a      	cbz	r2, 8013bbc <_svfiprintf_r+0x5c>
 8013bb8:	2a25      	cmp	r2, #37	; 0x25
 8013bba:	d1f9      	bne.n	8013bb0 <_svfiprintf_r+0x50>
 8013bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8013bc0:	d00b      	beq.n	8013bda <_svfiprintf_r+0x7a>
 8013bc2:	465b      	mov	r3, fp
 8013bc4:	4622      	mov	r2, r4
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	4638      	mov	r0, r7
 8013bca:	f7ff ff6d 	bl	8013aa8 <__ssputs_r>
 8013bce:	3001      	adds	r0, #1
 8013bd0:	f000 80aa 	beq.w	8013d28 <_svfiprintf_r+0x1c8>
 8013bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bd6:	445a      	add	r2, fp
 8013bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8013bda:	f89a 3000 	ldrb.w	r3, [sl]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f000 80a2 	beq.w	8013d28 <_svfiprintf_r+0x1c8>
 8013be4:	2300      	movs	r3, #0
 8013be6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bee:	f10a 0a01 	add.w	sl, sl, #1
 8013bf2:	9304      	str	r3, [sp, #16]
 8013bf4:	9307      	str	r3, [sp, #28]
 8013bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8013bfc:	4654      	mov	r4, sl
 8013bfe:	2205      	movs	r2, #5
 8013c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c04:	4851      	ldr	r0, [pc, #324]	; (8013d4c <_svfiprintf_r+0x1ec>)
 8013c06:	f7ec fb8b 	bl	8000320 <memchr>
 8013c0a:	9a04      	ldr	r2, [sp, #16]
 8013c0c:	b9d8      	cbnz	r0, 8013c46 <_svfiprintf_r+0xe6>
 8013c0e:	06d0      	lsls	r0, r2, #27
 8013c10:	bf44      	itt	mi
 8013c12:	2320      	movmi	r3, #32
 8013c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c18:	0711      	lsls	r1, r2, #28
 8013c1a:	bf44      	itt	mi
 8013c1c:	232b      	movmi	r3, #43	; 0x2b
 8013c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c22:	f89a 3000 	ldrb.w	r3, [sl]
 8013c26:	2b2a      	cmp	r3, #42	; 0x2a
 8013c28:	d015      	beq.n	8013c56 <_svfiprintf_r+0xf6>
 8013c2a:	9a07      	ldr	r2, [sp, #28]
 8013c2c:	4654      	mov	r4, sl
 8013c2e:	2000      	movs	r0, #0
 8013c30:	f04f 0c0a 	mov.w	ip, #10
 8013c34:	4621      	mov	r1, r4
 8013c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c3a:	3b30      	subs	r3, #48	; 0x30
 8013c3c:	2b09      	cmp	r3, #9
 8013c3e:	d94e      	bls.n	8013cde <_svfiprintf_r+0x17e>
 8013c40:	b1b0      	cbz	r0, 8013c70 <_svfiprintf_r+0x110>
 8013c42:	9207      	str	r2, [sp, #28]
 8013c44:	e014      	b.n	8013c70 <_svfiprintf_r+0x110>
 8013c46:	eba0 0308 	sub.w	r3, r0, r8
 8013c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	9304      	str	r3, [sp, #16]
 8013c52:	46a2      	mov	sl, r4
 8013c54:	e7d2      	b.n	8013bfc <_svfiprintf_r+0x9c>
 8013c56:	9b03      	ldr	r3, [sp, #12]
 8013c58:	1d19      	adds	r1, r3, #4
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	9103      	str	r1, [sp, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	bfbb      	ittet	lt
 8013c62:	425b      	neglt	r3, r3
 8013c64:	f042 0202 	orrlt.w	r2, r2, #2
 8013c68:	9307      	strge	r3, [sp, #28]
 8013c6a:	9307      	strlt	r3, [sp, #28]
 8013c6c:	bfb8      	it	lt
 8013c6e:	9204      	strlt	r2, [sp, #16]
 8013c70:	7823      	ldrb	r3, [r4, #0]
 8013c72:	2b2e      	cmp	r3, #46	; 0x2e
 8013c74:	d10c      	bne.n	8013c90 <_svfiprintf_r+0x130>
 8013c76:	7863      	ldrb	r3, [r4, #1]
 8013c78:	2b2a      	cmp	r3, #42	; 0x2a
 8013c7a:	d135      	bne.n	8013ce8 <_svfiprintf_r+0x188>
 8013c7c:	9b03      	ldr	r3, [sp, #12]
 8013c7e:	1d1a      	adds	r2, r3, #4
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	9203      	str	r2, [sp, #12]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	bfb8      	it	lt
 8013c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c8c:	3402      	adds	r4, #2
 8013c8e:	9305      	str	r3, [sp, #20]
 8013c90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d5c <_svfiprintf_r+0x1fc>
 8013c94:	7821      	ldrb	r1, [r4, #0]
 8013c96:	2203      	movs	r2, #3
 8013c98:	4650      	mov	r0, sl
 8013c9a:	f7ec fb41 	bl	8000320 <memchr>
 8013c9e:	b140      	cbz	r0, 8013cb2 <_svfiprintf_r+0x152>
 8013ca0:	2340      	movs	r3, #64	; 0x40
 8013ca2:	eba0 000a 	sub.w	r0, r0, sl
 8013ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8013caa:	9b04      	ldr	r3, [sp, #16]
 8013cac:	4303      	orrs	r3, r0
 8013cae:	3401      	adds	r4, #1
 8013cb0:	9304      	str	r3, [sp, #16]
 8013cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cb6:	4826      	ldr	r0, [pc, #152]	; (8013d50 <_svfiprintf_r+0x1f0>)
 8013cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cbc:	2206      	movs	r2, #6
 8013cbe:	f7ec fb2f 	bl	8000320 <memchr>
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d038      	beq.n	8013d38 <_svfiprintf_r+0x1d8>
 8013cc6:	4b23      	ldr	r3, [pc, #140]	; (8013d54 <_svfiprintf_r+0x1f4>)
 8013cc8:	bb1b      	cbnz	r3, 8013d12 <_svfiprintf_r+0x1b2>
 8013cca:	9b03      	ldr	r3, [sp, #12]
 8013ccc:	3307      	adds	r3, #7
 8013cce:	f023 0307 	bic.w	r3, r3, #7
 8013cd2:	3308      	adds	r3, #8
 8013cd4:	9303      	str	r3, [sp, #12]
 8013cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cd8:	4433      	add	r3, r6
 8013cda:	9309      	str	r3, [sp, #36]	; 0x24
 8013cdc:	e767      	b.n	8013bae <_svfiprintf_r+0x4e>
 8013cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ce2:	460c      	mov	r4, r1
 8013ce4:	2001      	movs	r0, #1
 8013ce6:	e7a5      	b.n	8013c34 <_svfiprintf_r+0xd4>
 8013ce8:	2300      	movs	r3, #0
 8013cea:	3401      	adds	r4, #1
 8013cec:	9305      	str	r3, [sp, #20]
 8013cee:	4619      	mov	r1, r3
 8013cf0:	f04f 0c0a 	mov.w	ip, #10
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cfa:	3a30      	subs	r2, #48	; 0x30
 8013cfc:	2a09      	cmp	r2, #9
 8013cfe:	d903      	bls.n	8013d08 <_svfiprintf_r+0x1a8>
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d0c5      	beq.n	8013c90 <_svfiprintf_r+0x130>
 8013d04:	9105      	str	r1, [sp, #20]
 8013d06:	e7c3      	b.n	8013c90 <_svfiprintf_r+0x130>
 8013d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e7f0      	b.n	8013cf4 <_svfiprintf_r+0x194>
 8013d12:	ab03      	add	r3, sp, #12
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	462a      	mov	r2, r5
 8013d18:	4b0f      	ldr	r3, [pc, #60]	; (8013d58 <_svfiprintf_r+0x1f8>)
 8013d1a:	a904      	add	r1, sp, #16
 8013d1c:	4638      	mov	r0, r7
 8013d1e:	f3af 8000 	nop.w
 8013d22:	1c42      	adds	r2, r0, #1
 8013d24:	4606      	mov	r6, r0
 8013d26:	d1d6      	bne.n	8013cd6 <_svfiprintf_r+0x176>
 8013d28:	89ab      	ldrh	r3, [r5, #12]
 8013d2a:	065b      	lsls	r3, r3, #25
 8013d2c:	f53f af2c 	bmi.w	8013b88 <_svfiprintf_r+0x28>
 8013d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d32:	b01d      	add	sp, #116	; 0x74
 8013d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d38:	ab03      	add	r3, sp, #12
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	462a      	mov	r2, r5
 8013d3e:	4b06      	ldr	r3, [pc, #24]	; (8013d58 <_svfiprintf_r+0x1f8>)
 8013d40:	a904      	add	r1, sp, #16
 8013d42:	4638      	mov	r0, r7
 8013d44:	f000 f87a 	bl	8013e3c <_printf_i>
 8013d48:	e7eb      	b.n	8013d22 <_svfiprintf_r+0x1c2>
 8013d4a:	bf00      	nop
 8013d4c:	08014724 	.word	0x08014724
 8013d50:	0801472e 	.word	0x0801472e
 8013d54:	00000000 	.word	0x00000000
 8013d58:	08013aa9 	.word	0x08013aa9
 8013d5c:	0801472a 	.word	0x0801472a

08013d60 <_printf_common>:
 8013d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d64:	4616      	mov	r6, r2
 8013d66:	4699      	mov	r9, r3
 8013d68:	688a      	ldr	r2, [r1, #8]
 8013d6a:	690b      	ldr	r3, [r1, #16]
 8013d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d70:	4293      	cmp	r3, r2
 8013d72:	bfb8      	it	lt
 8013d74:	4613      	movlt	r3, r2
 8013d76:	6033      	str	r3, [r6, #0]
 8013d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d7c:	4607      	mov	r7, r0
 8013d7e:	460c      	mov	r4, r1
 8013d80:	b10a      	cbz	r2, 8013d86 <_printf_common+0x26>
 8013d82:	3301      	adds	r3, #1
 8013d84:	6033      	str	r3, [r6, #0]
 8013d86:	6823      	ldr	r3, [r4, #0]
 8013d88:	0699      	lsls	r1, r3, #26
 8013d8a:	bf42      	ittt	mi
 8013d8c:	6833      	ldrmi	r3, [r6, #0]
 8013d8e:	3302      	addmi	r3, #2
 8013d90:	6033      	strmi	r3, [r6, #0]
 8013d92:	6825      	ldr	r5, [r4, #0]
 8013d94:	f015 0506 	ands.w	r5, r5, #6
 8013d98:	d106      	bne.n	8013da8 <_printf_common+0x48>
 8013d9a:	f104 0a19 	add.w	sl, r4, #25
 8013d9e:	68e3      	ldr	r3, [r4, #12]
 8013da0:	6832      	ldr	r2, [r6, #0]
 8013da2:	1a9b      	subs	r3, r3, r2
 8013da4:	42ab      	cmp	r3, r5
 8013da6:	dc26      	bgt.n	8013df6 <_printf_common+0x96>
 8013da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013dac:	1e13      	subs	r3, r2, #0
 8013dae:	6822      	ldr	r2, [r4, #0]
 8013db0:	bf18      	it	ne
 8013db2:	2301      	movne	r3, #1
 8013db4:	0692      	lsls	r2, r2, #26
 8013db6:	d42b      	bmi.n	8013e10 <_printf_common+0xb0>
 8013db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013dbc:	4649      	mov	r1, r9
 8013dbe:	4638      	mov	r0, r7
 8013dc0:	47c0      	blx	r8
 8013dc2:	3001      	adds	r0, #1
 8013dc4:	d01e      	beq.n	8013e04 <_printf_common+0xa4>
 8013dc6:	6823      	ldr	r3, [r4, #0]
 8013dc8:	68e5      	ldr	r5, [r4, #12]
 8013dca:	6832      	ldr	r2, [r6, #0]
 8013dcc:	f003 0306 	and.w	r3, r3, #6
 8013dd0:	2b04      	cmp	r3, #4
 8013dd2:	bf08      	it	eq
 8013dd4:	1aad      	subeq	r5, r5, r2
 8013dd6:	68a3      	ldr	r3, [r4, #8]
 8013dd8:	6922      	ldr	r2, [r4, #16]
 8013dda:	bf0c      	ite	eq
 8013ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013de0:	2500      	movne	r5, #0
 8013de2:	4293      	cmp	r3, r2
 8013de4:	bfc4      	itt	gt
 8013de6:	1a9b      	subgt	r3, r3, r2
 8013de8:	18ed      	addgt	r5, r5, r3
 8013dea:	2600      	movs	r6, #0
 8013dec:	341a      	adds	r4, #26
 8013dee:	42b5      	cmp	r5, r6
 8013df0:	d11a      	bne.n	8013e28 <_printf_common+0xc8>
 8013df2:	2000      	movs	r0, #0
 8013df4:	e008      	b.n	8013e08 <_printf_common+0xa8>
 8013df6:	2301      	movs	r3, #1
 8013df8:	4652      	mov	r2, sl
 8013dfa:	4649      	mov	r1, r9
 8013dfc:	4638      	mov	r0, r7
 8013dfe:	47c0      	blx	r8
 8013e00:	3001      	adds	r0, #1
 8013e02:	d103      	bne.n	8013e0c <_printf_common+0xac>
 8013e04:	f04f 30ff 	mov.w	r0, #4294967295
 8013e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e0c:	3501      	adds	r5, #1
 8013e0e:	e7c6      	b.n	8013d9e <_printf_common+0x3e>
 8013e10:	18e1      	adds	r1, r4, r3
 8013e12:	1c5a      	adds	r2, r3, #1
 8013e14:	2030      	movs	r0, #48	; 0x30
 8013e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e1a:	4422      	add	r2, r4
 8013e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e24:	3302      	adds	r3, #2
 8013e26:	e7c7      	b.n	8013db8 <_printf_common+0x58>
 8013e28:	2301      	movs	r3, #1
 8013e2a:	4622      	mov	r2, r4
 8013e2c:	4649      	mov	r1, r9
 8013e2e:	4638      	mov	r0, r7
 8013e30:	47c0      	blx	r8
 8013e32:	3001      	adds	r0, #1
 8013e34:	d0e6      	beq.n	8013e04 <_printf_common+0xa4>
 8013e36:	3601      	adds	r6, #1
 8013e38:	e7d9      	b.n	8013dee <_printf_common+0x8e>
	...

08013e3c <_printf_i>:
 8013e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e40:	7e0f      	ldrb	r7, [r1, #24]
 8013e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e44:	2f78      	cmp	r7, #120	; 0x78
 8013e46:	4691      	mov	r9, r2
 8013e48:	4680      	mov	r8, r0
 8013e4a:	460c      	mov	r4, r1
 8013e4c:	469a      	mov	sl, r3
 8013e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013e52:	d807      	bhi.n	8013e64 <_printf_i+0x28>
 8013e54:	2f62      	cmp	r7, #98	; 0x62
 8013e56:	d80a      	bhi.n	8013e6e <_printf_i+0x32>
 8013e58:	2f00      	cmp	r7, #0
 8013e5a:	f000 80d8 	beq.w	801400e <_printf_i+0x1d2>
 8013e5e:	2f58      	cmp	r7, #88	; 0x58
 8013e60:	f000 80a3 	beq.w	8013faa <_printf_i+0x16e>
 8013e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e6c:	e03a      	b.n	8013ee4 <_printf_i+0xa8>
 8013e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e72:	2b15      	cmp	r3, #21
 8013e74:	d8f6      	bhi.n	8013e64 <_printf_i+0x28>
 8013e76:	a101      	add	r1, pc, #4	; (adr r1, 8013e7c <_printf_i+0x40>)
 8013e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e7c:	08013ed5 	.word	0x08013ed5
 8013e80:	08013ee9 	.word	0x08013ee9
 8013e84:	08013e65 	.word	0x08013e65
 8013e88:	08013e65 	.word	0x08013e65
 8013e8c:	08013e65 	.word	0x08013e65
 8013e90:	08013e65 	.word	0x08013e65
 8013e94:	08013ee9 	.word	0x08013ee9
 8013e98:	08013e65 	.word	0x08013e65
 8013e9c:	08013e65 	.word	0x08013e65
 8013ea0:	08013e65 	.word	0x08013e65
 8013ea4:	08013e65 	.word	0x08013e65
 8013ea8:	08013ff5 	.word	0x08013ff5
 8013eac:	08013f19 	.word	0x08013f19
 8013eb0:	08013fd7 	.word	0x08013fd7
 8013eb4:	08013e65 	.word	0x08013e65
 8013eb8:	08013e65 	.word	0x08013e65
 8013ebc:	08014017 	.word	0x08014017
 8013ec0:	08013e65 	.word	0x08013e65
 8013ec4:	08013f19 	.word	0x08013f19
 8013ec8:	08013e65 	.word	0x08013e65
 8013ecc:	08013e65 	.word	0x08013e65
 8013ed0:	08013fdf 	.word	0x08013fdf
 8013ed4:	682b      	ldr	r3, [r5, #0]
 8013ed6:	1d1a      	adds	r2, r3, #4
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	602a      	str	r2, [r5, #0]
 8013edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	e0a3      	b.n	8014030 <_printf_i+0x1f4>
 8013ee8:	6820      	ldr	r0, [r4, #0]
 8013eea:	6829      	ldr	r1, [r5, #0]
 8013eec:	0606      	lsls	r6, r0, #24
 8013eee:	f101 0304 	add.w	r3, r1, #4
 8013ef2:	d50a      	bpl.n	8013f0a <_printf_i+0xce>
 8013ef4:	680e      	ldr	r6, [r1, #0]
 8013ef6:	602b      	str	r3, [r5, #0]
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	da03      	bge.n	8013f04 <_printf_i+0xc8>
 8013efc:	232d      	movs	r3, #45	; 0x2d
 8013efe:	4276      	negs	r6, r6
 8013f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f04:	485e      	ldr	r0, [pc, #376]	; (8014080 <_printf_i+0x244>)
 8013f06:	230a      	movs	r3, #10
 8013f08:	e019      	b.n	8013f3e <_printf_i+0x102>
 8013f0a:	680e      	ldr	r6, [r1, #0]
 8013f0c:	602b      	str	r3, [r5, #0]
 8013f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013f12:	bf18      	it	ne
 8013f14:	b236      	sxthne	r6, r6
 8013f16:	e7ef      	b.n	8013ef8 <_printf_i+0xbc>
 8013f18:	682b      	ldr	r3, [r5, #0]
 8013f1a:	6820      	ldr	r0, [r4, #0]
 8013f1c:	1d19      	adds	r1, r3, #4
 8013f1e:	6029      	str	r1, [r5, #0]
 8013f20:	0601      	lsls	r1, r0, #24
 8013f22:	d501      	bpl.n	8013f28 <_printf_i+0xec>
 8013f24:	681e      	ldr	r6, [r3, #0]
 8013f26:	e002      	b.n	8013f2e <_printf_i+0xf2>
 8013f28:	0646      	lsls	r6, r0, #25
 8013f2a:	d5fb      	bpl.n	8013f24 <_printf_i+0xe8>
 8013f2c:	881e      	ldrh	r6, [r3, #0]
 8013f2e:	4854      	ldr	r0, [pc, #336]	; (8014080 <_printf_i+0x244>)
 8013f30:	2f6f      	cmp	r7, #111	; 0x6f
 8013f32:	bf0c      	ite	eq
 8013f34:	2308      	moveq	r3, #8
 8013f36:	230a      	movne	r3, #10
 8013f38:	2100      	movs	r1, #0
 8013f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f3e:	6865      	ldr	r5, [r4, #4]
 8013f40:	60a5      	str	r5, [r4, #8]
 8013f42:	2d00      	cmp	r5, #0
 8013f44:	bfa2      	ittt	ge
 8013f46:	6821      	ldrge	r1, [r4, #0]
 8013f48:	f021 0104 	bicge.w	r1, r1, #4
 8013f4c:	6021      	strge	r1, [r4, #0]
 8013f4e:	b90e      	cbnz	r6, 8013f54 <_printf_i+0x118>
 8013f50:	2d00      	cmp	r5, #0
 8013f52:	d04d      	beq.n	8013ff0 <_printf_i+0x1b4>
 8013f54:	4615      	mov	r5, r2
 8013f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8013f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8013f5e:	5dc7      	ldrb	r7, [r0, r7]
 8013f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013f64:	4637      	mov	r7, r6
 8013f66:	42bb      	cmp	r3, r7
 8013f68:	460e      	mov	r6, r1
 8013f6a:	d9f4      	bls.n	8013f56 <_printf_i+0x11a>
 8013f6c:	2b08      	cmp	r3, #8
 8013f6e:	d10b      	bne.n	8013f88 <_printf_i+0x14c>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	07de      	lsls	r6, r3, #31
 8013f74:	d508      	bpl.n	8013f88 <_printf_i+0x14c>
 8013f76:	6923      	ldr	r3, [r4, #16]
 8013f78:	6861      	ldr	r1, [r4, #4]
 8013f7a:	4299      	cmp	r1, r3
 8013f7c:	bfde      	ittt	le
 8013f7e:	2330      	movle	r3, #48	; 0x30
 8013f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f88:	1b52      	subs	r2, r2, r5
 8013f8a:	6122      	str	r2, [r4, #16]
 8013f8c:	f8cd a000 	str.w	sl, [sp]
 8013f90:	464b      	mov	r3, r9
 8013f92:	aa03      	add	r2, sp, #12
 8013f94:	4621      	mov	r1, r4
 8013f96:	4640      	mov	r0, r8
 8013f98:	f7ff fee2 	bl	8013d60 <_printf_common>
 8013f9c:	3001      	adds	r0, #1
 8013f9e:	d14c      	bne.n	801403a <_printf_i+0x1fe>
 8013fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa4:	b004      	add	sp, #16
 8013fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013faa:	4835      	ldr	r0, [pc, #212]	; (8014080 <_printf_i+0x244>)
 8013fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013fb0:	6829      	ldr	r1, [r5, #0]
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8013fb8:	6029      	str	r1, [r5, #0]
 8013fba:	061d      	lsls	r5, r3, #24
 8013fbc:	d514      	bpl.n	8013fe8 <_printf_i+0x1ac>
 8013fbe:	07df      	lsls	r7, r3, #31
 8013fc0:	bf44      	itt	mi
 8013fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8013fc6:	6023      	strmi	r3, [r4, #0]
 8013fc8:	b91e      	cbnz	r6, 8013fd2 <_printf_i+0x196>
 8013fca:	6823      	ldr	r3, [r4, #0]
 8013fcc:	f023 0320 	bic.w	r3, r3, #32
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	2310      	movs	r3, #16
 8013fd4:	e7b0      	b.n	8013f38 <_printf_i+0xfc>
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	f043 0320 	orr.w	r3, r3, #32
 8013fdc:	6023      	str	r3, [r4, #0]
 8013fde:	2378      	movs	r3, #120	; 0x78
 8013fe0:	4828      	ldr	r0, [pc, #160]	; (8014084 <_printf_i+0x248>)
 8013fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013fe6:	e7e3      	b.n	8013fb0 <_printf_i+0x174>
 8013fe8:	0659      	lsls	r1, r3, #25
 8013fea:	bf48      	it	mi
 8013fec:	b2b6      	uxthmi	r6, r6
 8013fee:	e7e6      	b.n	8013fbe <_printf_i+0x182>
 8013ff0:	4615      	mov	r5, r2
 8013ff2:	e7bb      	b.n	8013f6c <_printf_i+0x130>
 8013ff4:	682b      	ldr	r3, [r5, #0]
 8013ff6:	6826      	ldr	r6, [r4, #0]
 8013ff8:	6961      	ldr	r1, [r4, #20]
 8013ffa:	1d18      	adds	r0, r3, #4
 8013ffc:	6028      	str	r0, [r5, #0]
 8013ffe:	0635      	lsls	r5, r6, #24
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	d501      	bpl.n	8014008 <_printf_i+0x1cc>
 8014004:	6019      	str	r1, [r3, #0]
 8014006:	e002      	b.n	801400e <_printf_i+0x1d2>
 8014008:	0670      	lsls	r0, r6, #25
 801400a:	d5fb      	bpl.n	8014004 <_printf_i+0x1c8>
 801400c:	8019      	strh	r1, [r3, #0]
 801400e:	2300      	movs	r3, #0
 8014010:	6123      	str	r3, [r4, #16]
 8014012:	4615      	mov	r5, r2
 8014014:	e7ba      	b.n	8013f8c <_printf_i+0x150>
 8014016:	682b      	ldr	r3, [r5, #0]
 8014018:	1d1a      	adds	r2, r3, #4
 801401a:	602a      	str	r2, [r5, #0]
 801401c:	681d      	ldr	r5, [r3, #0]
 801401e:	6862      	ldr	r2, [r4, #4]
 8014020:	2100      	movs	r1, #0
 8014022:	4628      	mov	r0, r5
 8014024:	f7ec f97c 	bl	8000320 <memchr>
 8014028:	b108      	cbz	r0, 801402e <_printf_i+0x1f2>
 801402a:	1b40      	subs	r0, r0, r5
 801402c:	6060      	str	r0, [r4, #4]
 801402e:	6863      	ldr	r3, [r4, #4]
 8014030:	6123      	str	r3, [r4, #16]
 8014032:	2300      	movs	r3, #0
 8014034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014038:	e7a8      	b.n	8013f8c <_printf_i+0x150>
 801403a:	6923      	ldr	r3, [r4, #16]
 801403c:	462a      	mov	r2, r5
 801403e:	4649      	mov	r1, r9
 8014040:	4640      	mov	r0, r8
 8014042:	47d0      	blx	sl
 8014044:	3001      	adds	r0, #1
 8014046:	d0ab      	beq.n	8013fa0 <_printf_i+0x164>
 8014048:	6823      	ldr	r3, [r4, #0]
 801404a:	079b      	lsls	r3, r3, #30
 801404c:	d413      	bmi.n	8014076 <_printf_i+0x23a>
 801404e:	68e0      	ldr	r0, [r4, #12]
 8014050:	9b03      	ldr	r3, [sp, #12]
 8014052:	4298      	cmp	r0, r3
 8014054:	bfb8      	it	lt
 8014056:	4618      	movlt	r0, r3
 8014058:	e7a4      	b.n	8013fa4 <_printf_i+0x168>
 801405a:	2301      	movs	r3, #1
 801405c:	4632      	mov	r2, r6
 801405e:	4649      	mov	r1, r9
 8014060:	4640      	mov	r0, r8
 8014062:	47d0      	blx	sl
 8014064:	3001      	adds	r0, #1
 8014066:	d09b      	beq.n	8013fa0 <_printf_i+0x164>
 8014068:	3501      	adds	r5, #1
 801406a:	68e3      	ldr	r3, [r4, #12]
 801406c:	9903      	ldr	r1, [sp, #12]
 801406e:	1a5b      	subs	r3, r3, r1
 8014070:	42ab      	cmp	r3, r5
 8014072:	dcf2      	bgt.n	801405a <_printf_i+0x21e>
 8014074:	e7eb      	b.n	801404e <_printf_i+0x212>
 8014076:	2500      	movs	r5, #0
 8014078:	f104 0619 	add.w	r6, r4, #25
 801407c:	e7f5      	b.n	801406a <_printf_i+0x22e>
 801407e:	bf00      	nop
 8014080:	08014735 	.word	0x08014735
 8014084:	08014746 	.word	0x08014746

08014088 <memmove>:
 8014088:	4288      	cmp	r0, r1
 801408a:	b510      	push	{r4, lr}
 801408c:	eb01 0402 	add.w	r4, r1, r2
 8014090:	d902      	bls.n	8014098 <memmove+0x10>
 8014092:	4284      	cmp	r4, r0
 8014094:	4623      	mov	r3, r4
 8014096:	d807      	bhi.n	80140a8 <memmove+0x20>
 8014098:	1e43      	subs	r3, r0, #1
 801409a:	42a1      	cmp	r1, r4
 801409c:	d008      	beq.n	80140b0 <memmove+0x28>
 801409e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140a6:	e7f8      	b.n	801409a <memmove+0x12>
 80140a8:	4402      	add	r2, r0
 80140aa:	4601      	mov	r1, r0
 80140ac:	428a      	cmp	r2, r1
 80140ae:	d100      	bne.n	80140b2 <memmove+0x2a>
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140ba:	e7f7      	b.n	80140ac <memmove+0x24>

080140bc <_free_r>:
 80140bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140be:	2900      	cmp	r1, #0
 80140c0:	d044      	beq.n	801414c <_free_r+0x90>
 80140c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140c6:	9001      	str	r0, [sp, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f1a1 0404 	sub.w	r4, r1, #4
 80140ce:	bfb8      	it	lt
 80140d0:	18e4      	addlt	r4, r4, r3
 80140d2:	f000 f913 	bl	80142fc <__malloc_lock>
 80140d6:	4a1e      	ldr	r2, [pc, #120]	; (8014150 <_free_r+0x94>)
 80140d8:	9801      	ldr	r0, [sp, #4]
 80140da:	6813      	ldr	r3, [r2, #0]
 80140dc:	b933      	cbnz	r3, 80140ec <_free_r+0x30>
 80140de:	6063      	str	r3, [r4, #4]
 80140e0:	6014      	str	r4, [r2, #0]
 80140e2:	b003      	add	sp, #12
 80140e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140e8:	f000 b90e 	b.w	8014308 <__malloc_unlock>
 80140ec:	42a3      	cmp	r3, r4
 80140ee:	d908      	bls.n	8014102 <_free_r+0x46>
 80140f0:	6825      	ldr	r5, [r4, #0]
 80140f2:	1961      	adds	r1, r4, r5
 80140f4:	428b      	cmp	r3, r1
 80140f6:	bf01      	itttt	eq
 80140f8:	6819      	ldreq	r1, [r3, #0]
 80140fa:	685b      	ldreq	r3, [r3, #4]
 80140fc:	1949      	addeq	r1, r1, r5
 80140fe:	6021      	streq	r1, [r4, #0]
 8014100:	e7ed      	b.n	80140de <_free_r+0x22>
 8014102:	461a      	mov	r2, r3
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	b10b      	cbz	r3, 801410c <_free_r+0x50>
 8014108:	42a3      	cmp	r3, r4
 801410a:	d9fa      	bls.n	8014102 <_free_r+0x46>
 801410c:	6811      	ldr	r1, [r2, #0]
 801410e:	1855      	adds	r5, r2, r1
 8014110:	42a5      	cmp	r5, r4
 8014112:	d10b      	bne.n	801412c <_free_r+0x70>
 8014114:	6824      	ldr	r4, [r4, #0]
 8014116:	4421      	add	r1, r4
 8014118:	1854      	adds	r4, r2, r1
 801411a:	42a3      	cmp	r3, r4
 801411c:	6011      	str	r1, [r2, #0]
 801411e:	d1e0      	bne.n	80140e2 <_free_r+0x26>
 8014120:	681c      	ldr	r4, [r3, #0]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	6053      	str	r3, [r2, #4]
 8014126:	4421      	add	r1, r4
 8014128:	6011      	str	r1, [r2, #0]
 801412a:	e7da      	b.n	80140e2 <_free_r+0x26>
 801412c:	d902      	bls.n	8014134 <_free_r+0x78>
 801412e:	230c      	movs	r3, #12
 8014130:	6003      	str	r3, [r0, #0]
 8014132:	e7d6      	b.n	80140e2 <_free_r+0x26>
 8014134:	6825      	ldr	r5, [r4, #0]
 8014136:	1961      	adds	r1, r4, r5
 8014138:	428b      	cmp	r3, r1
 801413a:	bf04      	itt	eq
 801413c:	6819      	ldreq	r1, [r3, #0]
 801413e:	685b      	ldreq	r3, [r3, #4]
 8014140:	6063      	str	r3, [r4, #4]
 8014142:	bf04      	itt	eq
 8014144:	1949      	addeq	r1, r1, r5
 8014146:	6021      	streq	r1, [r4, #0]
 8014148:	6054      	str	r4, [r2, #4]
 801414a:	e7ca      	b.n	80140e2 <_free_r+0x26>
 801414c:	b003      	add	sp, #12
 801414e:	bd30      	pop	{r4, r5, pc}
 8014150:	24002f3c 	.word	0x24002f3c

08014154 <sbrk_aligned>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4e0e      	ldr	r6, [pc, #56]	; (8014190 <sbrk_aligned+0x3c>)
 8014158:	460c      	mov	r4, r1
 801415a:	6831      	ldr	r1, [r6, #0]
 801415c:	4605      	mov	r5, r0
 801415e:	b911      	cbnz	r1, 8014166 <sbrk_aligned+0x12>
 8014160:	f000 f8bc 	bl	80142dc <_sbrk_r>
 8014164:	6030      	str	r0, [r6, #0]
 8014166:	4621      	mov	r1, r4
 8014168:	4628      	mov	r0, r5
 801416a:	f000 f8b7 	bl	80142dc <_sbrk_r>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	d00a      	beq.n	8014188 <sbrk_aligned+0x34>
 8014172:	1cc4      	adds	r4, r0, #3
 8014174:	f024 0403 	bic.w	r4, r4, #3
 8014178:	42a0      	cmp	r0, r4
 801417a:	d007      	beq.n	801418c <sbrk_aligned+0x38>
 801417c:	1a21      	subs	r1, r4, r0
 801417e:	4628      	mov	r0, r5
 8014180:	f000 f8ac 	bl	80142dc <_sbrk_r>
 8014184:	3001      	adds	r0, #1
 8014186:	d101      	bne.n	801418c <sbrk_aligned+0x38>
 8014188:	f04f 34ff 	mov.w	r4, #4294967295
 801418c:	4620      	mov	r0, r4
 801418e:	bd70      	pop	{r4, r5, r6, pc}
 8014190:	24002f40 	.word	0x24002f40

08014194 <_malloc_r>:
 8014194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014198:	1ccd      	adds	r5, r1, #3
 801419a:	f025 0503 	bic.w	r5, r5, #3
 801419e:	3508      	adds	r5, #8
 80141a0:	2d0c      	cmp	r5, #12
 80141a2:	bf38      	it	cc
 80141a4:	250c      	movcc	r5, #12
 80141a6:	2d00      	cmp	r5, #0
 80141a8:	4607      	mov	r7, r0
 80141aa:	db01      	blt.n	80141b0 <_malloc_r+0x1c>
 80141ac:	42a9      	cmp	r1, r5
 80141ae:	d905      	bls.n	80141bc <_malloc_r+0x28>
 80141b0:	230c      	movs	r3, #12
 80141b2:	603b      	str	r3, [r7, #0]
 80141b4:	2600      	movs	r6, #0
 80141b6:	4630      	mov	r0, r6
 80141b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141bc:	4e2e      	ldr	r6, [pc, #184]	; (8014278 <_malloc_r+0xe4>)
 80141be:	f000 f89d 	bl	80142fc <__malloc_lock>
 80141c2:	6833      	ldr	r3, [r6, #0]
 80141c4:	461c      	mov	r4, r3
 80141c6:	bb34      	cbnz	r4, 8014216 <_malloc_r+0x82>
 80141c8:	4629      	mov	r1, r5
 80141ca:	4638      	mov	r0, r7
 80141cc:	f7ff ffc2 	bl	8014154 <sbrk_aligned>
 80141d0:	1c43      	adds	r3, r0, #1
 80141d2:	4604      	mov	r4, r0
 80141d4:	d14d      	bne.n	8014272 <_malloc_r+0xde>
 80141d6:	6834      	ldr	r4, [r6, #0]
 80141d8:	4626      	mov	r6, r4
 80141da:	2e00      	cmp	r6, #0
 80141dc:	d140      	bne.n	8014260 <_malloc_r+0xcc>
 80141de:	6823      	ldr	r3, [r4, #0]
 80141e0:	4631      	mov	r1, r6
 80141e2:	4638      	mov	r0, r7
 80141e4:	eb04 0803 	add.w	r8, r4, r3
 80141e8:	f000 f878 	bl	80142dc <_sbrk_r>
 80141ec:	4580      	cmp	r8, r0
 80141ee:	d13a      	bne.n	8014266 <_malloc_r+0xd2>
 80141f0:	6821      	ldr	r1, [r4, #0]
 80141f2:	3503      	adds	r5, #3
 80141f4:	1a6d      	subs	r5, r5, r1
 80141f6:	f025 0503 	bic.w	r5, r5, #3
 80141fa:	3508      	adds	r5, #8
 80141fc:	2d0c      	cmp	r5, #12
 80141fe:	bf38      	it	cc
 8014200:	250c      	movcc	r5, #12
 8014202:	4629      	mov	r1, r5
 8014204:	4638      	mov	r0, r7
 8014206:	f7ff ffa5 	bl	8014154 <sbrk_aligned>
 801420a:	3001      	adds	r0, #1
 801420c:	d02b      	beq.n	8014266 <_malloc_r+0xd2>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	442b      	add	r3, r5
 8014212:	6023      	str	r3, [r4, #0]
 8014214:	e00e      	b.n	8014234 <_malloc_r+0xa0>
 8014216:	6822      	ldr	r2, [r4, #0]
 8014218:	1b52      	subs	r2, r2, r5
 801421a:	d41e      	bmi.n	801425a <_malloc_r+0xc6>
 801421c:	2a0b      	cmp	r2, #11
 801421e:	d916      	bls.n	801424e <_malloc_r+0xba>
 8014220:	1961      	adds	r1, r4, r5
 8014222:	42a3      	cmp	r3, r4
 8014224:	6025      	str	r5, [r4, #0]
 8014226:	bf18      	it	ne
 8014228:	6059      	strne	r1, [r3, #4]
 801422a:	6863      	ldr	r3, [r4, #4]
 801422c:	bf08      	it	eq
 801422e:	6031      	streq	r1, [r6, #0]
 8014230:	5162      	str	r2, [r4, r5]
 8014232:	604b      	str	r3, [r1, #4]
 8014234:	4638      	mov	r0, r7
 8014236:	f104 060b 	add.w	r6, r4, #11
 801423a:	f000 f865 	bl	8014308 <__malloc_unlock>
 801423e:	f026 0607 	bic.w	r6, r6, #7
 8014242:	1d23      	adds	r3, r4, #4
 8014244:	1af2      	subs	r2, r6, r3
 8014246:	d0b6      	beq.n	80141b6 <_malloc_r+0x22>
 8014248:	1b9b      	subs	r3, r3, r6
 801424a:	50a3      	str	r3, [r4, r2]
 801424c:	e7b3      	b.n	80141b6 <_malloc_r+0x22>
 801424e:	6862      	ldr	r2, [r4, #4]
 8014250:	42a3      	cmp	r3, r4
 8014252:	bf0c      	ite	eq
 8014254:	6032      	streq	r2, [r6, #0]
 8014256:	605a      	strne	r2, [r3, #4]
 8014258:	e7ec      	b.n	8014234 <_malloc_r+0xa0>
 801425a:	4623      	mov	r3, r4
 801425c:	6864      	ldr	r4, [r4, #4]
 801425e:	e7b2      	b.n	80141c6 <_malloc_r+0x32>
 8014260:	4634      	mov	r4, r6
 8014262:	6876      	ldr	r6, [r6, #4]
 8014264:	e7b9      	b.n	80141da <_malloc_r+0x46>
 8014266:	230c      	movs	r3, #12
 8014268:	603b      	str	r3, [r7, #0]
 801426a:	4638      	mov	r0, r7
 801426c:	f000 f84c 	bl	8014308 <__malloc_unlock>
 8014270:	e7a1      	b.n	80141b6 <_malloc_r+0x22>
 8014272:	6025      	str	r5, [r4, #0]
 8014274:	e7de      	b.n	8014234 <_malloc_r+0xa0>
 8014276:	bf00      	nop
 8014278:	24002f3c 	.word	0x24002f3c

0801427c <_realloc_r>:
 801427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014280:	4680      	mov	r8, r0
 8014282:	4614      	mov	r4, r2
 8014284:	460e      	mov	r6, r1
 8014286:	b921      	cbnz	r1, 8014292 <_realloc_r+0x16>
 8014288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801428c:	4611      	mov	r1, r2
 801428e:	f7ff bf81 	b.w	8014194 <_malloc_r>
 8014292:	b92a      	cbnz	r2, 80142a0 <_realloc_r+0x24>
 8014294:	f7ff ff12 	bl	80140bc <_free_r>
 8014298:	4625      	mov	r5, r4
 801429a:	4628      	mov	r0, r5
 801429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a0:	f000 f838 	bl	8014314 <_malloc_usable_size_r>
 80142a4:	4284      	cmp	r4, r0
 80142a6:	4607      	mov	r7, r0
 80142a8:	d802      	bhi.n	80142b0 <_realloc_r+0x34>
 80142aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80142ae:	d812      	bhi.n	80142d6 <_realloc_r+0x5a>
 80142b0:	4621      	mov	r1, r4
 80142b2:	4640      	mov	r0, r8
 80142b4:	f7ff ff6e 	bl	8014194 <_malloc_r>
 80142b8:	4605      	mov	r5, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d0ed      	beq.n	801429a <_realloc_r+0x1e>
 80142be:	42bc      	cmp	r4, r7
 80142c0:	4622      	mov	r2, r4
 80142c2:	4631      	mov	r1, r6
 80142c4:	bf28      	it	cs
 80142c6:	463a      	movcs	r2, r7
 80142c8:	f7ff fbb8 	bl	8013a3c <memcpy>
 80142cc:	4631      	mov	r1, r6
 80142ce:	4640      	mov	r0, r8
 80142d0:	f7ff fef4 	bl	80140bc <_free_r>
 80142d4:	e7e1      	b.n	801429a <_realloc_r+0x1e>
 80142d6:	4635      	mov	r5, r6
 80142d8:	e7df      	b.n	801429a <_realloc_r+0x1e>
	...

080142dc <_sbrk_r>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	4d06      	ldr	r5, [pc, #24]	; (80142f8 <_sbrk_r+0x1c>)
 80142e0:	2300      	movs	r3, #0
 80142e2:	4604      	mov	r4, r0
 80142e4:	4608      	mov	r0, r1
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	f7ee fcaa 	bl	8002c40 <_sbrk>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d102      	bne.n	80142f6 <_sbrk_r+0x1a>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	b103      	cbz	r3, 80142f6 <_sbrk_r+0x1a>
 80142f4:	6023      	str	r3, [r4, #0]
 80142f6:	bd38      	pop	{r3, r4, r5, pc}
 80142f8:	24002f44 	.word	0x24002f44

080142fc <__malloc_lock>:
 80142fc:	4801      	ldr	r0, [pc, #4]	; (8014304 <__malloc_lock+0x8>)
 80142fe:	f000 b811 	b.w	8014324 <__retarget_lock_acquire_recursive>
 8014302:	bf00      	nop
 8014304:	24002f48 	.word	0x24002f48

08014308 <__malloc_unlock>:
 8014308:	4801      	ldr	r0, [pc, #4]	; (8014310 <__malloc_unlock+0x8>)
 801430a:	f000 b80c 	b.w	8014326 <__retarget_lock_release_recursive>
 801430e:	bf00      	nop
 8014310:	24002f48 	.word	0x24002f48

08014314 <_malloc_usable_size_r>:
 8014314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014318:	1f18      	subs	r0, r3, #4
 801431a:	2b00      	cmp	r3, #0
 801431c:	bfbc      	itt	lt
 801431e:	580b      	ldrlt	r3, [r1, r0]
 8014320:	18c0      	addlt	r0, r0, r3
 8014322:	4770      	bx	lr

08014324 <__retarget_lock_acquire_recursive>:
 8014324:	4770      	bx	lr

08014326 <__retarget_lock_release_recursive>:
 8014326:	4770      	bx	lr

08014328 <fmod>:
 8014328:	b508      	push	{r3, lr}
 801432a:	ed2d 8b04 	vpush	{d8-d9}
 801432e:	eeb0 9b40 	vmov.f64	d9, d0
 8014332:	eeb0 8b41 	vmov.f64	d8, d1
 8014336:	f000 f81b 	bl	8014370 <__ieee754_fmod>
 801433a:	eeb4 9b48 	vcmp.f64	d9, d8
 801433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014342:	d60c      	bvs.n	801435e <fmod+0x36>
 8014344:	ed9f 9b08 	vldr	d9, [pc, #32]	; 8014368 <fmod+0x40>
 8014348:	eeb4 8b49 	vcmp.f64	d8, d9
 801434c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014350:	d105      	bne.n	801435e <fmod+0x36>
 8014352:	f7ff fb49 	bl	80139e8 <__errno>
 8014356:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801435a:	2321      	movs	r3, #33	; 0x21
 801435c:	6003      	str	r3, [r0, #0]
 801435e:	ecbd 8b04 	vpop	{d8-d9}
 8014362:	bd08      	pop	{r3, pc}
 8014364:	f3af 8000 	nop.w
	...

08014370 <__ieee754_fmod>:
 8014370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014374:	ed8d 1b00 	vstr	d1, [sp]
 8014378:	e9dd 6500 	ldrd	r6, r5, [sp]
 801437c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8014380:	ea57 0306 	orrs.w	r3, r7, r6
 8014384:	46b4      	mov	ip, r6
 8014386:	d00d      	beq.n	80143a4 <__ieee754_fmod+0x34>
 8014388:	ee10 9a90 	vmov	r9, s1
 801438c:	4a7b      	ldr	r2, [pc, #492]	; (801457c <__ieee754_fmod+0x20c>)
 801438e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014392:	4293      	cmp	r3, r2
 8014394:	dc06      	bgt.n	80143a4 <__ieee754_fmod+0x34>
 8014396:	4272      	negs	r2, r6
 8014398:	4879      	ldr	r0, [pc, #484]	; (8014580 <__ieee754_fmod+0x210>)
 801439a:	4332      	orrs	r2, r6
 801439c:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 80143a0:	4282      	cmp	r2, r0
 80143a2:	d908      	bls.n	80143b6 <__ieee754_fmod+0x46>
 80143a4:	ed9d 7b00 	vldr	d7, [sp]
 80143a8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80143ac:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80143b0:	b003      	add	sp, #12
 80143b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143b6:	42bb      	cmp	r3, r7
 80143b8:	ee10 ea10 	vmov	lr, s0
 80143bc:	ee10 1a10 	vmov	r1, s0
 80143c0:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 80143c4:	dc09      	bgt.n	80143da <__ieee754_fmod+0x6a>
 80143c6:	dbf3      	blt.n	80143b0 <__ieee754_fmod+0x40>
 80143c8:	45b6      	cmp	lr, r6
 80143ca:	d3f1      	bcc.n	80143b0 <__ieee754_fmod+0x40>
 80143cc:	d105      	bne.n	80143da <__ieee754_fmod+0x6a>
 80143ce:	4b6d      	ldr	r3, [pc, #436]	; (8014584 <__ieee754_fmod+0x214>)
 80143d0:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 80143d4:	ed94 0b00 	vldr	d0, [r4]
 80143d8:	e7ea      	b.n	80143b0 <__ieee754_fmod+0x40>
 80143da:	ea19 0f00 	tst.w	r9, r0
 80143de:	d14d      	bne.n	801447c <__ieee754_fmod+0x10c>
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d144      	bne.n	801446e <__ieee754_fmod+0xfe>
 80143e4:	4868      	ldr	r0, [pc, #416]	; (8014588 <__ieee754_fmod+0x218>)
 80143e6:	4672      	mov	r2, lr
 80143e8:	2a00      	cmp	r2, #0
 80143ea:	dc3d      	bgt.n	8014468 <__ieee754_fmod+0xf8>
 80143ec:	4a64      	ldr	r2, [pc, #400]	; (8014580 <__ieee754_fmod+0x210>)
 80143ee:	402a      	ands	r2, r5
 80143f0:	2a00      	cmp	r2, #0
 80143f2:	d155      	bne.n	80144a0 <__ieee754_fmod+0x130>
 80143f4:	2f00      	cmp	r7, #0
 80143f6:	d149      	bne.n	801448c <__ieee754_fmod+0x11c>
 80143f8:	46b0      	mov	r8, r6
 80143fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80143fe:	f1b8 0f00 	cmp.w	r8, #0
 8014402:	dc3f      	bgt.n	8014484 <__ieee754_fmod+0x114>
 8014404:	f8df 8184 	ldr.w	r8, [pc, #388]	; 801458c <__ieee754_fmod+0x21c>
 8014408:	4540      	cmp	r0, r8
 801440a:	db4d      	blt.n	80144a8 <__ieee754_fmod+0x138>
 801440c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014414:	f8df e174 	ldr.w	lr, [pc, #372]	; 801458c <__ieee754_fmod+0x21c>
 8014418:	4572      	cmp	r2, lr
 801441a:	db59      	blt.n	80144d0 <__ieee754_fmod+0x160>
 801441c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014420:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8014424:	1a80      	subs	r0, r0, r2
 8014426:	1b5e      	subs	r6, r3, r5
 8014428:	eba1 070c 	sub.w	r7, r1, ip
 801442c:	2800      	cmp	r0, #0
 801442e:	d165      	bne.n	80144fc <__ieee754_fmod+0x18c>
 8014430:	4561      	cmp	r1, ip
 8014432:	bf38      	it	cc
 8014434:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014438:	2e00      	cmp	r6, #0
 801443a:	bfa4      	itt	ge
 801443c:	4639      	movge	r1, r7
 801443e:	4633      	movge	r3, r6
 8014440:	ea53 0001 	orrs.w	r0, r3, r1
 8014444:	d0c3      	beq.n	80143ce <__ieee754_fmod+0x5e>
 8014446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801444a:	db6c      	blt.n	8014526 <__ieee754_fmod+0x1b6>
 801444c:	484f      	ldr	r0, [pc, #316]	; (801458c <__ieee754_fmod+0x21c>)
 801444e:	4282      	cmp	r2, r0
 8014450:	db6f      	blt.n	8014532 <__ieee754_fmod+0x1c2>
 8014452:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014456:	4323      	orrs	r3, r4
 8014458:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801445c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014460:	460c      	mov	r4, r1
 8014462:	ec45 4b10 	vmov	d0, r4, r5
 8014466:	e7a3      	b.n	80143b0 <__ieee754_fmod+0x40>
 8014468:	3801      	subs	r0, #1
 801446a:	0052      	lsls	r2, r2, #1
 801446c:	e7bc      	b.n	80143e8 <__ieee754_fmod+0x78>
 801446e:	4847      	ldr	r0, [pc, #284]	; (801458c <__ieee754_fmod+0x21c>)
 8014470:	02da      	lsls	r2, r3, #11
 8014472:	2a00      	cmp	r2, #0
 8014474:	ddba      	ble.n	80143ec <__ieee754_fmod+0x7c>
 8014476:	3801      	subs	r0, #1
 8014478:	0052      	lsls	r2, r2, #1
 801447a:	e7fa      	b.n	8014472 <__ieee754_fmod+0x102>
 801447c:	1518      	asrs	r0, r3, #20
 801447e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8014482:	e7b3      	b.n	80143ec <__ieee754_fmod+0x7c>
 8014484:	3a01      	subs	r2, #1
 8014486:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801448a:	e7b8      	b.n	80143fe <__ieee754_fmod+0x8e>
 801448c:	4a3f      	ldr	r2, [pc, #252]	; (801458c <__ieee754_fmod+0x21c>)
 801448e:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 8014492:	f1b8 0f00 	cmp.w	r8, #0
 8014496:	ddb5      	ble.n	8014404 <__ieee754_fmod+0x94>
 8014498:	3a01      	subs	r2, #1
 801449a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801449e:	e7f8      	b.n	8014492 <__ieee754_fmod+0x122>
 80144a0:	153a      	asrs	r2, r7, #20
 80144a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80144a6:	e7ad      	b.n	8014404 <__ieee754_fmod+0x94>
 80144a8:	eba8 0100 	sub.w	r1, r8, r0
 80144ac:	291f      	cmp	r1, #31
 80144ae:	dc09      	bgt.n	80144c4 <__ieee754_fmod+0x154>
 80144b0:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 80144b4:	408b      	lsls	r3, r1
 80144b6:	fa2e f808 	lsr.w	r8, lr, r8
 80144ba:	ea48 0303 	orr.w	r3, r8, r3
 80144be:	fa0e f101 	lsl.w	r1, lr, r1
 80144c2:	e7a7      	b.n	8014414 <__ieee754_fmod+0xa4>
 80144c4:	4b32      	ldr	r3, [pc, #200]	; (8014590 <__ieee754_fmod+0x220>)
 80144c6:	1a1b      	subs	r3, r3, r0
 80144c8:	fa0e f303 	lsl.w	r3, lr, r3
 80144cc:	2100      	movs	r1, #0
 80144ce:	e7a1      	b.n	8014414 <__ieee754_fmod+0xa4>
 80144d0:	ebae 0c02 	sub.w	ip, lr, r2
 80144d4:	f1bc 0f1f 	cmp.w	ip, #31
 80144d8:	dc09      	bgt.n	80144ee <__ieee754_fmod+0x17e>
 80144da:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 80144de:	fa07 f70c 	lsl.w	r7, r7, ip
 80144e2:	fa26 f505 	lsr.w	r5, r6, r5
 80144e6:	433d      	orrs	r5, r7
 80144e8:	fa06 fc0c 	lsl.w	ip, r6, ip
 80144ec:	e79a      	b.n	8014424 <__ieee754_fmod+0xb4>
 80144ee:	4d28      	ldr	r5, [pc, #160]	; (8014590 <__ieee754_fmod+0x220>)
 80144f0:	1aad      	subs	r5, r5, r2
 80144f2:	fa06 f505 	lsl.w	r5, r6, r5
 80144f6:	f04f 0c00 	mov.w	ip, #0
 80144fa:	e793      	b.n	8014424 <__ieee754_fmod+0xb4>
 80144fc:	4561      	cmp	r1, ip
 80144fe:	bf38      	it	cc
 8014500:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8014504:	2e00      	cmp	r6, #0
 8014506:	da05      	bge.n	8014514 <__ieee754_fmod+0x1a4>
 8014508:	0fce      	lsrs	r6, r1, #31
 801450a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801450e:	0049      	lsls	r1, r1, #1
 8014510:	3801      	subs	r0, #1
 8014512:	e788      	b.n	8014426 <__ieee754_fmod+0xb6>
 8014514:	ea56 0307 	orrs.w	r3, r6, r7
 8014518:	f43f af59 	beq.w	80143ce <__ieee754_fmod+0x5e>
 801451c:	0ffb      	lsrs	r3, r7, #31
 801451e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014522:	0079      	lsls	r1, r7, #1
 8014524:	e7f4      	b.n	8014510 <__ieee754_fmod+0x1a0>
 8014526:	0fc8      	lsrs	r0, r1, #31
 8014528:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801452c:	0049      	lsls	r1, r1, #1
 801452e:	3a01      	subs	r2, #1
 8014530:	e789      	b.n	8014446 <__ieee754_fmod+0xd6>
 8014532:	1a80      	subs	r0, r0, r2
 8014534:	2814      	cmp	r0, #20
 8014536:	dc0c      	bgt.n	8014552 <__ieee754_fmod+0x1e2>
 8014538:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801453c:	fa03 f202 	lsl.w	r2, r3, r2
 8014540:	40c1      	lsrs	r1, r0
 8014542:	430a      	orrs	r2, r1
 8014544:	4103      	asrs	r3, r0
 8014546:	ea43 0104 	orr.w	r1, r3, r4
 801454a:	4610      	mov	r0, r2
 801454c:	ec41 0b10 	vmov	d0, r0, r1
 8014550:	e72e      	b.n	80143b0 <__ieee754_fmod+0x40>
 8014552:	281f      	cmp	r0, #31
 8014554:	dc07      	bgt.n	8014566 <__ieee754_fmod+0x1f6>
 8014556:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801455a:	40c1      	lsrs	r1, r0
 801455c:	fa03 f202 	lsl.w	r2, r3, r2
 8014560:	430a      	orrs	r2, r1
 8014562:	4623      	mov	r3, r4
 8014564:	e7ef      	b.n	8014546 <__ieee754_fmod+0x1d6>
 8014566:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801456a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801456e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8014572:	32e2      	adds	r2, #226	; 0xe2
 8014574:	fa43 f202 	asr.w	r2, r3, r2
 8014578:	e7f3      	b.n	8014562 <__ieee754_fmod+0x1f2>
 801457a:	bf00      	nop
 801457c:	7fefffff 	.word	0x7fefffff
 8014580:	7ff00000 	.word	0x7ff00000
 8014584:	08014758 	.word	0x08014758
 8014588:	fffffbed 	.word	0xfffffbed
 801458c:	fffffc02 	.word	0xfffffc02
 8014590:	fffffbe2 	.word	0xfffffbe2

08014594 <_init>:
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	bf00      	nop
 8014598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801459a:	bc08      	pop	{r3}
 801459c:	469e      	mov	lr, r3
 801459e:	4770      	bx	lr

080145a0 <_fini>:
 80145a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a2:	bf00      	nop
 80145a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145a6:	bc08      	pop	{r3}
 80145a8:	469e      	mov	lr, r3
 80145aa:	4770      	bx	lr
