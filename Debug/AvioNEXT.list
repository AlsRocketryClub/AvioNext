
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dcc8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  0801df98  0801df98  0002df98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e9f0  0801e9f0  0002e9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e9f8  0801e9f8  0002e9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e9fc  0801e9fc  0002e9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801ea00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000337c  240002c8  0801ecc8  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003644  0801ecc8  00033644  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00038474  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000677d  00000000  00000000  000687ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e50  00000000  00000000  0006ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000023f5  00000000  00000000  00071d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000bd2d  00000000  00000000  00074175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000407ac  00000000  00000000  0007fea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180e02  00000000  00000000  000c064e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000dcac  00000000  00000000  00241450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0024f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801df80 	.word	0x0801df80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801df80 	.word	0x0801df80

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b24 <setServo+0x80>
 8000ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000abc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b28 <setServo+0x84>
 8000ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b2c <setServo+0x88>
 8000ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad0:	ee17 3a90 	vmov	r3, s15
 8000ad4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d81a      	bhi.n	8000b14 <setServo+0x70>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <setServo+0x40>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000afd 	.word	0x08000afd
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b0d 	.word	0x08000b0d
	case 1:
		TIM4->CCR4 = timerVal;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <setServo+0x8c>)
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000afa:	e00c      	b.n	8000b16 <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <setServo+0x8c>)
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b02:	e008      	b.n	8000b16 <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <setServo+0x8c>)
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b0a:	e004      	b.n	8000b16 <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b0c:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <setServo+0x8c>)
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b12:	e000      	b.n	8000b16 <setServo+0x72>

	default:
		break;
 8000b14:	bf00      	nop
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	42c80000 	.word	0x42c80000
 8000b28:	457a0000 	.word	0x457a0000
 8000b2c:	453b8000 	.word	0x453b8000
 8000b30:	40000800 	.word	0x40000800

08000b34 <setLEDs>:

void setLEDs(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	; 0x38
 8000b38:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b3e:	e181      	b.n	8000e44 <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b40:	4aa1      	ldr	r2, [pc, #644]	; (8000dc8 <setLEDs+0x294>)
 8000b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f200 8177 	bhi.w	8000e3c <setLEDs+0x308>
 8000b4e:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <setLEDs+0x20>)
 8000b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b54:	08000b65 	.word	0x08000b65
 8000b58:	08000c15 	.word	0x08000c15
 8000b5c:	08000cc5 	.word	0x08000cc5
 8000b60:	08000d75 	.word	0x08000d75
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
 8000b68:	e042      	b.n	8000bf0 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6e:	e039      	b.n	8000be4 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b70:	4996      	ldr	r1, [pc, #600]	; (8000dcc <setLEDs+0x298>)
 8000b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b86:	fa41 f202 	asr.w	r2, r1, r2
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d013      	beq.n	8000bb8 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	00da      	lsls	r2, r3, #3
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	18d1      	adds	r1, r2, r3
 8000b98:	4a8b      	ldr	r2, [pc, #556]	; (8000dc8 <setLEDs+0x294>)
 8000b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	440b      	add	r3, r1
								+ 8] = 60;
 8000bac:	3308      	adds	r3, #8
 8000bae:	4a88      	ldr	r2, [pc, #544]	; (8000dd0 <setLEDs+0x29c>)
 8000bb0:	213c      	movs	r1, #60	; 0x3c
 8000bb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bb6:	e012      	b.n	8000bde <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	00da      	lsls	r2, r3, #3
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	4a81      	ldr	r2, [pc, #516]	; (8000dc8 <setLEDs+0x294>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
								+ 8] = 30;
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4a7e      	ldr	r2, [pc, #504]	; (8000dd0 <setLEDs+0x29c>)
 8000bd8:	211e      	movs	r1, #30
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	3301      	adds	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	ddc2      	ble.n	8000b70 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bec:	3301      	adds	r3, #1
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	ddb9      	ble.n	8000b6a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bfa:	e007      	b.n	8000c0c <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000bfc:	4a74      	ldr	r2, [pc, #464]	; (8000dd0 <setLEDs+0x29c>)
 8000bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c00:	2100      	movs	r1, #0
 8000c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c0e:	2bb1      	cmp	r3, #177	; 0xb1
 8000c10:	ddf4      	ble.n	8000bfc <setLEDs+0xc8>
			}
			break;
 8000c12:	e114      	b.n	8000e3e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
 8000c18:	e042      	b.n	8000ca0 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	e039      	b.n	8000c94 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c20:	496a      	ldr	r1, [pc, #424]	; (8000dcc <setLEDs+0x298>)
 8000c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c24:	4613      	mov	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4413      	add	r3, r2
 8000c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	6a3a      	ldr	r2, [r7, #32]
 8000c36:	fa41 f202 	asr.w	r2, r1, r2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	00da      	lsls	r2, r3, #3
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	18d1      	adds	r1, r2, r3
 8000c48:	4a5f      	ldr	r2, [pc, #380]	; (8000dc8 <setLEDs+0x294>)
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4413      	add	r3, r2
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
								+ 8] = 60;
 8000c5c:	3308      	adds	r3, #8
 8000c5e:	4a5d      	ldr	r2, [pc, #372]	; (8000dd4 <setLEDs+0x2a0>)
 8000c60:	213c      	movs	r1, #60	; 0x3c
 8000c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c66:	e012      	b.n	8000c8e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	00da      	lsls	r2, r3, #3
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	18d1      	adds	r1, r2, r3
 8000c70:	4a55      	ldr	r2, [pc, #340]	; (8000dc8 <setLEDs+0x294>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
								+ 8] = 30;
 8000c84:	3308      	adds	r3, #8
 8000c86:	4a53      	ldr	r2, [pc, #332]	; (8000dd4 <setLEDs+0x2a0>)
 8000c88:	211e      	movs	r1, #30
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	3301      	adds	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	ddc2      	ble.n	8000c20 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	ddb9      	ble.n	8000c1a <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e007      	b.n	8000cbc <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <setLEDs+0x2a0>)
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	2bb1      	cmp	r3, #177	; 0xb1
 8000cc0:	ddf4      	ble.n	8000cac <setLEDs+0x178>
			}
			break;
 8000cc2:	e0bc      	b.n	8000e3e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	e042      	b.n	8000d50 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e039      	b.n	8000d44 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cd0:	493e      	ldr	r1, [pc, #248]	; (8000dcc <setLEDs+0x298>)
 8000cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	fa41 f202 	asr.w	r2, r1, r2
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	00da      	lsls	r2, r3, #3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	18d1      	adds	r1, r2, r3
 8000cf8:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <setLEDs+0x294>)
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4413      	add	r3, r2
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
								+ 8] = 60;
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <setLEDs+0x2a4>)
 8000d10:	213c      	movs	r1, #60	; 0x3c
 8000d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d16:	e012      	b.n	8000d3e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <setLEDs+0x294>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
								+ 8] = 30;
 8000d34:	3308      	adds	r3, #8
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <setLEDs+0x2a4>)
 8000d38:	211e      	movs	r1, #30
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	ddc2      	ble.n	8000cd0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	ddb9      	ble.n	8000cca <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d56:	2338      	movs	r3, #56	; 0x38
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e007      	b.n	8000d6c <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <setLEDs+0x2a4>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2100      	movs	r1, #0
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b69      	cmp	r3, #105	; 0x69
 8000d70:	ddf4      	ble.n	8000d5c <setLEDs+0x228>
			}
			break;
 8000d72:	e064      	b.n	8000e3e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e04e      	b.n	8000e18 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	e045      	b.n	8000e0c <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000d80:	4912      	ldr	r1, [pc, #72]	; (8000dcc <setLEDs+0x298>)
 8000d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	fa41 f202 	asr.w	r2, r1, r2
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d01f      	beq.n	8000de0 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	00da      	lsls	r2, r3, #3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	18d1      	adds	r1, r2, r3
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <setLEDs+0x294>)
 8000daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
								+ 8] = 60;
 8000dbc:	3308      	adds	r3, #8
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <setLEDs+0x2a8>)
 8000dc0:	213c      	movs	r1, #60	; 0x3c
 8000dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dc6:	e01e      	b.n	8000e06 <setLEDs+0x2d2>
 8000dc8:	0801e0c4 	.word	0x0801e0c4
 8000dcc:	24000bc4 	.word	0x24000bc4
 8000dd0:	240002e4 	.word	0x240002e4
 8000dd4:	240005ac 	.word	0x240005ac
 8000dd8:	24000874 	.word	0x24000874
 8000ddc:	24000a1c 	.word	0x24000a1c
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	00da      	lsls	r2, r3, #3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	18d1      	adds	r1, r2, r3
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <setLEDs+0x350>)
 8000dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
								+ 8] = 30;
 8000dfc:	3308      	adds	r3, #8
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <setLEDs+0x354>)
 8000e00:	211e      	movs	r1, #30
 8000e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b07      	cmp	r3, #7
 8000e10:	ddb6      	ble.n	8000d80 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	ddad      	ble.n	8000d7a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e1e:	2338      	movs	r3, #56	; 0x38
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e007      	b.n	8000e34 <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <setLEDs+0x354>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b69      	cmp	r3, #105	; 0x69
 8000e38:	ddf4      	ble.n	8000e24 <setLEDs+0x2f0>
			}
			break;
 8000e3a:	e000      	b.n	8000e3e <setLEDs+0x30a>
		default:
			break;
 8000e3c:	bf00      	nop
			i++) {
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	3301      	adds	r3, #1
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e46:	2b0d      	cmp	r3, #13
 8000e48:	f77f ae7a 	ble.w	8000b40 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e4c:	23b2      	movs	r3, #178	; 0xb2
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <setLEDs+0x358>)
 8000e50:	210c      	movs	r1, #12
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <setLEDs+0x35c>)
 8000e54:	f00e fc5e 	bl	800f714 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e58:	23b2      	movs	r3, #178	; 0xb2
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <setLEDs+0x360>)
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <setLEDs+0x364>)
 8000e60:	f00e fc58 	bl	800f714 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e64:	236a      	movs	r3, #106	; 0x6a
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <setLEDs+0x368>)
 8000e68:	2104      	movs	r1, #4
 8000e6a:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <setLEDs+0x36c>)
 8000e6c:	f00e fc52 	bl	800f714 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e70:	236a      	movs	r3, #106	; 0x6a
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <setLEDs+0x354>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <setLEDs+0x36c>)
 8000e78:	f00e fc4c 	bl	800f714 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000e7c:	bf00      	nop
 8000e7e:	3738      	adds	r7, #56	; 0x38
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0801e0c4 	.word	0x0801e0c4
 8000e88:	24000a1c 	.word	0x24000a1c
 8000e8c:	240002e4 	.word	0x240002e4
 8000e90:	2400123c 	.word	0x2400123c
 8000e94:	240005ac 	.word	0x240005ac
 8000e98:	24001158 	.word	0x24001158
 8000e9c:	24000874 	.word	0x24000874
 8000ea0:	240011a4 	.word	0x240011a4

08000ea4 <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoRA_Read_Register+0x48>)
 8000eb6:	f006 fea3 	bl	8007c00 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoRA_Read_Register+0x4c>)
 8000ec2:	f00d fde7 	bl	800ea94 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000ec6:	f107 010f 	add.w	r1, r7, #15
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <LoRA_Read_Register+0x4c>)
 8000ed0:	f00d ffdc 	bl	800ee8c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <LoRA_Read_Register+0x48>)
 8000edc:	f006 fe90 	bl	8007c00 <HAL_GPIO_WritePin>

	return reg_value;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	240010d0 	.word	0x240010d0

08000ef4 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <LoRA_Write_Register+0x54>)
 8000f16:	f006 fe73 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	2364      	movs	r3, #100	; 0x64
 8000f1e:	2201      	movs	r2, #1
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <LoRA_Write_Register+0x58>)
 8000f22:	f00d fdb7 	bl	800ea94 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f26:	1db9      	adds	r1, r7, #6
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <LoRA_Write_Register+0x58>)
 8000f2e:	f00d fdb1 	bl	800ea94 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <LoRA_Write_Register+0x54>)
 8000f3a:	f006 fe61 	bl	8007c00 <HAL_GPIO_WritePin>

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58020000 	.word	0x58020000
 8000f4c:	240010d0 	.word	0x240010d0

08000f50 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff ffcc 	bl	8000ef4 <LoRA_Write_Register>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	17c8      	asrs	r0, r1, #31
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	4603      	mov	r3, r0
 8000f70:	1355      	asrs	r5, r2, #13
 8000f72:	04d4      	lsls	r4, r2, #19
 8000f74:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <LoRA_set_frequency+0x78>)
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff fbdb 	bl	8000738 <__aeabi_uldivmod>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	0c02      	lsrs	r2, r0, #16
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	0c0b      	lsrs	r3, r1, #16
 8000f9e:	b2d3      	uxtb	r3, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f7ff ffa6 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	0a02      	lsrs	r2, r0, #8
 8000fb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fba:	0a0b      	lsrs	r3, r1, #8
 8000fbc:	b2d3      	uxtb	r3, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f7ff ff97 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fc6:	7a3b      	ldrb	r3, [r7, #8]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f7ff ff92 	bl	8000ef4 <LoRA_Write_Register>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd8:	01e84800 	.word	0x01e84800

08000fdc <LoRA_setOCP>:

void LoRA_idle() {
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 8000fe6:	231b      	movs	r3, #27
 8000fe8:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b78      	cmp	r3, #120	; 0x78
 8000fee:	d809      	bhi.n	8001004 <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3b2d      	subs	r3, #45	; 0x2d
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <LoRA_setOCP+0x60>)
 8000ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffa:	1052      	asrs	r2, r2, #1
 8000ffc:	17db      	asrs	r3, r3, #31
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e00b      	b.n	800101c <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2bf0      	cmp	r3, #240	; 0xf0
 8001008:	d808      	bhi.n	800101c <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	331e      	adds	r3, #30
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <LoRA_setOCP+0x60>)
 8001010:	fb82 1203 	smull	r1, r2, r2, r3
 8001014:	1092      	asrs	r2, r2, #2
 8001016:	17db      	asrs	r3, r3, #31
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	200b      	movs	r0, #11
 800102e:	f7ff ff61 	bl	8000ef4 <LoRA_Write_Register>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	66666667 	.word	0x66666667

08001040 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b11      	cmp	r3, #17
 800104c:	dd0f      	ble.n	800106e <LoRA_setTxPower+0x2e>
		if (level > 20) {
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b14      	cmp	r3, #20
 8001052:	dd01      	ble.n	8001058 <LoRA_setTxPower+0x18>
			level = 20;
 8001054:	2314      	movs	r3, #20
 8001056:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b03      	subs	r3, #3
 800105c:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 800105e:	2187      	movs	r1, #135	; 0x87
 8001060:	204d      	movs	r0, #77	; 0x4d
 8001062:	f7ff ff47 	bl	8000ef4 <LoRA_Write_Register>
		LoRA_setOCP(140);
 8001066:	208c      	movs	r0, #140	; 0x8c
 8001068:	f7ff ffb8 	bl	8000fdc <LoRA_setOCP>
 800106c:	e00b      	b.n	8001086 <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	dc01      	bgt.n	8001078 <LoRA_setTxPower+0x38>
			level = 2;
 8001074:	2302      	movs	r3, #2
 8001076:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 8001078:	2184      	movs	r1, #132	; 0x84
 800107a:	204d      	movs	r0, #77	; 0x4d
 800107c:	f7ff ff3a 	bl	8000ef4 <LoRA_Write_Register>
		LoRA_setOCP(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f7ff ffab 	bl	8000fdc <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3b02      	subs	r3, #2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b25b      	sxtb	r3, r3
 8001090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001094:	b25b      	sxtb	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4619      	mov	r1, r3
 800109a:	2009      	movs	r0, #9
 800109c:	f7ff ff2a 	bl	8000ef4 <LoRA_Write_Register>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LoRA_begin>:
void LoRA_explicit_header_mode() {
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2101      	movs	r1, #1
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <LoRA_begin+0x70>)
 80010b6:	f006 fda3 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c0:	4816      	ldr	r0, [pc, #88]	; (800111c <LoRA_begin+0x74>)
 80010c2:	f006 fd9d 	bl	8007c00 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 80010c6:	2042      	movs	r0, #66	; 0x42
 80010c8:	f7ff feec 	bl	8000ea4 <LoRA_Read_Register>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 80010d0:	f7ff ff3e 	bl	8000f50 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <LoRA_begin+0x78>)
 80010d6:	f7ff ff43 	bl	8000f60 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 80010da:	2100      	movs	r1, #0
 80010dc:	200f      	movs	r0, #15
 80010de:	f7ff ff09 	bl	8000ef4 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 80010e2:	2100      	movs	r1, #0
 80010e4:	200e      	movs	r0, #14
 80010e6:	f7ff ff05 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 80010ea:	200c      	movs	r0, #12
 80010ec:	f7ff feda 	bl	8000ea4 <LoRA_Read_Register>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f043 0303 	orr.w	r3, r3, #3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	200c      	movs	r0, #12
 80010fc:	f7ff fefa 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001100:	2104      	movs	r1, #4
 8001102:	2026      	movs	r0, #38	; 0x26
 8001104:	f7ff fef6 	bl	8000ef4 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001108:	2011      	movs	r0, #17
 800110a:	f7ff ff99 	bl	8001040 <LoRA_setTxPower>

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	58020c00 	.word	0x58020c00
 800111c:	58020000 	.word	0x58020000
 8001120:	33bca100 	.word	0x33bca100

08001124 <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	482d      	ldr	r0, [pc, #180]	; (80011e8 <disarm+0xc4>)
 8001132:	f006 fd65 	bl	8007c00 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2102      	movs	r1, #2
 800113a:	482c      	ldr	r0, [pc, #176]	; (80011ec <disarm+0xc8>)
 800113c:	f006 fd60 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	482a      	ldr	r0, [pc, #168]	; (80011f0 <disarm+0xcc>)
 8001148:	f006 fd5a 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001152:	4827      	ldr	r0, [pc, #156]	; (80011f0 <disarm+0xcc>)
 8001154:	f006 fd54 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115e:	4824      	ldr	r0, [pc, #144]	; (80011f0 <disarm+0xcc>)
 8001160:	f006 fd4e 	bl	8007c00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <disarm+0xd0>)
 800116a:	f006 fd49 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	4820      	ldr	r0, [pc, #128]	; (80011f8 <disarm+0xd4>)
 8001176:	f006 fd43 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	481d      	ldr	r0, [pc, #116]	; (80011f8 <disarm+0xd4>)
 8001182:	f006 fd3d 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	481a      	ldr	r0, [pc, #104]	; (80011f8 <disarm+0xd4>)
 800118e:	f006 fd37 	bl	8007c00 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001192:	210c      	movs	r1, #12
 8001194:	4819      	ldr	r0, [pc, #100]	; (80011fc <disarm+0xd8>)
 8001196:	f00e f9a1 	bl	800f4dc <HAL_TIM_PWM_Start>
	setServo(1, 0);
 800119a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001200 <disarm+0xdc>
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fc80 	bl	8000aa4 <setServo>

	LED_Color_Data[7][0] = 255;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <disarm+0xe0>)
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <disarm+0xe0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <disarm+0xe0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <disarm+0xe0>)
 80011b8:	22ff      	movs	r2, #255	; 0xff
 80011ba:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <disarm+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <disarm+0xe0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	setLEDs();
 80011c8:	f7ff fcb4 	bl	8000b34 <setLEDs>

	strcpy(state, "DISARMED");
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <disarm+0xe4>)
 80011d0:	461a      	mov	r2, r3
 80011d2:	460b      	mov	r3, r1
 80011d4:	cb03      	ldmia	r3!, {r0, r1}
 80011d6:	6010      	str	r0, [r2, #0]
 80011d8:	6051      	str	r1, [r2, #4]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	7213      	strb	r3, [r2, #8]
	return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	58020000 	.word	0x58020000
 80011ec:	58020400 	.word	0x58020400
 80011f0:	58021400 	.word	0x58021400
 80011f4:	58021800 	.word	0x58021800
 80011f8:	58021000 	.word	0x58021000
 80011fc:	240011f0 	.word	0x240011f0
 8001200:	00000000 	.word	0x00000000
 8001204:	24000bc4 	.word	0x24000bc4
 8001208:	0801dfac 	.word	0x0801dfac

0800120c <rand_range>:
	return sqrt(
			vector[0] * vector[0] + vector[1] * vector[1]
					+ vector[2] * vector[2] + vector[3] * vector[3]);
}

uint32_t rand_range(uint32_t a, uint32_t b) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	uint32_t rand = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d914      	bls.n	8001252 <rand_range+0x46>
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4619      	mov	r1, r3
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <rand_range+0x60>)
 8001230:	f00b fd9e 	bl	800cd70 <HAL_RNG_GenerateRandomNumber>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10b      	bne.n	8001252 <rand_range+0x46>
	{
		return a+rand/(MAX/(b-a));
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	68f9      	ldr	r1, [r7, #12]
 8001244:	fbb1 f3f3 	udiv	r3, r1, r3
 8001248:	fbb2 f2f3 	udiv	r2, r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	e008      	b.n	8001264 <rand_range+0x58>
	}
	else
	{
		HAL_Delay(100);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f002 fa3a 	bl	80036cc <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8001258:	210a      	movs	r1, #10
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <rand_range+0x64>)
 800125c:	f017 ff68 	bl	8019130 <CDC_Transmit_HS>
	}
	return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	24000f30 	.word	0x24000f30
 8001270:	0801dfc0 	.word	0x0801dfc0

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f002 f993 	bl	80035a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f903 	bl	800148c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001286:	f000 f979 	bl	800157c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 ff3b 	bl	8002104 <MX_GPIO_Init>
  MX_DMA_Init();
 800128e:	f000 fed9 	bl	8002044 <MX_DMA_Init>
  MX_SPI3_Init();
 8001292:	f000 fc0f 	bl	8001ab4 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001296:	f000 fa89 	bl	80017ac <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 800129a:	f000 fe87 	bl	8001fac <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800129e:	f000 f99f 	bl	80015e0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80012a2:	f000 fd19 	bl	8001cd8 <MX_TIM4_Init>
  MX_ADC3_Init();
 80012a6:	f000 fa13 	bl	80016d0 <MX_ADC3_Init>
  MX_SPI2_Init();
 80012aa:	f000 fbad 	bl	8001a08 <MX_SPI2_Init>
  MX_I2C2_Init();
 80012ae:	f000 fae1 	bl	8001874 <MX_I2C2_Init>
  MX_TIM2_Init();
 80012b2:	f000 fc55 	bl	8001b60 <MX_TIM2_Init>
  MX_TIM5_Init();
 80012b6:	f000 fd8b 	bl	8001dd0 <MX_TIM5_Init>
  MX_TIM3_Init();
 80012ba:	f000 fca9 	bl	8001c10 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80012be:	f017 fe77 	bl	8018fb0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80012c2:	f000 fb4b 	bl	800195c <MX_SPI1_Init>
  MX_UART4_Init();
 80012c6:	f000 fe25 	bl	8001f14 <MX_UART4_Init>
  MX_FATFS_Init();
 80012ca:	f012 fef9 	bl	80140c0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80012ce:	f000 fb27 	bl	8001920 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80012d2:	f000 fdd7 	bl	8001e84 <MX_TIM13_Init>
  MX_TIM14_Init();
 80012d6:	f000 fdf9 	bl	8001ecc <MX_TIM14_Init>
  MX_RNG_Init();
 80012da:	f000 fb0b 	bl	80018f4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80012de:	f642 0358 	movw	r3, #10328	; 0x2858
 80012e2:	443b      	add	r3, r7
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff1d 	bl	8001124 <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <main+0x1ec>)
 80012ec:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80012f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80012f4:	443b      	add	r3, r7
 80012f6:	2201      	movs	r2, #1
 80012f8:	495a      	ldr	r1, [pc, #360]	; (8001464 <main+0x1f0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f017 fa7c 	bl	80187f8 <f_mount>
 8001300:	4603      	mov	r3, r0
 8001302:	f642 0293 	movw	r2, #10387	; 0x2893
 8001306:	443a      	add	r2, r7
 8001308:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800130a:	210c      	movs	r1, #12
 800130c:	4856      	ldr	r0, [pc, #344]	; (8001468 <main+0x1f4>)
 800130e:	f00e f8e5 	bl	800f4dc <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001312:	2201      	movs	r2, #1
 8001314:	2104      	movs	r1, #4
 8001316:	4855      	ldr	r0, [pc, #340]	; (800146c <main+0x1f8>)
 8001318:	f006 fc72 	bl	8007c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	2108      	movs	r1, #8
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <main+0x1f8>)
 8001322:	f006 fc6d 	bl	8007c00 <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <main+0x1fc>)
 8001328:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800132c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001330:	443b      	add	r3, r7
 8001332:	2204      	movs	r2, #4
 8001334:	494f      	ldr	r1, [pc, #316]	; (8001474 <main+0x200>)
 8001336:	4618      	mov	r0, r3
 8001338:	f017 faa4 	bl	8018884 <f_open>
 800133c:	4603      	mov	r3, r0
 800133e:	f642 0293 	movw	r2, #10387	; 0x2893
 8001342:	443a      	add	r2, r7
 8001344:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <main+0x1fc>)
 8001348:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800134c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001350:	443b      	add	r3, r7
 8001352:	4618      	mov	r0, r3
 8001354:	f017 fce0 	bl	8018d18 <f_close>

	LoRA_begin(868000000);
 8001358:	4847      	ldr	r0, [pc, #284]	; (8001478 <main+0x204>)
 800135a:	f7ff fea5 	bl	80010a8 <LoRA_begin>
		}
		HAL_Delay(1000);
		LoRA_sendPacket("SENDIT");
	}*/

	int connected = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f642 0298 	movw	r2, #10392	; 0x2898
 8001364:	443a      	add	r2, r7
 8001366:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f642 0294 	movw	r2, #10388	; 0x2894
 800136e:	443a      	add	r2, r7
 8001370:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	f642 029c 	movw	r2, #10396	; 0x289c
 8001378:	443a      	add	r2, r7
 800137a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	//char buffered_debug_data[MAX_PACKET_LENGTH];
	char state[MAX_PACKET_LENGTH] = "DISARMED";
 800137c:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8001380:	f5a3 74da 	sub.w	r4, r3, #436	; 0x1b4
 8001384:	4a3d      	ldr	r2, [pc, #244]	; (800147c <main+0x208>)
 8001386:	4623      	mov	r3, r4
 8001388:	6810      	ldr	r0, [r2, #0]
 800138a:	6851      	ldr	r1, [r2, #4]
 800138c:	c303      	stmia	r3!, {r0, r1}
 800138e:	7a12      	ldrb	r2, [r2, #8]
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	f104 0309 	add.w	r3, r4, #9
 8001396:	22f1      	movs	r2, #241	; 0xf1
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f019 fa7f 	bl	801a89e <memset>
	char command[MAX_PACKET_LENGTH];
	char recieved_packet[MAX_PACKET_LENGTH] = "";
 80013a0:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80013a4:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	3304      	adds	r3, #4
 80013ae:	22f6      	movs	r2, #246	; 0xf6
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f019 fa73 	bl	801a89e <memset>
	char previous_packet[MAX_PACKET_LENGTH];
	char response_packet[MAX_PACKET_LENGTH];
	char packets_streamed[MAX_PACKET_LENGTH];
	int max_packet_count = 0;
 80013b8:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80013bc:	f2a3 63a4 	subw	r3, r3, #1700	; 0x6a4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
	int packetId;
	char communication_state[MAX_PACKET_LENGTH] = "TRANSITIONING";
 80013c4:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 80013c8:	f5a3 65f4 	sub.w	r5, r3, #1952	; 0x7a0
 80013cc:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <main+0x20c>)
 80013ce:	462b      	mov	r3, r5
 80013d0:	4614      	mov	r4, r2
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	6861      	ldr	r1, [r4, #4]
 80013d6:	68a2      	ldr	r2, [r4, #8]
 80013d8:	c307      	stmia	r3!, {r0, r1, r2}
 80013da:	89a2      	ldrh	r2, [r4, #12]
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	f105 030e 	add.w	r3, r5, #14
 80013e2:	22ec      	movs	r2, #236	; 0xec
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f019 fa59 	bl	801a89e <memset>
		//sprintf(data, "%x", version);
		//CDC_Transmit_HS(data, strlen(data));
		LoRA_sendPacket("hello\n");
		HAL_Delay(1000);
	}*/
	uint32_t previousTime = HAL_GetTick();
 80013ec:	f002 f962 	bl	80036b4 <HAL_GetTick>
 80013f0:	f642 03a0 	movw	r3, #10400	; 0x28a0
 80013f4:	443b      	add	r3, r7
 80013f6:	6018      	str	r0, [r3, #0]
	uint32_t debugTime = HAL_GetTick();
 80013f8:	f002 f95c 	bl	80036b4 <HAL_GetTick>
 80013fc:	f642 03a4 	movw	r3, #10404	; 0x28a4
 8001400:	443b      	add	r3, r7
 8001402:	6018      	str	r0, [r3, #0]

	while(1) {
		uint32_t rand = rand_range(7, 6);
 8001404:	2106      	movs	r1, #6
 8001406:	2007      	movs	r0, #7
 8001408:	f7ff ff00 	bl	800120c <rand_range>
 800140c:	f642 038c 	movw	r3, #10380	; 0x288c
 8001410:	443b      	add	r3, r7
 8001412:	6018      	str	r0, [r3, #0]
		char randDebug[255];
		sprintf(randDebug, "%d\n", rand);
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <main+0x210>)
 8001416:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800141a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800141e:	443b      	add	r3, r7
 8001420:	f642 028c 	movw	r2, #10380	; 0x288c
 8001424:	443a      	add	r2, r7
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	4917      	ldr	r1, [pc, #92]	; (8001488 <main+0x214>)
 800142a:	4618      	mov	r0, r3
 800142c:	f019 f9d4 	bl	801a7d8 <siprintf>
		HAL_Delay(100);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f002 f94b 	bl	80036cc <HAL_Delay>
		CDC_Transmit_HS(randDebug, strlen(randDebug));
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <main+0x210>)
 8001438:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800143c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001440:	443b      	add	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ffb4 	bl	80003b0 <strlen>
 8001448:	4602      	mov	r2, r0
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <main+0x210>)
 800144c:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8001450:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001454:	443b      	add	r3, r7
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f017 fe69 	bl	8019130 <CDC_Transmit_HS>
	while(1) {
 800145e:	e7d1      	b.n	8001404 <main+0x190>
 8001460:	ffffef78 	.word	0xffffef78
 8001464:	240016ac 	.word	0x240016ac
 8001468:	240011f0 	.word	0x240011f0
 800146c:	58021800 	.word	0x58021800
 8001470:	ffffdf48 	.word	0xffffdf48
 8001474:	0801dfcc 	.word	0x0801dfcc
 8001478:	33bca100 	.word	0x33bca100
 800147c:	0801dfac 	.word	0x0801dfac
 8001480:	0801dfe0 	.word	0x0801dfe0
 8001484:	ffffd758 	.word	0xffffd758
 8001488:	0801dfdc 	.word	0x0801dfdc

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09c      	sub	sp, #112	; 0x70
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	224c      	movs	r2, #76	; 0x4c
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f019 f9ff 	bl	801a89e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2220      	movs	r2, #32
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f019 f9f9 	bl	801a89e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f007 ffbb 	bl	8009428 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <SystemClock_Config+0xec>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014be:	4a2e      	ldr	r2, [pc, #184]	; (8001578 <SystemClock_Config+0xec>)
 80014c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <SystemClock_Config+0xec>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d2:	bf00      	nop
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <SystemClock_Config+0xec>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e0:	d1f8      	bne.n	80014d4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80014e2:	2322      	movs	r3, #34	; 0x22
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f6:	2300      	movs	r3, #0
 80014f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80014fe:	230c      	movs	r3, #12
 8001500:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001506:	2303      	movs	r3, #3
 8001508:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150a:	2302      	movs	r3, #2
 800150c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800150e:	230c      	movs	r3, #12
 8001510:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001512:	2300      	movs	r3, #0
 8001514:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4618      	mov	r0, r3
 8001520:	f007 ffcc 	bl	80094bc <HAL_RCC_OscConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800152a:	f000 ff4f 	bl	80023cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152e:	233f      	movs	r3, #63	; 0x3f
 8001530:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001532:	2303      	movs	r3, #3
 8001534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800153a:	2308      	movs	r3, #8
 800153c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001542:	2340      	movs	r3, #64	; 0x40
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800154c:	2340      	movs	r3, #64	; 0x40
 800154e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fb8b 	bl	8009c70 <HAL_RCC_ClockConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001560:	f000 ff34 	bl	80023cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001564:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001568:	2100      	movs	r1, #0
 800156a:	2000      	movs	r0, #0
 800156c:	f008 fd36 	bl	8009fdc <HAL_RCC_MCOConfig>
}
 8001570:	bf00      	nop
 8001572:	3770      	adds	r7, #112	; 0x70
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58024800 	.word	0x58024800

0800157c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0ae      	sub	sp, #184	; 0xb8
 8001580:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	22b8      	movs	r2, #184	; 0xb8
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f019 f988 	bl	801a89e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800158e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800159a:	2304      	movs	r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800159e:	230c      	movs	r3, #12
 80015a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80015a2:	2304      	movs	r3, #4
 80015a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015ae:	23c0      	movs	r3, #192	; 0xc0
 80015b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f008 ff47 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80015d4:	f000 fefa 	bl	80023cc <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	37b8      	adds	r7, #184	; 0xb8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	463b      	mov	r3, r7
 80015f4:	2224      	movs	r2, #36	; 0x24
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f019 f950 	bl	801a89e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001600:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <MX_ADC1_Init+0xe8>)
 8001602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001606:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800160a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001618:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800161a:	2204      	movs	r2, #4
 800161c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001620:	2200      	movs	r2, #0
 8001622:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001624:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001626:	2200      	movs	r2, #0
 8001628:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800162c:	2201      	movs	r2, #1
 800162e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001640:	2200      	movs	r2, #0
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001646:	2200      	movs	r2, #0
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001652:	2200      	movs	r2, #0
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165e:	4819      	ldr	r0, [pc, #100]	; (80016c4 <MX_ADC1_Init+0xe4>)
 8001660:	f002 fab4 	bl	8003bcc <HAL_ADC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800166a:	f000 feaf 	bl	80023cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001676:	4619      	mov	r1, r3
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <MX_ADC1_Init+0xe4>)
 800167a:	f003 faef 	bl	8004c5c <HAL_ADCEx_MultiModeConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001684:	f000 fea2 	bl	80023cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_ADC1_Init+0xec>)
 800168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800168c:	2306      	movs	r3, #6
 800168e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001690:	2303      	movs	r3, #3
 8001692:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001694:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001698:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800169a:	2304      	movs	r3, #4
 800169c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_ADC1_Init+0xe4>)
 80016ae:	f002 fc95 	bl	8003fdc <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80016b8:	f000 fe88 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000c6c 	.word	0x24000c6c
 80016c8:	40022000 	.word	0x40022000
 80016cc:	3ac04000 	.word	0x3ac04000

080016d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2224      	movs	r2, #36	; 0x24
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f019 f8de 	bl	801a89e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <MX_ADC3_Init+0xd0>)
 80016e4:	4a2f      	ldr	r2, [pc, #188]	; (80017a4 <MX_ADC3_Init+0xd4>)
 80016e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <MX_ADC3_Init+0xd0>)
 80016ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80016ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <MX_ADC3_Init+0xd0>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <MX_ADC3_Init+0xd0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <MX_ADC3_Init+0xd0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001704:	2204      	movs	r2, #4
 8001706:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800170a:	2200      	movs	r2, #0
 800170c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001710:	2200      	movs	r2, #0
 8001712:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001716:	2201      	movs	r2, #1
 8001718:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001724:	2200      	movs	r2, #0
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800172a:	2200      	movs	r2, #0
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001738:	2200      	movs	r2, #0
 800173a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800173e:	2200      	movs	r2, #0
 8001740:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_ADC3_Init+0xd0>)
 8001758:	f002 fa38 	bl	8003bcc <HAL_ADC_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001762:	f000 fe33 	bl	80023cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_ADC3_Init+0xd8>)
 8001768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176a:	2306      	movs	r3, #6
 800176c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001772:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001776:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001778:	2304      	movs	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_ADC3_Init+0xd0>)
 800178a:	f002 fc27 	bl	8003fdc <HAL_ADC_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001794:	f000 fe1a 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	24000cdc 	.word	0x24000cdc
 80017a4:	58026000 	.word	0x58026000
 80017a8:	04300002 	.word	0x04300002

080017ac <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017b2:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <MX_FDCAN3_Init+0xc4>)
 80017b4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017d6:	2210      	movs	r2, #16
 80017d8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017dc:	2201      	movs	r2, #1
 80017de:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_FDCAN3_Init+0xc0>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001800:	2201      	movs	r2, #1
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800180c:	2200      	movs	r2, #0
 800180e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001812:	2200      	movs	r2, #0
 8001814:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001818:	2200      	movs	r2, #0
 800181a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800181e:	2204      	movs	r2, #4
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001824:	2200      	movs	r2, #0
 8001826:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800182a:	2204      	movs	r2, #4
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001830:	2200      	movs	r2, #0
 8001832:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001836:	2204      	movs	r2, #4
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800183c:	2200      	movs	r2, #0
 800183e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001840:	4b0a      	ldr	r3, [pc, #40]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001842:	2200      	movs	r2, #0
 8001844:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001848:	2200      	movs	r2, #0
 800184a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800184e:	2200      	movs	r2, #0
 8001850:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_FDCAN3_Init+0xc0>)
 8001854:	2204      	movs	r2, #4
 8001856:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <MX_FDCAN3_Init+0xc0>)
 800185a:	f005 fcc5 	bl	80071e8 <HAL_FDCAN_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001864:	f000 fdb2 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	24000e3c 	.word	0x24000e3c
 8001870:	4000d400 	.word	0x4000d400

08001874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_I2C2_Init+0x74>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <MX_I2C2_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <MX_I2C2_Init+0x7c>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_I2C2_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C2_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018b0:	f006 f9c0 	bl	8007c34 <HAL_I2C_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f000 fd87 	bl	80023cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018c2:	f006 fa61 	bl	8007d88 <HAL_I2CEx_ConfigAnalogFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 fd7e 	bl	80023cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018d4:	f006 faa3 	bl	8007e1e <HAL_I2CEx_ConfigDigitalFilter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 fd75 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	24000edc 	.word	0x24000edc
 80018ec:	40005800 	.word	0x40005800
 80018f0:	20303e5d 	.word	0x20303e5d

080018f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_RNG_Init+0x24>)
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <MX_RNG_Init+0x28>)
 80018fc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_RNG_Init+0x24>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_RNG_Init+0x24>)
 8001906:	f00b f98f 	bl	800cc28 <HAL_RNG_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001910:	f000 fd5c 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	24000f30 	.word	0x24000f30
 800191c:	48021800 	.word	0x48021800

08001920 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <MX_SDMMC2_SD_Init+0x38>)
 8001928:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 8001938:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <MX_SDMMC2_SD_Init+0x34>)
 8001946:	2208      	movs	r2, #8
 8001948:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	24000f44 	.word	0x24000f44
 8001958:	48022400 	.word	0x48022400

0800195c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001962:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <MX_SPI1_Init+0xa8>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001968:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800196c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001976:	2207      	movs	r2, #7
 8001978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <MX_SPI1_Init+0xa4>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800198c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001990:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_SPI1_Init+0xa4>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_SPI1_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_SPI1_Init+0xa4>)
 80019ee:	f00c ff2d 	bl	800e84c <HAL_SPI_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80019f8:	f000 fce8 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	24000fc0 	.word	0x24000fc0
 8001a04:	40013000 	.word	0x40013000

08001a08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a0e:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <MX_SPI2_Init+0xa8>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a14:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a18:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a22:	2207      	movs	r2, #7
 8001a24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a38:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_SPI2_Init+0xa4>)
 8001a9a:	f00c fed7 	bl	800e84c <HAL_SPI_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001aa4:	f000 fc92 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	24001048 	.word	0x24001048
 8001ab0:	40003800 	.word	0x40003800

08001ab4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001aba:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <MX_SPI3_Init+0xa8>)
 8001abc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ac0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ac4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ace:	2207      	movs	r2, #7
 8001ad0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ae0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001ae8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001aec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_SPI3_Init+0xa4>)
 8001b46:	f00c fe81 	bl	800e84c <HAL_SPI_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001b50:	f000 fc3c 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	240010d0 	.word	0x240010d0
 8001b5c:	40003c00 	.word	0x40003c00

08001b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	615a      	str	r2, [r3, #20]
 8001b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001b98:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001b9a:	225a      	movs	r2, #90	; 0x5a
 8001b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001baa:	4818      	ldr	r0, [pc, #96]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001bac:	f00d fc3e 	bl	800f42c <HAL_TIM_PWM_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001bb6:	f000 fc09 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4810      	ldr	r0, [pc, #64]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001bca:	f00e fec5 	bl	8010958 <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001bd4:	f000 fbfa 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd8:	2360      	movs	r3, #96	; 0x60
 8001bda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	2208      	movs	r2, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001bf0:	f00e f8e4 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001bfa:	f000 fbe7 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <MX_TIM2_Init+0xac>)
 8001c00:	f001 f954 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	24001158 	.word	0x24001158

08001c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <MX_TIM3_Init+0xc4>)
 8001c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c48:	225a      	movs	r2, #90	; 0x5a
 8001c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c58:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c5a:	f00d fbe7 	bl	800f42c <HAL_TIM_PWM_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c64:	f000 fbb2 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c78:	f00e fe6e 	bl	8010958 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c82:	f000 fba3 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c86:	2360      	movs	r3, #96	; 0x60
 8001c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001c9e:	f00e f88d 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ca8:	f000 fb90 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001cb4:	f00e f882 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cbe:	f000 fb85 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc2:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <MX_TIM3_Init+0xc0>)
 8001cc4:	f001 f8f2 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	240011a4 	.word	0x240011a4
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001cfe:	4a33      	ldr	r2, [pc, #204]	; (8001dcc <MX_TIM4_Init+0xf4>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d04:	221d      	movs	r2, #29
 8001d06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d10:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d22:	4829      	ldr	r0, [pc, #164]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d24:	f00d fb82 	bl	800f42c <HAL_TIM_PWM_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d2e:	f000 fb4d 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4821      	ldr	r0, [pc, #132]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d42:	f00e fe09 	bl	8010958 <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d4c:	f000 fb3e 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d50:	2360      	movs	r3, #96	; 0x60
 8001d52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d60:	463b      	mov	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d68:	f00e f828 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d72:	f000 fb2b 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d76:	463b      	mov	r3, r7
 8001d78:	2204      	movs	r2, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4812      	ldr	r0, [pc, #72]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d7e:	f00e f81d 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001d88:	f000 fb20 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001d94:	f00e f812 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001d9e:	f000 fb15 	bl	80023cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da2:	463b      	mov	r3, r7
 8001da4:	220c      	movs	r2, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001daa:	f00e f807 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001db4:	f000 fb0a 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <MX_TIM4_Init+0xf0>)
 8001dba:	f001 f877 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	240011f0 	.word	0x240011f0
 8001dcc:	40000800 	.word	0x40000800

08001dd0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de2:	463b      	mov	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]
 8001df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001df6:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <MX_TIM5_Init+0xb0>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e08:	225a      	movs	r2, #90	; 0x5a
 8001e0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e18:	4818      	ldr	r0, [pc, #96]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e1a:	f00d fb07 	bl	800f42c <HAL_TIM_PWM_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e24:	f000 fad2 	bl	80023cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4811      	ldr	r0, [pc, #68]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e38:	f00e fd8e 	bl	8010958 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e42:	f000 fac3 	bl	80023cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e46:	2360      	movs	r3, #96	; 0x60
 8001e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e56:	463b      	mov	r3, r7
 8001e58:	220c      	movs	r2, #12
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e5e:	f00d ffad 	bl	800fdbc <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e68:	f000 fab0 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM5_Init+0xac>)
 8001e6e:	f001 f81d 	bl	8002eac <HAL_TIM_MspPostInit>

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2400123c 	.word	0x2400123c
 8001e80:	40000c00 	.word	0x40000c00

08001e84 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <MX_TIM13_Init+0x44>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001e90:	2263      	movs	r2, #99	; 0x63
 8001e92:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_TIM13_Init+0x40>)
 8001eb0:	f00d fa65 	bl	800f37e <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001eba:	f000 fa87 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	24001288 	.word	0x24001288
 8001ec8:	40001c00 	.word	0x40001c00

08001ecc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <MX_TIM14_Init+0x44>)
 8001ed4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ed8:	2263      	movs	r2, #99	; 0x63
 8001eda:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_TIM14_Init+0x40>)
 8001ef8:	f00d fa41 	bl	800f37e <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001f02:	f000 fa63 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	240012d4 	.word	0x240012d4
 8001f10:	40002000 	.word	0x40002000

08001f14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f1a:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <MX_UART4_Init+0x94>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f5c:	4811      	ldr	r0, [pc, #68]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f5e:	f00e fdb5 	bl	8010acc <HAL_UART_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f68:	f000 fa30 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f70:	f00f febb 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f7a:	f000 fa27 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f82:	f00f fef0 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f8c:	f000 fa1e 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_UART4_Init+0x90>)
 8001f92:	f00f fe71 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f9c:	f000 fa16 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	24001578 	.word	0x24001578
 8001fa8:	40004c00 	.word	0x40004c00

08001fac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <MX_USART6_UART_Init+0x94>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff4:	4811      	ldr	r0, [pc, #68]	; (800203c <MX_USART6_UART_Init+0x90>)
 8001ff6:	f00e fd69 	bl	8010acc <HAL_UART_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002000:	f000 f9e4 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002004:	2100      	movs	r1, #0
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <MX_USART6_UART_Init+0x90>)
 8002008:	f00f fe6f 	bl	8011cea <HAL_UARTEx_SetTxFifoThreshold>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002012:	f000 f9db 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <MX_USART6_UART_Init+0x90>)
 800201a:	f00f fea4 	bl	8011d66 <HAL_UARTEx_SetRxFifoThreshold>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002024:	f000 f9d2 	bl	80023cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_USART6_UART_Init+0x90>)
 800202a:	f00f fe25 	bl	8011c78 <HAL_UARTEx_DisableFifoMode>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002034:	f000 f9ca 	bl	80023cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2400160c 	.word	0x2400160c
 8002040:	40011400 	.word	0x40011400

08002044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <MX_DMA_Init+0xbc>)
 800204c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002050:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <MX_DMA_Init+0xbc>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <MX_DMA_Init+0xbc>)
 800205c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <MX_DMA_Init+0xbc>)
 800206a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <MX_DMA_Init+0xbc>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <MX_DMA_Init+0xbc>)
 800207a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	200b      	movs	r0, #11
 800208c:	f002 ffa3 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002090:	200b      	movs	r0, #11
 8002092:	f002 ffba 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	200c      	movs	r0, #12
 800209c:	f002 ff9b 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020a0:	200c      	movs	r0, #12
 80020a2:	f002 ffb2 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	200d      	movs	r0, #13
 80020ac:	f002 ff93 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020b0:	200d      	movs	r0, #13
 80020b2:	f002 ffaa 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	200e      	movs	r0, #14
 80020bc:	f002 ff8b 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020c0:	200e      	movs	r0, #14
 80020c2:	f002 ffa2 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	200f      	movs	r0, #15
 80020cc:	f002 ff83 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80020d0:	200f      	movs	r0, #15
 80020d2:	f002 ff9a 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2010      	movs	r0, #16
 80020dc:	f002 ff7b 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80020e0:	2010      	movs	r0, #16
 80020e2:	f002 ff92 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2046      	movs	r0, #70	; 0x46
 80020ec:	f002 ff73 	bl	8004fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020f0:	2046      	movs	r0, #70	; 0x46
 80020f2:	f002 ff8a 	bl	800500a <HAL_NVIC_EnableIRQ>

}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	58024400 	.word	0x58024400

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800211a:	4ba4      	ldr	r3, [pc, #656]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4aa2      	ldr	r2, [pc, #648]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002122:	f043 0310 	orr.w	r3, r3, #16
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002138:	4b9c      	ldr	r3, [pc, #624]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	4a9b      	ldr	r2, [pc, #620]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002140:	f043 0320 	orr.w	r3, r3, #32
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002148:	4b98      	ldr	r3, [pc, #608]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	4b95      	ldr	r3, [pc, #596]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	4a93      	ldr	r2, [pc, #588]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	4a8c      	ldr	r2, [pc, #560]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002184:	4b89      	ldr	r3, [pc, #548]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4b86      	ldr	r3, [pc, #536]	; (80023ac <MX_GPIO_Init+0x2a8>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002198:	4a84      	ldr	r2, [pc, #528]	; (80023ac <MX_GPIO_Init+0x2a8>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021a2:	4b82      	ldr	r3, [pc, #520]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021b0:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b6:	4a7d      	ldr	r2, [pc, #500]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c0:	4b7a      	ldr	r3, [pc, #488]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ce:	4b77      	ldr	r3, [pc, #476]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	4a75      	ldr	r2, [pc, #468]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <MX_GPIO_Init+0x2a8>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f241 5104 	movw	r1, #5380	; 0x1504
 80021f2:	486f      	ldr	r0, [pc, #444]	; (80023b0 <MX_GPIO_Init+0x2ac>)
 80021f4:	f005 fd04 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f248 0102 	movw	r1, #32770	; 0x8002
 80021fe:	486d      	ldr	r0, [pc, #436]	; (80023b4 <MX_GPIO_Init+0x2b0>)
 8002200:	f005 fcfe 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2130      	movs	r1, #48	; 0x30
 8002208:	486b      	ldr	r0, [pc, #428]	; (80023b8 <MX_GPIO_Init+0x2b4>)
 800220a:	f005 fcf9 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	2102      	movs	r1, #2
 8002212:	486a      	ldr	r0, [pc, #424]	; (80023bc <MX_GPIO_Init+0x2b8>)
 8002214:	f005 fcf4 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800221e:	4868      	ldr	r0, [pc, #416]	; (80023c0 <MX_GPIO_Init+0x2bc>)
 8002220:	f005 fcee 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	210e      	movs	r1, #14
 8002228:	4866      	ldr	r0, [pc, #408]	; (80023c4 <MX_GPIO_Init+0x2c0>)
 800222a:	f005 fce9 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f240 3101 	movw	r1, #769	; 0x301
 8002234:	4864      	ldr	r0, [pc, #400]	; (80023c8 <MX_GPIO_Init+0x2c4>)
 8002236:	f005 fce3 	bl	8007c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 800223a:	f241 5304 	movw	r3, #5380	; 0x1504
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4857      	ldr	r0, [pc, #348]	; (80023b0 <MX_GPIO_Init+0x2ac>)
 8002254:	f005 fb2c 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 8002258:	f248 0302 	movw	r3, #32770	; 0x8002
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4850      	ldr	r0, [pc, #320]	; (80023b4 <MX_GPIO_Init+0x2b0>)
 8002272:	f005 fb1d 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002276:	2330      	movs	r3, #48	; 0x30
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227a:	2301      	movs	r3, #1
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	484a      	ldr	r0, [pc, #296]	; (80023b8 <MX_GPIO_Init+0x2b4>)
 800228e:	f005 fb0f 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002292:	2302      	movs	r3, #2
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4844      	ldr	r0, [pc, #272]	; (80023bc <MX_GPIO_Init+0x2b8>)
 80022aa:	f005 fb01 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80022ae:	2304      	movs	r3, #4
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	483e      	ldr	r0, [pc, #248]	; (80023bc <MX_GPIO_Init+0x2b8>)
 80022c2:	f005 faf5 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80022c6:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	4619      	mov	r1, r3
 80022de:	4838      	ldr	r0, [pc, #224]	; (80023c0 <MX_GPIO_Init+0x2bc>)
 80022e0:	f005 fae6 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80022e4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80022e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022f2:	f107 031c 	add.w	r3, r7, #28
 80022f6:	4619      	mov	r1, r3
 80022f8:	4831      	ldr	r0, [pc, #196]	; (80023c0 <MX_GPIO_Init+0x2bc>)
 80022fa:	f005 fad9 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	482c      	ldr	r0, [pc, #176]	; (80023c4 <MX_GPIO_Init+0x2c0>)
 8002312:	f005 facd 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002316:	230e      	movs	r3, #14
 8002318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4825      	ldr	r0, [pc, #148]	; (80023c4 <MX_GPIO_Init+0x2c0>)
 800232e:	f005 fabf 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002332:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	481a      	ldr	r0, [pc, #104]	; (80023b0 <MX_GPIO_Init+0x2ac>)
 8002348:	f005 fab2 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 800234c:	f240 3301 	movw	r3, #769	; 0x301
 8002350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002352:	2301      	movs	r3, #1
 8002354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <MX_GPIO_Init+0x2c4>)
 8002366:	f005 faa3 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 800236a:	2310      	movs	r3, #16
 800236c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <MX_GPIO_Init+0x2c0>)
 800237e:	f005 fa97 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <MX_GPIO_Init+0x2b0>)
 80023a0:	f005 fa86 	bl	80078b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023a4:	bf00      	nop
 80023a6:	3730      	adds	r7, #48	; 0x30
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58021000 	.word	0x58021000
 80023b4:	58020000 	.word	0x58020000
 80023b8:	58020800 	.word	0x58020800
 80023bc:	58020400 	.word	0x58020400
 80023c0:	58021400 	.word	0x58021400
 80023c4:	58021800 	.word	0x58021800
 80023c8:	58020c00 	.word	0x58020c00

080023cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023d4:	e7fe      	b.n	80023d4 <Error_Handler+0x8>
	...

080023d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_MspInit+0x30>)
 80023e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023e4:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x30>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x30>)
 80023f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	58024400 	.word	0x58024400

0800240c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	; 0x30
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <HAL_ADC_MspInit+0x194>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d159      	bne.n	80024e2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 8002430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002434:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 8002436:	f043 0320 	orr.w	r3, r3, #32
 800243a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 8002440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800246a:	2304      	movs	r3, #4
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	4619      	mov	r1, r3
 800247c:	484a      	ldr	r0, [pc, #296]	; (80025a8 <HAL_ADC_MspInit+0x19c>)
 800247e:	f005 fa17 	bl	80078b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_ADC_MspInit+0x1a4>)
 8002486:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002488:	4b48      	ldr	r3, [pc, #288]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 800248a:	2209      	movs	r2, #9
 800248c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002494:	4b45      	ldr	r3, [pc, #276]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 800249c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024aa:	4b40      	ldr	r3, [pc, #256]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024c4:	4839      	ldr	r0, [pc, #228]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024c6:	f002 fdbb 	bl	8005040 <HAL_DMA_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80024d0:	f7ff ff7c 	bl	80023cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a35      	ldr	r2, [pc, #212]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024d8:	659a      	str	r2, [r3, #88]	; 0x58
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <HAL_ADC_MspInit+0x1a0>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80024e0:	e059      	b.n	8002596 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a33      	ldr	r2, [pc, #204]	; (80025b4 <HAL_ADC_MspInit+0x1a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d154      	bne.n	8002596 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 80024ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f2:	4a2c      	ldr	r2, [pc, #176]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	4a24      	ldr	r2, [pc, #144]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_ADC_MspInit+0x198>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002528:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800252c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002530:	f001 f8f0 	bl	8003714 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_ADC_MspInit+0x1b0>)
 8002538:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800253c:	2273      	movs	r2, #115	; 0x73
 800253e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800254e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002552:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800255a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800255e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002562:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800256e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002572:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800257a:	480f      	ldr	r0, [pc, #60]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800257c:	f002 fd60 	bl	8005040 <HAL_DMA_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002586:	f7ff ff21 	bl	80023cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 800258e:	659a      	str	r2, [r3, #88]	; 0x58
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_ADC_MspInit+0x1ac>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002596:	bf00      	nop
 8002598:	3730      	adds	r7, #48	; 0x30
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40022000 	.word	0x40022000
 80025a4:	58024400 	.word	0x58024400
 80025a8:	58020000 	.word	0x58020000
 80025ac:	24000d4c 	.word	0x24000d4c
 80025b0:	40020088 	.word	0x40020088
 80025b4:	58026000 	.word	0x58026000
 80025b8:	24000dc4 	.word	0x24000dc4
 80025bc:	400204b8 	.word	0x400204b8

080025c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b0b8      	sub	sp, #224	; 0xe0
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	22b8      	movs	r2, #184	; 0xb8
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f018 f95c 	bl	801a89e <memset>
  if(hfdcan->Instance==FDCAN3)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a26      	ldr	r2, [pc, #152]	; (8002684 <HAL_FDCAN_MspInit+0xc4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d145      	bne.n	800267c <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002600:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4618      	mov	r0, r3
 8002608:	f007 ff28 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002612:	f7ff fedb 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 8002618:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002622:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 8002628:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_FDCAN_MspInit+0xc8>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002674:	4619      	mov	r1, r3
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_FDCAN_MspInit+0xcc>)
 8002678:	f005 f91a 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	37e0      	adds	r7, #224	; 0xe0
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	4000d400 	.word	0x4000d400
 8002688:	58024400 	.word	0x58024400
 800268c:	58021400 	.word	0x58021400

08002690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b8      	sub	sp, #224	; 0xe0
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	22b8      	movs	r2, #184	; 0xb8
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f018 f8f4 	bl	801a89e <memset>
  if(hi2c->Instance==I2C2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <HAL_I2C_MspInit+0xd4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d14d      	bne.n	800275c <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80026c0:	f04f 0208 	mov.w	r2, #8
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	4618      	mov	r0, r3
 80026d8:	f007 fec0 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80026e2:	f7ff fe73 	bl	80023cc <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 80026ee:	f043 0320 	orr.w	r3, r3, #32
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002704:	2303      	movs	r3, #3
 8002706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270a:	2312      	movs	r3, #18
 800270c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800271c:	2304      	movs	r3, #4
 800271e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002722:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002726:	4619      	mov	r1, r3
 8002728:	4810      	ldr	r0, [pc, #64]	; (800276c <HAL_I2C_MspInit+0xdc>)
 800272a:	f005 f8c1 	bl	80078b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 8002730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 8002736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800273a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_I2C_MspInit+0xd8>)
 8002740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	2021      	movs	r0, #33	; 0x21
 8002752:	f002 fc40 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002756:	2021      	movs	r0, #33	; 0x21
 8002758:	f002 fc57 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800275c:	bf00      	nop
 800275e:	37e0      	adds	r7, #224	; 0xe0
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40005800 	.word	0x40005800
 8002768:	58024400 	.word	0x58024400
 800276c:	58021400 	.word	0x58021400

08002770 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0b2      	sub	sp, #200	; 0xc8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	22b8      	movs	r2, #184	; 0xb8
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f018 f88c 	bl	801a89e <memset>
  if(hrng->Instance==RNG)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_RNG_MspInit+0x6c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d121      	bne.n	80027d4 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f007 fe58 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80027b2:	f7ff fe0b 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_RNG_MspInit+0x70>)
 80027b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027bc:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_RNG_MspInit+0x70>)
 80027be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027c2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_RNG_MspInit+0x70>)
 80027c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	37c8      	adds	r7, #200	; 0xc8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	48021800 	.word	0x48021800
 80027e0:	58024400 	.word	0x58024400

080027e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0ba      	sub	sp, #232	; 0xe8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	22b8      	movs	r2, #184	; 0xb8
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f018 f84a 	bl	801a89e <memset>
  if(hsd->Instance==SDMMC2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_SD_MspInit+0x1a0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	f040 80b3 	bne.w	800297c <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002822:	2300      	movs	r3, #0
 8002824:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	f107 0318 	add.w	r3, r7, #24
 800282a:	4618      	mov	r0, r3
 800282c:	f007 fe16 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002836:	f7ff fdc9 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 800283c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 8002842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002846:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800284a:	4b4f      	ldr	r3, [pc, #316]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 800284c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285e:	4a4a      	ldr	r2, [pc, #296]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002868:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 800286a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	4a42      	ldr	r2, [pc, #264]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 800287e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_SD_MspInit+0x1a4>)
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002894:	2340      	movs	r3, #64	; 0x40
 8002896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028ac:	230b      	movs	r3, #11
 80028ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4834      	ldr	r0, [pc, #208]	; (800298c <HAL_SD_MspInit+0x1a8>)
 80028ba:	f004 fff9 	bl	80078b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80028d6:	230b      	movs	r3, #11
 80028d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028e0:	4619      	mov	r1, r3
 80028e2:	482a      	ldr	r0, [pc, #168]	; (800298c <HAL_SD_MspInit+0x1a8>)
 80028e4:	f004 ffe4 	bl	80078b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002902:	230b      	movs	r3, #11
 8002904:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002908:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800290c:	4619      	mov	r1, r3
 800290e:	4820      	ldr	r0, [pc, #128]	; (8002990 <HAL_SD_MspInit+0x1ac>)
 8002910:	f004 ffce 	bl	80078b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800292e:	230b      	movs	r3, #11
 8002930:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002934:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002938:	4619      	mov	r1, r3
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <HAL_SD_MspInit+0x1ac>)
 800293c:	f004 ffb8 	bl	80078b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002940:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800295a:	230a      	movs	r3, #10
 800295c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002964:	4619      	mov	r1, r3
 8002966:	480a      	ldr	r0, [pc, #40]	; (8002990 <HAL_SD_MspInit+0x1ac>)
 8002968:	f004 ffa2 	bl	80078b0 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	207c      	movs	r0, #124	; 0x7c
 8002972:	f002 fb30 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002976:	207c      	movs	r0, #124	; 0x7c
 8002978:	f002 fb47 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800297c:	bf00      	nop
 800297e:	37e8      	adds	r7, #232	; 0xe8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	48022400 	.word	0x48022400
 8002988:	58024400 	.word	0x58024400
 800298c:	58020c00 	.word	0x58020c00
 8002990:	58021800 	.word	0x58021800

08002994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	; 0x38
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_SPI_MspInit+0x15c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12e      	bne.n	8002a14 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029b6:	4b4f      	ldr	r3, [pc, #316]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029bc:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	4a46      	ldr	r2, [pc, #280]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029f2:	23e0      	movs	r3, #224	; 0xe0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a02:	2305      	movs	r3, #5
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	483a      	ldr	r0, [pc, #232]	; (8002af8 <HAL_SPI_MspInit+0x164>)
 8002a0e:	f004 ff4f 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a12:	e068      	b.n	8002ae6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a38      	ldr	r2, [pc, #224]	; (8002afc <HAL_SPI_MspInit+0x168>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d12f      	bne.n	8002a7e <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a24:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a42:	4a2c      	ldr	r2, [pc, #176]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a6c:	2305      	movs	r3, #5
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a74:	4619      	mov	r1, r3
 8002a76:	4822      	ldr	r0, [pc, #136]	; (8002b00 <HAL_SPI_MspInit+0x16c>)
 8002a78:	f004 ff1a 	bl	80078b0 <HAL_GPIO_Init>
}
 8002a7c:	e033      	b.n	8002ae6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_SPI_MspInit+0x170>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d12e      	bne.n	8002ae6 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_SPI_MspInit+0x160>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ac4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <HAL_SPI_MspInit+0x174>)
 8002ae2:	f004 fee5 	bl	80078b0 <HAL_GPIO_Init>
}
 8002ae6:	bf00      	nop
 8002ae8:	3738      	adds	r7, #56	; 0x38
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40013000 	.word	0x40013000
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58020000 	.word	0x58020000
 8002afc:	40003800 	.word	0x40003800
 8002b00:	58020400 	.word	0x58020400
 8002b04:	40003c00 	.word	0x40003c00
 8002b08:	58020800 	.word	0x58020800

08002b0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08c      	sub	sp, #48	; 0x30
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d15d      	bne.n	8002bea <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b2e:	4b8e      	ldr	r3, [pc, #568]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b34:	4a8c      	ldr	r2, [pc, #560]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b3e:	4b8a      	ldr	r3, [pc, #552]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4c:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	4a85      	ldr	r2, [pc, #532]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5c:	4b82      	ldr	r3, [pc, #520]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	4619      	mov	r1, r3
 8002b84:	4879      	ldr	r0, [pc, #484]	; (8002d6c <HAL_TIM_PWM_MspInit+0x260>)
 8002b86:	f004 fe93 	bl	80078b0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002b8a:	4b79      	ldr	r3, [pc, #484]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002b8c:	4a79      	ldr	r2, [pc, #484]	; (8002d74 <HAL_TIM_PWM_MspInit+0x268>)
 8002b8e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002b90:	4b77      	ldr	r3, [pc, #476]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002b92:	2214      	movs	r2, #20
 8002b94:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002baa:	4b71      	ldr	r3, [pc, #452]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bb8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002bcc:	4868      	ldr	r0, [pc, #416]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002bce:	f002 fa37 	bl	8005040 <HAL_DMA_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002bd8:	f7ff fbf8 	bl	80023cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a64      	ldr	r2, [pc, #400]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002be2:	4a63      	ldr	r2, [pc, #396]	; (8002d70 <HAL_TIM_PWM_MspInit+0x264>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002be8:	e119      	b.n	8002e1e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a62      	ldr	r2, [pc, #392]	; (8002d78 <HAL_TIM_PWM_MspInit+0x26c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d16d      	bne.n	8002cd0 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bf4:	4b5c      	ldr	r3, [pc, #368]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfa:	4a5b      	ldr	r2, [pc, #364]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002c06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c14:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_TIM_PWM_MspInit+0x274>)
 8002c16:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002c18:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c1a:	2218      	movs	r2, #24
 8002c1c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c20:	2240      	movs	r2, #64	; 0x40
 8002c22:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c30:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c32:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c38:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c40:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002c42:	4b4e      	ldr	r3, [pc, #312]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4e:	4b4b      	ldr	r3, [pc, #300]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002c54:	4849      	ldr	r0, [pc, #292]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c56:	f002 f9f3 	bl	8005040 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002c60:	f7ff fbb4 	bl	80023cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a45      	ldr	r2, [pc, #276]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6a:	4a44      	ldr	r2, [pc, #272]	; (8002d7c <HAL_TIM_PWM_MspInit+0x270>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002c70:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c72:	4a45      	ldr	r2, [pc, #276]	; (8002d88 <HAL_TIM_PWM_MspInit+0x27c>)
 8002c74:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002c76:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c78:	2217      	movs	r2, #23
 8002c7a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c82:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c88:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c8e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c96:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c9e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002ca0:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002cb2:	4834      	ldr	r0, [pc, #208]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002cb4:	f002 f9c4 	bl	8005040 <HAL_DMA_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002cbe:	f7ff fb85 	bl	80023cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc8:	4a2e      	ldr	r2, [pc, #184]	; (8002d84 <HAL_TIM_PWM_MspInit+0x278>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cce:	e0a6      	b.n	8002e1e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_TIM_PWM_MspInit+0x280>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d15e      	bne.n	8002d98 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ce0:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_TIM_PWM_MspInit+0x25c>)
 8002cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002cfa:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <HAL_TIM_PWM_MspInit+0x288>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d00:	221f      	movs	r2, #31
 8002d02:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d16:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d1e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d26:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002d3a:	4815      	ldr	r0, [pc, #84]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d3c:	f002 f980 	bl	8005040 <HAL_DMA_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002d46:	f7ff fb41 	bl	80023cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d50:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_TIM_PWM_MspInit+0x284>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	201e      	movs	r0, #30
 8002d5c:	f002 f93b 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d60:	201e      	movs	r0, #30
 8002d62:	f002 f952 	bl	800500a <HAL_NVIC_EnableIRQ>
}
 8002d66:	e05a      	b.n	8002e1e <HAL_TIM_PWM_MspInit+0x312>
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	58020000 	.word	0x58020000
 8002d70:	24001320 	.word	0x24001320
 8002d74:	40020028 	.word	0x40020028
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	24001398 	.word	0x24001398
 8002d80:	40020058 	.word	0x40020058
 8002d84:	24001410 	.word	0x24001410
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	24001488 	.word	0x24001488
 8002d94:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a22      	ldr	r2, [pc, #136]	; (8002e28 <HAL_TIM_PWM_MspInit+0x31c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13d      	bne.n	8002e1e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_TIM_PWM_MspInit+0x320>)
 8002da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da8:	4a20      	ldr	r2, [pc, #128]	; (8002e2c <HAL_TIM_PWM_MspInit+0x320>)
 8002daa:	f043 0308 	orr.w	r3, r3, #8
 8002dae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_TIM_PWM_MspInit+0x320>)
 8002db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dc2:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_PWM_MspInit+0x328>)
 8002dc4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dc8:	223a      	movs	r2, #58	; 0x3a
 8002dca:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dce:	2240      	movs	r2, #64	; 0x40
 8002dd0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dde:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002de6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dee:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002e04:	f002 f91c 	bl	8005040 <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002e0e:	f7ff fadd 	bl	80023cc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
 8002e18:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_TIM_PWM_MspInit+0x324>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e1e:	bf00      	nop
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	24001500 	.word	0x24001500
 8002e34:	40020040 	.word	0x40020040

08002e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_TIM_Base_MspInit+0x68>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d10f      	bne.n	8002e6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e68:	e013      	b.n	8002e92 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_TIM_Base_MspInit+0x70>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10e      	bne.n	8002e92 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8002e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40001c00 	.word	0x40001c00
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	40002000 	.word	0x40002000

08002eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	; 0x30
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ecc:	d120      	bne.n	8002f10 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ece:	4b52      	ldr	r3, [pc, #328]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ede:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4844      	ldr	r0, [pc, #272]	; (800301c <HAL_TIM_MspPostInit+0x170>)
 8002f0a:	f004 fcd1 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002f0e:	e07f      	b.n	8003010 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a42      	ldr	r2, [pc, #264]	; (8003020 <HAL_TIM_MspPostInit+0x174>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d11f      	bne.n	8002f5a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f20:	4a3d      	ldr	r2, [pc, #244]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f38:	2330      	movs	r3, #48	; 0x30
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f40:	2302      	movs	r3, #2
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4832      	ldr	r0, [pc, #200]	; (800301c <HAL_TIM_MspPostInit+0x170>)
 8002f54:	f004 fcac 	bl	80078b0 <HAL_GPIO_Init>
}
 8002f58:	e05a      	b.n	8003010 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a31      	ldr	r2, [pc, #196]	; (8003024 <HAL_TIM_MspPostInit+0x178>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d131      	bne.n	8002fc8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6a:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002f82:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f94:	2302      	movs	r3, #2
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4822      	ldr	r0, [pc, #136]	; (8003028 <HAL_TIM_MspPostInit+0x17c>)
 8002fa0:	f004 fc86 	bl	80078b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4819      	ldr	r0, [pc, #100]	; (8003028 <HAL_TIM_MspPostInit+0x17c>)
 8002fc2:	f004 fc75 	bl	80078b0 <HAL_GPIO_Init>
}
 8002fc6:	e023      	b.n	8003010 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_TIM_MspPostInit+0x180>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d11e      	bne.n	8003010 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_TIM_MspPostInit+0x16c>)
 8002fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003000:	2302      	movs	r3, #2
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	4619      	mov	r1, r3
 800300a:	4809      	ldr	r0, [pc, #36]	; (8003030 <HAL_TIM_MspPostInit+0x184>)
 800300c:	f004 fc50 	bl	80078b0 <HAL_GPIO_Init>
}
 8003010:	bf00      	nop
 8003012:	3730      	adds	r7, #48	; 0x30
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	58024400 	.word	0x58024400
 800301c:	58020400 	.word	0x58020400
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	58020c00 	.word	0x58020c00
 800302c:	40000c00 	.word	0x40000c00
 8003030:	58020000 	.word	0x58020000

08003034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0ba      	sub	sp, #232	; 0xe8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 0318 	add.w	r3, r7, #24
 8003050:	22b8      	movs	r2, #184	; 0xb8
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f017 fc22 	bl	801a89e <memset>
  if(huart->Instance==UART4)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a4d      	ldr	r2, [pc, #308]	; (8003194 <HAL_UART_MspInit+0x160>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d147      	bne.n	80030f4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003064:	f04f 0202 	mov.w	r2, #2
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003076:	f107 0318 	add.w	r3, r7, #24
 800307a:	4618      	mov	r0, r3
 800307c:	f007 f9ee 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003086:	f7ff f9a1 	bl	80023cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_UART_MspInit+0x164>)
 800308c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003090:	4a41      	ldr	r2, [pc, #260]	; (8003198 <HAL_UART_MspInit+0x164>)
 8003092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003096:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_UART_MspInit+0x164>)
 800309c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4b3b      	ldr	r3, [pc, #236]	; (8003198 <HAL_UART_MspInit+0x164>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <HAL_UART_MspInit+0x164>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b8:	4b37      	ldr	r3, [pc, #220]	; (8003198 <HAL_UART_MspInit+0x164>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80030e0:	2308      	movs	r3, #8
 80030e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030ea:	4619      	mov	r1, r3
 80030ec:	482b      	ldr	r0, [pc, #172]	; (800319c <HAL_UART_MspInit+0x168>)
 80030ee:	f004 fbdf 	bl	80078b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030f2:	e04a      	b.n	800318a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_UART_MspInit+0x16c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d145      	bne.n	800318a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80030fe:	f04f 0201 	mov.w	r2, #1
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	4618      	mov	r0, r3
 8003116:	f007 f9a1 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003120:	f7ff f954 	bl	80023cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <HAL_UART_MspInit+0x164>)
 8003126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <HAL_UART_MspInit+0x164>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <HAL_UART_MspInit+0x164>)
 8003136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_UART_MspInit+0x164>)
 8003144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <HAL_UART_MspInit+0x164>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_UART_MspInit+0x164>)
 8003154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003160:	23c0      	movs	r3, #192	; 0xc0
 8003162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003178:	2307      	movs	r3, #7
 800317a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <HAL_UART_MspInit+0x170>)
 8003186:	f004 fb93 	bl	80078b0 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	37e8      	adds	r7, #232	; 0xe8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40004c00 	.word	0x40004c00
 8003198:	58024400 	.word	0x58024400
 800319c:	58020400 	.word	0x58020400
 80031a0:	40011400 	.word	0x40011400
 80031a4:	58020800 	.word	0x58020800

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <NMI_Handler+0x4>

080031ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b2:	e7fe      	b.n	80031b2 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <MemManage_Handler+0x4>

080031ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <BusFault_Handler+0x4>

080031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <UsageFault_Handler+0x4>

080031c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f4:	f000 fa4a 	bl	800368c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA1_Stream0_IRQHandler+0x10>)
 8003202:	f002 fcdf 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	24001488 	.word	0x24001488

08003210 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA1_Stream1_IRQHandler+0x10>)
 8003216:	f002 fcd5 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	24001320 	.word	0x24001320

08003224 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <DMA1_Stream2_IRQHandler+0x10>)
 800322a:	f002 fccb 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	24001500 	.word	0x24001500

08003238 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800323c:	4802      	ldr	r0, [pc, #8]	; (8003248 <DMA1_Stream3_IRQHandler+0x10>)
 800323e:	f002 fcc1 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	24001398 	.word	0x24001398

0800324c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003250:	4802      	ldr	r0, [pc, #8]	; (800325c <DMA1_Stream4_IRQHandler+0x10>)
 8003252:	f002 fcb7 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	24001410 	.word	0x24001410

08003260 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003264:	4802      	ldr	r0, [pc, #8]	; (8003270 <DMA1_Stream5_IRQHandler+0x10>)
 8003266:	f002 fcad 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	24000d4c 	.word	0x24000d4c

08003274 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <TIM4_IRQHandler+0x10>)
 800327a:	f00c fc7f 	bl	800fb7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	240011f0 	.word	0x240011f0

08003288 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <I2C2_EV_IRQHandler+0x10>)
 800328e:	f004 fd61 	bl	8007d54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	24000edc 	.word	0x24000edc

0800329c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <DMA2_Stream7_IRQHandler+0x10>)
 80032a2:	f002 fc8f 	bl	8005bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	24000dc4 	.word	0x24000dc4

080032b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <OTG_HS_IRQHandler+0x10>)
 80032b6:	f004 ff57 	bl	8008168 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	24002dcc 	.word	0x24002dcc

080032c4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <SDMMC2_IRQHandler+0x10>)
 80032ca:	f00a f8cb 	bl	800d464 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	24000f44 	.word	0x24000f44

080032d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return 1;
 80032dc:	2301      	movs	r3, #1
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_kill>:

int _kill(int pid, int sig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f2:	f017 fb27 	bl	801a944 <__errno>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2216      	movs	r2, #22
 80032fa:	601a      	str	r2, [r3, #0]
  return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_exit>:

void _exit (int status)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffe7 	bl	80032e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800331a:	e7fe      	b.n	800331a <_exit+0x12>

0800331c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e00a      	b.n	8003344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800332e:	f3af 8000 	nop.w
 8003332:	4601      	mov	r1, r0
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	60ba      	str	r2, [r7, #8]
 800333a:	b2ca      	uxtb	r2, r1
 800333c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	dbf0      	blt.n	800332e <_read+0x12>
  }

  return len;
 800334c:	687b      	ldr	r3, [r7, #4]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e009      	b.n	800337c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	60ba      	str	r2, [r7, #8]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	dbf1      	blt.n	8003368 <_write+0x12>
  }
  return len;
 8003384:	687b      	ldr	r3, [r7, #4]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <_close>:

int _close(int file)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033b6:	605a      	str	r2, [r3, #4]
  return 0;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <_isatty>:

int _isatty(int file)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <_sbrk+0x5c>)
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <_sbrk+0x60>)
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <_sbrk+0x64>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <_sbrk+0x64>)
 8003416:	4a12      	ldr	r2, [pc, #72]	; (8003460 <_sbrk+0x68>)
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003428:	f017 fa8c 	bl	801a944 <__errno>
 800342c:	4603      	mov	r3, r0
 800342e:	220c      	movs	r2, #12
 8003430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e009      	b.n	800344c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <_sbrk+0x64>)
 8003448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	24050000 	.word	0x24050000
 8003458:	00000800 	.word	0x00000800
 800345c:	240016a0 	.word	0x240016a0
 8003460:	24003648 	.word	0x24003648

08003464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <SystemInit+0xd0>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	4a31      	ldr	r2, [pc, #196]	; (8003534 <SystemInit+0xd0>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003478:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <SystemInit+0xd4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	2b06      	cmp	r3, #6
 8003482:	d807      	bhi.n	8003494 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <SystemInit+0xd4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 030f 	bic.w	r3, r3, #15
 800348c:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <SystemInit+0xd4>)
 800348e:	f043 0307 	orr.w	r3, r3, #7
 8003492:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003494:	4b29      	ldr	r3, [pc, #164]	; (800353c <SystemInit+0xd8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a28      	ldr	r2, [pc, #160]	; (800353c <SystemInit+0xd8>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034a0:	4b26      	ldr	r3, [pc, #152]	; (800353c <SystemInit+0xd8>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <SystemInit+0xd8>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4924      	ldr	r1, [pc, #144]	; (800353c <SystemInit+0xd8>)
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <SystemInit+0xdc>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <SystemInit+0xd4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <SystemInit+0xd4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <SystemInit+0xd4>)
 80034c8:	f043 0307 	orr.w	r3, r3, #7
 80034cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <SystemInit+0xd8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <SystemInit+0xd8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <SystemInit+0xd8>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034e0:	4b16      	ldr	r3, [pc, #88]	; (800353c <SystemInit+0xd8>)
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <SystemInit+0xe0>)
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <SystemInit+0xd8>)
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <SystemInit+0xe4>)
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <SystemInit+0xd8>)
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <SystemInit+0xe8>)
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034f2:	4b12      	ldr	r3, [pc, #72]	; (800353c <SystemInit+0xd8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <SystemInit+0xd8>)
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <SystemInit+0xe8>)
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <SystemInit+0xd8>)
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <SystemInit+0xd8>)
 8003506:	4a11      	ldr	r2, [pc, #68]	; (800354c <SystemInit+0xe8>)
 8003508:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <SystemInit+0xd8>)
 800350c:	2200      	movs	r2, #0
 800350e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <SystemInit+0xd8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a09      	ldr	r2, [pc, #36]	; (800353c <SystemInit+0xd8>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <SystemInit+0xd8>)
 800351e:	2200      	movs	r2, #0
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <SystemInit+0xec>)
 8003524:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003528:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00
 8003538:	52002000 	.word	0x52002000
 800353c:	58024400 	.word	0x58024400
 8003540:	eaf6ed7f 	.word	0xeaf6ed7f
 8003544:	02020200 	.word	0x02020200
 8003548:	01ff0000 	.word	0x01ff0000
 800354c:	01010280 	.word	0x01010280
 8003550:	52004000 	.word	0x52004000

08003554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800358c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003558:	f7ff ff84 	bl	8003464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800355c:	480c      	ldr	r0, [pc, #48]	; (8003590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800355e:	490d      	ldr	r1, [pc, #52]	; (8003594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003564:	e002      	b.n	800356c <LoopCopyDataInit>

08003566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356a:	3304      	adds	r3, #4

0800356c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800356c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003570:	d3f9      	bcc.n	8003566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003574:	4c0a      	ldr	r4, [pc, #40]	; (80035a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003578:	e001      	b.n	800357e <LoopFillZerobss>

0800357a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800357c:	3204      	adds	r2, #4

0800357e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003580:	d3fb      	bcc.n	800357a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003582:	f017 f9e5 	bl	801a950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003586:	f7fd fe75 	bl	8001274 <main>
  bx  lr
 800358a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800358c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003594:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003598:	0801ea00 	.word	0x0801ea00
  ldr r2, =_sbss
 800359c:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 80035a0:	24003644 	.word	0x24003644

080035a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC3_IRQHandler>
	...

080035a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ae:	2003      	movs	r0, #3
 80035b0:	f001 fd06 	bl	8004fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035b4:	f006 fd7c 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <HAL_Init+0x68>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	4913      	ldr	r1, [pc, #76]	; (8003614 <HAL_Init+0x6c>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
 80035d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_Init+0x68>)
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_Init+0x6c>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <HAL_Init+0x70>)
 80035ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <HAL_Init+0x74>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035f2:	200f      	movs	r0, #15
 80035f4:	f000 f814 	bl	8003620 <HAL_InitTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e002      	b.n	8003608 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003602:	f7fe fee9 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024400 	.word	0x58024400
 8003614:	0801e134 	.word	0x0801e134
 8003618:	24000004 	.word	0x24000004
 800361c:	24000000 	.word	0x24000000

08003620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_InitTick+0x60>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e021      	b.n	8003678 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_InitTick+0x64>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_InitTick+0x60>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4619      	mov	r1, r3
 800363e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003642:	fbb3 f3f1 	udiv	r3, r3, r1
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fceb 	bl	8005026 <HAL_SYSTICK_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e00e      	b.n	8003678 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d80a      	bhi.n	8003676 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003660:	2200      	movs	r2, #0
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f001 fcb5 	bl	8004fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800366c:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_InitTick+0x68>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2400000c 	.word	0x2400000c
 8003684:	24000000 	.word	0x24000000
 8003688:	24000008 	.word	0x24000008

0800368c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_IncTick+0x20>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_IncTick+0x24>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4413      	add	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <HAL_IncTick+0x24>)
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	2400000c 	.word	0x2400000c
 80036b0:	240016a4 	.word	0x240016a4

080036b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_GetTick+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	240016a4 	.word	0x240016a4

080036cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff ffee 	bl	80036b4 <HAL_GetTick>
 80036d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d005      	beq.n	80036f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_Delay+0x44>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036f2:	bf00      	nop
 80036f4:	f7ff ffde 	bl	80036b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	429a      	cmp	r2, r3
 8003702:	d8f7      	bhi.n	80036f4 <HAL_Delay+0x28>
  {
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	2400000c 	.word	0x2400000c

08003714 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	43db      	mvns	r3, r3
 8003726:	401a      	ands	r2, r3
 8003728:	4904      	ldr	r1, [pc, #16]	; (800373c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	58000400 	.word	0x58000400

08003740 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3360      	adds	r3, #96	; 0x60
 80037ba:	461a      	mov	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <LL_ADC_SetOffset+0x60>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d10b      	bne.n	80037e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80037e2:	e00b      	b.n	80037fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	58026000 	.word	0x58026000

0800380c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	461a      	mov	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	611a      	str	r2, [r3, #16]
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3360      	adds	r3, #96	; 0x60
 8003884:	461a      	mov	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	601a      	str	r2, [r3, #0]
  }
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	58026000 	.word	0x58026000

080038b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10e      	bne.n	80038e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	3360      	adds	r3, #96	; 0x60
 80038c8:	461a      	mov	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	431a      	orrs	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	58026000 	.word	0x58026000

080038f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <LL_ADC_SetOffsetSign+0x40>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10e      	bne.n	8003926 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3360      	adds	r3, #96	; 0x60
 800390c:	461a      	mov	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	431a      	orrs	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	58026000 	.word	0x58026000

08003938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3360      	adds	r3, #96	; 0x60
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <LL_ADC_SetOffsetState+0x50>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d108      	bne.n	800396c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800396a:	e007      	b.n	800397c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	431a      	orrs	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	58026000 	.word	0x58026000

0800398c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	3330      	adds	r3, #48	; 0x30
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	0a1b      	lsrs	r3, r3, #8
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	4413      	add	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	211f      	movs	r1, #31
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	401a      	ands	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0e9b      	lsrs	r3, r3, #26
 80039c4:	f003 011f 	and.w	r1, r3, #31
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	431a      	orrs	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3314      	adds	r3, #20
 80039f4:	461a      	mov	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0e5b      	lsrs	r3, r3, #25
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0d1b      	lsrs	r3, r3, #20
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2107      	movs	r1, #7
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	401a      	ands	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	0d1b      	lsrs	r3, r3, #20
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d115      	bne.n	8003a7c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0318 	and.w	r3, r3, #24
 8003a66:	4914      	ldr	r1, [pc, #80]	; (8003ab8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a68:	40d9      	lsrs	r1, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a7a:	e014      	b.n	8003aa6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f003 0318 	and.w	r3, r3, #24
 8003a92:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a94:	40d9      	lsrs	r1, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	400b      	ands	r3, r1
 8003a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	58026000 	.word	0x58026000
 8003ab8:	000fffff 	.word	0x000fffff

08003abc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6093      	str	r3, [r2, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	5fffffc0 	.word	0x5fffffc0

08003ae0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d101      	bne.n	8003afa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b05      	ldr	r3, [pc, #20]	; (8003b2c <LL_ADC_EnableInternalRegulator+0x24>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	6fffffc0 	.word	0x6fffffc0

08003b30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b44:	d101      	bne.n	8003b4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <LL_ADC_IsEnabled+0x18>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <LL_ADC_IsEnabled+0x1a>
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d101      	bne.n	8003b96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d101      	bne.n	8003bbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1ee      	b.n	8003fc4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d109      	bne.n	8003c08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fe fc09 	bl	800240c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff67 	bl	8003ae0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff4d 	bl	8003abc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ff82 	bl	8003b30 <LL_ADC_IsInternalRegulatorEnabled>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d114      	bne.n	8003c5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff66 	bl	8003b08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c3c:	4b8e      	ldr	r3, [pc, #568]	; (8003e78 <HAL_ADC_Init+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	099b      	lsrs	r3, r3, #6
 8003c42:	4a8e      	ldr	r2, [pc, #568]	; (8003e7c <HAL_ADC_Init+0x2b0>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c4e:	e002      	b.n	8003c56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff65 	bl	8003b30 <LL_ADC_IsInternalRegulatorEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff76 	bl	8003b7e <LL_ADC_REG_IsConversionOngoing>
 8003c92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8188 	bne.w	8003fb2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 8184 	bne.w	8003fb2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff4a 	bl	8003b58 <LL_ADC_IsEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d136      	bne.n	8003d38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6c      	ldr	r2, [pc, #432]	; (8003e80 <HAL_ADC_Init+0x2b4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_ADC_Init+0x112>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6a      	ldr	r2, [pc, #424]	; (8003e84 <HAL_ADC_Init+0x2b8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10e      	bne.n	8003cfc <HAL_ADC_Init+0x130>
 8003cde:	4868      	ldr	r0, [pc, #416]	; (8003e80 <HAL_ADC_Init+0x2b4>)
 8003ce0:	f7ff ff3a 	bl	8003b58 <LL_ADC_IsEnabled>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	4867      	ldr	r0, [pc, #412]	; (8003e84 <HAL_ADC_Init+0x2b8>)
 8003ce8:	f7ff ff36 	bl	8003b58 <LL_ADC_IsEnabled>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4323      	orrs	r3, r4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e008      	b.n	8003d0e <HAL_ADC_Init+0x142>
 8003cfc:	4862      	ldr	r0, [pc, #392]	; (8003e88 <HAL_ADC_Init+0x2bc>)
 8003cfe:	f7ff ff2b 	bl	8003b58 <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5a      	ldr	r2, [pc, #360]	; (8003e80 <HAL_ADC_Init+0x2b4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_Init+0x15a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_ADC_Init+0x2b8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_Init+0x15e>
 8003d26:	4a59      	ldr	r2, [pc, #356]	; (8003e8c <HAL_ADC_Init+0x2c0>)
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_Init+0x160>
 8003d2a:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_ADC_Init+0x2c4>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7ff fd04 	bl	8003740 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a52      	ldr	r2, [pc, #328]	; (8003e88 <HAL_ADC_Init+0x2bc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d129      	bne.n	8003d96 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7e5b      	ldrb	r3, [r3, #25]
 8003d46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d4c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003d52:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d013      	beq.n	8003d84 <HAL_ADC_Init+0x1b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d00d      	beq.n	8003d80 <HAL_ADC_Init+0x1b4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b1c      	cmp	r3, #28
 8003d6a:	d007      	beq.n	8003d7c <HAL_ADC_Init+0x1b0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b18      	cmp	r3, #24
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_Init+0x1ac>
 8003d74:	2318      	movs	r3, #24
 8003d76:	e006      	b.n	8003d86 <HAL_ADC_Init+0x1ba>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e004      	b.n	8003d86 <HAL_ADC_Init+0x1ba>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	e002      	b.n	8003d86 <HAL_ADC_Init+0x1ba>
 8003d80:	2308      	movs	r3, #8
 8003d82:	e000      	b.n	8003d86 <HAL_ADC_Init+0x1ba>
 8003d84:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003d86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e00e      	b.n	8003db4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7e5b      	ldrb	r3, [r3, #25]
 8003d9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003da0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003da6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d106      	bne.n	8003dcc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	045b      	lsls	r3, r3, #17
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <HAL_ADC_Init+0x2bc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d115      	bne.n	8003e1e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_ADC_Init+0x2c8>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	69b9      	ldr	r1, [r7, #24]
 8003e02:	430b      	orrs	r3, r1
 8003e04:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	611a      	str	r2, [r3, #16]
 8003e1c:	e009      	b.n	8003e32 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_ADC_Init+0x2cc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	69b9      	ldr	r1, [r7, #24]
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fea1 	bl	8003b7e <LL_ADC_REG_IsConversionOngoing>
 8003e3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff feae 	bl	8003ba4 <LL_ADC_INJ_IsConversionOngoing>
 8003e48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f040 808e 	bne.w	8003f6e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 808a 	bne.w	8003f6e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <HAL_ADC_Init+0x2bc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d11b      	bne.n	8003e9c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7e1b      	ldrb	r3, [r3, #24]
 8003e68:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e70:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e018      	b.n	8003eaa <HAL_ADC_Init+0x2de>
 8003e78:	24000000 	.word	0x24000000
 8003e7c:	053e2d63 	.word	0x053e2d63
 8003e80:	40022000 	.word	0x40022000
 8003e84:	40022100 	.word	0x40022100
 8003e88:	58026000 	.word	0x58026000
 8003e8c:	40022300 	.word	0x40022300
 8003e90:	58026300 	.word	0x58026300
 8003e94:	fff04007 	.word	0xfff04007
 8003e98:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7e1b      	ldrb	r3, [r3, #24]
 8003ea0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b46      	ldr	r3, [pc, #280]	; (8003fcc <HAL_ADC_Init+0x400>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d137      	bne.n	8003f38 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3f      	ldr	r2, [pc, #252]	; (8003fd0 <HAL_ADC_Init+0x404>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d116      	bne.n	8003f06 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <HAL_ADC_Init+0x408>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003eea:	4311      	orrs	r1, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ef0:	4311      	orrs	r1, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	611a      	str	r2, [r3, #16]
 8003f04:	e020      	b.n	8003f48 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <HAL_ADC_Init+0x40c>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f14:	3a01      	subs	r2, #1
 8003f16:	0411      	lsls	r1, r2, #16
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	e007      	b.n	8003f48 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_ADC_Init+0x404>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d002      	beq.n	8003f6e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fd63 	bl	8004a34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10c      	bne.n	8003f90 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f023 010f 	bic.w	r1, r3, #15
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f8e:	e007      	b.n	8003fa0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020f 	bic.w	r2, r2, #15
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	f023 0303 	bic.w	r3, r3, #3
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	661a      	str	r2, [r3, #96]	; 0x60
 8003fb0:	e007      	b.n	8003fc2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0210 	orr.w	r2, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3724      	adds	r7, #36	; 0x24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}
 8003fcc:	ffffbffc 	.word	0xffffbffc
 8003fd0:	58026000 	.word	0x58026000
 8003fd4:	fc00f81f 	.word	0xfc00f81f
 8003fd8:	fc00f81e 	.word	0xfc00f81e

08003fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b0b9      	sub	sp, #228	; 0xe4
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4aa9      	ldr	r2, [pc, #676]	; (80042a4 <HAL_ADC_ConfigChannel+0x2c8>)
 8003ffe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004006:	2b01      	cmp	r3, #1
 8004008:	d102      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x34>
 800400a:	2302      	movs	r3, #2
 800400c:	f000 bcfa 	b.w	8004a04 <HAL_ADC_ConfigChannel+0xa28>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fdae 	bl	8003b7e <LL_ADC_REG_IsConversionOngoing>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	f040 84de 	bne.w	80049e6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a9e      	ldr	r2, [pc, #632]	; (80042a8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d033      	beq.n	800409c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x76>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	e01d      	b.n	800408e <HAL_ADC_ConfigChannel+0xb2>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800406a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800406e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004076:	2320      	movs	r3, #32
 8004078:	e004      	b.n	8004084 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800407a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2201      	movs	r2, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	69d1      	ldr	r1, [r2, #28]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f7ff fc6f 	bl	800398c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fd63 	bl	8003b7e <LL_ADC_REG_IsConversionOngoing>
 80040b8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fd6f 	bl	8003ba4 <LL_ADC_INJ_IsConversionOngoing>
 80040c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f040 8270 	bne.w	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f040 826b 	bne.w	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7ff fc7a 	bl	80039e4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6c      	ldr	r2, [pc, #432]	; (80042a8 <HAL_ADC_ConfigChannel+0x2cc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10d      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	08db      	lsrs	r3, r3, #3
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004114:	e032      	b.n	800417c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_ADC_ConfigChannel+0x2d0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800411e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004122:	d10b      	bne.n	800413c <HAL_ADC_ConfigChannel+0x160>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	e01d      	b.n	8004178 <HAL_ADC_ConfigChannel+0x19c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x186>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	e00a      	b.n	8004178 <HAL_ADC_ConfigChannel+0x19c>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d048      	beq.n	8004216 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	6919      	ldr	r1, [r3, #16]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004194:	f7ff fb08 	bl	80037a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a42      	ldr	r2, [pc, #264]	; (80042a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d119      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7ff fba0 	bl	80038f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6919      	ldr	r1, [r3, #16]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x1f0>
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	e000      	b.n	80041ce <HAL_ADC_ConfigChannel+0x1f2>
 80041cc:	2300      	movs	r3, #0
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7ff fb6e 	bl	80038b0 <LL_ADC_SetOffsetSaturation>
 80041d4:	e1ee      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6919      	ldr	r1, [r3, #16]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x212>
 80041e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041ec:	e000      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x214>
 80041ee:	2300      	movs	r3, #0
 80041f0:	461a      	mov	r2, r3
 80041f2:	f7ff fb3b 	bl	800386c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6919      	ldr	r1, [r3, #16]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	7e1b      	ldrb	r3, [r3, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_ADC_ConfigChannel+0x230>
 8004206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800420a:	e000      	b.n	800420e <HAL_ADC_ConfigChannel+0x232>
 800420c:	2300      	movs	r3, #0
 800420e:	461a      	mov	r2, r3
 8004210:	f7ff fb12 	bl	8003838 <LL_ADC_SetDataRightShift>
 8004214:	e1ce      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	f040 8181 	bne.w	8004524 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff faef 	bl	800380c <LL_ADC_GetOffsetChannel>
 800422e:	4603      	mov	r3, r0
 8004230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_ADC_ConfigChannel+0x272>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fae4 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	0e9b      	lsrs	r3, r3, #26
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	e01e      	b.n	800428c <HAL_ADC_ConfigChannel+0x2b0>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fad9 	bl	800380c <LL_ADC_GetOffsetChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800426c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800427c:	2320      	movs	r3, #32
 800427e:	e004      	b.n	800428a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x2d4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	e01e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x306>
 80042a4:	47ff0000 	.word	0x47ff0000
 80042a8:	58026000 	.word	0x58026000
 80042ac:	5c001000 	.word	0x5c001000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80042c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80042cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80042d4:	2320      	movs	r3, #32
 80042d6:	e004      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80042d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042dc:	fab3 f383 	clz	r3, r3
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d106      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fb22 	bl	8003938 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fa86 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004300:	4603      	mov	r3, r0
 8004302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x344>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fa7b 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004316:	4603      	mov	r3, r0
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	f003 021f 	and.w	r2, r3, #31
 800431e:	e01e      	b.n	800435e <HAL_ADC_ConfigChannel+0x382>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fa70 	bl	800380c <LL_ADC_GetOffsetChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800433e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e004      	b.n	800435c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004352:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x39a>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0e9b      	lsrs	r3, r3, #26
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	e018      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x3cc>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800438a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800438e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800439a:	2320      	movs	r3, #32
 800439c:	e004      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800439e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d106      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fabf 	bl	8003938 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fa23 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x40a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fa18 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043dc:	4603      	mov	r3, r0
 80043de:	0e9b      	lsrs	r3, r3, #26
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	e01e      	b.n	8004424 <HAL_ADC_ConfigChannel+0x448>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff fa0d 	bl	800380c <LL_ADC_GetOffsetChannel>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800440c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004414:	2320      	movs	r3, #32
 8004416:	e004      	b.n	8004422 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <HAL_ADC_ConfigChannel+0x460>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	e014      	b.n	8004466 <HAL_ADC_ConfigChannel+0x48a>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800444a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800444c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e004      	b.n	8004466 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800445c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	429a      	cmp	r2, r3
 8004468:	d106      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fa60 	bl	8003938 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2103      	movs	r1, #3
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f9c4 	bl	800380c <LL_ADC_GetOffsetChannel>
 8004484:	4603      	mov	r3, r0
 8004486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x4c8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2103      	movs	r1, #3
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f9b9 	bl	800380c <LL_ADC_GetOffsetChannel>
 800449a:	4603      	mov	r3, r0
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	f003 021f 	and.w	r2, r3, #31
 80044a2:	e017      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x4f8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2103      	movs	r1, #3
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff f9ae 	bl	800380c <LL_ADC_GetOffsetChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80044c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80044c6:	2320      	movs	r3, #32
 80044c8:	e003      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80044ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x510>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	0e9b      	lsrs	r3, r3, #26
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	e011      	b.n	8004510 <HAL_ADC_ConfigChannel+0x534>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	429a      	cmp	r2, r3
 8004512:	d14f      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	2103      	movs	r1, #3
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fa0b 	bl	8003938 <LL_ADC_SetOffsetState>
 8004522:	e047      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	069b      	lsls	r3, r3, #26
 8004534:	429a      	cmp	r2, r3
 8004536:	d107      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004546:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	069b      	lsls	r3, r3, #26
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800456a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	069b      	lsls	r3, r3, #26
 800457c:	429a      	cmp	r2, r3
 800457e:	d107      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800458e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	069b      	lsls	r3, r3, #26
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff facd 	bl	8003b58 <LL_ADC_IsEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 8219 	bne.w	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7ff fa32 	bl	8003a3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4aa1      	ldr	r2, [pc, #644]	; (8004864 <HAL_ADC_ConfigChannel+0x888>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f040 812e 	bne.w	8004840 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_ADC_ConfigChannel+0x630>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2b09      	cmp	r3, #9
 8004602:	bf94      	ite	ls
 8004604:	2301      	movls	r3, #1
 8004606:	2300      	movhi	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e019      	b.n	8004640 <HAL_ADC_ConfigChannel+0x664>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004614:	fa93 f3a3 	rbit	r3, r3
 8004618:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004624:	2320      	movs	r3, #32
 8004626:	e003      	b.n	8004630 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3301      	adds	r3, #1
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2b09      	cmp	r3, #9
 8004638:	bf94      	ite	ls
 800463a:	2301      	movls	r3, #1
 800463c:	2300      	movhi	r3, #0
 800463e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004640:	2b00      	cmp	r3, #0
 8004642:	d079      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800464c:	2b00      	cmp	r3, #0
 800464e:	d107      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x684>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	3301      	adds	r3, #1
 8004658:	069b      	lsls	r3, r3, #26
 800465a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800465e:	e015      	b.n	800468c <HAL_ADC_ConfigChannel+0x6b0>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004670:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800467c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	069b      	lsls	r3, r3, #26
 8004688:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x6d0>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2101      	movs	r1, #1
 80046a6:	fa01 f303 	lsl.w	r3, r1, r3
 80046aa:	e017      	b.n	80046dc <HAL_ADC_ConfigChannel+0x700>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e003      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80046c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3301      	adds	r3, #1
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2101      	movs	r1, #1
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x726>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0e9b      	lsrs	r3, r3, #26
 80046f2:	3301      	adds	r3, #1
 80046f4:	f003 021f 	and.w	r2, r3, #31
 80046f8:	4613      	mov	r3, r2
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4413      	add	r3, r2
 80046fe:	051b      	lsls	r3, r3, #20
 8004700:	e018      	b.n	8004734 <HAL_ADC_ConfigChannel+0x758>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800471a:	2320      	movs	r3, #32
 800471c:	e003      	b.n	8004726 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3301      	adds	r3, #1
 8004728:	f003 021f 	and.w	r2, r3, #31
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004734:	430b      	orrs	r3, r1
 8004736:	e07e      	b.n	8004836 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x778>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0e9b      	lsrs	r3, r3, #26
 800474a:	3301      	adds	r3, #1
 800474c:	069b      	lsls	r3, r3, #26
 800474e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004752:	e015      	b.n	8004780 <HAL_ADC_ConfigChannel+0x7a4>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e003      	b.n	8004778 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	069b      	lsls	r3, r3, #26
 800477c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x7c4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	3301      	adds	r3, #1
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	e017      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x7f4>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa93 f3a3 	rbit	r3, r3
 80047ac:	61bb      	str	r3, [r7, #24]
  return result;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80047b8:	2320      	movs	r3, #32
 80047ba:	e003      	b.n	80047c4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2101      	movs	r1, #1
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	ea42 0103 	orr.w	r1, r2, r3
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x820>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0e9b      	lsrs	r3, r3, #26
 80047e6:	3301      	adds	r3, #1
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	3b1e      	subs	r3, #30
 80047f4:	051b      	lsls	r3, r3, #20
 80047f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047fa:	e01b      	b.n	8004834 <HAL_ADC_ConfigChannel+0x858>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	60fb      	str	r3, [r7, #12]
  return result;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e003      	b.n	8004820 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	f003 021f 	and.w	r2, r3, #31
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	3b1e      	subs	r3, #30
 800482e:	051b      	lsls	r3, r3, #20
 8004830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004834:	430b      	orrs	r3, r1
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	6892      	ldr	r2, [r2, #8]
 800483a:	4619      	mov	r1, r3
 800483c:	f7ff f8d2 	bl	80039e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f280 80d7 	bge.w	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a06      	ldr	r2, [pc, #24]	; (8004868 <HAL_ADC_ConfigChannel+0x88c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_ADC_ConfigChannel+0x882>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <HAL_ADC_ConfigChannel+0x890>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10a      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x898>
 800485e:	4b04      	ldr	r3, [pc, #16]	; (8004870 <HAL_ADC_ConfigChannel+0x894>)
 8004860:	e009      	b.n	8004876 <HAL_ADC_ConfigChannel+0x89a>
 8004862:	bf00      	nop
 8004864:	47ff0000 	.word	0x47ff0000
 8004868:	40022000 	.word	0x40022000
 800486c:	40022100 	.word	0x40022100
 8004870:	40022300 	.word	0x40022300
 8004874:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_ADC_ConfigChannel+0xa30>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe ff88 	bl	800378c <LL_ADC_GetCommonPathInternalCh>
 800487c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a62      	ldr	r2, [pc, #392]	; (8004a10 <HAL_ADC_ConfigChannel+0xa34>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_ADC_ConfigChannel+0x8b8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a61      	ldr	r2, [pc, #388]	; (8004a14 <HAL_ADC_ConfigChannel+0xa38>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10e      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x8d6>
 8004894:	485e      	ldr	r0, [pc, #376]	; (8004a10 <HAL_ADC_ConfigChannel+0xa34>)
 8004896:	f7ff f95f 	bl	8003b58 <LL_ADC_IsEnabled>
 800489a:	4604      	mov	r4, r0
 800489c:	485d      	ldr	r0, [pc, #372]	; (8004a14 <HAL_ADC_ConfigChannel+0xa38>)
 800489e:	f7ff f95b 	bl	8003b58 <LL_ADC_IsEnabled>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4323      	orrs	r3, r4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e008      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x8e8>
 80048b2:	4859      	ldr	r0, [pc, #356]	; (8004a18 <HAL_ADC_ConfigChannel+0xa3c>)
 80048b4:	f7ff f950 	bl	8003b58 <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8084 	beq.w	80049d2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a53      	ldr	r2, [pc, #332]	; (8004a1c <HAL_ADC_ConfigChannel+0xa40>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d132      	bne.n	800493a <HAL_ADC_ConfigChannel+0x95e>
 80048d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d12c      	bne.n	800493a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a4c      	ldr	r2, [pc, #304]	; (8004a18 <HAL_ADC_ConfigChannel+0xa3c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f040 8086 	bne.w	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a47      	ldr	r2, [pc, #284]	; (8004a10 <HAL_ADC_ConfigChannel+0xa34>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x924>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a46      	ldr	r2, [pc, #280]	; (8004a14 <HAL_ADC_ConfigChannel+0xa38>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x928>
 8004900:	4a47      	ldr	r2, [pc, #284]	; (8004a20 <HAL_ADC_ConfigChannel+0xa44>)
 8004902:	e000      	b.n	8004906 <HAL_ADC_ConfigChannel+0x92a>
 8004904:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <HAL_ADC_ConfigChannel+0xa30>)
 8004906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800490a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7fe ff28 	bl	8003766 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <HAL_ADC_ConfigChannel+0xa48>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	4a42      	ldr	r2, [pc, #264]	; (8004a28 <HAL_ADC_ConfigChannel+0xa4c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	3301      	adds	r3, #1
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800492a:	e002      	b.n	8004932 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f9      	bne.n	800492c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004938:	e05e      	b.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a3b      	ldr	r2, [pc, #236]	; (8004a2c <HAL_ADC_ConfigChannel+0xa50>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d120      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x9aa>
 8004944:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d11a      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_ADC_ConfigChannel+0xa3c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d14e      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a2c      	ldr	r2, [pc, #176]	; (8004a10 <HAL_ADC_ConfigChannel+0xa34>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_ADC_ConfigChannel+0x992>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <HAL_ADC_ConfigChannel+0xa38>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x996>
 800496e:	4a2c      	ldr	r2, [pc, #176]	; (8004a20 <HAL_ADC_ConfigChannel+0xa44>)
 8004970:	e000      	b.n	8004974 <HAL_ADC_ConfigChannel+0x998>
 8004972:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <HAL_ADC_ConfigChannel+0xa30>)
 8004974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fe fef1 	bl	8003766 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004984:	e038      	b.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <HAL_ADC_ConfigChannel+0xa54>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d133      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
 8004990:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d12d      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_ADC_ConfigChannel+0xa3c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d128      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <HAL_ADC_ConfigChannel+0xa34>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_ADC_ConfigChannel+0x9de>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <HAL_ADC_ConfigChannel+0xa38>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x9e2>
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <HAL_ADC_ConfigChannel+0xa44>)
 80049bc:	e000      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x9e4>
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <HAL_ADC_ConfigChannel+0xa30>)
 80049c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fe fecb 	bl	8003766 <LL_ADC_SetCommonPathInternalCh>
 80049d0:	e012      	b.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80049e4:	e008      	b.n	80049f8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a00:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	37e4      	adds	r7, #228	; 0xe4
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}
 8004a0c:	58026300 	.word	0x58026300
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40022100 	.word	0x40022100
 8004a18:	58026000 	.word	0x58026000
 8004a1c:	c7520000 	.word	0xc7520000
 8004a20:	40022300 	.word	0x40022300
 8004a24:	24000000 	.word	0x24000000
 8004a28:	053e2d63 	.word	0x053e2d63
 8004a2c:	c3210000 	.word	0xc3210000
 8004a30:	cb840000 	.word	0xcb840000

08004a34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a6c      	ldr	r2, [pc, #432]	; (8004bf4 <ADC_ConfigureBoostMode+0x1c0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <ADC_ConfigureBoostMode+0x1c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <ADC_ConfigureBoostMode+0x1c4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <ADC_ConfigureBoostMode+0x30>
 8004a50:	4b6a      	ldr	r3, [pc, #424]	; (8004bfc <ADC_ConfigureBoostMode+0x1c8>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e008      	b.n	8004a76 <ADC_ConfigureBoostMode+0x42>
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <ADC_ConfigureBoostMode+0x1cc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01c      	beq.n	8004ab4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a7a:	f005 fc93 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 8004a7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a88:	d010      	beq.n	8004aac <ADC_ConfigureBoostMode+0x78>
 8004a8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a8e:	d873      	bhi.n	8004b78 <ADC_ConfigureBoostMode+0x144>
 8004a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a94:	d002      	beq.n	8004a9c <ADC_ConfigureBoostMode+0x68>
 8004a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a9a:	d16d      	bne.n	8004b78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
        break;
 8004aaa:	e068      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	60fb      	str	r3, [r7, #12]
        break;
 8004ab2:	e064      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ab4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	f006 fe6e 	bl	800b79c <HAL_RCCEx_GetPeriphCLKFreq>
 8004ac0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004aca:	d051      	beq.n	8004b70 <ADC_ConfigureBoostMode+0x13c>
 8004acc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ad0:	d854      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004ad2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ad6:	d047      	beq.n	8004b68 <ADC_ConfigureBoostMode+0x134>
 8004ad8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004adc:	d84e      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004ade:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ae2:	d03d      	beq.n	8004b60 <ADC_ConfigureBoostMode+0x12c>
 8004ae4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ae8:	d848      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004aea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aee:	d033      	beq.n	8004b58 <ADC_ConfigureBoostMode+0x124>
 8004af0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af4:	d842      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004af6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004afa:	d029      	beq.n	8004b50 <ADC_ConfigureBoostMode+0x11c>
 8004afc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b00:	d83c      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004b02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b06:	d01a      	beq.n	8004b3e <ADC_ConfigureBoostMode+0x10a>
 8004b08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b0c:	d836      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004b0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b12:	d014      	beq.n	8004b3e <ADC_ConfigureBoostMode+0x10a>
 8004b14:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b18:	d830      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d00e      	beq.n	8004b3e <ADC_ConfigureBoostMode+0x10a>
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d82a      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004b26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b2a:	d008      	beq.n	8004b3e <ADC_ConfigureBoostMode+0x10a>
 8004b2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b30:	d824      	bhi.n	8004b7c <ADC_ConfigureBoostMode+0x148>
 8004b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b36:	d002      	beq.n	8004b3e <ADC_ConfigureBoostMode+0x10a>
 8004b38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b3c:	d11e      	bne.n	8004b7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	0c9b      	lsrs	r3, r3, #18
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	60fb      	str	r3, [r7, #12]
        break;
 8004b4e:	e016      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	60fb      	str	r3, [r7, #12]
        break;
 8004b56:	e012      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	60fb      	str	r3, [r7, #12]
        break;
 8004b5e:	e00e      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	60fb      	str	r3, [r7, #12]
        break;
 8004b66:	e00a      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	09db      	lsrs	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
        break;
 8004b6e:	e006      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	60fb      	str	r3, [r7, #12]
        break;
 8004b76:	e002      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b7c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	085b      	lsrs	r3, r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <ADC_ConfigureBoostMode+0x1d0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d808      	bhi.n	8004b9e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b9c:	e025      	b.n	8004bea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <ADC_ConfigureBoostMode+0x1d4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d80a      	bhi.n	8004bbc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb8:	609a      	str	r2, [r3, #8]
}
 8004bba:	e016      	b.n	8004bea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <ADC_ConfigureBoostMode+0x1d8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d80a      	bhi.n	8004bda <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	e007      	b.n	8004bea <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	bf00      	nop
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40022100 	.word	0x40022100
 8004bfc:	40022300 	.word	0x40022300
 8004c00:	58026300 	.word	0x58026300
 8004c04:	005f5e10 	.word	0x005f5e10
 8004c08:	00bebc20 	.word	0x00bebc20
 8004c0c:	017d7840 	.word	0x017d7840

08004c10 <LL_ADC_IsEnabled>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <LL_ADC_IsEnabled+0x18>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <LL_ADC_IsEnabled+0x1a>
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d101      	bne.n	8004c4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b0a3      	sub	sp, #140	; 0x8c
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0c1      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c82:	2300      	movs	r3, #0
 8004c84:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a5e      	ldr	r2, [pc, #376]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d102      	bne.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c94:	4b5d      	ldr	r3, [pc, #372]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e001      	b.n	8004c9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca8:	f043 0220 	orr.w	r2, r3, #32
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0a0      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ffb9 	bl	8004c36 <LL_ADC_REG_IsConversionOngoing>
 8004cc4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ffb2 	bl	8004c36 <LL_ADC_REG_IsConversionOngoing>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f040 8081 	bne.w	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d17c      	bne.n	8004ddc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a48      	ldr	r2, [pc, #288]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a46      	ldr	r2, [pc, #280]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004cf6:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004cf8:	e000      	b.n	8004cfc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004cfa:	4b46      	ldr	r3, [pc, #280]	; (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004cfc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d039      	beq.n	8004d7a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10e      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004d2c:	4836      	ldr	r0, [pc, #216]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d2e:	f7ff ff6f 	bl	8004c10 <LL_ADC_IsEnabled>
 8004d32:	4604      	mov	r4, r0
 8004d34:	4835      	ldr	r0, [pc, #212]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d36:	f7ff ff6b 	bl	8004c10 <LL_ADC_IsEnabled>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4323      	orrs	r3, r4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e008      	b.n	8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004d4a:	4833      	ldr	r0, [pc, #204]	; (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004d4c:	f7ff ff60 	bl	8004c10 <LL_ADC_IsEnabled>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d047      	beq.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	6811      	ldr	r1, [r2, #0]
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6892      	ldr	r2, [r2, #8]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d78:	e03a      	b.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10e      	bne.n	8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004d9a:	481b      	ldr	r0, [pc, #108]	; (8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d9c:	f7ff ff38 	bl	8004c10 <LL_ADC_IsEnabled>
 8004da0:	4604      	mov	r4, r0
 8004da2:	481a      	ldr	r0, [pc, #104]	; (8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004da4:	f7ff ff34 	bl	8004c10 <LL_ADC_IsEnabled>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4323      	orrs	r3, r4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	e008      	b.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004db8:	4817      	ldr	r0, [pc, #92]	; (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004dba:	f7ff ff29 	bl	8004c10 <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d010      	beq.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004dd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dda:	e009      	b.n	8004df0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004dee:	e000      	b.n	8004df2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004df0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004dfa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	378c      	adds	r7, #140	; 0x8c
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd90      	pop	{r4, r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40022000 	.word	0x40022000
 8004e0c:	40022100 	.word	0x40022100
 8004e10:	40022300 	.word	0x40022300
 8004e14:	58026300 	.word	0x58026300
 8004e18:	58026000 	.word	0x58026000
 8004e1c:	fffff0e0 	.word	0xfffff0e0

08004e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <__NVIC_SetPriorityGrouping+0x40>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <__NVIC_SetPriorityGrouping+0x44>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <__NVIC_SetPriorityGrouping+0x40>)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	60d3      	str	r3, [r2, #12]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	e000ed00 	.word	0xe000ed00
 8004e64:	05fa0000 	.word	0x05fa0000

08004e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <__NVIC_GetPriorityGrouping+0x18>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	f003 0307 	and.w	r3, r3, #7
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	db0b      	blt.n	8004eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	f003 021f 	and.w	r2, r3, #31
 8004e9c:	4907      	ldr	r1, [pc, #28]	; (8004ebc <__NVIC_EnableIRQ+0x38>)
 8004e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	e000e100 	.word	0xe000e100

08004ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	db0a      	blt.n	8004eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	490c      	ldr	r1, [pc, #48]	; (8004f0c <__NVIC_SetPriority+0x4c>)
 8004eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee8:	e00a      	b.n	8004f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4908      	ldr	r1, [pc, #32]	; (8004f10 <__NVIC_SetPriority+0x50>)
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	440b      	add	r3, r1
 8004efe:	761a      	strb	r2, [r3, #24]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	bf28      	it	cs
 8004f32:	2304      	movcs	r3, #4
 8004f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d902      	bls.n	8004f44 <NVIC_EncodePriority+0x30>
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3b03      	subs	r3, #3
 8004f42:	e000      	b.n	8004f46 <NVIC_EncodePriority+0x32>
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	401a      	ands	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43d9      	mvns	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	4313      	orrs	r3, r2
         );
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f8c:	d301      	bcc.n	8004f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e00f      	b.n	8004fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f92:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <SysTick_Config+0x40>)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f9a:	210f      	movs	r1, #15
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	f7ff ff8e 	bl	8004ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <SysTick_Config+0x40>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <SysTick_Config+0x40>)
 8004fac:	2207      	movs	r2, #7
 8004fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	e000e010 	.word	0xe000e010

08004fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff29 	bl	8004e20 <__NVIC_SetPriorityGrouping>
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fe4:	f7ff ff40 	bl	8004e68 <__NVIC_GetPriorityGrouping>
 8004fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	6978      	ldr	r0, [r7, #20]
 8004ff0:	f7ff ff90 	bl	8004f14 <NVIC_EncodePriority>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ff5f 	bl	8004ec0 <__NVIC_SetPriority>
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005014:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ff33 	bl	8004e84 <__NVIC_EnableIRQ>
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ffa4 	bl	8004f7c <SysTick_Config>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005048:	f7fe fb34 	bl	80036b4 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e312      	b.n	800567e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a66      	ldr	r2, [pc, #408]	; (80051f8 <HAL_DMA_Init+0x1b8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d04a      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a65      	ldr	r2, [pc, #404]	; (80051fc <HAL_DMA_Init+0x1bc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d045      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a63      	ldr	r2, [pc, #396]	; (8005200 <HAL_DMA_Init+0x1c0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d040      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a62      	ldr	r2, [pc, #392]	; (8005204 <HAL_DMA_Init+0x1c4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d03b      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a60      	ldr	r2, [pc, #384]	; (8005208 <HAL_DMA_Init+0x1c8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d036      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5f      	ldr	r2, [pc, #380]	; (800520c <HAL_DMA_Init+0x1cc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d031      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5d      	ldr	r2, [pc, #372]	; (8005210 <HAL_DMA_Init+0x1d0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d02c      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5c      	ldr	r2, [pc, #368]	; (8005214 <HAL_DMA_Init+0x1d4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d027      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5a      	ldr	r2, [pc, #360]	; (8005218 <HAL_DMA_Init+0x1d8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d022      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a59      	ldr	r2, [pc, #356]	; (800521c <HAL_DMA_Init+0x1dc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d01d      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a57      	ldr	r2, [pc, #348]	; (8005220 <HAL_DMA_Init+0x1e0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d018      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a56      	ldr	r2, [pc, #344]	; (8005224 <HAL_DMA_Init+0x1e4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a54      	ldr	r2, [pc, #336]	; (8005228 <HAL_DMA_Init+0x1e8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a53      	ldr	r2, [pc, #332]	; (800522c <HAL_DMA_Init+0x1ec>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a51      	ldr	r2, [pc, #324]	; (8005230 <HAL_DMA_Init+0x1f0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_DMA_Init+0xb8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a50      	ldr	r2, [pc, #320]	; (8005234 <HAL_DMA_Init+0x1f4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <HAL_DMA_Init+0xbc>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_DMA_Init+0xbe>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 813c 	beq.w	800537c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a37      	ldr	r2, [pc, #220]	; (80051f8 <HAL_DMA_Init+0x1b8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04a      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a36      	ldr	r2, [pc, #216]	; (80051fc <HAL_DMA_Init+0x1bc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d045      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a34      	ldr	r2, [pc, #208]	; (8005200 <HAL_DMA_Init+0x1c0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d040      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a33      	ldr	r2, [pc, #204]	; (8005204 <HAL_DMA_Init+0x1c4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <HAL_DMA_Init+0x1c8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d036      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a30      	ldr	r2, [pc, #192]	; (800520c <HAL_DMA_Init+0x1cc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2e      	ldr	r2, [pc, #184]	; (8005210 <HAL_DMA_Init+0x1d0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02c      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2d      	ldr	r2, [pc, #180]	; (8005214 <HAL_DMA_Init+0x1d4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d027      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <HAL_DMA_Init+0x1d8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d022      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2a      	ldr	r2, [pc, #168]	; (800521c <HAL_DMA_Init+0x1dc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d01d      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <HAL_DMA_Init+0x1e0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a27      	ldr	r2, [pc, #156]	; (8005224 <HAL_DMA_Init+0x1e4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <HAL_DMA_Init+0x1e8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a24      	ldr	r2, [pc, #144]	; (800522c <HAL_DMA_Init+0x1ec>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a22      	ldr	r2, [pc, #136]	; (8005230 <HAL_DMA_Init+0x1f0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_DMA_Init+0x174>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_DMA_Init+0x1f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <HAL_DMA_Init+0x186>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e007      	b.n	80051d6 <HAL_DMA_Init+0x196>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051d6:	e02f      	b.n	8005238 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d8:	f7fe fa6c 	bl	80036b4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	d928      	bls.n	8005238 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2203      	movs	r2, #3
 80051f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e242      	b.n	800567e <HAL_DMA_Init+0x63e>
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1c8      	bne.n	80051d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4b83      	ldr	r3, [pc, #524]	; (8005460 <HAL_DMA_Init+0x420>)
 8005252:	4013      	ands	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800525e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005276:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b04      	cmp	r3, #4
 800528a:	d107      	bne.n	800529c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	4313      	orrs	r3, r2
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b28      	cmp	r3, #40	; 0x28
 80052a2:	d903      	bls.n	80052ac <HAL_DMA_Init+0x26c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b2e      	cmp	r3, #46	; 0x2e
 80052aa:	d91f      	bls.n	80052ec <HAL_DMA_Init+0x2ac>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b3e      	cmp	r3, #62	; 0x3e
 80052b2:	d903      	bls.n	80052bc <HAL_DMA_Init+0x27c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b42      	cmp	r3, #66	; 0x42
 80052ba:	d917      	bls.n	80052ec <HAL_DMA_Init+0x2ac>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b46      	cmp	r3, #70	; 0x46
 80052c2:	d903      	bls.n	80052cc <HAL_DMA_Init+0x28c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b48      	cmp	r3, #72	; 0x48
 80052ca:	d90f      	bls.n	80052ec <HAL_DMA_Init+0x2ac>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b4e      	cmp	r3, #78	; 0x4e
 80052d2:	d903      	bls.n	80052dc <HAL_DMA_Init+0x29c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b52      	cmp	r3, #82	; 0x52
 80052da:	d907      	bls.n	80052ec <HAL_DMA_Init+0x2ac>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b73      	cmp	r3, #115	; 0x73
 80052e2:	d905      	bls.n	80052f0 <HAL_DMA_Init+0x2b0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b77      	cmp	r3, #119	; 0x77
 80052ea:	d801      	bhi.n	80052f0 <HAL_DMA_Init+0x2b0>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_DMA_Init+0x2b2>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b04      	cmp	r3, #4
 8005326:	d117      	bne.n	8005358 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00e      	beq.n	8005358 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fdca 	bl	8006ed4 <DMA_CheckFifoParam>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e192      	b.n	800567e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 fd05 	bl	8006d70 <DMA_CalcBaseAndBitshift>
 8005366:	4603      	mov	r3, r0
 8005368:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	223f      	movs	r2, #63	; 0x3f
 8005374:	409a      	lsls	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	e0c8      	b.n	800550e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a38      	ldr	r2, [pc, #224]	; (8005464 <HAL_DMA_Init+0x424>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a37      	ldr	r2, [pc, #220]	; (8005468 <HAL_DMA_Init+0x428>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a35      	ldr	r2, [pc, #212]	; (800546c <HAL_DMA_Init+0x42c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a34      	ldr	r2, [pc, #208]	; (8005470 <HAL_DMA_Init+0x430>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a32      	ldr	r2, [pc, #200]	; (8005474 <HAL_DMA_Init+0x434>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a31      	ldr	r2, [pc, #196]	; (8005478 <HAL_DMA_Init+0x438>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2f      	ldr	r2, [pc, #188]	; (800547c <HAL_DMA_Init+0x43c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_Init+0x38c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a2e      	ldr	r2, [pc, #184]	; (8005480 <HAL_DMA_Init+0x440>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_Init+0x390>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_DMA_Init+0x392>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8092 	beq.w	80054fc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <HAL_DMA_Init+0x424>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d021      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a20      	ldr	r2, [pc, #128]	; (8005468 <HAL_DMA_Init+0x428>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d01c      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1e      	ldr	r2, [pc, #120]	; (800546c <HAL_DMA_Init+0x42c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d017      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <HAL_DMA_Init+0x430>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d012      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_DMA_Init+0x434>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00d      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <HAL_DMA_Init+0x438>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d008      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a18      	ldr	r2, [pc, #96]	; (800547c <HAL_DMA_Init+0x43c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <HAL_DMA_Init+0x3e6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_DMA_Init+0x440>)
 8005424:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <HAL_DMA_Init+0x444>)
 8005442:	4013      	ands	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b40      	cmp	r3, #64	; 0x40
 800544c:	d01c      	beq.n	8005488 <HAL_DMA_Init+0x448>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	d102      	bne.n	800545c <HAL_DMA_Init+0x41c>
 8005456:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800545a:	e016      	b.n	800548a <HAL_DMA_Init+0x44a>
 800545c:	2300      	movs	r3, #0
 800545e:	e014      	b.n	800548a <HAL_DMA_Init+0x44a>
 8005460:	fe10803f 	.word	0xfe10803f
 8005464:	58025408 	.word	0x58025408
 8005468:	5802541c 	.word	0x5802541c
 800546c:	58025430 	.word	0x58025430
 8005470:	58025444 	.word	0x58025444
 8005474:	58025458 	.word	0x58025458
 8005478:	5802546c 	.word	0x5802546c
 800547c:	58025480 	.word	0x58025480
 8005480:	58025494 	.word	0x58025494
 8005484:	fffe000f 	.word	0xfffe000f
 8005488:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68d2      	ldr	r2, [r2, #12]
 800548e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b6e      	ldr	r3, [pc, #440]	; (8005688 <HAL_DMA_Init+0x648>)
 80054d0:	4413      	add	r3, r2
 80054d2:	4a6e      	ldr	r2, [pc, #440]	; (800568c <HAL_DMA_Init+0x64c>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	009a      	lsls	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fc45 	bl	8006d70 <DMA_CalcBaseAndBitshift>
 80054e6:	4603      	mov	r3, r0
 80054e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2201      	movs	r2, #1
 80054f4:	409a      	lsls	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
 80054fa:	e008      	b.n	800550e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2240      	movs	r2, #64	; 0x40
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2203      	movs	r2, #3
 8005506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0b7      	b.n	800567e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_DMA_Init+0x650>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d072      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5d      	ldr	r2, [pc, #372]	; (8005694 <HAL_DMA_Init+0x654>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d06d      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5c      	ldr	r2, [pc, #368]	; (8005698 <HAL_DMA_Init+0x658>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d068      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5a      	ldr	r2, [pc, #360]	; (800569c <HAL_DMA_Init+0x65c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d063      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a59      	ldr	r2, [pc, #356]	; (80056a0 <HAL_DMA_Init+0x660>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d05e      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a57      	ldr	r2, [pc, #348]	; (80056a4 <HAL_DMA_Init+0x664>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d059      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a56      	ldr	r2, [pc, #344]	; (80056a8 <HAL_DMA_Init+0x668>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d054      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a54      	ldr	r2, [pc, #336]	; (80056ac <HAL_DMA_Init+0x66c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d04f      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a53      	ldr	r2, [pc, #332]	; (80056b0 <HAL_DMA_Init+0x670>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d04a      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a51      	ldr	r2, [pc, #324]	; (80056b4 <HAL_DMA_Init+0x674>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d045      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a50      	ldr	r2, [pc, #320]	; (80056b8 <HAL_DMA_Init+0x678>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d040      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a4e      	ldr	r2, [pc, #312]	; (80056bc <HAL_DMA_Init+0x67c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4d      	ldr	r2, [pc, #308]	; (80056c0 <HAL_DMA_Init+0x680>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d036      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a4b      	ldr	r2, [pc, #300]	; (80056c4 <HAL_DMA_Init+0x684>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d031      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a4a      	ldr	r2, [pc, #296]	; (80056c8 <HAL_DMA_Init+0x688>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d02c      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a48      	ldr	r2, [pc, #288]	; (80056cc <HAL_DMA_Init+0x68c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d027      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a47      	ldr	r2, [pc, #284]	; (80056d0 <HAL_DMA_Init+0x690>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a45      	ldr	r2, [pc, #276]	; (80056d4 <HAL_DMA_Init+0x694>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a44      	ldr	r2, [pc, #272]	; (80056d8 <HAL_DMA_Init+0x698>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a42      	ldr	r2, [pc, #264]	; (80056dc <HAL_DMA_Init+0x69c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a41      	ldr	r2, [pc, #260]	; (80056e0 <HAL_DMA_Init+0x6a0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a3f      	ldr	r2, [pc, #252]	; (80056e4 <HAL_DMA_Init+0x6a4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3e      	ldr	r2, [pc, #248]	; (80056e8 <HAL_DMA_Init+0x6a8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_DMA_Init+0x5be>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a3c      	ldr	r2, [pc, #240]	; (80056ec <HAL_DMA_Init+0x6ac>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_DMA_Init+0x5c2>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_DMA_Init+0x5c4>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d032      	beq.n	800566e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f001 fcdf 	bl	8006fcc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d102      	bne.n	800561c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005630:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_DMA_Init+0x61c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b08      	cmp	r3, #8
 8005640:	d80c      	bhi.n	800565c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fd5c 	bl	8007100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005658:	605a      	str	r2, [r3, #4]
 800565a:	e008      	b.n	800566e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	a7fdabf8 	.word	0xa7fdabf8
 800568c:	cccccccd 	.word	0xcccccccd
 8005690:	40020010 	.word	0x40020010
 8005694:	40020028 	.word	0x40020028
 8005698:	40020040 	.word	0x40020040
 800569c:	40020058 	.word	0x40020058
 80056a0:	40020070 	.word	0x40020070
 80056a4:	40020088 	.word	0x40020088
 80056a8:	400200a0 	.word	0x400200a0
 80056ac:	400200b8 	.word	0x400200b8
 80056b0:	40020410 	.word	0x40020410
 80056b4:	40020428 	.word	0x40020428
 80056b8:	40020440 	.word	0x40020440
 80056bc:	40020458 	.word	0x40020458
 80056c0:	40020470 	.word	0x40020470
 80056c4:	40020488 	.word	0x40020488
 80056c8:	400204a0 	.word	0x400204a0
 80056cc:	400204b8 	.word	0x400204b8
 80056d0:	58025408 	.word	0x58025408
 80056d4:	5802541c 	.word	0x5802541c
 80056d8:	58025430 	.word	0x58025430
 80056dc:	58025444 	.word	0x58025444
 80056e0:	58025458 	.word	0x58025458
 80056e4:	5802546c 	.word	0x5802546c
 80056e8:	58025480 	.word	0x58025480
 80056ec:	58025494 	.word	0x58025494

080056f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e226      	b.n	8005b5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_DMA_Start_IT+0x2a>
 8005716:	2302      	movs	r3, #2
 8005718:	e21f      	b.n	8005b5a <HAL_DMA_Start_IT+0x46a>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	f040 820a 	bne.w	8005b44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a68      	ldr	r2, [pc, #416]	; (80058e4 <HAL_DMA_Start_IT+0x1f4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d04a      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a66      	ldr	r2, [pc, #408]	; (80058e8 <HAL_DMA_Start_IT+0x1f8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d045      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a65      	ldr	r2, [pc, #404]	; (80058ec <HAL_DMA_Start_IT+0x1fc>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d040      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a63      	ldr	r2, [pc, #396]	; (80058f0 <HAL_DMA_Start_IT+0x200>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d03b      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a62      	ldr	r2, [pc, #392]	; (80058f4 <HAL_DMA_Start_IT+0x204>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d036      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a60      	ldr	r2, [pc, #384]	; (80058f8 <HAL_DMA_Start_IT+0x208>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d031      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a5f      	ldr	r2, [pc, #380]	; (80058fc <HAL_DMA_Start_IT+0x20c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d02c      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a5d      	ldr	r2, [pc, #372]	; (8005900 <HAL_DMA_Start_IT+0x210>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d027      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a5c      	ldr	r2, [pc, #368]	; (8005904 <HAL_DMA_Start_IT+0x214>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d022      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a5a      	ldr	r2, [pc, #360]	; (8005908 <HAL_DMA_Start_IT+0x218>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01d      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a59      	ldr	r2, [pc, #356]	; (800590c <HAL_DMA_Start_IT+0x21c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a57      	ldr	r2, [pc, #348]	; (8005910 <HAL_DMA_Start_IT+0x220>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a56      	ldr	r2, [pc, #344]	; (8005914 <HAL_DMA_Start_IT+0x224>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a54      	ldr	r2, [pc, #336]	; (8005918 <HAL_DMA_Start_IT+0x228>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a53      	ldr	r2, [pc, #332]	; (800591c <HAL_DMA_Start_IT+0x22c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_DMA_Start_IT+0xee>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a51      	ldr	r2, [pc, #324]	; (8005920 <HAL_DMA_Start_IT+0x230>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <HAL_DMA_Start_IT+0x100>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0201 	bic.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e007      	b.n	8005800 <HAL_DMA_Start_IT+0x110>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f001 f906 	bl	8006a18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a34      	ldr	r2, [pc, #208]	; (80058e4 <HAL_DMA_Start_IT+0x1f4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d04a      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a33      	ldr	r2, [pc, #204]	; (80058e8 <HAL_DMA_Start_IT+0x1f8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d045      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a31      	ldr	r2, [pc, #196]	; (80058ec <HAL_DMA_Start_IT+0x1fc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d040      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a30      	ldr	r2, [pc, #192]	; (80058f0 <HAL_DMA_Start_IT+0x200>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d03b      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <HAL_DMA_Start_IT+0x204>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d036      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a2d      	ldr	r2, [pc, #180]	; (80058f8 <HAL_DMA_Start_IT+0x208>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d031      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2b      	ldr	r2, [pc, #172]	; (80058fc <HAL_DMA_Start_IT+0x20c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02c      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2a      	ldr	r2, [pc, #168]	; (8005900 <HAL_DMA_Start_IT+0x210>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d027      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a28      	ldr	r2, [pc, #160]	; (8005904 <HAL_DMA_Start_IT+0x214>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d022      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <HAL_DMA_Start_IT+0x218>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d01d      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HAL_DMA_Start_IT+0x21c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d018      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a24      	ldr	r2, [pc, #144]	; (8005910 <HAL_DMA_Start_IT+0x220>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a22      	ldr	r2, [pc, #136]	; (8005914 <HAL_DMA_Start_IT+0x224>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a21      	ldr	r2, [pc, #132]	; (8005918 <HAL_DMA_Start_IT+0x228>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <HAL_DMA_Start_IT+0x22c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_DMA_Start_IT+0x1bc>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_DMA_Start_IT+0x230>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d101      	bne.n	80058b0 <HAL_DMA_Start_IT+0x1c0>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <HAL_DMA_Start_IT+0x1c2>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d036      	beq.n	8005924 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 021e 	bic.w	r2, r3, #30
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0216 	orr.w	r2, r2, #22
 80058c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03e      	beq.n	8005950 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0208 	orr.w	r2, r2, #8
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e035      	b.n	8005950 <HAL_DMA_Start_IT+0x260>
 80058e4:	40020010 	.word	0x40020010
 80058e8:	40020028 	.word	0x40020028
 80058ec:	40020040 	.word	0x40020040
 80058f0:	40020058 	.word	0x40020058
 80058f4:	40020070 	.word	0x40020070
 80058f8:	40020088 	.word	0x40020088
 80058fc:	400200a0 	.word	0x400200a0
 8005900:	400200b8 	.word	0x400200b8
 8005904:	40020410 	.word	0x40020410
 8005908:	40020428 	.word	0x40020428
 800590c:	40020440 	.word	0x40020440
 8005910:	40020458 	.word	0x40020458
 8005914:	40020470 	.word	0x40020470
 8005918:	40020488 	.word	0x40020488
 800591c:	400204a0 	.word	0x400204a0
 8005920:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 020e 	bic.w	r2, r3, #14
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 020a 	orr.w	r2, r2, #10
 8005936:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0204 	orr.w	r2, r2, #4
 800594e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a83      	ldr	r2, [pc, #524]	; (8005b64 <HAL_DMA_Start_IT+0x474>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d072      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a82      	ldr	r2, [pc, #520]	; (8005b68 <HAL_DMA_Start_IT+0x478>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d06d      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a80      	ldr	r2, [pc, #512]	; (8005b6c <HAL_DMA_Start_IT+0x47c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d068      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a7f      	ldr	r2, [pc, #508]	; (8005b70 <HAL_DMA_Start_IT+0x480>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d063      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a7d      	ldr	r2, [pc, #500]	; (8005b74 <HAL_DMA_Start_IT+0x484>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d05e      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7c      	ldr	r2, [pc, #496]	; (8005b78 <HAL_DMA_Start_IT+0x488>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d059      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a7a      	ldr	r2, [pc, #488]	; (8005b7c <HAL_DMA_Start_IT+0x48c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d054      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a79      	ldr	r2, [pc, #484]	; (8005b80 <HAL_DMA_Start_IT+0x490>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d04f      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a77      	ldr	r2, [pc, #476]	; (8005b84 <HAL_DMA_Start_IT+0x494>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d04a      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a76      	ldr	r2, [pc, #472]	; (8005b88 <HAL_DMA_Start_IT+0x498>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d045      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a74      	ldr	r2, [pc, #464]	; (8005b8c <HAL_DMA_Start_IT+0x49c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d040      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a73      	ldr	r2, [pc, #460]	; (8005b90 <HAL_DMA_Start_IT+0x4a0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d03b      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a71      	ldr	r2, [pc, #452]	; (8005b94 <HAL_DMA_Start_IT+0x4a4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d036      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a70      	ldr	r2, [pc, #448]	; (8005b98 <HAL_DMA_Start_IT+0x4a8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d031      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6e      	ldr	r2, [pc, #440]	; (8005b9c <HAL_DMA_Start_IT+0x4ac>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d02c      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6d      	ldr	r2, [pc, #436]	; (8005ba0 <HAL_DMA_Start_IT+0x4b0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d027      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a6b      	ldr	r2, [pc, #428]	; (8005ba4 <HAL_DMA_Start_IT+0x4b4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d022      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a6a      	ldr	r2, [pc, #424]	; (8005ba8 <HAL_DMA_Start_IT+0x4b8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d01d      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a68      	ldr	r2, [pc, #416]	; (8005bac <HAL_DMA_Start_IT+0x4bc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d018      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a67      	ldr	r2, [pc, #412]	; (8005bb0 <HAL_DMA_Start_IT+0x4c0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d013      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a65      	ldr	r2, [pc, #404]	; (8005bb4 <HAL_DMA_Start_IT+0x4c4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00e      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <HAL_DMA_Start_IT+0x4c8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d009      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a62      	ldr	r2, [pc, #392]	; (8005bbc <HAL_DMA_Start_IT+0x4cc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_DMA_Start_IT+0x350>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a61      	ldr	r2, [pc, #388]	; (8005bc0 <HAL_DMA_Start_IT+0x4d0>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_DMA_Start_IT+0x354>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_DMA_Start_IT+0x356>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01a      	beq.n	8005a80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d007      	beq.n	8005a80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a37      	ldr	r2, [pc, #220]	; (8005b64 <HAL_DMA_Start_IT+0x474>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04a      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a36      	ldr	r2, [pc, #216]	; (8005b68 <HAL_DMA_Start_IT+0x478>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d045      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a34      	ldr	r2, [pc, #208]	; (8005b6c <HAL_DMA_Start_IT+0x47c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d040      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a33      	ldr	r2, [pc, #204]	; (8005b70 <HAL_DMA_Start_IT+0x480>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d03b      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a31      	ldr	r2, [pc, #196]	; (8005b74 <HAL_DMA_Start_IT+0x484>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d036      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a30      	ldr	r2, [pc, #192]	; (8005b78 <HAL_DMA_Start_IT+0x488>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d031      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2e      	ldr	r2, [pc, #184]	; (8005b7c <HAL_DMA_Start_IT+0x48c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d02c      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_DMA_Start_IT+0x490>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d027      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2b      	ldr	r2, [pc, #172]	; (8005b84 <HAL_DMA_Start_IT+0x494>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d022      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <HAL_DMA_Start_IT+0x498>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d01d      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <HAL_DMA_Start_IT+0x49c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d018      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <HAL_DMA_Start_IT+0x4a0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <HAL_DMA_Start_IT+0x4a4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00e      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_DMA_Start_IT+0x4a8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <HAL_DMA_Start_IT+0x4ac>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <HAL_DMA_Start_IT+0x430>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <HAL_DMA_Start_IT+0x4b0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <HAL_DMA_Start_IT+0x442>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	e012      	b.n	8005b58 <HAL_DMA_Start_IT+0x468>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e009      	b.n	8005b58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40020010 	.word	0x40020010
 8005b68:	40020028 	.word	0x40020028
 8005b6c:	40020040 	.word	0x40020040
 8005b70:	40020058 	.word	0x40020058
 8005b74:	40020070 	.word	0x40020070
 8005b78:	40020088 	.word	0x40020088
 8005b7c:	400200a0 	.word	0x400200a0
 8005b80:	400200b8 	.word	0x400200b8
 8005b84:	40020410 	.word	0x40020410
 8005b88:	40020428 	.word	0x40020428
 8005b8c:	40020440 	.word	0x40020440
 8005b90:	40020458 	.word	0x40020458
 8005b94:	40020470 	.word	0x40020470
 8005b98:	40020488 	.word	0x40020488
 8005b9c:	400204a0 	.word	0x400204a0
 8005ba0:	400204b8 	.word	0x400204b8
 8005ba4:	58025408 	.word	0x58025408
 8005ba8:	5802541c 	.word	0x5802541c
 8005bac:	58025430 	.word	0x58025430
 8005bb0:	58025444 	.word	0x58025444
 8005bb4:	58025458 	.word	0x58025458
 8005bb8:	5802546c 	.word	0x5802546c
 8005bbc:	58025480 	.word	0x58025480
 8005bc0:	58025494 	.word	0x58025494

08005bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	; 0x28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bd0:	4b67      	ldr	r3, [pc, #412]	; (8005d70 <HAL_DMA_IRQHandler+0x1ac>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a67      	ldr	r2, [pc, #412]	; (8005d74 <HAL_DMA_IRQHandler+0x1b0>)
 8005bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bda:	0a9b      	lsrs	r3, r3, #10
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5f      	ldr	r2, [pc, #380]	; (8005d78 <HAL_DMA_IRQHandler+0x1b4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5d      	ldr	r2, [pc, #372]	; (8005d7c <HAL_DMA_IRQHandler+0x1b8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a5c      	ldr	r2, [pc, #368]	; (8005d80 <HAL_DMA_IRQHandler+0x1bc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a5a      	ldr	r2, [pc, #360]	; (8005d84 <HAL_DMA_IRQHandler+0x1c0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a59      	ldr	r2, [pc, #356]	; (8005d88 <HAL_DMA_IRQHandler+0x1c4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a57      	ldr	r2, [pc, #348]	; (8005d8c <HAL_DMA_IRQHandler+0x1c8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a56      	ldr	r2, [pc, #344]	; (8005d90 <HAL_DMA_IRQHandler+0x1cc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a54      	ldr	r2, [pc, #336]	; (8005d94 <HAL_DMA_IRQHandler+0x1d0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a53      	ldr	r2, [pc, #332]	; (8005d98 <HAL_DMA_IRQHandler+0x1d4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a51      	ldr	r2, [pc, #324]	; (8005d9c <HAL_DMA_IRQHandler+0x1d8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a50      	ldr	r2, [pc, #320]	; (8005da0 <HAL_DMA_IRQHandler+0x1dc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <HAL_DMA_IRQHandler+0x1e0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a4d      	ldr	r2, [pc, #308]	; (8005da8 <HAL_DMA_IRQHandler+0x1e4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_DMA_IRQHandler+0x1e8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_DMA_IRQHandler+0x1ec>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xd2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a48      	ldr	r2, [pc, #288]	; (8005db4 <HAL_DMA_IRQHandler+0x1f0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_DMA_IRQHandler+0xd6>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_IRQHandler+0xd8>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 842b 	beq.w	80064f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2208      	movs	r2, #8
 8005cac:	409a      	lsls	r2, r3
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80a2 	beq.w	8005dfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2e      	ldr	r2, [pc, #184]	; (8005d78 <HAL_DMA_IRQHandler+0x1b4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2d      	ldr	r2, [pc, #180]	; (8005d7c <HAL_DMA_IRQHandler+0x1b8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2b      	ldr	r2, [pc, #172]	; (8005d80 <HAL_DMA_IRQHandler+0x1bc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2a      	ldr	r2, [pc, #168]	; (8005d84 <HAL_DMA_IRQHandler+0x1c0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <HAL_DMA_IRQHandler+0x1c4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <HAL_DMA_IRQHandler+0x1c8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <HAL_DMA_IRQHandler+0x1cc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <HAL_DMA_IRQHandler+0x1d0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_DMA_IRQHandler+0x1d4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_DMA_IRQHandler+0x1d8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <HAL_DMA_IRQHandler+0x1dc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <HAL_DMA_IRQHandler+0x1e0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <HAL_DMA_IRQHandler+0x1e4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_DMA_IRQHandler+0x1e8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <HAL_DMA_IRQHandler+0x1ec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x194>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_DMA_IRQHandler+0x1f0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d12f      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x1f4>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e02e      	b.n	8005dcc <HAL_DMA_IRQHandler+0x208>
 8005d6e:	bf00      	nop
 8005d70:	24000000 	.word	0x24000000
 8005d74:	1b4e81b5 	.word	0x1b4e81b5
 8005d78:	40020010 	.word	0x40020010
 8005d7c:	40020028 	.word	0x40020028
 8005d80:	40020040 	.word	0x40020040
 8005d84:	40020058 	.word	0x40020058
 8005d88:	40020070 	.word	0x40020070
 8005d8c:	40020088 	.word	0x40020088
 8005d90:	400200a0 	.word	0x400200a0
 8005d94:	400200b8 	.word	0x400200b8
 8005d98:	40020410 	.word	0x40020410
 8005d9c:	40020428 	.word	0x40020428
 8005da0:	40020440 	.word	0x40020440
 8005da4:	40020458 	.word	0x40020458
 8005da8:	40020470 	.word	0x40020470
 8005dac:	40020488 	.word	0x40020488
 8005db0:	400204a0 	.word	0x400204a0
 8005db4:	400204b8 	.word	0x400204b8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0204 	bic.w	r2, r2, #4
 8005dde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2208      	movs	r2, #8
 8005dea:	409a      	lsls	r2, r3
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	f043 0201 	orr.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d06e      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a69      	ldr	r2, [pc, #420]	; (8005fbc <HAL_DMA_IRQHandler+0x3f8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d04a      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a67      	ldr	r2, [pc, #412]	; (8005fc0 <HAL_DMA_IRQHandler+0x3fc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d045      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a66      	ldr	r2, [pc, #408]	; (8005fc4 <HAL_DMA_IRQHandler+0x400>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d040      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a64      	ldr	r2, [pc, #400]	; (8005fc8 <HAL_DMA_IRQHandler+0x404>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d03b      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a63      	ldr	r2, [pc, #396]	; (8005fcc <HAL_DMA_IRQHandler+0x408>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d036      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a61      	ldr	r2, [pc, #388]	; (8005fd0 <HAL_DMA_IRQHandler+0x40c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d031      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a60      	ldr	r2, [pc, #384]	; (8005fd4 <HAL_DMA_IRQHandler+0x410>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d02c      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a5e      	ldr	r2, [pc, #376]	; (8005fd8 <HAL_DMA_IRQHandler+0x414>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d027      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a5d      	ldr	r2, [pc, #372]	; (8005fdc <HAL_DMA_IRQHandler+0x418>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <HAL_DMA_IRQHandler+0x41c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01d      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a5a      	ldr	r2, [pc, #360]	; (8005fe4 <HAL_DMA_IRQHandler+0x420>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a58      	ldr	r2, [pc, #352]	; (8005fe8 <HAL_DMA_IRQHandler+0x424>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a57      	ldr	r2, [pc, #348]	; (8005fec <HAL_DMA_IRQHandler+0x428>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a55      	ldr	r2, [pc, #340]	; (8005ff0 <HAL_DMA_IRQHandler+0x42c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a54      	ldr	r2, [pc, #336]	; (8005ff4 <HAL_DMA_IRQHandler+0x430>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x2ee>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a52      	ldr	r2, [pc, #328]	; (8005ff8 <HAL_DMA_IRQHandler+0x434>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10a      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x304>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	e003      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x30c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0202 	orr.w	r2, r3, #2
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2204      	movs	r2, #4
 8005efa:	409a      	lsls	r2, r3
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 808f 	beq.w	8006024 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <HAL_DMA_IRQHandler+0x3f8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d04a      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <HAL_DMA_IRQHandler+0x3fc>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d045      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a29      	ldr	r2, [pc, #164]	; (8005fc4 <HAL_DMA_IRQHandler+0x400>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d040      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <HAL_DMA_IRQHandler+0x404>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d03b      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_DMA_IRQHandler+0x408>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d036      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <HAL_DMA_IRQHandler+0x40c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d031      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_DMA_IRQHandler+0x410>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d02c      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_DMA_IRQHandler+0x414>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d027      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_DMA_IRQHandler+0x418>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d022      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_DMA_IRQHandler+0x41c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01d      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <HAL_DMA_IRQHandler+0x420>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d018      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <HAL_DMA_IRQHandler+0x424>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_DMA_IRQHandler+0x428>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00e      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a18      	ldr	r2, [pc, #96]	; (8005ff0 <HAL_DMA_IRQHandler+0x42c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d009      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a17      	ldr	r2, [pc, #92]	; (8005ff4 <HAL_DMA_IRQHandler+0x430>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d004      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0x3e2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <HAL_DMA_IRQHandler+0x434>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d12a      	bne.n	8005ffc <HAL_DMA_IRQHandler+0x438>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf14      	ite	ne
 8005fb4:	2301      	movne	r3, #1
 8005fb6:	2300      	moveq	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	e023      	b.n	8006004 <HAL_DMA_IRQHandler+0x440>
 8005fbc:	40020010 	.word	0x40020010
 8005fc0:	40020028 	.word	0x40020028
 8005fc4:	40020040 	.word	0x40020040
 8005fc8:	40020058 	.word	0x40020058
 8005fcc:	40020070 	.word	0x40020070
 8005fd0:	40020088 	.word	0x40020088
 8005fd4:	400200a0 	.word	0x400200a0
 8005fd8:	400200b8 	.word	0x400200b8
 8005fdc:	40020410 	.word	0x40020410
 8005fe0:	40020428 	.word	0x40020428
 8005fe4:	40020440 	.word	0x40020440
 8005fe8:	40020458 	.word	0x40020458
 8005fec:	40020470 	.word	0x40020470
 8005ff0:	40020488 	.word	0x40020488
 8005ff4:	400204a0 	.word	0x400204a0
 8005ff8:	400204b8 	.word	0x400204b8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	2204      	movs	r2, #4
 8006012:	409a      	lsls	r2, r3
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2210      	movs	r2, #16
 800602e:	409a      	lsls	r2, r3
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a6 	beq.w	8006186 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a85      	ldr	r2, [pc, #532]	; (8006254 <HAL_DMA_IRQHandler+0x690>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d04a      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a83      	ldr	r2, [pc, #524]	; (8006258 <HAL_DMA_IRQHandler+0x694>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d045      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a82      	ldr	r2, [pc, #520]	; (800625c <HAL_DMA_IRQHandler+0x698>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d040      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a80      	ldr	r2, [pc, #512]	; (8006260 <HAL_DMA_IRQHandler+0x69c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d03b      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7f      	ldr	r2, [pc, #508]	; (8006264 <HAL_DMA_IRQHandler+0x6a0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d036      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a7d      	ldr	r2, [pc, #500]	; (8006268 <HAL_DMA_IRQHandler+0x6a4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d031      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a7c      	ldr	r2, [pc, #496]	; (800626c <HAL_DMA_IRQHandler+0x6a8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d02c      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a7a      	ldr	r2, [pc, #488]	; (8006270 <HAL_DMA_IRQHandler+0x6ac>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d027      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a79      	ldr	r2, [pc, #484]	; (8006274 <HAL_DMA_IRQHandler+0x6b0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a77      	ldr	r2, [pc, #476]	; (8006278 <HAL_DMA_IRQHandler+0x6b4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01d      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a76      	ldr	r2, [pc, #472]	; (800627c <HAL_DMA_IRQHandler+0x6b8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a74      	ldr	r2, [pc, #464]	; (8006280 <HAL_DMA_IRQHandler+0x6bc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a73      	ldr	r2, [pc, #460]	; (8006284 <HAL_DMA_IRQHandler+0x6c0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a71      	ldr	r2, [pc, #452]	; (8006288 <HAL_DMA_IRQHandler+0x6c4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a70      	ldr	r2, [pc, #448]	; (800628c <HAL_DMA_IRQHandler+0x6c8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_DMA_IRQHandler+0x516>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a6e      	ldr	r2, [pc, #440]	; (8006290 <HAL_DMA_IRQHandler+0x6cc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10a      	bne.n	80060f0 <HAL_DMA_IRQHandler+0x52c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	bf14      	ite	ne
 80060e8:	2301      	movne	r3, #1
 80060ea:	2300      	moveq	r3, #0
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	e009      	b.n	8006104 <HAL_DMA_IRQHandler+0x540>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bf14      	ite	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	2300      	moveq	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d03e      	beq.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2210      	movs	r2, #16
 8006112:	409a      	lsls	r2, r3
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d024      	beq.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	e01f      	b.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01b      	beq.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
 8006156:	e016      	b.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0208 	bic.w	r2, r2, #8
 8006174:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2220      	movs	r2, #32
 8006190:	409a      	lsls	r2, r3
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8110 	beq.w	80063bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2c      	ldr	r2, [pc, #176]	; (8006254 <HAL_DMA_IRQHandler+0x690>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2b      	ldr	r2, [pc, #172]	; (8006258 <HAL_DMA_IRQHandler+0x694>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a29      	ldr	r2, [pc, #164]	; (800625c <HAL_DMA_IRQHandler+0x698>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a28      	ldr	r2, [pc, #160]	; (8006260 <HAL_DMA_IRQHandler+0x69c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a26      	ldr	r2, [pc, #152]	; (8006264 <HAL_DMA_IRQHandler+0x6a0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a25      	ldr	r2, [pc, #148]	; (8006268 <HAL_DMA_IRQHandler+0x6a4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	; (800626c <HAL_DMA_IRQHandler+0x6a8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_DMA_IRQHandler+0x6ac>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <HAL_DMA_IRQHandler+0x6b0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_DMA_IRQHandler+0x6b4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_DMA_IRQHandler+0x6b8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_DMA_IRQHandler+0x6bc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	; (8006284 <HAL_DMA_IRQHandler+0x6c0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a19      	ldr	r2, [pc, #100]	; (8006288 <HAL_DMA_IRQHandler+0x6c4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a17      	ldr	r2, [pc, #92]	; (800628c <HAL_DMA_IRQHandler+0x6c8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_IRQHandler+0x678>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a16      	ldr	r2, [pc, #88]	; (8006290 <HAL_DMA_IRQHandler+0x6cc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d12b      	bne.n	8006294 <HAL_DMA_IRQHandler+0x6d0>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e02a      	b.n	80062a8 <HAL_DMA_IRQHandler+0x6e4>
 8006252:	bf00      	nop
 8006254:	40020010 	.word	0x40020010
 8006258:	40020028 	.word	0x40020028
 800625c:	40020040 	.word	0x40020040
 8006260:	40020058 	.word	0x40020058
 8006264:	40020070 	.word	0x40020070
 8006268:	40020088 	.word	0x40020088
 800626c:	400200a0 	.word	0x400200a0
 8006270:	400200b8 	.word	0x400200b8
 8006274:	40020410 	.word	0x40020410
 8006278:	40020428 	.word	0x40020428
 800627c:	40020440 	.word	0x40020440
 8006280:	40020458 	.word	0x40020458
 8006284:	40020470 	.word	0x40020470
 8006288:	40020488 	.word	0x40020488
 800628c:	400204a0 	.word	0x400204a0
 8006290:	400204b8 	.word	0x400204b8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2301      	movne	r3, #1
 80062a4:	2300      	moveq	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8087 	beq.w	80063bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2220      	movs	r2, #32
 80062b8:	409a      	lsls	r2, r3
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d139      	bne.n	800633e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0216 	bic.w	r2, r2, #22
 80062d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <HAL_DMA_IRQHandler+0x736>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0208 	bic.w	r2, r2, #8
 8006308:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	223f      	movs	r2, #63	; 0x3f
 8006314:	409a      	lsls	r2, r3
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 834a 	beq.w	80069c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
          }
          return;
 800633c:	e344      	b.n	80069c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d018      	beq.n	800637e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02c      	beq.n	80063bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	e027      	b.n	80063bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d023      	beq.n	80063bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	e01e      	b.n	80063bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10f      	bne.n	80063ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0210 	bic.w	r2, r2, #16
 800639a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8306 	beq.w	80069d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8088 	beq.w	80064e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7a      	ldr	r2, [pc, #488]	; (80065cc <HAL_DMA_IRQHandler+0xa08>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d04a      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a79      	ldr	r2, [pc, #484]	; (80065d0 <HAL_DMA_IRQHandler+0xa0c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d045      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a77      	ldr	r2, [pc, #476]	; (80065d4 <HAL_DMA_IRQHandler+0xa10>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d040      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a76      	ldr	r2, [pc, #472]	; (80065d8 <HAL_DMA_IRQHandler+0xa14>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d03b      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a74      	ldr	r2, [pc, #464]	; (80065dc <HAL_DMA_IRQHandler+0xa18>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a73      	ldr	r2, [pc, #460]	; (80065e0 <HAL_DMA_IRQHandler+0xa1c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d031      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a71      	ldr	r2, [pc, #452]	; (80065e4 <HAL_DMA_IRQHandler+0xa20>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02c      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a70      	ldr	r2, [pc, #448]	; (80065e8 <HAL_DMA_IRQHandler+0xa24>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d027      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6e      	ldr	r2, [pc, #440]	; (80065ec <HAL_DMA_IRQHandler+0xa28>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6d      	ldr	r2, [pc, #436]	; (80065f0 <HAL_DMA_IRQHandler+0xa2c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6b      	ldr	r2, [pc, #428]	; (80065f4 <HAL_DMA_IRQHandler+0xa30>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a6a      	ldr	r2, [pc, #424]	; (80065f8 <HAL_DMA_IRQHandler+0xa34>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a68      	ldr	r2, [pc, #416]	; (80065fc <HAL_DMA_IRQHandler+0xa38>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a67      	ldr	r2, [pc, #412]	; (8006600 <HAL_DMA_IRQHandler+0xa3c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a65      	ldr	r2, [pc, #404]	; (8006604 <HAL_DMA_IRQHandler+0xa40>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_DMA_IRQHandler+0x8b8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a64      	ldr	r2, [pc, #400]	; (8006608 <HAL_DMA_IRQHandler+0xa44>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <HAL_DMA_IRQHandler+0x8ca>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e007      	b.n	800649e <HAL_DMA_IRQHandler+0x8da>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0201 	bic.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d307      	bcc.n	80064ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f2      	bne.n	800649e <HAL_DMA_IRQHandler+0x8da>
 80064b8:	e000      	b.n	80064bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80064ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2203      	movs	r2, #3
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80064d2:	e003      	b.n	80064dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8272 	beq.w	80069d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	4798      	blx	r3
 80064f6:	e26c      	b.n	80069d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a43      	ldr	r2, [pc, #268]	; (800660c <HAL_DMA_IRQHandler+0xa48>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a42      	ldr	r2, [pc, #264]	; (8006610 <HAL_DMA_IRQHandler+0xa4c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a40      	ldr	r2, [pc, #256]	; (8006614 <HAL_DMA_IRQHandler+0xa50>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a3f      	ldr	r2, [pc, #252]	; (8006618 <HAL_DMA_IRQHandler+0xa54>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a3d      	ldr	r2, [pc, #244]	; (800661c <HAL_DMA_IRQHandler+0xa58>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a3c      	ldr	r2, [pc, #240]	; (8006620 <HAL_DMA_IRQHandler+0xa5c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a3a      	ldr	r2, [pc, #232]	; (8006624 <HAL_DMA_IRQHandler+0xa60>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_DMA_IRQHandler+0x984>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a39      	ldr	r2, [pc, #228]	; (8006628 <HAL_DMA_IRQHandler+0xa64>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d101      	bne.n	800654c <HAL_DMA_IRQHandler+0x988>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_DMA_IRQHandler+0x98a>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 823f 	beq.w	80069d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2204      	movs	r2, #4
 8006566:	409a      	lsls	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80cd 	beq.w	800670c <HAL_DMA_IRQHandler+0xb48>
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80c7 	beq.w	800670c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	2204      	movs	r2, #4
 8006588:	409a      	lsls	r2, r3
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d049      	beq.n	800662c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8210 	beq.w	80069cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065b4:	e20a      	b.n	80069cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8206 	beq.w	80069cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c8:	e200      	b.n	80069cc <HAL_DMA_IRQHandler+0xe08>
 80065ca:	bf00      	nop
 80065cc:	40020010 	.word	0x40020010
 80065d0:	40020028 	.word	0x40020028
 80065d4:	40020040 	.word	0x40020040
 80065d8:	40020058 	.word	0x40020058
 80065dc:	40020070 	.word	0x40020070
 80065e0:	40020088 	.word	0x40020088
 80065e4:	400200a0 	.word	0x400200a0
 80065e8:	400200b8 	.word	0x400200b8
 80065ec:	40020410 	.word	0x40020410
 80065f0:	40020428 	.word	0x40020428
 80065f4:	40020440 	.word	0x40020440
 80065f8:	40020458 	.word	0x40020458
 80065fc:	40020470 	.word	0x40020470
 8006600:	40020488 	.word	0x40020488
 8006604:	400204a0 	.word	0x400204a0
 8006608:	400204b8 	.word	0x400204b8
 800660c:	58025408 	.word	0x58025408
 8006610:	5802541c 	.word	0x5802541c
 8006614:	58025430 	.word	0x58025430
 8006618:	58025444 	.word	0x58025444
 800661c:	58025458 	.word	0x58025458
 8006620:	5802546c 	.word	0x5802546c
 8006624:	58025480 	.word	0x58025480
 8006628:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d160      	bne.n	80066f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a7f      	ldr	r2, [pc, #508]	; (8006838 <HAL_DMA_IRQHandler+0xc74>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d04a      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7d      	ldr	r2, [pc, #500]	; (800683c <HAL_DMA_IRQHandler+0xc78>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d045      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a7c      	ldr	r2, [pc, #496]	; (8006840 <HAL_DMA_IRQHandler+0xc7c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d040      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7a      	ldr	r2, [pc, #488]	; (8006844 <HAL_DMA_IRQHandler+0xc80>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d03b      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a79      	ldr	r2, [pc, #484]	; (8006848 <HAL_DMA_IRQHandler+0xc84>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d036      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a77      	ldr	r2, [pc, #476]	; (800684c <HAL_DMA_IRQHandler+0xc88>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d031      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a76      	ldr	r2, [pc, #472]	; (8006850 <HAL_DMA_IRQHandler+0xc8c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d02c      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a74      	ldr	r2, [pc, #464]	; (8006854 <HAL_DMA_IRQHandler+0xc90>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d027      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a73      	ldr	r2, [pc, #460]	; (8006858 <HAL_DMA_IRQHandler+0xc94>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d022      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a71      	ldr	r2, [pc, #452]	; (800685c <HAL_DMA_IRQHandler+0xc98>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01d      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a70      	ldr	r2, [pc, #448]	; (8006860 <HAL_DMA_IRQHandler+0xc9c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d018      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a6e      	ldr	r2, [pc, #440]	; (8006864 <HAL_DMA_IRQHandler+0xca0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6d      	ldr	r2, [pc, #436]	; (8006868 <HAL_DMA_IRQHandler+0xca4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a6b      	ldr	r2, [pc, #428]	; (800686c <HAL_DMA_IRQHandler+0xca8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a6a      	ldr	r2, [pc, #424]	; (8006870 <HAL_DMA_IRQHandler+0xcac>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_DMA_IRQHandler+0xb12>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a68      	ldr	r2, [pc, #416]	; (8006874 <HAL_DMA_IRQHandler+0xcb0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <HAL_DMA_IRQHandler+0xb24>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0208 	bic.w	r2, r2, #8
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	e007      	b.n	80066f8 <HAL_DMA_IRQHandler+0xb34>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0204 	bic.w	r2, r2, #4
 80066f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8165 	beq.w	80069cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800670a:	e15f      	b.n	80069cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2202      	movs	r2, #2
 8006716:	409a      	lsls	r2, r3
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80c5 	beq.w	80068ac <HAL_DMA_IRQHandler+0xce8>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80bf 	beq.w	80068ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	2202      	movs	r2, #2
 8006738:	409a      	lsls	r2, r3
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d018      	beq.n	800677a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 813a 	beq.w	80069d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006764:	e134      	b.n	80069d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8130 	beq.w	80069d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006778:	e12a      	b.n	80069d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8089 	bne.w	8006898 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2b      	ldr	r2, [pc, #172]	; (8006838 <HAL_DMA_IRQHandler+0xc74>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d04a      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a29      	ldr	r2, [pc, #164]	; (800683c <HAL_DMA_IRQHandler+0xc78>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d045      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a28      	ldr	r2, [pc, #160]	; (8006840 <HAL_DMA_IRQHandler+0xc7c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d040      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a26      	ldr	r2, [pc, #152]	; (8006844 <HAL_DMA_IRQHandler+0xc80>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d03b      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a25      	ldr	r2, [pc, #148]	; (8006848 <HAL_DMA_IRQHandler+0xc84>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d036      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a23      	ldr	r2, [pc, #140]	; (800684c <HAL_DMA_IRQHandler+0xc88>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d031      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a22      	ldr	r2, [pc, #136]	; (8006850 <HAL_DMA_IRQHandler+0xc8c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d02c      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a20      	ldr	r2, [pc, #128]	; (8006854 <HAL_DMA_IRQHandler+0xc90>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d027      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1f      	ldr	r2, [pc, #124]	; (8006858 <HAL_DMA_IRQHandler+0xc94>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d022      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1d      	ldr	r2, [pc, #116]	; (800685c <HAL_DMA_IRQHandler+0xc98>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <HAL_DMA_IRQHandler+0xc9c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d018      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a1a      	ldr	r2, [pc, #104]	; (8006864 <HAL_DMA_IRQHandler+0xca0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a19      	ldr	r2, [pc, #100]	; (8006868 <HAL_DMA_IRQHandler+0xca4>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00e      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a17      	ldr	r2, [pc, #92]	; (800686c <HAL_DMA_IRQHandler+0xca8>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d009      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a16      	ldr	r2, [pc, #88]	; (8006870 <HAL_DMA_IRQHandler+0xcac>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d004      	beq.n	8006826 <HAL_DMA_IRQHandler+0xc62>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a14      	ldr	r2, [pc, #80]	; (8006874 <HAL_DMA_IRQHandler+0xcb0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d128      	bne.n	8006878 <HAL_DMA_IRQHandler+0xcb4>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0214 	bic.w	r2, r2, #20
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	e027      	b.n	8006888 <HAL_DMA_IRQHandler+0xcc4>
 8006838:	40020010 	.word	0x40020010
 800683c:	40020028 	.word	0x40020028
 8006840:	40020040 	.word	0x40020040
 8006844:	40020058 	.word	0x40020058
 8006848:	40020070 	.word	0x40020070
 800684c:	40020088 	.word	0x40020088
 8006850:	400200a0 	.word	0x400200a0
 8006854:	400200b8 	.word	0x400200b8
 8006858:	40020410 	.word	0x40020410
 800685c:	40020428 	.word	0x40020428
 8006860:	40020440 	.word	0x40020440
 8006864:	40020458 	.word	0x40020458
 8006868:	40020470 	.word	0x40020470
 800686c:	40020488 	.word	0x40020488
 8006870:	400204a0 	.word	0x400204a0
 8006874:	400204b8 	.word	0x400204b8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 020a 	bic.w	r2, r2, #10
 8006886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8097 	beq.w	80069d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068aa:	e091      	b.n	80069d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2208      	movs	r2, #8
 80068b6:	409a      	lsls	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8088 	beq.w	80069d2 <HAL_DMA_IRQHandler+0xe0e>
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8082 	beq.w	80069d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a41      	ldr	r2, [pc, #260]	; (80069d8 <HAL_DMA_IRQHandler+0xe14>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3f      	ldr	r2, [pc, #252]	; (80069dc <HAL_DMA_IRQHandler+0xe18>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3e      	ldr	r2, [pc, #248]	; (80069e0 <HAL_DMA_IRQHandler+0xe1c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_IRQHandler+0xe20>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <HAL_DMA_IRQHandler+0xe24>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a39      	ldr	r2, [pc, #228]	; (80069ec <HAL_DMA_IRQHandler+0xe28>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a38      	ldr	r2, [pc, #224]	; (80069f0 <HAL_DMA_IRQHandler+0xe2c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a36      	ldr	r2, [pc, #216]	; (80069f4 <HAL_DMA_IRQHandler+0xe30>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a35      	ldr	r2, [pc, #212]	; (80069f8 <HAL_DMA_IRQHandler+0xe34>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a33      	ldr	r2, [pc, #204]	; (80069fc <HAL_DMA_IRQHandler+0xe38>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a32      	ldr	r2, [pc, #200]	; (8006a00 <HAL_DMA_IRQHandler+0xe3c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <HAL_DMA_IRQHandler+0xe40>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2f      	ldr	r2, [pc, #188]	; (8006a08 <HAL_DMA_IRQHandler+0xe44>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_DMA_IRQHandler+0xe48>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <HAL_DMA_IRQHandler+0xe4c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_DMA_IRQHandler+0xdaa>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <HAL_DMA_IRQHandler+0xe50>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d108      	bne.n	8006980 <HAL_DMA_IRQHandler+0xdbc>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 021c 	bic.w	r2, r2, #28
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e007      	b.n	8006990 <HAL_DMA_IRQHandler+0xdcc>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 020e 	bic.w	r2, r2, #14
 800698e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	2201      	movs	r2, #1
 800699a:	409a      	lsls	r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d009      	beq.n	80069d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	e004      	b.n	80069d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80069c8:	bf00      	nop
 80069ca:	e002      	b.n	80069d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069cc:	bf00      	nop
 80069ce:	e000      	b.n	80069d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069d2:	3728      	adds	r7, #40	; 0x28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40020010 	.word	0x40020010
 80069dc:	40020028 	.word	0x40020028
 80069e0:	40020040 	.word	0x40020040
 80069e4:	40020058 	.word	0x40020058
 80069e8:	40020070 	.word	0x40020070
 80069ec:	40020088 	.word	0x40020088
 80069f0:	400200a0 	.word	0x400200a0
 80069f4:	400200b8 	.word	0x400200b8
 80069f8:	40020410 	.word	0x40020410
 80069fc:	40020428 	.word	0x40020428
 8006a00:	40020440 	.word	0x40020440
 8006a04:	40020458 	.word	0x40020458
 8006a08:	40020470 	.word	0x40020470
 8006a0c:	40020488 	.word	0x40020488
 8006a10:	400204a0 	.word	0x400204a0
 8006a14:	400204b8 	.word	0x400204b8

08006a18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a7f      	ldr	r2, [pc, #508]	; (8006c34 <DMA_SetConfig+0x21c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d072      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a7d      	ldr	r2, [pc, #500]	; (8006c38 <DMA_SetConfig+0x220>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d06d      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7c      	ldr	r2, [pc, #496]	; (8006c3c <DMA_SetConfig+0x224>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d068      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7a      	ldr	r2, [pc, #488]	; (8006c40 <DMA_SetConfig+0x228>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d063      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a79      	ldr	r2, [pc, #484]	; (8006c44 <DMA_SetConfig+0x22c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d05e      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a77      	ldr	r2, [pc, #476]	; (8006c48 <DMA_SetConfig+0x230>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d059      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a76      	ldr	r2, [pc, #472]	; (8006c4c <DMA_SetConfig+0x234>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d054      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a74      	ldr	r2, [pc, #464]	; (8006c50 <DMA_SetConfig+0x238>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d04f      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a73      	ldr	r2, [pc, #460]	; (8006c54 <DMA_SetConfig+0x23c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d04a      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a71      	ldr	r2, [pc, #452]	; (8006c58 <DMA_SetConfig+0x240>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d045      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a70      	ldr	r2, [pc, #448]	; (8006c5c <DMA_SetConfig+0x244>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d040      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a6e      	ldr	r2, [pc, #440]	; (8006c60 <DMA_SetConfig+0x248>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d03b      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6d      	ldr	r2, [pc, #436]	; (8006c64 <DMA_SetConfig+0x24c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d036      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a6b      	ldr	r2, [pc, #428]	; (8006c68 <DMA_SetConfig+0x250>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d031      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a6a      	ldr	r2, [pc, #424]	; (8006c6c <DMA_SetConfig+0x254>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d02c      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a68      	ldr	r2, [pc, #416]	; (8006c70 <DMA_SetConfig+0x258>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d027      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a67      	ldr	r2, [pc, #412]	; (8006c74 <DMA_SetConfig+0x25c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d022      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <DMA_SetConfig+0x260>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d01d      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a64      	ldr	r2, [pc, #400]	; (8006c7c <DMA_SetConfig+0x264>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d018      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a62      	ldr	r2, [pc, #392]	; (8006c80 <DMA_SetConfig+0x268>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a61      	ldr	r2, [pc, #388]	; (8006c84 <DMA_SetConfig+0x26c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a5f      	ldr	r2, [pc, #380]	; (8006c88 <DMA_SetConfig+0x270>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a5e      	ldr	r2, [pc, #376]	; (8006c8c <DMA_SetConfig+0x274>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <DMA_SetConfig+0x10a>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5c      	ldr	r2, [pc, #368]	; (8006c90 <DMA_SetConfig+0x278>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <DMA_SetConfig+0x10e>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <DMA_SetConfig+0x110>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a39      	ldr	r2, [pc, #228]	; (8006c34 <DMA_SetConfig+0x21c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d04a      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a38      	ldr	r2, [pc, #224]	; (8006c38 <DMA_SetConfig+0x220>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d045      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a36      	ldr	r2, [pc, #216]	; (8006c3c <DMA_SetConfig+0x224>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d040      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a35      	ldr	r2, [pc, #212]	; (8006c40 <DMA_SetConfig+0x228>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d03b      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <DMA_SetConfig+0x22c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d036      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <DMA_SetConfig+0x230>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d031      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a30      	ldr	r2, [pc, #192]	; (8006c4c <DMA_SetConfig+0x234>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d02c      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <DMA_SetConfig+0x238>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d027      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <DMA_SetConfig+0x23c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d022      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <DMA_SetConfig+0x240>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d01d      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <DMA_SetConfig+0x244>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d018      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <DMA_SetConfig+0x248>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <DMA_SetConfig+0x24c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00e      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <DMA_SetConfig+0x250>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d009      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a24      	ldr	r2, [pc, #144]	; (8006c6c <DMA_SetConfig+0x254>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d004      	beq.n	8006be8 <DMA_SetConfig+0x1d0>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a23      	ldr	r2, [pc, #140]	; (8006c70 <DMA_SetConfig+0x258>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d101      	bne.n	8006bec <DMA_SetConfig+0x1d4>
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <DMA_SetConfig+0x1d6>
 8006bec:	2300      	movs	r3, #0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d059      	beq.n	8006ca6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	223f      	movs	r2, #63	; 0x3f
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d138      	bne.n	8006c94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c32:	e086      	b.n	8006d42 <DMA_SetConfig+0x32a>
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
 8006c74:	58025408 	.word	0x58025408
 8006c78:	5802541c 	.word	0x5802541c
 8006c7c:	58025430 	.word	0x58025430
 8006c80:	58025444 	.word	0x58025444
 8006c84:	58025458 	.word	0x58025458
 8006c88:	5802546c 	.word	0x5802546c
 8006c8c:	58025480 	.word	0x58025480
 8006c90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
}
 8006ca4:	e04d      	b.n	8006d42 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a29      	ldr	r2, [pc, #164]	; (8006d50 <DMA_SetConfig+0x338>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <DMA_SetConfig+0x33c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01d      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <DMA_SetConfig+0x340>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <DMA_SetConfig+0x344>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <DMA_SetConfig+0x348>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <DMA_SetConfig+0x34c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <DMA_SetConfig+0x350>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <DMA_SetConfig+0x2de>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <DMA_SetConfig+0x354>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d101      	bne.n	8006cfa <DMA_SetConfig+0x2e2>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <DMA_SetConfig+0x2e4>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	2201      	movs	r2, #1
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d108      	bne.n	8006d32 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	60da      	str	r2, [r3, #12]
}
 8006d30:	e007      	b.n	8006d42 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
}
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	58025408 	.word	0x58025408
 8006d54:	5802541c 	.word	0x5802541c
 8006d58:	58025430 	.word	0x58025430
 8006d5c:	58025444 	.word	0x58025444
 8006d60:	58025458 	.word	0x58025458
 8006d64:	5802546c 	.word	0x5802546c
 8006d68:	58025480 	.word	0x58025480
 8006d6c:	58025494 	.word	0x58025494

08006d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a42      	ldr	r2, [pc, #264]	; (8006e88 <DMA_CalcBaseAndBitshift+0x118>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04a      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <DMA_CalcBaseAndBitshift+0x11c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d045      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a3f      	ldr	r2, [pc, #252]	; (8006e90 <DMA_CalcBaseAndBitshift+0x120>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d040      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3e      	ldr	r2, [pc, #248]	; (8006e94 <DMA_CalcBaseAndBitshift+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d03b      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3c      	ldr	r2, [pc, #240]	; (8006e98 <DMA_CalcBaseAndBitshift+0x128>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d036      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a3b      	ldr	r2, [pc, #236]	; (8006e9c <DMA_CalcBaseAndBitshift+0x12c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d031      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a39      	ldr	r2, [pc, #228]	; (8006ea0 <DMA_CalcBaseAndBitshift+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d02c      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a38      	ldr	r2, [pc, #224]	; (8006ea4 <DMA_CalcBaseAndBitshift+0x134>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d027      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a36      	ldr	r2, [pc, #216]	; (8006ea8 <DMA_CalcBaseAndBitshift+0x138>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a35      	ldr	r2, [pc, #212]	; (8006eac <DMA_CalcBaseAndBitshift+0x13c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a33      	ldr	r2, [pc, #204]	; (8006eb0 <DMA_CalcBaseAndBitshift+0x140>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a32      	ldr	r2, [pc, #200]	; (8006eb4 <DMA_CalcBaseAndBitshift+0x144>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a30      	ldr	r2, [pc, #192]	; (8006eb8 <DMA_CalcBaseAndBitshift+0x148>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2f      	ldr	r2, [pc, #188]	; (8006ebc <DMA_CalcBaseAndBitshift+0x14c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2d      	ldr	r2, [pc, #180]	; (8006ec0 <DMA_CalcBaseAndBitshift+0x150>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <DMA_CalcBaseAndBitshift+0xa8>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <DMA_CalcBaseAndBitshift+0x154>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d101      	bne.n	8006e1c <DMA_CalcBaseAndBitshift+0xac>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <DMA_CalcBaseAndBitshift+0xae>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d024      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	3b10      	subs	r3, #16
 8006e2a:	4a27      	ldr	r2, [pc, #156]	; (8006ec8 <DMA_CalcBaseAndBitshift+0x158>)
 8006e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <DMA_CalcBaseAndBitshift+0x15c>)
 8006e3c:	5cd3      	ldrb	r3, [r2, r3]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d908      	bls.n	8006e5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4b1f      	ldr	r3, [pc, #124]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	1d1a      	adds	r2, r3, #4
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	659a      	str	r2, [r3, #88]	; 0x58
 8006e5a:	e00d      	b.n	8006e78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6593      	str	r3, [r2, #88]	; 0x58
 8006e6a:	e005      	b.n	8006e78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
 8006ec8:	aaaaaaab 	.word	0xaaaaaaab
 8006ecc:	0801e144 	.word	0x0801e144
 8006ed0:	fffffc00 	.word	0xfffffc00

08006ed4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d120      	bne.n	8006f2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d858      	bhi.n	8006fa2 <DMA_CheckFifoParam+0xce>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <DMA_CheckFifoParam+0x24>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f1b 	.word	0x08006f1b
 8006f00:	08006f09 	.word	0x08006f09
 8006f04:	08006fa3 	.word	0x08006fa3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d048      	beq.n	8006fa6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f18:	e045      	b.n	8006fa6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f22:	d142      	bne.n	8006faa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f28:	e03f      	b.n	8006faa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	d123      	bne.n	8006f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d838      	bhi.n	8006fae <DMA_CheckFifoParam+0xda>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <DMA_CheckFifoParam+0x70>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f5b 	.word	0x08006f5b
 8006f4c:	08006f55 	.word	0x08006f55
 8006f50:	08006f6d 	.word	0x08006f6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]
        break;
 8006f58:	e030      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d025      	beq.n	8006fb2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f6a:	e022      	b.n	8006fb2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f74:	d11f      	bne.n	8006fb6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f7a:	e01c      	b.n	8006fb6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d902      	bls.n	8006f8a <DMA_CheckFifoParam+0xb6>
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d003      	beq.n	8006f90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f88:	e018      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f8e:	e015      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa0:	e00b      	b.n	8006fba <DMA_CheckFifoParam+0xe6>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e00a      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e008      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        break;
 8006faa:	bf00      	nop
 8006fac:	e006      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
        break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <DMA_CheckFifoParam+0xe8>
    break;
 8006fba:	bf00      	nop
    }
  }

  return status;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop

08006fcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a38      	ldr	r2, [pc, #224]	; (80070c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a36      	ldr	r2, [pc, #216]	; (80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01d      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a35      	ldr	r2, [pc, #212]	; (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a33      	ldr	r2, [pc, #204]	; (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a32      	ldr	r2, [pc, #200]	; (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a30      	ldr	r2, [pc, #192]	; (80070d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a2f      	ldr	r2, [pc, #188]	; (80070d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2d      	ldr	r2, [pc, #180]	; (80070dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d101      	bne.n	800702e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01a      	beq.n	800706a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	3b08      	subs	r3, #8
 800703c:	4a28      	ldr	r2, [pc, #160]	; (80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	091b      	lsrs	r3, r3, #4
 8007044:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	461a      	mov	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007058:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2201      	movs	r2, #1
 8007062:	409a      	lsls	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007068:	e024      	b.n	80070b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	3b10      	subs	r3, #16
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4a1c      	ldr	r2, [pc, #112]	; (80070f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d806      	bhi.n	8007092 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d902      	bls.n	8007092 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3308      	adds	r3, #8
 8007090:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a16      	ldr	r2, [pc, #88]	; (80070fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	2201      	movs	r2, #1
 80070ae:	409a      	lsls	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070b4:	bf00      	nop
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	58025408 	.word	0x58025408
 80070c4:	5802541c 	.word	0x5802541c
 80070c8:	58025430 	.word	0x58025430
 80070cc:	58025444 	.word	0x58025444
 80070d0:	58025458 	.word	0x58025458
 80070d4:	5802546c 	.word	0x5802546c
 80070d8:	58025480 	.word	0x58025480
 80070dc:	58025494 	.word	0x58025494
 80070e0:	cccccccd 	.word	0xcccccccd
 80070e4:	16009600 	.word	0x16009600
 80070e8:	58025880 	.word	0x58025880
 80070ec:	aaaaaaab 	.word	0xaaaaaaab
 80070f0:	400204b8 	.word	0x400204b8
 80070f4:	4002040f 	.word	0x4002040f
 80070f8:	10008200 	.word	0x10008200
 80070fc:	40020880 	.word	0x40020880

08007100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04a      	beq.n	80071ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d847      	bhi.n	80071ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a25      	ldr	r2, [pc, #148]	; (80071b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d022      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a24      	ldr	r2, [pc, #144]	; (80071bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d01d      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d101      	bne.n	8007170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a15      	ldr	r2, [pc, #84]	; (80071dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007188:	671a      	str	r2, [r3, #112]	; 0x70
 800718a:	e009      	b.n	80071a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	461a      	mov	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a11      	ldr	r2, [pc, #68]	; (80071e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800719e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	2201      	movs	r2, #1
 80071a6:	409a      	lsls	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	58025408 	.word	0x58025408
 80071bc:	5802541c 	.word	0x5802541c
 80071c0:	58025430 	.word	0x58025430
 80071c4:	58025444 	.word	0x58025444
 80071c8:	58025458 	.word	0x58025458
 80071cc:	5802546c 	.word	0x5802546c
 80071d0:	58025480 	.word	0x58025480
 80071d4:	58025494 	.word	0x58025494
 80071d8:	1600963f 	.word	0x1600963f
 80071dc:	58025940 	.word	0x58025940
 80071e0:	1000823f 	.word	0x1000823f
 80071e4:	40020940 	.word	0x40020940

080071e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b098      	sub	sp, #96	; 0x60
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80071f0:	4a84      	ldr	r2, [pc, #528]	; (8007404 <HAL_FDCAN_Init+0x21c>)
 80071f2:	f107 030c 	add.w	r3, r7, #12
 80071f6:	4611      	mov	r1, r2
 80071f8:	224c      	movs	r2, #76	; 0x4c
 80071fa:	4618      	mov	r0, r3
 80071fc:	f013 fbcf 	bl	801a99e <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e1c6      	b.n	8007598 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a7e      	ldr	r2, [pc, #504]	; (8007408 <HAL_FDCAN_Init+0x220>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d106      	bne.n	8007222 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800721c:	461a      	mov	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fb f9c2 	bl	80025c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0210 	bic.w	r2, r2, #16
 800724a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800724c:	f7fc fa32 	bl	80036b4 <HAL_GetTick>
 8007250:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007252:	e014      	b.n	800727e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007254:	f7fc fa2e 	bl	80036b4 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b0a      	cmp	r3, #10
 8007260:	d90d      	bls.n	800727e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007268:	f043 0201 	orr.w	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2203      	movs	r2, #3
 8007276:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e18c      	b.n	8007598 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b08      	cmp	r3, #8
 800728a:	d0e3      	beq.n	8007254 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800729c:	f7fc fa0a 	bl	80036b4 <HAL_GetTick>
 80072a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072a2:	e014      	b.n	80072ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072a4:	f7fc fa06 	bl	80036b4 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b0a      	cmp	r3, #10
 80072b0:	d90d      	bls.n	80072ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072b8:	f043 0201 	orr.w	r2, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e164      	b.n	8007598 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d0e3      	beq.n	80072a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0202 	orr.w	r2, r2, #2
 80072ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7c1b      	ldrb	r3, [r3, #16]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d108      	bne.n	8007306 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007302:	619a      	str	r2, [r3, #24]
 8007304:	e007      	b.n	8007316 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007314:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7c5b      	ldrb	r3, [r3, #17]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d108      	bne.n	8007330 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800732c:	619a      	str	r2, [r3, #24]
 800732e:	e007      	b.n	8007340 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800733e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7c9b      	ldrb	r3, [r3, #18]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d108      	bne.n	800735a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007356:	619a      	str	r2, [r3, #24]
 8007358:	e007      	b.n	800736a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007368:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800738e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0210 	bic.w	r2, r2, #16
 800739e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d108      	bne.n	80073ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0204 	orr.w	r2, r2, #4
 80073b6:	619a      	str	r2, [r3, #24]
 80073b8:	e030      	b.n	800741c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d02c      	beq.n	800741c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d020      	beq.n	800740c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0210 	orr.w	r2, r2, #16
 80073e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d114      	bne.n	800741c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699a      	ldr	r2, [r3, #24]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f042 0220 	orr.w	r2, r2, #32
 8007400:	619a      	str	r2, [r3, #24]
 8007402:	e00b      	b.n	800741c <HAL_FDCAN_Init+0x234>
 8007404:	0801dff4 	.word	0x0801dff4
 8007408:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0220 	orr.w	r2, r2, #32
 800741a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	3b01      	subs	r3, #1
 8007422:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	3b01      	subs	r3, #1
 800742a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800742c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007434:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	3b01      	subs	r3, #1
 800743e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007444:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007446:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007450:	d115      	bne.n	800747e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	3b01      	subs	r3, #1
 800745e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007460:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	3b01      	subs	r3, #1
 8007468:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800746a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	3b01      	subs	r3, #1
 8007474:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800747a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800747c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a4:	4413      	add	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d011      	beq.n	80074ce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80074b2:	f023 0107 	bic.w	r1, r3, #7
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	3360      	adds	r3, #96	; 0x60
 80074be:	443b      	add	r3, r7
 80074c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d011      	beq.n	80074fa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80074de:	f023 0107 	bic.w	r1, r3, #7
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	3360      	adds	r3, #96	; 0x60
 80074ea:	443b      	add	r3, r7
 80074ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d012      	beq.n	8007528 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800750a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	3360      	adds	r3, #96	; 0x60
 8007516:	443b      	add	r3, r7
 8007518:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800751c:	011a      	lsls	r2, r3, #4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007538:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	3360      	adds	r3, #96	; 0x60
 8007544:	443b      	add	r3, r7
 8007546:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800754a:	021a      	lsls	r2, r3, #8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a11      	ldr	r2, [pc, #68]	; (80075a0 <HAL_FDCAN_Init+0x3b8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d107      	bne.n	8007570 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f022 0203 	bic.w	r2, r2, #3
 800756e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f80b 	bl	80075a4 <FDCAN_CalcultateRamBlockAddresses>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007594:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007598:	4618      	mov	r0, r3
 800759a:	3760      	adds	r7, #96	; 0x60
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	4000a000 	.word	0x4000a000

080075a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80075ba:	4ba7      	ldr	r3, [pc, #668]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075bc:	4013      	ands	r3, r2
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	0091      	lsls	r1, r2, #2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	430b      	orrs	r3, r1
 80075c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	041a      	lsls	r2, r3, #16
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4413      	add	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80075fa:	4b97      	ldr	r3, [pc, #604]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0091      	lsls	r1, r2, #2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	430b      	orrs	r3, r1
 8007608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007614:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761c:	041a      	lsls	r2, r3, #16
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4413      	add	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800763c:	4b86      	ldr	r3, [pc, #536]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	0091      	lsls	r1, r2, #2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	430b      	orrs	r3, r1
 800764a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007656:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	041a      	lsls	r2, r3, #16
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007672:	fb02 f303 	mul.w	r3, r2, r3
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	4413      	add	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007684:	4b74      	ldr	r3, [pc, #464]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007686:	4013      	ands	r3, r2
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	0091      	lsls	r1, r2, #2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	430b      	orrs	r3, r1
 8007692:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800769e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	041a      	lsls	r2, r3, #16
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4413      	add	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80076cc:	4b62      	ldr	r3, [pc, #392]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	0091      	lsls	r1, r2, #2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	430b      	orrs	r3, r1
 80076da:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80076e6:	fb02 f303 	mul.w	r3, r2, r3
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	4413      	add	r3, r2
 80076ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80076f8:	4b57      	ldr	r3, [pc, #348]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	0091      	lsls	r1, r2, #2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	430b      	orrs	r3, r1
 8007706:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007712:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	041a      	lsls	r2, r3, #16
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	4413      	add	r3, r2
 8007730:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800773a:	4b47      	ldr	r3, [pc, #284]	; (8007858 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800773c:	4013      	ands	r3, r2
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	0091      	lsls	r1, r2, #2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	430b      	orrs	r3, r1
 8007748:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007754:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	041a      	lsls	r2, r3, #16
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007770:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	061a      	lsls	r2, r3, #24
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007788:	4b34      	ldr	r3, [pc, #208]	; (800785c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800778a:	4413      	add	r3, r2
 800778c:	009a      	lsls	r2, r3, #2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	441a      	add	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	441a      	add	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	441a      	add	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80077d6:	fb01 f303 	mul.w	r3, r1, r3
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	441a      	add	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800783a:	fb01 f303 	mul.w	r3, r1, r3
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	441a      	add	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784e:	4a04      	ldr	r2, [pc, #16]	; (8007860 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d915      	bls.n	8007880 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007854:	e006      	b.n	8007864 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007856:	bf00      	nop
 8007858:	ffff0003 	.word	0xffff0003
 800785c:	10002b00 	.word	0x10002b00
 8007860:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800786a:	f043 0220 	orr.w	r2, r3, #32
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e010      	b.n	80078a2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e005      	b.n	8007894 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3304      	adds	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d3f3      	bcc.n	8007888 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b089      	sub	sp, #36	; 0x24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80078be:	4b86      	ldr	r3, [pc, #536]	; (8007ad8 <HAL_GPIO_Init+0x228>)
 80078c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078c2:	e18c      	b.n	8007bde <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	2101      	movs	r1, #1
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	4013      	ands	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 817e 	beq.w	8007bd8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d005      	beq.n	80078f4 <HAL_GPIO_Init+0x44>
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d130      	bne.n	8007956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	2203      	movs	r2, #3
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	43db      	mvns	r3, r3
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	4013      	ands	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	4313      	orrs	r3, r2
 800791c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800792a:	2201      	movs	r2, #1
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	43db      	mvns	r3, r3
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4013      	ands	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	f003 0201 	and.w	r2, r3, #1
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	4313      	orrs	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d017      	beq.n	8007992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	2203      	movs	r2, #3
 800796e:	fa02 f303 	lsl.w	r3, r2, r3
 8007972:	43db      	mvns	r3, r3
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	4013      	ands	r3, r2
 8007978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	4313      	orrs	r3, r2
 800798a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d123      	bne.n	80079e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	08da      	lsrs	r2, r3, #3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3208      	adds	r2, #8
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	220f      	movs	r2, #15
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	43db      	mvns	r3, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	4013      	ands	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	08da      	lsrs	r2, r3, #3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3208      	adds	r2, #8
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	2203      	movs	r2, #3
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f003 0203 	and.w	r2, r3, #3
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80d8 	beq.w	8007bd8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a28:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <HAL_GPIO_Init+0x22c>)
 8007a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a2e:	4a2b      	ldr	r2, [pc, #172]	; (8007adc <HAL_GPIO_Init+0x22c>)
 8007a30:	f043 0302 	orr.w	r3, r3, #2
 8007a34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007a38:	4b28      	ldr	r3, [pc, #160]	; (8007adc <HAL_GPIO_Init+0x22c>)
 8007a3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a46:	4a26      	ldr	r2, [pc, #152]	; (8007ae0 <HAL_GPIO_Init+0x230>)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	089b      	lsrs	r3, r3, #2
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	220f      	movs	r2, #15
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_GPIO_Init+0x234>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d04a      	beq.n	8007b08 <HAL_GPIO_Init+0x258>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <HAL_GPIO_Init+0x238>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d02b      	beq.n	8007ad2 <HAL_GPIO_Init+0x222>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	; (8007aec <HAL_GPIO_Init+0x23c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d025      	beq.n	8007ace <HAL_GPIO_Init+0x21e>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a1a      	ldr	r2, [pc, #104]	; (8007af0 <HAL_GPIO_Init+0x240>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d01f      	beq.n	8007aca <HAL_GPIO_Init+0x21a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <HAL_GPIO_Init+0x244>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d019      	beq.n	8007ac6 <HAL_GPIO_Init+0x216>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <HAL_GPIO_Init+0x248>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d013      	beq.n	8007ac2 <HAL_GPIO_Init+0x212>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a17      	ldr	r2, [pc, #92]	; (8007afc <HAL_GPIO_Init+0x24c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00d      	beq.n	8007abe <HAL_GPIO_Init+0x20e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a16      	ldr	r2, [pc, #88]	; (8007b00 <HAL_GPIO_Init+0x250>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <HAL_GPIO_Init+0x20a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a15      	ldr	r2, [pc, #84]	; (8007b04 <HAL_GPIO_Init+0x254>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d101      	bne.n	8007ab6 <HAL_GPIO_Init+0x206>
 8007ab2:	2309      	movs	r3, #9
 8007ab4:	e029      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ab6:	230a      	movs	r3, #10
 8007ab8:	e027      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007aba:	2307      	movs	r3, #7
 8007abc:	e025      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007abe:	2306      	movs	r3, #6
 8007ac0:	e023      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ac2:	2305      	movs	r3, #5
 8007ac4:	e021      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ac6:	2304      	movs	r3, #4
 8007ac8:	e01f      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007aca:	2303      	movs	r3, #3
 8007acc:	e01d      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e01b      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e019      	b.n	8007b0a <HAL_GPIO_Init+0x25a>
 8007ad6:	bf00      	nop
 8007ad8:	58000080 	.word	0x58000080
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	58000400 	.word	0x58000400
 8007ae4:	58020000 	.word	0x58020000
 8007ae8:	58020400 	.word	0x58020400
 8007aec:	58020800 	.word	0x58020800
 8007af0:	58020c00 	.word	0x58020c00
 8007af4:	58021000 	.word	0x58021000
 8007af8:	58021400 	.word	0x58021400
 8007afc:	58021800 	.word	0x58021800
 8007b00:	58021c00 	.word	0x58021c00
 8007b04:	58022400 	.word	0x58022400
 8007b08:	2300      	movs	r3, #0
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	f002 0203 	and.w	r2, r2, #3
 8007b10:	0092      	lsls	r2, r2, #2
 8007b12:	4093      	lsls	r3, r2
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b1a:	4938      	ldr	r1, [pc, #224]	; (8007bfc <HAL_GPIO_Init+0x34c>)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	089b      	lsrs	r3, r3, #2
 8007b20:	3302      	adds	r3, #2
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	43db      	mvns	r3, r3
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	4013      	ands	r3, r2
 8007b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	43db      	mvns	r3, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4013      	ands	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	4013      	ands	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	43db      	mvns	r3, r3
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f47f ae6b 	bne.w	80078c4 <HAL_GPIO_Init+0x14>
  }
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	3724      	adds	r7, #36	; 0x24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	58000400 	.word	0x58000400

08007c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	807b      	strh	r3, [r7, #2]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c10:	787b      	ldrb	r3, [r7, #1]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c16:	887a      	ldrh	r2, [r7, #2]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c1c:	e003      	b.n	8007c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	041a      	lsls	r2, r3, #16
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	619a      	str	r2, [r3, #24]
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e07f      	b.n	8007d46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7fa fd18 	bl	8002690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d107      	bne.n	8007cae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	e006      	b.n	8007cbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007cba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d104      	bne.n	8007cce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ccc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6859      	ldr	r1, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <HAL_I2C_Init+0x11c>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69d9      	ldr	r1, [r3, #28]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	02008000 	.word	0x02008000

08007d54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	68f9      	ldr	r1, [r7, #12]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
  }
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d138      	bne.n	8007e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e032      	b.n	8007e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2224      	movs	r2, #36	; 0x24
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e000      	b.n	8007e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e10:	2302      	movs	r3, #2
  }
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b085      	sub	sp, #20
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d139      	bne.n	8007ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e033      	b.n	8007eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2224      	movs	r2, #36	; 0x24
 8007e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e000      	b.n	8007eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb8:	b08f      	sub	sp, #60	; 0x3c
 8007eba:	af0a      	add	r7, sp, #40	; 0x28
 8007ebc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e116      	b.n	80080f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f011 fa6c 	bl	80193c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2203      	movs	r2, #3
 8007eec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f00a fea5 	bl	8012c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	687e      	ldr	r6, [r7, #4]
 8007f14:	466d      	mov	r5, sp
 8007f16:	f106 0410 	add.w	r4, r6, #16
 8007f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f26:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f2a:	1d33      	adds	r3, r6, #4
 8007f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f2e:	6838      	ldr	r0, [r7, #0]
 8007f30:	f00a fd70 	bl	8012a14 <USB_CoreInit>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e0d7      	b.n	80080f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f00a fe93 	bl	8012c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
 8007f56:	e04a      	b.n	8007fee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f58:	7bfa      	ldrb	r2, [r7, #15]
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	440b      	add	r3, r1
 8007f66:	333d      	adds	r3, #61	; 0x3d
 8007f68:	2201      	movs	r2, #1
 8007f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	333c      	adds	r3, #60	; 0x3c
 8007f7c:	7bfa      	ldrb	r2, [r7, #15]
 8007f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f80:	7bfa      	ldrb	r2, [r7, #15]
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	b298      	uxth	r0, r3
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	3356      	adds	r3, #86	; 0x56
 8007f94:	4602      	mov	r2, r0
 8007f96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f98:	7bfa      	ldrb	r2, [r7, #15]
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3340      	adds	r3, #64	; 0x40
 8007fa8:	2200      	movs	r2, #0
 8007faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007fac:	7bfa      	ldrb	r2, [r7, #15]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3344      	adds	r3, #68	; 0x44
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fc0:	7bfa      	ldrb	r2, [r7, #15]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	4413      	add	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	3348      	adds	r3, #72	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007fd4:	7bfa      	ldrb	r2, [r7, #15]
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	334c      	adds	r3, #76	; 0x4c
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	3301      	adds	r3, #1
 8007fec:	73fb      	strb	r3, [r7, #15]
 8007fee:	7bfa      	ldrb	r2, [r7, #15]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d3af      	bcc.n	8007f58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	e044      	b.n	8008088 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008014:	7bfa      	ldrb	r2, [r7, #15]
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008026:	7bfa      	ldrb	r2, [r7, #15]
 8008028:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800802a:	7bfa      	ldrb	r2, [r7, #15]
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008040:	7bfa      	ldrb	r2, [r7, #15]
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	440b      	add	r3, r1
 800804e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008056:	7bfa      	ldrb	r2, [r7, #15]
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800806c:	7bfa      	ldrb	r2, [r7, #15]
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4613      	mov	r3, r2
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	3301      	adds	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
 8008088:	7bfa      	ldrb	r2, [r7, #15]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	429a      	cmp	r2, r3
 8008090:	d3b5      	bcc.n	8007ffe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	687e      	ldr	r6, [r7, #4]
 800809a:	466d      	mov	r5, sp
 800809c:	f106 0410 	add.w	r4, r6, #16
 80080a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80080b0:	1d33      	adds	r3, r6, #4
 80080b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080b4:	6838      	ldr	r0, [r7, #0]
 80080b6:	f00a fe2b 	bl	8012d10 <USB_DevInit>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e014      	b.n	80080f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d102      	bne.n	80080ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 f96f 	bl	80093c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00b fe6d 	bl	8013dce <USB_DevDisconnect>

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_PCD_Start+0x1c>
 8008116:	2302      	movs	r3, #2
 8008118:	e022      	b.n	8008160 <HAL_PCD_Start+0x62>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008132:	2b01      	cmp	r3, #1
 8008134:	d105      	bne.n	8008142 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4618      	mov	r0, r3
 8008148:	f00a fd74 	bl	8012c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f00b fe1b 	bl	8013d8c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b08d      	sub	sp, #52	; 0x34
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f00b fed9 	bl	8013f36 <USB_GetMode>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 84b7 	bne.w	8008afa <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f00b fe3d 	bl	8013e10 <USB_ReadInterrupts>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 84ad 	beq.w	8008af8 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f00b fe2a 	bl	8013e10 <USB_ReadInterrupts>
 80081bc:	4603      	mov	r3, r0
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d107      	bne.n	80081d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f002 0202 	and.w	r2, r2, #2
 80081d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f00b fe18 	bl	8013e10 <USB_ReadInterrupts>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d161      	bne.n	80082ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0210 	bic.w	r2, r2, #16
 80081f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f003 020f 	and.w	r2, r3, #15
 8008206:	4613      	mov	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4413      	add	r3, r2
 8008216:	3304      	adds	r3, #4
 8008218:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	0c5b      	lsrs	r3, r3, #17
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	2b02      	cmp	r3, #2
 8008224:	d124      	bne.n	8008270 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800822c:	4013      	ands	r3, r2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d035      	beq.n	800829e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	091b      	lsrs	r3, r3, #4
 800823a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800823c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008240:	b29b      	uxth	r3, r3
 8008242:	461a      	mov	r2, r3
 8008244:	6a38      	ldr	r0, [r7, #32]
 8008246:	f00b fc4f 	bl	8013ae8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008256:	441a      	add	r2, r3
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008268:	441a      	add	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	615a      	str	r2, [r3, #20]
 800826e:	e016      	b.n	800829e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	0c5b      	lsrs	r3, r3, #17
 8008274:	f003 030f 	and.w	r3, r3, #15
 8008278:	2b06      	cmp	r3, #6
 800827a:	d110      	bne.n	800829e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008282:	2208      	movs	r2, #8
 8008284:	4619      	mov	r1, r3
 8008286:	6a38      	ldr	r0, [r7, #32]
 8008288:	f00b fc2e 	bl	8013ae8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	695a      	ldr	r2, [r3, #20]
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008298:	441a      	add	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f042 0210 	orr.w	r2, r2, #16
 80082ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f00b fdac 	bl	8013e10 <USB_ReadInterrupts>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082c2:	f040 80a7 	bne.w	8008414 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f00b fdb1 	bl	8013e36 <USB_ReadDevAllOutEpInterrupt>
 80082d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80082d6:	e099      	b.n	800840c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 808e 	beq.w	8008400 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f00b fdd5 	bl	8013e9e <USB_ReadDevOutEPInterrupt>
 80082f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830c:	461a      	mov	r2, r3
 800830e:	2301      	movs	r3, #1
 8008310:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fed1 	bl	80090bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	461a      	mov	r2, r3
 8008332:	2308      	movs	r3, #8
 8008334:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 ffa7 	bl	800928c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f003 0310 	and.w	r3, r3, #16
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	461a      	mov	r2, r3
 8008356:	2310      	movs	r3, #16
 8008358:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d030      	beq.n	80083c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d109      	bne.n	8008384 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800837e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008382:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	4613      	mov	r3, r2
 8008388:	00db      	lsls	r3, r3, #3
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4413      	add	r3, r2
 8008396:	3304      	adds	r3, #4
 8008398:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	78db      	ldrb	r3, [r3, #3]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d108      	bne.n	80083b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f011 f8fe 	bl	80195b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	461a      	mov	r2, r3
 80083c2:	2302      	movs	r3, #2
 80083c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d008      	beq.n	80083e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	461a      	mov	r2, r3
 80083de:	2320      	movs	r3, #32
 80083e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	461a      	mov	r2, r3
 80083fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	3301      	adds	r3, #1
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	f47f af62 	bne.w	80082d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f00b fcf9 	bl	8013e10 <USB_ReadInterrupts>
 800841e:	4603      	mov	r3, r0
 8008420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008428:	f040 80db 	bne.w	80085e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f00b fd1a 	bl	8013e6a <USB_ReadDevAllInEpInterrupt>
 8008436:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800843c:	e0cd      	b.n	80085da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80c2 	beq.w	80085ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	4611      	mov	r1, r2
 8008454:	4618      	mov	r0, r3
 8008456:	f00b fd40 	bl	8013eda <USB_ReadDevInEPInterrupt>
 800845a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d057      	beq.n	8008516 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	2201      	movs	r2, #1
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	43db      	mvns	r3, r3
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008486:	4013      	ands	r3, r2
 8008488:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	2301      	movs	r3, #1
 800849a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d132      	bne.n	800850a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80084a4:	6879      	ldr	r1, [r7, #4]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	4613      	mov	r3, r2
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3348      	adds	r3, #72	; 0x48
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4403      	add	r3, r0
 80084c4:	3344      	adds	r3, #68	; 0x44
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4419      	add	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	4613      	mov	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4403      	add	r3, r0
 80084d8:	3348      	adds	r3, #72	; 0x48
 80084da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d113      	bne.n	800850a <HAL_PCD_IRQHandler+0x3a2>
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	4613      	mov	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	440b      	add	r3, r1
 80084f0:	334c      	adds	r3, #76	; 0x4c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d108      	bne.n	800850a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008502:	461a      	mov	r2, r3
 8008504:	2101      	movs	r1, #1
 8008506:	f00b fd49 	bl	8013f9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f010 ffc8 	bl	80194a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f003 0308 	and.w	r3, r3, #8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852c:	461a      	mov	r2, r3
 800852e:	2308      	movs	r3, #8
 8008530:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	461a      	mov	r2, r3
 800854a:	2310      	movs	r3, #16
 800854c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	461a      	mov	r2, r3
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d023      	beq.n	80085bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008576:	6a38      	ldr	r0, [r7, #32]
 8008578:	f00a fd28 	bl	8012fcc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	3338      	adds	r3, #56	; 0x38
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	78db      	ldrb	r3, [r3, #3]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d108      	bne.n	80085aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f011 f815 	bl	80195d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	461a      	mov	r2, r3
 80085b8:	2302      	movs	r3, #2
 80085ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80085c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fcea 	bl	8008fa2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	3301      	adds	r3, #1
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f af2e 	bne.w	800843e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f00b fc12 	bl	8013e10 <USB_ReadInterrupts>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f6:	d122      	bne.n	800863e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	69fa      	ldr	r2, [r7, #28]
 8008602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008606:	f023 0301 	bic.w	r3, r3, #1
 800860a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008612:	2b01      	cmp	r3, #1
 8008614:	d108      	bne.n	8008628 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fef5 	bl	8009410 <HAL_PCDEx_LPM_Callback>
 8008626:	e002      	b.n	800862e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f010 ffb3 	bl	8019594 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800863c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f00b fbe4 	bl	8013e10 <USB_ReadInterrupts>
 8008648:	4603      	mov	r3, r0
 800864a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008652:	d112      	bne.n	800867a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b01      	cmp	r3, #1
 8008662:	d102      	bne.n	800866a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f010 ff6f 	bl	8019548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695a      	ldr	r2, [r3, #20]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008678:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f00b fbc6 	bl	8013e10 <USB_ReadInterrupts>
 8008684:	4603      	mov	r3, r0
 8008686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800868a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800868e:	d121      	bne.n	80086d4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695a      	ldr	r2, [r3, #20]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800869e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d111      	bne.n	80086ce <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b8:	089b      	lsrs	r3, r3, #2
 80086ba:	f003 020f 	and.w	r2, r3, #15
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80086c4:	2101      	movs	r1, #1
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fea2 	bl	8009410 <HAL_PCDEx_LPM_Callback>
 80086cc:	e002      	b.n	80086d4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f010 ff3a 	bl	8019548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f00b fb99 	bl	8013e10 <USB_ReadInterrupts>
 80086de:	4603      	mov	r3, r0
 80086e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e8:	f040 80b7 	bne.w	800885a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2110      	movs	r1, #16
 8008706:	4618      	mov	r0, r3
 8008708:	f00a fc60 	bl	8012fcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008710:	e046      	b.n	80087a0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871e:	461a      	mov	r2, r3
 8008720:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008724:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	440a      	add	r2, r1
 800873c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008744:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008752:	461a      	mov	r2, r3
 8008754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008758:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008778:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008798:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	3301      	adds	r3, #1
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d3b3      	bcc.n	8008712 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80087bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d016      	beq.n	80087f4 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d6:	f043 030b 	orr.w	r3, r3, #11
 80087da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ec:	f043 030b 	orr.w	r3, r3, #11
 80087f0:	6453      	str	r3, [r2, #68]	; 0x44
 80087f2:	e015      	b.n	8008820 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008802:	4619      	mov	r1, r3
 8008804:	f242 032b 	movw	r3, #8235	; 0x202b
 8008808:	4313      	orrs	r3, r2
 800880a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800881a:	f043 030b 	orr.w	r3, r3, #11
 800881e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008832:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008844:	461a      	mov	r2, r3
 8008846:	f00b fba9 	bl	8013f9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f00b fad6 	bl	8013e10 <USB_ReadInterrupts>
 8008864:	4603      	mov	r3, r0
 8008866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800886a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800886e:	d124      	bne.n	80088ba <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f00b fb6d 	bl	8013f54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f00a fc21 	bl	80130c6 <USB_GetDevSpeed>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681c      	ldr	r4, [r3, #0]
 8008890:	f001 fd88 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 8008894:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	4620      	mov	r0, r4
 80088a0:	f00a f926 	bl	8012af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f010 fe26 	bl	80194f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695a      	ldr	r2, [r3, #20]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80088b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f00b faa6 	bl	8013e10 <USB_ReadInterrupts>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d10a      	bne.n	80088e4 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f010 fe03 	bl	80194da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695a      	ldr	r2, [r3, #20]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f002 0208 	and.w	r2, r2, #8
 80088e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f00b fa91 	bl	8013e10 <USB_ReadInterrupts>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d122      	bne.n	800893e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008904:	2301      	movs	r3, #1
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
 8008908:	e014      	b.n	8008934 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800890a:	6879      	ldr	r1, [r7, #4]
 800890c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890e:	4613      	mov	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d105      	bne.n	800892e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	b2db      	uxtb	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fb09 	bl	8008f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	3301      	adds	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893a:	429a      	cmp	r2, r3
 800893c:	d3e5      	bcc.n	800890a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f00b fa64 	bl	8013e10 <USB_ReadInterrupts>
 8008948:	4603      	mov	r3, r0
 800894a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800894e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008952:	d13b      	bne.n	80089cc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008954:	2301      	movs	r3, #1
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
 8008958:	e02b      	b.n	80089b2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896e:	4613      	mov	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	3340      	adds	r3, #64	; 0x40
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d115      	bne.n	80089ac <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008980:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008982:	2b00      	cmp	r3, #0
 8008984:	da12      	bge.n	80089ac <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	4613      	mov	r3, r2
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	440b      	add	r3, r1
 8008994:	333f      	adds	r3, #63	; 0x3f
 8008996:	2201      	movs	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 faca 	bl	8008f40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	3301      	adds	r3, #1
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3ce      	bcc.n	800895a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695a      	ldr	r2, [r3, #20]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80089ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f00b fa1d 	bl	8013e10 <USB_ReadInterrupts>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089e0:	d155      	bne.n	8008a8e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80089e2:	2301      	movs	r3, #1
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
 80089e6:	e045      	b.n	8008a74 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d12e      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da2b      	bge.n	8008a6e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008a22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d121      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	4613      	mov	r3, r2
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	440b      	add	r3, r1
 8008a38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a6a:	6053      	str	r3, [r2, #4]
            break;
 8008a6c:	e007      	b.n	8008a7e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	3301      	adds	r3, #1
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3b4      	bcc.n	80089e8 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f00b f9bc 	bl	8013e10 <USB_ReadInterrupts>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa2:	d10a      	bne.n	8008aba <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f010 fda7 	bl	80195f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f00b f9a6 	bl	8013e10 <USB_ReadInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d115      	bne.n	8008afa <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f010 fd97 	bl	8019614 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6859      	ldr	r1, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	e000      	b.n	8008afa <HAL_PCD_IRQHandler+0x992>
      return;
 8008af8:	bf00      	nop
    }
  }
}
 8008afa:	3734      	adds	r7, #52	; 0x34
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}

08008b00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_PCD_SetAddress+0x1a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e013      	b.n	8008b42 <HAL_PCD_SetAddress+0x42>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f00b f904 	bl	8013d40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	461a      	mov	r2, r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	70fb      	strb	r3, [r7, #3]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	803b      	strh	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0f      	bge.n	8008b90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	705a      	strb	r2, [r3, #1]
 8008b8e:	e00f      	b.n	8008bb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	f003 020f 	and.w	r2, r3, #15
 8008b96:	4613      	mov	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	78ba      	ldrb	r2, [r7, #2]
 8008bc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bda:	78bb      	ldrb	r3, [r7, #2]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d102      	bne.n	8008be6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_PCD_EP_Open+0xaa>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e00e      	b.n	8008c12 <HAL_PCD_EP_Open+0xc8>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f00a fa84 	bl	8013110 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da0f      	bge.n	8008c4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	f003 020f 	and.w	r2, r3, #15
 8008c34:	4613      	mov	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	4413      	add	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	3338      	adds	r3, #56	; 0x38
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	4413      	add	r3, r2
 8008c42:	3304      	adds	r3, #4
 8008c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	705a      	strb	r2, [r3, #1]
 8008c4c:	e00f      	b.n	8008c6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_PCD_EP_Close+0x6e>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e00e      	b.n	8008ca6 <HAL_PCD_EP_Close+0x8c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68f9      	ldr	r1, [r7, #12]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f00a fac2 	bl	8013220 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d102      	bne.n	8008d0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	6979      	ldr	r1, [r7, #20]
 8008d18:	f00a fb5e 	bl	80133d8 <USB_EPStartXfer>

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b083      	sub	sp, #12
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	f003 020f 	and.w	r2, r3, #15
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8008d48:	681b      	ldr	r3, [r3, #0]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
 8008d62:	460b      	mov	r3, r1
 8008d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	f003 020f 	and.w	r2, r3, #15
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	3338      	adds	r3, #56	; 0x38
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2201      	movs	r2, #1
 8008d94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d102      	bne.n	8008db0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	461a      	mov	r2, r3
 8008dbc:	6979      	ldr	r1, [r7, #20]
 8008dbe:	f00a fb0b 	bl	80133d8 <USB_EPStartXfer>

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d901      	bls.n	8008dea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e050      	b.n	8008e8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	da0f      	bge.n	8008e12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	f003 020f 	and.w	r2, r3, #15
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	3338      	adds	r3, #56	; 0x38
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	3304      	adds	r3, #4
 8008e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	705a      	strb	r2, [r3, #1]
 8008e10:	e00d      	b.n	8008e2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	3304      	adds	r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2201      	movs	r2, #1
 8008e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d101      	bne.n	8008e4e <HAL_PCD_EP_SetStall+0x82>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e01e      	b.n	8008e8c <HAL_PCD_EP_SetStall+0xc0>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00a fe9b 	bl	8013b98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	f003 030f 	and.w	r3, r3, #15
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	b2d9      	uxtb	r1, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f00b f88d 	bl	8013f9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	f003 020f 	and.w	r2, r3, #15
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d901      	bls.n	8008eb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e042      	b.n	8008f38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da0f      	bge.n	8008eda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	f003 020f 	and.w	r2, r3, #15
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	3338      	adds	r3, #56	; 0x38
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	705a      	strb	r2, [r3, #1]
 8008ed8:	e00f      	b.n	8008efa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	f003 020f 	and.w	r2, r3, #15
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_PCD_EP_ClrStall+0x86>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e00e      	b.n	8008f38 <HAL_PCD_EP_ClrStall+0xa4>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00a fea3 	bl	8013c74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da0c      	bge.n	8008f6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	f003 020f 	and.w	r2, r3, #15
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	3338      	adds	r3, #56	; 0x38
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e00c      	b.n	8008f88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	3304      	adds	r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68f9      	ldr	r1, [r7, #12]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f00a fcc2 	bl	8013918 <USB_EPStopXfer>
 8008f94:	4603      	mov	r3, r0
 8008f96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b08a      	sub	sp, #40	; 0x28
 8008fa6:	af02      	add	r7, sp, #8
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	3338      	adds	r3, #56	; 0x38
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d901      	bls.n	8008fda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e06c      	b.n	80090b4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	691a      	ldr	r2, [r3, #16]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	69fa      	ldr	r2, [r7, #28]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d902      	bls.n	8008ff6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	3303      	adds	r3, #3
 8008ffa:	089b      	lsrs	r3, r3, #2
 8008ffc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ffe:	e02b      	b.n	8009058 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	69fa      	ldr	r2, [r7, #28]
 8009012:	429a      	cmp	r2, r3
 8009014:	d902      	bls.n	800901c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3303      	adds	r3, #3
 8009020:	089b      	lsrs	r3, r3, #2
 8009022:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68d9      	ldr	r1, [r3, #12]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	b2da      	uxtb	r2, r3
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009034:	b2db      	uxtb	r3, r3
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	6978      	ldr	r0, [r7, #20]
 800903c:	f00a fd16 	bl	8013a6c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	441a      	add	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	695a      	ldr	r2, [r3, #20]
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	441a      	add	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	429a      	cmp	r2, r3
 800906c:	d809      	bhi.n	8009082 <PCD_WriteEmptyTxFifo+0xe0>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009076:	429a      	cmp	r2, r3
 8009078:	d203      	bcs.n	8009082 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1be      	bne.n	8009000 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	429a      	cmp	r2, r3
 800908c:	d811      	bhi.n	80090b2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f003 030f 	and.w	r3, r3, #15
 8009094:	2201      	movs	r2, #1
 8009096:	fa02 f303 	lsl.w	r3, r2, r3
 800909a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	43db      	mvns	r3, r3
 80090a8:	6939      	ldr	r1, [r7, #16]
 80090aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ae:	4013      	ands	r3, r2
 80090b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	333c      	adds	r3, #60	; 0x3c
 80090d4:	3304      	adds	r3, #4
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d17b      	bne.n	80091ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d015      	beq.n	8009128 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	4a61      	ldr	r2, [pc, #388]	; (8009284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	f240 80b9 	bls.w	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80b3 	beq.w	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911e:	461a      	mov	r2, r3
 8009120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009124:	6093      	str	r3, [r2, #8]
 8009126:	e0a7      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913e:	461a      	mov	r2, r3
 8009140:	2320      	movs	r3, #32
 8009142:	6093      	str	r3, [r2, #8]
 8009144:	e098      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8093 	bne.w	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	4a4b      	ldr	r2, [pc, #300]	; (8009284 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d90f      	bls.n	800917a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	461a      	mov	r2, r3
 8009172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009176:	6093      	str	r3, [r2, #8]
 8009178:	e07e      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4413      	add	r3, r2
 800918c:	3304      	adds	r3, #4
 800918e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1a      	ldr	r2, [r3, #32]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	0159      	lsls	r1, r3, #5
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	440b      	add	r3, r1
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091a6:	1ad2      	subs	r2, r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d114      	bne.n	80091dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d109      	bne.n	80091ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091c4:	461a      	mov	r2, r3
 80091c6:	2101      	movs	r1, #1
 80091c8:	f00a fee8 	bl	8013f9c <USB_EP0_OutStart>
 80091cc:	e006      	b.n	80091dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	441a      	add	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f010 f944 	bl	8019470 <HAL_PCD_DataOutStageCallback>
 80091e8:	e046      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	4a26      	ldr	r2, [pc, #152]	; (8009288 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d124      	bne.n	800923c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009208:	461a      	mov	r2, r3
 800920a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800920e:	6093      	str	r3, [r2, #8]
 8009210:	e032      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	d008      	beq.n	800922e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009228:	461a      	mov	r2, r3
 800922a:	2320      	movs	r3, #32
 800922c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	b2db      	uxtb	r3, r3
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f010 f91b 	bl	8019470 <HAL_PCD_DataOutStageCallback>
 800923a:	e01d      	b.n	8009278 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d114      	bne.n	800926c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	4613      	mov	r3, r2
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	4413      	add	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	440b      	add	r3, r1
 8009250:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d108      	bne.n	800926c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009264:	461a      	mov	r2, r3
 8009266:	2100      	movs	r1, #0
 8009268:	f00a fe98 	bl	8013f9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f010 f8fc 	bl	8019470 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	4f54300a 	.word	0x4f54300a
 8009288:	4f54310a 	.word	0x4f54310a

0800928c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	333c      	adds	r3, #60	; 0x3c
 80092a4:	3304      	adds	r3, #4
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4a15      	ldr	r2, [pc, #84]	; (8009314 <PCD_EP_OutSetupPacket_int+0x88>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d90e      	bls.n	80092e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d009      	beq.n	80092e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f010 f8b3 	bl	801944c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4a0a      	ldr	r2, [pc, #40]	; (8009314 <PCD_EP_OutSetupPacket_int+0x88>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d90c      	bls.n	8009308 <PCD_EP_OutSetupPacket_int+0x7c>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d108      	bne.n	8009308 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009300:	461a      	mov	r2, r3
 8009302:	2101      	movs	r1, #1
 8009304:	f00a fe4a 	bl	8013f9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	4f54300a 	.word	0x4f54300a

08009318 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
 8009324:	4613      	mov	r3, r2
 8009326:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d107      	bne.n	8009346 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009336:	883b      	ldrh	r3, [r7, #0]
 8009338:	0419      	lsls	r1, r3, #16
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	430a      	orrs	r2, r1
 8009342:	629a      	str	r2, [r3, #40]	; 0x28
 8009344:	e028      	b.n	8009398 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	0c1b      	lsrs	r3, r3, #16
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4413      	add	r3, r2
 8009352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
 8009358:	e00d      	b.n	8009376 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	3340      	adds	r3, #64	; 0x40
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	0c1b      	lsrs	r3, r3, #16
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4413      	add	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	3301      	adds	r3, #1
 8009374:	73fb      	strb	r3, [r7, #15]
 8009376:	7bfa      	ldrb	r2, [r7, #15]
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	3b01      	subs	r3, #1
 800937c:	429a      	cmp	r2, r3
 800937e:	d3ec      	bcc.n	800935a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009380:	883b      	ldrh	r3, [r7, #0]
 8009382:	0418      	lsls	r0, r3, #16
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6819      	ldr	r1, [r3, #0]
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	3b01      	subs	r3, #1
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4302      	orrs	r2, r0
 8009390:	3340      	adds	r3, #64	; 0x40
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	887a      	ldrh	r2, [r7, #2]
 80093b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <HAL_PCDEx_ActivateLPM+0x44>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	10000003 	.word	0x10000003

08009410 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009430:	4b19      	ldr	r3, [pc, #100]	; (8009498 <HAL_PWREx_ConfigSupply+0x70>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b04      	cmp	r3, #4
 800943a:	d00a      	beq.n	8009452 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <HAL_PWREx_ConfigSupply+0x70>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d001      	beq.n	800944e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e01f      	b.n	800948e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	e01d      	b.n	800948e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009452:	4b11      	ldr	r3, [pc, #68]	; (8009498 <HAL_PWREx_ConfigSupply+0x70>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f023 0207 	bic.w	r2, r3, #7
 800945a:	490f      	ldr	r1, [pc, #60]	; (8009498 <HAL_PWREx_ConfigSupply+0x70>)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4313      	orrs	r3, r2
 8009460:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009462:	f7fa f927 	bl	80036b4 <HAL_GetTick>
 8009466:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009468:	e009      	b.n	800947e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800946a:	f7fa f923 	bl	80036b4 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009478:	d901      	bls.n	800947e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e007      	b.n	800948e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <HAL_PWREx_ConfigSupply+0x70>)
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800948a:	d1ee      	bne.n	800946a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	58024800 	.word	0x58024800

0800949c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	4a04      	ldr	r2, [pc, #16]	; (80094b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80094a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094aa:	60d3      	str	r3, [r2, #12]
}
 80094ac:	bf00      	nop
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	58024800 	.word	0x58024800

080094bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08c      	sub	sp, #48	; 0x30
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e3c8      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 8087 	beq.w	80095ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094dc:	4b88      	ldr	r3, [pc, #544]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094e6:	4b86      	ldr	r3, [pc, #536]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d007      	beq.n	8009502 <HAL_RCC_OscConfig+0x46>
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	2b18      	cmp	r3, #24
 80094f6:	d110      	bne.n	800951a <HAL_RCC_OscConfig+0x5e>
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	f003 0303 	and.w	r3, r3, #3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d10b      	bne.n	800951a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009502:	4b7f      	ldr	r3, [pc, #508]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d06c      	beq.n	80095e8 <HAL_RCC_OscConfig+0x12c>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d168      	bne.n	80095e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e3a2      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009522:	d106      	bne.n	8009532 <HAL_RCC_OscConfig+0x76>
 8009524:	4b76      	ldr	r3, [pc, #472]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a75      	ldr	r2, [pc, #468]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800952a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	e02e      	b.n	8009590 <HAL_RCC_OscConfig+0xd4>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10c      	bne.n	8009554 <HAL_RCC_OscConfig+0x98>
 800953a:	4b71      	ldr	r3, [pc, #452]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a70      	ldr	r2, [pc, #448]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	4b6e      	ldr	r3, [pc, #440]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a6d      	ldr	r2, [pc, #436]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800954c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	e01d      	b.n	8009590 <HAL_RCC_OscConfig+0xd4>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800955c:	d10c      	bne.n	8009578 <HAL_RCC_OscConfig+0xbc>
 800955e:	4b68      	ldr	r3, [pc, #416]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a67      	ldr	r2, [pc, #412]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009568:	6013      	str	r3, [r2, #0]
 800956a:	4b65      	ldr	r3, [pc, #404]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a64      	ldr	r2, [pc, #400]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009574:	6013      	str	r3, [r2, #0]
 8009576:	e00b      	b.n	8009590 <HAL_RCC_OscConfig+0xd4>
 8009578:	4b61      	ldr	r3, [pc, #388]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a60      	ldr	r2, [pc, #384]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800957e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	4b5e      	ldr	r3, [pc, #376]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a5d      	ldr	r2, [pc, #372]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800958a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800958e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d013      	beq.n	80095c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009598:	f7fa f88c 	bl	80036b4 <HAL_GetTick>
 800959c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800959e:	e008      	b.n	80095b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095a0:	f7fa f888 	bl	80036b4 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b64      	cmp	r3, #100	; 0x64
 80095ac:	d901      	bls.n	80095b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e356      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80095b2:	4b53      	ldr	r3, [pc, #332]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0f0      	beq.n	80095a0 <HAL_RCC_OscConfig+0xe4>
 80095be:	e014      	b.n	80095ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c0:	f7fa f878 	bl	80036b4 <HAL_GetTick>
 80095c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80095c6:	e008      	b.n	80095da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80095c8:	f7fa f874 	bl	80036b4 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b64      	cmp	r3, #100	; 0x64
 80095d4:	d901      	bls.n	80095da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e342      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80095da:	4b49      	ldr	r3, [pc, #292]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1f0      	bne.n	80095c8 <HAL_RCC_OscConfig+0x10c>
 80095e6:	e000      	b.n	80095ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 808c 	beq.w	8009710 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095f8:	4b41      	ldr	r3, [pc, #260]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009602:	4b3f      	ldr	r3, [pc, #252]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <HAL_RCC_OscConfig+0x162>
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	2b18      	cmp	r3, #24
 8009612:	d137      	bne.n	8009684 <HAL_RCC_OscConfig+0x1c8>
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d132      	bne.n	8009684 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800961e:	4b38      	ldr	r3, [pc, #224]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_RCC_OscConfig+0x17a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e314      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009636:	4b32      	ldr	r3, [pc, #200]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f023 0219 	bic.w	r2, r3, #25
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	492f      	ldr	r1, [pc, #188]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009644:	4313      	orrs	r3, r2
 8009646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009648:	f7fa f834 	bl	80036b4 <HAL_GetTick>
 800964c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800964e:	e008      	b.n	8009662 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009650:	f7fa f830 	bl	80036b4 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e2fe      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009662:	4b27      	ldr	r3, [pc, #156]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f0      	beq.n	8009650 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	061b      	lsls	r3, r3, #24
 800967c:	4920      	ldr	r1, [pc, #128]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800967e:	4313      	orrs	r3, r2
 8009680:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009682:	e045      	b.n	8009710 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d026      	beq.n	80096da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800968c:	4b1c      	ldr	r3, [pc, #112]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f023 0219 	bic.w	r2, r3, #25
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	4919      	ldr	r1, [pc, #100]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 800969a:	4313      	orrs	r3, r2
 800969c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800969e:	f7fa f809 	bl	80036b4 <HAL_GetTick>
 80096a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096a6:	f7fa f805 	bl	80036b4 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e2d3      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096b8:	4b11      	ldr	r3, [pc, #68]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f0      	beq.n	80096a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	490b      	ldr	r1, [pc, #44]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	604b      	str	r3, [r1, #4]
 80096d8:	e01a      	b.n	8009710 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a08      	ldr	r2, [pc, #32]	; (8009700 <HAL_RCC_OscConfig+0x244>)
 80096e0:	f023 0301 	bic.w	r3, r3, #1
 80096e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e6:	f7f9 ffe5 	bl	80036b4 <HAL_GetTick>
 80096ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80096ec:	e00a      	b.n	8009704 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ee:	f7f9 ffe1 	bl	80036b4 <HAL_GetTick>
 80096f2:	4602      	mov	r2, r0
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d903      	bls.n	8009704 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e2af      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
 8009700:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009704:	4b96      	ldr	r3, [pc, #600]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1ee      	bne.n	80096ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d06a      	beq.n	80097f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800971c:	4b90      	ldr	r3, [pc, #576]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009724:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009726:	4b8e      	ldr	r3, [pc, #568]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b08      	cmp	r3, #8
 8009730:	d007      	beq.n	8009742 <HAL_RCC_OscConfig+0x286>
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b18      	cmp	r3, #24
 8009736:	d11b      	bne.n	8009770 <HAL_RCC_OscConfig+0x2b4>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b01      	cmp	r3, #1
 8009740:	d116      	bne.n	8009770 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009742:	4b87      	ldr	r3, [pc, #540]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <HAL_RCC_OscConfig+0x29e>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d001      	beq.n	800975a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e282      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800975a:	4b81      	ldr	r3, [pc, #516]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	061b      	lsls	r3, r3, #24
 8009768:	497d      	ldr	r1, [pc, #500]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800976a:	4313      	orrs	r3, r2
 800976c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800976e:	e040      	b.n	80097f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d023      	beq.n	80097c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009778:	4b79      	ldr	r3, [pc, #484]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a78      	ldr	r2, [pc, #480]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800977e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009784:	f7f9 ff96 	bl	80036b4 <HAL_GetTick>
 8009788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800978a:	e008      	b.n	800979e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800978c:	f7f9 ff92 	bl	80036b4 <HAL_GetTick>
 8009790:	4602      	mov	r2, r0
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	2b02      	cmp	r3, #2
 8009798:	d901      	bls.n	800979e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e260      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800979e:	4b70      	ldr	r3, [pc, #448]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d0f0      	beq.n	800978c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097aa:	4b6d      	ldr	r3, [pc, #436]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	061b      	lsls	r3, r3, #24
 80097b8:	4969      	ldr	r1, [pc, #420]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60cb      	str	r3, [r1, #12]
 80097be:	e018      	b.n	80097f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80097c0:	4b67      	ldr	r3, [pc, #412]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a66      	ldr	r2, [pc, #408]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097cc:	f7f9 ff72 	bl	80036b4 <HAL_GetTick>
 80097d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097d2:	e008      	b.n	80097e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80097d4:	f7f9 ff6e 	bl	80036b4 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e23c      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097e6:	4b5e      	ldr	r3, [pc, #376]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f0      	bne.n	80097d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0308 	and.w	r3, r3, #8
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d036      	beq.n	800986c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d019      	beq.n	800983a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009806:	4b56      	ldr	r3, [pc, #344]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800980a:	4a55      	ldr	r2, [pc, #340]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800980c:	f043 0301 	orr.w	r3, r3, #1
 8009810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009812:	f7f9 ff4f 	bl	80036b4 <HAL_GetTick>
 8009816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009818:	e008      	b.n	800982c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800981a:	f7f9 ff4b 	bl	80036b4 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	2b02      	cmp	r3, #2
 8009826:	d901      	bls.n	800982c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e219      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800982c:	4b4c      	ldr	r3, [pc, #304]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800982e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0f0      	beq.n	800981a <HAL_RCC_OscConfig+0x35e>
 8009838:	e018      	b.n	800986c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800983a:	4b49      	ldr	r3, [pc, #292]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800983c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800983e:	4a48      	ldr	r2, [pc, #288]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009840:	f023 0301 	bic.w	r3, r3, #1
 8009844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009846:	f7f9 ff35 	bl	80036b4 <HAL_GetTick>
 800984a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800984c:	e008      	b.n	8009860 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800984e:	f7f9 ff31 	bl	80036b4 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d901      	bls.n	8009860 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e1ff      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009860:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1f0      	bne.n	800984e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d036      	beq.n	80098e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d019      	beq.n	80098b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009880:	4b37      	ldr	r3, [pc, #220]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a36      	ldr	r2, [pc, #216]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800988a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800988c:	f7f9 ff12 	bl	80036b4 <HAL_GetTick>
 8009890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009894:	f7f9 ff0e 	bl	80036b4 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e1dc      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80098a6:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0f0      	beq.n	8009894 <HAL_RCC_OscConfig+0x3d8>
 80098b2:	e018      	b.n	80098e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80098b4:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a29      	ldr	r2, [pc, #164]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80098ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80098c0:	f7f9 fef8 	bl	80036b4 <HAL_GetTick>
 80098c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098c6:	e008      	b.n	80098da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098c8:	f7f9 fef4 	bl	80036b4 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d901      	bls.n	80098da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e1c2      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80098da:	4b21      	ldr	r3, [pc, #132]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1f0      	bne.n	80098c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f000 8086 	beq.w	8009a00 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80098f4:	4b1b      	ldr	r3, [pc, #108]	; (8009964 <HAL_RCC_OscConfig+0x4a8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <HAL_RCC_OscConfig+0x4a8>)
 80098fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009900:	f7f9 fed8 	bl	80036b4 <HAL_GetTick>
 8009904:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009906:	e008      	b.n	800991a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009908:	f7f9 fed4 	bl	80036b4 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	2b64      	cmp	r3, #100	; 0x64
 8009914:	d901      	bls.n	800991a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e1a2      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <HAL_RCC_OscConfig+0x4a8>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0f0      	beq.n	8009908 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d106      	bne.n	800993c <HAL_RCC_OscConfig+0x480>
 800992e:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	4a0b      	ldr	r2, [pc, #44]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009934:	f043 0301 	orr.w	r3, r3, #1
 8009938:	6713      	str	r3, [r2, #112]	; 0x70
 800993a:	e032      	b.n	80099a2 <HAL_RCC_OscConfig+0x4e6>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d111      	bne.n	8009968 <HAL_RCC_OscConfig+0x4ac>
 8009944:	4b06      	ldr	r3, [pc, #24]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009948:	4a05      	ldr	r2, [pc, #20]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 800994a:	f023 0301 	bic.w	r3, r3, #1
 800994e:	6713      	str	r3, [r2, #112]	; 0x70
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009954:	4a02      	ldr	r2, [pc, #8]	; (8009960 <HAL_RCC_OscConfig+0x4a4>)
 8009956:	f023 0304 	bic.w	r3, r3, #4
 800995a:	6713      	str	r3, [r2, #112]	; 0x70
 800995c:	e021      	b.n	80099a2 <HAL_RCC_OscConfig+0x4e6>
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
 8009964:	58024800 	.word	0x58024800
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	2b05      	cmp	r3, #5
 800996e:	d10c      	bne.n	800998a <HAL_RCC_OscConfig+0x4ce>
 8009970:	4b83      	ldr	r3, [pc, #524]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009974:	4a82      	ldr	r2, [pc, #520]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009976:	f043 0304 	orr.w	r3, r3, #4
 800997a:	6713      	str	r3, [r2, #112]	; 0x70
 800997c:	4b80      	ldr	r3, [pc, #512]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	4a7f      	ldr	r2, [pc, #508]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	6713      	str	r3, [r2, #112]	; 0x70
 8009988:	e00b      	b.n	80099a2 <HAL_RCC_OscConfig+0x4e6>
 800998a:	4b7d      	ldr	r3, [pc, #500]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 800998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998e:	4a7c      	ldr	r2, [pc, #496]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009990:	f023 0301 	bic.w	r3, r3, #1
 8009994:	6713      	str	r3, [r2, #112]	; 0x70
 8009996:	4b7a      	ldr	r3, [pc, #488]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	4a79      	ldr	r2, [pc, #484]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 800999c:	f023 0304 	bic.w	r3, r3, #4
 80099a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d015      	beq.n	80099d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099aa:	f7f9 fe83 	bl	80036b4 <HAL_GetTick>
 80099ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099b0:	e00a      	b.n	80099c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b2:	f7f9 fe7f 	bl	80036b4 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e14b      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099c8:	4b6d      	ldr	r3, [pc, #436]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 80099ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0ee      	beq.n	80099b2 <HAL_RCC_OscConfig+0x4f6>
 80099d4:	e014      	b.n	8009a00 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099d6:	f7f9 fe6d 	bl	80036b4 <HAL_GetTick>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099dc:	e00a      	b.n	80099f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099de:	f7f9 fe69 	bl	80036b4 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d901      	bls.n	80099f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e135      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80099f4:	4b62      	ldr	r3, [pc, #392]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 80099f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1ee      	bne.n	80099de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 812a 	beq.w	8009c5e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009a0a:	4b5d      	ldr	r3, [pc, #372]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a12:	2b18      	cmp	r3, #24
 8009a14:	f000 80ba 	beq.w	8009b8c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	f040 8095 	bne.w	8009b4c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a22:	4b57      	ldr	r3, [pc, #348]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a56      	ldr	r2, [pc, #344]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2e:	f7f9 fe41 	bl	80036b4 <HAL_GetTick>
 8009a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a34:	e008      	b.n	8009a48 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a36:	f7f9 fe3d 	bl	80036b4 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e10b      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a48:	4b4d      	ldr	r3, [pc, #308]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f0      	bne.n	8009a36 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a54:	4b4a      	ldr	r3, [pc, #296]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a58:	4b4a      	ldr	r3, [pc, #296]	; (8009b84 <HAL_RCC_OscConfig+0x6c8>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009a64:	0112      	lsls	r2, r2, #4
 8009a66:	430a      	orrs	r2, r1
 8009a68:	4945      	ldr	r1, [pc, #276]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a72:	3b01      	subs	r3, #1
 8009a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	025b      	lsls	r3, r3, #9
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a96:	3b01      	subs	r3, #1
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a9e:	4938      	ldr	r1, [pc, #224]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009aa4:	4b36      	ldr	r3, [pc, #216]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	4a35      	ldr	r2, [pc, #212]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009aaa:	f023 0301 	bic.w	r3, r3, #1
 8009aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ab0:	4b33      	ldr	r3, [pc, #204]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ab4:	4b34      	ldr	r3, [pc, #208]	; (8009b88 <HAL_RCC_OscConfig+0x6cc>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009abc:	00d2      	lsls	r2, r2, #3
 8009abe:	4930      	ldr	r1, [pc, #192]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ac4:	4b2e      	ldr	r3, [pc, #184]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f023 020c 	bic.w	r2, r3, #12
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	492b      	ldr	r1, [pc, #172]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ad6:	4b2a      	ldr	r3, [pc, #168]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	f023 0202 	bic.w	r2, r3, #2
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae2:	4927      	ldr	r1, [pc, #156]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ae8:	4b25      	ldr	r3, [pc, #148]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	4a24      	ldr	r2, [pc, #144]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af4:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a21      	ldr	r2, [pc, #132]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b00:	4b1f      	ldr	r3, [pc, #124]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	4a1e      	ldr	r2, [pc, #120]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009b0c:	4b1c      	ldr	r3, [pc, #112]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	4a1b      	ldr	r2, [pc, #108]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b18:	4b19      	ldr	r3, [pc, #100]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a18      	ldr	r2, [pc, #96]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b24:	f7f9 fdc6 	bl	80036b4 <HAL_GetTick>
 8009b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b2a:	e008      	b.n	8009b3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b2c:	f7f9 fdc2 	bl	80036b4 <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d901      	bls.n	8009b3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e090      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b3e:	4b10      	ldr	r3, [pc, #64]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0f0      	beq.n	8009b2c <HAL_RCC_OscConfig+0x670>
 8009b4a:	e088      	b.n	8009c5e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0b      	ldr	r2, [pc, #44]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b58:	f7f9 fdac 	bl	80036b4 <HAL_GetTick>
 8009b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b5e:	e008      	b.n	8009b72 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b60:	f7f9 fda8 	bl	80036b4 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e076      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b72:	4b03      	ldr	r3, [pc, #12]	; (8009b80 <HAL_RCC_OscConfig+0x6c4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1f0      	bne.n	8009b60 <HAL_RCC_OscConfig+0x6a4>
 8009b7e:	e06e      	b.n	8009c5e <HAL_RCC_OscConfig+0x7a2>
 8009b80:	58024400 	.word	0x58024400
 8009b84:	fffffc0c 	.word	0xfffffc0c
 8009b88:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b8c:	4b36      	ldr	r3, [pc, #216]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b92:	4b35      	ldr	r3, [pc, #212]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d031      	beq.n	8009c04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f003 0203 	and.w	r2, r3, #3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d12a      	bne.n	8009c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	091b      	lsrs	r3, r3, #4
 8009bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d122      	bne.n	8009c04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d11a      	bne.n	8009c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	0a5b      	lsrs	r3, r3, #9
 8009bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d111      	bne.n	8009c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	0c1b      	lsrs	r3, r3, #16
 8009be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d108      	bne.n	8009c04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	0e1b      	lsrs	r3, r3, #24
 8009bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d001      	beq.n	8009c08 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e02b      	b.n	8009c60 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009c08:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0c:	08db      	lsrs	r3, r3, #3
 8009c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d01f      	beq.n	8009c5e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c22:	4a11      	ldr	r2, [pc, #68]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c24:	f023 0301 	bic.w	r3, r3, #1
 8009c28:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c2a:	f7f9 fd43 	bl	80036b4 <HAL_GetTick>
 8009c2e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009c30:	bf00      	nop
 8009c32:	f7f9 fd3f 	bl	80036b4 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d0f9      	beq.n	8009c32 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <HAL_RCC_OscConfig+0x7b0>)
 8009c44:	4013      	ands	r3, r2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009c4a:	00d2      	lsls	r2, r2, #3
 8009c4c:	4906      	ldr	r1, [pc, #24]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a04      	ldr	r2, [pc, #16]	; (8009c68 <HAL_RCC_OscConfig+0x7ac>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3730      	adds	r7, #48	; 0x30
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	ffff0007 	.word	0xffff0007

08009c70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e19c      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c84:	4b8a      	ldr	r3, [pc, #552]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 030f 	and.w	r3, r3, #15
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d910      	bls.n	8009cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c92:	4b87      	ldr	r3, [pc, #540]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f023 020f 	bic.w	r2, r3, #15
 8009c9a:	4985      	ldr	r1, [pc, #532]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ca2:	4b83      	ldr	r3, [pc, #524]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d001      	beq.n	8009cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e184      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d010      	beq.n	8009ce2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	4b7b      	ldr	r3, [pc, #492]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d908      	bls.n	8009ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cd0:	4b78      	ldr	r3, [pc, #480]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	4975      	ldr	r1, [pc, #468]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0308 	and.w	r3, r3, #8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d010      	beq.n	8009d10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	4b70      	ldr	r3, [pc, #448]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d908      	bls.n	8009d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009cfe:	4b6d      	ldr	r3, [pc, #436]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	496a      	ldr	r1, [pc, #424]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d010      	beq.n	8009d3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699a      	ldr	r2, [r3, #24]
 8009d20:	4b64      	ldr	r3, [pc, #400]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d908      	bls.n	8009d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d2c:	4b61      	ldr	r3, [pc, #388]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	495e      	ldr	r1, [pc, #376]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d010      	beq.n	8009d6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	69da      	ldr	r2, [r3, #28]
 8009d4e:	4b59      	ldr	r3, [pc, #356]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d908      	bls.n	8009d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d5a:	4b56      	ldr	r3, [pc, #344]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	4953      	ldr	r1, [pc, #332]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d010      	beq.n	8009d9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	4b4d      	ldr	r3, [pc, #308]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	f003 030f 	and.w	r3, r3, #15
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d908      	bls.n	8009d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d88:	4b4a      	ldr	r3, [pc, #296]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	f023 020f 	bic.w	r2, r3, #15
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	4947      	ldr	r1, [pc, #284]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d055      	beq.n	8009e52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009da6:	4b43      	ldr	r3, [pc, #268]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	4940      	ldr	r1, [pc, #256]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d107      	bne.n	8009dd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dc0:	4b3c      	ldr	r3, [pc, #240]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d121      	bne.n	8009e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e0f6      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d107      	bne.n	8009de8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009dd8:	4b36      	ldr	r3, [pc, #216]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d115      	bne.n	8009e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e0ea      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d107      	bne.n	8009e00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009df0:	4b30      	ldr	r3, [pc, #192]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e0de      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e00:	4b2c      	ldr	r3, [pc, #176]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e0d6      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009e10:	4b28      	ldr	r3, [pc, #160]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f023 0207 	bic.w	r2, r3, #7
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	4925      	ldr	r1, [pc, #148]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e22:	f7f9 fc47 	bl	80036b4 <HAL_GetTick>
 8009e26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e28:	e00a      	b.n	8009e40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e2a:	f7f9 fc43 	bl	80036b4 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d901      	bls.n	8009e40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e0be      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d1eb      	bne.n	8009e2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d010      	beq.n	8009e80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	f003 030f 	and.w	r3, r3, #15
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d208      	bcs.n	8009e80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e6e:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	f023 020f 	bic.w	r2, r3, #15
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	490e      	ldr	r1, [pc, #56]	; (8009eb4 <HAL_RCC_ClockConfig+0x244>)
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 030f 	and.w	r3, r3, #15
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d214      	bcs.n	8009eb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e8e:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f023 020f 	bic.w	r2, r3, #15
 8009e96:	4906      	ldr	r1, [pc, #24]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e9e:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <HAL_RCC_ClockConfig+0x240>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 030f 	and.w	r3, r3, #15
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d005      	beq.n	8009eb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e086      	b.n	8009fbe <HAL_RCC_ClockConfig+0x34e>
 8009eb0:	52002000 	.word	0x52002000
 8009eb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d010      	beq.n	8009ee6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	4b3f      	ldr	r3, [pc, #252]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d208      	bcs.n	8009ee6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ed4:	4b3c      	ldr	r3, [pc, #240]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	4939      	ldr	r1, [pc, #228]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d010      	beq.n	8009f14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695a      	ldr	r2, [r3, #20]
 8009ef6:	4b34      	ldr	r3, [pc, #208]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d208      	bcs.n	8009f14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009f02:	4b31      	ldr	r3, [pc, #196]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	492e      	ldr	r1, [pc, #184]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0310 	and.w	r3, r3, #16
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d010      	beq.n	8009f42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	4b28      	ldr	r3, [pc, #160]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f26:	69db      	ldr	r3, [r3, #28]
 8009f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d208      	bcs.n	8009f42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009f30:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f32:	69db      	ldr	r3, [r3, #28]
 8009f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	4922      	ldr	r1, [pc, #136]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d010      	beq.n	8009f70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	69da      	ldr	r2, [r3, #28]
 8009f52:	4b1d      	ldr	r3, [pc, #116]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d208      	bcs.n	8009f70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f5e:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	4917      	ldr	r1, [pc, #92]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f70:	f000 f89e 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 8009f74:	4602      	mov	r2, r0
 8009f76:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	0a1b      	lsrs	r3, r3, #8
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	4912      	ldr	r1, [pc, #72]	; (8009fcc <HAL_RCC_ClockConfig+0x35c>)
 8009f82:	5ccb      	ldrb	r3, [r1, r3]
 8009f84:	f003 031f 	and.w	r3, r3, #31
 8009f88:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f8e:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <HAL_RCC_ClockConfig+0x358>)
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	f003 030f 	and.w	r3, r3, #15
 8009f96:	4a0d      	ldr	r2, [pc, #52]	; (8009fcc <HAL_RCC_ClockConfig+0x35c>)
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	f003 031f 	and.w	r3, r3, #31
 8009f9e:	693a      	ldr	r2, [r7, #16]
 8009fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa4:	4a0a      	ldr	r2, [pc, #40]	; (8009fd0 <HAL_RCC_ClockConfig+0x360>)
 8009fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009fa8:	4a0a      	ldr	r2, [pc, #40]	; (8009fd4 <HAL_RCC_ClockConfig+0x364>)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <HAL_RCC_ClockConfig+0x368>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7f9 fb34 	bl	8003620 <HAL_InitTick>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	58024400 	.word	0x58024400
 8009fcc:	0801e134 	.word	0x0801e134
 8009fd0:	24000004 	.word	0x24000004
 8009fd4:	24000000 	.word	0x24000000
 8009fd8:	24000008 	.word	0x24000008

08009fdc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08c      	sub	sp, #48	; 0x30
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d12a      	bne.n	800a044 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009fee:	4b2d      	ldr	r3, [pc, #180]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 8009ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ff4:	4a2b      	ldr	r2, [pc, #172]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ffe:	4b29      	ldr	r3, [pc, #164]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a012:	2302      	movs	r3, #2
 800a014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a016:	2303      	movs	r3, #3
 800a018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a01a:	2300      	movs	r3, #0
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a01e:	2300      	movs	r3, #0
 800a020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a022:	f107 031c 	add.w	r3, r7, #28
 800a026:	4619      	mov	r1, r3
 800a028:	481f      	ldr	r0, [pc, #124]	; (800a0a8 <HAL_RCC_MCOConfig+0xcc>)
 800a02a:	f7fd fc41 	bl	80078b0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a02e:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	430b      	orrs	r3, r1
 800a03c:	4919      	ldr	r1, [pc, #100]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a042:	e02a      	b.n	800a09a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a044:	4b17      	ldr	r3, [pc, #92]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a04a:	4a16      	ldr	r2, [pc, #88]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a04c:	f043 0304 	orr.w	r3, r3, #4
 800a050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a054:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a068:	2302      	movs	r3, #2
 800a06a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a06c:	2303      	movs	r3, #3
 800a06e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a070:	2300      	movs	r3, #0
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a074:	2300      	movs	r3, #0
 800a076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a078:	f107 031c 	add.w	r3, r7, #28
 800a07c:	4619      	mov	r1, r3
 800a07e:	480b      	ldr	r0, [pc, #44]	; (800a0ac <HAL_RCC_MCOConfig+0xd0>)
 800a080:	f7fd fc16 	bl	80078b0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a084:	4b07      	ldr	r3, [pc, #28]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	01d9      	lsls	r1, r3, #7
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	430b      	orrs	r3, r1
 800a094:	4903      	ldr	r1, [pc, #12]	; (800a0a4 <HAL_RCC_MCOConfig+0xc8>)
 800a096:	4313      	orrs	r3, r2
 800a098:	610b      	str	r3, [r1, #16]
}
 800a09a:	bf00      	nop
 800a09c:	3730      	adds	r7, #48	; 0x30
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	58020000 	.word	0x58020000
 800a0ac:	58020800 	.word	0x58020800

0800a0b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	; 0x24
 800a0b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0b6:	4bb3      	ldr	r3, [pc, #716]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0be:	2b18      	cmp	r3, #24
 800a0c0:	f200 8155 	bhi.w	800a36e <HAL_RCC_GetSysClockFreq+0x2be>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a131 	.word	0x0800a131
 800a0d0:	0800a36f 	.word	0x0800a36f
 800a0d4:	0800a36f 	.word	0x0800a36f
 800a0d8:	0800a36f 	.word	0x0800a36f
 800a0dc:	0800a36f 	.word	0x0800a36f
 800a0e0:	0800a36f 	.word	0x0800a36f
 800a0e4:	0800a36f 	.word	0x0800a36f
 800a0e8:	0800a36f 	.word	0x0800a36f
 800a0ec:	0800a157 	.word	0x0800a157
 800a0f0:	0800a36f 	.word	0x0800a36f
 800a0f4:	0800a36f 	.word	0x0800a36f
 800a0f8:	0800a36f 	.word	0x0800a36f
 800a0fc:	0800a36f 	.word	0x0800a36f
 800a100:	0800a36f 	.word	0x0800a36f
 800a104:	0800a36f 	.word	0x0800a36f
 800a108:	0800a36f 	.word	0x0800a36f
 800a10c:	0800a15d 	.word	0x0800a15d
 800a110:	0800a36f 	.word	0x0800a36f
 800a114:	0800a36f 	.word	0x0800a36f
 800a118:	0800a36f 	.word	0x0800a36f
 800a11c:	0800a36f 	.word	0x0800a36f
 800a120:	0800a36f 	.word	0x0800a36f
 800a124:	0800a36f 	.word	0x0800a36f
 800a128:	0800a36f 	.word	0x0800a36f
 800a12c:	0800a163 	.word	0x0800a163
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a130:	4b94      	ldr	r3, [pc, #592]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0320 	and.w	r3, r3, #32
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d009      	beq.n	800a150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a13c:	4b91      	ldr	r3, [pc, #580]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	08db      	lsrs	r3, r3, #3
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	4a90      	ldr	r2, [pc, #576]	; (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a148:	fa22 f303 	lsr.w	r3, r2, r3
 800a14c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a14e:	e111      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a150:	4b8d      	ldr	r3, [pc, #564]	; (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a152:	61bb      	str	r3, [r7, #24]
      break;
 800a154:	e10e      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a156:	4b8d      	ldr	r3, [pc, #564]	; (800a38c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a158:	61bb      	str	r3, [r7, #24]
      break;
 800a15a:	e10b      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a15c:	4b8c      	ldr	r3, [pc, #560]	; (800a390 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a15e:	61bb      	str	r3, [r7, #24]
      break;
 800a160:	e108      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a162:	4b88      	ldr	r3, [pc, #544]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a16c:	4b85      	ldr	r3, [pc, #532]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a170:	091b      	lsrs	r3, r3, #4
 800a172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a176:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a178:	4b82      	ldr	r3, [pc, #520]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a182:	4b80      	ldr	r3, [pc, #512]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a186:	08db      	lsrs	r3, r3, #3
 800a188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80e1 	beq.w	800a368 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	f000 8083 	beq.w	800a2b4 <HAL_RCC_GetSysClockFreq+0x204>
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	f200 80a1 	bhi.w	800a2f8 <HAL_RCC_GetSysClockFreq+0x248>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d056      	beq.n	800a270 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a1c2:	e099      	b.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1c4:	4b6f      	ldr	r3, [pc, #444]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0320 	and.w	r3, r3, #32
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d02d      	beq.n	800a22c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d0:	4b6c      	ldr	r3, [pc, #432]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	08db      	lsrs	r3, r3, #3
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	4a6b      	ldr	r2, [pc, #428]	; (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	ee07 3a90 	vmov	s15, r3
 800a1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1fa:	4b62      	ldr	r3, [pc, #392]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a20e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a226:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a22a:	e087      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a236:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a398 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23e:	4b51      	ldr	r3, [pc, #324]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a252:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a26e:	e065      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a39c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a282:	4b40      	ldr	r3, [pc, #256]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a292:	ed97 6a02 	vldr	s12, [r7, #8]
 800a296:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2b2:	e043      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a3a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c6:	4b2f      	ldr	r3, [pc, #188]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2f6:	e021      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a39c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30a:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a31e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a33a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a33c:	4b11      	ldr	r3, [pc, #68]	; (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	0a5b      	lsrs	r3, r3, #9
 800a342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a346:	3301      	adds	r3, #1
 800a348:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a354:	edd7 6a07 	vldr	s13, [r7, #28]
 800a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a360:	ee17 3a90 	vmov	r3, s15
 800a364:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a366:	e005      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	61bb      	str	r3, [r7, #24]
      break;
 800a36c:	e002      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a36e:	4b07      	ldr	r3, [pc, #28]	; (800a38c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a370:	61bb      	str	r3, [r7, #24]
      break;
 800a372:	bf00      	nop
  }

  return sysclockfreq;
 800a374:	69bb      	ldr	r3, [r7, #24]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3724      	adds	r7, #36	; 0x24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	58024400 	.word	0x58024400
 800a388:	03d09000 	.word	0x03d09000
 800a38c:	003d0900 	.word	0x003d0900
 800a390:	02faf080 	.word	0x02faf080
 800a394:	46000000 	.word	0x46000000
 800a398:	4c742400 	.word	0x4c742400
 800a39c:	4a742400 	.word	0x4a742400
 800a3a0:	4c3ebc20 	.word	0x4c3ebc20

0800a3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3aa:	f7ff fe81 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	0a1b      	lsrs	r3, r3, #8
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	490f      	ldr	r1, [pc, #60]	; (800a3f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3bc:	5ccb      	ldrb	r3, [r1, r3]
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	4a09      	ldr	r2, [pc, #36]	; (800a3f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3d2:	5cd3      	ldrb	r3, [r2, r3]
 800a3d4:	f003 031f 	and.w	r3, r3, #31
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	fa22 f303 	lsr.w	r3, r2, r3
 800a3de:	4a07      	ldr	r2, [pc, #28]	; (800a3fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a3e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3e2:	4a07      	ldr	r2, [pc, #28]	; (800a400 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a3e8:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	0801e134 	.word	0x0801e134
 800a3fc:	24000004 	.word	0x24000004
 800a400:	24000000 	.word	0x24000000

0800a404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a408:	f7ff ffcc 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800a40c:	4602      	mov	r2, r0
 800a40e:	4b06      	ldr	r3, [pc, #24]	; (800a428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	091b      	lsrs	r3, r3, #4
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	4904      	ldr	r1, [pc, #16]	; (800a42c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a41a:	5ccb      	ldrb	r3, [r1, r3]
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a424:	4618      	mov	r0, r3
 800a426:	bd80      	pop	{r7, pc}
 800a428:	58024400 	.word	0x58024400
 800a42c:	0801e134 	.word	0x0801e134

0800a430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a434:	f7ff ffb6 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	4904      	ldr	r1, [pc, #16]	; (800a458 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a446:	5ccb      	ldrb	r3, [r1, r3]
 800a448:	f003 031f 	and.w	r3, r3, #31
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a450:	4618      	mov	r0, r3
 800a452:	bd80      	pop	{r7, pc}
 800a454:	58024400 	.word	0x58024400
 800a458:	0801e134 	.word	0x0801e134

0800a45c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a45c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a460:	b0c6      	sub	sp, #280	; 0x118
 800a462:	af00      	add	r7, sp, #0
 800a464:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a480:	2500      	movs	r5, #0
 800a482:	ea54 0305 	orrs.w	r3, r4, r5
 800a486:	d049      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a48e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a492:	d02f      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a494:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a498:	d828      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a49a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a49e:	d01a      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4a4:	d822      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ae:	d007      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a4b0:	e01c      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4b2:	4bab      	ldr	r3, [pc, #684]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	4aaa      	ldr	r2, [pc, #680]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4be:	e01a      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f002 fa49 	bl	800c960 <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4d4:	e00f      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4da:	3328      	adds	r3, #40	; 0x28
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f002 faf0 	bl	800cac4 <RCCEx_PLL3_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4ea:	e004      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4f2:	e000      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4fe:	4b98      	ldr	r3, [pc, #608]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a502:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50c:	4a94      	ldr	r2, [pc, #592]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a50e:	430b      	orrs	r3, r1
 800a510:	6513      	str	r3, [r2, #80]	; 0x50
 800a512:	e003      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a528:	f04f 0900 	mov.w	r9, #0
 800a52c:	ea58 0309 	orrs.w	r3, r8, r9
 800a530:	d047      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d82a      	bhi.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a559 	.word	0x0800a559
 800a548:	0800a567 	.word	0x0800a567
 800a54c:	0800a57d 	.word	0x0800a57d
 800a550:	0800a59b 	.word	0x0800a59b
 800a554:	0800a59b 	.word	0x0800a59b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a558:	4b81      	ldr	r3, [pc, #516]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	4a80      	ldr	r2, [pc, #512]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a564:	e01a      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56a:	3308      	adds	r3, #8
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f002 f9f6 	bl	800c960 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a57a:	e00f      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a580:	3328      	adds	r3, #40	; 0x28
 800a582:	2100      	movs	r1, #0
 800a584:	4618      	mov	r0, r3
 800a586:	f002 fa9d 	bl	800cac4 <RCCEx_PLL3_Config>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a590:	e004      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a598:	e000      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a59c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5a4:	4b6e      	ldr	r3, [pc, #440]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a8:	f023 0107 	bic.w	r1, r3, #7
 800a5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b2:	4a6b      	ldr	r2, [pc, #428]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	6513      	str	r3, [r2, #80]	; 0x50
 800a5b8:	e003      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a5ce:	f04f 0b00 	mov.w	fp, #0
 800a5d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a5d6:	d05b      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5e4:	d03b      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a5e6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a5ea:	d834      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5f0:	d037      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a5f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a5f6:	d82e      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a5fc:	d033      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a5fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a602:	d828      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a608:	d01a      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a60a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a60e:	d822      	bhi.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a618:	d007      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a61a:	e01c      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a61c:	4b50      	ldr	r3, [pc, #320]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a4f      	ldr	r2, [pc, #316]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a628:	e01e      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	3308      	adds	r3, #8
 800a630:	2100      	movs	r1, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f002 f994 	bl	800c960 <RCCEx_PLL2_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a63e:	e013      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a644:	3328      	adds	r3, #40	; 0x28
 800a646:	2100      	movs	r1, #0
 800a648:	4618      	mov	r0, r3
 800a64a:	f002 fa3b 	bl	800cac4 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a654:	e008      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a65c:	e004      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a65e:	bf00      	nop
 800a660:	e002      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a662:	bf00      	nop
 800a664:	e000      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10b      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a670:	4b3b      	ldr	r3, [pc, #236]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a674:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a680:	4a37      	ldr	r2, [pc, #220]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a682:	430b      	orrs	r3, r1
 800a684:	6593      	str	r3, [r2, #88]	; 0x58
 800a686:	e003      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a68c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a69c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a6a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	d05d      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a6bc:	d03b      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a6be:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a6c2:	d834      	bhi.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6c8:	d037      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a6ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a6ce:	d82e      	bhi.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6d4:	d033      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a6d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a6da:	d828      	bhi.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6e0:	d01a      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a6e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6e6:	d822      	bhi.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a6ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6f0:	d007      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a6f2:	e01c      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f8:	4a19      	ldr	r2, [pc, #100]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a6fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a700:	e01e      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a706:	3308      	adds	r3, #8
 800a708:	2100      	movs	r1, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f002 f928 	bl	800c960 <RCCEx_PLL2_Config>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a716:	e013      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a71c:	3328      	adds	r3, #40	; 0x28
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f002 f9cf 	bl	800cac4 <RCCEx_PLL3_Config>
 800a726:	4603      	mov	r3, r0
 800a728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a72c:	e008      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a734:	e004      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a736:	bf00      	nop
 800a738:	e002      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a73a:	bf00      	nop
 800a73c:	e000      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a73e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10d      	bne.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a74a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a754:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a758:	4a01      	ldr	r2, [pc, #4]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a75a:	430b      	orrs	r3, r1
 800a75c:	6593      	str	r3, [r2, #88]	; 0x58
 800a75e:	e005      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a764:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a768:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a778:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a782:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a786:	460b      	mov	r3, r1
 800a788:	4313      	orrs	r3, r2
 800a78a:	d03a      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a792:	2b30      	cmp	r3, #48	; 0x30
 800a794:	d01f      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a796:	2b30      	cmp	r3, #48	; 0x30
 800a798:	d819      	bhi.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a79a:	2b20      	cmp	r3, #32
 800a79c:	d00c      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d815      	bhi.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d019      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a7a6:	2b10      	cmp	r3, #16
 800a7a8:	d111      	bne.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7aa:	4baa      	ldr	r3, [pc, #680]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ae:	4aa9      	ldr	r2, [pc, #676]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7b6:	e011      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7bc:	3308      	adds	r3, #8
 800a7be:	2102      	movs	r1, #2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f002 f8cd 	bl	800c960 <RCCEx_PLL2_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7cc:	e006      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7d4:	e002      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a7d6:	bf00      	nop
 800a7d8:	e000      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a7da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a7e4:	4b9b      	ldr	r3, [pc, #620]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f2:	4a98      	ldr	r2, [pc, #608]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7f8:	e003      	b.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a7fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a80e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a812:	2300      	movs	r3, #0
 800a814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a81c:	460b      	mov	r3, r1
 800a81e:	4313      	orrs	r3, r2
 800a820:	d051      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a82c:	d035      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a82e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a832:	d82e      	bhi.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a838:	d031      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a83a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a83e:	d828      	bhi.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a844:	d01a      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84a:	d822      	bhi.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d007      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a856:	e01c      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a858:	4b7e      	ldr	r3, [pc, #504]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	4a7d      	ldr	r2, [pc, #500]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a864:	e01c      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86a:	3308      	adds	r3, #8
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f002 f876 	bl	800c960 <RCCEx_PLL2_Config>
 800a874:	4603      	mov	r3, r0
 800a876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a87a:	e011      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	3328      	adds	r3, #40	; 0x28
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f002 f91d 	bl	800cac4 <RCCEx_PLL3_Config>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a890:	e006      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a898:	e002      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a89a:	bf00      	nop
 800a89c:	e000      	b.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a89e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8a8:	4b6a      	ldr	r3, [pc, #424]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b6:	4a67      	ldr	r2, [pc, #412]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	6513      	str	r3, [r2, #80]	; 0x50
 800a8bc:	e003      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a8d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	d053      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8f0:	d033      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a8f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8f6:	d82c      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8fc:	d02f      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a8fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a902:	d826      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a908:	d02b      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a90a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a90e:	d820      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a914:	d012      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a91a:	d81a      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d022      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a924:	d115      	bne.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92a:	3308      	adds	r3, #8
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f002 f816 	bl	800c960 <RCCEx_PLL2_Config>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a93a:	e015      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a940:	3328      	adds	r3, #40	; 0x28
 800a942:	2101      	movs	r1, #1
 800a944:	4618      	mov	r0, r3
 800a946:	f002 f8bd 	bl	800cac4 <RCCEx_PLL3_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a950:	e00a      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a958:	e006      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a95a:	bf00      	nop
 800a95c:	e004      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a95e:	bf00      	nop
 800a960:	e002      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a966:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a970:	4b38      	ldr	r3, [pc, #224]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a974:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a97e:	4a35      	ldr	r2, [pc, #212]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a980:	430b      	orrs	r3, r1
 800a982:	6513      	str	r3, [r2, #80]	; 0x50
 800a984:	e003      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a98a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a99a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a9a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	d058      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ba:	d033      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a9bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9c0:	d82c      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c6:	d02f      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9cc:	d826      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9d2:	d02b      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a9d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9d8:	d820      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9de:	d012      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9e4:	d81a      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d022      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a9ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9ee:	d115      	bne.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 ffb1 	bl	800c960 <RCCEx_PLL2_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa04:	e015      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	3328      	adds	r3, #40	; 0x28
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 f858 	bl	800cac4 <RCCEx_PLL3_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa1a:	e00a      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa22:	e006      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa24:	bf00      	nop
 800aa26:	e004      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa28:	bf00      	nop
 800aa2a:	e002      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa2c:	bf00      	nop
 800aa2e:	e000      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10e      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa3a:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa4a:	4a02      	ldr	r2, [pc, #8]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6593      	str	r3, [r2, #88]	; 0x58
 800aa50:	e006      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aa52:	bf00      	nop
 800aa54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800aa6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aa76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d037      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa8a:	d00e      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aa8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa90:	d816      	bhi.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d018      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aa96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa9a:	d111      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9c:	4bc4      	ldr	r3, [pc, #784]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	4ac3      	ldr	r2, [pc, #780]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aaa8:	e00f      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaae:	3308      	adds	r3, #8
 800aab0:	2101      	movs	r1, #1
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 ff54 	bl	800c960 <RCCEx_PLL2_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aabe:	e004      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aac6:	e000      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aad2:	4bb7      	ldr	r3, [pc, #732]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	4ab3      	ldr	r2, [pc, #716]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae2:	430b      	orrs	r3, r1
 800aae4:	6513      	str	r3, [r2, #80]	; 0x50
 800aae6:	e003      	b.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aaec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aafc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab00:	2300      	movs	r3, #0
 800ab02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	d039      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d81c      	bhi.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab1a:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800ab5d 	.word	0x0800ab5d
 800ab24:	0800ab31 	.word	0x0800ab31
 800ab28:	0800ab3f 	.word	0x0800ab3f
 800ab2c:	0800ab5d 	.word	0x0800ab5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab30:	4b9f      	ldr	r3, [pc, #636]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	4a9e      	ldr	r2, [pc, #632]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab3c:	e00f      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab42:	3308      	adds	r3, #8
 800ab44:	2102      	movs	r1, #2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 ff0a 	bl	800c960 <RCCEx_PLL2_Config>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab52:	e004      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab5a:	e000      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ab5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10a      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab66:	4b92      	ldr	r3, [pc, #584]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6a:	f023 0103 	bic.w	r1, r3, #3
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab74:	4a8e      	ldr	r2, [pc, #568]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab76:	430b      	orrs	r3, r1
 800ab78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab7a:	e003      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ab90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4313      	orrs	r3, r2
 800aba2:	f000 8099 	beq.w	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aba6:	4b83      	ldr	r3, [pc, #524]	; (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a82      	ldr	r2, [pc, #520]	; (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800abb2:	f7f8 fd7f 	bl	80036b4 <HAL_GetTick>
 800abb6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abba:	e00b      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abbc:	f7f8 fd7a 	bl	80036b4 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b64      	cmp	r3, #100	; 0x64
 800abca:	d903      	bls.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abd2:	e005      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abd4:	4b77      	ldr	r3, [pc, #476]	; (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0ed      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800abe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d173      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800abe8:	4b71      	ldr	r3, [pc, #452]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800abf4:	4053      	eors	r3, r2
 800abf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d015      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abfe:	4b6c      	ldr	r3, [pc, #432]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac0a:	4b69      	ldr	r3, [pc, #420]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0e:	4a68      	ldr	r2, [pc, #416]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac14:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac16:	4b66      	ldr	r3, [pc, #408]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1a:	4a65      	ldr	r2, [pc, #404]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac20:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac22:	4a63      	ldr	r2, [pc, #396]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ac28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac36:	d118      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac38:	f7f8 fd3c 	bl	80036b4 <HAL_GetTick>
 800ac3c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac40:	e00d      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac42:	f7f8 fd37 	bl	80036b4 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ac4c:	1ad2      	subs	r2, r2, r3
 800ac4e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d903      	bls.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800ac5c:	e005      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac5e:	4b54      	ldr	r3, [pc, #336]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0eb      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ac6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d129      	bne.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac82:	d10e      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ac84:	4b4a      	ldr	r3, [pc, #296]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800ac8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ac94:	091a      	lsrs	r2, r3, #4
 800ac96:	4b48      	ldr	r3, [pc, #288]	; (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ac98:	4013      	ands	r3, r2
 800ac9a:	4a45      	ldr	r2, [pc, #276]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	6113      	str	r3, [r2, #16]
 800aca0:	e005      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aca2:	4b43      	ldr	r3, [pc, #268]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	4a42      	ldr	r2, [pc, #264]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800acac:	6113      	str	r3, [r2, #16]
 800acae:	4b40      	ldr	r3, [pc, #256]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acbe:	4a3c      	ldr	r2, [pc, #240]	; (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acc0:	430b      	orrs	r3, r1
 800acc2:	6713      	str	r3, [r2, #112]	; 0x70
 800acc4:	e008      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800acc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800acce:	e003      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800acd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f002 0301 	and.w	r3, r2, #1
 800ace4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800acee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	f000 808f 	beq.w	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad00:	2b28      	cmp	r3, #40	; 0x28
 800ad02:	d871      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad04:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800adf1 	.word	0x0800adf1
 800ad10:	0800ade9 	.word	0x0800ade9
 800ad14:	0800ade9 	.word	0x0800ade9
 800ad18:	0800ade9 	.word	0x0800ade9
 800ad1c:	0800ade9 	.word	0x0800ade9
 800ad20:	0800ade9 	.word	0x0800ade9
 800ad24:	0800ade9 	.word	0x0800ade9
 800ad28:	0800ade9 	.word	0x0800ade9
 800ad2c:	0800adbd 	.word	0x0800adbd
 800ad30:	0800ade9 	.word	0x0800ade9
 800ad34:	0800ade9 	.word	0x0800ade9
 800ad38:	0800ade9 	.word	0x0800ade9
 800ad3c:	0800ade9 	.word	0x0800ade9
 800ad40:	0800ade9 	.word	0x0800ade9
 800ad44:	0800ade9 	.word	0x0800ade9
 800ad48:	0800ade9 	.word	0x0800ade9
 800ad4c:	0800add3 	.word	0x0800add3
 800ad50:	0800ade9 	.word	0x0800ade9
 800ad54:	0800ade9 	.word	0x0800ade9
 800ad58:	0800ade9 	.word	0x0800ade9
 800ad5c:	0800ade9 	.word	0x0800ade9
 800ad60:	0800ade9 	.word	0x0800ade9
 800ad64:	0800ade9 	.word	0x0800ade9
 800ad68:	0800ade9 	.word	0x0800ade9
 800ad6c:	0800adf1 	.word	0x0800adf1
 800ad70:	0800ade9 	.word	0x0800ade9
 800ad74:	0800ade9 	.word	0x0800ade9
 800ad78:	0800ade9 	.word	0x0800ade9
 800ad7c:	0800ade9 	.word	0x0800ade9
 800ad80:	0800ade9 	.word	0x0800ade9
 800ad84:	0800ade9 	.word	0x0800ade9
 800ad88:	0800ade9 	.word	0x0800ade9
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800ade9 	.word	0x0800ade9
 800ad98:	0800ade9 	.word	0x0800ade9
 800ad9c:	0800ade9 	.word	0x0800ade9
 800ada0:	0800ade9 	.word	0x0800ade9
 800ada4:	0800ade9 	.word	0x0800ade9
 800ada8:	0800ade9 	.word	0x0800ade9
 800adac:	0800adf1 	.word	0x0800adf1
 800adb0:	58024400 	.word	0x58024400
 800adb4:	58024800 	.word	0x58024800
 800adb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	3308      	adds	r3, #8
 800adc2:	2101      	movs	r1, #1
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 fdcb 	bl	800c960 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800add0:	e00f      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	3328      	adds	r3, #40	; 0x28
 800add8:	2101      	movs	r1, #1
 800adda:	4618      	mov	r0, r3
 800addc:	f001 fe72 	bl	800cac4 <RCCEx_PLL3_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ade6:	e004      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adee:	e000      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800adf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800adfa:	4bbf      	ldr	r3, [pc, #764]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800adfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae08:	4abb      	ldr	r2, [pc, #748]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6553      	str	r3, [r2, #84]	; 0x54
 800ae0e:	e003      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f002 0302 	and.w	r3, r2, #2
 800ae24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d041      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d824      	bhi.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae95 	.word	0x0800ae95
 800ae4c:	0800ae61 	.word	0x0800ae61
 800ae50:	0800ae77 	.word	0x0800ae77
 800ae54:	0800ae95 	.word	0x0800ae95
 800ae58:	0800ae95 	.word	0x0800ae95
 800ae5c:	0800ae95 	.word	0x0800ae95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	3308      	adds	r3, #8
 800ae66:	2101      	movs	r1, #1
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f001 fd79 	bl	800c960 <RCCEx_PLL2_Config>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae74:	e00f      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	3328      	adds	r3, #40	; 0x28
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fe20 	bl	800cac4 <RCCEx_PLL3_Config>
 800ae84:	4603      	mov	r3, r0
 800ae86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae8a:	e004      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae92:	e000      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ae94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ae9e:	4b96      	ldr	r3, [pc, #600]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea2:	f023 0107 	bic.w	r1, r3, #7
 800aea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeac:	4a92      	ldr	r2, [pc, #584]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	6553      	str	r3, [r2, #84]	; 0x54
 800aeb2:	e003      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f002 0304 	and.w	r3, r2, #4
 800aec8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aecc:	2300      	movs	r3, #0
 800aece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aed2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aed6:	460b      	mov	r3, r1
 800aed8:	4313      	orrs	r3, r2
 800aeda:	d044      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aee4:	2b05      	cmp	r3, #5
 800aee6:	d825      	bhi.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af3d 	.word	0x0800af3d
 800aef4:	0800af09 	.word	0x0800af09
 800aef8:	0800af1f 	.word	0x0800af1f
 800aefc:	0800af3d 	.word	0x0800af3d
 800af00:	0800af3d 	.word	0x0800af3d
 800af04:	0800af3d 	.word	0x0800af3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0c:	3308      	adds	r3, #8
 800af0e:	2101      	movs	r1, #1
 800af10:	4618      	mov	r0, r3
 800af12:	f001 fd25 	bl	800c960 <RCCEx_PLL2_Config>
 800af16:	4603      	mov	r3, r0
 800af18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af1c:	e00f      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af22:	3328      	adds	r3, #40	; 0x28
 800af24:	2101      	movs	r1, #1
 800af26:	4618      	mov	r0, r3
 800af28:	f001 fdcc 	bl	800cac4 <RCCEx_PLL3_Config>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af32:	e004      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af3a:	e000      	b.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800af3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10b      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af46:	4b6c      	ldr	r3, [pc, #432]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4a:	f023 0107 	bic.w	r1, r3, #7
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af56:	4a68      	ldr	r2, [pc, #416]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800af58:	430b      	orrs	r3, r1
 800af5a:	6593      	str	r3, [r2, #88]	; 0x58
 800af5c:	e003      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f002 0320 	and.w	r3, r2, #32
 800af72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af76:	2300      	movs	r3, #0
 800af78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800af80:	460b      	mov	r3, r1
 800af82:	4313      	orrs	r3, r2
 800af84:	d055      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af92:	d033      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800af94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af98:	d82c      	bhi.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800af9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9e:	d02f      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800afa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa4:	d826      	bhi.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800afa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afaa:	d02b      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800afac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afb0:	d820      	bhi.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800afb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb6:	d012      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800afb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afbc:	d81a      	bhi.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d022      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800afc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afc6:	d115      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	3308      	adds	r3, #8
 800afce:	2100      	movs	r1, #0
 800afd0:	4618      	mov	r0, r3
 800afd2:	f001 fcc5 	bl	800c960 <RCCEx_PLL2_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800afdc:	e015      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe2:	3328      	adds	r3, #40	; 0x28
 800afe4:	2102      	movs	r1, #2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f001 fd6c 	bl	800cac4 <RCCEx_PLL3_Config>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aff2:	e00a      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800affa:	e006      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800affc:	bf00      	nop
 800affe:	e004      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b000:	bf00      	nop
 800b002:	e002      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b004:	bf00      	nop
 800b006:	e000      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b012:	4b39      	ldr	r3, [pc, #228]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b016:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b022:	4a35      	ldr	r2, [pc, #212]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b024:	430b      	orrs	r3, r1
 800b026:	6553      	str	r3, [r2, #84]	; 0x54
 800b028:	e003      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b02e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b03e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b042:	2300      	movs	r3, #0
 800b044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b048:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b04c:	460b      	mov	r3, r1
 800b04e:	4313      	orrs	r3, r2
 800b050:	d058      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b05a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b05e:	d033      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b060:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b064:	d82c      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b06a:	d02f      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b070:	d826      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b072:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b076:	d02b      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b07c:	d820      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b07e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b082:	d012      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b088:	d81a      	bhi.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d022      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b092:	d115      	bne.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b098:	3308      	adds	r3, #8
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f001 fc5f 	bl	800c960 <RCCEx_PLL2_Config>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0a8:	e015      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ae:	3328      	adds	r3, #40	; 0x28
 800b0b0:	2102      	movs	r1, #2
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f001 fd06 	bl	800cac4 <RCCEx_PLL3_Config>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0be:	e00a      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0c6:	e006      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b0c8:	bf00      	nop
 800b0ca:	e004      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b0cc:	bf00      	nop
 800b0ce:	e002      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b0d0:	bf00      	nop
 800b0d2:	e000      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10e      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ee:	4a02      	ldr	r2, [pc, #8]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b0f4:	e006      	b.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b100:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b114:	2300      	movs	r3, #0
 800b116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b11a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b11e:	460b      	mov	r3, r1
 800b120:	4313      	orrs	r3, r2
 800b122:	d055      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b12c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b130:	d033      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b132:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b136:	d82c      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b13c:	d02f      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b142:	d826      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b144:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b148:	d02b      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b14a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b14e:	d820      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b154:	d012      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b15a:	d81a      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d022      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b164:	d115      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16a:	3308      	adds	r3, #8
 800b16c:	2100      	movs	r1, #0
 800b16e:	4618      	mov	r0, r3
 800b170:	f001 fbf6 	bl	800c960 <RCCEx_PLL2_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b17a:	e015      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b180:	3328      	adds	r3, #40	; 0x28
 800b182:	2102      	movs	r1, #2
 800b184:	4618      	mov	r0, r3
 800b186:	f001 fc9d 	bl	800cac4 <RCCEx_PLL3_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b190:	e00a      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b198:	e006      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b19a:	bf00      	nop
 800b19c:	e004      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b1a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10b      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1b0:	4ba0      	ldr	r3, [pc, #640]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1c0:	4a9c      	ldr	r2, [pc, #624]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1c2:	430b      	orrs	r3, r1
 800b1c4:	6593      	str	r3, [r2, #88]	; 0x58
 800b1c6:	e003      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f002 0308 	and.w	r3, r2, #8
 800b1dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b1e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	d01e      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1fc:	d10c      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b202:	3328      	adds	r3, #40	; 0x28
 800b204:	2102      	movs	r1, #2
 800b206:	4618      	mov	r0, r3
 800b208:	f001 fc5c 	bl	800cac4 <RCCEx_PLL3_Config>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b218:	4b86      	ldr	r3, [pc, #536]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b228:	4a82      	ldr	r2, [pc, #520]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b22a:	430b      	orrs	r3, r1
 800b22c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f002 0310 	and.w	r3, r2, #16
 800b23a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b23e:	2300      	movs	r3, #0
 800b240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b244:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b248:	460b      	mov	r3, r1
 800b24a:	4313      	orrs	r3, r2
 800b24c:	d01e      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b25a:	d10c      	bne.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b260:	3328      	adds	r3, #40	; 0x28
 800b262:	2102      	movs	r1, #2
 800b264:	4618      	mov	r0, r3
 800b266:	f001 fc2d 	bl	800cac4 <RCCEx_PLL3_Config>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b276:	4b6f      	ldr	r3, [pc, #444]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b286:	4a6b      	ldr	r2, [pc, #428]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b288:	430b      	orrs	r3, r1
 800b28a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b298:	67bb      	str	r3, [r7, #120]	; 0x78
 800b29a:	2300      	movs	r3, #0
 800b29c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b29e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	d03e      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2b4:	d022      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ba:	d81b      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c4:	d00b      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b2c6:	e015      	b.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 fb45 	bl	800c960 <RCCEx_PLL2_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2dc:	e00f      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e2:	3328      	adds	r3, #40	; 0x28
 800b2e4:	2102      	movs	r1, #2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f001 fbec 	bl	800cac4 <RCCEx_PLL3_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2f2:	e004      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2fa:	e000      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10b      	bne.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b306:	4b4b      	ldr	r3, [pc, #300]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b316:	4a47      	ldr	r2, [pc, #284]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b318:	430b      	orrs	r3, r1
 800b31a:	6593      	str	r3, [r2, #88]	; 0x58
 800b31c:	e003      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b322:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b332:	673b      	str	r3, [r7, #112]	; 0x70
 800b334:	2300      	movs	r3, #0
 800b336:	677b      	str	r3, [r7, #116]	; 0x74
 800b338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b33c:	460b      	mov	r3, r1
 800b33e:	4313      	orrs	r3, r2
 800b340:	d03b      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b34a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b34e:	d01f      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b354:	d818      	bhi.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b35a:	d003      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b35c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b360:	d007      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b362:	e011      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b364:	4b33      	ldr	r3, [pc, #204]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a32      	ldr	r2, [pc, #200]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b36a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b370:	e00f      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b376:	3328      	adds	r3, #40	; 0x28
 800b378:	2101      	movs	r1, #1
 800b37a:	4618      	mov	r0, r3
 800b37c:	f001 fba2 	bl	800cac4 <RCCEx_PLL3_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b386:	e004      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b38e:	e000      	b.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b392:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b39a:	4b26      	ldr	r3, [pc, #152]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3aa:	4a22      	ldr	r2, [pc, #136]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ac:	430b      	orrs	r3, r1
 800b3ae:	6553      	str	r3, [r2, #84]	; 0x54
 800b3b0:	e003      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b3c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	d034      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e4:	d007      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b3e6:	e011      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e8:	4b12      	ldr	r3, [pc, #72]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	4a11      	ldr	r2, [pc, #68]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3f4:	e00e      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fa:	3308      	adds	r3, #8
 800b3fc:	2102      	movs	r1, #2
 800b3fe:	4618      	mov	r0, r3
 800b400:	f001 faae 	bl	800c960 <RCCEx_PLL2_Config>
 800b404:	4603      	mov	r3, r0
 800b406:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b40a:	e003      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b412:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10d      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b41e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b420:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42a:	4a02      	ldr	r2, [pc, #8]	; (800b434 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b42c:	430b      	orrs	r3, r1
 800b42e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b430:	e006      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b432:	bf00      	nop
 800b434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b438:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b43c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b44c:	663b      	str	r3, [r7, #96]	; 0x60
 800b44e:	2300      	movs	r3, #0
 800b450:	667b      	str	r3, [r7, #100]	; 0x64
 800b452:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b456:	460b      	mov	r3, r1
 800b458:	4313      	orrs	r3, r2
 800b45a:	d00c      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b460:	3328      	adds	r3, #40	; 0x28
 800b462:	2102      	movs	r1, #2
 800b464:	4618      	mov	r0, r3
 800b466:	f001 fb2d 	bl	800cac4 <RCCEx_PLL3_Config>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b482:	65bb      	str	r3, [r7, #88]	; 0x58
 800b484:	2300      	movs	r3, #0
 800b486:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b488:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b48c:	460b      	mov	r3, r1
 800b48e:	4313      	orrs	r3, r2
 800b490:	d036      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b49c:	d018      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b49e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4a2:	d811      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a8:	d014      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b4aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ae:	d80b      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d011      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b4b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b8:	d106      	bne.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ba:	4bb7      	ldr	r3, [pc, #732]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	4ab6      	ldr	r2, [pc, #728]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b4c6:	e008      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4ce:	e004      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b4d0:	bf00      	nop
 800b4d2:	e002      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b4d4:	bf00      	nop
 800b4d6:	e000      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10a      	bne.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4e2:	4bad      	ldr	r3, [pc, #692]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4f0:	4aa9      	ldr	r2, [pc, #676]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b4f2:	430b      	orrs	r3, r1
 800b4f4:	6553      	str	r3, [r2, #84]	; 0x54
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b50c:	653b      	str	r3, [r7, #80]	; 0x50
 800b50e:	2300      	movs	r3, #0
 800b510:	657b      	str	r3, [r7, #84]	; 0x54
 800b512:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b516:	460b      	mov	r3, r1
 800b518:	4313      	orrs	r3, r2
 800b51a:	d009      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b51c:	4b9e      	ldr	r3, [pc, #632]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b51e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b520:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52a:	4a9b      	ldr	r2, [pc, #620]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b53c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b53e:	2300      	movs	r3, #0
 800b540:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b542:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b546:	460b      	mov	r3, r1
 800b548:	4313      	orrs	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b54c:	4b92      	ldr	r3, [pc, #584]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b550:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b55a:	4a8f      	ldr	r2, [pc, #572]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b55c:	430b      	orrs	r3, r1
 800b55e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b56c:	643b      	str	r3, [r7, #64]	; 0x40
 800b56e:	2300      	movs	r3, #0
 800b570:	647b      	str	r3, [r7, #68]	; 0x44
 800b572:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b576:	460b      	mov	r3, r1
 800b578:	4313      	orrs	r3, r2
 800b57a:	d00e      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b57c:	4b86      	ldr	r3, [pc, #536]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	4a85      	ldr	r2, [pc, #532]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b582:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b586:	6113      	str	r3, [r2, #16]
 800b588:	4b83      	ldr	r3, [pc, #524]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b58a:	6919      	ldr	r1, [r3, #16]
 800b58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b590:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b594:	4a80      	ldr	r2, [pc, #512]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b596:	430b      	orrs	r3, r1
 800b598:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b5a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	d009      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b5b6:	4b78      	ldr	r3, [pc, #480]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c4:	4a74      	ldr	r2, [pc, #464]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b5d6:	633b      	str	r3, [r7, #48]	; 0x30
 800b5d8:	2300      	movs	r3, #0
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
 800b5dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	d00a      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b5e6:	4b6c      	ldr	r3, [pc, #432]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f6:	4a68      	ldr	r2, [pc, #416]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	2100      	movs	r1, #0
 800b606:	62b9      	str	r1, [r7, #40]	; 0x28
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b60e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b612:	460b      	mov	r3, r1
 800b614:	4313      	orrs	r3, r2
 800b616:	d011      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61c:	3308      	adds	r3, #8
 800b61e:	2100      	movs	r1, #0
 800b620:	4618      	mov	r0, r3
 800b622:	f001 f99d 	bl	800c960 <RCCEx_PLL2_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b62c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	2100      	movs	r1, #0
 800b646:	6239      	str	r1, [r7, #32]
 800b648:	f003 0302 	and.w	r3, r3, #2
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
 800b64e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b652:	460b      	mov	r3, r1
 800b654:	4313      	orrs	r3, r2
 800b656:	d011      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	3308      	adds	r3, #8
 800b65e:	2101      	movs	r1, #1
 800b660:	4618      	mov	r0, r3
 800b662:	f001 f97d 	bl	800c960 <RCCEx_PLL2_Config>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b66c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b674:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b678:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	2100      	movs	r1, #0
 800b686:	61b9      	str	r1, [r7, #24]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	61fb      	str	r3, [r7, #28]
 800b68e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b692:	460b      	mov	r3, r1
 800b694:	4313      	orrs	r3, r2
 800b696:	d011      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69c:	3308      	adds	r3, #8
 800b69e:	2102      	movs	r1, #2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 f95d 	bl	800c960 <RCCEx_PLL2_Config>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b6ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6139      	str	r1, [r7, #16]
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	617b      	str	r3, [r7, #20]
 800b6ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	d011      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6dc:	3328      	adds	r3, #40	; 0x28
 800b6de:	2100      	movs	r1, #0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 f9ef 	bl	800cac4 <RCCEx_PLL3_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b6ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d003      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	2100      	movs	r1, #0
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	f003 0310 	and.w	r3, r3, #16
 800b70c:	60fb      	str	r3, [r7, #12]
 800b70e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b712:	460b      	mov	r3, r1
 800b714:	4313      	orrs	r3, r2
 800b716:	d011      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71c:	3328      	adds	r3, #40	; 0x28
 800b71e:	2101      	movs	r1, #1
 800b720:	4618      	mov	r0, r3
 800b722:	f001 f9cf 	bl	800cac4 <RCCEx_PLL3_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b72c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b734:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b738:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	2100      	movs	r1, #0
 800b746:	6039      	str	r1, [r7, #0]
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	607b      	str	r3, [r7, #4]
 800b74e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b752:	460b      	mov	r3, r1
 800b754:	4313      	orrs	r3, r2
 800b756:	d011      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75c:	3328      	adds	r3, #40	; 0x28
 800b75e:	2102      	movs	r1, #2
 800b760:	4618      	mov	r0, r3
 800b762:	f001 f9af 	bl	800cac4 <RCCEx_PLL3_Config>
 800b766:	4603      	mov	r3, r0
 800b768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b76c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b778:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b77c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	e000      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b788:	2301      	movs	r3, #1
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b790:	46bd      	mov	sp, r7
 800b792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b796:	bf00      	nop
 800b798:	58024400 	.word	0x58024400

0800b79c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b090      	sub	sp, #64	; 0x40
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7aa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b7ae:	430b      	orrs	r3, r1
 800b7b0:	f040 8094 	bne.w	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b7b4:	4b9b      	ldr	r3, [pc, #620]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	f003 0307 	and.w	r3, r3, #7
 800b7bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	f200 8087 	bhi.w	800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b7c6:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b7e1 	.word	0x0800b7e1
 800b7d0:	0800b809 	.word	0x0800b809
 800b7d4:	0800b831 	.word	0x0800b831
 800b7d8:	0800b8cd 	.word	0x0800b8cd
 800b7dc:	0800b859 	.word	0x0800b859
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7e0:	4b90      	ldr	r3, [pc, #576]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ec:	d108      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 ff62 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7fc:	f000 bc93 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b804:	f000 bc8f 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b808:	4b86      	ldr	r3, [pc, #536]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b814:	d108      	bne.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b816:	f107 0318 	add.w	r3, r7, #24
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fca6 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b824:	f000 bc7f 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b82c:	f000 bc7b 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b830:	4b7c      	ldr	r3, [pc, #496]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d108      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	4618      	mov	r0, r3
 800b844:	f000 fde6 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84c:	f000 bc6b 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b854:	f000 bc67 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b858:	4b72      	ldr	r3, [pc, #456]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b860:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b862:	4b70      	ldr	r3, [pc, #448]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	d10c      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b874:	4b6b      	ldr	r3, [pc, #428]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	08db      	lsrs	r3, r3, #3
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	4a6a      	ldr	r2, [pc, #424]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b880:	fa22 f303 	lsr.w	r3, r2, r3
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b886:	e01f      	b.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b888:	4b66      	ldr	r3, [pc, #408]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b894:	d106      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b89c:	d102      	bne.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b89e:	4b63      	ldr	r3, [pc, #396]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a2:	e011      	b.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8a4:	4b5f      	ldr	r3, [pc, #380]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b0:	d106      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b8:	d102      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8ba:	4b5d      	ldr	r3, [pc, #372]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8be:	e003      	b.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8c4:	f000 bc2f 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8c8:	f000 bc2d 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8cc:	4b59      	ldr	r3, [pc, #356]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d0:	f000 bc29 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d8:	f000 bc25 	b.w	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b8dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	f040 80a7 	bne.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b8ea:	4b4e      	ldr	r3, [pc, #312]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b8f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b8fa:	d054      	beq.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b902:	f200 808b 	bhi.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b90c:	f000 8083 	beq.w	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b912:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b916:	f200 8081 	bhi.w	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b920:	d02f      	beq.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b928:	d878      	bhi.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d004      	beq.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b936:	d012      	beq.n	800b95e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b938:	e070      	b.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b93a:	4b3a      	ldr	r3, [pc, #232]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b946:	d107      	bne.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 feb5 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b956:	e3e6      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b95c:	e3e3      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b95e:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b96a:	d107      	bne.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b96c:	f107 0318 	add.w	r3, r7, #24
 800b970:	4618      	mov	r0, r3
 800b972:	f000 fbfb 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b97a:	e3d4      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b980:	e3d1      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b982:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b98a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b98e:	d107      	bne.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b990:	f107 030c 	add.w	r3, r7, #12
 800b994:	4618      	mov	r0, r3
 800b996:	f000 fd3d 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b99e:	e3c2      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9a4:	e3bf      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b9ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 0304 	and.w	r3, r3, #4
 800b9b8:	2b04      	cmp	r3, #4
 800b9ba:	d10c      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9c2:	4b18      	ldr	r3, [pc, #96]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	08db      	lsrs	r3, r3, #3
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	4a16      	ldr	r2, [pc, #88]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9d4:	e01e      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9d6:	4b13      	ldr	r3, [pc, #76]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e2:	d106      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9ea:	d102      	bne.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f0:	e010      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	; (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9fe:	d106      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ba00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba06:	d102      	bne.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba08:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ba0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba0c:	e002      	b.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ba12:	e388      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba14:	e387      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba16:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ba18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba1a:	e384      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba20:	e381      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba22:	bf00      	nop
 800ba24:	58024400 	.word	0x58024400
 800ba28:	03d09000 	.word	0x03d09000
 800ba2c:	003d0900 	.word	0x003d0900
 800ba30:	02faf080 	.word	0x02faf080
 800ba34:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ba38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ba40:	430b      	orrs	r3, r1
 800ba42:	f040 809c 	bne.w	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ba46:	4b9e      	ldr	r3, [pc, #632]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ba4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba56:	d054      	beq.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba5e:	f200 808b 	bhi.w	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba68:	f000 8083 	beq.w	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ba72:	f200 8081 	bhi.w	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba7c:	d02f      	beq.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba84:	d878      	bhi.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ba8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba92:	d012      	beq.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ba94:	e070      	b.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba96:	4b8a      	ldr	r3, [pc, #552]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baa2:	d107      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fe07 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab2:	e338      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bab8:	e335      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800baba:	4b81      	ldr	r3, [pc, #516]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bac6:	d107      	bne.n	800bad8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bac8:	f107 0318 	add.w	r3, r7, #24
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 fb4d 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad6:	e326      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bad8:	2300      	movs	r3, #0
 800bada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800badc:	e323      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bade:	4b78      	ldr	r3, [pc, #480]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baea:	d107      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baec:	f107 030c 	add.w	r3, r7, #12
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fc8f 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafa:	e314      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb00:	e311      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb02:	4b6f      	ldr	r3, [pc, #444]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb0c:	4b6c      	ldr	r3, [pc, #432]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	d10c      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d109      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb1e:	4b68      	ldr	r3, [pc, #416]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	08db      	lsrs	r3, r3, #3
 800bb24:	f003 0303 	and.w	r3, r3, #3
 800bb28:	4a66      	ldr	r2, [pc, #408]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bb2a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb30:	e01e      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb32:	4b63      	ldr	r3, [pc, #396]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb3e:	d106      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb46:	d102      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bb48:	4b5f      	ldr	r3, [pc, #380]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb4c:	e010      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb4e:	4b5c      	ldr	r3, [pc, #368]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb5a:	d106      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb62:	d102      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bb64:	4b59      	ldr	r3, [pc, #356]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bb66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb68:	e002      	b.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bb6e:	e2da      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bb70:	e2d9      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bb72:	4b57      	ldr	r3, [pc, #348]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb76:	e2d6      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb7c:	e2d3      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bb7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bb86:	430b      	orrs	r3, r1
 800bb88:	f040 80a7 	bne.w	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bb8c:	4b4c      	ldr	r3, [pc, #304]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bb94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb9c:	d055      	beq.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bba4:	f200 8096 	bhi.w	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbae:	f000 8084 	beq.w	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bbb8:	f200 808c 	bhi.w	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbc2:	d030      	beq.n	800bc26 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbca:	f200 8083 	bhi.w	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbda:	d012      	beq.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bbdc:	e07a      	b.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbde:	4b38      	ldr	r3, [pc, #224]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbea:	d107      	bne.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fd63 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbfa:	e294      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc00:	e291      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc02:	4b2f      	ldr	r3, [pc, #188]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc0e:	d107      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc10:	f107 0318 	add.w	r3, r7, #24
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 faa9 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1e:	e282      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc24:	e27f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc26:	4b26      	ldr	r3, [pc, #152]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc32:	d107      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fbeb 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc42:	e270      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	e26d      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc4a:	4b1d      	ldr	r3, [pc, #116]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc54:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b04      	cmp	r3, #4
 800bc5e:	d10c      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d109      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc66:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	08db      	lsrs	r3, r3, #3
 800bc6c:	f003 0303 	and.w	r3, r3, #3
 800bc70:	4a14      	ldr	r2, [pc, #80]	; (800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bc72:	fa22 f303 	lsr.w	r3, r2, r3
 800bc76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc78:	e01e      	b.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc7a:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc86:	d106      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc8e:	d102      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc90:	4b0d      	ldr	r3, [pc, #52]	; (800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc94:	e010      	b.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc96:	4b0a      	ldr	r3, [pc, #40]	; (800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca2:	d106      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcaa:	d102      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcac:	4b07      	ldr	r3, [pc, #28]	; (800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bcae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb0:	e002      	b.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcb6:	e236      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcb8:	e235      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcba:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcbe:	e232      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcc0:	58024400 	.word	0x58024400
 800bcc4:	03d09000 	.word	0x03d09000
 800bcc8:	003d0900 	.word	0x003d0900
 800bccc:	02faf080 	.word	0x02faf080
 800bcd0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcd8:	e225      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bcda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcde:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bce2:	430b      	orrs	r3, r1
 800bce4:	f040 8085 	bne.w	800bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bce8:	4b9c      	ldr	r3, [pc, #624]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bcf0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcf8:	d06b      	beq.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd00:	d874      	bhi.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd08:	d056      	beq.n	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd10:	d86c      	bhi.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd18:	d03b      	beq.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd20:	d864      	bhi.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd28:	d021      	beq.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd30:	d85c      	bhi.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d004      	beq.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd3e:	d004      	beq.n	800bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bd40:	e054      	b.n	800bdec <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bd42:	f7fe fb5f 	bl	800a404 <HAL_RCC_GetPCLK1Freq>
 800bd46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd48:	e1ed      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd4a:	4b84      	ldr	r3, [pc, #528]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd56:	d107      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd58:	f107 0318 	add.w	r3, r7, #24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fa05 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd66:	e1de      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd6c:	e1db      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd6e:	4b7b      	ldr	r3, [pc, #492]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd7a:	d107      	bne.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 fb47 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd8a:	e1cc      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd90:	e1c9      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd92:	4b72      	ldr	r3, [pc, #456]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0304 	and.w	r3, r3, #4
 800bd9a:	2b04      	cmp	r3, #4
 800bd9c:	d109      	bne.n	800bdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd9e:	4b6f      	ldr	r3, [pc, #444]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	08db      	lsrs	r3, r3, #3
 800bda4:	f003 0303 	and.w	r3, r3, #3
 800bda8:	4a6d      	ldr	r2, [pc, #436]	; (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bdaa:	fa22 f303 	lsr.w	r3, r2, r3
 800bdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb0:	e1b9      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb6:	e1b6      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bdb8:	4b68      	ldr	r3, [pc, #416]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc4:	d102      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bdc6:	4b67      	ldr	r3, [pc, #412]	; (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdca:	e1ac      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdd0:	e1a9      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bdd2:	4b62      	ldr	r3, [pc, #392]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdde:	d102      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bde0:	4b61      	ldr	r3, [pc, #388]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde4:	e19f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdea:	e19c      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf0:	e199      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bdf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800bdfa:	430b      	orrs	r3, r1
 800bdfc:	d173      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bdfe:	4b57      	ldr	r3, [pc, #348]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be06:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be0e:	d02f      	beq.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be16:	d863      	bhi.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d004      	beq.n	800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be24:	d012      	beq.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800be26:	e05b      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be28:	4b4c      	ldr	r3, [pc, #304]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be34:	d107      	bne.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be36:	f107 0318 	add.w	r3, r7, #24
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f996 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be44:	e16f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be4a:	e16c      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4c:	4b43      	ldr	r3, [pc, #268]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be58:	d107      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be5a:	f107 030c 	add.w	r3, r7, #12
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fad8 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be68:	e15d      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6e:	e15a      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be70:	4b3a      	ldr	r3, [pc, #232]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be78:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be7a:	4b38      	ldr	r3, [pc, #224]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b04      	cmp	r3, #4
 800be84:	d10c      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8c:	4b33      	ldr	r3, [pc, #204]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	08db      	lsrs	r3, r3, #3
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	4a32      	ldr	r2, [pc, #200]	; (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800be98:	fa22 f303 	lsr.w	r3, r2, r3
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9e:	e01e      	b.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bea0:	4b2e      	ldr	r3, [pc, #184]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beac:	d106      	bne.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb4:	d102      	bne.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb6:	4b2b      	ldr	r3, [pc, #172]	; (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beba:	e010      	b.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bebc:	4b27      	ldr	r3, [pc, #156]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec8:	d106      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800beca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800becc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed0:	d102      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed2:	4b25      	ldr	r3, [pc, #148]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed6:	e002      	b.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bed8:	2300      	movs	r3, #0
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bedc:	e123      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bede:	e122      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee4:	e11f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800beee:	430b      	orrs	r3, r1
 800bef0:	d13c      	bne.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bef2:	4b1a      	ldr	r3, [pc, #104]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800befa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d004      	beq.n	800bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf08:	d012      	beq.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bf0a:	e023      	b.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf0c:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf18:	d107      	bne.n	800bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fbcc 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf28:	e0fd      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2e:	e0fa      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf30:	4b0a      	ldr	r3, [pc, #40]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf3c:	d107      	bne.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf3e:	f107 0318 	add.w	r3, r7, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f000 f912 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bf48:	6a3b      	ldr	r3, [r7, #32]
 800bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4c:	e0eb      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf52:	e0e8      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf58:	e0e5      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf5a:	bf00      	nop
 800bf5c:	58024400 	.word	0x58024400
 800bf60:	03d09000 	.word	0x03d09000
 800bf64:	003d0900 	.word	0x003d0900
 800bf68:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bf6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf70:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bf74:	430b      	orrs	r3, r1
 800bf76:	f040 8085 	bne.w	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf7a:	4b6d      	ldr	r3, [pc, #436]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bf82:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf8a:	d06b      	beq.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf92:	d874      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9a:	d056      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa2:	d86c      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfaa:	d03b      	beq.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfb2:	d864      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfba:	d021      	beq.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfc2:	d85c      	bhi.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d004      	beq.n	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfd0:	d004      	beq.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bfd2:	e054      	b.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bfd4:	f000 f8b4 	bl	800c140 <HAL_RCCEx_GetD3PCLK1Freq>
 800bfd8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bfda:	e0a4      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfdc:	4b54      	ldr	r3, [pc, #336]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfe8:	d107      	bne.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfea:	f107 0318 	add.w	r3, r7, #24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 f8bc 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff8:	e095      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bffe:	e092      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c000:	4b4b      	ldr	r3, [pc, #300]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00c:	d107      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c00e:	f107 030c 	add.w	r3, r7, #12
 800c012:	4618      	mov	r0, r3
 800c014:	f000 f9fe 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c01c:	e083      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c022:	e080      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c024:	4b42      	ldr	r3, [pc, #264]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d109      	bne.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c030:	4b3f      	ldr	r3, [pc, #252]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	08db      	lsrs	r3, r3, #3
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	4a3e      	ldr	r2, [pc, #248]	; (800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c03c:	fa22 f303 	lsr.w	r3, r2, r3
 800c040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c042:	e070      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c048:	e06d      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c04a:	4b39      	ldr	r3, [pc, #228]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c056:	d102      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c058:	4b37      	ldr	r3, [pc, #220]	; (800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c05c:	e063      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c062:	e060      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c064:	4b32      	ldr	r3, [pc, #200]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c06c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c070:	d102      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c072:	4b32      	ldr	r3, [pc, #200]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c076:	e056      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07c:	e053      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c082:	e050      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c088:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c08c:	430b      	orrs	r3, r1
 800c08e:	d148      	bne.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c090:	4b27      	ldr	r3, [pc, #156]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c098:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a0:	d02a      	beq.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a8:	d838      	bhi.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0b6:	d00d      	beq.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c0b8:	e030      	b.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0ba:	4b1d      	ldr	r3, [pc, #116]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0c6:	d102      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c0c8:	4b1c      	ldr	r3, [pc, #112]	; (800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0cc:	e02b      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d2:	e028      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0d4:	4b16      	ldr	r3, [pc, #88]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0e0:	d107      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fae8 	bl	800c6bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0f0:	e019      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f6:	e016      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0f8:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c104:	d107      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c106:	f107 0318 	add.w	r3, r7, #24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 f82e 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c114:	e007      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c11a:	e004      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c120:	e001      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3740      	adds	r7, #64	; 0x40
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	58024400 	.word	0x58024400
 800c134:	03d09000 	.word	0x03d09000
 800c138:	003d0900 	.word	0x003d0900
 800c13c:	02faf080 	.word	0x02faf080

0800c140 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c144:	f7fe f92e 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800c148:	4602      	mov	r2, r0
 800c14a:	4b06      	ldr	r3, [pc, #24]	; (800c164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	091b      	lsrs	r3, r3, #4
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	4904      	ldr	r1, [pc, #16]	; (800c168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c156:	5ccb      	ldrb	r3, [r1, r3]
 800c158:	f003 031f 	and.w	r3, r3, #31
 800c15c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c160:	4618      	mov	r0, r3
 800c162:	bd80      	pop	{r7, pc}
 800c164:	58024400 	.word	0x58024400
 800c168:	0801e134 	.word	0x0801e134

0800c16c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b089      	sub	sp, #36	; 0x24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c174:	4ba1      	ldr	r3, [pc, #644]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c178:	f003 0303 	and.w	r3, r3, #3
 800c17c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c17e:	4b9f      	ldr	r3, [pc, #636]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c182:	0b1b      	lsrs	r3, r3, #12
 800c184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c188:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c18a:	4b9c      	ldr	r3, [pc, #624]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	091b      	lsrs	r3, r3, #4
 800c190:	f003 0301 	and.w	r3, r3, #1
 800c194:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c196:	4b99      	ldr	r3, [pc, #612]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19a:	08db      	lsrs	r3, r3, #3
 800c19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	fb02 f303 	mul.w	r3, r2, r3
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8111 	beq.w	800c3dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	f000 8083 	beq.w	800c2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	f200 80a1 	bhi.w	800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d003      	beq.n	800c1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d056      	beq.n	800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c1d6:	e099      	b.n	800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1d8:	4b88      	ldr	r3, [pc, #544]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0320 	and.w	r3, r3, #32
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d02d      	beq.n	800c240 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1e4:	4b85      	ldr	r3, [pc, #532]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	08db      	lsrs	r3, r3, #3
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	4a84      	ldr	r2, [pc, #528]	; (800c400 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20e:	4b7b      	ldr	r3, [pc, #492]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c216:	ee07 3a90 	vmov	s15, r3
 800c21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c222:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c23a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c23e:	e087      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	ee07 3a90 	vmov	s15, r3
 800c246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c408 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c252:	4b6a      	ldr	r3, [pc, #424]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25a:	ee07 3a90 	vmov	s15, r3
 800c25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c262:	ed97 6a03 	vldr	s12, [r7, #12]
 800c266:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c282:	e065      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c296:	4b59      	ldr	r3, [pc, #356]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29e:	ee07 3a90 	vmov	s15, r3
 800c2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2c6:	e043      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2da:	4b48      	ldr	r3, [pc, #288]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e2:	ee07 3a90 	vmov	s15, r3
 800c2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c30a:	e021      	b.n	800c350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c40c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31e:	4b37      	ldr	r3, [pc, #220]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c332:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c34e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c350:	4b2a      	ldr	r3, [pc, #168]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	0a5b      	lsrs	r3, r3, #9
 800c356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35a:	ee07 3a90 	vmov	s15, r3
 800c35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c36a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c376:	ee17 2a90 	vmov	r2, s15
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c37e:	4b1f      	ldr	r3, [pc, #124]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c382:	0c1b      	lsrs	r3, r3, #16
 800c384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c388:	ee07 3a90 	vmov	s15, r3
 800c38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c394:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c398:	edd7 6a07 	vldr	s13, [r7, #28]
 800c39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3a4:	ee17 2a90 	vmov	r2, s15
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c3ac:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b0:	0e1b      	lsrs	r3, r3, #24
 800c3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b6:	ee07 3a90 	vmov	s15, r3
 800c3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3d2:	ee17 2a90 	vmov	r2, s15
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c3da:	e008      	b.n	800c3ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	609a      	str	r2, [r3, #8]
}
 800c3ee:	bf00      	nop
 800c3f0:	3724      	adds	r7, #36	; 0x24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	58024400 	.word	0x58024400
 800c400:	03d09000 	.word	0x03d09000
 800c404:	46000000 	.word	0x46000000
 800c408:	4c742400 	.word	0x4c742400
 800c40c:	4a742400 	.word	0x4a742400
 800c410:	4c3ebc20 	.word	0x4c3ebc20

0800c414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c414:	b480      	push	{r7}
 800c416:	b089      	sub	sp, #36	; 0x24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c41c:	4ba1      	ldr	r3, [pc, #644]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	f003 0303 	and.w	r3, r3, #3
 800c424:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c426:	4b9f      	ldr	r3, [pc, #636]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42a:	0d1b      	lsrs	r3, r3, #20
 800c42c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c430:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c432:	4b9c      	ldr	r3, [pc, #624]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c436:	0a1b      	lsrs	r3, r3, #8
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c43e:	4b99      	ldr	r3, [pc, #612]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c442:	08db      	lsrs	r3, r3, #3
 800c444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	ee07 3a90 	vmov	s15, r3
 800c452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 8111 	beq.w	800c684 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	2b02      	cmp	r3, #2
 800c466:	f000 8083 	beq.w	800c570 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	f200 80a1 	bhi.w	800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d056      	beq.n	800c52c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c47e:	e099      	b.n	800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c480:	4b88      	ldr	r3, [pc, #544]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0320 	and.w	r3, r3, #32
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d02d      	beq.n	800c4e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c48c:	4b85      	ldr	r3, [pc, #532]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	08db      	lsrs	r3, r3, #3
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	4a84      	ldr	r2, [pc, #528]	; (800c6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c498:	fa22 f303 	lsr.w	r3, r2, r3
 800c49c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	ee07 3a90 	vmov	s15, r3
 800c4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b6:	4b7b      	ldr	r3, [pc, #492]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4be:	ee07 3a90 	vmov	s15, r3
 800c4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c4e6:	e087      	b.n	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	ee07 3a90 	vmov	s15, r3
 800c4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4fa:	4b6a      	ldr	r3, [pc, #424]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c502:	ee07 3a90 	vmov	s15, r3
 800c506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c50e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c52a:	e065      	b.n	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	ee07 3a90 	vmov	s15, r3
 800c532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c536:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c53e:	4b59      	ldr	r3, [pc, #356]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c546:	ee07 3a90 	vmov	s15, r3
 800c54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c552:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c56e:	e043      	b.n	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c57a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c582:	4b48      	ldr	r3, [pc, #288]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c58a:	ee07 3a90 	vmov	s15, r3
 800c58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c592:	ed97 6a03 	vldr	s12, [r7, #12]
 800c596:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5b2:	e021      	b.n	800c5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	ee07 3a90 	vmov	s15, r3
 800c5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c6:	4b37      	ldr	r3, [pc, #220]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c5f8:	4b2a      	ldr	r3, [pc, #168]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fc:	0a5b      	lsrs	r3, r3, #9
 800c5fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c602:	ee07 3a90 	vmov	s15, r3
 800c606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c60a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c60e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c612:	edd7 6a07 	vldr	s13, [r7, #28]
 800c616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c61a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c61e:	ee17 2a90 	vmov	r2, s15
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c626:	4b1f      	ldr	r3, [pc, #124]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62a:	0c1b      	lsrs	r3, r3, #16
 800c62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c630:	ee07 3a90 	vmov	s15, r3
 800c634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c63c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c640:	edd7 6a07 	vldr	s13, [r7, #28]
 800c644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c64c:	ee17 2a90 	vmov	r2, s15
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c654:	4b13      	ldr	r3, [pc, #76]	; (800c6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	0e1b      	lsrs	r3, r3, #24
 800c65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c65e:	ee07 3a90 	vmov	s15, r3
 800c662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67a:	ee17 2a90 	vmov	r2, s15
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c682:	e008      	b.n	800c696 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	609a      	str	r2, [r3, #8]
}
 800c696:	bf00      	nop
 800c698:	3724      	adds	r7, #36	; 0x24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	58024400 	.word	0x58024400
 800c6a8:	03d09000 	.word	0x03d09000
 800c6ac:	46000000 	.word	0x46000000
 800c6b0:	4c742400 	.word	0x4c742400
 800c6b4:	4a742400 	.word	0x4a742400
 800c6b8:	4c3ebc20 	.word	0x4c3ebc20

0800c6bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b089      	sub	sp, #36	; 0x24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6c4:	4ba0      	ldr	r3, [pc, #640]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c8:	f003 0303 	and.w	r3, r3, #3
 800c6cc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c6ce:	4b9e      	ldr	r3, [pc, #632]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	091b      	lsrs	r3, r3, #4
 800c6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6d8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c6da:	4b9b      	ldr	r3, [pc, #620]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c6e4:	4b98      	ldr	r3, [pc, #608]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e8:	08db      	lsrs	r3, r3, #3
 800c6ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	fb02 f303 	mul.w	r3, r2, r3
 800c6f4:	ee07 3a90 	vmov	s15, r3
 800c6f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6fc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 8111 	beq.w	800c92a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	f000 8083 	beq.w	800c816 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	2b02      	cmp	r3, #2
 800c714:	f200 80a1 	bhi.w	800c85a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d056      	beq.n	800c7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c724:	e099      	b.n	800c85a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c726:	4b88      	ldr	r3, [pc, #544]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0320 	and.w	r3, r3, #32
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d02d      	beq.n	800c78e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c732:	4b85      	ldr	r3, [pc, #532]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	08db      	lsrs	r3, r3, #3
 800c738:	f003 0303 	and.w	r3, r3, #3
 800c73c:	4a83      	ldr	r2, [pc, #524]	; (800c94c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c73e:	fa22 f303 	lsr.w	r3, r2, r3
 800c742:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	ee07 3a90 	vmov	s15, r3
 800c754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75c:	4b7a      	ldr	r3, [pc, #488]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c764:	ee07 3a90 	vmov	s15, r3
 800c768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c770:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c788:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c78c:	e087      	b.n	800c89e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	ee07 3a90 	vmov	s15, r3
 800c794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c798:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c954 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c79c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a0:	4b69      	ldr	r3, [pc, #420]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a8:	ee07 3a90 	vmov	s15, r3
 800c7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7b4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7d0:	e065      	b.n	800c89e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	ee07 3a90 	vmov	s15, r3
 800c7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7dc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c958 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c7e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e4:	4b58      	ldr	r3, [pc, #352]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ec:	ee07 3a90 	vmov	s15, r3
 800c7f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7f8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c7fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c810:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c814:	e043      	b.n	800c89e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	ee07 3a90 	vmov	s15, r3
 800c81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c820:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c95c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c828:	4b47      	ldr	r3, [pc, #284]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c830:	ee07 3a90 	vmov	s15, r3
 800c834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c838:	ed97 6a03 	vldr	s12, [r7, #12]
 800c83c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c84c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c850:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c854:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c858:	e021      	b.n	800c89e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	ee07 3a90 	vmov	s15, r3
 800c860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c864:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c954 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c86c:	4b36      	ldr	r3, [pc, #216]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c87c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c880:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c950 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c88c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c894:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c898:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c89c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c89e:	4b2a      	ldr	r3, [pc, #168]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a2:	0a5b      	lsrs	r3, r3, #9
 800c8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a8:	ee07 3a90 	vmov	s15, r3
 800c8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8c4:	ee17 2a90 	vmov	r2, s15
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c8cc:	4b1e      	ldr	r3, [pc, #120]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d0:	0c1b      	lsrs	r3, r3, #16
 800c8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f2:	ee17 2a90 	vmov	r2, s15
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c8fa:	4b13      	ldr	r3, [pc, #76]	; (800c948 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fe:	0e1b      	lsrs	r3, r3, #24
 800c900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c904:	ee07 3a90 	vmov	s15, r3
 800c908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c910:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c914:	edd7 6a07 	vldr	s13, [r7, #28]
 800c918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c920:	ee17 2a90 	vmov	r2, s15
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c928:	e008      	b.n	800c93c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	609a      	str	r2, [r3, #8]
}
 800c93c:	bf00      	nop
 800c93e:	3724      	adds	r7, #36	; 0x24
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	58024400 	.word	0x58024400
 800c94c:	03d09000 	.word	0x03d09000
 800c950:	46000000 	.word	0x46000000
 800c954:	4c742400 	.word	0x4c742400
 800c958:	4a742400 	.word	0x4a742400
 800c95c:	4c3ebc20 	.word	0x4c3ebc20

0800c960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c96e:	4b53      	ldr	r3, [pc, #332]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c972:	f003 0303 	and.w	r3, r3, #3
 800c976:	2b03      	cmp	r3, #3
 800c978:	d101      	bne.n	800c97e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e099      	b.n	800cab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c97e:	4b4f      	ldr	r3, [pc, #316]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a4e      	ldr	r2, [pc, #312]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c98a:	f7f6 fe93 	bl	80036b4 <HAL_GetTick>
 800c98e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c990:	e008      	b.n	800c9a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c992:	f7f6 fe8f 	bl	80036b4 <HAL_GetTick>
 800c996:	4602      	mov	r2, r0
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d901      	bls.n	800c9a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e086      	b.n	800cab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9a4:	4b45      	ldr	r3, [pc, #276]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f0      	bne.n	800c992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c9b0:	4b42      	ldr	r3, [pc, #264]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	031b      	lsls	r3, r3, #12
 800c9be:	493f      	ldr	r1, [pc, #252]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	628b      	str	r3, [r1, #40]	; 0x28
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	025b      	lsls	r3, r3, #9
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	041b      	lsls	r3, r3, #16
 800c9e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	061b      	lsls	r3, r3, #24
 800c9f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c9f4:	4931      	ldr	r1, [pc, #196]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c9fa:	4b30      	ldr	r3, [pc, #192]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800c9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	695b      	ldr	r3, [r3, #20]
 800ca06:	492d      	ldr	r1, [pc, #180]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca0c:	4b2b      	ldr	r3, [pc, #172]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca10:	f023 0220 	bic.w	r2, r3, #32
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	4928      	ldr	r1, [pc, #160]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca1e:	4b27      	ldr	r3, [pc, #156]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca22:	4a26      	ldr	r2, [pc, #152]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca24:	f023 0310 	bic.w	r3, r3, #16
 800ca28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca2a:	4b24      	ldr	r3, [pc, #144]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca2e:	4b24      	ldr	r3, [pc, #144]	; (800cac0 <RCCEx_PLL2_Config+0x160>)
 800ca30:	4013      	ands	r3, r2
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	69d2      	ldr	r2, [r2, #28]
 800ca36:	00d2      	lsls	r2, r2, #3
 800ca38:	4920      	ldr	r1, [pc, #128]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ca3e:	4b1f      	ldr	r3, [pc, #124]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca42:	4a1e      	ldr	r2, [pc, #120]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca44:	f043 0310 	orr.w	r3, r3, #16
 800ca48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ca50:	4b1a      	ldr	r3, [pc, #104]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca54:	4a19      	ldr	r2, [pc, #100]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca5c:	e00f      	b.n	800ca7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d106      	bne.n	800ca72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ca64:	4b15      	ldr	r3, [pc, #84]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca68:	4a14      	ldr	r2, [pc, #80]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ca70:	e005      	b.n	800ca7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ca72:	4b12      	ldr	r3, [pc, #72]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4a11      	ldr	r2, [pc, #68]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a0e      	ldr	r2, [pc, #56]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800ca84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca8a:	f7f6 fe13 	bl	80036b4 <HAL_GetTick>
 800ca8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ca90:	e008      	b.n	800caa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ca92:	f7f6 fe0f 	bl	80036b4 <HAL_GetTick>
 800ca96:	4602      	mov	r2, r0
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	1ad3      	subs	r3, r2, r3
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d901      	bls.n	800caa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e006      	b.n	800cab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caa4:	4b05      	ldr	r3, [pc, #20]	; (800cabc <RCCEx_PLL2_Config+0x15c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0f0      	beq.n	800ca92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	58024400 	.word	0x58024400
 800cac0:	ffff0007 	.word	0xffff0007

0800cac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cad2:	4b53      	ldr	r3, [pc, #332]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad6:	f003 0303 	and.w	r3, r3, #3
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d101      	bne.n	800cae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e099      	b.n	800cc16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cae2:	4b4f      	ldr	r3, [pc, #316]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a4e      	ldr	r2, [pc, #312]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800caec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caee:	f7f6 fde1 	bl	80036b4 <HAL_GetTick>
 800caf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800caf4:	e008      	b.n	800cb08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800caf6:	f7f6 fddd 	bl	80036b4 <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	d901      	bls.n	800cb08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb04:	2303      	movs	r3, #3
 800cb06:	e086      	b.n	800cc16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb08:	4b45      	ldr	r3, [pc, #276]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1f0      	bne.n	800caf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb14:	4b42      	ldr	r3, [pc, #264]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	051b      	lsls	r3, r3, #20
 800cb22:	493f      	ldr	r1, [pc, #252]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb24:	4313      	orrs	r3, r2
 800cb26:	628b      	str	r3, [r1, #40]	; 0x28
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	025b      	lsls	r3, r3, #9
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	3b01      	subs	r3, #1
 800cb44:	041b      	lsls	r3, r3, #16
 800cb46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	061b      	lsls	r3, r3, #24
 800cb54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cb58:	4931      	ldr	r1, [pc, #196]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cb5e:	4b30      	ldr	r3, [pc, #192]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	492d      	ldr	r1, [pc, #180]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cb70:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	4928      	ldr	r1, [pc, #160]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cb82:	4b27      	ldr	r3, [pc, #156]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb86:	4a26      	ldr	r2, [pc, #152]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cb8e:	4b24      	ldr	r3, [pc, #144]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <RCCEx_PLL3_Config+0x160>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	69d2      	ldr	r2, [r2, #28]
 800cb9a:	00d2      	lsls	r2, r2, #3
 800cb9c:	4920      	ldr	r1, [pc, #128]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cba2:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	4a1e      	ldr	r2, [pc, #120]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cbb4:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	4a19      	ldr	r2, [pc, #100]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cbbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbc0:	e00f      	b.n	800cbe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d106      	bne.n	800cbd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cbc8:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	4a14      	ldr	r2, [pc, #80]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cbd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cbd4:	e005      	b.n	800cbe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	4a11      	ldr	r2, [pc, #68]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cbe0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a0e      	ldr	r2, [pc, #56]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cbe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbee:	f7f6 fd61 	bl	80036b4 <HAL_GetTick>
 800cbf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cbf4:	e008      	b.n	800cc08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cbf6:	f7f6 fd5d 	bl	80036b4 <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d901      	bls.n	800cc08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e006      	b.n	800cc16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc08:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <RCCEx_PLL3_Config+0x15c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0f0      	beq.n	800cbf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	58024400 	.word	0x58024400
 800cc24:	ffff0007 	.word	0xffff0007

0800cc28 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e092      	b.n	800cd60 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	7a5b      	ldrb	r3, [r3, #9]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7f5 fd90 	bl	8002770 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2202      	movs	r2, #2
 800cc54:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f022 0204 	bic.w	r2, r2, #4
 800cc64:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	4b3e      	ldr	r3, [pc, #248]	; (800cd68 <HAL_RNG_Init+0x140>)
 800cc6e:	4013      	ands	r3, r2
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	6852      	ldr	r2, [r2, #4]
 800cc74:	431a      	orrs	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cc7e:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a39      	ldr	r2, [pc, #228]	; (800cd6c <HAL_RNG_Init+0x144>)
 800cc86:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f247 2274 	movw	r2, #29300	; 0x7274
 800cc90:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800cca0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cca2:	f7f6 fd07 	bl	80036b4 <HAL_GetTick>
 800cca6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800cca8:	e016      	b.n	800ccd8 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ccaa:	f7f6 fd03 	bl	80036b4 <HAL_GetTick>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d90f      	bls.n	800ccd8 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ccc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccc6:	d107      	bne.n	800ccd8 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e043      	b.n	800cd60 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cce6:	d0e0      	beq.n	800ccaa <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0204 	orr.w	r2, r2, #4
 800ccf6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd02:	2b40      	cmp	r3, #64	; 0x40
 800cd04:	d104      	bne.n	800cd10 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2204      	movs	r2, #4
 800cd0a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e027      	b.n	800cd60 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800cd10:	f7f6 fcd0 	bl	80036b4 <HAL_GetTick>
 800cd14:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cd16:	e015      	b.n	800cd44 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cd18:	f7f6 fccc 	bl	80036b4 <HAL_GetTick>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d90e      	bls.n	800cd44 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	f003 0304 	and.w	r3, r3, #4
 800cd30:	2b04      	cmp	r3, #4
 800cd32:	d107      	bne.n	800cd44 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2204      	movs	r2, #4
 800cd38:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2202      	movs	r2, #2
 800cd3e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e00d      	b.n	800cd60 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f003 0304 	and.w	r3, r3, #4
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	d0e2      	beq.n	800cd18 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	bfffffdf 	.word	0xbfffffdf
 800cd6c:	17590abc 	.word	0x17590abc

0800cd70 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7a1b      	ldrb	r3, [r3, #8]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d101      	bne.n	800cd8a <HAL_RNG_GenerateRandomNumber+0x1a>
 800cd86:	2302      	movs	r3, #2
 800cd88:	e06d      	b.n	800ce66 <HAL_RNG_GenerateRandomNumber+0xf6>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	7a5b      	ldrb	r3, [r3, #9]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d15c      	bne.n	800ce54 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdaa:	2b40      	cmp	r3, #64	; 0x40
 800cdac:	d10c      	bne.n	800cdc8 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2208      	movs	r2, #8
 800cdb2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f864 	bl	800ce82 <RNG_RecoverSeedError>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d101      	bne.n	800cdc8 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	e04e      	b.n	800ce66 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800cdc8:	f7f6 fc74 	bl	80036b4 <HAL_GetTick>
 800cdcc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cdce:	e018      	b.n	800ce02 <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cdd0:	f7f6 fc70 	bl	80036b4 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d911      	bls.n	800ce02 <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d00a      	beq.n	800ce02 <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e031      	b.n	800ce66 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d1df      	bne.n	800cdd0 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce24:	2b40      	cmp	r3, #64	; 0x40
 800ce26:	d10d      	bne.n	800ce44 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2208      	movs	r2, #8
 800ce2c:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f022 0201 	bic.w	r2, r2, #1
 800ce40:	605a      	str	r2, [r3, #4]
 800ce42:	e003      	b.n	800ce4c <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	691a      	ldr	r2, [r3, #16]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	725a      	strb	r2, [r3, #9]
 800ce52:	e004      	b.n	800ce5e <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2204      	movs	r2, #4
 800ce58:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	721a      	strb	r2, [r3, #8]

  return status;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b083      	sub	sp, #12
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d008      	beq.n	800ceae <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceaa:	605a      	str	r2, [r3, #4]
 800ceac:	e05f      	b.n	800cf6e <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800cebc:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800cecc:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800cece:	2302      	movs	r3, #2
 800ced0:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3b01      	subs	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d110      	bne.n	800cf00 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2201      	movs	r2, #1
 800cee2:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f043 0202 	orr.w	r2, r3, #2
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff ffb9 	bl	800ce6e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e03d      	b.n	800cf7c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf0e:	d0e0      	beq.n	800ced2 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1a:	2b40      	cmp	r3, #64	; 0x40
 800cf1c:	d107      	bne.n	800cf2e <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf2c:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800cf2e:	2302      	movs	r3, #2
 800cf30:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d110      	bne.n	800cf60 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f043 0202 	orr.w	r2, r3, #2
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff ff89 	bl	800ce6e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e00d      	b.n	800cf7c <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b04      	cmp	r3, #4
 800cf6c:	d0e1      	beq.n	800cf32 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f023 0208 	bic.w	r2, r3, #8
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08a      	sub	sp, #40	; 0x28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e075      	b.n	800d082 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d105      	bne.n	800cfae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7f5 fc1b 	bl	80027e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 f868 	bl	800d08c <HAL_SD_InitCard>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e05d      	b.n	800d082 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cfc6:	f107 0308 	add.w	r3, r7, #8
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fdaf 	bl	800db30 <HAL_SD_GetCardStatus>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e052      	b.n	800d082 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cfdc:	7e3b      	ldrb	r3, [r7, #24]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cfe2:	7e7b      	ldrb	r3, [r7, #25]
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d10a      	bne.n	800d006 <HAL_SD_Init+0x82>
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <HAL_SD_Init+0x78>
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d004      	beq.n	800d006 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d002:	659a      	str	r2, [r3, #88]	; 0x58
 800d004:	e00b      	b.n	800d01e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d104      	bne.n	800d018 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d014:	659a      	str	r2, [r3, #88]	; 0x58
 800d016:	e002      	b.n	800d01e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fe6d 	bl	800dd04 <HAL_SD_ConfigWideBusOperation>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d030:	2301      	movs	r3, #1
 800d032:	e026      	b.n	800d082 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d034:	f7f6 fb3e 	bl	80036b4 <HAL_GetTick>
 800d038:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d03a:	e011      	b.n	800d060 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d03c:	f7f6 fb3a 	bl	80036b4 <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04a:	d109      	bne.n	800d060 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d052:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e010      	b.n	800d082 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 ff61 	bl	800df28 <HAL_SD_GetCardState>
 800d066:	4603      	mov	r3, r0
 800d068:	2b04      	cmp	r3, #4
 800d06a:	d1e7      	bne.n	800d03c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3728      	adds	r7, #40	; 0x28
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b08d      	sub	sp, #52	; 0x34
 800d090:	af02      	add	r7, sp, #8
 800d092:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d094:	2300      	movs	r3, #0
 800d096:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d098:	2300      	movs	r3, #0
 800d09a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d09c:	2300      	movs	r3, #0
 800d09e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d0a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d0a8:	f04f 0100 	mov.w	r1, #0
 800d0ac:	f7fe fb76 	bl	800b79c <HAL_RCCEx_GetPeriphCLKFreq>
 800d0b0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d109      	bne.n	800d0cc <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e070      	b.n	800d1ae <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	0a1b      	lsrs	r3, r3, #8
 800d0d0:	4a39      	ldr	r2, [pc, #228]	; (800d1b8 <HAL_SD_InitCard+0x12c>)
 800d0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d6:	091b      	lsrs	r3, r3, #4
 800d0d8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681c      	ldr	r4, [r3, #0]
 800d0de:	466a      	mov	r2, sp
 800d0e0:	f107 0318 	add.w	r3, r7, #24
 800d0e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0e8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d0ec:	f107 030c 	add.w	r3, r7, #12
 800d0f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f004 fec4 	bl	8011e80 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f004 ff07 	bl	8011f10 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d005      	beq.n	800d114 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	005b      	lsls	r3, r3, #1
 800d10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d112:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	2b00      	cmp	r3, #0
 800d118:	d007      	beq.n	800d12a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d11a:	4a28      	ldr	r2, [pc, #160]	; (800d1bc <HAL_SD_InitCard+0x130>)
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d122:	3301      	adds	r3, #1
 800d124:	4618      	mov	r0, r3
 800d126:	f7f6 fad1 	bl	80036cc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 ffea 	bl	800e104 <SD_PowerON>
 800d130:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00b      	beq.n	800d150 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e02e      	b.n	800d1ae <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 ff09 	bl	800df68 <SD_InitCard>
 800d156:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00b      	beq.n	800d176 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	431a      	orrs	r2, r3
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e01b      	b.n	800d1ae <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d17e:	4618      	mov	r0, r3
 800d180:	f004 ff5c 	bl	801203c <SDMMC_CmdBlockLength>
 800d184:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00f      	beq.n	800d1ac <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a0b      	ldr	r2, [pc, #44]	; (800d1c0 <HAL_SD_InitCard+0x134>)
 800d192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d1ac:	2300      	movs	r3, #0
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	372c      	adds	r7, #44	; 0x2c
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd90      	pop	{r4, r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	014f8b59 	.word	0x014f8b59
 800d1bc:	00012110 	.word	0x00012110
 800d1c0:	1fe00fff 	.word	0x1fe00fff

0800d1c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08c      	sub	sp, #48	; 0x30
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d107      	bne.n	800d1ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e08d      	b.n	800d308 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	f040 8086 	bne.w	800d306 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	441a      	add	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d907      	bls.n	800d21e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d212:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	e074      	b.n	800d308 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2203      	movs	r2, #3
 800d222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2200      	movs	r2, #0
 800d22c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	025a      	lsls	r2, r3, #9
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d240:	2b01      	cmp	r3, #1
 800d242:	d002      	beq.n	800d24a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	025b      	lsls	r3, r3, #9
 800d248:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
 800d24e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	025b      	lsls	r3, r3, #9
 800d254:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d256:	2390      	movs	r3, #144	; 0x90
 800d258:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d25a:	2302      	movs	r3, #2
 800d25c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d25e:	2300      	movs	r3, #0
 800d260:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d262:	2300      	movs	r3, #0
 800d264:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f107 0210 	add.w	r2, r7, #16
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f004 feb7 	bl	8011fe4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68da      	ldr	r2, [r3, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d284:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2201      	movs	r2, #1
 800d294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d90a      	bls.n	800d2b2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2282      	movs	r2, #130	; 0x82
 800d2a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f004 ff0d 	bl	80120c8 <SDMMC_CmdReadMultiBlock>
 800d2ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2b0:	e009      	b.n	800d2c6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2281      	movs	r2, #129	; 0x81
 800d2b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f004 fedf 	bl	8012082 <SDMMC_CmdReadSingleBlock>
 800d2c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d012      	beq.n	800d2f2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a0f      	ldr	r2, [pc, #60]	; (800d310 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d2d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e00a      	b.n	800d308 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d300:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	e000      	b.n	800d308 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d306:	2302      	movs	r3, #2
  }
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3730      	adds	r7, #48	; 0x30
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	1fe00fff 	.word	0x1fe00fff

0800d314 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08c      	sub	sp, #48	; 0x30
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d107      	bne.n	800d33c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d330:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e08d      	b.n	800d458 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d342:	b2db      	uxtb	r3, r3
 800d344:	2b01      	cmp	r3, #1
 800d346:	f040 8086 	bne.w	800d456 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d907      	bls.n	800d36e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d362:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e074      	b.n	800d458 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2203      	movs	r2, #3
 800d372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2200      	movs	r2, #0
 800d37c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	025a      	lsls	r2, r3, #9
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	2b01      	cmp	r3, #1
 800d392:	d002      	beq.n	800d39a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d396:	025b      	lsls	r3, r3, #9
 800d398:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295
 800d39e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	025b      	lsls	r3, r3, #9
 800d3a4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3a6:	2390      	movs	r3, #144	; 0x90
 800d3a8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f107 0210 	add.w	r2, r7, #16
 800d3be:	4611      	mov	r1, r2
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f004 fe0f 	bl	8011fe4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68da      	ldr	r2, [r3, #12]
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3d4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d90a      	bls.n	800d402 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	22a0      	movs	r2, #160	; 0xa0
 800d3f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f004 feab 	bl	8012154 <SDMMC_CmdWriteMultiBlock>
 800d3fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d400:	e009      	b.n	800d416 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2290      	movs	r2, #144	; 0x90
 800d406:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d40e:	4618      	mov	r0, r3
 800d410:	f004 fe7d 	bl	801210e <SDMMC_CmdWriteSingleBlock>
 800d414:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d012      	beq.n	800d442 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a0f      	ldr	r2, [pc, #60]	; (800d460 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d422:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	431a      	orrs	r2, r3
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	e00a      	b.n	800d458 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d450:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	e000      	b.n	800d458 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d456:	2302      	movs	r3, #2
  }
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3730      	adds	r7, #48	; 0x30
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	1fe00fff 	.word	0x1fe00fff

0800d464 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d470:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d008      	beq.n	800d492 <HAL_SD_IRQHandler+0x2e>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0308 	and.w	r3, r3, #8
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f001 f926 	bl	800e6dc <SD_Read_IT>
 800d490:	e19a      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80ac 	beq.w	800d5fa <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681a      	ldr	r2, [r3, #0]
 800d4b6:	4b59      	ldr	r3, [pc, #356]	; (800d61c <HAL_SD_IRQHandler+0x1b8>)
 800d4b8:	400b      	ands	r3, r1
 800d4ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d4ca:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68da      	ldr	r2, [r3, #12]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4da:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 0308 	and.w	r3, r3, #8
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d038      	beq.n	800d558 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f003 0302 	and.w	r3, r3, #2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d104      	bne.n	800d4fa <HAL_SD_IRQHandler+0x96>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f003 0320 	and.w	r3, r3, #32
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d011      	beq.n	800d51e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4618      	mov	r0, r3
 800d500:	f004 fe4c 	bl	801219c <SDMMC_CmdStopTransfer>
 800d504:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d008      	beq.n	800d51e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	431a      	orrs	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f95b 	bl	800d7d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a3f      	ldr	r2, [pc, #252]	; (800d620 <HAL_SD_IRQHandler+0x1bc>)
 800d524:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d104      	bne.n	800d548 <HAL_SD_IRQHandler+0xe4>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f003 0302 	and.w	r3, r3, #2
 800d544:	2b00      	cmp	r3, #0
 800d546:	d003      	beq.n	800d550 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f006 fe55 	bl	80141f8 <HAL_SD_RxCpltCallback>
 800d54e:	e13b      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f006 fe47 	bl	80141e4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d556:	e137      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 8132 	beq.w	800d7c8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2200      	movs	r2, #0
 800d56a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2200      	movs	r2, #0
 800d572:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2200      	movs	r2, #0
 800d57a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f003 0302 	and.w	r3, r3, #2
 800d582:	2b00      	cmp	r3, #0
 800d584:	d104      	bne.n	800d590 <HAL_SD_IRQHandler+0x12c>
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f003 0320 	and.w	r3, r3, #32
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d011      	beq.n	800d5b4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4618      	mov	r0, r3
 800d596:	f004 fe01 	bl	801219c <SDMMC_CmdStopTransfer>
 800d59a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d008      	beq.n	800d5b4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	431a      	orrs	r2, r3
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f910 	bl	800d7d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f003 0310 	and.w	r3, r3, #16
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d104      	bne.n	800d5d6 <HAL_SD_IRQHandler+0x172>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0320 	and.w	r3, r3, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f006 fe04 	bl	80141e4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d105      	bne.n	800d5f2 <HAL_SD_IRQHandler+0x18e>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f003 0302 	and.w	r3, r3, #2
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 80eb 	beq.w	800d7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f006 fe00 	bl	80141f8 <HAL_SD_RxCpltCallback>
}
 800d5f8:	e0e6      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00d      	beq.n	800d624 <HAL_SD_IRQHandler+0x1c0>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f003 0308 	and.w	r3, r3, #8
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d008      	beq.n	800d624 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f001 f8a8 	bl	800e768 <SD_Write_IT>
 800d618:	e0d6      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
 800d61a:	bf00      	nop
 800d61c:	ffff3ec5 	.word	0xffff3ec5
 800d620:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 809d 	beq.w	800d76e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d005      	beq.n	800d64e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d646:	f043 0202 	orr.w	r2, r3, #2
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d654:	f003 0308 	and.w	r3, r3, #8
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d660:	f043 0208 	orr.w	r2, r3, #8
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66e:	f003 0320 	and.w	r3, r3, #32
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d67a:	f043 0220 	orr.w	r2, r3, #32
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d694:	f043 0210 	orr.w	r2, r3, #16
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a4b      	ldr	r2, [pc, #300]	; (800d7d0 <HAL_SD_IRQHandler+0x36c>)
 800d6a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6b2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	68da      	ldr	r2, [r3, #12]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6c2:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d6d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d6e2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f004 fd57 	bl	801219c <SDMMC_CmdStopTransfer>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f4:	431a      	orrs	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68da      	ldr	r2, [r3, #12]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d708:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d712:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f003 0308 	and.w	r3, r3, #8
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 f851 	bl	800d7d4 <HAL_SD_ErrorCallback>
}
 800d732:	e049      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d044      	beq.n	800d7c8 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d742:	2b00      	cmp	r3, #0
 800d744:	d040      	beq.n	800d7c8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d754:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2200      	movs	r2, #0
 800d75c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f834 	bl	800d7d4 <HAL_SD_ErrorCallback>
}
 800d76c:	e02c      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d025      	beq.n	800d7c8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d784:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d78c:	f003 0304 	and.w	r3, r3, #4
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10c      	bne.n	800d7ae <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f003 0320 	and.w	r3, r3, #32
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d003      	beq.n	800d7a6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 f84a 	bl	800e838 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d7a4:	e010      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f001 f832 	bl	800e810 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d7ac:	e00c      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 f833 	bl	800e824 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d7be:	e003      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f001 f81b 	bl	800e7fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d7c6:	e7ff      	b.n	800d7c8 <HAL_SD_IRQHandler+0x364>
 800d7c8:	bf00      	nop
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	18000f3a 	.word	0x18000f3a

0800d7d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7f6:	0f9b      	lsrs	r3, r3, #30
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d802:	0e9b      	lsrs	r3, r3, #26
 800d804:	b2db      	uxtb	r3, r3
 800d806:	f003 030f 	and.w	r3, r3, #15
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d814:	0e1b      	lsrs	r3, r3, #24
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 0303 	and.w	r3, r3, #3
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d826:	0c1b      	lsrs	r3, r3, #16
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d832:	0a1b      	lsrs	r3, r3, #8
 800d834:	b2da      	uxtb	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d848:	0d1b      	lsrs	r3, r3, #20
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d854:	0c1b      	lsrs	r3, r3, #16
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 030f 	and.w	r3, r3, #15
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d866:	0bdb      	lsrs	r3, r3, #15
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d878:	0b9b      	lsrs	r3, r3, #14
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	b2da      	uxtb	r2, r3
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d88a:	0b5b      	lsrs	r3, r3, #13
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d89c:	0b1b      	lsrs	r3, r3, #12
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d163      	bne.n	800d980 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8bc:	009a      	lsls	r2, r3, #2
 800d8be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d8c8:	0f92      	lsrs	r2, r2, #30
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8d4:	0edb      	lsrs	r3, r3, #27
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	f003 0307 	and.w	r3, r3, #7
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e6:	0e1b      	lsrs	r3, r3, #24
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	f003 0307 	and.w	r3, r3, #7
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f8:	0d5b      	lsrs	r3, r3, #21
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	f003 0307 	and.w	r3, r3, #7
 800d900:	b2da      	uxtb	r2, r3
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d90a:	0c9b      	lsrs	r3, r3, #18
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	f003 0307 	and.w	r3, r3, #7
 800d912:	b2da      	uxtb	r2, r3
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d91c:	0bdb      	lsrs	r3, r3, #15
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	f003 0307 	and.w	r3, r3, #7
 800d924:	b2da      	uxtb	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	1c5a      	adds	r2, r3, #1
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	7e1b      	ldrb	r3, [r3, #24]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	3302      	adds	r3, #2
 800d940:	2201      	movs	r2, #1
 800d942:	fa02 f303 	lsl.w	r3, r2, r3
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d94a:	fb03 f202 	mul.w	r2, r3, r2
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	7a1b      	ldrb	r3, [r3, #8]
 800d956:	b2db      	uxtb	r3, r3
 800d958:	f003 030f 	and.w	r3, r3, #15
 800d95c:	2201      	movs	r2, #1
 800d95e:	409a      	lsls	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d96c:	0a52      	lsrs	r2, r2, #9
 800d96e:	fb03 f202 	mul.w	r2, r3, r2
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d97c:	655a      	str	r2, [r3, #84]	; 0x54
 800d97e:	e031      	b.n	800d9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	2b01      	cmp	r3, #1
 800d986:	d11d      	bne.n	800d9c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d98c:	041b      	lsls	r3, r3, #16
 800d98e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d996:	0c1b      	lsrs	r3, r3, #16
 800d998:	431a      	orrs	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	029a      	lsls	r2, r3, #10
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	655a      	str	r2, [r3, #84]	; 0x54
 800d9c2:	e00f      	b.n	800d9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a58      	ldr	r2, [pc, #352]	; (800db2c <HAL_SD_GetCardCSD+0x344>)
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e09d      	b.n	800db20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e8:	0b9b      	lsrs	r3, r3, #14
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9fa:	09db      	lsrs	r3, r3, #7
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	b2da      	uxtb	r2, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da1c:	0fdb      	lsrs	r3, r3, #31
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da28:	0f5b      	lsrs	r3, r3, #29
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0303 	and.w	r3, r3, #3
 800da30:	b2da      	uxtb	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3a:	0e9b      	lsrs	r3, r3, #26
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4c:	0d9b      	lsrs	r3, r3, #22
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	f003 030f 	and.w	r3, r3, #15
 800da54:	b2da      	uxtb	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da5e:	0d5b      	lsrs	r3, r3, #21
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	b2da      	uxtb	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da7a:	0c1b      	lsrs	r3, r3, #16
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	b2da      	uxtb	r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8e:	0bdb      	lsrs	r3, r3, #15
 800da90:	b2db      	uxtb	r3, r3
 800da92:	f003 0301 	and.w	r3, r3, #1
 800da96:	b2da      	uxtb	r2, r3
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daa2:	0b9b      	lsrs	r3, r3, #14
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab6:	0b5b      	lsrs	r3, r3, #13
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daca:	0b1b      	lsrs	r3, r3, #12
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dade:	0a9b      	lsrs	r3, r3, #10
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f003 0303 	and.w	r3, r3, #3
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf2:	0a1b      	lsrs	r3, r3, #8
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db06:	085b      	lsrs	r3, r3, #1
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2201      	movs	r2, #1
 800db1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	1fe00fff 	.word	0x1fe00fff

0800db30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b094      	sub	sp, #80	; 0x50
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d101      	bne.n	800db50 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800db4c:	2301      	movs	r3, #1
 800db4e:	e0a7      	b.n	800dca0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fb62 	bl	800e220 <SD_SendSDStatus>
 800db5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db60:	2b00      	cmp	r3, #0
 800db62:	d011      	beq.n	800db88 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4a4f      	ldr	r2, [pc, #316]	; (800dca8 <HAL_SD_GetCardStatus+0x178>)
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db72:	431a      	orrs	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db80:	2301      	movs	r3, #1
 800db82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db86:	e070      	b.n	800dc6a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	099b      	lsrs	r3, r3, #6
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	095b      	lsrs	r3, r3, #5
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 0301 	and.w	r3, r3, #1
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	0a1b      	lsrs	r3, r3, #8
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	0e1b      	lsrs	r3, r3, #24
 800dbb8:	b29b      	uxth	r3, r3
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	061a      	lsls	r2, r3, #24
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	021b      	lsls	r3, r3, #8
 800dbca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	0a1b      	lsrs	r3, r3, #8
 800dbd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbd8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	0e1b      	lsrs	r3, r3, #24
 800dbde:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	0d1b      	lsrs	r3, r3, #20
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	0c1b      	lsrs	r3, r3, #16
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	0a9b      	lsrs	r3, r3, #10
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	0a1b      	lsrs	r3, r3, #8
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	f003 0303 	and.w	r3, r3, #3
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	091b      	lsrs	r3, r3, #4
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	f003 030f 	and.w	r3, r3, #15
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	f003 030f 	and.w	r3, r3, #15
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	0e1b      	lsrs	r3, r3, #24
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc72:	4618      	mov	r0, r3
 800dc74:	f004 f9e2 	bl	801203c <SDMMC_CmdBlockLength>
 800dc78:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00d      	beq.n	800dc9c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a08      	ldr	r2, [pc, #32]	; (800dca8 <HAL_SD_GetCardStatus+0x178>)
 800dc86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc8c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3750      	adds	r7, #80	; 0x50
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	1fe00fff 	.word	0x1fe00fff

0800dcac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd04:	b590      	push	{r4, r7, lr}
 800dd06:	b08d      	sub	sp, #52	; 0x34
 800dd08:	af02      	add	r7, sp, #8
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2203      	movs	r2, #3
 800dd18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d02e      	beq.n	800dd82 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd2a:	d106      	bne.n	800dd3a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	635a      	str	r2, [r3, #52]	; 0x34
 800dd38:	e029      	b.n	800dd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dd40:	d10a      	bne.n	800dd58 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fb64 	bl	800e410 <SD_WideBus_Enable>
 800dd48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd4e:	6a3b      	ldr	r3, [r7, #32]
 800dd50:	431a      	orrs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	635a      	str	r2, [r3, #52]	; 0x34
 800dd56:	e01a      	b.n	800dd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fba1 	bl	800e4a6 <SD_WideBus_Disable>
 800dd64:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	431a      	orrs	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	635a      	str	r2, [r3, #52]	; 0x34
 800dd72:	e00c      	b.n	800dd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	635a      	str	r2, [r3, #52]	; 0x34
 800dd80:	e005      	b.n	800dd8e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd86:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d007      	beq.n	800dda6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a5f      	ldr	r2, [pc, #380]	; (800df18 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd9c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd9e:	2301      	movs	r3, #1
 800dda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dda4:	e096      	b.n	800ded4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dda6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ddaa:	f04f 0100 	mov.w	r1, #0
 800ddae:	f7fd fcf5 	bl	800b79c <HAL_RCCEx_GetPeriphCLKFreq>
 800ddb2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 8083 	beq.w	800dec2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	695a      	ldr	r2, [r3, #20]
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	4950      	ldr	r1, [pc, #320]	; (800df1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddda:	fba1 1303 	umull	r1, r3, r1, r3
 800ddde:	0e1b      	lsrs	r3, r3, #24
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d303      	bcc.n	800ddec <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	61bb      	str	r3, [r7, #24]
 800ddea:	e05a      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddf4:	d103      	bne.n	800ddfe <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	695b      	ldr	r3, [r3, #20]
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e051      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de06:	d126      	bne.n	800de56 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10e      	bne.n	800de2e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800de10:	69fb      	ldr	r3, [r7, #28]
 800de12:	4a43      	ldr	r2, [pc, #268]	; (800df20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d906      	bls.n	800de26 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	4a40      	ldr	r2, [pc, #256]	; (800df1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de1c:	fba2 2303 	umull	r2, r3, r2, r3
 800de20:	0e5b      	lsrs	r3, r3, #25
 800de22:	61bb      	str	r3, [r7, #24]
 800de24:	e03d      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	61bb      	str	r3, [r7, #24]
 800de2c:	e039      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	69fa      	ldr	r2, [r7, #28]
 800de36:	fbb2 f3f3 	udiv	r3, r2, r3
 800de3a:	4a39      	ldr	r2, [pc, #228]	; (800df20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d906      	bls.n	800de4e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	4a36      	ldr	r2, [pc, #216]	; (800df1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de44:	fba2 2303 	umull	r2, r3, r2, r3
 800de48:	0e5b      	lsrs	r3, r3, #25
 800de4a:	61bb      	str	r3, [r7, #24]
 800de4c:	e029      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	695b      	ldr	r3, [r3, #20]
 800de52:	61bb      	str	r3, [r7, #24]
 800de54:	e025      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	695b      	ldr	r3, [r3, #20]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10e      	bne.n	800de7c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	4a30      	ldr	r2, [pc, #192]	; (800df24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d906      	bls.n	800de74 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	4a2c      	ldr	r2, [pc, #176]	; (800df1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de6a:	fba2 2303 	umull	r2, r3, r2, r3
 800de6e:	0e1b      	lsrs	r3, r3, #24
 800de70:	61bb      	str	r3, [r7, #24]
 800de72:	e016      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e012      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	005b      	lsls	r3, r3, #1
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	fbb2 f3f3 	udiv	r3, r2, r3
 800de88:	4a26      	ldr	r2, [pc, #152]	; (800df24 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d906      	bls.n	800de9c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	4a22      	ldr	r2, [pc, #136]	; (800df1c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de92:	fba2 2303 	umull	r2, r3, r2, r3
 800de96:	0e1b      	lsrs	r3, r3, #24
 800de98:	61bb      	str	r3, [r7, #24]
 800de9a:	e002      	b.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	695b      	ldr	r3, [r3, #20]
 800dea0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681c      	ldr	r4, [r3, #0]
 800dea6:	466a      	mov	r2, sp
 800dea8:	f107 0314 	add.w	r3, r7, #20
 800deac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800deb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800deb4:	f107 0308 	add.w	r3, r7, #8
 800deb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deba:	4620      	mov	r0, r4
 800debc:	f003 ffe0 	bl	8011e80 <SDMMC_Init>
 800dec0:	e008      	b.n	800ded4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dedc:	4618      	mov	r0, r3
 800dede:	f004 f8ad 	bl	801203c <SDMMC_CmdBlockLength>
 800dee2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00c      	beq.n	800df04 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a0a      	ldr	r2, [pc, #40]	; (800df18 <HAL_SD_ConfigWideBusOperation+0x214>)
 800def0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800def6:	6a3b      	ldr	r3, [r7, #32]
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800df0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df10:	4618      	mov	r0, r3
 800df12:	372c      	adds	r7, #44	; 0x2c
 800df14:	46bd      	mov	sp, r7
 800df16:	bd90      	pop	{r4, r7, pc}
 800df18:	1fe00fff 	.word	0x1fe00fff
 800df1c:	55e63b89 	.word	0x55e63b89
 800df20:	02faf080 	.word	0x02faf080
 800df24:	017d7840 	.word	0x017d7840

0800df28 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df34:	f107 030c 	add.w	r3, r7, #12
 800df38:	4619      	mov	r1, r3
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fa40 	bl	800e3c0 <SD_SendStatus>
 800df40:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d005      	beq.n	800df54 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	431a      	orrs	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	0a5b      	lsrs	r3, r3, #9
 800df58:	f003 030f 	and.w	r3, r3, #15
 800df5c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df5e:	693b      	ldr	r3, [r7, #16]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b090      	sub	sp, #64	; 0x40
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800df70:	2300      	movs	r3, #0
 800df72:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800df74:	f7f5 fb9e 	bl	80036b4 <HAL_GetTick>
 800df78:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4618      	mov	r0, r3
 800df80:	f003 ffd7 	bl	8011f32 <SDMMC_GetPowerState>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d102      	bne.n	800df90 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df8e:	e0b5      	b.n	800e0fc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df94:	2b03      	cmp	r3, #3
 800df96:	d02e      	beq.n	800dff6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f004 fa22 	bl	80123e6 <SDMMC_CmdSendCID>
 800dfa2:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <SD_InitCard+0x46>
    {
      return errorstate;
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfac:	e0a6      	b.n	800e0fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f004 f802 	bl	8011fbe <SDMMC_GetResponse>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2104      	movs	r1, #4
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f003 fff9 	bl	8011fbe <SDMMC_GetResponse>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2108      	movs	r1, #8
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f003 fff0 	bl	8011fbe <SDMMC_GetResponse>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	210c      	movs	r1, #12
 800dfea:	4618      	mov	r0, r3
 800dfec:	f003 ffe7 	bl	8011fbe <SDMMC_GetResponse>
 800dff0:	4602      	mov	r2, r0
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d01d      	beq.n	800e03a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dffe:	e019      	b.n	800e034 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f107 020a 	add.w	r2, r7, #10
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f004 fa2a 	bl	8012464 <SDMMC_CmdSetRelAdd>
 800e010:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01a:	e06f      	b.n	800e0fc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e01c:	f7f5 fb4a 	bl	80036b4 <HAL_GetTick>
 800e020:	4602      	mov	r2, r0
 800e022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	f241 3287 	movw	r2, #4999	; 0x1387
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d902      	bls.n	800e034 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e02e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e032:	e063      	b.n	800e0fc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e034:	897b      	ldrh	r3, [r7, #10]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d0e2      	beq.n	800e000 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d036      	beq.n	800e0b0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e042:	897b      	ldrh	r3, [r7, #10]
 800e044:	461a      	mov	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e052:	041b      	lsls	r3, r3, #16
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f004 f9e4 	bl	8012424 <SDMMC_CmdSendCSD>
 800e05c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <SD_InitCard+0x100>
    {
      return errorstate;
 800e064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e066:	e049      	b.n	800e0fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2100      	movs	r1, #0
 800e06e:	4618      	mov	r0, r3
 800e070:	f003 ffa5 	bl	8011fbe <SDMMC_GetResponse>
 800e074:	4602      	mov	r2, r0
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2104      	movs	r1, #4
 800e080:	4618      	mov	r0, r3
 800e082:	f003 ff9c 	bl	8011fbe <SDMMC_GetResponse>
 800e086:	4602      	mov	r2, r0
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2108      	movs	r1, #8
 800e092:	4618      	mov	r0, r3
 800e094:	f003 ff93 	bl	8011fbe <SDMMC_GetResponse>
 800e098:	4602      	mov	r2, r0
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	210c      	movs	r1, #12
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f003 ff8a 	bl	8011fbe <SDMMC_GetResponse>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2104      	movs	r1, #4
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f003 ff81 	bl	8011fbe <SDMMC_GetResponse>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	0d1a      	lsrs	r2, r3, #20
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0c4:	f107 030c 	add.w	r3, r7, #12
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7ff fb8c 	bl	800d7e8 <HAL_SD_GetCardCSD>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0da:	e00f      	b.n	800e0fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e4:	041b      	lsls	r3, r3, #16
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f004 f893 	bl	8012214 <SDMMC_CmdSelDesel>
 800e0ee:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <SD_InitCard+0x192>
  {
    return errorstate;
 800e0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f8:	e000      	b.n	800e0fc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3740      	adds	r7, #64	; 0x40
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e110:	2300      	movs	r3, #0
 800e112:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4618      	mov	r0, r3
 800e11e:	f004 f89c 	bl	801225a <SDMMC_CmdGoIdleState>
 800e122:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	e072      	b.n	800e214 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4618      	mov	r0, r3
 800e134:	f004 f8af 	bl	8012296 <SDMMC_CmdOperCond>
 800e138:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e140:	d10d      	bne.n	800e15e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f004 f884 	bl	801225a <SDMMC_CmdGoIdleState>
 800e152:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d004      	beq.n	800e164 <SD_PowerON+0x60>
    {
      return errorstate;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	e05a      	b.n	800e214 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d137      	bne.n	800e1dc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2100      	movs	r1, #0
 800e172:	4618      	mov	r0, r3
 800e174:	f004 f8af 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e178:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d02d      	beq.n	800e1dc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e180:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e184:	e046      	b.n	800e214 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2100      	movs	r1, #0
 800e18c:	4618      	mov	r0, r3
 800e18e:	f004 f8a2 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e192:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	e03a      	b.n	800e214 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	491e      	ldr	r1, [pc, #120]	; (800e21c <SD_PowerON+0x118>)
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f004 f8b9 	bl	801231c <SDMMC_CmdAppOperCommand>
 800e1aa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1b6:	e02d      	b.n	800e214 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f003 fefd 	bl	8011fbe <SDMMC_GetResponse>
 800e1c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	0fdb      	lsrs	r3, r3, #31
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d101      	bne.n	800e1d2 <SD_PowerON+0xce>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <SD_PowerON+0xd0>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	613b      	str	r3, [r7, #16]

    count++;
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d802      	bhi.n	800e1ec <SD_PowerON+0xe8>
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d0cc      	beq.n	800e186 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d902      	bls.n	800e1fc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e1f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1fa:	e00b      	b.n	800e214 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	c1100000 	.word	0xc1100000

0800e220 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08c      	sub	sp, #48	; 0x30
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e22a:	f7f5 fa43 	bl	80036b4 <HAL_GetTick>
 800e22e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2100      	movs	r1, #0
 800e23a:	4618      	mov	r0, r3
 800e23c:	f003 febf 	bl	8011fbe <SDMMC_GetResponse>
 800e240:	4603      	mov	r3, r0
 800e242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e24a:	d102      	bne.n	800e252 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e24c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e250:	e0b0      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2140      	movs	r1, #64	; 0x40
 800e258:	4618      	mov	r0, r3
 800e25a:	f003 feef 	bl	801203c <SDMMC_CmdBlockLength>
 800e25e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d005      	beq.n	800e272 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	e0a0      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e27a:	041b      	lsls	r3, r3, #16
 800e27c:	4619      	mov	r1, r3
 800e27e:	4610      	mov	r0, r2
 800e280:	f004 f829 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e284:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	e08d      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e298:	f04f 33ff 	mov.w	r3, #4294967295
 800e29c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e29e:	2340      	movs	r3, #64	; 0x40
 800e2a0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e2a2:	2360      	movs	r3, #96	; 0x60
 800e2a4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f107 0208 	add.w	r2, r7, #8
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f003 fe91 	bl	8011fe4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f004 f911 	bl	80124ee <SDMMC_CmdStatusRegister>
 800e2cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2ce:	6a3b      	ldr	r3, [r7, #32]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d02b      	beq.n	800e32c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2dc:	6a3b      	ldr	r3, [r7, #32]
 800e2de:	e069      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d013      	beq.n	800e316 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2f2:	e00d      	b.n	800e310 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f003 fdeb 	bl	8011ed4 <SDMMC_ReadFIFO>
 800e2fe:	4602      	mov	r2, r0
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	601a      	str	r2, [r3, #0]
        pData++;
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	3304      	adds	r3, #4
 800e308:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30c:	3301      	adds	r3, #1
 800e30e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	2b07      	cmp	r3, #7
 800e314:	d9ee      	bls.n	800e2f4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e316:	f7f5 f9cd 	bl	80036b4 <HAL_GetTick>
 800e31a:	4602      	mov	r2, r0
 800e31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e324:	d102      	bne.n	800e32c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e326:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e32a:	e043      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e332:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e336:	2b00      	cmp	r3, #0
 800e338:	d0d2      	beq.n	800e2e0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e348:	2308      	movs	r3, #8
 800e34a:	e033      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e352:	f003 0302 	and.w	r3, r3, #2
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e35a:	2302      	movs	r3, #2
 800e35c:	e02a      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e364:	f003 0320 	and.w	r3, r3, #32
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d017      	beq.n	800e39c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e36c:	2320      	movs	r3, #32
 800e36e:	e021      	b.n	800e3b4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4618      	mov	r0, r3
 800e376:	f003 fdad 	bl	8011ed4 <SDMMC_ReadFIFO>
 800e37a:	4602      	mov	r2, r0
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	601a      	str	r2, [r3, #0]
    pData++;
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	3304      	adds	r3, #4
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e386:	f7f5 f995 	bl	80036b4 <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e394:	d102      	bne.n	800e39c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e39a:	e00b      	b.n	800e3b4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1e2      	bne.n	800e370 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a03      	ldr	r2, [pc, #12]	; (800e3bc <SD_SendSDStatus+0x19c>)
 800e3b0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3730      	adds	r7, #48	; 0x30
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	18000f3a 	.word	0x18000f3a

0800e3c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d102      	bne.n	800e3d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e3d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e3d4:	e018      	b.n	800e408 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3de:	041b      	lsls	r3, r3, #16
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f004 f860 	bl	80124a8 <SDMMC_CmdSendStatus>
 800e3e8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d001      	beq.n	800e3f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	e009      	b.n	800e408 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f003 fddf 	bl	8011fbe <SDMMC_GetResponse>
 800e400:	4602      	mov	r2, r0
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	2300      	movs	r3, #0
 800e41e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f003 fdc9 	bl	8011fbe <SDMMC_GetResponse>
 800e42c:	4603      	mov	r3, r0
 800e42e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e436:	d102      	bne.n	800e43e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e43c:	e02f      	b.n	800e49e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e43e:	f107 030c 	add.w	r3, r7, #12
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f879 	bl	800e53c <SD_FindSCR>
 800e44a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d001      	beq.n	800e456 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	e023      	b.n	800e49e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01c      	beq.n	800e49a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e468:	041b      	lsls	r3, r3, #16
 800e46a:	4619      	mov	r1, r3
 800e46c:	4610      	mov	r0, r2
 800e46e:	f003 ff32 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e472:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d001      	beq.n	800e47e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	e00f      	b.n	800e49e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2102      	movs	r1, #2
 800e484:	4618      	mov	r0, r3
 800e486:	f003 ff69 	bl	801235c <SDMMC_CmdBusWidth>
 800e48a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	e003      	b.n	800e49e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e496:	2300      	movs	r3, #0
 800e498:	e001      	b.n	800e49e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e49a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b086      	sub	sp, #24
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f003 fd7e 	bl	8011fbe <SDMMC_GetResponse>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4cc:	d102      	bne.n	800e4d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4d2:	e02f      	b.n	800e534 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4d4:	f107 030c 	add.w	r3, r7, #12
 800e4d8:	4619      	mov	r1, r3
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f82e 	bl	800e53c <SD_FindSCR>
 800e4e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d001      	beq.n	800e4ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	e023      	b.n	800e534 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d01c      	beq.n	800e530 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4fe:	041b      	lsls	r3, r3, #16
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f003 fee7 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e508:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	e00f      	b.n	800e534 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2100      	movs	r1, #0
 800e51a:	4618      	mov	r0, r3
 800e51c:	f003 ff1e 	bl	801235c <SDMMC_CmdBusWidth>
 800e520:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e528:	697b      	ldr	r3, [r7, #20]
 800e52a:	e003      	b.n	800e534 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e52c:	2300      	movs	r3, #0
 800e52e:	e001      	b.n	800e534 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e530:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e534:	4618      	mov	r0, r3
 800e536:	3718      	adds	r7, #24
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b08e      	sub	sp, #56	; 0x38
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e546:	f7f5 f8b5 	bl	80036b4 <HAL_GetTick>
 800e54a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e54c:	2300      	movs	r3, #0
 800e54e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e550:	2300      	movs	r3, #0
 800e552:	60bb      	str	r3, [r7, #8]
 800e554:	2300      	movs	r3, #0
 800e556:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2108      	movs	r1, #8
 800e562:	4618      	mov	r0, r3
 800e564:	f003 fd6a 	bl	801203c <SDMMC_CmdBlockLength>
 800e568:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	e0ad      	b.n	800e6d0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57c:	041b      	lsls	r3, r3, #16
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f003 fea8 	bl	80122d6 <SDMMC_CmdAppCommand>
 800e586:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e590:	e09e      	b.n	800e6d0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e592:	f04f 33ff 	mov.w	r3, #4294967295
 800e596:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e598:	2308      	movs	r3, #8
 800e59a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e59c:	2330      	movs	r3, #48	; 0x30
 800e59e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f107 0210 	add.w	r2, r7, #16
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f003 fd14 	bl	8011fe4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f003 feee 	bl	80123a2 <SDMMC_CmdSendSCR>
 800e5c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d027      	beq.n	800e61e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d0:	e07e      	b.n	800e6d0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d113      	bne.n	800e608 <SD_FindSCR+0xcc>
 800e5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d110      	bne.n	800e608 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f003 fc72 	bl	8011ed4 <SDMMC_ReadFIFO>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f003 fc6b 	bl	8011ed4 <SDMMC_ReadFIFO>
 800e5fe:	4603      	mov	r3, r0
 800e600:	60fb      	str	r3, [r7, #12]
      index++;
 800e602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e604:	3301      	adds	r3, #1
 800e606:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e608:	f7f5 f854 	bl	80036b4 <HAL_GetTick>
 800e60c:	4602      	mov	r2, r0
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e616:	d102      	bne.n	800e61e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e61c:	e058      	b.n	800e6d0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e624:	f240 532a 	movw	r3, #1322	; 0x52a
 800e628:	4013      	ands	r3, r2
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0d1      	beq.n	800e5d2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e634:	f003 0308 	and.w	r3, r3, #8
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d005      	beq.n	800e648 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2208      	movs	r2, #8
 800e642:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e644:	2308      	movs	r3, #8
 800e646:	e043      	b.n	800e6d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64e:	f003 0302 	and.w	r3, r3, #2
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2202      	movs	r2, #2
 800e65c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e65e:	2302      	movs	r3, #2
 800e660:	e036      	b.n	800e6d0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e668:	f003 0320 	and.w	r3, r3, #32
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d005      	beq.n	800e67c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2220      	movs	r2, #32
 800e676:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e678:	2320      	movs	r3, #32
 800e67a:	e029      	b.n	800e6d0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a15      	ldr	r2, [pc, #84]	; (800e6d8 <SD_FindSCR+0x19c>)
 800e682:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	061a      	lsls	r2, r3, #24
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	021b      	lsls	r3, r3, #8
 800e68c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e690:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	0a1b      	lsrs	r3, r3, #8
 800e696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e69a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	0e1b      	lsrs	r3, r3, #24
 800e6a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	601a      	str	r2, [r3, #0]
    scr++;
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	061a      	lsls	r2, r3, #24
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	021b      	lsls	r3, r3, #8
 800e6b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e6b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	0a1b      	lsrs	r3, r3, #8
 800e6be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	0e1b      	lsrs	r3, r3, #24
 800e6c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3738      	adds	r7, #56	; 0x38
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	18000f3a 	.word	0x18000f3a

0800e6dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ee:	2b1f      	cmp	r3, #31
 800e6f0:	d936      	bls.n	800e760 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	617b      	str	r3, [r7, #20]
 800e6f6:	e027      	b.n	800e748 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f003 fbe9 	bl	8011ed4 <SDMMC_ReadFIFO>
 800e702:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	b2da      	uxtb	r2, r3
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3301      	adds	r3, #1
 800e710:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	0a1b      	lsrs	r3, r3, #8
 800e716:	b2da      	uxtb	r2, r3
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	3301      	adds	r3, #1
 800e720:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	0c1b      	lsrs	r3, r3, #16
 800e726:	b2da      	uxtb	r2, r3
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	3301      	adds	r3, #1
 800e730:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	0e1b      	lsrs	r3, r3, #24
 800e736:	b2da      	uxtb	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	3301      	adds	r3, #1
 800e740:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	3301      	adds	r3, #1
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	2b07      	cmp	r3, #7
 800e74c:	d9d4      	bls.n	800e6f8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e758:	f1a3 0220 	sub.w	r2, r3, #32
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e760:	bf00      	nop
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}

0800e768 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	2b1f      	cmp	r3, #31
 800e77c:	d93a      	bls.n	800e7f4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e77e:	2300      	movs	r3, #0
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	e02b      	b.n	800e7dc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	3301      	adds	r3, #1
 800e78e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	021a      	lsls	r2, r3, #8
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	4313      	orrs	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	041a      	lsls	r2, r3, #16
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	061a      	lsls	r2, r3, #24
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f107 020c 	add.w	r2, r7, #12
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f003 fb8c 	bl	8011eee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	617b      	str	r3, [r7, #20]
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	d9d0      	bls.n	800e784 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	693a      	ldr	r2, [r7, #16]
 800e7e6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	f1a3 0220 	sub.w	r2, r3, #32
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	621a      	str	r2, [r3, #32]
  }
}
 800e7f4:	bf00      	nop
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e804:	bf00      	nop
 800e806:	370c      	adds	r7, #12
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d101      	bne.n	800e85e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e85a:	2301      	movs	r3, #1
 800e85c:	e10f      	b.n	800ea7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a87      	ldr	r2, [pc, #540]	; (800ea88 <HAL_SPI_Init+0x23c>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d00f      	beq.n	800e88e <HAL_SPI_Init+0x42>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4a86      	ldr	r2, [pc, #536]	; (800ea8c <HAL_SPI_Init+0x240>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d00a      	beq.n	800e88e <HAL_SPI_Init+0x42>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a84      	ldr	r2, [pc, #528]	; (800ea90 <HAL_SPI_Init+0x244>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d005      	beq.n	800e88e <HAL_SPI_Init+0x42>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	2b0f      	cmp	r3, #15
 800e888:	d901      	bls.n	800e88e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	e0f7      	b.n	800ea7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fd5a 	bl	800f348 <SPI_GetPacketSize>
 800e894:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a7b      	ldr	r2, [pc, #492]	; (800ea88 <HAL_SPI_Init+0x23c>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d00c      	beq.n	800e8ba <HAL_SPI_Init+0x6e>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a79      	ldr	r2, [pc, #484]	; (800ea8c <HAL_SPI_Init+0x240>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d007      	beq.n	800e8ba <HAL_SPI_Init+0x6e>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a78      	ldr	r2, [pc, #480]	; (800ea90 <HAL_SPI_Init+0x244>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d002      	beq.n	800e8ba <HAL_SPI_Init+0x6e>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2b08      	cmp	r3, #8
 800e8b8:	d811      	bhi.n	800e8de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e8be:	4a72      	ldr	r2, [pc, #456]	; (800ea88 <HAL_SPI_Init+0x23c>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d009      	beq.n	800e8d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4a70      	ldr	r2, [pc, #448]	; (800ea8c <HAL_SPI_Init+0x240>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d004      	beq.n	800e8d8 <HAL_SPI_Init+0x8c>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	4a6f      	ldr	r2, [pc, #444]	; (800ea90 <HAL_SPI_Init+0x244>)
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	d104      	bne.n	800e8e2 <HAL_SPI_Init+0x96>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2b10      	cmp	r3, #16
 800e8dc:	d901      	bls.n	800e8e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	e0cd      	b.n	800ea7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d106      	bne.n	800e8fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7f4 f84c 	bl	8002994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f022 0201 	bic.w	r2, r2, #1
 800e912:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e91e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e928:	d119      	bne.n	800e95e <HAL_SPI_Init+0x112>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e932:	d103      	bne.n	800e93c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d008      	beq.n	800e94e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10c      	bne.n	800e95e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e94c:	d107      	bne.n	800e95e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e95c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00f      	beq.n	800e98a <HAL_SPI_Init+0x13e>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	2b06      	cmp	r3, #6
 800e970:	d90b      	bls.n	800e98a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	430a      	orrs	r2, r1
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	e007      	b.n	800e99a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e998:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	69da      	ldr	r2, [r3, #28]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a2:	431a      	orrs	r2, r3
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	431a      	orrs	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ac:	ea42 0103 	orr.w	r1, r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	68da      	ldr	r2, [r3, #12]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	430a      	orrs	r2, r1
 800e9ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c4:	431a      	orrs	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ca:	431a      	orrs	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	699b      	ldr	r3, [r3, #24]
 800e9d0:	431a      	orrs	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	431a      	orrs	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	431a      	orrs	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6a1b      	ldr	r3, [r3, #32]
 800e9e2:	431a      	orrs	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	431a      	orrs	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9ee:	431a      	orrs	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	431a      	orrs	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9fa:	ea42 0103 	orr.w	r1, r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	430a      	orrs	r2, r1
 800ea08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d113      	bne.n	800ea3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f022 0201 	bic.w	r2, r2, #1
 800ea48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00a      	beq.n	800ea6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	430a      	orrs	r2, r1
 800ea6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	40013000 	.word	0x40013000
 800ea8c:	40003800 	.word	0x40003800
 800ea90:	40003c00 	.word	0x40003c00

0800ea94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b08a      	sub	sp, #40	; 0x28
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	3320      	adds	r3, #32
 800eaaa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d101      	bne.n	800eabe <HAL_SPI_Transmit+0x2a>
 800eaba:	2302      	movs	r3, #2
 800eabc:	e1e1      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eac6:	f7f4 fdf5 	bl	80036b4 <HAL_GetTick>
 800eaca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d007      	beq.n	800eae8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ead8:	2302      	movs	r3, #2
 800eada:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eae4:	7efb      	ldrb	r3, [r7, #27]
 800eae6:	e1cc      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <HAL_SPI_Transmit+0x60>
 800eaee:	88fb      	ldrh	r3, [r7, #6]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d107      	bne.n	800eb04 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb00:	7efb      	ldrb	r3, [r7, #27]
 800eb02:	e1be      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2203      	movs	r2, #3
 800eb08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	88fa      	ldrh	r2, [r7, #6]
 800eb1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	88fa      	ldrh	r2, [r7, #6]
 800eb26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb54:	d108      	bne.n	800eb68 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	e009      	b.n	800eb7c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb7a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	4b96      	ldr	r3, [pc, #600]	; (800eddc <HAL_SPI_Transmit+0x348>)
 800eb84:	4013      	ands	r3, r2
 800eb86:	88f9      	ldrh	r1, [r7, #6]
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	6812      	ldr	r2, [r2, #0]
 800eb8c:	430b      	orrs	r3, r1
 800eb8e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f042 0201 	orr.w	r2, r2, #1
 800eb9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eba8:	d107      	bne.n	800ebba <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ebb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	2b0f      	cmp	r3, #15
 800ebc0:	d947      	bls.n	800ec52 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ebc2:	e03f      	b.n	800ec44 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	f003 0302 	and.w	r3, r3, #2
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d114      	bne.n	800ebfc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	6812      	ldr	r2, [r2, #0]
 800ebdc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ebe2:	1d1a      	adds	r2, r3, #4
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ebfa:	e023      	b.n	800ec44 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebfc:	f7f4 fd5a 	bl	80036b4 <HAL_GetTick>
 800ec00:	4602      	mov	r2, r0
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	1ad3      	subs	r3, r2, r3
 800ec06:	683a      	ldr	r2, [r7, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d803      	bhi.n	800ec14 <HAL_SPI_Transmit+0x180>
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d102      	bne.n	800ec1a <HAL_SPI_Transmit+0x186>
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d114      	bne.n	800ec44 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 fac6 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ec40:	2303      	movs	r3, #3
 800ec42:	e11e      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1b9      	bne.n	800ebc4 <HAL_SPI_Transmit+0x130>
 800ec50:	e0f1      	b.n	800ee36 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2b07      	cmp	r3, #7
 800ec58:	f240 80e6 	bls.w	800ee28 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec5c:	e05d      	b.n	800ed1a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	f003 0302 	and.w	r3, r3, #2
 800ec68:	2b02      	cmp	r3, #2
 800ec6a:	d132      	bne.n	800ecd2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d918      	bls.n	800ecaa <HAL_SPI_Transmit+0x216>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d014      	beq.n	800ecaa <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	6812      	ldr	r2, [r2, #0]
 800ec8a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec90:	1d1a      	adds	r2, r3, #4
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b02      	subs	r3, #2
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eca8:	e037      	b.n	800ed1a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecae:	881a      	ldrh	r2, [r3, #0]
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecb8:	1c9a      	adds	r2, r3, #2
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecd0:	e023      	b.n	800ed1a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecd2:	f7f4 fcef 	bl	80036b4 <HAL_GetTick>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	1ad3      	subs	r3, r2, r3
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d803      	bhi.n	800ecea <HAL_SPI_Transmit+0x256>
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece8:	d102      	bne.n	800ecf0 <HAL_SPI_Transmit+0x25c>
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d114      	bne.n	800ed1a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f000 fa5b 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e0b3      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d19b      	bne.n	800ec5e <HAL_SPI_Transmit+0x1ca>
 800ed26:	e086      	b.n	800ee36 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d154      	bne.n	800ede0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d918      	bls.n	800ed74 <HAL_SPI_Transmit+0x2e0>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed46:	2b40      	cmp	r3, #64	; 0x40
 800ed48:	d914      	bls.n	800ed74 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6812      	ldr	r2, [r2, #0]
 800ed54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5a:	1d1a      	adds	r2, r3, #4
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	3b04      	subs	r3, #4
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed72:	e059      	b.n	800ee28 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d917      	bls.n	800edb0 <HAL_SPI_Transmit+0x31c>
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d013      	beq.n	800edb0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed8c:	881a      	ldrh	r2, [r3, #0]
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed96:	1c9a      	adds	r2, r3, #2
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	3b02      	subs	r3, #2
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edae:	e03b      	b.n	800ee28 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	3320      	adds	r3, #32
 800edba:	7812      	ldrb	r2, [r2, #0]
 800edbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edc2:	1c5a      	adds	r2, r3, #1
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edce:	b29b      	uxth	r3, r3
 800edd0:	3b01      	subs	r3, #1
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edda:	e025      	b.n	800ee28 <HAL_SPI_Transmit+0x394>
 800eddc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ede0:	f7f4 fc68 	bl	80036b4 <HAL_GetTick>
 800ede4:	4602      	mov	r2, r0
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	683a      	ldr	r2, [r7, #0]
 800edec:	429a      	cmp	r2, r3
 800edee:	d803      	bhi.n	800edf8 <HAL_SPI_Transmit+0x364>
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf6:	d102      	bne.n	800edfe <HAL_SPI_Transmit+0x36a>
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d114      	bne.n	800ee28 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f000 f9d4 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2200      	movs	r2, #0
 800ee08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee24:	2303      	movs	r3, #3
 800ee26:	e02c      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f47f af79 	bne.w	800ed28 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2108      	movs	r1, #8
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 fa53 	bl	800f2ec <SPI_WaitOnFlagUntilTimeout>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d007      	beq.n	800ee5c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee52:	f043 0220 	orr.w	r2, r3, #32
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f000 f9a5 	bl	800f1ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d001      	beq.n	800ee80 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e000      	b.n	800ee82 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ee80:	7efb      	ldrb	r3, [r7, #27]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3720      	adds	r7, #32
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop

0800ee8c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	60f8      	str	r0, [r7, #12]
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	603b      	str	r3, [r7, #0]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3330      	adds	r3, #48	; 0x30
 800eea6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d101      	bne.n	800eeb6 <HAL_SPI_Receive+0x2a>
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	e173      	b.n	800f19e <HAL_SPI_Receive+0x312>
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eebe:	f7f4 fbf9 	bl	80036b4 <HAL_GetTick>
 800eec2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d007      	beq.n	800eee0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800eed0:	2302      	movs	r3, #2
 800eed2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eedc:	7ffb      	ldrb	r3, [r7, #31]
 800eede:	e15e      	b.n	800f19e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <HAL_SPI_Receive+0x60>
 800eee6:	88fb      	ldrh	r3, [r7, #6]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d107      	bne.n	800eefc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800eeec:	2301      	movs	r3, #1
 800eeee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eef8:	7ffb      	ldrb	r3, [r7, #31]
 800eefa:	e150      	b.n	800f19e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2204      	movs	r2, #4
 800ef00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	88fa      	ldrh	r2, [r7, #6]
 800ef16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	88fa      	ldrh	r2, [r7, #6]
 800ef1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2200      	movs	r2, #0
 800ef42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ef4c:	d108      	bne.n	800ef60 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	e009      	b.n	800ef74 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685a      	ldr	r2, [r3, #4]
 800ef7a:	4b8b      	ldr	r3, [pc, #556]	; (800f1a8 <HAL_SPI_Receive+0x31c>)
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	88f9      	ldrh	r1, [r7, #6]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	6812      	ldr	r2, [r2, #0]
 800ef84:	430b      	orrs	r3, r1
 800ef86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	f042 0201 	orr.w	r2, r2, #1
 800ef96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efa0:	d107      	bne.n	800efb2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	2b0f      	cmp	r3, #15
 800efb8:	d948      	bls.n	800f04c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800efba:	e040      	b.n	800f03e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	695a      	ldr	r2, [r3, #20]
 800efc2:	f248 0308 	movw	r3, #32776	; 0x8008
 800efc6:	4013      	ands	r3, r2
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d014      	beq.n	800eff6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681a      	ldr	r2, [r3, #0]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800efd6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efdc:	1d1a      	adds	r2, r3, #4
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efe8:	b29b      	uxth	r3, r3
 800efea:	3b01      	subs	r3, #1
 800efec:	b29a      	uxth	r2, r3
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eff4:	e023      	b.n	800f03e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eff6:	f7f4 fb5d 	bl	80036b4 <HAL_GetTick>
 800effa:	4602      	mov	r2, r0
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	429a      	cmp	r2, r3
 800f004:	d803      	bhi.n	800f00e <HAL_SPI_Receive+0x182>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f00c:	d102      	bne.n	800f014 <HAL_SPI_Receive+0x188>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d114      	bne.n	800f03e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f000 f8c9 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2201      	movs	r2, #1
 800f036:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f03a:	2303      	movs	r3, #3
 800f03c:	e0af      	b.n	800f19e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f044:	b29b      	uxth	r3, r3
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1b8      	bne.n	800efbc <HAL_SPI_Receive+0x130>
 800f04a:	e095      	b.n	800f178 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b07      	cmp	r3, #7
 800f052:	f240 808b 	bls.w	800f16c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f056:	e03f      	b.n	800f0d8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	695b      	ldr	r3, [r3, #20]
 800f05e:	f003 0301 	and.w	r3, r3, #1
 800f062:	2b01      	cmp	r3, #1
 800f064:	d114      	bne.n	800f090 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f06a:	69ba      	ldr	r2, [r7, #24]
 800f06c:	8812      	ldrh	r2, [r2, #0]
 800f06e:	b292      	uxth	r2, r2
 800f070:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f076:	1c9a      	adds	r2, r3, #2
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f082:	b29b      	uxth	r3, r3
 800f084:	3b01      	subs	r3, #1
 800f086:	b29a      	uxth	r2, r3
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f08e:	e023      	b.n	800f0d8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f090:	f7f4 fb10 	bl	80036b4 <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d803      	bhi.n	800f0a8 <HAL_SPI_Receive+0x21c>
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a6:	d102      	bne.n	800f0ae <HAL_SPI_Receive+0x222>
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d114      	bne.n	800f0d8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f000 f87c 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	e062      	b.n	800f19e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1b9      	bne.n	800f058 <HAL_SPI_Receive+0x1cc>
 800f0e4:	e048      	b.n	800f178 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	f003 0301 	and.w	r3, r3, #1
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d117      	bne.n	800f124 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f100:	7812      	ldrb	r2, [r2, #0]
 800f102:	b2d2      	uxtb	r2, r2
 800f104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f10a:	1c5a      	adds	r2, r3, #1
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f116:	b29b      	uxth	r3, r3
 800f118:	3b01      	subs	r3, #1
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f122:	e023      	b.n	800f16c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f124:	f7f4 fac6 	bl	80036b4 <HAL_GetTick>
 800f128:	4602      	mov	r2, r0
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	429a      	cmp	r2, r3
 800f132:	d803      	bhi.n	800f13c <HAL_SPI_Receive+0x2b0>
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f13a:	d102      	bne.n	800f142 <HAL_SPI_Receive+0x2b6>
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d114      	bne.n	800f16c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f000 f832 	bl	800f1ac <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2201      	movs	r2, #1
 800f164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f168:	2303      	movs	r3, #3
 800f16a:	e018      	b.n	800f19e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f172:	b29b      	uxth	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1b6      	bne.n	800f0e6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 f817 	bl	800f1ac <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f198:	2301      	movs	r3, #1
 800f19a:	e000      	b.n	800f19e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f19c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3720      	adds	r7, #32
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	ffff0000 	.word	0xffff0000

0800f1ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	695b      	ldr	r3, [r3, #20]
 800f1ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	699a      	ldr	r2, [r3, #24]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f042 0208 	orr.w	r2, r2, #8
 800f1ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	699a      	ldr	r2, [r3, #24]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f042 0210 	orr.w	r2, r2, #16
 800f1da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f022 0201 	bic.w	r2, r2, #1
 800f1ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6919      	ldr	r1, [r3, #16]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	4b3c      	ldr	r3, [pc, #240]	; (800f2e8 <SPI_CloseTransfer+0x13c>)
 800f1f8:	400b      	ands	r3, r1
 800f1fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	689a      	ldr	r2, [r3, #8]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f20a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b04      	cmp	r3, #4
 800f216:	d014      	beq.n	800f242 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f003 0320 	and.w	r3, r3, #32
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00f      	beq.n	800f242 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f228:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	699a      	ldr	r2, [r3, #24]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f042 0220 	orr.w	r2, r2, #32
 800f240:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d014      	beq.n	800f278 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00f      	beq.n	800f278 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f25e:	f043 0204 	orr.w	r2, r3, #4
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f276:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00f      	beq.n	800f2a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f288:	f043 0201 	orr.w	r2, r3, #1
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	699a      	ldr	r2, [r3, #24]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00f      	beq.n	800f2cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2b2:	f043 0208 	orr.w	r2, r3, #8
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	699a      	ldr	r2, [r3, #24]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f2dc:	bf00      	nop
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	fffffc90 	.word	0xfffffc90

0800f2ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	603b      	str	r3, [r7, #0]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2fc:	e010      	b.n	800f320 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2fe:	f7f4 f9d9 	bl	80036b4 <HAL_GetTick>
 800f302:	4602      	mov	r2, r0
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d803      	bhi.n	800f316 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f314:	d102      	bne.n	800f31c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f31c:	2303      	movs	r3, #3
 800f31e:	e00f      	b.n	800f340 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	695a      	ldr	r2, [r3, #20]
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	4013      	ands	r3, r2
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	bf0c      	ite	eq
 800f330:	2301      	moveq	r3, #1
 800f332:	2300      	movne	r3, #0
 800f334:	b2db      	uxtb	r3, r3
 800f336:	461a      	mov	r2, r3
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d0df      	beq.n	800f2fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3710      	adds	r7, #16
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f354:	095b      	lsrs	r3, r3, #5
 800f356:	3301      	adds	r3, #1
 800f358:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	3301      	adds	r3, #1
 800f360:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	3307      	adds	r3, #7
 800f366:	08db      	lsrs	r3, r3, #3
 800f368:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	fb02 f303 	mul.w	r3, r2, r3
}
 800f372:	4618      	mov	r0, r3
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b082      	sub	sp, #8
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f38c:	2301      	movs	r3, #1
 800f38e:	e049      	b.n	800f424 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d106      	bne.n	800f3aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7f3 fd47 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2202      	movs	r2, #2
 800f3ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	4610      	mov	r0, r2
 800f3be:	f000 ff29 	bl	8010214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2201      	movs	r2, #1
 800f406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2201      	movs	r2, #1
 800f40e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2201      	movs	r2, #1
 800f416:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2201      	movs	r2, #1
 800f41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d101      	bne.n	800f43e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e049      	b.n	800f4d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b00      	cmp	r3, #0
 800f448:	d106      	bne.n	800f458 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7f3 fb5a 	bl	8002b0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2202      	movs	r2, #2
 800f45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3304      	adds	r3, #4
 800f468:	4619      	mov	r1, r3
 800f46a:	4610      	mov	r0, r2
 800f46c:	f000 fed2 	bl	8010214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2201      	movs	r2, #1
 800f47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2201      	movs	r2, #1
 800f494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
	...

0800f4dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d109      	bne.n	800f500 <HAL_TIM_PWM_Start+0x24>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	bf14      	ite	ne
 800f4f8:	2301      	movne	r3, #1
 800f4fa:	2300      	moveq	r3, #0
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	e03c      	b.n	800f57a <HAL_TIM_PWM_Start+0x9e>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b04      	cmp	r3, #4
 800f504:	d109      	bne.n	800f51a <HAL_TIM_PWM_Start+0x3e>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	2b01      	cmp	r3, #1
 800f510:	bf14      	ite	ne
 800f512:	2301      	movne	r3, #1
 800f514:	2300      	moveq	r3, #0
 800f516:	b2db      	uxtb	r3, r3
 800f518:	e02f      	b.n	800f57a <HAL_TIM_PWM_Start+0x9e>
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b08      	cmp	r3, #8
 800f51e:	d109      	bne.n	800f534 <HAL_TIM_PWM_Start+0x58>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b01      	cmp	r3, #1
 800f52a:	bf14      	ite	ne
 800f52c:	2301      	movne	r3, #1
 800f52e:	2300      	moveq	r3, #0
 800f530:	b2db      	uxtb	r3, r3
 800f532:	e022      	b.n	800f57a <HAL_TIM_PWM_Start+0x9e>
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	2b0c      	cmp	r3, #12
 800f538:	d109      	bne.n	800f54e <HAL_TIM_PWM_Start+0x72>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b01      	cmp	r3, #1
 800f544:	bf14      	ite	ne
 800f546:	2301      	movne	r3, #1
 800f548:	2300      	moveq	r3, #0
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	e015      	b.n	800f57a <HAL_TIM_PWM_Start+0x9e>
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b10      	cmp	r3, #16
 800f552:	d109      	bne.n	800f568 <HAL_TIM_PWM_Start+0x8c>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	bf14      	ite	ne
 800f560:	2301      	movne	r3, #1
 800f562:	2300      	moveq	r3, #0
 800f564:	b2db      	uxtb	r3, r3
 800f566:	e008      	b.n	800f57a <HAL_TIM_PWM_Start+0x9e>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b01      	cmp	r3, #1
 800f572:	bf14      	ite	ne
 800f574:	2301      	movne	r3, #1
 800f576:	2300      	moveq	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f57e:	2301      	movs	r3, #1
 800f580:	e0ab      	b.n	800f6da <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d104      	bne.n	800f592 <HAL_TIM_PWM_Start+0xb6>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2202      	movs	r2, #2
 800f58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f590:	e023      	b.n	800f5da <HAL_TIM_PWM_Start+0xfe>
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b04      	cmp	r3, #4
 800f596:	d104      	bne.n	800f5a2 <HAL_TIM_PWM_Start+0xc6>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2202      	movs	r2, #2
 800f59c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f5a0:	e01b      	b.n	800f5da <HAL_TIM_PWM_Start+0xfe>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b08      	cmp	r3, #8
 800f5a6:	d104      	bne.n	800f5b2 <HAL_TIM_PWM_Start+0xd6>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f5b0:	e013      	b.n	800f5da <HAL_TIM_PWM_Start+0xfe>
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	2b0c      	cmp	r3, #12
 800f5b6:	d104      	bne.n	800f5c2 <HAL_TIM_PWM_Start+0xe6>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5c0:	e00b      	b.n	800f5da <HAL_TIM_PWM_Start+0xfe>
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	2b10      	cmp	r3, #16
 800f5c6:	d104      	bne.n	800f5d2 <HAL_TIM_PWM_Start+0xf6>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5d0:	e003      	b.n	800f5da <HAL_TIM_PWM_Start+0xfe>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2202      	movs	r2, #2
 800f5d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	6839      	ldr	r1, [r7, #0]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f001 f992 	bl	801090c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a3d      	ldr	r2, [pc, #244]	; (800f6e4 <HAL_TIM_PWM_Start+0x208>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d013      	beq.n	800f61a <HAL_TIM_PWM_Start+0x13e>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a3c      	ldr	r2, [pc, #240]	; (800f6e8 <HAL_TIM_PWM_Start+0x20c>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d00e      	beq.n	800f61a <HAL_TIM_PWM_Start+0x13e>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a3a      	ldr	r2, [pc, #232]	; (800f6ec <HAL_TIM_PWM_Start+0x210>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d009      	beq.n	800f61a <HAL_TIM_PWM_Start+0x13e>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a39      	ldr	r2, [pc, #228]	; (800f6f0 <HAL_TIM_PWM_Start+0x214>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d004      	beq.n	800f61a <HAL_TIM_PWM_Start+0x13e>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a37      	ldr	r2, [pc, #220]	; (800f6f4 <HAL_TIM_PWM_Start+0x218>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d101      	bne.n	800f61e <HAL_TIM_PWM_Start+0x142>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e000      	b.n	800f620 <HAL_TIM_PWM_Start+0x144>
 800f61e:	2300      	movs	r3, #0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f632:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a2a      	ldr	r2, [pc, #168]	; (800f6e4 <HAL_TIM_PWM_Start+0x208>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d02c      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f646:	d027      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	4a2a      	ldr	r2, [pc, #168]	; (800f6f8 <HAL_TIM_PWM_Start+0x21c>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d022      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a29      	ldr	r2, [pc, #164]	; (800f6fc <HAL_TIM_PWM_Start+0x220>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d01d      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	4a27      	ldr	r2, [pc, #156]	; (800f700 <HAL_TIM_PWM_Start+0x224>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d018      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a1f      	ldr	r2, [pc, #124]	; (800f6e8 <HAL_TIM_PWM_Start+0x20c>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d013      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a23      	ldr	r2, [pc, #140]	; (800f704 <HAL_TIM_PWM_Start+0x228>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d00e      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a1b      	ldr	r2, [pc, #108]	; (800f6ec <HAL_TIM_PWM_Start+0x210>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d009      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a1f      	ldr	r2, [pc, #124]	; (800f708 <HAL_TIM_PWM_Start+0x22c>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d004      	beq.n	800f698 <HAL_TIM_PWM_Start+0x1bc>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	4a1e      	ldr	r2, [pc, #120]	; (800f70c <HAL_TIM_PWM_Start+0x230>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d115      	bne.n	800f6c4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	689a      	ldr	r2, [r3, #8]
 800f69e:	4b1c      	ldr	r3, [pc, #112]	; (800f710 <HAL_TIM_PWM_Start+0x234>)
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2b06      	cmp	r3, #6
 800f6a8:	d015      	beq.n	800f6d6 <HAL_TIM_PWM_Start+0x1fa>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6b0:	d011      	beq.n	800f6d6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f042 0201 	orr.w	r2, r2, #1
 800f6c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6c2:	e008      	b.n	800f6d6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	f042 0201 	orr.w	r2, r2, #1
 800f6d2:	601a      	str	r2, [r3, #0]
 800f6d4:	e000      	b.n	800f6d8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	40010000 	.word	0x40010000
 800f6e8:	40010400 	.word	0x40010400
 800f6ec:	40014000 	.word	0x40014000
 800f6f0:	40014400 	.word	0x40014400
 800f6f4:	40014800 	.word	0x40014800
 800f6f8:	40000400 	.word	0x40000400
 800f6fc:	40000800 	.word	0x40000800
 800f700:	40000c00 	.word	0x40000c00
 800f704:	40001800 	.word	0x40001800
 800f708:	4000e000 	.word	0x4000e000
 800f70c:	4000e400 	.word	0x4000e400
 800f710:	00010007 	.word	0x00010007

0800f714 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b086      	sub	sp, #24
 800f718:	af00      	add	r7, sp, #0
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d109      	bne.n	800f740 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b02      	cmp	r3, #2
 800f736:	bf0c      	ite	eq
 800f738:	2301      	moveq	r3, #1
 800f73a:	2300      	movne	r3, #0
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	e03c      	b.n	800f7ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	2b04      	cmp	r3, #4
 800f744:	d109      	bne.n	800f75a <HAL_TIM_PWM_Start_DMA+0x46>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b02      	cmp	r3, #2
 800f750:	bf0c      	ite	eq
 800f752:	2301      	moveq	r3, #1
 800f754:	2300      	movne	r3, #0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	e02f      	b.n	800f7ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	2b08      	cmp	r3, #8
 800f75e:	d109      	bne.n	800f774 <HAL_TIM_PWM_Start_DMA+0x60>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b02      	cmp	r3, #2
 800f76a:	bf0c      	ite	eq
 800f76c:	2301      	moveq	r3, #1
 800f76e:	2300      	movne	r3, #0
 800f770:	b2db      	uxtb	r3, r3
 800f772:	e022      	b.n	800f7ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	2b0c      	cmp	r3, #12
 800f778:	d109      	bne.n	800f78e <HAL_TIM_PWM_Start_DMA+0x7a>
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b02      	cmp	r3, #2
 800f784:	bf0c      	ite	eq
 800f786:	2301      	moveq	r3, #1
 800f788:	2300      	movne	r3, #0
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	e015      	b.n	800f7ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b10      	cmp	r3, #16
 800f792:	d109      	bne.n	800f7a8 <HAL_TIM_PWM_Start_DMA+0x94>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	bf0c      	ite	eq
 800f7a0:	2301      	moveq	r3, #1
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	e008      	b.n	800f7ba <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	bf0c      	ite	eq
 800f7b4:	2301      	moveq	r3, #1
 800f7b6:	2300      	movne	r3, #0
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d001      	beq.n	800f7c2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f7be:	2302      	movs	r3, #2
 800f7c0:	e1ba      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d109      	bne.n	800f7dc <HAL_TIM_PWM_Start_DMA+0xc8>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	bf0c      	ite	eq
 800f7d4:	2301      	moveq	r3, #1
 800f7d6:	2300      	movne	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	e03c      	b.n	800f856 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	2b04      	cmp	r3, #4
 800f7e0:	d109      	bne.n	800f7f6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	bf0c      	ite	eq
 800f7ee:	2301      	moveq	r3, #1
 800f7f0:	2300      	movne	r3, #0
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	e02f      	b.n	800f856 <HAL_TIM_PWM_Start_DMA+0x142>
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b08      	cmp	r3, #8
 800f7fa:	d109      	bne.n	800f810 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	bf0c      	ite	eq
 800f808:	2301      	moveq	r3, #1
 800f80a:	2300      	movne	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	e022      	b.n	800f856 <HAL_TIM_PWM_Start_DMA+0x142>
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2b0c      	cmp	r3, #12
 800f814:	d109      	bne.n	800f82a <HAL_TIM_PWM_Start_DMA+0x116>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	2b01      	cmp	r3, #1
 800f820:	bf0c      	ite	eq
 800f822:	2301      	moveq	r3, #1
 800f824:	2300      	movne	r3, #0
 800f826:	b2db      	uxtb	r3, r3
 800f828:	e015      	b.n	800f856 <HAL_TIM_PWM_Start_DMA+0x142>
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b10      	cmp	r3, #16
 800f82e:	d109      	bne.n	800f844 <HAL_TIM_PWM_Start_DMA+0x130>
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b01      	cmp	r3, #1
 800f83a:	bf0c      	ite	eq
 800f83c:	2301      	moveq	r3, #1
 800f83e:	2300      	movne	r3, #0
 800f840:	b2db      	uxtb	r3, r3
 800f842:	e008      	b.n	800f856 <HAL_TIM_PWM_Start_DMA+0x142>
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	bf0c      	ite	eq
 800f850:	2301      	moveq	r3, #1
 800f852:	2300      	movne	r3, #0
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d034      	beq.n	800f8c4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <HAL_TIM_PWM_Start_DMA+0x152>
 800f860:	887b      	ldrh	r3, [r7, #2]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f866:	2301      	movs	r3, #1
 800f868:	e166      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d104      	bne.n	800f87a <HAL_TIM_PWM_Start_DMA+0x166>
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2202      	movs	r2, #2
 800f874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f878:	e026      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	2b04      	cmp	r3, #4
 800f87e:	d104      	bne.n	800f88a <HAL_TIM_PWM_Start_DMA+0x176>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2202      	movs	r2, #2
 800f884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f888:	e01e      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2b08      	cmp	r3, #8
 800f88e:	d104      	bne.n	800f89a <HAL_TIM_PWM_Start_DMA+0x186>
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2202      	movs	r2, #2
 800f894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f898:	e016      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b0c      	cmp	r3, #12
 800f89e:	d104      	bne.n	800f8aa <HAL_TIM_PWM_Start_DMA+0x196>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8a8:	e00e      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2b10      	cmp	r3, #16
 800f8ae:	d104      	bne.n	800f8ba <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2202      	movs	r2, #2
 800f8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8b8:	e006      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2202      	movs	r2, #2
 800f8be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8c2:	e001      	b.n	800f8c8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e137      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	2b0c      	cmp	r3, #12
 800f8cc:	f200 80ae 	bhi.w	800fa2c <HAL_TIM_PWM_Start_DMA+0x318>
 800f8d0:	a201      	add	r2, pc, #4	; (adr r2, 800f8d8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d6:	bf00      	nop
 800f8d8:	0800f90d 	.word	0x0800f90d
 800f8dc:	0800fa2d 	.word	0x0800fa2d
 800f8e0:	0800fa2d 	.word	0x0800fa2d
 800f8e4:	0800fa2d 	.word	0x0800fa2d
 800f8e8:	0800f955 	.word	0x0800f955
 800f8ec:	0800fa2d 	.word	0x0800fa2d
 800f8f0:	0800fa2d 	.word	0x0800fa2d
 800f8f4:	0800fa2d 	.word	0x0800fa2d
 800f8f8:	0800f99d 	.word	0x0800f99d
 800f8fc:	0800fa2d 	.word	0x0800fa2d
 800f900:	0800fa2d 	.word	0x0800fa2d
 800f904:	0800fa2d 	.word	0x0800fa2d
 800f908:	0800f9e5 	.word	0x0800f9e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	4a8b      	ldr	r2, [pc, #556]	; (800fb40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f912:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f918:	4a8a      	ldr	r2, [pc, #552]	; (800fb44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f91a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f920:	4a89      	ldr	r2, [pc, #548]	; (800fb48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f922:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f928:	6879      	ldr	r1, [r7, #4]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	3334      	adds	r3, #52	; 0x34
 800f930:	461a      	mov	r2, r3
 800f932:	887b      	ldrh	r3, [r7, #2]
 800f934:	f7f5 fedc 	bl	80056f0 <HAL_DMA_Start_IT>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d001      	beq.n	800f942 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f93e:	2301      	movs	r3, #1
 800f940:	e0fa      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f950:	60da      	str	r2, [r3, #12]
      break;
 800f952:	e06e      	b.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f958:	4a79      	ldr	r2, [pc, #484]	; (800fb40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f95a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f960:	4a78      	ldr	r2, [pc, #480]	; (800fb44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	4a77      	ldr	r2, [pc, #476]	; (800fb48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f96a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f970:	6879      	ldr	r1, [r7, #4]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	3338      	adds	r3, #56	; 0x38
 800f978:	461a      	mov	r2, r3
 800f97a:	887b      	ldrh	r3, [r7, #2]
 800f97c:	f7f5 feb8 	bl	80056f0 <HAL_DMA_Start_IT>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f986:	2301      	movs	r3, #1
 800f988:	e0d6      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	68da      	ldr	r2, [r3, #12]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f998:	60da      	str	r2, [r3, #12]
      break;
 800f99a:	e04a      	b.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a0:	4a67      	ldr	r2, [pc, #412]	; (800fb40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a8:	4a66      	ldr	r2, [pc, #408]	; (800fb44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	4a65      	ldr	r2, [pc, #404]	; (800fb48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	333c      	adds	r3, #60	; 0x3c
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	887b      	ldrh	r3, [r7, #2]
 800f9c4:	f7f5 fe94 	bl	80056f0 <HAL_DMA_Start_IT>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e0b2      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68da      	ldr	r2, [r3, #12]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9e0:	60da      	str	r2, [r3, #12]
      break;
 800f9e2:	e026      	b.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e8:	4a55      	ldr	r2, [pc, #340]	; (800fb40 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f0:	4a54      	ldr	r2, [pc, #336]	; (800fb44 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9f8:	4a53      	ldr	r2, [pc, #332]	; (800fb48 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa00:	6879      	ldr	r1, [r7, #4]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3340      	adds	r3, #64	; 0x40
 800fa08:	461a      	mov	r2, r3
 800fa0a:	887b      	ldrh	r3, [r7, #2]
 800fa0c:	f7f5 fe70 	bl	80056f0 <HAL_DMA_Start_IT>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa16:	2301      	movs	r3, #1
 800fa18:	e08e      	b.n	800fb38 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	68da      	ldr	r2, [r3, #12]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa28:	60da      	str	r2, [r3, #12]
      break;
 800fa2a:	e002      	b.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	75fb      	strb	r3, [r7, #23]
      break;
 800fa30:	bf00      	nop
  }

  if (status == HAL_OK)
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d17e      	bne.n	800fb36 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	68b9      	ldr	r1, [r7, #8]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f000 ff63 	bl	801090c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4a40      	ldr	r2, [pc, #256]	; (800fb4c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d013      	beq.n	800fa78 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a3e      	ldr	r2, [pc, #248]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00e      	beq.n	800fa78 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	4a3d      	ldr	r2, [pc, #244]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d009      	beq.n	800fa78 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a3b      	ldr	r2, [pc, #236]	; (800fb58 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d004      	beq.n	800fa78 <HAL_TIM_PWM_Start_DMA+0x364>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a3a      	ldr	r2, [pc, #232]	; (800fb5c <HAL_TIM_PWM_Start_DMA+0x448>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d101      	bne.n	800fa7c <HAL_TIM_PWM_Start_DMA+0x368>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	e000      	b.n	800fa7e <HAL_TIM_PWM_Start_DMA+0x36a>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d007      	beq.n	800fa92 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a2d      	ldr	r2, [pc, #180]	; (800fb4c <HAL_TIM_PWM_Start_DMA+0x438>)
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d02c      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faa4:	d027      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a2d      	ldr	r2, [pc, #180]	; (800fb60 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d022      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a2b      	ldr	r2, [pc, #172]	; (800fb64 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d01d      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a2a      	ldr	r2, [pc, #168]	; (800fb68 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d018      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a21      	ldr	r2, [pc, #132]	; (800fb50 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d013      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	4a26      	ldr	r2, [pc, #152]	; (800fb6c <HAL_TIM_PWM_Start_DMA+0x458>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d00e      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a1d      	ldr	r2, [pc, #116]	; (800fb54 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d009      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a22      	ldr	r2, [pc, #136]	; (800fb70 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d004      	beq.n	800faf6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a20      	ldr	r2, [pc, #128]	; (800fb74 <HAL_TIM_PWM_Start_DMA+0x460>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d115      	bne.n	800fb22 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	689a      	ldr	r2, [r3, #8]
 800fafc:	4b1e      	ldr	r3, [pc, #120]	; (800fb78 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fafe:	4013      	ands	r3, r2
 800fb00:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b06      	cmp	r3, #6
 800fb06:	d015      	beq.n	800fb34 <HAL_TIM_PWM_Start_DMA+0x420>
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb0e:	d011      	beq.n	800fb34 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f042 0201 	orr.w	r2, r2, #1
 800fb1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb20:	e008      	b.n	800fb34 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f042 0201 	orr.w	r2, r2, #1
 800fb30:	601a      	str	r2, [r3, #0]
 800fb32:	e000      	b.n	800fb36 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fb36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08010103 	.word	0x08010103
 800fb44:	080101ab 	.word	0x080101ab
 800fb48:	08010071 	.word	0x08010071
 800fb4c:	40010000 	.word	0x40010000
 800fb50:	40010400 	.word	0x40010400
 800fb54:	40014000 	.word	0x40014000
 800fb58:	40014400 	.word	0x40014400
 800fb5c:	40014800 	.word	0x40014800
 800fb60:	40000400 	.word	0x40000400
 800fb64:	40000800 	.word	0x40000800
 800fb68:	40000c00 	.word	0x40000c00
 800fb6c:	40001800 	.word	0x40001800
 800fb70:	4000e000 	.word	0x4000e000
 800fb74:	4000e400 	.word	0x4000e400
 800fb78:	00010007 	.word	0x00010007

0800fb7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	f003 0302 	and.w	r3, r3, #2
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d122      	bne.n	800fbd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	f003 0302 	and.w	r3, r3, #2
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d11b      	bne.n	800fbd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f06f 0202 	mvn.w	r2, #2
 800fba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2201      	movs	r2, #1
 800fbae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	f003 0303 	and.w	r3, r3, #3
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d003      	beq.n	800fbc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fa24 	bl	801000c <HAL_TIM_IC_CaptureCallback>
 800fbc4:	e005      	b.n	800fbd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fa16 	bl	800fff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fa27 	bl	8010020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	691b      	ldr	r3, [r3, #16]
 800fbde:	f003 0304 	and.w	r3, r3, #4
 800fbe2:	2b04      	cmp	r3, #4
 800fbe4:	d122      	bne.n	800fc2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	f003 0304 	and.w	r3, r3, #4
 800fbf0:	2b04      	cmp	r3, #4
 800fbf2:	d11b      	bne.n	800fc2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f06f 0204 	mvn.w	r2, #4
 800fbfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2202      	movs	r2, #2
 800fc02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	699b      	ldr	r3, [r3, #24]
 800fc0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d003      	beq.n	800fc1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f9fa 	bl	801000c <HAL_TIM_IC_CaptureCallback>
 800fc18:	e005      	b.n	800fc26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 f9ec 	bl	800fff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f9fd 	bl	8010020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	f003 0308 	and.w	r3, r3, #8
 800fc36:	2b08      	cmp	r3, #8
 800fc38:	d122      	bne.n	800fc80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f003 0308 	and.w	r3, r3, #8
 800fc44:	2b08      	cmp	r3, #8
 800fc46:	d11b      	bne.n	800fc80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f06f 0208 	mvn.w	r2, #8
 800fc50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2204      	movs	r2, #4
 800fc56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	69db      	ldr	r3, [r3, #28]
 800fc5e:	f003 0303 	and.w	r3, r3, #3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f9d0 	bl	801000c <HAL_TIM_IC_CaptureCallback>
 800fc6c:	e005      	b.n	800fc7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 f9c2 	bl	800fff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f000 f9d3 	bl	8010020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	f003 0310 	and.w	r3, r3, #16
 800fc8a:	2b10      	cmp	r3, #16
 800fc8c:	d122      	bne.n	800fcd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	f003 0310 	and.w	r3, r3, #16
 800fc98:	2b10      	cmp	r3, #16
 800fc9a:	d11b      	bne.n	800fcd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f06f 0210 	mvn.w	r2, #16
 800fca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2208      	movs	r2, #8
 800fcaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d003      	beq.n	800fcc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f9a6 	bl	801000c <HAL_TIM_IC_CaptureCallback>
 800fcc0:	e005      	b.n	800fcce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f998 	bl	800fff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f9a9 	bl	8010020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	f003 0301 	and.w	r3, r3, #1
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d10e      	bne.n	800fd00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	f003 0301 	and.w	r3, r3, #1
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d107      	bne.n	800fd00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f06f 0201 	mvn.w	r2, #1
 800fcf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 f972 	bl	800ffe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0a:	2b80      	cmp	r3, #128	; 0x80
 800fd0c:	d10e      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd18:	2b80      	cmp	r3, #128	; 0x80
 800fd1a:	d107      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 febc 	bl	8010aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd3a:	d10e      	bne.n	800fd5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd46:	2b80      	cmp	r3, #128	; 0x80
 800fd48:	d107      	bne.n	800fd5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 feaf 	bl	8010ab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd64:	2b40      	cmp	r3, #64	; 0x40
 800fd66:	d10e      	bne.n	800fd86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd72:	2b40      	cmp	r3, #64	; 0x40
 800fd74:	d107      	bne.n	800fd86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f961 	bl	8010048 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	691b      	ldr	r3, [r3, #16]
 800fd8c:	f003 0320 	and.w	r3, r3, #32
 800fd90:	2b20      	cmp	r3, #32
 800fd92:	d10e      	bne.n	800fdb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	f003 0320 	and.w	r3, r3, #32
 800fd9e:	2b20      	cmp	r3, #32
 800fda0:	d107      	bne.n	800fdb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f06f 0220 	mvn.w	r2, #32
 800fdaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fe6f 	bl	8010a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d101      	bne.n	800fdda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fdd6:	2302      	movs	r3, #2
 800fdd8:	e0ff      	b.n	800ffda <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2201      	movs	r2, #1
 800fdde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b14      	cmp	r3, #20
 800fde6:	f200 80f0 	bhi.w	800ffca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fdea:	a201      	add	r2, pc, #4	; (adr r2, 800fdf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf0:	0800fe45 	.word	0x0800fe45
 800fdf4:	0800ffcb 	.word	0x0800ffcb
 800fdf8:	0800ffcb 	.word	0x0800ffcb
 800fdfc:	0800ffcb 	.word	0x0800ffcb
 800fe00:	0800fe85 	.word	0x0800fe85
 800fe04:	0800ffcb 	.word	0x0800ffcb
 800fe08:	0800ffcb 	.word	0x0800ffcb
 800fe0c:	0800ffcb 	.word	0x0800ffcb
 800fe10:	0800fec7 	.word	0x0800fec7
 800fe14:	0800ffcb 	.word	0x0800ffcb
 800fe18:	0800ffcb 	.word	0x0800ffcb
 800fe1c:	0800ffcb 	.word	0x0800ffcb
 800fe20:	0800ff07 	.word	0x0800ff07
 800fe24:	0800ffcb 	.word	0x0800ffcb
 800fe28:	0800ffcb 	.word	0x0800ffcb
 800fe2c:	0800ffcb 	.word	0x0800ffcb
 800fe30:	0800ff49 	.word	0x0800ff49
 800fe34:	0800ffcb 	.word	0x0800ffcb
 800fe38:	0800ffcb 	.word	0x0800ffcb
 800fe3c:	0800ffcb 	.word	0x0800ffcb
 800fe40:	0800ff89 	.word	0x0800ff89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 fa88 	bl	8010360 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	699a      	ldr	r2, [r3, #24]
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f042 0208 	orr.w	r2, r2, #8
 800fe5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	699a      	ldr	r2, [r3, #24]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f022 0204 	bic.w	r2, r2, #4
 800fe6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6999      	ldr	r1, [r3, #24]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	691a      	ldr	r2, [r3, #16]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	430a      	orrs	r2, r1
 800fe80:	619a      	str	r2, [r3, #24]
      break;
 800fe82:	e0a5      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68b9      	ldr	r1, [r7, #8]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 faf8 	bl	8010480 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	699a      	ldr	r2, [r3, #24]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	699a      	ldr	r2, [r3, #24]
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800feae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6999      	ldr	r1, [r3, #24]
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	021a      	lsls	r2, r3, #8
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	619a      	str	r2, [r3, #24]
      break;
 800fec4:	e084      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	68b9      	ldr	r1, [r7, #8]
 800fecc:	4618      	mov	r0, r3
 800fece:	f000 fb61 	bl	8010594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	69da      	ldr	r2, [r3, #28]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f042 0208 	orr.w	r2, r2, #8
 800fee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	69da      	ldr	r2, [r3, #28]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f022 0204 	bic.w	r2, r2, #4
 800fef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	69d9      	ldr	r1, [r3, #28]
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	691a      	ldr	r2, [r3, #16]
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	430a      	orrs	r2, r1
 800ff02:	61da      	str	r2, [r3, #28]
      break;
 800ff04:	e064      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68b9      	ldr	r1, [r7, #8]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fbc9 	bl	80106a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	69da      	ldr	r2, [r3, #28]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	69da      	ldr	r2, [r3, #28]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	69d9      	ldr	r1, [r3, #28]
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	021a      	lsls	r2, r3, #8
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	61da      	str	r2, [r3, #28]
      break;
 800ff46:	e043      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 fc12 	bl	8010778 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f042 0208 	orr.w	r2, r2, #8
 800ff62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f022 0204 	bic.w	r2, r2, #4
 800ff72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	691a      	ldr	r2, [r3, #16]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	430a      	orrs	r2, r1
 800ff84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ff86:	e023      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68b9      	ldr	r1, [r7, #8]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f000 fc56 	bl	8010840 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	021a      	lsls	r2, r3, #8
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	430a      	orrs	r2, r1
 800ffc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ffc8:	e002      	b.n	800ffd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	75fb      	strb	r3, [r7, #23]
      break;
 800ffce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop

0800ffe4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr

0800fff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010014:	bf00      	nop
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010028:	bf00      	nop
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr

08010034 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 801003c:	bf00      	nop
 801003e:	370c      	adds	r7, #12
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010050:	bf00      	nop
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr

0801005c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010082:	687a      	ldr	r2, [r7, #4]
 8010084:	429a      	cmp	r2, r3
 8010086:	d107      	bne.n	8010098 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2201      	movs	r2, #1
 801008c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	2201      	movs	r2, #1
 8010092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010096:	e02a      	b.n	80100ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d107      	bne.n	80100b2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2202      	movs	r2, #2
 80100a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100b0:	e01d      	b.n	80100ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d107      	bne.n	80100cc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2204      	movs	r2, #4
 80100c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2201      	movs	r2, #1
 80100c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100ca:	e010      	b.n	80100ee <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d107      	bne.n	80100e6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2208      	movs	r2, #8
 80100da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	2201      	movs	r2, #1
 80100e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80100e4:	e003      	b.n	80100ee <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2201      	movs	r2, #1
 80100ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f7ff ffb4 	bl	801005c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2200      	movs	r2, #0
 80100f8:	771a      	strb	r2, [r3, #28]
}
 80100fa:	bf00      	nop
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801010e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	429a      	cmp	r2, r3
 8010118:	d10b      	bne.n	8010132 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2201      	movs	r2, #1
 801011e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d136      	bne.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010130:	e031      	b.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	429a      	cmp	r2, r3
 801013a:	d10b      	bne.n	8010154 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2202      	movs	r2, #2
 8010140:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	69db      	ldr	r3, [r3, #28]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d125      	bne.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010152:	e020      	b.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	429a      	cmp	r2, r3
 801015c:	d10b      	bne.n	8010176 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2204      	movs	r2, #4
 8010162:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d114      	bne.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010174:	e00f      	b.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	429a      	cmp	r2, r3
 801017e:	d10a      	bne.n	8010196 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2208      	movs	r2, #8
 8010184:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	69db      	ldr	r3, [r3, #28]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d103      	bne.n	8010196 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2201      	movs	r2, #1
 8010192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f7ff ff42 	bl	8010020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2200      	movs	r2, #0
 80101a0:	771a      	strb	r2, [r3, #28]
}
 80101a2:	bf00      	nop
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d103      	bne.n	80101ca <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2201      	movs	r2, #1
 80101c6:	771a      	strb	r2, [r3, #28]
 80101c8:	e019      	b.n	80101fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d103      	bne.n	80101dc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2202      	movs	r2, #2
 80101d8:	771a      	strb	r2, [r3, #28]
 80101da:	e010      	b.n	80101fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d103      	bne.n	80101ee <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2204      	movs	r2, #4
 80101ea:	771a      	strb	r2, [r3, #28]
 80101ec:	e007      	b.n	80101fe <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d102      	bne.n	80101fe <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2208      	movs	r2, #8
 80101fc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f7ff ff18 	bl	8010034 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2200      	movs	r2, #0
 8010208:	771a      	strb	r2, [r3, #28]
}
 801020a:	bf00      	nop
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a44      	ldr	r2, [pc, #272]	; (8010338 <TIM_Base_SetConfig+0x124>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d013      	beq.n	8010254 <TIM_Base_SetConfig+0x40>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010232:	d00f      	beq.n	8010254 <TIM_Base_SetConfig+0x40>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4a41      	ldr	r2, [pc, #260]	; (801033c <TIM_Base_SetConfig+0x128>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d00b      	beq.n	8010254 <TIM_Base_SetConfig+0x40>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	4a40      	ldr	r2, [pc, #256]	; (8010340 <TIM_Base_SetConfig+0x12c>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d007      	beq.n	8010254 <TIM_Base_SetConfig+0x40>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4a3f      	ldr	r2, [pc, #252]	; (8010344 <TIM_Base_SetConfig+0x130>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d003      	beq.n	8010254 <TIM_Base_SetConfig+0x40>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a3e      	ldr	r2, [pc, #248]	; (8010348 <TIM_Base_SetConfig+0x134>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d108      	bne.n	8010266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801025a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	4313      	orrs	r3, r2
 8010264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	4a33      	ldr	r2, [pc, #204]	; (8010338 <TIM_Base_SetConfig+0x124>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d027      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010274:	d023      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a30      	ldr	r2, [pc, #192]	; (801033c <TIM_Base_SetConfig+0x128>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d01f      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4a2f      	ldr	r2, [pc, #188]	; (8010340 <TIM_Base_SetConfig+0x12c>)
 8010282:	4293      	cmp	r3, r2
 8010284:	d01b      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	4a2e      	ldr	r2, [pc, #184]	; (8010344 <TIM_Base_SetConfig+0x130>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d017      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4a2d      	ldr	r2, [pc, #180]	; (8010348 <TIM_Base_SetConfig+0x134>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d013      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	4a2c      	ldr	r2, [pc, #176]	; (801034c <TIM_Base_SetConfig+0x138>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00f      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a2b      	ldr	r2, [pc, #172]	; (8010350 <TIM_Base_SetConfig+0x13c>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d00b      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a2a      	ldr	r2, [pc, #168]	; (8010354 <TIM_Base_SetConfig+0x140>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d007      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a29      	ldr	r2, [pc, #164]	; (8010358 <TIM_Base_SetConfig+0x144>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d003      	beq.n	80102be <TIM_Base_SetConfig+0xaa>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a28      	ldr	r2, [pc, #160]	; (801035c <TIM_Base_SetConfig+0x148>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d108      	bne.n	80102d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	4313      	orrs	r3, r2
 80102dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	689a      	ldr	r2, [r3, #8]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4a10      	ldr	r2, [pc, #64]	; (8010338 <TIM_Base_SetConfig+0x124>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d00f      	beq.n	801031c <TIM_Base_SetConfig+0x108>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4a12      	ldr	r2, [pc, #72]	; (8010348 <TIM_Base_SetConfig+0x134>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d00b      	beq.n	801031c <TIM_Base_SetConfig+0x108>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4a11      	ldr	r2, [pc, #68]	; (801034c <TIM_Base_SetConfig+0x138>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d007      	beq.n	801031c <TIM_Base_SetConfig+0x108>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4a10      	ldr	r2, [pc, #64]	; (8010350 <TIM_Base_SetConfig+0x13c>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d003      	beq.n	801031c <TIM_Base_SetConfig+0x108>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4a0f      	ldr	r2, [pc, #60]	; (8010354 <TIM_Base_SetConfig+0x140>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d103      	bne.n	8010324 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	691a      	ldr	r2, [r3, #16]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	615a      	str	r2, [r3, #20]
}
 801032a:	bf00      	nop
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	40010000 	.word	0x40010000
 801033c:	40000400 	.word	0x40000400
 8010340:	40000800 	.word	0x40000800
 8010344:	40000c00 	.word	0x40000c00
 8010348:	40010400 	.word	0x40010400
 801034c:	40014000 	.word	0x40014000
 8010350:	40014400 	.word	0x40014400
 8010354:	40014800 	.word	0x40014800
 8010358:	4000e000 	.word	0x4000e000
 801035c:	4000e400 	.word	0x4000e400

08010360 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010360:	b480      	push	{r7}
 8010362:	b087      	sub	sp, #28
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a1b      	ldr	r3, [r3, #32]
 801036e:	f023 0201 	bic.w	r2, r3, #1
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	699b      	ldr	r3, [r3, #24]
 8010386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	4b37      	ldr	r3, [pc, #220]	; (8010468 <TIM_OC1_SetConfig+0x108>)
 801038c:	4013      	ands	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	68fa      	ldr	r2, [r7, #12]
 801039e:	4313      	orrs	r3, r2
 80103a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	f023 0302 	bic.w	r3, r3, #2
 80103a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	689b      	ldr	r3, [r3, #8]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	4313      	orrs	r3, r2
 80103b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a2d      	ldr	r2, [pc, #180]	; (801046c <TIM_OC1_SetConfig+0x10c>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d00f      	beq.n	80103dc <TIM_OC1_SetConfig+0x7c>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a2c      	ldr	r2, [pc, #176]	; (8010470 <TIM_OC1_SetConfig+0x110>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d00b      	beq.n	80103dc <TIM_OC1_SetConfig+0x7c>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a2b      	ldr	r2, [pc, #172]	; (8010474 <TIM_OC1_SetConfig+0x114>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d007      	beq.n	80103dc <TIM_OC1_SetConfig+0x7c>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a2a      	ldr	r2, [pc, #168]	; (8010478 <TIM_OC1_SetConfig+0x118>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d003      	beq.n	80103dc <TIM_OC1_SetConfig+0x7c>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a29      	ldr	r2, [pc, #164]	; (801047c <TIM_OC1_SetConfig+0x11c>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d10c      	bne.n	80103f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f023 0308 	bic.w	r3, r3, #8
 80103e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	697a      	ldr	r2, [r7, #20]
 80103ea:	4313      	orrs	r3, r2
 80103ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	f023 0304 	bic.w	r3, r3, #4
 80103f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	4a1c      	ldr	r2, [pc, #112]	; (801046c <TIM_OC1_SetConfig+0x10c>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d00f      	beq.n	801041e <TIM_OC1_SetConfig+0xbe>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4a1b      	ldr	r2, [pc, #108]	; (8010470 <TIM_OC1_SetConfig+0x110>)
 8010402:	4293      	cmp	r3, r2
 8010404:	d00b      	beq.n	801041e <TIM_OC1_SetConfig+0xbe>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4a1a      	ldr	r2, [pc, #104]	; (8010474 <TIM_OC1_SetConfig+0x114>)
 801040a:	4293      	cmp	r3, r2
 801040c:	d007      	beq.n	801041e <TIM_OC1_SetConfig+0xbe>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4a19      	ldr	r2, [pc, #100]	; (8010478 <TIM_OC1_SetConfig+0x118>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d003      	beq.n	801041e <TIM_OC1_SetConfig+0xbe>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4a18      	ldr	r2, [pc, #96]	; (801047c <TIM_OC1_SetConfig+0x11c>)
 801041a:	4293      	cmp	r3, r2
 801041c:	d111      	bne.n	8010442 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801042c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	695b      	ldr	r3, [r3, #20]
 8010432:	693a      	ldr	r2, [r7, #16]
 8010434:	4313      	orrs	r3, r2
 8010436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	699b      	ldr	r3, [r3, #24]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	4313      	orrs	r3, r2
 8010440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	693a      	ldr	r2, [r7, #16]
 8010446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	697a      	ldr	r2, [r7, #20]
 801045a:	621a      	str	r2, [r3, #32]
}
 801045c:	bf00      	nop
 801045e:	371c      	adds	r7, #28
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	fffeff8f 	.word	0xfffeff8f
 801046c:	40010000 	.word	0x40010000
 8010470:	40010400 	.word	0x40010400
 8010474:	40014000 	.word	0x40014000
 8010478:	40014400 	.word	0x40014400
 801047c:	40014800 	.word	0x40014800

08010480 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a1b      	ldr	r3, [r3, #32]
 801048e:	f023 0210 	bic.w	r2, r3, #16
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1b      	ldr	r3, [r3, #32]
 801049a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	4b34      	ldr	r3, [pc, #208]	; (801057c <TIM_OC2_SetConfig+0xfc>)
 80104ac:	4013      	ands	r3, r2
 80104ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	4313      	orrs	r3, r2
 80104c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	f023 0320 	bic.w	r3, r3, #32
 80104ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	011b      	lsls	r3, r3, #4
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4a29      	ldr	r2, [pc, #164]	; (8010580 <TIM_OC2_SetConfig+0x100>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d003      	beq.n	80104e8 <TIM_OC2_SetConfig+0x68>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4a28      	ldr	r2, [pc, #160]	; (8010584 <TIM_OC2_SetConfig+0x104>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d10d      	bne.n	8010504 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	697a      	ldr	r2, [r7, #20]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a1e      	ldr	r2, [pc, #120]	; (8010580 <TIM_OC2_SetConfig+0x100>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d00f      	beq.n	801052c <TIM_OC2_SetConfig+0xac>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a1d      	ldr	r2, [pc, #116]	; (8010584 <TIM_OC2_SetConfig+0x104>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d00b      	beq.n	801052c <TIM_OC2_SetConfig+0xac>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a1c      	ldr	r2, [pc, #112]	; (8010588 <TIM_OC2_SetConfig+0x108>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d007      	beq.n	801052c <TIM_OC2_SetConfig+0xac>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	4a1b      	ldr	r2, [pc, #108]	; (801058c <TIM_OC2_SetConfig+0x10c>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d003      	beq.n	801052c <TIM_OC2_SetConfig+0xac>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4a1a      	ldr	r2, [pc, #104]	; (8010590 <TIM_OC2_SetConfig+0x110>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d113      	bne.n	8010554 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010532:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801053a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	695b      	ldr	r3, [r3, #20]
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	4313      	orrs	r3, r2
 8010546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	699b      	ldr	r3, [r3, #24]
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	693a      	ldr	r2, [r7, #16]
 8010550:	4313      	orrs	r3, r2
 8010552:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	693a      	ldr	r2, [r7, #16]
 8010558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	621a      	str	r2, [r3, #32]
}
 801056e:	bf00      	nop
 8010570:	371c      	adds	r7, #28
 8010572:	46bd      	mov	sp, r7
 8010574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	feff8fff 	.word	0xfeff8fff
 8010580:	40010000 	.word	0x40010000
 8010584:	40010400 	.word	0x40010400
 8010588:	40014000 	.word	0x40014000
 801058c:	40014400 	.word	0x40014400
 8010590:	40014800 	.word	0x40014800

08010594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010594:	b480      	push	{r7}
 8010596:	b087      	sub	sp, #28
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	69db      	ldr	r3, [r3, #28]
 80105ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	4b33      	ldr	r3, [pc, #204]	; (801068c <TIM_OC3_SetConfig+0xf8>)
 80105c0:	4013      	ands	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f023 0303 	bic.w	r3, r3, #3
 80105ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	4313      	orrs	r3, r2
 80105d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80105dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	689b      	ldr	r3, [r3, #8]
 80105e2:	021b      	lsls	r3, r3, #8
 80105e4:	697a      	ldr	r2, [r7, #20]
 80105e6:	4313      	orrs	r3, r2
 80105e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	4a28      	ldr	r2, [pc, #160]	; (8010690 <TIM_OC3_SetConfig+0xfc>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d003      	beq.n	80105fa <TIM_OC3_SetConfig+0x66>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4a27      	ldr	r2, [pc, #156]	; (8010694 <TIM_OC3_SetConfig+0x100>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d10d      	bne.n	8010616 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	021b      	lsls	r3, r3, #8
 8010608:	697a      	ldr	r2, [r7, #20]
 801060a:	4313      	orrs	r3, r2
 801060c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4a1d      	ldr	r2, [pc, #116]	; (8010690 <TIM_OC3_SetConfig+0xfc>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d00f      	beq.n	801063e <TIM_OC3_SetConfig+0xaa>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4a1c      	ldr	r2, [pc, #112]	; (8010694 <TIM_OC3_SetConfig+0x100>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d00b      	beq.n	801063e <TIM_OC3_SetConfig+0xaa>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4a1b      	ldr	r2, [pc, #108]	; (8010698 <TIM_OC3_SetConfig+0x104>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d007      	beq.n	801063e <TIM_OC3_SetConfig+0xaa>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4a1a      	ldr	r2, [pc, #104]	; (801069c <TIM_OC3_SetConfig+0x108>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d003      	beq.n	801063e <TIM_OC3_SetConfig+0xaa>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4a19      	ldr	r2, [pc, #100]	; (80106a0 <TIM_OC3_SetConfig+0x10c>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d113      	bne.n	8010666 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801064c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	695b      	ldr	r3, [r3, #20]
 8010652:	011b      	lsls	r3, r3, #4
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	4313      	orrs	r3, r2
 8010658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	699b      	ldr	r3, [r3, #24]
 801065e:	011b      	lsls	r3, r3, #4
 8010660:	693a      	ldr	r2, [r7, #16]
 8010662:	4313      	orrs	r3, r2
 8010664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	693a      	ldr	r2, [r7, #16]
 801066a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	68fa      	ldr	r2, [r7, #12]
 8010670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	697a      	ldr	r2, [r7, #20]
 801067e:	621a      	str	r2, [r3, #32]
}
 8010680:	bf00      	nop
 8010682:	371c      	adds	r7, #28
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr
 801068c:	fffeff8f 	.word	0xfffeff8f
 8010690:	40010000 	.word	0x40010000
 8010694:	40010400 	.word	0x40010400
 8010698:	40014000 	.word	0x40014000
 801069c:	40014400 	.word	0x40014400
 80106a0:	40014800 	.word	0x40014800

080106a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b087      	sub	sp, #28
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6a1b      	ldr	r3, [r3, #32]
 80106b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	69db      	ldr	r3, [r3, #28]
 80106ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	4b24      	ldr	r3, [pc, #144]	; (8010760 <TIM_OC4_SetConfig+0xbc>)
 80106d0:	4013      	ands	r3, r2
 80106d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	021b      	lsls	r3, r3, #8
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	4313      	orrs	r3, r2
 80106e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	031b      	lsls	r3, r3, #12
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	4a19      	ldr	r2, [pc, #100]	; (8010764 <TIM_OC4_SetConfig+0xc0>)
 8010700:	4293      	cmp	r3, r2
 8010702:	d00f      	beq.n	8010724 <TIM_OC4_SetConfig+0x80>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	4a18      	ldr	r2, [pc, #96]	; (8010768 <TIM_OC4_SetConfig+0xc4>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d00b      	beq.n	8010724 <TIM_OC4_SetConfig+0x80>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	4a17      	ldr	r2, [pc, #92]	; (801076c <TIM_OC4_SetConfig+0xc8>)
 8010710:	4293      	cmp	r3, r2
 8010712:	d007      	beq.n	8010724 <TIM_OC4_SetConfig+0x80>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4a16      	ldr	r2, [pc, #88]	; (8010770 <TIM_OC4_SetConfig+0xcc>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d003      	beq.n	8010724 <TIM_OC4_SetConfig+0x80>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4a15      	ldr	r2, [pc, #84]	; (8010774 <TIM_OC4_SetConfig+0xd0>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d109      	bne.n	8010738 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801072a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	695b      	ldr	r3, [r3, #20]
 8010730:	019b      	lsls	r3, r3, #6
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	4313      	orrs	r3, r2
 8010736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	697a      	ldr	r2, [r7, #20]
 801073c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	685a      	ldr	r2, [r3, #4]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	693a      	ldr	r2, [r7, #16]
 8010750:	621a      	str	r2, [r3, #32]
}
 8010752:	bf00      	nop
 8010754:	371c      	adds	r7, #28
 8010756:	46bd      	mov	sp, r7
 8010758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	feff8fff 	.word	0xfeff8fff
 8010764:	40010000 	.word	0x40010000
 8010768:	40010400 	.word	0x40010400
 801076c:	40014000 	.word	0x40014000
 8010770:	40014400 	.word	0x40014400
 8010774:	40014800 	.word	0x40014800

08010778 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010778:	b480      	push	{r7}
 801077a:	b087      	sub	sp, #28
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6a1b      	ldr	r3, [r3, #32]
 8010786:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a1b      	ldr	r3, [r3, #32]
 8010792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801079e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	4b21      	ldr	r3, [pc, #132]	; (8010828 <TIM_OC5_SetConfig+0xb0>)
 80107a4:	4013      	ands	r3, r2
 80107a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80107b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	041b      	lsls	r3, r3, #16
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4a18      	ldr	r2, [pc, #96]	; (801082c <TIM_OC5_SetConfig+0xb4>)
 80107ca:	4293      	cmp	r3, r2
 80107cc:	d00f      	beq.n	80107ee <TIM_OC5_SetConfig+0x76>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4a17      	ldr	r2, [pc, #92]	; (8010830 <TIM_OC5_SetConfig+0xb8>)
 80107d2:	4293      	cmp	r3, r2
 80107d4:	d00b      	beq.n	80107ee <TIM_OC5_SetConfig+0x76>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4a16      	ldr	r2, [pc, #88]	; (8010834 <TIM_OC5_SetConfig+0xbc>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d007      	beq.n	80107ee <TIM_OC5_SetConfig+0x76>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4a15      	ldr	r2, [pc, #84]	; (8010838 <TIM_OC5_SetConfig+0xc0>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d003      	beq.n	80107ee <TIM_OC5_SetConfig+0x76>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4a14      	ldr	r2, [pc, #80]	; (801083c <TIM_OC5_SetConfig+0xc4>)
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d109      	bne.n	8010802 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	021b      	lsls	r3, r3, #8
 80107fc:	697a      	ldr	r2, [r7, #20]
 80107fe:	4313      	orrs	r3, r2
 8010800:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801080e:	683b      	ldr	r3, [r7, #0]
 8010810:	685a      	ldr	r2, [r3, #4]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	693a      	ldr	r2, [r7, #16]
 801081a:	621a      	str	r2, [r3, #32]
}
 801081c:	bf00      	nop
 801081e:	371c      	adds	r7, #28
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	fffeff8f 	.word	0xfffeff8f
 801082c:	40010000 	.word	0x40010000
 8010830:	40010400 	.word	0x40010400
 8010834:	40014000 	.word	0x40014000
 8010838:	40014400 	.word	0x40014400
 801083c:	40014800 	.word	0x40014800

08010840 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010840:	b480      	push	{r7}
 8010842:	b087      	sub	sp, #28
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a1b      	ldr	r3, [r3, #32]
 801084e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6a1b      	ldr	r3, [r3, #32]
 801085a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	4b22      	ldr	r3, [pc, #136]	; (80108f4 <TIM_OC6_SetConfig+0xb4>)
 801086c:	4013      	ands	r3, r2
 801086e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	021b      	lsls	r3, r3, #8
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	4313      	orrs	r3, r2
 801087a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	051b      	lsls	r3, r3, #20
 801088a:	693a      	ldr	r2, [r7, #16]
 801088c:	4313      	orrs	r3, r2
 801088e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4a19      	ldr	r2, [pc, #100]	; (80108f8 <TIM_OC6_SetConfig+0xb8>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d00f      	beq.n	80108b8 <TIM_OC6_SetConfig+0x78>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	4a18      	ldr	r2, [pc, #96]	; (80108fc <TIM_OC6_SetConfig+0xbc>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d00b      	beq.n	80108b8 <TIM_OC6_SetConfig+0x78>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4a17      	ldr	r2, [pc, #92]	; (8010900 <TIM_OC6_SetConfig+0xc0>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d007      	beq.n	80108b8 <TIM_OC6_SetConfig+0x78>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4a16      	ldr	r2, [pc, #88]	; (8010904 <TIM_OC6_SetConfig+0xc4>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d003      	beq.n	80108b8 <TIM_OC6_SetConfig+0x78>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a15      	ldr	r2, [pc, #84]	; (8010908 <TIM_OC6_SetConfig+0xc8>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d109      	bne.n	80108cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80108be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	695b      	ldr	r3, [r3, #20]
 80108c4:	029b      	lsls	r3, r3, #10
 80108c6:	697a      	ldr	r2, [r7, #20]
 80108c8:	4313      	orrs	r3, r2
 80108ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	697a      	ldr	r2, [r7, #20]
 80108d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	685a      	ldr	r2, [r3, #4]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	621a      	str	r2, [r3, #32]
}
 80108e6:	bf00      	nop
 80108e8:	371c      	adds	r7, #28
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	feff8fff 	.word	0xfeff8fff
 80108f8:	40010000 	.word	0x40010000
 80108fc:	40010400 	.word	0x40010400
 8010900:	40014000 	.word	0x40014000
 8010904:	40014400 	.word	0x40014400
 8010908:	40014800 	.word	0x40014800

0801090c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801090c:	b480      	push	{r7}
 801090e:	b087      	sub	sp, #28
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f003 031f 	and.w	r3, r3, #31
 801091e:	2201      	movs	r2, #1
 8010920:	fa02 f303 	lsl.w	r3, r2, r3
 8010924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6a1a      	ldr	r2, [r3, #32]
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	43db      	mvns	r3, r3
 801092e:	401a      	ands	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6a1a      	ldr	r2, [r3, #32]
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	f003 031f 	and.w	r3, r3, #31
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	fa01 f303 	lsl.w	r3, r1, r3
 8010944:	431a      	orrs	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	621a      	str	r2, [r3, #32]
}
 801094a:	bf00      	nop
 801094c:	371c      	adds	r7, #28
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
	...

08010958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010968:	2b01      	cmp	r3, #1
 801096a:	d101      	bne.n	8010970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801096c:	2302      	movs	r3, #2
 801096e:	e077      	b.n	8010a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2201      	movs	r2, #1
 8010974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2202      	movs	r2, #2
 801097c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a35      	ldr	r2, [pc, #212]	; (8010a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d004      	beq.n	80109a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	4a34      	ldr	r2, [pc, #208]	; (8010a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d108      	bne.n	80109b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80109aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	4313      	orrs	r3, r2
 80109b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	4313      	orrs	r3, r2
 80109c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a25      	ldr	r2, [pc, #148]	; (8010a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d02c      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109e2:	d027      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4a22      	ldr	r2, [pc, #136]	; (8010a74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d022      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4a21      	ldr	r2, [pc, #132]	; (8010a78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d01d      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	4a1f      	ldr	r2, [pc, #124]	; (8010a7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d018      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a1a      	ldr	r2, [pc, #104]	; (8010a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d013      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a1b      	ldr	r2, [pc, #108]	; (8010a80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d00e      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a1a      	ldr	r2, [pc, #104]	; (8010a84 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d009      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a18      	ldr	r2, [pc, #96]	; (8010a88 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d004      	beq.n	8010a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4a17      	ldr	r2, [pc, #92]	; (8010a8c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d10c      	bne.n	8010a4e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	689b      	ldr	r3, [r3, #8]
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68ba      	ldr	r2, [r7, #8]
 8010a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3714      	adds	r7, #20
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr
 8010a6c:	40010000 	.word	0x40010000
 8010a70:	40010400 	.word	0x40010400
 8010a74:	40000400 	.word	0x40000400
 8010a78:	40000800 	.word	0x40000800
 8010a7c:	40000c00 	.word	0x40000c00
 8010a80:	40001800 	.word	0x40001800
 8010a84:	40014000 	.word	0x40014000
 8010a88:	4000e000 	.word	0x4000e000
 8010a8c:	4000e400 	.word	0x4000e400

08010a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d101      	bne.n	8010ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ada:	2301      	movs	r3, #1
 8010adc:	e042      	b.n	8010b64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d106      	bne.n	8010af6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2200      	movs	r2, #0
 8010aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7f2 fa9f 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2224      	movs	r2, #36	; 0x24
 8010afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f022 0201 	bic.w	r2, r2, #1
 8010b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 f82c 	bl	8010b6c <UART_SetConfig>
 8010b14:	4603      	mov	r3, r0
 8010b16:	2b01      	cmp	r3, #1
 8010b18:	d101      	bne.n	8010b1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e022      	b.n	8010b64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d002      	beq.n	8010b2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 fe8c 	bl	8011844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	685a      	ldr	r2, [r3, #4]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	689a      	ldr	r2, [r3, #8]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f042 0201 	orr.w	r2, r2, #1
 8010b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 ff13 	bl	8011988 <UART_CheckIdleState>
 8010b62:	4603      	mov	r3, r0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b70:	b092      	sub	sp, #72	; 0x48
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	431a      	orrs	r2, r3
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	431a      	orrs	r2, r3
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	69db      	ldr	r3, [r3, #28]
 8010b90:	4313      	orrs	r3, r2
 8010b92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	4bbe      	ldr	r3, [pc, #760]	; (8010e94 <UART_SetConfig+0x328>)
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	697a      	ldr	r2, [r7, #20]
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ba4:	430b      	orrs	r3, r1
 8010ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	68da      	ldr	r2, [r3, #12]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	430a      	orrs	r2, r1
 8010bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	699b      	ldr	r3, [r3, #24]
 8010bc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4ab3      	ldr	r2, [pc, #716]	; (8010e98 <UART_SetConfig+0x32c>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d004      	beq.n	8010bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	6a1b      	ldr	r3, [r3, #32]
 8010bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	689a      	ldr	r2, [r3, #8]
 8010bde:	4baf      	ldr	r3, [pc, #700]	; (8010e9c <UART_SetConfig+0x330>)
 8010be0:	4013      	ands	r3, r2
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	6812      	ldr	r2, [r2, #0]
 8010be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010be8:	430b      	orrs	r3, r1
 8010bea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf2:	f023 010f 	bic.w	r1, r3, #15
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	430a      	orrs	r2, r1
 8010c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4aa6      	ldr	r2, [pc, #664]	; (8010ea0 <UART_SetConfig+0x334>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d177      	bne.n	8010cfc <UART_SetConfig+0x190>
 8010c0c:	4ba5      	ldr	r3, [pc, #660]	; (8010ea4 <UART_SetConfig+0x338>)
 8010c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c14:	2b28      	cmp	r3, #40	; 0x28
 8010c16:	d86d      	bhi.n	8010cf4 <UART_SetConfig+0x188>
 8010c18:	a201      	add	r2, pc, #4	; (adr r2, 8010c20 <UART_SetConfig+0xb4>)
 8010c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c1e:	bf00      	nop
 8010c20:	08010cc5 	.word	0x08010cc5
 8010c24:	08010cf5 	.word	0x08010cf5
 8010c28:	08010cf5 	.word	0x08010cf5
 8010c2c:	08010cf5 	.word	0x08010cf5
 8010c30:	08010cf5 	.word	0x08010cf5
 8010c34:	08010cf5 	.word	0x08010cf5
 8010c38:	08010cf5 	.word	0x08010cf5
 8010c3c:	08010cf5 	.word	0x08010cf5
 8010c40:	08010ccd 	.word	0x08010ccd
 8010c44:	08010cf5 	.word	0x08010cf5
 8010c48:	08010cf5 	.word	0x08010cf5
 8010c4c:	08010cf5 	.word	0x08010cf5
 8010c50:	08010cf5 	.word	0x08010cf5
 8010c54:	08010cf5 	.word	0x08010cf5
 8010c58:	08010cf5 	.word	0x08010cf5
 8010c5c:	08010cf5 	.word	0x08010cf5
 8010c60:	08010cd5 	.word	0x08010cd5
 8010c64:	08010cf5 	.word	0x08010cf5
 8010c68:	08010cf5 	.word	0x08010cf5
 8010c6c:	08010cf5 	.word	0x08010cf5
 8010c70:	08010cf5 	.word	0x08010cf5
 8010c74:	08010cf5 	.word	0x08010cf5
 8010c78:	08010cf5 	.word	0x08010cf5
 8010c7c:	08010cf5 	.word	0x08010cf5
 8010c80:	08010cdd 	.word	0x08010cdd
 8010c84:	08010cf5 	.word	0x08010cf5
 8010c88:	08010cf5 	.word	0x08010cf5
 8010c8c:	08010cf5 	.word	0x08010cf5
 8010c90:	08010cf5 	.word	0x08010cf5
 8010c94:	08010cf5 	.word	0x08010cf5
 8010c98:	08010cf5 	.word	0x08010cf5
 8010c9c:	08010cf5 	.word	0x08010cf5
 8010ca0:	08010ce5 	.word	0x08010ce5
 8010ca4:	08010cf5 	.word	0x08010cf5
 8010ca8:	08010cf5 	.word	0x08010cf5
 8010cac:	08010cf5 	.word	0x08010cf5
 8010cb0:	08010cf5 	.word	0x08010cf5
 8010cb4:	08010cf5 	.word	0x08010cf5
 8010cb8:	08010cf5 	.word	0x08010cf5
 8010cbc:	08010cf5 	.word	0x08010cf5
 8010cc0:	08010ced 	.word	0x08010ced
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cca:	e326      	b.n	801131a <UART_SetConfig+0x7ae>
 8010ccc:	2304      	movs	r3, #4
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd2:	e322      	b.n	801131a <UART_SetConfig+0x7ae>
 8010cd4:	2308      	movs	r3, #8
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e31e      	b.n	801131a <UART_SetConfig+0x7ae>
 8010cdc:	2310      	movs	r3, #16
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e31a      	b.n	801131a <UART_SetConfig+0x7ae>
 8010ce4:	2320      	movs	r3, #32
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e316      	b.n	801131a <UART_SetConfig+0x7ae>
 8010cec:	2340      	movs	r3, #64	; 0x40
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e312      	b.n	801131a <UART_SetConfig+0x7ae>
 8010cf4:	2380      	movs	r3, #128	; 0x80
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e30e      	b.n	801131a <UART_SetConfig+0x7ae>
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a69      	ldr	r2, [pc, #420]	; (8010ea8 <UART_SetConfig+0x33c>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d130      	bne.n	8010d68 <UART_SetConfig+0x1fc>
 8010d06:	4b67      	ldr	r3, [pc, #412]	; (8010ea4 <UART_SetConfig+0x338>)
 8010d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0a:	f003 0307 	and.w	r3, r3, #7
 8010d0e:	2b05      	cmp	r3, #5
 8010d10:	d826      	bhi.n	8010d60 <UART_SetConfig+0x1f4>
 8010d12:	a201      	add	r2, pc, #4	; (adr r2, 8010d18 <UART_SetConfig+0x1ac>)
 8010d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d18:	08010d31 	.word	0x08010d31
 8010d1c:	08010d39 	.word	0x08010d39
 8010d20:	08010d41 	.word	0x08010d41
 8010d24:	08010d49 	.word	0x08010d49
 8010d28:	08010d51 	.word	0x08010d51
 8010d2c:	08010d59 	.word	0x08010d59
 8010d30:	2300      	movs	r3, #0
 8010d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d36:	e2f0      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d38:	2304      	movs	r3, #4
 8010d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3e:	e2ec      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d40:	2308      	movs	r3, #8
 8010d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d46:	e2e8      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d48:	2310      	movs	r3, #16
 8010d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4e:	e2e4      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d50:	2320      	movs	r3, #32
 8010d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d56:	e2e0      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d58:	2340      	movs	r3, #64	; 0x40
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5e:	e2dc      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d60:	2380      	movs	r3, #128	; 0x80
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d66:	e2d8      	b.n	801131a <UART_SetConfig+0x7ae>
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a4f      	ldr	r2, [pc, #316]	; (8010eac <UART_SetConfig+0x340>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d130      	bne.n	8010dd4 <UART_SetConfig+0x268>
 8010d72:	4b4c      	ldr	r3, [pc, #304]	; (8010ea4 <UART_SetConfig+0x338>)
 8010d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d76:	f003 0307 	and.w	r3, r3, #7
 8010d7a:	2b05      	cmp	r3, #5
 8010d7c:	d826      	bhi.n	8010dcc <UART_SetConfig+0x260>
 8010d7e:	a201      	add	r2, pc, #4	; (adr r2, 8010d84 <UART_SetConfig+0x218>)
 8010d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d84:	08010d9d 	.word	0x08010d9d
 8010d88:	08010da5 	.word	0x08010da5
 8010d8c:	08010dad 	.word	0x08010dad
 8010d90:	08010db5 	.word	0x08010db5
 8010d94:	08010dbd 	.word	0x08010dbd
 8010d98:	08010dc5 	.word	0x08010dc5
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da2:	e2ba      	b.n	801131a <UART_SetConfig+0x7ae>
 8010da4:	2304      	movs	r3, #4
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010daa:	e2b6      	b.n	801131a <UART_SetConfig+0x7ae>
 8010dac:	2308      	movs	r3, #8
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e2b2      	b.n	801131a <UART_SetConfig+0x7ae>
 8010db4:	2310      	movs	r3, #16
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e2ae      	b.n	801131a <UART_SetConfig+0x7ae>
 8010dbc:	2320      	movs	r3, #32
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e2aa      	b.n	801131a <UART_SetConfig+0x7ae>
 8010dc4:	2340      	movs	r3, #64	; 0x40
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e2a6      	b.n	801131a <UART_SetConfig+0x7ae>
 8010dcc:	2380      	movs	r3, #128	; 0x80
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd2:	e2a2      	b.n	801131a <UART_SetConfig+0x7ae>
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a35      	ldr	r2, [pc, #212]	; (8010eb0 <UART_SetConfig+0x344>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d130      	bne.n	8010e40 <UART_SetConfig+0x2d4>
 8010dde:	4b31      	ldr	r3, [pc, #196]	; (8010ea4 <UART_SetConfig+0x338>)
 8010de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010de2:	f003 0307 	and.w	r3, r3, #7
 8010de6:	2b05      	cmp	r3, #5
 8010de8:	d826      	bhi.n	8010e38 <UART_SetConfig+0x2cc>
 8010dea:	a201      	add	r2, pc, #4	; (adr r2, 8010df0 <UART_SetConfig+0x284>)
 8010dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df0:	08010e09 	.word	0x08010e09
 8010df4:	08010e11 	.word	0x08010e11
 8010df8:	08010e19 	.word	0x08010e19
 8010dfc:	08010e21 	.word	0x08010e21
 8010e00:	08010e29 	.word	0x08010e29
 8010e04:	08010e31 	.word	0x08010e31
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0e:	e284      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e10:	2304      	movs	r3, #4
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e16:	e280      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e18:	2308      	movs	r3, #8
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1e:	e27c      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e20:	2310      	movs	r3, #16
 8010e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e26:	e278      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e28:	2320      	movs	r3, #32
 8010e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2e:	e274      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e30:	2340      	movs	r3, #64	; 0x40
 8010e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e36:	e270      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e38:	2380      	movs	r3, #128	; 0x80
 8010e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3e:	e26c      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a1b      	ldr	r2, [pc, #108]	; (8010eb4 <UART_SetConfig+0x348>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d142      	bne.n	8010ed0 <UART_SetConfig+0x364>
 8010e4a:	4b16      	ldr	r3, [pc, #88]	; (8010ea4 <UART_SetConfig+0x338>)
 8010e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e4e:	f003 0307 	and.w	r3, r3, #7
 8010e52:	2b05      	cmp	r3, #5
 8010e54:	d838      	bhi.n	8010ec8 <UART_SetConfig+0x35c>
 8010e56:	a201      	add	r2, pc, #4	; (adr r2, 8010e5c <UART_SetConfig+0x2f0>)
 8010e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5c:	08010e75 	.word	0x08010e75
 8010e60:	08010e7d 	.word	0x08010e7d
 8010e64:	08010e85 	.word	0x08010e85
 8010e68:	08010e8d 	.word	0x08010e8d
 8010e6c:	08010eb9 	.word	0x08010eb9
 8010e70:	08010ec1 	.word	0x08010ec1
 8010e74:	2300      	movs	r3, #0
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e24e      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e7c:	2304      	movs	r3, #4
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e24a      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e84:	2308      	movs	r3, #8
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e246      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e8c:	2310      	movs	r3, #16
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e242      	b.n	801131a <UART_SetConfig+0x7ae>
 8010e94:	cfff69f3 	.word	0xcfff69f3
 8010e98:	58000c00 	.word	0x58000c00
 8010e9c:	11fff4ff 	.word	0x11fff4ff
 8010ea0:	40011000 	.word	0x40011000
 8010ea4:	58024400 	.word	0x58024400
 8010ea8:	40004400 	.word	0x40004400
 8010eac:	40004800 	.word	0x40004800
 8010eb0:	40004c00 	.word	0x40004c00
 8010eb4:	40005000 	.word	0x40005000
 8010eb8:	2320      	movs	r3, #32
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e22c      	b.n	801131a <UART_SetConfig+0x7ae>
 8010ec0:	2340      	movs	r3, #64	; 0x40
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e228      	b.n	801131a <UART_SetConfig+0x7ae>
 8010ec8:	2380      	movs	r3, #128	; 0x80
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e224      	b.n	801131a <UART_SetConfig+0x7ae>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	4ab1      	ldr	r2, [pc, #708]	; (801119c <UART_SetConfig+0x630>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d176      	bne.n	8010fc8 <UART_SetConfig+0x45c>
 8010eda:	4bb1      	ldr	r3, [pc, #708]	; (80111a0 <UART_SetConfig+0x634>)
 8010edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ee2:	2b28      	cmp	r3, #40	; 0x28
 8010ee4:	d86c      	bhi.n	8010fc0 <UART_SetConfig+0x454>
 8010ee6:	a201      	add	r2, pc, #4	; (adr r2, 8010eec <UART_SetConfig+0x380>)
 8010ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eec:	08010f91 	.word	0x08010f91
 8010ef0:	08010fc1 	.word	0x08010fc1
 8010ef4:	08010fc1 	.word	0x08010fc1
 8010ef8:	08010fc1 	.word	0x08010fc1
 8010efc:	08010fc1 	.word	0x08010fc1
 8010f00:	08010fc1 	.word	0x08010fc1
 8010f04:	08010fc1 	.word	0x08010fc1
 8010f08:	08010fc1 	.word	0x08010fc1
 8010f0c:	08010f99 	.word	0x08010f99
 8010f10:	08010fc1 	.word	0x08010fc1
 8010f14:	08010fc1 	.word	0x08010fc1
 8010f18:	08010fc1 	.word	0x08010fc1
 8010f1c:	08010fc1 	.word	0x08010fc1
 8010f20:	08010fc1 	.word	0x08010fc1
 8010f24:	08010fc1 	.word	0x08010fc1
 8010f28:	08010fc1 	.word	0x08010fc1
 8010f2c:	08010fa1 	.word	0x08010fa1
 8010f30:	08010fc1 	.word	0x08010fc1
 8010f34:	08010fc1 	.word	0x08010fc1
 8010f38:	08010fc1 	.word	0x08010fc1
 8010f3c:	08010fc1 	.word	0x08010fc1
 8010f40:	08010fc1 	.word	0x08010fc1
 8010f44:	08010fc1 	.word	0x08010fc1
 8010f48:	08010fc1 	.word	0x08010fc1
 8010f4c:	08010fa9 	.word	0x08010fa9
 8010f50:	08010fc1 	.word	0x08010fc1
 8010f54:	08010fc1 	.word	0x08010fc1
 8010f58:	08010fc1 	.word	0x08010fc1
 8010f5c:	08010fc1 	.word	0x08010fc1
 8010f60:	08010fc1 	.word	0x08010fc1
 8010f64:	08010fc1 	.word	0x08010fc1
 8010f68:	08010fc1 	.word	0x08010fc1
 8010f6c:	08010fb1 	.word	0x08010fb1
 8010f70:	08010fc1 	.word	0x08010fc1
 8010f74:	08010fc1 	.word	0x08010fc1
 8010f78:	08010fc1 	.word	0x08010fc1
 8010f7c:	08010fc1 	.word	0x08010fc1
 8010f80:	08010fc1 	.word	0x08010fc1
 8010f84:	08010fc1 	.word	0x08010fc1
 8010f88:	08010fc1 	.word	0x08010fc1
 8010f8c:	08010fb9 	.word	0x08010fb9
 8010f90:	2301      	movs	r3, #1
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f96:	e1c0      	b.n	801131a <UART_SetConfig+0x7ae>
 8010f98:	2304      	movs	r3, #4
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9e:	e1bc      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fa0:	2308      	movs	r3, #8
 8010fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fa6:	e1b8      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fa8:	2310      	movs	r3, #16
 8010faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fae:	e1b4      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fb0:	2320      	movs	r3, #32
 8010fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fb6:	e1b0      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fb8:	2340      	movs	r3, #64	; 0x40
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fbe:	e1ac      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fc0:	2380      	movs	r3, #128	; 0x80
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc6:	e1a8      	b.n	801131a <UART_SetConfig+0x7ae>
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4a75      	ldr	r2, [pc, #468]	; (80111a4 <UART_SetConfig+0x638>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d130      	bne.n	8011034 <UART_SetConfig+0x4c8>
 8010fd2:	4b73      	ldr	r3, [pc, #460]	; (80111a0 <UART_SetConfig+0x634>)
 8010fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fd6:	f003 0307 	and.w	r3, r3, #7
 8010fda:	2b05      	cmp	r3, #5
 8010fdc:	d826      	bhi.n	801102c <UART_SetConfig+0x4c0>
 8010fde:	a201      	add	r2, pc, #4	; (adr r2, 8010fe4 <UART_SetConfig+0x478>)
 8010fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fe4:	08010ffd 	.word	0x08010ffd
 8010fe8:	08011005 	.word	0x08011005
 8010fec:	0801100d 	.word	0x0801100d
 8010ff0:	08011015 	.word	0x08011015
 8010ff4:	0801101d 	.word	0x0801101d
 8010ff8:	08011025 	.word	0x08011025
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011002:	e18a      	b.n	801131a <UART_SetConfig+0x7ae>
 8011004:	2304      	movs	r3, #4
 8011006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100a:	e186      	b.n	801131a <UART_SetConfig+0x7ae>
 801100c:	2308      	movs	r3, #8
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011012:	e182      	b.n	801131a <UART_SetConfig+0x7ae>
 8011014:	2310      	movs	r3, #16
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101a:	e17e      	b.n	801131a <UART_SetConfig+0x7ae>
 801101c:	2320      	movs	r3, #32
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011022:	e17a      	b.n	801131a <UART_SetConfig+0x7ae>
 8011024:	2340      	movs	r3, #64	; 0x40
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102a:	e176      	b.n	801131a <UART_SetConfig+0x7ae>
 801102c:	2380      	movs	r3, #128	; 0x80
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011032:	e172      	b.n	801131a <UART_SetConfig+0x7ae>
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a5b      	ldr	r2, [pc, #364]	; (80111a8 <UART_SetConfig+0x63c>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d130      	bne.n	80110a0 <UART_SetConfig+0x534>
 801103e:	4b58      	ldr	r3, [pc, #352]	; (80111a0 <UART_SetConfig+0x634>)
 8011040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011042:	f003 0307 	and.w	r3, r3, #7
 8011046:	2b05      	cmp	r3, #5
 8011048:	d826      	bhi.n	8011098 <UART_SetConfig+0x52c>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <UART_SetConfig+0x4e4>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011069 	.word	0x08011069
 8011054:	08011071 	.word	0x08011071
 8011058:	08011079 	.word	0x08011079
 801105c:	08011081 	.word	0x08011081
 8011060:	08011089 	.word	0x08011089
 8011064:	08011091 	.word	0x08011091
 8011068:	2300      	movs	r3, #0
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e154      	b.n	801131a <UART_SetConfig+0x7ae>
 8011070:	2304      	movs	r3, #4
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e150      	b.n	801131a <UART_SetConfig+0x7ae>
 8011078:	2308      	movs	r3, #8
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e14c      	b.n	801131a <UART_SetConfig+0x7ae>
 8011080:	2310      	movs	r3, #16
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e148      	b.n	801131a <UART_SetConfig+0x7ae>
 8011088:	2320      	movs	r3, #32
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e144      	b.n	801131a <UART_SetConfig+0x7ae>
 8011090:	2340      	movs	r3, #64	; 0x40
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e140      	b.n	801131a <UART_SetConfig+0x7ae>
 8011098:	2380      	movs	r3, #128	; 0x80
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109e:	e13c      	b.n	801131a <UART_SetConfig+0x7ae>
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a41      	ldr	r2, [pc, #260]	; (80111ac <UART_SetConfig+0x640>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	f040 8082 	bne.w	80111b0 <UART_SetConfig+0x644>
 80110ac:	4b3c      	ldr	r3, [pc, #240]	; (80111a0 <UART_SetConfig+0x634>)
 80110ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110b4:	2b28      	cmp	r3, #40	; 0x28
 80110b6:	d86d      	bhi.n	8011194 <UART_SetConfig+0x628>
 80110b8:	a201      	add	r2, pc, #4	; (adr r2, 80110c0 <UART_SetConfig+0x554>)
 80110ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110be:	bf00      	nop
 80110c0:	08011165 	.word	0x08011165
 80110c4:	08011195 	.word	0x08011195
 80110c8:	08011195 	.word	0x08011195
 80110cc:	08011195 	.word	0x08011195
 80110d0:	08011195 	.word	0x08011195
 80110d4:	08011195 	.word	0x08011195
 80110d8:	08011195 	.word	0x08011195
 80110dc:	08011195 	.word	0x08011195
 80110e0:	0801116d 	.word	0x0801116d
 80110e4:	08011195 	.word	0x08011195
 80110e8:	08011195 	.word	0x08011195
 80110ec:	08011195 	.word	0x08011195
 80110f0:	08011195 	.word	0x08011195
 80110f4:	08011195 	.word	0x08011195
 80110f8:	08011195 	.word	0x08011195
 80110fc:	08011195 	.word	0x08011195
 8011100:	08011175 	.word	0x08011175
 8011104:	08011195 	.word	0x08011195
 8011108:	08011195 	.word	0x08011195
 801110c:	08011195 	.word	0x08011195
 8011110:	08011195 	.word	0x08011195
 8011114:	08011195 	.word	0x08011195
 8011118:	08011195 	.word	0x08011195
 801111c:	08011195 	.word	0x08011195
 8011120:	0801117d 	.word	0x0801117d
 8011124:	08011195 	.word	0x08011195
 8011128:	08011195 	.word	0x08011195
 801112c:	08011195 	.word	0x08011195
 8011130:	08011195 	.word	0x08011195
 8011134:	08011195 	.word	0x08011195
 8011138:	08011195 	.word	0x08011195
 801113c:	08011195 	.word	0x08011195
 8011140:	08011185 	.word	0x08011185
 8011144:	08011195 	.word	0x08011195
 8011148:	08011195 	.word	0x08011195
 801114c:	08011195 	.word	0x08011195
 8011150:	08011195 	.word	0x08011195
 8011154:	08011195 	.word	0x08011195
 8011158:	08011195 	.word	0x08011195
 801115c:	08011195 	.word	0x08011195
 8011160:	0801118d 	.word	0x0801118d
 8011164:	2301      	movs	r3, #1
 8011166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116a:	e0d6      	b.n	801131a <UART_SetConfig+0x7ae>
 801116c:	2304      	movs	r3, #4
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e0d2      	b.n	801131a <UART_SetConfig+0x7ae>
 8011174:	2308      	movs	r3, #8
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e0ce      	b.n	801131a <UART_SetConfig+0x7ae>
 801117c:	2310      	movs	r3, #16
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e0ca      	b.n	801131a <UART_SetConfig+0x7ae>
 8011184:	2320      	movs	r3, #32
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e0c6      	b.n	801131a <UART_SetConfig+0x7ae>
 801118c:	2340      	movs	r3, #64	; 0x40
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e0c2      	b.n	801131a <UART_SetConfig+0x7ae>
 8011194:	2380      	movs	r3, #128	; 0x80
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e0be      	b.n	801131a <UART_SetConfig+0x7ae>
 801119c:	40011400 	.word	0x40011400
 80111a0:	58024400 	.word	0x58024400
 80111a4:	40007800 	.word	0x40007800
 80111a8:	40007c00 	.word	0x40007c00
 80111ac:	40011800 	.word	0x40011800
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4aad      	ldr	r2, [pc, #692]	; (801146c <UART_SetConfig+0x900>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d176      	bne.n	80112a8 <UART_SetConfig+0x73c>
 80111ba:	4bad      	ldr	r3, [pc, #692]	; (8011470 <UART_SetConfig+0x904>)
 80111bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111c2:	2b28      	cmp	r3, #40	; 0x28
 80111c4:	d86c      	bhi.n	80112a0 <UART_SetConfig+0x734>
 80111c6:	a201      	add	r2, pc, #4	; (adr r2, 80111cc <UART_SetConfig+0x660>)
 80111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111cc:	08011271 	.word	0x08011271
 80111d0:	080112a1 	.word	0x080112a1
 80111d4:	080112a1 	.word	0x080112a1
 80111d8:	080112a1 	.word	0x080112a1
 80111dc:	080112a1 	.word	0x080112a1
 80111e0:	080112a1 	.word	0x080112a1
 80111e4:	080112a1 	.word	0x080112a1
 80111e8:	080112a1 	.word	0x080112a1
 80111ec:	08011279 	.word	0x08011279
 80111f0:	080112a1 	.word	0x080112a1
 80111f4:	080112a1 	.word	0x080112a1
 80111f8:	080112a1 	.word	0x080112a1
 80111fc:	080112a1 	.word	0x080112a1
 8011200:	080112a1 	.word	0x080112a1
 8011204:	080112a1 	.word	0x080112a1
 8011208:	080112a1 	.word	0x080112a1
 801120c:	08011281 	.word	0x08011281
 8011210:	080112a1 	.word	0x080112a1
 8011214:	080112a1 	.word	0x080112a1
 8011218:	080112a1 	.word	0x080112a1
 801121c:	080112a1 	.word	0x080112a1
 8011220:	080112a1 	.word	0x080112a1
 8011224:	080112a1 	.word	0x080112a1
 8011228:	080112a1 	.word	0x080112a1
 801122c:	08011289 	.word	0x08011289
 8011230:	080112a1 	.word	0x080112a1
 8011234:	080112a1 	.word	0x080112a1
 8011238:	080112a1 	.word	0x080112a1
 801123c:	080112a1 	.word	0x080112a1
 8011240:	080112a1 	.word	0x080112a1
 8011244:	080112a1 	.word	0x080112a1
 8011248:	080112a1 	.word	0x080112a1
 801124c:	08011291 	.word	0x08011291
 8011250:	080112a1 	.word	0x080112a1
 8011254:	080112a1 	.word	0x080112a1
 8011258:	080112a1 	.word	0x080112a1
 801125c:	080112a1 	.word	0x080112a1
 8011260:	080112a1 	.word	0x080112a1
 8011264:	080112a1 	.word	0x080112a1
 8011268:	080112a1 	.word	0x080112a1
 801126c:	08011299 	.word	0x08011299
 8011270:	2301      	movs	r3, #1
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e050      	b.n	801131a <UART_SetConfig+0x7ae>
 8011278:	2304      	movs	r3, #4
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e04c      	b.n	801131a <UART_SetConfig+0x7ae>
 8011280:	2308      	movs	r3, #8
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e048      	b.n	801131a <UART_SetConfig+0x7ae>
 8011288:	2310      	movs	r3, #16
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e044      	b.n	801131a <UART_SetConfig+0x7ae>
 8011290:	2320      	movs	r3, #32
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011296:	e040      	b.n	801131a <UART_SetConfig+0x7ae>
 8011298:	2340      	movs	r3, #64	; 0x40
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e03c      	b.n	801131a <UART_SetConfig+0x7ae>
 80112a0:	2380      	movs	r3, #128	; 0x80
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e038      	b.n	801131a <UART_SetConfig+0x7ae>
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a71      	ldr	r2, [pc, #452]	; (8011474 <UART_SetConfig+0x908>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d130      	bne.n	8011314 <UART_SetConfig+0x7a8>
 80112b2:	4b6f      	ldr	r3, [pc, #444]	; (8011470 <UART_SetConfig+0x904>)
 80112b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112b6:	f003 0307 	and.w	r3, r3, #7
 80112ba:	2b05      	cmp	r3, #5
 80112bc:	d826      	bhi.n	801130c <UART_SetConfig+0x7a0>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <UART_SetConfig+0x758>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	080112dd 	.word	0x080112dd
 80112c8:	080112e5 	.word	0x080112e5
 80112cc:	080112ed 	.word	0x080112ed
 80112d0:	080112f5 	.word	0x080112f5
 80112d4:	080112fd 	.word	0x080112fd
 80112d8:	08011305 	.word	0x08011305
 80112dc:	2302      	movs	r3, #2
 80112de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e2:	e01a      	b.n	801131a <UART_SetConfig+0x7ae>
 80112e4:	2304      	movs	r3, #4
 80112e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ea:	e016      	b.n	801131a <UART_SetConfig+0x7ae>
 80112ec:	2308      	movs	r3, #8
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f2:	e012      	b.n	801131a <UART_SetConfig+0x7ae>
 80112f4:	2310      	movs	r3, #16
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fa:	e00e      	b.n	801131a <UART_SetConfig+0x7ae>
 80112fc:	2320      	movs	r3, #32
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011302:	e00a      	b.n	801131a <UART_SetConfig+0x7ae>
 8011304:	2340      	movs	r3, #64	; 0x40
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e006      	b.n	801131a <UART_SetConfig+0x7ae>
 801130c:	2380      	movs	r3, #128	; 0x80
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e002      	b.n	801131a <UART_SetConfig+0x7ae>
 8011314:	2380      	movs	r3, #128	; 0x80
 8011316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a55      	ldr	r2, [pc, #340]	; (8011474 <UART_SetConfig+0x908>)
 8011320:	4293      	cmp	r3, r2
 8011322:	f040 80f8 	bne.w	8011516 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011326:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801132a:	2b20      	cmp	r3, #32
 801132c:	dc46      	bgt.n	80113bc <UART_SetConfig+0x850>
 801132e:	2b02      	cmp	r3, #2
 8011330:	db75      	blt.n	801141e <UART_SetConfig+0x8b2>
 8011332:	3b02      	subs	r3, #2
 8011334:	2b1e      	cmp	r3, #30
 8011336:	d872      	bhi.n	801141e <UART_SetConfig+0x8b2>
 8011338:	a201      	add	r2, pc, #4	; (adr r2, 8011340 <UART_SetConfig+0x7d4>)
 801133a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801133e:	bf00      	nop
 8011340:	080113c3 	.word	0x080113c3
 8011344:	0801141f 	.word	0x0801141f
 8011348:	080113cb 	.word	0x080113cb
 801134c:	0801141f 	.word	0x0801141f
 8011350:	0801141f 	.word	0x0801141f
 8011354:	0801141f 	.word	0x0801141f
 8011358:	080113db 	.word	0x080113db
 801135c:	0801141f 	.word	0x0801141f
 8011360:	0801141f 	.word	0x0801141f
 8011364:	0801141f 	.word	0x0801141f
 8011368:	0801141f 	.word	0x0801141f
 801136c:	0801141f 	.word	0x0801141f
 8011370:	0801141f 	.word	0x0801141f
 8011374:	0801141f 	.word	0x0801141f
 8011378:	080113eb 	.word	0x080113eb
 801137c:	0801141f 	.word	0x0801141f
 8011380:	0801141f 	.word	0x0801141f
 8011384:	0801141f 	.word	0x0801141f
 8011388:	0801141f 	.word	0x0801141f
 801138c:	0801141f 	.word	0x0801141f
 8011390:	0801141f 	.word	0x0801141f
 8011394:	0801141f 	.word	0x0801141f
 8011398:	0801141f 	.word	0x0801141f
 801139c:	0801141f 	.word	0x0801141f
 80113a0:	0801141f 	.word	0x0801141f
 80113a4:	0801141f 	.word	0x0801141f
 80113a8:	0801141f 	.word	0x0801141f
 80113ac:	0801141f 	.word	0x0801141f
 80113b0:	0801141f 	.word	0x0801141f
 80113b4:	0801141f 	.word	0x0801141f
 80113b8:	08011411 	.word	0x08011411
 80113bc:	2b40      	cmp	r3, #64	; 0x40
 80113be:	d02a      	beq.n	8011416 <UART_SetConfig+0x8aa>
 80113c0:	e02d      	b.n	801141e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80113c2:	f7fa febd 	bl	800c140 <HAL_RCCEx_GetD3PCLK1Freq>
 80113c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80113c8:	e02f      	b.n	801142a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fa fecc 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113d8:	e027      	b.n	801142a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113da:	f107 0318 	add.w	r3, r7, #24
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fb f818 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80113e8:	e01f      	b.n	801142a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113ea:	4b21      	ldr	r3, [pc, #132]	; (8011470 <UART_SetConfig+0x904>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	f003 0320 	and.w	r3, r3, #32
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d009      	beq.n	801140a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113f6:	4b1e      	ldr	r3, [pc, #120]	; (8011470 <UART_SetConfig+0x904>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	08db      	lsrs	r3, r3, #3
 80113fc:	f003 0303 	and.w	r3, r3, #3
 8011400:	4a1d      	ldr	r2, [pc, #116]	; (8011478 <UART_SetConfig+0x90c>)
 8011402:	fa22 f303 	lsr.w	r3, r2, r3
 8011406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011408:	e00f      	b.n	801142a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801140a:	4b1b      	ldr	r3, [pc, #108]	; (8011478 <UART_SetConfig+0x90c>)
 801140c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801140e:	e00c      	b.n	801142a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011410:	4b1a      	ldr	r3, [pc, #104]	; (801147c <UART_SetConfig+0x910>)
 8011412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011414:	e009      	b.n	801142a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801141a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801141c:	e005      	b.n	801142a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801141e:	2300      	movs	r3, #0
 8011420:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011422:	2301      	movs	r3, #1
 8011424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801142a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 81ee 	beq.w	801180e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011436:	4a12      	ldr	r2, [pc, #72]	; (8011480 <UART_SetConfig+0x914>)
 8011438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801143c:	461a      	mov	r2, r3
 801143e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011440:	fbb3 f3f2 	udiv	r3, r3, r2
 8011444:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	685a      	ldr	r2, [r3, #4]
 801144a:	4613      	mov	r3, r2
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	4413      	add	r3, r2
 8011450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011452:	429a      	cmp	r2, r3
 8011454:	d305      	bcc.n	8011462 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801145c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801145e:	429a      	cmp	r2, r3
 8011460:	d910      	bls.n	8011484 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011462:	2301      	movs	r3, #1
 8011464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011468:	e1d1      	b.n	801180e <UART_SetConfig+0xca2>
 801146a:	bf00      	nop
 801146c:	40011c00 	.word	0x40011c00
 8011470:	58024400 	.word	0x58024400
 8011474:	58000c00 	.word	0x58000c00
 8011478:	03d09000 	.word	0x03d09000
 801147c:	003d0900 	.word	0x003d0900
 8011480:	0801e14c 	.word	0x0801e14c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011486:	2200      	movs	r2, #0
 8011488:	60bb      	str	r3, [r7, #8]
 801148a:	60fa      	str	r2, [r7, #12]
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011490:	4ac0      	ldr	r2, [pc, #768]	; (8011794 <UART_SetConfig+0xc28>)
 8011492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011496:	b29b      	uxth	r3, r3
 8011498:	2200      	movs	r2, #0
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	607a      	str	r2, [r7, #4]
 801149e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80114a6:	f7ef f947 	bl	8000738 <__aeabi_uldivmod>
 80114aa:	4602      	mov	r2, r0
 80114ac:	460b      	mov	r3, r1
 80114ae:	4610      	mov	r0, r2
 80114b0:	4619      	mov	r1, r3
 80114b2:	f04f 0200 	mov.w	r2, #0
 80114b6:	f04f 0300 	mov.w	r3, #0
 80114ba:	020b      	lsls	r3, r1, #8
 80114bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80114c0:	0202      	lsls	r2, r0, #8
 80114c2:	6979      	ldr	r1, [r7, #20]
 80114c4:	6849      	ldr	r1, [r1, #4]
 80114c6:	0849      	lsrs	r1, r1, #1
 80114c8:	2000      	movs	r0, #0
 80114ca:	460c      	mov	r4, r1
 80114cc:	4605      	mov	r5, r0
 80114ce:	eb12 0804 	adds.w	r8, r2, r4
 80114d2:	eb43 0905 	adc.w	r9, r3, r5
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	469a      	mov	sl, r3
 80114de:	4693      	mov	fp, r2
 80114e0:	4652      	mov	r2, sl
 80114e2:	465b      	mov	r3, fp
 80114e4:	4640      	mov	r0, r8
 80114e6:	4649      	mov	r1, r9
 80114e8:	f7ef f926 	bl	8000738 <__aeabi_uldivmod>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4613      	mov	r3, r2
 80114f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80114f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80114fa:	d308      	bcc.n	801150e <UART_SetConfig+0x9a2>
 80114fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011502:	d204      	bcs.n	801150e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801150a:	60da      	str	r2, [r3, #12]
 801150c:	e17f      	b.n	801180e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801150e:	2301      	movs	r3, #1
 8011510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011514:	e17b      	b.n	801180e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	69db      	ldr	r3, [r3, #28]
 801151a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801151e:	f040 80bd 	bne.w	801169c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011526:	2b20      	cmp	r3, #32
 8011528:	dc48      	bgt.n	80115bc <UART_SetConfig+0xa50>
 801152a:	2b00      	cmp	r3, #0
 801152c:	db7b      	blt.n	8011626 <UART_SetConfig+0xaba>
 801152e:	2b20      	cmp	r3, #32
 8011530:	d879      	bhi.n	8011626 <UART_SetConfig+0xaba>
 8011532:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <UART_SetConfig+0x9cc>)
 8011534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011538:	080115c3 	.word	0x080115c3
 801153c:	080115cb 	.word	0x080115cb
 8011540:	08011627 	.word	0x08011627
 8011544:	08011627 	.word	0x08011627
 8011548:	080115d3 	.word	0x080115d3
 801154c:	08011627 	.word	0x08011627
 8011550:	08011627 	.word	0x08011627
 8011554:	08011627 	.word	0x08011627
 8011558:	080115e3 	.word	0x080115e3
 801155c:	08011627 	.word	0x08011627
 8011560:	08011627 	.word	0x08011627
 8011564:	08011627 	.word	0x08011627
 8011568:	08011627 	.word	0x08011627
 801156c:	08011627 	.word	0x08011627
 8011570:	08011627 	.word	0x08011627
 8011574:	08011627 	.word	0x08011627
 8011578:	080115f3 	.word	0x080115f3
 801157c:	08011627 	.word	0x08011627
 8011580:	08011627 	.word	0x08011627
 8011584:	08011627 	.word	0x08011627
 8011588:	08011627 	.word	0x08011627
 801158c:	08011627 	.word	0x08011627
 8011590:	08011627 	.word	0x08011627
 8011594:	08011627 	.word	0x08011627
 8011598:	08011627 	.word	0x08011627
 801159c:	08011627 	.word	0x08011627
 80115a0:	08011627 	.word	0x08011627
 80115a4:	08011627 	.word	0x08011627
 80115a8:	08011627 	.word	0x08011627
 80115ac:	08011627 	.word	0x08011627
 80115b0:	08011627 	.word	0x08011627
 80115b4:	08011627 	.word	0x08011627
 80115b8:	08011619 	.word	0x08011619
 80115bc:	2b40      	cmp	r3, #64	; 0x40
 80115be:	d02e      	beq.n	801161e <UART_SetConfig+0xab2>
 80115c0:	e031      	b.n	8011626 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80115c2:	f7f8 ff1f 	bl	800a404 <HAL_RCC_GetPCLK1Freq>
 80115c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115c8:	e033      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80115ca:	f7f8 ff31 	bl	800a430 <HAL_RCC_GetPCLK2Freq>
 80115ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115d0:	e02f      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fa fdc8 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e0:	e027      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115e2:	f107 0318 	add.w	r3, r7, #24
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7fa ff14 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115f0:	e01f      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115f2:	4b69      	ldr	r3, [pc, #420]	; (8011798 <UART_SetConfig+0xc2c>)
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f003 0320 	and.w	r3, r3, #32
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d009      	beq.n	8011612 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80115fe:	4b66      	ldr	r3, [pc, #408]	; (8011798 <UART_SetConfig+0xc2c>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	08db      	lsrs	r3, r3, #3
 8011604:	f003 0303 	and.w	r3, r3, #3
 8011608:	4a64      	ldr	r2, [pc, #400]	; (801179c <UART_SetConfig+0xc30>)
 801160a:	fa22 f303 	lsr.w	r3, r2, r3
 801160e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011610:	e00f      	b.n	8011632 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011612:	4b62      	ldr	r3, [pc, #392]	; (801179c <UART_SetConfig+0xc30>)
 8011614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011616:	e00c      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011618:	4b61      	ldr	r3, [pc, #388]	; (80117a0 <UART_SetConfig+0xc34>)
 801161a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801161c:	e009      	b.n	8011632 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801161e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011624:	e005      	b.n	8011632 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011626:	2300      	movs	r3, #0
 8011628:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801162a:	2301      	movs	r3, #1
 801162c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011634:	2b00      	cmp	r3, #0
 8011636:	f000 80ea 	beq.w	801180e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163e:	4a55      	ldr	r2, [pc, #340]	; (8011794 <UART_SetConfig+0xc28>)
 8011640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011644:	461a      	mov	r2, r3
 8011646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011648:	fbb3 f3f2 	udiv	r3, r3, r2
 801164c:	005a      	lsls	r2, r3, #1
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	085b      	lsrs	r3, r3, #1
 8011654:	441a      	add	r2, r3
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	fbb2 f3f3 	udiv	r3, r2, r3
 801165e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	2b0f      	cmp	r3, #15
 8011664:	d916      	bls.n	8011694 <UART_SetConfig+0xb28>
 8011666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801166c:	d212      	bcs.n	8011694 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011670:	b29b      	uxth	r3, r3
 8011672:	f023 030f 	bic.w	r3, r3, #15
 8011676:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	085b      	lsrs	r3, r3, #1
 801167c:	b29b      	uxth	r3, r3
 801167e:	f003 0307 	and.w	r3, r3, #7
 8011682:	b29a      	uxth	r2, r3
 8011684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011686:	4313      	orrs	r3, r2
 8011688:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011690:	60da      	str	r2, [r3, #12]
 8011692:	e0bc      	b.n	801180e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011694:	2301      	movs	r3, #1
 8011696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801169a:	e0b8      	b.n	801180e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801169c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80116a0:	2b20      	cmp	r3, #32
 80116a2:	dc4b      	bgt.n	801173c <UART_SetConfig+0xbd0>
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f2c0 8087 	blt.w	80117b8 <UART_SetConfig+0xc4c>
 80116aa:	2b20      	cmp	r3, #32
 80116ac:	f200 8084 	bhi.w	80117b8 <UART_SetConfig+0xc4c>
 80116b0:	a201      	add	r2, pc, #4	; (adr r2, 80116b8 <UART_SetConfig+0xb4c>)
 80116b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b6:	bf00      	nop
 80116b8:	08011743 	.word	0x08011743
 80116bc:	0801174b 	.word	0x0801174b
 80116c0:	080117b9 	.word	0x080117b9
 80116c4:	080117b9 	.word	0x080117b9
 80116c8:	08011753 	.word	0x08011753
 80116cc:	080117b9 	.word	0x080117b9
 80116d0:	080117b9 	.word	0x080117b9
 80116d4:	080117b9 	.word	0x080117b9
 80116d8:	08011763 	.word	0x08011763
 80116dc:	080117b9 	.word	0x080117b9
 80116e0:	080117b9 	.word	0x080117b9
 80116e4:	080117b9 	.word	0x080117b9
 80116e8:	080117b9 	.word	0x080117b9
 80116ec:	080117b9 	.word	0x080117b9
 80116f0:	080117b9 	.word	0x080117b9
 80116f4:	080117b9 	.word	0x080117b9
 80116f8:	08011773 	.word	0x08011773
 80116fc:	080117b9 	.word	0x080117b9
 8011700:	080117b9 	.word	0x080117b9
 8011704:	080117b9 	.word	0x080117b9
 8011708:	080117b9 	.word	0x080117b9
 801170c:	080117b9 	.word	0x080117b9
 8011710:	080117b9 	.word	0x080117b9
 8011714:	080117b9 	.word	0x080117b9
 8011718:	080117b9 	.word	0x080117b9
 801171c:	080117b9 	.word	0x080117b9
 8011720:	080117b9 	.word	0x080117b9
 8011724:	080117b9 	.word	0x080117b9
 8011728:	080117b9 	.word	0x080117b9
 801172c:	080117b9 	.word	0x080117b9
 8011730:	080117b9 	.word	0x080117b9
 8011734:	080117b9 	.word	0x080117b9
 8011738:	080117ab 	.word	0x080117ab
 801173c:	2b40      	cmp	r3, #64	; 0x40
 801173e:	d037      	beq.n	80117b0 <UART_SetConfig+0xc44>
 8011740:	e03a      	b.n	80117b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011742:	f7f8 fe5f 	bl	800a404 <HAL_RCC_GetPCLK1Freq>
 8011746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011748:	e03c      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801174a:	f7f8 fe71 	bl	800a430 <HAL_RCC_GetPCLK2Freq>
 801174e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011750:	e038      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011756:	4618      	mov	r0, r3
 8011758:	f7fa fd08 	bl	800c16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011760:	e030      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011762:	f107 0318 	add.w	r3, r7, #24
 8011766:	4618      	mov	r0, r3
 8011768:	f7fa fe54 	bl	800c414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011770:	e028      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011772:	4b09      	ldr	r3, [pc, #36]	; (8011798 <UART_SetConfig+0xc2c>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f003 0320 	and.w	r3, r3, #32
 801177a:	2b00      	cmp	r3, #0
 801177c:	d012      	beq.n	80117a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801177e:	4b06      	ldr	r3, [pc, #24]	; (8011798 <UART_SetConfig+0xc2c>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	08db      	lsrs	r3, r3, #3
 8011784:	f003 0303 	and.w	r3, r3, #3
 8011788:	4a04      	ldr	r2, [pc, #16]	; (801179c <UART_SetConfig+0xc30>)
 801178a:	fa22 f303 	lsr.w	r3, r2, r3
 801178e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011790:	e018      	b.n	80117c4 <UART_SetConfig+0xc58>
 8011792:	bf00      	nop
 8011794:	0801e14c 	.word	0x0801e14c
 8011798:	58024400 	.word	0x58024400
 801179c:	03d09000 	.word	0x03d09000
 80117a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80117a4:	4b24      	ldr	r3, [pc, #144]	; (8011838 <UART_SetConfig+0xccc>)
 80117a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117a8:	e00c      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80117aa:	4b24      	ldr	r3, [pc, #144]	; (801183c <UART_SetConfig+0xcd0>)
 80117ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117ae:	e009      	b.n	80117c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80117b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117b6:	e005      	b.n	80117c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80117b8:	2300      	movs	r3, #0
 80117ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80117c2:	bf00      	nop
    }

    if (pclk != 0U)
 80117c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d021      	beq.n	801180e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ce:	4a1c      	ldr	r2, [pc, #112]	; (8011840 <UART_SetConfig+0xcd4>)
 80117d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117d4:	461a      	mov	r2, r3
 80117d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	085b      	lsrs	r3, r3, #1
 80117e2:	441a      	add	r2, r3
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f0:	2b0f      	cmp	r3, #15
 80117f2:	d909      	bls.n	8011808 <UART_SetConfig+0xc9c>
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117fa:	d205      	bcs.n	8011808 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80117fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fe:	b29a      	uxth	r2, r3
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	60da      	str	r2, [r3, #12]
 8011806:	e002      	b.n	801180e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	2201      	movs	r2, #1
 8011812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	2201      	movs	r2, #1
 801181a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2200      	movs	r2, #0
 8011822:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	2200      	movs	r2, #0
 8011828:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801182a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801182e:	4618      	mov	r0, r3
 8011830:	3748      	adds	r7, #72	; 0x48
 8011832:	46bd      	mov	sp, r7
 8011834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011838:	03d09000 	.word	0x03d09000
 801183c:	003d0900 	.word	0x003d0900
 8011840:	0801e14c 	.word	0x0801e14c

08011844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00a      	beq.n	801186e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	430a      	orrs	r2, r1
 801186c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011872:	f003 0302 	and.w	r3, r3, #2
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00a      	beq.n	8011890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	430a      	orrs	r2, r1
 801188e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011894:	f003 0304 	and.w	r3, r3, #4
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00a      	beq.n	80118b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	430a      	orrs	r2, r1
 80118b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118b6:	f003 0308 	and.w	r3, r3, #8
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00a      	beq.n	80118d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	430a      	orrs	r2, r1
 80118d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d8:	f003 0310 	and.w	r3, r3, #16
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00a      	beq.n	80118f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	689b      	ldr	r3, [r3, #8]
 80118e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	430a      	orrs	r2, r1
 80118f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118fa:	f003 0320 	and.w	r3, r3, #32
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00a      	beq.n	8011918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	689b      	ldr	r3, [r3, #8]
 8011908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	430a      	orrs	r2, r1
 8011916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01a      	beq.n	801195a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	430a      	orrs	r2, r1
 8011938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801193e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011942:	d10a      	bne.n	801195a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	430a      	orrs	r2, r1
 8011958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011962:	2b00      	cmp	r3, #0
 8011964:	d00a      	beq.n	801197c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	430a      	orrs	r2, r1
 801197a:	605a      	str	r2, [r3, #4]
  }
}
 801197c:	bf00      	nop
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b098      	sub	sp, #96	; 0x60
 801198c:	af02      	add	r7, sp, #8
 801198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011998:	f7f1 fe8c 	bl	80036b4 <HAL_GetTick>
 801199c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f003 0308 	and.w	r3, r3, #8
 80119a8:	2b08      	cmp	r3, #8
 80119aa:	d12f      	bne.n	8011a0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80119ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119b4:	2200      	movs	r2, #0
 80119b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 f88e 	bl	8011adc <UART_WaitOnFlagUntilTimeout>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d022      	beq.n	8011a0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119da:	653b      	str	r3, [r7, #80]	; 0x50
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	461a      	mov	r2, r3
 80119e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e4:	647b      	str	r3, [r7, #68]	; 0x44
 80119e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119ec:	e841 2300 	strex	r3, r2, [r1]
 80119f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e6      	bne.n	80119c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2220      	movs	r2, #32
 80119fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	e063      	b.n	8011ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 0304 	and.w	r3, r3, #4
 8011a16:	2b04      	cmp	r3, #4
 8011a18:	d149      	bne.n	8011aae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a1e:	9300      	str	r3, [sp, #0]
 8011a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a22:	2200      	movs	r2, #0
 8011a24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 f857 	bl	8011adc <UART_WaitOnFlagUntilTimeout>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d03c      	beq.n	8011aae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	e853 3f00 	ldrex	r3, [r3]
 8011a40:	623b      	str	r3, [r7, #32]
   return(result);
 8011a42:	6a3b      	ldr	r3, [r7, #32]
 8011a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a52:	633b      	str	r3, [r7, #48]	; 0x30
 8011a54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a5a:	e841 2300 	strex	r3, r2, [r1]
 8011a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1e6      	bne.n	8011a34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	3308      	adds	r3, #8
 8011a6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	e853 3f00 	ldrex	r3, [r3]
 8011a74:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f023 0301 	bic.w	r3, r3, #1
 8011a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	3308      	adds	r3, #8
 8011a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a86:	61fa      	str	r2, [r7, #28]
 8011a88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a8a:	69b9      	ldr	r1, [r7, #24]
 8011a8c:	69fa      	ldr	r2, [r7, #28]
 8011a8e:	e841 2300 	strex	r3, r2, [r1]
 8011a92:	617b      	str	r3, [r7, #20]
   return(result);
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d1e5      	bne.n	8011a66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2220      	movs	r2, #32
 8011a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011aaa:	2303      	movs	r3, #3
 8011aac:	e012      	b.n	8011ad4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2220      	movs	r2, #32
 8011ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2220      	movs	r2, #32
 8011aba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3758      	adds	r7, #88	; 0x58
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	603b      	str	r3, [r7, #0]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011aec:	e049      	b.n	8011b82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011aee:	69bb      	ldr	r3, [r7, #24]
 8011af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011af4:	d045      	beq.n	8011b82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011af6:	f7f1 fddd 	bl	80036b4 <HAL_GetTick>
 8011afa:	4602      	mov	r2, r0
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	69ba      	ldr	r2, [r7, #24]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d302      	bcc.n	8011b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d101      	bne.n	8011b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b0c:	2303      	movs	r3, #3
 8011b0e:	e048      	b.n	8011ba2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d031      	beq.n	8011b82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	69db      	ldr	r3, [r3, #28]
 8011b24:	f003 0308 	and.w	r3, r3, #8
 8011b28:	2b08      	cmp	r3, #8
 8011b2a:	d110      	bne.n	8011b4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2208      	movs	r2, #8
 8011b32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f839 	bl	8011bac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2208      	movs	r2, #8
 8011b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2200      	movs	r2, #0
 8011b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	e029      	b.n	8011ba2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	69db      	ldr	r3, [r3, #28]
 8011b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011b5c:	d111      	bne.n	8011b82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011b68:	68f8      	ldr	r0, [r7, #12]
 8011b6a:	f000 f81f 	bl	8011bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2220      	movs	r2, #32
 8011b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011b7e:	2303      	movs	r3, #3
 8011b80:	e00f      	b.n	8011ba2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	69da      	ldr	r2, [r3, #28]
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	4013      	ands	r3, r2
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	bf0c      	ite	eq
 8011b92:	2301      	moveq	r3, #1
 8011b94:	2300      	movne	r3, #0
 8011b96:	b2db      	uxtb	r3, r3
 8011b98:	461a      	mov	r2, r3
 8011b9a:	79fb      	ldrb	r3, [r7, #7]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d0a6      	beq.n	8011aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
	...

08011bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b095      	sub	sp, #84	; 0x54
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbc:	e853 3f00 	ldrex	r3, [r3]
 8011bc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	461a      	mov	r2, r3
 8011bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8011bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011bda:	e841 2300 	strex	r3, r2, [r1]
 8011bde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d1e6      	bne.n	8011bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3308      	adds	r3, #8
 8011bec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	e853 3f00 	ldrex	r3, [r3]
 8011bf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011bf6:	69fa      	ldr	r2, [r7, #28]
 8011bf8:	4b1e      	ldr	r3, [pc, #120]	; (8011c74 <UART_EndRxTransfer+0xc8>)
 8011bfa:	4013      	ands	r3, r2
 8011bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	3308      	adds	r3, #8
 8011c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c0e:	e841 2300 	strex	r3, r2, [r1]
 8011c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d1e5      	bne.n	8011be6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c1e:	2b01      	cmp	r3, #1
 8011c20:	d118      	bne.n	8011c54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	e853 3f00 	ldrex	r3, [r3]
 8011c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	f023 0310 	bic.w	r3, r3, #16
 8011c36:	647b      	str	r3, [r7, #68]	; 0x44
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c40:	61bb      	str	r3, [r7, #24]
 8011c42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c44:	6979      	ldr	r1, [r7, #20]
 8011c46:	69ba      	ldr	r2, [r7, #24]
 8011c48:	e841 2300 	strex	r3, r2, [r1]
 8011c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1e6      	bne.n	8011c22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2220      	movs	r2, #32
 8011c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c68:	bf00      	nop
 8011c6a:	3754      	adds	r7, #84	; 0x54
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr
 8011c74:	effffffe 	.word	0xeffffffe

08011c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d101      	bne.n	8011c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	e027      	b.n	8011cde <HAL_UARTEx_DisableFifoMode+0x66>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2201      	movs	r2, #1
 8011c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2224      	movs	r2, #36	; 0x24
 8011c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f022 0201 	bic.w	r2, r2, #1
 8011cb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2220      	movs	r2, #32
 8011cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011cdc:	2300      	movs	r3, #0
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3714      	adds	r7, #20
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce8:	4770      	bx	lr

08011cea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b084      	sub	sp, #16
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d101      	bne.n	8011d02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e02d      	b.n	8011d5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2201      	movs	r2, #1
 8011d06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2224      	movs	r2, #36	; 0x24
 8011d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f022 0201 	bic.w	r2, r2, #1
 8011d28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	683a      	ldr	r2, [r7, #0]
 8011d3a:	430a      	orrs	r2, r1
 8011d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 f850 	bl	8011de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2220      	movs	r2, #32
 8011d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3710      	adds	r7, #16
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d66:	b580      	push	{r7, lr}
 8011d68:	b084      	sub	sp, #16
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
 8011d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d101      	bne.n	8011d7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011d7a:	2302      	movs	r3, #2
 8011d7c:	e02d      	b.n	8011dda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2201      	movs	r2, #1
 8011d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2224      	movs	r2, #36	; 0x24
 8011d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f022 0201 	bic.w	r2, r2, #1
 8011da4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	683a      	ldr	r2, [r7, #0]
 8011db6:	430a      	orrs	r2, r1
 8011db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 f812 	bl	8011de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	68fa      	ldr	r2, [r7, #12]
 8011dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2220      	movs	r2, #32
 8011dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d108      	bne.n	8011e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e04:	e031      	b.n	8011e6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e06:	2310      	movs	r3, #16
 8011e08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e0a:	2310      	movs	r3, #16
 8011e0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	0e5b      	lsrs	r3, r3, #25
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	f003 0307 	and.w	r3, r3, #7
 8011e1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	689b      	ldr	r3, [r3, #8]
 8011e24:	0f5b      	lsrs	r3, r3, #29
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	f003 0307 	and.w	r3, r3, #7
 8011e2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e2e:	7bbb      	ldrb	r3, [r7, #14]
 8011e30:	7b3a      	ldrb	r2, [r7, #12]
 8011e32:	4911      	ldr	r1, [pc, #68]	; (8011e78 <UARTEx_SetNbDataToProcess+0x94>)
 8011e34:	5c8a      	ldrb	r2, [r1, r2]
 8011e36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e3a:	7b3a      	ldrb	r2, [r7, #12]
 8011e3c:	490f      	ldr	r1, [pc, #60]	; (8011e7c <UARTEx_SetNbDataToProcess+0x98>)
 8011e3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	7b7a      	ldrb	r2, [r7, #13]
 8011e50:	4909      	ldr	r1, [pc, #36]	; (8011e78 <UARTEx_SetNbDataToProcess+0x94>)
 8011e52:	5c8a      	ldrb	r2, [r1, r2]
 8011e54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e58:	7b7a      	ldrb	r2, [r7, #13]
 8011e5a:	4908      	ldr	r1, [pc, #32]	; (8011e7c <UARTEx_SetNbDataToProcess+0x98>)
 8011e5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e6a:	bf00      	nop
 8011e6c:	3714      	adds	r7, #20
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	0801e164 	.word	0x0801e164
 8011e7c:	0801e16c 	.word	0x0801e16c

08011e80 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011e80:	b084      	sub	sp, #16
 8011e82:	b480      	push	{r7}
 8011e84:	b085      	sub	sp, #20
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	f107 001c 	add.w	r0, r7, #28
 8011e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011e92:	2300      	movs	r3, #0
 8011e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011e96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011e98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011e9a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011e9e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011ea2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011ea6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	4313      	orrs	r3, r2
 8011eac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685a      	ldr	r2, [r3, #4]
 8011eb2:	4b07      	ldr	r3, [pc, #28]	; (8011ed0 <SDMMC_Init+0x50>)
 8011eb4:	4013      	ands	r3, r2
 8011eb6:	68fa      	ldr	r2, [r7, #12]
 8011eb8:	431a      	orrs	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3714      	adds	r7, #20
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	b004      	add	sp, #16
 8011ecc:	4770      	bx	lr
 8011ece:	bf00      	nop
 8011ed0:	ffc02c00 	.word	0xffc02c00

08011ed4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr

08011eee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011eee:	b480      	push	{r7}
 8011ef0:	b083      	sub	sp, #12
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f02:	2300      	movs	r3, #0
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	370c      	adds	r7, #12
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0e:	4770      	bx	lr

08011f10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011f10:	b480      	push	{r7}
 8011f12:	b083      	sub	sp, #12
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f043 0203 	orr.w	r2, r3, #3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	370c      	adds	r7, #12
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011f32:	b480      	push	{r7}
 8011f34:	b083      	sub	sp, #12
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f003 0303 	and.w	r3, r3, #3
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	370c      	adds	r7, #12
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr
	...

08011f50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b085      	sub	sp, #20
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011f74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011f7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	4313      	orrs	r3, r2
 8011f80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68da      	ldr	r2, [r3, #12]
 8011f86:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <SDMMC_SendCommand+0x50>)
 8011f88:	4013      	ands	r3, r2
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	431a      	orrs	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr
 8011fa0:	fffee0c0 	.word	0xfffee0c0

08011fa4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	691b      	ldr	r3, [r3, #16]
 8011fb0:	b2db      	uxtb	r3, r3
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr

08011fbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011fbe:	b480      	push	{r7}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
 8011fc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	3314      	adds	r3, #20
 8011fcc:	461a      	mov	r2, r3
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	4413      	add	r3, r2
 8011fd2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	3714      	adds	r7, #20
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b085      	sub	sp, #20
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	685a      	ldr	r2, [r3, #4]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801200a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012010:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012016:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	4313      	orrs	r3, r2
 801201c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012022:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	431a      	orrs	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801202e:	2300      	movs	r3, #0

}
 8012030:	4618      	mov	r0, r3
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr

0801203c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b088      	sub	sp, #32
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801204a:	2310      	movs	r3, #16
 801204c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012054:	2300      	movs	r3, #0
 8012056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801205c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801205e:	f107 0308 	add.w	r3, r7, #8
 8012062:	4619      	mov	r1, r3
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f7ff ff73 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801206a:	f241 3288 	movw	r2, #5000	; 0x1388
 801206e:	2110      	movs	r1, #16
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fa5f 	bl	8012534 <SDMMC_GetCmdResp1>
 8012076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012078:	69fb      	ldr	r3, [r7, #28]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3720      	adds	r7, #32
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012082:	b580      	push	{r7, lr}
 8012084:	b088      	sub	sp, #32
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012090:	2311      	movs	r3, #17
 8012092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801209a:	2300      	movs	r3, #0
 801209c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120a4:	f107 0308 	add.w	r3, r7, #8
 80120a8:	4619      	mov	r1, r3
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f7ff ff50 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80120b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80120b4:	2111      	movs	r1, #17
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f000 fa3c 	bl	8012534 <SDMMC_GetCmdResp1>
 80120bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120be:	69fb      	ldr	r3, [r7, #28]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3720      	adds	r7, #32
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b088      	sub	sp, #32
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80120d6:	2312      	movs	r3, #18
 80120d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120e0:	2300      	movs	r3, #0
 80120e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ea:	f107 0308 	add.w	r3, r7, #8
 80120ee:	4619      	mov	r1, r3
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7ff ff2d 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80120f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80120fa:	2112      	movs	r1, #18
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f000 fa19 	bl	8012534 <SDMMC_GetCmdResp1>
 8012102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012104:	69fb      	ldr	r3, [r7, #28]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3720      	adds	r7, #32
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801210e:	b580      	push	{r7, lr}
 8012110:	b088      	sub	sp, #32
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801211c:	2318      	movs	r3, #24
 801211e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012126:	2300      	movs	r3, #0
 8012128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801212e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012130:	f107 0308 	add.w	r3, r7, #8
 8012134:	4619      	mov	r1, r3
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f7ff ff0a 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801213c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012140:	2118      	movs	r1, #24
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 f9f6 	bl	8012534 <SDMMC_GetCmdResp1>
 8012148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801214a:	69fb      	ldr	r3, [r7, #28]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3720      	adds	r7, #32
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b088      	sub	sp, #32
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012162:	2319      	movs	r3, #25
 8012164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012166:	f44f 7380 	mov.w	r3, #256	; 0x100
 801216a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801216c:	2300      	movs	r3, #0
 801216e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012176:	f107 0308 	add.w	r3, r7, #8
 801217a:	4619      	mov	r1, r3
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff fee7 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012182:	f241 3288 	movw	r2, #5000	; 0x1388
 8012186:	2119      	movs	r1, #25
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f9d3 	bl	8012534 <SDMMC_GetCmdResp1>
 801218e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012190:	69fb      	ldr	r3, [r7, #28]
}
 8012192:	4618      	mov	r0, r3
 8012194:	3720      	adds	r7, #32
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b088      	sub	sp, #32
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80121a4:	2300      	movs	r3, #0
 80121a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80121a8:	230c      	movs	r3, #12
 80121aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121b2:	2300      	movs	r3, #0
 80121b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121ba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121d4:	f107 0308 	add.w	r3, r7, #8
 80121d8:	4619      	mov	r1, r3
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7ff feb8 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80121e0:	4a0b      	ldr	r2, [pc, #44]	; (8012210 <SDMMC_CmdStopTransfer+0x74>)
 80121e2:	210c      	movs	r1, #12
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f000 f9a5 	bl	8012534 <SDMMC_GetCmdResp1>
 80121ea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80121fe:	d101      	bne.n	8012204 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012200:	2300      	movs	r3, #0
 8012202:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012204:	69fb      	ldr	r3, [r7, #28]
}
 8012206:	4618      	mov	r0, r3
 8012208:	3720      	adds	r7, #32
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	05f5e100 	.word	0x05f5e100

08012214 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b088      	sub	sp, #32
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012222:	2307      	movs	r3, #7
 8012224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012226:	f44f 7380 	mov.w	r3, #256	; 0x100
 801222a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801222c:	2300      	movs	r3, #0
 801222e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012236:	f107 0308 	add.w	r3, r7, #8
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff fe87 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012242:	f241 3288 	movw	r2, #5000	; 0x1388
 8012246:	2107      	movs	r1, #7
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 f973 	bl	8012534 <SDMMC_GetCmdResp1>
 801224e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012250:	69fb      	ldr	r3, [r7, #28]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3720      	adds	r7, #32
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b088      	sub	sp, #32
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012262:	2300      	movs	r3, #0
 8012264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012266:	2300      	movs	r3, #0
 8012268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801226a:	2300      	movs	r3, #0
 801226c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801226e:	2300      	movs	r3, #0
 8012270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012276:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012278:	f107 0308 	add.w	r3, r7, #8
 801227c:	4619      	mov	r1, r3
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7ff fe66 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fb97 	bl	80129b8 <SDMMC_GetCmdError>
 801228a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801228c:	69fb      	ldr	r3, [r7, #28]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3720      	adds	r7, #32
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b088      	sub	sp, #32
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801229e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80122a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80122a4:	2308      	movs	r3, #8
 80122a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122ae:	2300      	movs	r3, #0
 80122b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122b8:	f107 0308 	add.w	r3, r7, #8
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7ff fe46 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fb29 	bl	801291c <SDMMC_GetCmdResp7>
 80122ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122cc:	69fb      	ldr	r3, [r7, #28]
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3720      	adds	r7, #32
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}

080122d6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80122d6:	b580      	push	{r7, lr}
 80122d8:	b088      	sub	sp, #32
 80122da:	af00      	add	r7, sp, #0
 80122dc:	6078      	str	r0, [r7, #4]
 80122de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80122e4:	2337      	movs	r3, #55	; 0x37
 80122e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122ee:	2300      	movs	r3, #0
 80122f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122f8:	f107 0308 	add.w	r3, r7, #8
 80122fc:	4619      	mov	r1, r3
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7ff fe26 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012304:	f241 3288 	movw	r2, #5000	; 0x1388
 8012308:	2137      	movs	r1, #55	; 0x37
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 f912 	bl	8012534 <SDMMC_GetCmdResp1>
 8012310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012312:	69fb      	ldr	r3, [r7, #28]
}
 8012314:	4618      	mov	r0, r3
 8012316:	3720      	adds	r7, #32
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}

0801231c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b088      	sub	sp, #32
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801232a:	2329      	movs	r3, #41	; 0x29
 801232c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801232e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012334:	2300      	movs	r3, #0
 8012336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801233c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801233e:	f107 0308 	add.w	r3, r7, #8
 8012342:	4619      	mov	r1, r3
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f7ff fe03 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 fa2e 	bl	80127ac <SDMMC_GetCmdResp3>
 8012350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012352:	69fb      	ldr	r3, [r7, #28]
}
 8012354:	4618      	mov	r0, r3
 8012356:	3720      	adds	r7, #32
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b088      	sub	sp, #32
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801236a:	2306      	movs	r3, #6
 801236c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012374:	2300      	movs	r3, #0
 8012376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801237c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801237e:	f107 0308 	add.w	r3, r7, #8
 8012382:	4619      	mov	r1, r3
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f7ff fde3 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801238a:	f241 3288 	movw	r2, #5000	; 0x1388
 801238e:	2106      	movs	r1, #6
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f8cf 	bl	8012534 <SDMMC_GetCmdResp1>
 8012396:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012398:	69fb      	ldr	r3, [r7, #28]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3720      	adds	r7, #32
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}

080123a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b088      	sub	sp, #32
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80123aa:	2300      	movs	r3, #0
 80123ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80123ae:	2333      	movs	r3, #51	; 0x33
 80123b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123b8:	2300      	movs	r3, #0
 80123ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123c2:	f107 0308 	add.w	r3, r7, #8
 80123c6:	4619      	mov	r1, r3
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7ff fdc1 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80123ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80123d2:	2133      	movs	r1, #51	; 0x33
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f8ad 	bl	8012534 <SDMMC_GetCmdResp1>
 80123da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123dc:	69fb      	ldr	r3, [r7, #28]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}

080123e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b088      	sub	sp, #32
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80123f2:	2302      	movs	r3, #2
 80123f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80123f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80123fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123fc:	2300      	movs	r3, #0
 80123fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012406:	f107 0308 	add.w	r3, r7, #8
 801240a:	4619      	mov	r1, r3
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7ff fd9f 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f000 f980 	bl	8012718 <SDMMC_GetCmdResp2>
 8012418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801241a:	69fb      	ldr	r3, [r7, #28]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3720      	adds	r7, #32
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b088      	sub	sp, #32
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012432:	2309      	movs	r3, #9
 8012434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012436:	f44f 7340 	mov.w	r3, #768	; 0x300
 801243a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801243c:	2300      	movs	r3, #0
 801243e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012446:	f107 0308 	add.w	r3, r7, #8
 801244a:	4619      	mov	r1, r3
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f7ff fd7f 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f000 f960 	bl	8012718 <SDMMC_GetCmdResp2>
 8012458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801245a:	69fb      	ldr	r3, [r7, #28]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801246e:	2300      	movs	r3, #0
 8012470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012472:	2303      	movs	r3, #3
 8012474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012476:	f44f 7380 	mov.w	r3, #256	; 0x100
 801247a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801247c:	2300      	movs	r3, #0
 801247e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012486:	f107 0308 	add.w	r3, r7, #8
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff fd5f 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012492:	683a      	ldr	r2, [r7, #0]
 8012494:	2103      	movs	r1, #3
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 f9c8 	bl	801282c <SDMMC_GetCmdResp6>
 801249c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801249e:	69fb      	ldr	r3, [r7, #28]
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3720      	adds	r7, #32
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b088      	sub	sp, #32
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80124b6:	230d      	movs	r3, #13
 80124b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124c0:	2300      	movs	r3, #0
 80124c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124ca:	f107 0308 	add.w	r3, r7, #8
 80124ce:	4619      	mov	r1, r3
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff fd3d 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80124d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80124da:	210d      	movs	r1, #13
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f829 	bl	8012534 <SDMMC_GetCmdResp1>
 80124e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124e4:	69fb      	ldr	r3, [r7, #28]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3720      	adds	r7, #32
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b088      	sub	sp, #32
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80124f6:	2300      	movs	r3, #0
 80124f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80124fa:	230d      	movs	r3, #13
 80124fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012504:	2300      	movs	r3, #0
 8012506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801250c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801250e:	f107 0308 	add.w	r3, r7, #8
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff fd1b 	bl	8011f50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801251a:	f241 3288 	movw	r2, #5000	; 0x1388
 801251e:	210d      	movs	r1, #13
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 f807 	bl	8012534 <SDMMC_GetCmdResp1>
 8012526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012528:	69fb      	ldr	r3, [r7, #28]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3720      	adds	r7, #32
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
	...

08012534 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b088      	sub	sp, #32
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	460b      	mov	r3, r1
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012542:	4b70      	ldr	r3, [pc, #448]	; (8012704 <SDMMC_GetCmdResp1+0x1d0>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a70      	ldr	r2, [pc, #448]	; (8012708 <SDMMC_GetCmdResp1+0x1d4>)
 8012548:	fba2 2303 	umull	r2, r3, r2, r3
 801254c:	0a5a      	lsrs	r2, r3, #9
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	fb02 f303 	mul.w	r3, r2, r3
 8012554:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	1e5a      	subs	r2, r3, #1
 801255a:	61fa      	str	r2, [r7, #28]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012564:	e0c9      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801256a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801256c:	69ba      	ldr	r2, [r7, #24]
 801256e:	4b67      	ldr	r3, [pc, #412]	; (801270c <SDMMC_GetCmdResp1+0x1d8>)
 8012570:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012572:	2b00      	cmp	r3, #0
 8012574:	d0ef      	beq.n	8012556 <SDMMC_GetCmdResp1+0x22>
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1ea      	bne.n	8012556 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012584:	f003 0304 	and.w	r3, r3, #4
 8012588:	2b00      	cmp	r3, #0
 801258a:	d004      	beq.n	8012596 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2204      	movs	r2, #4
 8012590:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012592:	2304      	movs	r3, #4
 8012594:	e0b1      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801259a:	f003 0301 	and.w	r3, r3, #1
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d004      	beq.n	80125ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2201      	movs	r2, #1
 80125a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125a8:	2301      	movs	r3, #1
 80125aa:	e0a6      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	4a58      	ldr	r2, [pc, #352]	; (8012710 <SDMMC_GetCmdResp1+0x1dc>)
 80125b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7ff fcf6 	bl	8011fa4 <SDMMC_GetCommandResponse>
 80125b8:	4603      	mov	r3, r0
 80125ba:	461a      	mov	r2, r3
 80125bc:	7afb      	ldrb	r3, [r7, #11]
 80125be:	4293      	cmp	r3, r2
 80125c0:	d001      	beq.n	80125c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80125c2:	2301      	movs	r3, #1
 80125c4:	e099      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80125c6:	2100      	movs	r1, #0
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff fcf8 	bl	8011fbe <SDMMC_GetResponse>
 80125ce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80125d0:	697a      	ldr	r2, [r7, #20]
 80125d2:	4b50      	ldr	r3, [pc, #320]	; (8012714 <SDMMC_GetCmdResp1+0x1e0>)
 80125d4:	4013      	ands	r3, r2
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d101      	bne.n	80125de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80125da:	2300      	movs	r3, #0
 80125dc:	e08d      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	da02      	bge.n	80125ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80125e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80125e8:	e087      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80125f4:	2340      	movs	r3, #64	; 0x40
 80125f6:	e080      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012602:	2380      	movs	r3, #128	; 0x80
 8012604:	e079      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801260c:	2b00      	cmp	r3, #0
 801260e:	d002      	beq.n	8012616 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012614:	e071      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801261c:	2b00      	cmp	r3, #0
 801261e:	d002      	beq.n	8012626 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012624:	e069      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d002      	beq.n	8012636 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012634:	e061      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d002      	beq.n	8012646 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012644:	e059      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012654:	e051      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801265c:	2b00      	cmp	r3, #0
 801265e:	d002      	beq.n	8012666 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012664:	e049      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801266c:	2b00      	cmp	r3, #0
 801266e:	d002      	beq.n	8012676 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012670:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012674:	e041      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012684:	e039      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012694:	e031      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80126a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80126a4:	e029      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80126b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80126b4:	e021      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80126c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80126c4:	e019      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80126d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80126d4:	e011      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80126e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126e4:	e009      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	f003 0308 	and.w	r3, r3, #8
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80126f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80126f4:	e001      	b.n	80126fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80126f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3720      	adds	r7, #32
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	24000000 	.word	0x24000000
 8012708:	10624dd3 	.word	0x10624dd3
 801270c:	00200045 	.word	0x00200045
 8012710:	002000c5 	.word	0x002000c5
 8012714:	fdffe008 	.word	0xfdffe008

08012718 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012718:	b480      	push	{r7}
 801271a:	b085      	sub	sp, #20
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012720:	4b1f      	ldr	r3, [pc, #124]	; (80127a0 <SDMMC_GetCmdResp2+0x88>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4a1f      	ldr	r2, [pc, #124]	; (80127a4 <SDMMC_GetCmdResp2+0x8c>)
 8012726:	fba2 2303 	umull	r2, r3, r2, r3
 801272a:	0a5b      	lsrs	r3, r3, #9
 801272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012730:	fb02 f303 	mul.w	r3, r2, r3
 8012734:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	1e5a      	subs	r2, r3, #1
 801273a:	60fa      	str	r2, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d102      	bne.n	8012746 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012740:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012744:	e026      	b.n	8012794 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801274a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012752:	2b00      	cmp	r3, #0
 8012754:	d0ef      	beq.n	8012736 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801275c:	2b00      	cmp	r3, #0
 801275e:	d1ea      	bne.n	8012736 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012764:	f003 0304 	and.w	r3, r3, #4
 8012768:	2b00      	cmp	r3, #0
 801276a:	d004      	beq.n	8012776 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2204      	movs	r2, #4
 8012770:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012772:	2304      	movs	r3, #4
 8012774:	e00e      	b.n	8012794 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	d004      	beq.n	801278c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2201      	movs	r2, #1
 8012786:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012788:	2301      	movs	r3, #1
 801278a:	e003      	b.n	8012794 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	4a06      	ldr	r2, [pc, #24]	; (80127a8 <SDMMC_GetCmdResp2+0x90>)
 8012790:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012792:	2300      	movs	r3, #0
}
 8012794:	4618      	mov	r0, r3
 8012796:	3714      	adds	r7, #20
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr
 80127a0:	24000000 	.word	0x24000000
 80127a4:	10624dd3 	.word	0x10624dd3
 80127a8:	002000c5 	.word	0x002000c5

080127ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127b4:	4b1a      	ldr	r3, [pc, #104]	; (8012820 <SDMMC_GetCmdResp3+0x74>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a1a      	ldr	r2, [pc, #104]	; (8012824 <SDMMC_GetCmdResp3+0x78>)
 80127ba:	fba2 2303 	umull	r2, r3, r2, r3
 80127be:	0a5b      	lsrs	r3, r3, #9
 80127c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c4:	fb02 f303 	mul.w	r3, r2, r3
 80127c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	1e5a      	subs	r2, r3, #1
 80127ce:	60fa      	str	r2, [r7, #12]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d102      	bne.n	80127da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127d8:	e01b      	b.n	8012812 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0ef      	beq.n	80127ca <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d1ea      	bne.n	80127ca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127f8:	f003 0304 	and.w	r3, r3, #4
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d004      	beq.n	801280a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2204      	movs	r2, #4
 8012804:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012806:	2304      	movs	r3, #4
 8012808:	e003      	b.n	8012812 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4a06      	ldr	r2, [pc, #24]	; (8012828 <SDMMC_GetCmdResp3+0x7c>)
 801280e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012810:	2300      	movs	r3, #0
}
 8012812:	4618      	mov	r0, r3
 8012814:	3714      	adds	r7, #20
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	24000000 	.word	0x24000000
 8012824:	10624dd3 	.word	0x10624dd3
 8012828:	002000c5 	.word	0x002000c5

0801282c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b088      	sub	sp, #32
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	460b      	mov	r3, r1
 8012836:	607a      	str	r2, [r7, #4]
 8012838:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801283a:	4b35      	ldr	r3, [pc, #212]	; (8012910 <SDMMC_GetCmdResp6+0xe4>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a35      	ldr	r2, [pc, #212]	; (8012914 <SDMMC_GetCmdResp6+0xe8>)
 8012840:	fba2 2303 	umull	r2, r3, r2, r3
 8012844:	0a5b      	lsrs	r3, r3, #9
 8012846:	f241 3288 	movw	r2, #5000	; 0x1388
 801284a:	fb02 f303 	mul.w	r3, r2, r3
 801284e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	1e5a      	subs	r2, r3, #1
 8012854:	61fa      	str	r2, [r7, #28]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d102      	bne.n	8012860 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801285a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801285e:	e052      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012864:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801286c:	2b00      	cmp	r3, #0
 801286e:	d0ef      	beq.n	8012850 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1ea      	bne.n	8012850 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287e:	f003 0304 	and.w	r3, r3, #4
 8012882:	2b00      	cmp	r3, #0
 8012884:	d004      	beq.n	8012890 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2204      	movs	r2, #4
 801288a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801288c:	2304      	movs	r3, #4
 801288e:	e03a      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012894:	f003 0301 	and.w	r3, r3, #1
 8012898:	2b00      	cmp	r3, #0
 801289a:	d004      	beq.n	80128a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2201      	movs	r2, #1
 80128a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128a2:	2301      	movs	r3, #1
 80128a4:	e02f      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f7ff fb7c 	bl	8011fa4 <SDMMC_GetCommandResponse>
 80128ac:	4603      	mov	r3, r0
 80128ae:	461a      	mov	r2, r3
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d001      	beq.n	80128ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80128b6:	2301      	movs	r3, #1
 80128b8:	e025      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	4a16      	ldr	r2, [pc, #88]	; (8012918 <SDMMC_GetCmdResp6+0xec>)
 80128be:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80128c0:	2100      	movs	r1, #0
 80128c2:	68f8      	ldr	r0, [r7, #12]
 80128c4:	f7ff fb7b 	bl	8011fbe <SDMMC_GetResponse>
 80128c8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d106      	bne.n	80128e2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	0c1b      	lsrs	r3, r3, #16
 80128d8:	b29a      	uxth	r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80128de:	2300      	movs	r3, #0
 80128e0:	e011      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d002      	beq.n	80128f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80128ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80128f0:	e009      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d002      	beq.n	8012902 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80128fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012900:	e001      	b.n	8012906 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012906:	4618      	mov	r0, r3
 8012908:	3720      	adds	r7, #32
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	24000000 	.word	0x24000000
 8012914:	10624dd3 	.word	0x10624dd3
 8012918:	002000c5 	.word	0x002000c5

0801291c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012924:	4b22      	ldr	r3, [pc, #136]	; (80129b0 <SDMMC_GetCmdResp7+0x94>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	4a22      	ldr	r2, [pc, #136]	; (80129b4 <SDMMC_GetCmdResp7+0x98>)
 801292a:	fba2 2303 	umull	r2, r3, r2, r3
 801292e:	0a5b      	lsrs	r3, r3, #9
 8012930:	f241 3288 	movw	r2, #5000	; 0x1388
 8012934:	fb02 f303 	mul.w	r3, r2, r3
 8012938:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	1e5a      	subs	r2, r3, #1
 801293e:	60fa      	str	r2, [r7, #12]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d102      	bne.n	801294a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012948:	e02c      	b.n	80129a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801294e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012956:	2b00      	cmp	r3, #0
 8012958:	d0ef      	beq.n	801293a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1ea      	bne.n	801293a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012968:	f003 0304 	and.w	r3, r3, #4
 801296c:	2b00      	cmp	r3, #0
 801296e:	d004      	beq.n	801297a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2204      	movs	r2, #4
 8012974:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012976:	2304      	movs	r3, #4
 8012978:	e014      	b.n	80129a4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297e:	f003 0301 	and.w	r3, r3, #1
 8012982:	2b00      	cmp	r3, #0
 8012984:	d004      	beq.n	8012990 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2201      	movs	r2, #1
 801298a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801298c:	2301      	movs	r3, #1
 801298e:	e009      	b.n	80129a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012998:	2b00      	cmp	r3, #0
 801299a:	d002      	beq.n	80129a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2240      	movs	r2, #64	; 0x40
 80129a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80129a2:	2300      	movs	r3, #0

}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3714      	adds	r7, #20
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr
 80129b0:	24000000 	.word	0x24000000
 80129b4:	10624dd3 	.word	0x10624dd3

080129b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b085      	sub	sp, #20
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129c0:	4b11      	ldr	r3, [pc, #68]	; (8012a08 <SDMMC_GetCmdError+0x50>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	4a11      	ldr	r2, [pc, #68]	; (8012a0c <SDMMC_GetCmdError+0x54>)
 80129c6:	fba2 2303 	umull	r2, r3, r2, r3
 80129ca:	0a5b      	lsrs	r3, r3, #9
 80129cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80129d0:	fb02 f303 	mul.w	r3, r2, r3
 80129d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	1e5a      	subs	r2, r3, #1
 80129da:	60fa      	str	r2, [r7, #12]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129e4:	e009      	b.n	80129fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d0f1      	beq.n	80129d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4a06      	ldr	r2, [pc, #24]	; (8012a10 <SDMMC_GetCmdError+0x58>)
 80129f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80129f8:	2300      	movs	r3, #0
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3714      	adds	r7, #20
 80129fe:	46bd      	mov	sp, r7
 8012a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a04:	4770      	bx	lr
 8012a06:	bf00      	nop
 8012a08:	24000000 	.word	0x24000000
 8012a0c:	10624dd3 	.word	0x10624dd3
 8012a10:	002000c5 	.word	0x002000c5

08012a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a14:	b084      	sub	sp, #16
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b084      	sub	sp, #16
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	6078      	str	r0, [r7, #4]
 8012a1e:	f107 001c 	add.w	r0, r7, #28
 8012a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d120      	bne.n	8012a6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	68da      	ldr	r2, [r3, #12]
 8012a3c:	4b2a      	ldr	r3, [pc, #168]	; (8012ae8 <USB_CoreInit+0xd4>)
 8012a3e:	4013      	ands	r3, r2
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a52:	2b01      	cmp	r3, #1
 8012a54:	d105      	bne.n	8012a62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f001 faf8 	bl	8014058 <USB_CoreReset>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	73fb      	strb	r3, [r7, #15]
 8012a6c:	e01a      	b.n	8012aa4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f001 faec 	bl	8014058 <USB_CoreReset>
 8012a80:	4603      	mov	r3, r0
 8012a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d106      	bne.n	8012a98 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	639a      	str	r2, [r3, #56]	; 0x38
 8012a96:	e005      	b.n	8012aa4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d116      	bne.n	8012ad8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012ab8:	4b0c      	ldr	r3, [pc, #48]	; (8012aec <USB_CoreInit+0xd8>)
 8012aba:	4313      	orrs	r3, r2
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	f043 0206 	orr.w	r2, r3, #6
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	f043 0220 	orr.w	r2, r3, #32
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3710      	adds	r7, #16
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ae4:	b004      	add	sp, #16
 8012ae6:	4770      	bx	lr
 8012ae8:	ffbdffbf 	.word	0xffbdffbf
 8012aec:	03ee0000 	.word	0x03ee0000

08012af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b087      	sub	sp, #28
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	4613      	mov	r3, r2
 8012afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	2b02      	cmp	r3, #2
 8012b02:	d165      	bne.n	8012bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	4a41      	ldr	r2, [pc, #260]	; (8012c0c <USB_SetTurnaroundTime+0x11c>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d906      	bls.n	8012b1a <USB_SetTurnaroundTime+0x2a>
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	4a40      	ldr	r2, [pc, #256]	; (8012c10 <USB_SetTurnaroundTime+0x120>)
 8012b10:	4293      	cmp	r3, r2
 8012b12:	d202      	bcs.n	8012b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012b14:	230f      	movs	r3, #15
 8012b16:	617b      	str	r3, [r7, #20]
 8012b18:	e062      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	4a3c      	ldr	r2, [pc, #240]	; (8012c10 <USB_SetTurnaroundTime+0x120>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d306      	bcc.n	8012b30 <USB_SetTurnaroundTime+0x40>
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	4a3b      	ldr	r2, [pc, #236]	; (8012c14 <USB_SetTurnaroundTime+0x124>)
 8012b26:	4293      	cmp	r3, r2
 8012b28:	d202      	bcs.n	8012b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012b2a:	230e      	movs	r3, #14
 8012b2c:	617b      	str	r3, [r7, #20]
 8012b2e:	e057      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	4a38      	ldr	r2, [pc, #224]	; (8012c14 <USB_SetTurnaroundTime+0x124>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d306      	bcc.n	8012b46 <USB_SetTurnaroundTime+0x56>
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	4a37      	ldr	r2, [pc, #220]	; (8012c18 <USB_SetTurnaroundTime+0x128>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d202      	bcs.n	8012b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012b40:	230d      	movs	r3, #13
 8012b42:	617b      	str	r3, [r7, #20]
 8012b44:	e04c      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	4a33      	ldr	r2, [pc, #204]	; (8012c18 <USB_SetTurnaroundTime+0x128>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d306      	bcc.n	8012b5c <USB_SetTurnaroundTime+0x6c>
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	4a32      	ldr	r2, [pc, #200]	; (8012c1c <USB_SetTurnaroundTime+0x12c>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d802      	bhi.n	8012b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012b56:	230c      	movs	r3, #12
 8012b58:	617b      	str	r3, [r7, #20]
 8012b5a:	e041      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	4a2f      	ldr	r2, [pc, #188]	; (8012c1c <USB_SetTurnaroundTime+0x12c>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d906      	bls.n	8012b72 <USB_SetTurnaroundTime+0x82>
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	4a2e      	ldr	r2, [pc, #184]	; (8012c20 <USB_SetTurnaroundTime+0x130>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d802      	bhi.n	8012b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012b6c:	230b      	movs	r3, #11
 8012b6e:	617b      	str	r3, [r7, #20]
 8012b70:	e036      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	4a2a      	ldr	r2, [pc, #168]	; (8012c20 <USB_SetTurnaroundTime+0x130>)
 8012b76:	4293      	cmp	r3, r2
 8012b78:	d906      	bls.n	8012b88 <USB_SetTurnaroundTime+0x98>
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	4a29      	ldr	r2, [pc, #164]	; (8012c24 <USB_SetTurnaroundTime+0x134>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d802      	bhi.n	8012b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012b82:	230a      	movs	r3, #10
 8012b84:	617b      	str	r3, [r7, #20]
 8012b86:	e02b      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	4a26      	ldr	r2, [pc, #152]	; (8012c24 <USB_SetTurnaroundTime+0x134>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d906      	bls.n	8012b9e <USB_SetTurnaroundTime+0xae>
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	4a25      	ldr	r2, [pc, #148]	; (8012c28 <USB_SetTurnaroundTime+0x138>)
 8012b94:	4293      	cmp	r3, r2
 8012b96:	d202      	bcs.n	8012b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012b98:	2309      	movs	r3, #9
 8012b9a:	617b      	str	r3, [r7, #20]
 8012b9c:	e020      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	4a21      	ldr	r2, [pc, #132]	; (8012c28 <USB_SetTurnaroundTime+0x138>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d306      	bcc.n	8012bb4 <USB_SetTurnaroundTime+0xc4>
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	4a20      	ldr	r2, [pc, #128]	; (8012c2c <USB_SetTurnaroundTime+0x13c>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d802      	bhi.n	8012bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012bae:	2308      	movs	r3, #8
 8012bb0:	617b      	str	r3, [r7, #20]
 8012bb2:	e015      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	4a1d      	ldr	r2, [pc, #116]	; (8012c2c <USB_SetTurnaroundTime+0x13c>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d906      	bls.n	8012bca <USB_SetTurnaroundTime+0xda>
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	4a1c      	ldr	r2, [pc, #112]	; (8012c30 <USB_SetTurnaroundTime+0x140>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d202      	bcs.n	8012bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012bc4:	2307      	movs	r3, #7
 8012bc6:	617b      	str	r3, [r7, #20]
 8012bc8:	e00a      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012bca:	2306      	movs	r3, #6
 8012bcc:	617b      	str	r3, [r7, #20]
 8012bce:	e007      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012bd0:	79fb      	ldrb	r3, [r7, #7]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d102      	bne.n	8012bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012bd6:	2309      	movs	r3, #9
 8012bd8:	617b      	str	r3, [r7, #20]
 8012bda:	e001      	b.n	8012be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012bdc:	2309      	movs	r3, #9
 8012bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	68da      	ldr	r2, [r3, #12]
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	029b      	lsls	r3, r3, #10
 8012bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012bf8:	431a      	orrs	r2, r3
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012bfe:	2300      	movs	r3, #0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	371c      	adds	r7, #28
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr
 8012c0c:	00d8acbf 	.word	0x00d8acbf
 8012c10:	00e4e1c0 	.word	0x00e4e1c0
 8012c14:	00f42400 	.word	0x00f42400
 8012c18:	01067380 	.word	0x01067380
 8012c1c:	011a499f 	.word	0x011a499f
 8012c20:	01312cff 	.word	0x01312cff
 8012c24:	014ca43f 	.word	0x014ca43f
 8012c28:	016e3600 	.word	0x016e3600
 8012c2c:	01a6ab1f 	.word	0x01a6ab1f
 8012c30:	01e84800 	.word	0x01e84800

08012c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	689b      	ldr	r3, [r3, #8]
 8012c40:	f043 0201 	orr.w	r2, r3, #1
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	370c      	adds	r7, #12
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012c56:	b480      	push	{r7}
 8012c58:	b083      	sub	sp, #12
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	f023 0201 	bic.w	r2, r3, #1
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012c6a:	2300      	movs	r3, #0
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	370c      	adds	r7, #12
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
 8012c80:	460b      	mov	r3, r1
 8012c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012c84:	2300      	movs	r3, #0
 8012c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012c94:	78fb      	ldrb	r3, [r7, #3]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d115      	bne.n	8012cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ca6:	2001      	movs	r0, #1
 8012ca8:	f7f0 fd10 	bl	80036cc <HAL_Delay>
      ms++;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f001 f93f 	bl	8013f36 <USB_GetMode>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d01e      	beq.n	8012cfc <USB_SetCurrentMode+0x84>
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2b31      	cmp	r3, #49	; 0x31
 8012cc2:	d9f0      	bls.n	8012ca6 <USB_SetCurrentMode+0x2e>
 8012cc4:	e01a      	b.n	8012cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012cc6:	78fb      	ldrb	r3, [r7, #3]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d115      	bne.n	8012cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012cd8:	2001      	movs	r0, #1
 8012cda:	f7f0 fcf7 	bl	80036cc <HAL_Delay>
      ms++;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f001 f926 	bl	8013f36 <USB_GetMode>
 8012cea:	4603      	mov	r3, r0
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d005      	beq.n	8012cfc <USB_SetCurrentMode+0x84>
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2b31      	cmp	r3, #49	; 0x31
 8012cf4:	d9f0      	bls.n	8012cd8 <USB_SetCurrentMode+0x60>
 8012cf6:	e001      	b.n	8012cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	e005      	b.n	8012d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2b32      	cmp	r3, #50	; 0x32
 8012d00:	d101      	bne.n	8012d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d02:	2301      	movs	r3, #1
 8012d04:	e000      	b.n	8012d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3710      	adds	r7, #16
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d10:	b084      	sub	sp, #16
 8012d12:	b580      	push	{r7, lr}
 8012d14:	b086      	sub	sp, #24
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6078      	str	r0, [r7, #4]
 8012d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012d22:	2300      	movs	r3, #0
 8012d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	613b      	str	r3, [r7, #16]
 8012d2e:	e009      	b.n	8012d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	3340      	adds	r3, #64	; 0x40
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	4413      	add	r3, r2
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	3301      	adds	r3, #1
 8012d42:	613b      	str	r3, [r7, #16]
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	2b0e      	cmp	r3, #14
 8012d48:	d9f2      	bls.n	8012d30 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d11c      	bne.n	8012d8a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012d5e:	f043 0302 	orr.w	r3, r3, #2
 8012d62:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d68:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	601a      	str	r2, [r3, #0]
 8012d88:	e005      	b.n	8012d96 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	2300      	movs	r3, #0
 8012da0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012da8:	4619      	mov	r1, r3
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012db0:	461a      	mov	r2, r3
 8012db2:	680b      	ldr	r3, [r1, #0]
 8012db4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d10c      	bne.n	8012dd6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d104      	bne.n	8012dcc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 f965 	bl	8013094 <USB_SetDevSpeed>
 8012dca:	e008      	b.n	8012dde <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012dcc:	2101      	movs	r1, #1
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f000 f960 	bl	8013094 <USB_SetDevSpeed>
 8012dd4:	e003      	b.n	8012dde <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012dd6:	2103      	movs	r1, #3
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f95b 	bl	8013094 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012dde:	2110      	movs	r1, #16
 8012de0:	6878      	ldr	r0, [r7, #4]
 8012de2:	f000 f8f3 	bl	8012fcc <USB_FlushTxFifo>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d001      	beq.n	8012df0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012dec:	2301      	movs	r3, #1
 8012dee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 f91f 	bl	8013034 <USB_FlushRxFifo>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e06:	461a      	mov	r2, r3
 8012e08:	2300      	movs	r3, #0
 8012e0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e12:	461a      	mov	r2, r3
 8012e14:	2300      	movs	r3, #0
 8012e16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e1e:	461a      	mov	r2, r3
 8012e20:	2300      	movs	r3, #0
 8012e22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e24:	2300      	movs	r3, #0
 8012e26:	613b      	str	r3, [r7, #16]
 8012e28:	e043      	b.n	8012eb2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	015a      	lsls	r2, r3, #5
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	4413      	add	r3, r2
 8012e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012e40:	d118      	bne.n	8012e74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d10a      	bne.n	8012e5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	015a      	lsls	r2, r3, #5
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	4413      	add	r3, r2
 8012e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e54:	461a      	mov	r2, r3
 8012e56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	e013      	b.n	8012e86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	015a      	lsls	r2, r3, #5
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	4413      	add	r3, r2
 8012e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	e008      	b.n	8012e86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	015a      	lsls	r2, r3, #5
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e80:	461a      	mov	r2, r3
 8012e82:	2300      	movs	r3, #0
 8012e84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	015a      	lsls	r2, r3, #5
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e92:	461a      	mov	r2, r3
 8012e94:	2300      	movs	r3, #0
 8012e96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	015a      	lsls	r2, r3, #5
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	4413      	add	r3, r2
 8012ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012eaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	3301      	adds	r3, #1
 8012eb0:	613b      	str	r3, [r7, #16]
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb4:	693a      	ldr	r2, [r7, #16]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d3b7      	bcc.n	8012e2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012eba:	2300      	movs	r3, #0
 8012ebc:	613b      	str	r3, [r7, #16]
 8012ebe:	e043      	b.n	8012f48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	015a      	lsls	r2, r3, #5
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ed6:	d118      	bne.n	8012f0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	015a      	lsls	r2, r3, #5
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012eea:	461a      	mov	r2, r3
 8012eec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ef0:	6013      	str	r3, [r2, #0]
 8012ef2:	e013      	b.n	8012f1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	015a      	lsls	r2, r3, #5
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	4413      	add	r3, r2
 8012efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f00:	461a      	mov	r2, r3
 8012f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f06:	6013      	str	r3, [r2, #0]
 8012f08:	e008      	b.n	8012f1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	015a      	lsls	r2, r3, #5
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	4413      	add	r3, r2
 8012f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f16:	461a      	mov	r2, r3
 8012f18:	2300      	movs	r3, #0
 8012f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	015a      	lsls	r2, r3, #5
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	4413      	add	r3, r2
 8012f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f28:	461a      	mov	r2, r3
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	015a      	lsls	r2, r3, #5
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	4413      	add	r3, r2
 8012f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	3301      	adds	r3, #1
 8012f46:	613b      	str	r3, [r7, #16]
 8012f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4a:	693a      	ldr	r2, [r7, #16]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d3b7      	bcc.n	8012ec0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	68fa      	ldr	r2, [r7, #12]
 8012f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012f62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012f70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d105      	bne.n	8012f84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	f043 0210 	orr.w	r2, r3, #16
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	699a      	ldr	r2, [r3, #24]
 8012f88:	4b0e      	ldr	r3, [pc, #56]	; (8012fc4 <USB_DevInit+0x2b4>)
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d005      	beq.n	8012fa2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	699b      	ldr	r3, [r3, #24]
 8012f9a:	f043 0208 	orr.w	r2, r3, #8
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d105      	bne.n	8012fb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	699a      	ldr	r2, [r3, #24]
 8012fac:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <USB_DevInit+0x2b8>)
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	687a      	ldr	r2, [r7, #4]
 8012fb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fc0:	b004      	add	sp, #16
 8012fc2:	4770      	bx	lr
 8012fc4:	803c3800 	.word	0x803c3800
 8012fc8:	40000004 	.word	0x40000004

08012fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012fcc:	b480      	push	{r7}
 8012fce:	b085      	sub	sp, #20
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	4a13      	ldr	r2, [pc, #76]	; (8013030 <USB_FlushTxFifo+0x64>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d901      	bls.n	8012fec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012fe8:	2303      	movs	r3, #3
 8012fea:	e01b      	b.n	8013024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	daf2      	bge.n	8012fda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	019b      	lsls	r3, r3, #6
 8012ffc:	f043 0220 	orr.w	r2, r3, #32
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	3301      	adds	r3, #1
 8013008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	4a08      	ldr	r2, [pc, #32]	; (8013030 <USB_FlushTxFifo+0x64>)
 801300e:	4293      	cmp	r3, r2
 8013010:	d901      	bls.n	8013016 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013012:	2303      	movs	r3, #3
 8013014:	e006      	b.n	8013024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	691b      	ldr	r3, [r3, #16]
 801301a:	f003 0320 	and.w	r3, r3, #32
 801301e:	2b20      	cmp	r3, #32
 8013020:	d0f0      	beq.n	8013004 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013022:	2300      	movs	r3, #0
}
 8013024:	4618      	mov	r0, r3
 8013026:	3714      	adds	r7, #20
 8013028:	46bd      	mov	sp, r7
 801302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302e:	4770      	bx	lr
 8013030:	00030d40 	.word	0x00030d40

08013034 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013034:	b480      	push	{r7}
 8013036:	b085      	sub	sp, #20
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801303c:	2300      	movs	r3, #0
 801303e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	3301      	adds	r3, #1
 8013044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	4a11      	ldr	r2, [pc, #68]	; (8013090 <USB_FlushRxFifo+0x5c>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d901      	bls.n	8013052 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801304e:	2303      	movs	r3, #3
 8013050:	e018      	b.n	8013084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	691b      	ldr	r3, [r3, #16]
 8013056:	2b00      	cmp	r3, #0
 8013058:	daf2      	bge.n	8013040 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801305a:	2300      	movs	r3, #0
 801305c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2210      	movs	r2, #16
 8013062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	3301      	adds	r3, #1
 8013068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	4a08      	ldr	r2, [pc, #32]	; (8013090 <USB_FlushRxFifo+0x5c>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d901      	bls.n	8013076 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013072:	2303      	movs	r3, #3
 8013074:	e006      	b.n	8013084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	f003 0310 	and.w	r3, r3, #16
 801307e:	2b10      	cmp	r3, #16
 8013080:	d0f0      	beq.n	8013064 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	3714      	adds	r7, #20
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr
 8013090:	00030d40 	.word	0x00030d40

08013094 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013094:	b480      	push	{r7}
 8013096:	b085      	sub	sp, #20
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	460b      	mov	r3, r1
 801309e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	78fb      	ldrb	r3, [r7, #3]
 80130ae:	68f9      	ldr	r1, [r7, #12]
 80130b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130b4:	4313      	orrs	r3, r2
 80130b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80130b8:	2300      	movs	r3, #0
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3714      	adds	r7, #20
 80130be:	46bd      	mov	sp, r7
 80130c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c4:	4770      	bx	lr

080130c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80130c6:	b480      	push	{r7}
 80130c8:	b087      	sub	sp, #28
 80130ca:	af00      	add	r7, sp, #0
 80130cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	f003 0306 	and.w	r3, r3, #6
 80130de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d102      	bne.n	80130ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80130e6:	2300      	movs	r3, #0
 80130e8:	75fb      	strb	r3, [r7, #23]
 80130ea:	e00a      	b.n	8013102 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b02      	cmp	r3, #2
 80130f0:	d002      	beq.n	80130f8 <USB_GetDevSpeed+0x32>
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2b06      	cmp	r3, #6
 80130f6:	d102      	bne.n	80130fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80130f8:	2302      	movs	r3, #2
 80130fa:	75fb      	strb	r3, [r7, #23]
 80130fc:	e001      	b.n	8013102 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80130fe:	230f      	movs	r3, #15
 8013100:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013102:	7dfb      	ldrb	r3, [r7, #23]
}
 8013104:	4618      	mov	r0, r3
 8013106:	371c      	adds	r7, #28
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	785b      	ldrb	r3, [r3, #1]
 8013128:	2b01      	cmp	r3, #1
 801312a:	d139      	bne.n	80131a0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013132:	69da      	ldr	r2, [r3, #28]
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	f003 030f 	and.w	r3, r3, #15
 801313c:	2101      	movs	r1, #1
 801313e:	fa01 f303 	lsl.w	r3, r1, r3
 8013142:	b29b      	uxth	r3, r3
 8013144:	68f9      	ldr	r1, [r7, #12]
 8013146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801314a:	4313      	orrs	r3, r2
 801314c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	015a      	lsls	r2, r3, #5
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	4413      	add	r3, r2
 8013156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013160:	2b00      	cmp	r3, #0
 8013162:	d153      	bne.n	801320c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	015a      	lsls	r2, r3, #5
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	4413      	add	r3, r2
 801316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	689b      	ldr	r3, [r3, #8]
 8013176:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	791b      	ldrb	r3, [r3, #4]
 801317e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013180:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	059b      	lsls	r3, r3, #22
 8013186:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013188:	431a      	orrs	r2, r3
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	0159      	lsls	r1, r3, #5
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	440b      	add	r3, r1
 8013192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013196:	4619      	mov	r1, r3
 8013198:	4b20      	ldr	r3, [pc, #128]	; (801321c <USB_ActivateEndpoint+0x10c>)
 801319a:	4313      	orrs	r3, r2
 801319c:	600b      	str	r3, [r1, #0]
 801319e:	e035      	b.n	801320c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a6:	69da      	ldr	r2, [r3, #28]
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	f003 030f 	and.w	r3, r3, #15
 80131b0:	2101      	movs	r1, #1
 80131b2:	fa01 f303 	lsl.w	r3, r1, r3
 80131b6:	041b      	lsls	r3, r3, #16
 80131b8:	68f9      	ldr	r1, [r7, #12]
 80131ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131be:	4313      	orrs	r3, r2
 80131c0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	015a      	lsls	r2, r3, #5
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	4413      	add	r3, r2
 80131ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d119      	bne.n	801320c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	791b      	ldrb	r3, [r3, #4]
 80131f2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80131f4:	430b      	orrs	r3, r1
 80131f6:	431a      	orrs	r2, r3
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	0159      	lsls	r1, r3, #5
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	440b      	add	r3, r1
 8013200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013204:	4619      	mov	r1, r3
 8013206:	4b05      	ldr	r3, [pc, #20]	; (801321c <USB_ActivateEndpoint+0x10c>)
 8013208:	4313      	orrs	r3, r2
 801320a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801320c:	2300      	movs	r3, #0
}
 801320e:	4618      	mov	r0, r3
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr
 801321a:	bf00      	nop
 801321c:	10008000 	.word	0x10008000

08013220 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013220:	b480      	push	{r7}
 8013222:	b085      	sub	sp, #20
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	785b      	ldrb	r3, [r3, #1]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d161      	bne.n	8013300 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	015a      	lsls	r2, r3, #5
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	4413      	add	r3, r2
 8013244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801324e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013252:	d11f      	bne.n	8013294 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	015a      	lsls	r2, r3, #5
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	4413      	add	r3, r2
 801325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	0151      	lsls	r1, r2, #5
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	440a      	add	r2, r1
 801326a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801326e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013272:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	015a      	lsls	r2, r3, #5
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	4413      	add	r3, r2
 801327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	0151      	lsls	r1, r2, #5
 8013286:	68fa      	ldr	r2, [r7, #12]
 8013288:	440a      	add	r2, r1
 801328a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801328e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	f003 030f 	and.w	r3, r3, #15
 80132a4:	2101      	movs	r1, #1
 80132a6:	fa01 f303 	lsl.w	r3, r1, r3
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	43db      	mvns	r3, r3
 80132ae:	68f9      	ldr	r1, [r7, #12]
 80132b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132b4:	4013      	ands	r3, r2
 80132b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132be:	69da      	ldr	r2, [r3, #28]
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	f003 030f 	and.w	r3, r3, #15
 80132c8:	2101      	movs	r1, #1
 80132ca:	fa01 f303 	lsl.w	r3, r1, r3
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	43db      	mvns	r3, r3
 80132d2:	68f9      	ldr	r1, [r7, #12]
 80132d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80132d8:	4013      	ands	r3, r2
 80132da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	015a      	lsls	r2, r3, #5
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	4413      	add	r3, r2
 80132e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e8:	681a      	ldr	r2, [r3, #0]
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	0159      	lsls	r1, r3, #5
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	440b      	add	r3, r1
 80132f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f6:	4619      	mov	r1, r3
 80132f8:	4b35      	ldr	r3, [pc, #212]	; (80133d0 <USB_DeactivateEndpoint+0x1b0>)
 80132fa:	4013      	ands	r3, r2
 80132fc:	600b      	str	r3, [r1, #0]
 80132fe:	e060      	b.n	80133c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	015a      	lsls	r2, r3, #5
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	4413      	add	r3, r2
 8013308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013316:	d11f      	bne.n	8013358 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	015a      	lsls	r2, r3, #5
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	4413      	add	r3, r2
 8013320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	68ba      	ldr	r2, [r7, #8]
 8013328:	0151      	lsls	r1, r2, #5
 801332a:	68fa      	ldr	r2, [r7, #12]
 801332c:	440a      	add	r2, r1
 801332e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013336:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	015a      	lsls	r2, r3, #5
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	4413      	add	r3, r2
 8013340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68ba      	ldr	r2, [r7, #8]
 8013348:	0151      	lsls	r1, r2, #5
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	440a      	add	r2, r1
 801334e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801335e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	781b      	ldrb	r3, [r3, #0]
 8013364:	f003 030f 	and.w	r3, r3, #15
 8013368:	2101      	movs	r1, #1
 801336a:	fa01 f303 	lsl.w	r3, r1, r3
 801336e:	041b      	lsls	r3, r3, #16
 8013370:	43db      	mvns	r3, r3
 8013372:	68f9      	ldr	r1, [r7, #12]
 8013374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013378:	4013      	ands	r3, r2
 801337a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013382:	69da      	ldr	r2, [r3, #28]
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	f003 030f 	and.w	r3, r3, #15
 801338c:	2101      	movs	r1, #1
 801338e:	fa01 f303 	lsl.w	r3, r1, r3
 8013392:	041b      	lsls	r3, r3, #16
 8013394:	43db      	mvns	r3, r3
 8013396:	68f9      	ldr	r1, [r7, #12]
 8013398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801339c:	4013      	ands	r3, r2
 801339e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	015a      	lsls	r2, r3, #5
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	4413      	add	r3, r2
 80133a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	0159      	lsls	r1, r3, #5
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	440b      	add	r3, r1
 80133b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ba:	4619      	mov	r1, r3
 80133bc:	4b05      	ldr	r3, [pc, #20]	; (80133d4 <USB_DeactivateEndpoint+0x1b4>)
 80133be:	4013      	ands	r3, r2
 80133c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80133c2:	2300      	movs	r3, #0
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3714      	adds	r7, #20
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr
 80133d0:	ec337800 	.word	0xec337800
 80133d4:	eff37800 	.word	0xeff37800

080133d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b08a      	sub	sp, #40	; 0x28
 80133dc:	af02      	add	r7, sp, #8
 80133de:	60f8      	str	r0, [r7, #12]
 80133e0:	60b9      	str	r1, [r7, #8]
 80133e2:	4613      	mov	r3, r2
 80133e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	785b      	ldrb	r3, [r3, #1]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	f040 8181 	bne.w	80136fc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d132      	bne.n	8013468 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	015a      	lsls	r2, r3, #5
 8013406:	69fb      	ldr	r3, [r7, #28]
 8013408:	4413      	add	r3, r2
 801340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801340e:	691a      	ldr	r2, [r3, #16]
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	0159      	lsls	r1, r3, #5
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	440b      	add	r3, r1
 8013418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801341c:	4619      	mov	r1, r3
 801341e:	4ba5      	ldr	r3, [pc, #660]	; (80136b4 <USB_EPStartXfer+0x2dc>)
 8013420:	4013      	ands	r3, r2
 8013422:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	015a      	lsls	r2, r3, #5
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	4413      	add	r3, r2
 801342c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	69ba      	ldr	r2, [r7, #24]
 8013434:	0151      	lsls	r1, r2, #5
 8013436:	69fa      	ldr	r2, [r7, #28]
 8013438:	440a      	add	r2, r1
 801343a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801343e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	015a      	lsls	r2, r3, #5
 8013448:	69fb      	ldr	r3, [r7, #28]
 801344a:	4413      	add	r3, r2
 801344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013450:	691a      	ldr	r2, [r3, #16]
 8013452:	69bb      	ldr	r3, [r7, #24]
 8013454:	0159      	lsls	r1, r3, #5
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	440b      	add	r3, r1
 801345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801345e:	4619      	mov	r1, r3
 8013460:	4b95      	ldr	r3, [pc, #596]	; (80136b8 <USB_EPStartXfer+0x2e0>)
 8013462:	4013      	ands	r3, r2
 8013464:	610b      	str	r3, [r1, #16]
 8013466:	e092      	b.n	801358e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	015a      	lsls	r2, r3, #5
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013474:	691a      	ldr	r2, [r3, #16]
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	0159      	lsls	r1, r3, #5
 801347a:	69fb      	ldr	r3, [r7, #28]
 801347c:	440b      	add	r3, r1
 801347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013482:	4619      	mov	r1, r3
 8013484:	4b8c      	ldr	r3, [pc, #560]	; (80136b8 <USB_EPStartXfer+0x2e0>)
 8013486:	4013      	ands	r3, r2
 8013488:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	015a      	lsls	r2, r3, #5
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	4413      	add	r3, r2
 8013492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013496:	691a      	ldr	r2, [r3, #16]
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	0159      	lsls	r1, r3, #5
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	440b      	add	r3, r1
 80134a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a4:	4619      	mov	r1, r3
 80134a6:	4b83      	ldr	r3, [pc, #524]	; (80136b4 <USB_EPStartXfer+0x2dc>)
 80134a8:	4013      	ands	r3, r2
 80134aa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80134ac:	69bb      	ldr	r3, [r7, #24]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d11a      	bne.n	80134e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	691a      	ldr	r2, [r3, #16]
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	689b      	ldr	r3, [r3, #8]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d903      	bls.n	80134c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	689a      	ldr	r2, [r3, #8]
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	015a      	lsls	r2, r3, #5
 80134ca:	69fb      	ldr	r3, [r7, #28]
 80134cc:	4413      	add	r3, r2
 80134ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	69ba      	ldr	r2, [r7, #24]
 80134d6:	0151      	lsls	r1, r2, #5
 80134d8:	69fa      	ldr	r2, [r7, #28]
 80134da:	440a      	add	r2, r1
 80134dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134e4:	6113      	str	r3, [r2, #16]
 80134e6:	e01b      	b.n	8013520 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80134e8:	69bb      	ldr	r3, [r7, #24]
 80134ea:	015a      	lsls	r2, r3, #5
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	4413      	add	r3, r2
 80134f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	6919      	ldr	r1, [r3, #16]
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	689b      	ldr	r3, [r3, #8]
 80134fe:	440b      	add	r3, r1
 8013500:	1e59      	subs	r1, r3, #1
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	fbb1 f3f3 	udiv	r3, r1, r3
 801350a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801350c:	4b6b      	ldr	r3, [pc, #428]	; (80136bc <USB_EPStartXfer+0x2e4>)
 801350e:	400b      	ands	r3, r1
 8013510:	69b9      	ldr	r1, [r7, #24]
 8013512:	0148      	lsls	r0, r1, #5
 8013514:	69f9      	ldr	r1, [r7, #28]
 8013516:	4401      	add	r1, r0
 8013518:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801351c:	4313      	orrs	r3, r2
 801351e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	015a      	lsls	r2, r3, #5
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	4413      	add	r3, r2
 8013528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352c:	691a      	ldr	r2, [r3, #16]
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	691b      	ldr	r3, [r3, #16]
 8013532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013536:	69b9      	ldr	r1, [r7, #24]
 8013538:	0148      	lsls	r0, r1, #5
 801353a:	69f9      	ldr	r1, [r7, #28]
 801353c:	4401      	add	r1, r0
 801353e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013542:	4313      	orrs	r3, r2
 8013544:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	791b      	ldrb	r3, [r3, #4]
 801354a:	2b01      	cmp	r3, #1
 801354c:	d11f      	bne.n	801358e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	015a      	lsls	r2, r3, #5
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	4413      	add	r3, r2
 8013556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801355a:	691b      	ldr	r3, [r3, #16]
 801355c:	69ba      	ldr	r2, [r7, #24]
 801355e:	0151      	lsls	r1, r2, #5
 8013560:	69fa      	ldr	r2, [r7, #28]
 8013562:	440a      	add	r2, r1
 8013564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013568:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801356c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	015a      	lsls	r2, r3, #5
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	4413      	add	r3, r2
 8013576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801357a:	691b      	ldr	r3, [r3, #16]
 801357c:	69ba      	ldr	r2, [r7, #24]
 801357e:	0151      	lsls	r1, r2, #5
 8013580:	69fa      	ldr	r2, [r7, #28]
 8013582:	440a      	add	r2, r1
 8013584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801358c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801358e:	79fb      	ldrb	r3, [r7, #7]
 8013590:	2b01      	cmp	r3, #1
 8013592:	d14b      	bne.n	801362c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	69db      	ldr	r3, [r3, #28]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	015a      	lsls	r2, r3, #5
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	4413      	add	r3, r2
 80135a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135a8:	461a      	mov	r2, r3
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	69db      	ldr	r3, [r3, #28]
 80135ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	791b      	ldrb	r3, [r3, #4]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d128      	bne.n	801360a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d110      	bne.n	80135ea <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80135c8:	69bb      	ldr	r3, [r7, #24]
 80135ca:	015a      	lsls	r2, r3, #5
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	4413      	add	r3, r2
 80135d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	69ba      	ldr	r2, [r7, #24]
 80135d8:	0151      	lsls	r1, r2, #5
 80135da:	69fa      	ldr	r2, [r7, #28]
 80135dc:	440a      	add	r2, r1
 80135de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135e6:	6013      	str	r3, [r2, #0]
 80135e8:	e00f      	b.n	801360a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80135ea:	69bb      	ldr	r3, [r7, #24]
 80135ec:	015a      	lsls	r2, r3, #5
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	4413      	add	r3, r2
 80135f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	69ba      	ldr	r2, [r7, #24]
 80135fa:	0151      	lsls	r1, r2, #5
 80135fc:	69fa      	ldr	r2, [r7, #28]
 80135fe:	440a      	add	r2, r1
 8013600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013608:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	015a      	lsls	r2, r3, #5
 801360e:	69fb      	ldr	r3, [r7, #28]
 8013610:	4413      	add	r3, r2
 8013612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	69ba      	ldr	r2, [r7, #24]
 801361a:	0151      	lsls	r1, r2, #5
 801361c:	69fa      	ldr	r2, [r7, #28]
 801361e:	440a      	add	r2, r1
 8013620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013624:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013628:	6013      	str	r3, [r2, #0]
 801362a:	e16a      	b.n	8013902 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	015a      	lsls	r2, r3, #5
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	4413      	add	r3, r2
 8013634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	69ba      	ldr	r2, [r7, #24]
 801363c:	0151      	lsls	r1, r2, #5
 801363e:	69fa      	ldr	r2, [r7, #28]
 8013640:	440a      	add	r2, r1
 8013642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801364a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	791b      	ldrb	r3, [r3, #4]
 8013650:	2b01      	cmp	r3, #1
 8013652:	d015      	beq.n	8013680 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	691b      	ldr	r3, [r3, #16]
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 8152 	beq.w	8013902 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 030f 	and.w	r3, r3, #15
 801366e:	2101      	movs	r1, #1
 8013670:	fa01 f303 	lsl.w	r3, r1, r3
 8013674:	69f9      	ldr	r1, [r7, #28]
 8013676:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801367a:	4313      	orrs	r3, r2
 801367c:	634b      	str	r3, [r1, #52]	; 0x34
 801367e:	e140      	b.n	8013902 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801368c:	2b00      	cmp	r3, #0
 801368e:	d117      	bne.n	80136c0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	015a      	lsls	r2, r3, #5
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	4413      	add	r3, r2
 8013698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	69ba      	ldr	r2, [r7, #24]
 80136a0:	0151      	lsls	r1, r2, #5
 80136a2:	69fa      	ldr	r2, [r7, #28]
 80136a4:	440a      	add	r2, r1
 80136a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80136ae:	6013      	str	r3, [r2, #0]
 80136b0:	e016      	b.n	80136e0 <USB_EPStartXfer+0x308>
 80136b2:	bf00      	nop
 80136b4:	e007ffff 	.word	0xe007ffff
 80136b8:	fff80000 	.word	0xfff80000
 80136bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	015a      	lsls	r2, r3, #5
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	4413      	add	r3, r2
 80136c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	69ba      	ldr	r2, [r7, #24]
 80136d0:	0151      	lsls	r1, r2, #5
 80136d2:	69fa      	ldr	r2, [r7, #28]
 80136d4:	440a      	add	r2, r1
 80136d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	68d9      	ldr	r1, [r3, #12]
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	781a      	ldrb	r2, [r3, #0]
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	b298      	uxth	r0, r3
 80136ee:	79fb      	ldrb	r3, [r7, #7]
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	4603      	mov	r3, r0
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	f000 f9b9 	bl	8013a6c <USB_WritePacket>
 80136fa:	e102      	b.n	8013902 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	015a      	lsls	r2, r3, #5
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	4413      	add	r3, r2
 8013704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013708:	691a      	ldr	r2, [r3, #16]
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	0159      	lsls	r1, r3, #5
 801370e:	69fb      	ldr	r3, [r7, #28]
 8013710:	440b      	add	r3, r1
 8013712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013716:	4619      	mov	r1, r3
 8013718:	4b7c      	ldr	r3, [pc, #496]	; (801390c <USB_EPStartXfer+0x534>)
 801371a:	4013      	ands	r3, r2
 801371c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	015a      	lsls	r2, r3, #5
 8013722:	69fb      	ldr	r3, [r7, #28]
 8013724:	4413      	add	r3, r2
 8013726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801372a:	691a      	ldr	r2, [r3, #16]
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	0159      	lsls	r1, r3, #5
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	440b      	add	r3, r1
 8013734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013738:	4619      	mov	r1, r3
 801373a:	4b75      	ldr	r3, [pc, #468]	; (8013910 <USB_EPStartXfer+0x538>)
 801373c:	4013      	ands	r3, r2
 801373e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d12f      	bne.n	80137a6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d003      	beq.n	8013756 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	689a      	ldr	r2, [r3, #8]
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	689a      	ldr	r2, [r3, #8]
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	015a      	lsls	r2, r3, #5
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	4413      	add	r3, r2
 8013766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376a:	691a      	ldr	r2, [r3, #16]
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	6a1b      	ldr	r3, [r3, #32]
 8013770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013774:	69b9      	ldr	r1, [r7, #24]
 8013776:	0148      	lsls	r0, r1, #5
 8013778:	69f9      	ldr	r1, [r7, #28]
 801377a:	4401      	add	r1, r0
 801377c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013780:	4313      	orrs	r3, r2
 8013782:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013784:	69bb      	ldr	r3, [r7, #24]
 8013786:	015a      	lsls	r2, r3, #5
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	4413      	add	r3, r2
 801378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013790:	691b      	ldr	r3, [r3, #16]
 8013792:	69ba      	ldr	r2, [r7, #24]
 8013794:	0151      	lsls	r1, r2, #5
 8013796:	69fa      	ldr	r2, [r7, #28]
 8013798:	440a      	add	r2, r1
 801379a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801379e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137a2:	6113      	str	r3, [r2, #16]
 80137a4:	e05f      	b.n	8013866 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	691b      	ldr	r3, [r3, #16]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d123      	bne.n	80137f6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	015a      	lsls	r2, r3, #5
 80137b2:	69fb      	ldr	r3, [r7, #28]
 80137b4:	4413      	add	r3, r2
 80137b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ba:	691a      	ldr	r2, [r3, #16]
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137c4:	69b9      	ldr	r1, [r7, #24]
 80137c6:	0148      	lsls	r0, r1, #5
 80137c8:	69f9      	ldr	r1, [r7, #28]
 80137ca:	4401      	add	r1, r0
 80137cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80137d0:	4313      	orrs	r3, r2
 80137d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	015a      	lsls	r2, r3, #5
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	4413      	add	r3, r2
 80137dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	69ba      	ldr	r2, [r7, #24]
 80137e4:	0151      	lsls	r1, r2, #5
 80137e6:	69fa      	ldr	r2, [r7, #28]
 80137e8:	440a      	add	r2, r1
 80137ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80137f2:	6113      	str	r3, [r2, #16]
 80137f4:	e037      	b.n	8013866 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	691a      	ldr	r2, [r3, #16]
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	4413      	add	r3, r2
 8013800:	1e5a      	subs	r2, r3, #1
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	689b      	ldr	r3, [r3, #8]
 8013806:	fbb2 f3f3 	udiv	r3, r2, r3
 801380a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	8afa      	ldrh	r2, [r7, #22]
 8013812:	fb03 f202 	mul.w	r2, r3, r2
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	015a      	lsls	r2, r3, #5
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	4413      	add	r3, r2
 8013822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013826:	691a      	ldr	r2, [r3, #16]
 8013828:	8afb      	ldrh	r3, [r7, #22]
 801382a:	04d9      	lsls	r1, r3, #19
 801382c:	4b39      	ldr	r3, [pc, #228]	; (8013914 <USB_EPStartXfer+0x53c>)
 801382e:	400b      	ands	r3, r1
 8013830:	69b9      	ldr	r1, [r7, #24]
 8013832:	0148      	lsls	r0, r1, #5
 8013834:	69f9      	ldr	r1, [r7, #28]
 8013836:	4401      	add	r1, r0
 8013838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801383c:	4313      	orrs	r3, r2
 801383e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	015a      	lsls	r2, r3, #5
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	4413      	add	r3, r2
 8013848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801384c:	691a      	ldr	r2, [r3, #16]
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	6a1b      	ldr	r3, [r3, #32]
 8013852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013856:	69b9      	ldr	r1, [r7, #24]
 8013858:	0148      	lsls	r0, r1, #5
 801385a:	69f9      	ldr	r1, [r7, #28]
 801385c:	4401      	add	r1, r0
 801385e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013862:	4313      	orrs	r3, r2
 8013864:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013866:	79fb      	ldrb	r3, [r7, #7]
 8013868:	2b01      	cmp	r3, #1
 801386a:	d10d      	bne.n	8013888 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d009      	beq.n	8013888 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	68d9      	ldr	r1, [r3, #12]
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	015a      	lsls	r2, r3, #5
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	4413      	add	r3, r2
 8013880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013884:	460a      	mov	r2, r1
 8013886:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	791b      	ldrb	r3, [r3, #4]
 801388c:	2b01      	cmp	r3, #1
 801388e:	d128      	bne.n	80138e2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801389c:	2b00      	cmp	r3, #0
 801389e:	d110      	bne.n	80138c2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	015a      	lsls	r2, r3, #5
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	4413      	add	r3, r2
 80138a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	69ba      	ldr	r2, [r7, #24]
 80138b0:	0151      	lsls	r1, r2, #5
 80138b2:	69fa      	ldr	r2, [r7, #28]
 80138b4:	440a      	add	r2, r1
 80138b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80138be:	6013      	str	r3, [r2, #0]
 80138c0:	e00f      	b.n	80138e2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	015a      	lsls	r2, r3, #5
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	4413      	add	r3, r2
 80138ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	69ba      	ldr	r2, [r7, #24]
 80138d2:	0151      	lsls	r1, r2, #5
 80138d4:	69fa      	ldr	r2, [r7, #28]
 80138d6:	440a      	add	r2, r1
 80138d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80138e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	015a      	lsls	r2, r3, #5
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	4413      	add	r3, r2
 80138ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	69ba      	ldr	r2, [r7, #24]
 80138f2:	0151      	lsls	r1, r2, #5
 80138f4:	69fa      	ldr	r2, [r7, #28]
 80138f6:	440a      	add	r2, r1
 80138f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013900:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3720      	adds	r7, #32
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	fff80000 	.word	0xfff80000
 8013910:	e007ffff 	.word	0xe007ffff
 8013914:	1ff80000 	.word	0x1ff80000

08013918 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013918:	b480      	push	{r7}
 801391a:	b087      	sub	sp, #28
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013922:	2300      	movs	r3, #0
 8013924:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013926:	2300      	movs	r3, #0
 8013928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	785b      	ldrb	r3, [r3, #1]
 8013932:	2b01      	cmp	r3, #1
 8013934:	d14a      	bne.n	80139cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	781b      	ldrb	r3, [r3, #0]
 801393a:	015a      	lsls	r2, r3, #5
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	4413      	add	r3, r2
 8013940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801394a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801394e:	f040 8086 	bne.w	8013a5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	015a      	lsls	r2, r3, #5
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	4413      	add	r3, r2
 801395c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	683a      	ldr	r2, [r7, #0]
 8013964:	7812      	ldrb	r2, [r2, #0]
 8013966:	0151      	lsls	r1, r2, #5
 8013968:	693a      	ldr	r2, [r7, #16]
 801396a:	440a      	add	r2, r1
 801396c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013970:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013974:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	015a      	lsls	r2, r3, #5
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	4413      	add	r3, r2
 8013980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	683a      	ldr	r2, [r7, #0]
 8013988:	7812      	ldrb	r2, [r2, #0]
 801398a:	0151      	lsls	r1, r2, #5
 801398c:	693a      	ldr	r2, [r7, #16]
 801398e:	440a      	add	r2, r1
 8013990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013998:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3301      	adds	r3, #1
 801399e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d902      	bls.n	80139b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80139aa:	2301      	movs	r3, #1
 80139ac:	75fb      	strb	r3, [r7, #23]
          break;
 80139ae:	e056      	b.n	8013a5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	015a      	lsls	r2, r3, #5
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	4413      	add	r3, r2
 80139ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139c8:	d0e7      	beq.n	801399a <USB_EPStopXfer+0x82>
 80139ca:	e048      	b.n	8013a5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	015a      	lsls	r2, r3, #5
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	4413      	add	r3, r2
 80139d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139e4:	d13b      	bne.n	8013a5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	015a      	lsls	r2, r3, #5
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	4413      	add	r3, r2
 80139f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	7812      	ldrb	r2, [r2, #0]
 80139fa:	0151      	lsls	r1, r2, #5
 80139fc:	693a      	ldr	r2, [r7, #16]
 80139fe:	440a      	add	r2, r1
 8013a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	015a      	lsls	r2, r3, #5
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	4413      	add	r3, r2
 8013a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	7812      	ldrb	r2, [r2, #0]
 8013a1e:	0151      	lsls	r1, r2, #5
 8013a20:	693a      	ldr	r2, [r7, #16]
 8013a22:	440a      	add	r2, r1
 8013a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	3301      	adds	r3, #1
 8013a32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d902      	bls.n	8013a44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013a3e:	2301      	movs	r3, #1
 8013a40:	75fb      	strb	r3, [r7, #23]
          break;
 8013a42:	e00c      	b.n	8013a5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	015a      	lsls	r2, r3, #5
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	4413      	add	r3, r2
 8013a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a5c:	d0e7      	beq.n	8013a2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	371c      	adds	r7, #28
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	b089      	sub	sp, #36	; 0x24
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	60f8      	str	r0, [r7, #12]
 8013a74:	60b9      	str	r1, [r7, #8]
 8013a76:	4611      	mov	r1, r2
 8013a78:	461a      	mov	r2, r3
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	71fb      	strb	r3, [r7, #7]
 8013a7e:	4613      	mov	r3, r2
 8013a80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d123      	bne.n	8013ada <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013a92:	88bb      	ldrh	r3, [r7, #4]
 8013a94:	3303      	adds	r3, #3
 8013a96:	089b      	lsrs	r3, r3, #2
 8013a98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	61bb      	str	r3, [r7, #24]
 8013a9e:	e018      	b.n	8013ad2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013aa0:	79fb      	ldrb	r3, [r7, #7]
 8013aa2:	031a      	lsls	r2, r3, #12
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	4413      	add	r3, r2
 8013aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013aac:	461a      	mov	r2, r3
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013aba:	69fb      	ldr	r3, [r7, #28]
 8013abc:	3301      	adds	r3, #1
 8013abe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	3301      	adds	r3, #1
 8013ad0:	61bb      	str	r3, [r7, #24]
 8013ad2:	69ba      	ldr	r2, [r7, #24]
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d3e2      	bcc.n	8013aa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013ada:	2300      	movs	r3, #0
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3724      	adds	r7, #36	; 0x24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013ae8:	b480      	push	{r7}
 8013aea:	b08b      	sub	sp, #44	; 0x2c
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	4613      	mov	r3, r2
 8013af4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013afe:	88fb      	ldrh	r3, [r7, #6]
 8013b00:	089b      	lsrs	r3, r3, #2
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b06:	88fb      	ldrh	r3, [r7, #6]
 8013b08:	f003 0303 	and.w	r3, r3, #3
 8013b0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013b0e:	2300      	movs	r3, #0
 8013b10:	623b      	str	r3, [r7, #32]
 8013b12:	e014      	b.n	8013b3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b14:	69bb      	ldr	r3, [r7, #24]
 8013b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	3301      	adds	r3, #1
 8013b24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b28:	3301      	adds	r3, #1
 8013b2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2e:	3301      	adds	r3, #1
 8013b30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b34:	3301      	adds	r3, #1
 8013b36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013b38:	6a3b      	ldr	r3, [r7, #32]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	623b      	str	r3, [r7, #32]
 8013b3e:	6a3a      	ldr	r2, [r7, #32]
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d3e6      	bcc.n	8013b14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013b46:	8bfb      	ldrh	r3, [r7, #30]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d01e      	beq.n	8013b8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b56:	461a      	mov	r2, r3
 8013b58:	f107 0310 	add.w	r3, r7, #16
 8013b5c:	6812      	ldr	r2, [r2, #0]
 8013b5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013b60:	693a      	ldr	r2, [r7, #16]
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	00db      	lsls	r3, r3, #3
 8013b68:	fa22 f303 	lsr.w	r3, r2, r3
 8013b6c:	b2da      	uxtb	r2, r3
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b70:	701a      	strb	r2, [r3, #0]
      i++;
 8013b72:	6a3b      	ldr	r3, [r7, #32]
 8013b74:	3301      	adds	r3, #1
 8013b76:	623b      	str	r3, [r7, #32]
      pDest++;
 8013b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013b7e:	8bfb      	ldrh	r3, [r7, #30]
 8013b80:	3b01      	subs	r3, #1
 8013b82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013b84:	8bfb      	ldrh	r3, [r7, #30]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d1ea      	bne.n	8013b60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	372c      	adds	r7, #44	; 0x2c
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b085      	sub	sp, #20
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	785b      	ldrb	r3, [r3, #1]
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d12c      	bne.n	8013c0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	015a      	lsls	r2, r3, #5
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	db12      	blt.n	8013bec <USB_EPSetStall+0x54>
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00f      	beq.n	8013bec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	015a      	lsls	r2, r3, #5
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	4413      	add	r3, r2
 8013bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	0151      	lsls	r1, r2, #5
 8013bde:	68fa      	ldr	r2, [r7, #12]
 8013be0:	440a      	add	r2, r1
 8013be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013bea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	015a      	lsls	r2, r3, #5
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	68ba      	ldr	r2, [r7, #8]
 8013bfc:	0151      	lsls	r1, r2, #5
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	440a      	add	r2, r1
 8013c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c0a:	6013      	str	r3, [r2, #0]
 8013c0c:	e02b      	b.n	8013c66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	015a      	lsls	r2, r3, #5
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	4413      	add	r3, r2
 8013c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	db12      	blt.n	8013c46 <USB_EPSetStall+0xae>
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d00f      	beq.n	8013c46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	015a      	lsls	r2, r3, #5
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	68ba      	ldr	r2, [r7, #8]
 8013c36:	0151      	lsls	r1, r2, #5
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	440a      	add	r2, r1
 8013c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	015a      	lsls	r2, r3, #5
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	68ba      	ldr	r2, [r7, #8]
 8013c56:	0151      	lsls	r1, r2, #5
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	440a      	add	r2, r1
 8013c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013c66:	2300      	movs	r3, #0
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3714      	adds	r7, #20
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	785b      	ldrb	r3, [r3, #1]
 8013c8c:	2b01      	cmp	r3, #1
 8013c8e:	d128      	bne.n	8013ce2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	015a      	lsls	r2, r3, #5
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	4413      	add	r3, r2
 8013c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	68ba      	ldr	r2, [r7, #8]
 8013ca0:	0151      	lsls	r1, r2, #5
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	440a      	add	r2, r1
 8013ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013cae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	791b      	ldrb	r3, [r3, #4]
 8013cb4:	2b03      	cmp	r3, #3
 8013cb6:	d003      	beq.n	8013cc0 <USB_EPClearStall+0x4c>
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	791b      	ldrb	r3, [r3, #4]
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d138      	bne.n	8013d32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	015a      	lsls	r2, r3, #5
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	68ba      	ldr	r2, [r7, #8]
 8013cd0:	0151      	lsls	r1, r2, #5
 8013cd2:	68fa      	ldr	r2, [r7, #12]
 8013cd4:	440a      	add	r2, r1
 8013cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013cde:	6013      	str	r3, [r2, #0]
 8013ce0:	e027      	b.n	8013d32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	015a      	lsls	r2, r3, #5
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	4413      	add	r3, r2
 8013cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	68ba      	ldr	r2, [r7, #8]
 8013cf2:	0151      	lsls	r1, r2, #5
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	440a      	add	r2, r1
 8013cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	791b      	ldrb	r3, [r3, #4]
 8013d06:	2b03      	cmp	r3, #3
 8013d08:	d003      	beq.n	8013d12 <USB_EPClearStall+0x9e>
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	791b      	ldrb	r3, [r3, #4]
 8013d0e:	2b02      	cmp	r3, #2
 8013d10:	d10f      	bne.n	8013d32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	015a      	lsls	r2, r3, #5
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	4413      	add	r3, r2
 8013d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	68ba      	ldr	r2, [r7, #8]
 8013d22:	0151      	lsls	r1, r2, #5
 8013d24:	68fa      	ldr	r2, [r7, #12]
 8013d26:	440a      	add	r2, r1
 8013d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013d32:	2300      	movs	r3, #0
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3714      	adds	r7, #20
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013d40:	b480      	push	{r7}
 8013d42:	b085      	sub	sp, #20
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	460b      	mov	r3, r1
 8013d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013d62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	78fb      	ldrb	r3, [r7, #3]
 8013d6e:	011b      	lsls	r3, r3, #4
 8013d70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013d74:	68f9      	ldr	r1, [r7, #12]
 8013d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013d7e:	2300      	movs	r3, #0
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3714      	adds	r7, #20
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b085      	sub	sp, #20
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013da6:	f023 0303 	bic.w	r3, r3, #3
 8013daa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dba:	f023 0302 	bic.w	r3, r3, #2
 8013dbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013dc0:	2300      	movs	r3, #0
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3714      	adds	r7, #20
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr

08013dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013dce:	b480      	push	{r7}
 8013dd0:	b085      	sub	sp, #20
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013de8:	f023 0303 	bic.w	r3, r3, #3
 8013dec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dfc:	f043 0302 	orr.w	r3, r3, #2
 8013e00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e02:	2300      	movs	r3, #0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3714      	adds	r7, #20
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0e:	4770      	bx	lr

08013e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	695b      	ldr	r3, [r3, #20]
 8013e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	699b      	ldr	r3, [r3, #24]
 8013e22:	68fa      	ldr	r2, [r7, #12]
 8013e24:	4013      	ands	r3, r2
 8013e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013e28:	68fb      	ldr	r3, [r7, #12]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3714      	adds	r7, #20
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e36:	b480      	push	{r7}
 8013e38:	b085      	sub	sp, #20
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e48:	699b      	ldr	r3, [r3, #24]
 8013e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e52:	69db      	ldr	r3, [r3, #28]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	4013      	ands	r3, r2
 8013e58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	0c1b      	lsrs	r3, r3, #16
}
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3714      	adds	r7, #20
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013e6a:	b480      	push	{r7}
 8013e6c:	b085      	sub	sp, #20
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e7c:	699b      	ldr	r3, [r3, #24]
 8013e7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e86:	69db      	ldr	r3, [r3, #28]
 8013e88:	68ba      	ldr	r2, [r7, #8]
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	b29b      	uxth	r3, r3
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr

08013e9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013e9e:	b480      	push	{r7}
 8013ea0:	b085      	sub	sp, #20
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013eae:	78fb      	ldrb	r3, [r7, #3]
 8013eb0:	015a      	lsls	r2, r3, #5
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	4413      	add	r3, r2
 8013eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ec4:	695b      	ldr	r3, [r3, #20]
 8013ec6:	68ba      	ldr	r2, [r7, #8]
 8013ec8:	4013      	ands	r3, r2
 8013eca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013ecc:	68bb      	ldr	r3, [r7, #8]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b087      	sub	sp, #28
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013efc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013efe:	78fb      	ldrb	r3, [r7, #3]
 8013f00:	f003 030f 	and.w	r3, r3, #15
 8013f04:	68fa      	ldr	r2, [r7, #12]
 8013f06:	fa22 f303 	lsr.w	r3, r2, r3
 8013f0a:	01db      	lsls	r3, r3, #7
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	693a      	ldr	r2, [r7, #16]
 8013f10:	4313      	orrs	r3, r2
 8013f12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013f14:	78fb      	ldrb	r3, [r7, #3]
 8013f16:	015a      	lsls	r2, r3, #5
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f20:	689b      	ldr	r3, [r3, #8]
 8013f22:	693a      	ldr	r2, [r7, #16]
 8013f24:	4013      	ands	r3, r2
 8013f26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f28:	68bb      	ldr	r3, [r7, #8]
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	371c      	adds	r7, #28
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr

08013f36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013f36:	b480      	push	{r7}
 8013f38:	b083      	sub	sp, #12
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	695b      	ldr	r3, [r3, #20]
 8013f42:	f003 0301 	and.w	r3, r3, #1
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	370c      	adds	r7, #12
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f50:	4770      	bx	lr
	...

08013f54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f6e:	4619      	mov	r1, r3
 8013f70:	4b09      	ldr	r3, [pc, #36]	; (8013f98 <USB_ActivateSetup+0x44>)
 8013f72:	4013      	ands	r3, r2
 8013f74:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	68fa      	ldr	r2, [r7, #12]
 8013f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3714      	adds	r7, #20
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr
 8013f98:	fffff800 	.word	0xfffff800

08013f9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b087      	sub	sp, #28
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	460b      	mov	r3, r1
 8013fa6:	607a      	str	r2, [r7, #4]
 8013fa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	333c      	adds	r3, #60	; 0x3c
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	4a26      	ldr	r2, [pc, #152]	; (8014054 <USB_EP0_OutStart+0xb8>)
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	d90a      	bls.n	8013fd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fd0:	d101      	bne.n	8013fd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	e037      	b.n	8014046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fdc:	461a      	mov	r2, r3
 8013fde:	2300      	movs	r3, #0
 8013fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	697a      	ldr	r2, [r7, #20]
 8013fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ffc:	691b      	ldr	r3, [r3, #16]
 8013ffe:	697a      	ldr	r2, [r7, #20]
 8014000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014004:	f043 0318 	orr.w	r3, r3, #24
 8014008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014010:	691b      	ldr	r3, [r3, #16]
 8014012:	697a      	ldr	r2, [r7, #20]
 8014014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801401c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801401e:	7afb      	ldrb	r3, [r7, #11]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d10f      	bne.n	8014044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801402a:	461a      	mov	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	697a      	ldr	r2, [r7, #20]
 801403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801403e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014044:	2300      	movs	r3, #0
}
 8014046:	4618      	mov	r0, r3
 8014048:	371c      	adds	r7, #28
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop
 8014054:	4f54300a 	.word	0x4f54300a

08014058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014058:	b480      	push	{r7}
 801405a:	b085      	sub	sp, #20
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014060:	2300      	movs	r3, #0
 8014062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	3301      	adds	r3, #1
 8014068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	4a13      	ldr	r2, [pc, #76]	; (80140bc <USB_CoreReset+0x64>)
 801406e:	4293      	cmp	r3, r2
 8014070:	d901      	bls.n	8014076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014072:	2303      	movs	r3, #3
 8014074:	e01b      	b.n	80140ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	691b      	ldr	r3, [r3, #16]
 801407a:	2b00      	cmp	r3, #0
 801407c:	daf2      	bge.n	8014064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801407e:	2300      	movs	r3, #0
 8014080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	691b      	ldr	r3, [r3, #16]
 8014086:	f043 0201 	orr.w	r2, r3, #1
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3301      	adds	r3, #1
 8014092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	4a09      	ldr	r2, [pc, #36]	; (80140bc <USB_CoreReset+0x64>)
 8014098:	4293      	cmp	r3, r2
 801409a:	d901      	bls.n	80140a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801409c:	2303      	movs	r3, #3
 801409e:	e006      	b.n	80140ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	f003 0301 	and.w	r3, r3, #1
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d0f0      	beq.n	801408e <USB_CoreReset+0x36>

  return HAL_OK;
 80140ac:	2300      	movs	r3, #0
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3714      	adds	r7, #20
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	00030d40 	.word	0x00030d40

080140c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80140c4:	4904      	ldr	r1, [pc, #16]	; (80140d8 <MX_FATFS_Init+0x18>)
 80140c6:	4805      	ldr	r0, [pc, #20]	; (80140dc <MX_FATFS_Init+0x1c>)
 80140c8:	f004 fe9c 	bl	8018e04 <FATFS_LinkDriver>
 80140cc:	4603      	mov	r3, r0
 80140ce:	461a      	mov	r2, r3
 80140d0:	4b03      	ldr	r3, [pc, #12]	; (80140e0 <MX_FATFS_Init+0x20>)
 80140d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80140d4:	bf00      	nop
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	240016ac 	.word	0x240016ac
 80140dc:	0801e174 	.word	0x0801e174
 80140e0:	240016a8 	.word	0x240016a8

080140e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80140e4:	b480      	push	{r7}
 80140e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80140e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr

080140f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80140fa:	2300      	movs	r3, #0
 80140fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80140fe:	f000 f885 	bl	801420c <BSP_SD_IsDetected>
 8014102:	4603      	mov	r3, r0
 8014104:	2b01      	cmp	r3, #1
 8014106:	d001      	beq.n	801410c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014108:	2302      	movs	r3, #2
 801410a:	e012      	b.n	8014132 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801410c:	480b      	ldr	r0, [pc, #44]	; (801413c <BSP_SD_Init+0x48>)
 801410e:	f7f8 ff39 	bl	800cf84 <HAL_SD_Init>
 8014112:	4603      	mov	r3, r0
 8014114:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d109      	bne.n	8014130 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801411c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014120:	4806      	ldr	r0, [pc, #24]	; (801413c <BSP_SD_Init+0x48>)
 8014122:	f7f9 fdef 	bl	800dd04 <HAL_SD_ConfigWideBusOperation>
 8014126:	4603      	mov	r3, r0
 8014128:	2b00      	cmp	r3, #0
 801412a:	d001      	beq.n	8014130 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801412c:	2301      	movs	r3, #1
 801412e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014130:	79fb      	ldrb	r3, [r7, #7]
}
 8014132:	4618      	mov	r0, r3
 8014134:	3708      	adds	r7, #8
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	24000f44 	.word	0x24000f44

08014140 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801414c:	2300      	movs	r3, #0
 801414e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	68ba      	ldr	r2, [r7, #8]
 8014154:	68f9      	ldr	r1, [r7, #12]
 8014156:	4806      	ldr	r0, [pc, #24]	; (8014170 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014158:	f7f9 f834 	bl	800d1c4 <HAL_SD_ReadBlocks_DMA>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d001      	beq.n	8014166 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014162:	2301      	movs	r3, #1
 8014164:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014166:	7dfb      	ldrb	r3, [r7, #23]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	24000f44 	.word	0x24000f44

08014174 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b086      	sub	sp, #24
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014180:	2300      	movs	r3, #0
 8014182:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	68ba      	ldr	r2, [r7, #8]
 8014188:	68f9      	ldr	r1, [r7, #12]
 801418a:	4806      	ldr	r0, [pc, #24]	; (80141a4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801418c:	f7f9 f8c2 	bl	800d314 <HAL_SD_WriteBlocks_DMA>
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	d001      	beq.n	801419a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014196:	2301      	movs	r3, #1
 8014198:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801419a:	7dfb      	ldrb	r3, [r7, #23]
}
 801419c:	4618      	mov	r0, r3
 801419e:	3718      	adds	r7, #24
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	24000f44 	.word	0x24000f44

080141a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80141ac:	4805      	ldr	r0, [pc, #20]	; (80141c4 <BSP_SD_GetCardState+0x1c>)
 80141ae:	f7f9 febb 	bl	800df28 <HAL_SD_GetCardState>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b04      	cmp	r3, #4
 80141b6:	bf14      	ite	ne
 80141b8:	2301      	movne	r3, #1
 80141ba:	2300      	moveq	r3, #0
 80141bc:	b2db      	uxtb	r3, r3
}
 80141be:	4618      	mov	r0, r3
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	24000f44 	.word	0x24000f44

080141c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80141d0:	6879      	ldr	r1, [r7, #4]
 80141d2:	4803      	ldr	r0, [pc, #12]	; (80141e0 <BSP_SD_GetCardInfo+0x18>)
 80141d4:	f7f9 fd6a 	bl	800dcac <HAL_SD_GetCardInfo>
}
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	24000f44 	.word	0x24000f44

080141e4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b082      	sub	sp, #8
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80141ec:	f000 f984 	bl	80144f8 <BSP_SD_WriteCpltCallback>
}
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014200:	f000 f986 	bl	8014510 <BSP_SD_ReadCpltCallback>
}
 8014204:	bf00      	nop
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014212:	2301      	movs	r3, #1
 8014214:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8014216:	79fb      	ldrb	r3, [r7, #7]
 8014218:	b2db      	uxtb	r3, r3
}
 801421a:	4618      	mov	r0, r3
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr

08014226 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801422e:	f7ef fa41 	bl	80036b4 <HAL_GetTick>
 8014232:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014234:	e006      	b.n	8014244 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014236:	f7ff ffb7 	bl	80141a8 <BSP_SD_GetCardState>
 801423a:	4603      	mov	r3, r0
 801423c:	2b00      	cmp	r3, #0
 801423e:	d101      	bne.n	8014244 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014240:	2300      	movs	r3, #0
 8014242:	e009      	b.n	8014258 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014244:	f7ef fa36 	bl	80036b4 <HAL_GetTick>
 8014248:	4602      	mov	r2, r0
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	429a      	cmp	r2, r3
 8014252:	d8f0      	bhi.n	8014236 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014258:	4618      	mov	r0, r3
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	4603      	mov	r3, r0
 8014268:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801426a:	4b0b      	ldr	r3, [pc, #44]	; (8014298 <SD_CheckStatus+0x38>)
 801426c:	2201      	movs	r2, #1
 801426e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014270:	f7ff ff9a 	bl	80141a8 <BSP_SD_GetCardState>
 8014274:	4603      	mov	r3, r0
 8014276:	2b00      	cmp	r3, #0
 8014278:	d107      	bne.n	801428a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801427a:	4b07      	ldr	r3, [pc, #28]	; (8014298 <SD_CheckStatus+0x38>)
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	b2db      	uxtb	r3, r3
 8014280:	f023 0301 	bic.w	r3, r3, #1
 8014284:	b2da      	uxtb	r2, r3
 8014286:	4b04      	ldr	r3, [pc, #16]	; (8014298 <SD_CheckStatus+0x38>)
 8014288:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801428a:	4b03      	ldr	r3, [pc, #12]	; (8014298 <SD_CheckStatus+0x38>)
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	b2db      	uxtb	r3, r3
}
 8014290:	4618      	mov	r0, r3
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	2400000d 	.word	0x2400000d

0801429c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	4603      	mov	r3, r0
 80142a4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80142a6:	f7ff ff25 	bl	80140f4 <BSP_SD_Init>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d107      	bne.n	80142c0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80142b0:	79fb      	ldrb	r3, [r7, #7]
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff ffd4 	bl	8014260 <SD_CheckStatus>
 80142b8:	4603      	mov	r3, r0
 80142ba:	461a      	mov	r2, r3
 80142bc:	4b04      	ldr	r3, [pc, #16]	; (80142d0 <SD_initialize+0x34>)
 80142be:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80142c0:	4b03      	ldr	r3, [pc, #12]	; (80142d0 <SD_initialize+0x34>)
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	b2db      	uxtb	r3, r3
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3708      	adds	r7, #8
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	2400000d 	.word	0x2400000d

080142d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	4603      	mov	r3, r0
 80142dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80142de:	79fb      	ldrb	r3, [r7, #7]
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7ff ffbd 	bl	8014260 <SD_CheckStatus>
 80142e6:	4603      	mov	r3, r0
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60b9      	str	r1, [r7, #8]
 80142f8:	607a      	str	r2, [r7, #4]
 80142fa:	603b      	str	r3, [r7, #0]
 80142fc:	4603      	mov	r3, r0
 80142fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014300:	2301      	movs	r3, #1
 8014302:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014304:	f247 5030 	movw	r0, #30000	; 0x7530
 8014308:	f7ff ff8d 	bl	8014226 <SD_CheckStatusWithTimeout>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	da01      	bge.n	8014316 <SD_read+0x26>
  {
    return res;
 8014312:	7dfb      	ldrb	r3, [r7, #23]
 8014314:	e03b      	b.n	801438e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014316:	683a      	ldr	r2, [r7, #0]
 8014318:	6879      	ldr	r1, [r7, #4]
 801431a:	68b8      	ldr	r0, [r7, #8]
 801431c:	f7ff ff10 	bl	8014140 <BSP_SD_ReadBlocks_DMA>
 8014320:	4603      	mov	r3, r0
 8014322:	2b00      	cmp	r3, #0
 8014324:	d132      	bne.n	801438c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014326:	4b1c      	ldr	r3, [pc, #112]	; (8014398 <SD_read+0xa8>)
 8014328:	2200      	movs	r2, #0
 801432a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801432c:	f7ef f9c2 	bl	80036b4 <HAL_GetTick>
 8014330:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014332:	bf00      	nop
 8014334:	4b18      	ldr	r3, [pc, #96]	; (8014398 <SD_read+0xa8>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d108      	bne.n	801434e <SD_read+0x5e>
 801433c:	f7ef f9ba 	bl	80036b4 <HAL_GetTick>
 8014340:	4602      	mov	r2, r0
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	1ad3      	subs	r3, r2, r3
 8014346:	f247 522f 	movw	r2, #29999	; 0x752f
 801434a:	4293      	cmp	r3, r2
 801434c:	d9f2      	bls.n	8014334 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801434e:	4b12      	ldr	r3, [pc, #72]	; (8014398 <SD_read+0xa8>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d102      	bne.n	801435c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014356:	2301      	movs	r3, #1
 8014358:	75fb      	strb	r3, [r7, #23]
 801435a:	e017      	b.n	801438c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801435c:	4b0e      	ldr	r3, [pc, #56]	; (8014398 <SD_read+0xa8>)
 801435e:	2200      	movs	r2, #0
 8014360:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014362:	f7ef f9a7 	bl	80036b4 <HAL_GetTick>
 8014366:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014368:	e007      	b.n	801437a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801436a:	f7ff ff1d 	bl	80141a8 <BSP_SD_GetCardState>
 801436e:	4603      	mov	r3, r0
 8014370:	2b00      	cmp	r3, #0
 8014372:	d102      	bne.n	801437a <SD_read+0x8a>
          {
            res = RES_OK;
 8014374:	2300      	movs	r3, #0
 8014376:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014378:	e008      	b.n	801438c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801437a:	f7ef f99b 	bl	80036b4 <HAL_GetTick>
 801437e:	4602      	mov	r2, r0
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	f247 522f 	movw	r2, #29999	; 0x752f
 8014388:	4293      	cmp	r3, r2
 801438a:	d9ee      	bls.n	801436a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801438c:	7dfb      	ldrb	r3, [r7, #23]
}
 801438e:	4618      	mov	r0, r3
 8014390:	3718      	adds	r7, #24
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	240016b4 	.word	0x240016b4

0801439c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60b9      	str	r1, [r7, #8]
 80143a4:	607a      	str	r2, [r7, #4]
 80143a6:	603b      	str	r3, [r7, #0]
 80143a8:	4603      	mov	r3, r0
 80143aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143ac:	2301      	movs	r3, #1
 80143ae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80143b0:	4b24      	ldr	r3, [pc, #144]	; (8014444 <SD_write+0xa8>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143b6:	f247 5030 	movw	r0, #30000	; 0x7530
 80143ba:	f7ff ff34 	bl	8014226 <SD_CheckStatusWithTimeout>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	da01      	bge.n	80143c8 <SD_write+0x2c>
  {
    return res;
 80143c4:	7dfb      	ldrb	r3, [r7, #23]
 80143c6:	e038      	b.n	801443a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80143c8:	683a      	ldr	r2, [r7, #0]
 80143ca:	6879      	ldr	r1, [r7, #4]
 80143cc:	68b8      	ldr	r0, [r7, #8]
 80143ce:	f7ff fed1 	bl	8014174 <BSP_SD_WriteBlocks_DMA>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d12f      	bne.n	8014438 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80143d8:	f7ef f96c 	bl	80036b4 <HAL_GetTick>
 80143dc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143de:	bf00      	nop
 80143e0:	4b18      	ldr	r3, [pc, #96]	; (8014444 <SD_write+0xa8>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d108      	bne.n	80143fa <SD_write+0x5e>
 80143e8:	f7ef f964 	bl	80036b4 <HAL_GetTick>
 80143ec:	4602      	mov	r2, r0
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d9f2      	bls.n	80143e0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80143fa:	4b12      	ldr	r3, [pc, #72]	; (8014444 <SD_write+0xa8>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d102      	bne.n	8014408 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014402:	2301      	movs	r3, #1
 8014404:	75fb      	strb	r3, [r7, #23]
 8014406:	e017      	b.n	8014438 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014408:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <SD_write+0xa8>)
 801440a:	2200      	movs	r2, #0
 801440c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801440e:	f7ef f951 	bl	80036b4 <HAL_GetTick>
 8014412:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014414:	e007      	b.n	8014426 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014416:	f7ff fec7 	bl	80141a8 <BSP_SD_GetCardState>
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d102      	bne.n	8014426 <SD_write+0x8a>
          {
            res = RES_OK;
 8014420:	2300      	movs	r3, #0
 8014422:	75fb      	strb	r3, [r7, #23]
            break;
 8014424:	e008      	b.n	8014438 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014426:	f7ef f945 	bl	80036b4 <HAL_GetTick>
 801442a:	4602      	mov	r2, r0
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	f247 522f 	movw	r2, #29999	; 0x752f
 8014434:	4293      	cmp	r3, r2
 8014436:	d9ee      	bls.n	8014416 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014438:	7dfb      	ldrb	r3, [r7, #23]
}
 801443a:	4618      	mov	r0, r3
 801443c:	3718      	adds	r7, #24
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	240016b0 	.word	0x240016b0

08014448 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b08c      	sub	sp, #48	; 0x30
 801444c:	af00      	add	r7, sp, #0
 801444e:	4603      	mov	r3, r0
 8014450:	603a      	str	r2, [r7, #0]
 8014452:	71fb      	strb	r3, [r7, #7]
 8014454:	460b      	mov	r3, r1
 8014456:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801445e:	4b25      	ldr	r3, [pc, #148]	; (80144f4 <SD_ioctl+0xac>)
 8014460:	781b      	ldrb	r3, [r3, #0]
 8014462:	b2db      	uxtb	r3, r3
 8014464:	f003 0301 	and.w	r3, r3, #1
 8014468:	2b00      	cmp	r3, #0
 801446a:	d001      	beq.n	8014470 <SD_ioctl+0x28>
 801446c:	2303      	movs	r3, #3
 801446e:	e03c      	b.n	80144ea <SD_ioctl+0xa2>

  switch (cmd)
 8014470:	79bb      	ldrb	r3, [r7, #6]
 8014472:	2b03      	cmp	r3, #3
 8014474:	d834      	bhi.n	80144e0 <SD_ioctl+0x98>
 8014476:	a201      	add	r2, pc, #4	; (adr r2, 801447c <SD_ioctl+0x34>)
 8014478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801447c:	0801448d 	.word	0x0801448d
 8014480:	08014495 	.word	0x08014495
 8014484:	080144ad 	.word	0x080144ad
 8014488:	080144c7 	.word	0x080144c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801448c:	2300      	movs	r3, #0
 801448e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014492:	e028      	b.n	80144e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014494:	f107 0308 	add.w	r3, r7, #8
 8014498:	4618      	mov	r0, r3
 801449a:	f7ff fe95 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801449e:	6a3a      	ldr	r2, [r7, #32]
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80144a4:	2300      	movs	r3, #0
 80144a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144aa:	e01c      	b.n	80144e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144ac:	f107 0308 	add.w	r3, r7, #8
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7ff fe89 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80144b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80144be:	2300      	movs	r3, #0
 80144c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144c4:	e00f      	b.n	80144e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80144c6:	f107 0308 	add.w	r3, r7, #8
 80144ca:	4618      	mov	r0, r3
 80144cc:	f7ff fe7c 	bl	80141c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80144d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144d2:	0a5a      	lsrs	r2, r3, #9
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80144d8:	2300      	movs	r3, #0
 80144da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80144de:	e002      	b.n	80144e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80144e0:	2304      	movs	r3, #4
 80144e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80144e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3730      	adds	r7, #48	; 0x30
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	2400000d 	.word	0x2400000d

080144f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80144f8:	b480      	push	{r7}
 80144fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80144fc:	4b03      	ldr	r3, [pc, #12]	; (801450c <BSP_SD_WriteCpltCallback+0x14>)
 80144fe:	2201      	movs	r2, #1
 8014500:	601a      	str	r2, [r3, #0]
}
 8014502:	bf00      	nop
 8014504:	46bd      	mov	sp, r7
 8014506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450a:	4770      	bx	lr
 801450c:	240016b0 	.word	0x240016b0

08014510 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014510:	b480      	push	{r7}
 8014512:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014514:	4b03      	ldr	r3, [pc, #12]	; (8014524 <BSP_SD_ReadCpltCallback+0x14>)
 8014516:	2201      	movs	r2, #1
 8014518:	601a      	str	r2, [r3, #0]
}
 801451a:	bf00      	nop
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr
 8014524:	240016b4 	.word	0x240016b4

08014528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
 8014530:	460b      	mov	r3, r1
 8014532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014534:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014538:	f005 fa0a 	bl	8019950 <USBD_static_malloc>
 801453c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d109      	bne.n	8014558 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	32b0      	adds	r2, #176	; 0xb0
 801454e:	2100      	movs	r1, #0
 8014550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014554:	2302      	movs	r3, #2
 8014556:	e0d4      	b.n	8014702 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014558:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801455c:	2100      	movs	r1, #0
 801455e:	68f8      	ldr	r0, [r7, #12]
 8014560:	f006 f99d 	bl	801a89e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	32b0      	adds	r2, #176	; 0xb0
 801456e:	68f9      	ldr	r1, [r7, #12]
 8014570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	32b0      	adds	r2, #176	; 0xb0
 801457e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	7c1b      	ldrb	r3, [r3, #16]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d138      	bne.n	8014602 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014590:	4b5e      	ldr	r3, [pc, #376]	; (801470c <USBD_CDC_Init+0x1e4>)
 8014592:	7819      	ldrb	r1, [r3, #0]
 8014594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014598:	2202      	movs	r2, #2
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f005 f8b5 	bl	801970a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80145a0:	4b5a      	ldr	r3, [pc, #360]	; (801470c <USBD_CDC_Init+0x1e4>)
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f003 020f 	and.w	r2, r3, #15
 80145a8:	6879      	ldr	r1, [r7, #4]
 80145aa:	4613      	mov	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4413      	add	r3, r2
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	440b      	add	r3, r1
 80145b4:	3324      	adds	r3, #36	; 0x24
 80145b6:	2201      	movs	r2, #1
 80145b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80145ba:	4b55      	ldr	r3, [pc, #340]	; (8014710 <USBD_CDC_Init+0x1e8>)
 80145bc:	7819      	ldrb	r1, [r3, #0]
 80145be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145c2:	2202      	movs	r2, #2
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f005 f8a0 	bl	801970a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80145ca:	4b51      	ldr	r3, [pc, #324]	; (8014710 <USBD_CDC_Init+0x1e8>)
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	f003 020f 	and.w	r2, r3, #15
 80145d2:	6879      	ldr	r1, [r7, #4]
 80145d4:	4613      	mov	r3, r2
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	4413      	add	r3, r2
 80145da:	009b      	lsls	r3, r3, #2
 80145dc:	440b      	add	r3, r1
 80145de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80145e2:	2201      	movs	r2, #1
 80145e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80145e6:	4b4b      	ldr	r3, [pc, #300]	; (8014714 <USBD_CDC_Init+0x1ec>)
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	f003 020f 	and.w	r2, r3, #15
 80145ee:	6879      	ldr	r1, [r7, #4]
 80145f0:	4613      	mov	r3, r2
 80145f2:	009b      	lsls	r3, r3, #2
 80145f4:	4413      	add	r3, r2
 80145f6:	009b      	lsls	r3, r3, #2
 80145f8:	440b      	add	r3, r1
 80145fa:	3326      	adds	r3, #38	; 0x26
 80145fc:	2210      	movs	r2, #16
 80145fe:	801a      	strh	r2, [r3, #0]
 8014600:	e035      	b.n	801466e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014602:	4b42      	ldr	r3, [pc, #264]	; (801470c <USBD_CDC_Init+0x1e4>)
 8014604:	7819      	ldrb	r1, [r3, #0]
 8014606:	2340      	movs	r3, #64	; 0x40
 8014608:	2202      	movs	r2, #2
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f005 f87d 	bl	801970a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014610:	4b3e      	ldr	r3, [pc, #248]	; (801470c <USBD_CDC_Init+0x1e4>)
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	f003 020f 	and.w	r2, r3, #15
 8014618:	6879      	ldr	r1, [r7, #4]
 801461a:	4613      	mov	r3, r2
 801461c:	009b      	lsls	r3, r3, #2
 801461e:	4413      	add	r3, r2
 8014620:	009b      	lsls	r3, r3, #2
 8014622:	440b      	add	r3, r1
 8014624:	3324      	adds	r3, #36	; 0x24
 8014626:	2201      	movs	r2, #1
 8014628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801462a:	4b39      	ldr	r3, [pc, #228]	; (8014710 <USBD_CDC_Init+0x1e8>)
 801462c:	7819      	ldrb	r1, [r3, #0]
 801462e:	2340      	movs	r3, #64	; 0x40
 8014630:	2202      	movs	r2, #2
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f005 f869 	bl	801970a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014638:	4b35      	ldr	r3, [pc, #212]	; (8014710 <USBD_CDC_Init+0x1e8>)
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	f003 020f 	and.w	r2, r3, #15
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	4613      	mov	r3, r2
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	4413      	add	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	440b      	add	r3, r1
 801464c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014650:	2201      	movs	r2, #1
 8014652:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014654:	4b2f      	ldr	r3, [pc, #188]	; (8014714 <USBD_CDC_Init+0x1ec>)
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	f003 020f 	and.w	r2, r3, #15
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	4613      	mov	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4413      	add	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	440b      	add	r3, r1
 8014668:	3326      	adds	r3, #38	; 0x26
 801466a:	2210      	movs	r2, #16
 801466c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801466e:	4b29      	ldr	r3, [pc, #164]	; (8014714 <USBD_CDC_Init+0x1ec>)
 8014670:	7819      	ldrb	r1, [r3, #0]
 8014672:	2308      	movs	r3, #8
 8014674:	2203      	movs	r2, #3
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f005 f847 	bl	801970a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801467c:	4b25      	ldr	r3, [pc, #148]	; (8014714 <USBD_CDC_Init+0x1ec>)
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	f003 020f 	and.w	r2, r3, #15
 8014684:	6879      	ldr	r1, [r7, #4]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	440b      	add	r3, r1
 8014690:	3324      	adds	r3, #36	; 0x24
 8014692:	2201      	movs	r2, #1
 8014694:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	2200      	movs	r2, #0
 801469a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	33b0      	adds	r3, #176	; 0xb0
 80146a8:	009b      	lsls	r3, r3, #2
 80146aa:	4413      	add	r3, r2
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2200      	movs	r2, #0
 80146b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2200      	movs	r2, #0
 80146be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d101      	bne.n	80146d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80146cc:	2302      	movs	r3, #2
 80146ce:	e018      	b.n	8014702 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	7c1b      	ldrb	r3, [r3, #16]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d10a      	bne.n	80146ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146d8:	4b0d      	ldr	r3, [pc, #52]	; (8014710 <USBD_CDC_Init+0x1e8>)
 80146da:	7819      	ldrb	r1, [r3, #0]
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f005 f8fe 	bl	80198e8 <USBD_LL_PrepareReceive>
 80146ec:	e008      	b.n	8014700 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80146ee:	4b08      	ldr	r3, [pc, #32]	; (8014710 <USBD_CDC_Init+0x1e8>)
 80146f0:	7819      	ldrb	r1, [r3, #0]
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80146f8:	2340      	movs	r3, #64	; 0x40
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f005 f8f4 	bl	80198e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014700:	2300      	movs	r3, #0
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	24000097 	.word	0x24000097
 8014710:	24000098 	.word	0x24000098
 8014714:	24000099 	.word	0x24000099

08014718 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	460b      	mov	r3, r1
 8014722:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014724:	4b3a      	ldr	r3, [pc, #232]	; (8014810 <USBD_CDC_DeInit+0xf8>)
 8014726:	781b      	ldrb	r3, [r3, #0]
 8014728:	4619      	mov	r1, r3
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f005 f813 	bl	8019756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014730:	4b37      	ldr	r3, [pc, #220]	; (8014810 <USBD_CDC_DeInit+0xf8>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	f003 020f 	and.w	r2, r3, #15
 8014738:	6879      	ldr	r1, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	440b      	add	r3, r1
 8014744:	3324      	adds	r3, #36	; 0x24
 8014746:	2200      	movs	r2, #0
 8014748:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801474a:	4b32      	ldr	r3, [pc, #200]	; (8014814 <USBD_CDC_DeInit+0xfc>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	4619      	mov	r1, r3
 8014750:	6878      	ldr	r0, [r7, #4]
 8014752:	f005 f800 	bl	8019756 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014756:	4b2f      	ldr	r3, [pc, #188]	; (8014814 <USBD_CDC_DeInit+0xfc>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	f003 020f 	and.w	r2, r3, #15
 801475e:	6879      	ldr	r1, [r7, #4]
 8014760:	4613      	mov	r3, r2
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	4413      	add	r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	440b      	add	r3, r1
 801476a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801476e:	2200      	movs	r2, #0
 8014770:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014772:	4b29      	ldr	r3, [pc, #164]	; (8014818 <USBD_CDC_DeInit+0x100>)
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	4619      	mov	r1, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f004 ffec 	bl	8019756 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801477e:	4b26      	ldr	r3, [pc, #152]	; (8014818 <USBD_CDC_DeInit+0x100>)
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	f003 020f 	and.w	r2, r3, #15
 8014786:	6879      	ldr	r1, [r7, #4]
 8014788:	4613      	mov	r3, r2
 801478a:	009b      	lsls	r3, r3, #2
 801478c:	4413      	add	r3, r2
 801478e:	009b      	lsls	r3, r3, #2
 8014790:	440b      	add	r3, r1
 8014792:	3324      	adds	r3, #36	; 0x24
 8014794:	2200      	movs	r2, #0
 8014796:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014798:	4b1f      	ldr	r3, [pc, #124]	; (8014818 <USBD_CDC_DeInit+0x100>)
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	f003 020f 	and.w	r2, r3, #15
 80147a0:	6879      	ldr	r1, [r7, #4]
 80147a2:	4613      	mov	r3, r2
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	4413      	add	r3, r2
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	440b      	add	r3, r1
 80147ac:	3326      	adds	r3, #38	; 0x26
 80147ae:	2200      	movs	r2, #0
 80147b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	32b0      	adds	r2, #176	; 0xb0
 80147bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d01f      	beq.n	8014804 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80147ca:	687a      	ldr	r2, [r7, #4]
 80147cc:	33b0      	adds	r3, #176	; 0xb0
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	32b0      	adds	r2, #176	; 0xb0
 80147e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147e6:	4618      	mov	r0, r3
 80147e8:	f005 f8c0 	bl	801996c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	32b0      	adds	r2, #176	; 0xb0
 80147f6:	2100      	movs	r1, #0
 80147f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2200      	movs	r2, #0
 8014800:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014804:	2300      	movs	r3, #0
}
 8014806:	4618      	mov	r0, r3
 8014808:	3708      	adds	r7, #8
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	24000097 	.word	0x24000097
 8014814:	24000098 	.word	0x24000098
 8014818:	24000099 	.word	0x24000099

0801481c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b086      	sub	sp, #24
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	32b0      	adds	r2, #176	; 0xb0
 8014830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014834:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014836:	2300      	movs	r3, #0
 8014838:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801483a:	2300      	movs	r3, #0
 801483c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801483e:	2300      	movs	r3, #0
 8014840:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d101      	bne.n	801484c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014848:	2303      	movs	r3, #3
 801484a:	e0bf      	b.n	80149cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	781b      	ldrb	r3, [r3, #0]
 8014850:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014854:	2b00      	cmp	r3, #0
 8014856:	d050      	beq.n	80148fa <USBD_CDC_Setup+0xde>
 8014858:	2b20      	cmp	r3, #32
 801485a:	f040 80af 	bne.w	80149bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	88db      	ldrh	r3, [r3, #6]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d03a      	beq.n	80148dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	b25b      	sxtb	r3, r3
 801486c:	2b00      	cmp	r3, #0
 801486e:	da1b      	bge.n	80148a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	33b0      	adds	r3, #176	; 0xb0
 801487a:	009b      	lsls	r3, r3, #2
 801487c:	4413      	add	r3, r2
 801487e:	685b      	ldr	r3, [r3, #4]
 8014880:	689b      	ldr	r3, [r3, #8]
 8014882:	683a      	ldr	r2, [r7, #0]
 8014884:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014886:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014888:	683a      	ldr	r2, [r7, #0]
 801488a:	88d2      	ldrh	r2, [r2, #6]
 801488c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	88db      	ldrh	r3, [r3, #6]
 8014892:	2b07      	cmp	r3, #7
 8014894:	bf28      	it	cs
 8014896:	2307      	movcs	r3, #7
 8014898:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	89fa      	ldrh	r2, [r7, #14]
 801489e:	4619      	mov	r1, r3
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f001 fd89 	bl	80163b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80148a6:	e090      	b.n	80149ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	785a      	ldrb	r2, [r3, #1]
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	88db      	ldrh	r3, [r3, #6]
 80148b6:	2b3f      	cmp	r3, #63	; 0x3f
 80148b8:	d803      	bhi.n	80148c2 <USBD_CDC_Setup+0xa6>
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	88db      	ldrh	r3, [r3, #6]
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	e000      	b.n	80148c4 <USBD_CDC_Setup+0xa8>
 80148c2:	2240      	movs	r2, #64	; 0x40
 80148c4:	693b      	ldr	r3, [r7, #16]
 80148c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80148ca:	6939      	ldr	r1, [r7, #16]
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80148d2:	461a      	mov	r2, r3
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f001 fd9b 	bl	8016410 <USBD_CtlPrepareRx>
      break;
 80148da:	e076      	b.n	80149ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80148e2:	687a      	ldr	r2, [r7, #4]
 80148e4:	33b0      	adds	r3, #176	; 0xb0
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4413      	add	r3, r2
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	689b      	ldr	r3, [r3, #8]
 80148ee:	683a      	ldr	r2, [r7, #0]
 80148f0:	7850      	ldrb	r0, [r2, #1]
 80148f2:	2200      	movs	r2, #0
 80148f4:	6839      	ldr	r1, [r7, #0]
 80148f6:	4798      	blx	r3
      break;
 80148f8:	e067      	b.n	80149ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	785b      	ldrb	r3, [r3, #1]
 80148fe:	2b0b      	cmp	r3, #11
 8014900:	d851      	bhi.n	80149a6 <USBD_CDC_Setup+0x18a>
 8014902:	a201      	add	r2, pc, #4	; (adr r2, 8014908 <USBD_CDC_Setup+0xec>)
 8014904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014908:	08014939 	.word	0x08014939
 801490c:	080149b5 	.word	0x080149b5
 8014910:	080149a7 	.word	0x080149a7
 8014914:	080149a7 	.word	0x080149a7
 8014918:	080149a7 	.word	0x080149a7
 801491c:	080149a7 	.word	0x080149a7
 8014920:	080149a7 	.word	0x080149a7
 8014924:	080149a7 	.word	0x080149a7
 8014928:	080149a7 	.word	0x080149a7
 801492c:	080149a7 	.word	0x080149a7
 8014930:	08014963 	.word	0x08014963
 8014934:	0801498d 	.word	0x0801498d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801493e:	b2db      	uxtb	r3, r3
 8014940:	2b03      	cmp	r3, #3
 8014942:	d107      	bne.n	8014954 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014944:	f107 030a 	add.w	r3, r7, #10
 8014948:	2202      	movs	r2, #2
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f001 fd33 	bl	80163b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014952:	e032      	b.n	80149ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014954:	6839      	ldr	r1, [r7, #0]
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f001 fcbd 	bl	80162d6 <USBD_CtlError>
            ret = USBD_FAIL;
 801495c:	2303      	movs	r3, #3
 801495e:	75fb      	strb	r3, [r7, #23]
          break;
 8014960:	e02b      	b.n	80149ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b03      	cmp	r3, #3
 801496c:	d107      	bne.n	801497e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801496e:	f107 030d 	add.w	r3, r7, #13
 8014972:	2201      	movs	r2, #1
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f001 fd1e 	bl	80163b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801497c:	e01d      	b.n	80149ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801497e:	6839      	ldr	r1, [r7, #0]
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f001 fca8 	bl	80162d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8014986:	2303      	movs	r3, #3
 8014988:	75fb      	strb	r3, [r7, #23]
          break;
 801498a:	e016      	b.n	80149ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b03      	cmp	r3, #3
 8014996:	d00f      	beq.n	80149b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014998:	6839      	ldr	r1, [r7, #0]
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f001 fc9b 	bl	80162d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80149a0:	2303      	movs	r3, #3
 80149a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80149a4:	e008      	b.n	80149b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80149a6:	6839      	ldr	r1, [r7, #0]
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f001 fc94 	bl	80162d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80149ae:	2303      	movs	r3, #3
 80149b0:	75fb      	strb	r3, [r7, #23]
          break;
 80149b2:	e002      	b.n	80149ba <USBD_CDC_Setup+0x19e>
          break;
 80149b4:	bf00      	nop
 80149b6:	e008      	b.n	80149ca <USBD_CDC_Setup+0x1ae>
          break;
 80149b8:	bf00      	nop
      }
      break;
 80149ba:	e006      	b.n	80149ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80149bc:	6839      	ldr	r1, [r7, #0]
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f001 fc89 	bl	80162d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80149c4:	2303      	movs	r3, #3
 80149c6:	75fb      	strb	r3, [r7, #23]
      break;
 80149c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80149ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3718      	adds	r7, #24
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b084      	sub	sp, #16
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	460b      	mov	r3, r1
 80149de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80149e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	32b0      	adds	r2, #176	; 0xb0
 80149f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d101      	bne.n	80149fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80149fa:	2303      	movs	r3, #3
 80149fc:	e065      	b.n	8014aca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	32b0      	adds	r2, #176	; 0xb0
 8014a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a0e:	78fb      	ldrb	r3, [r7, #3]
 8014a10:	f003 020f 	and.w	r2, r3, #15
 8014a14:	6879      	ldr	r1, [r7, #4]
 8014a16:	4613      	mov	r3, r2
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	4413      	add	r3, r2
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	440b      	add	r3, r1
 8014a20:	3318      	adds	r3, #24
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d02f      	beq.n	8014a88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014a28:	78fb      	ldrb	r3, [r7, #3]
 8014a2a:	f003 020f 	and.w	r2, r3, #15
 8014a2e:	6879      	ldr	r1, [r7, #4]
 8014a30:	4613      	mov	r3, r2
 8014a32:	009b      	lsls	r3, r3, #2
 8014a34:	4413      	add	r3, r2
 8014a36:	009b      	lsls	r3, r3, #2
 8014a38:	440b      	add	r3, r1
 8014a3a:	3318      	adds	r3, #24
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	78fb      	ldrb	r3, [r7, #3]
 8014a40:	f003 010f 	and.w	r1, r3, #15
 8014a44:	68f8      	ldr	r0, [r7, #12]
 8014a46:	460b      	mov	r3, r1
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	440b      	add	r3, r1
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	4403      	add	r3, r0
 8014a50:	3344      	adds	r3, #68	; 0x44
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	fbb2 f1f3 	udiv	r1, r2, r3
 8014a58:	fb01 f303 	mul.w	r3, r1, r3
 8014a5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d112      	bne.n	8014a88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014a62:	78fb      	ldrb	r3, [r7, #3]
 8014a64:	f003 020f 	and.w	r2, r3, #15
 8014a68:	6879      	ldr	r1, [r7, #4]
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	009b      	lsls	r3, r3, #2
 8014a6e:	4413      	add	r3, r2
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	440b      	add	r3, r1
 8014a74:	3318      	adds	r3, #24
 8014a76:	2200      	movs	r2, #0
 8014a78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014a7a:	78f9      	ldrb	r1, [r7, #3]
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	2200      	movs	r2, #0
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f004 ff10 	bl	80198a6 <USBD_LL_Transmit>
 8014a86:	e01f      	b.n	8014ac8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	33b0      	adds	r3, #176	; 0xb0
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4413      	add	r3, r2
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	691b      	ldr	r3, [r3, #16]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d010      	beq.n	8014ac8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	33b0      	adds	r3, #176	; 0xb0
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	4413      	add	r3, r2
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	691b      	ldr	r3, [r3, #16]
 8014ab8:	68ba      	ldr	r2, [r7, #8]
 8014aba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014abe:	68ba      	ldr	r2, [r7, #8]
 8014ac0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014ac4:	78fa      	ldrb	r2, [r7, #3]
 8014ac6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014ac8:	2300      	movs	r3, #0
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3710      	adds	r7, #16
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}

08014ad2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ad2:	b580      	push	{r7, lr}
 8014ad4:	b084      	sub	sp, #16
 8014ad6:	af00      	add	r7, sp, #0
 8014ad8:	6078      	str	r0, [r7, #4]
 8014ada:	460b      	mov	r3, r1
 8014adc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	32b0      	adds	r2, #176	; 0xb0
 8014ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	32b0      	adds	r2, #176	; 0xb0
 8014af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d101      	bne.n	8014b04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014b00:	2303      	movs	r3, #3
 8014b02:	e01a      	b.n	8014b3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014b04:	78fb      	ldrb	r3, [r7, #3]
 8014b06:	4619      	mov	r1, r3
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f004 ff0e 	bl	801992a <USBD_LL_GetRxDataSize>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	33b0      	adds	r3, #176	; 0xb0
 8014b20:	009b      	lsls	r3, r3, #2
 8014b22:	4413      	add	r3, r2
 8014b24:	685b      	ldr	r3, [r3, #4]
 8014b26:	68db      	ldr	r3, [r3, #12]
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014b34:	4611      	mov	r1, r2
 8014b36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014b38:	2300      	movs	r3, #0
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3710      	adds	r7, #16
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}

08014b42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014b42:	b580      	push	{r7, lr}
 8014b44:	b084      	sub	sp, #16
 8014b46:	af00      	add	r7, sp, #0
 8014b48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	32b0      	adds	r2, #176	; 0xb0
 8014b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d101      	bne.n	8014b64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014b60:	2303      	movs	r3, #3
 8014b62:	e025      	b.n	8014bb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	33b0      	adds	r3, #176	; 0xb0
 8014b6e:	009b      	lsls	r3, r3, #2
 8014b70:	4413      	add	r3, r2
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d01a      	beq.n	8014bae <USBD_CDC_EP0_RxReady+0x6c>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014b7e:	2bff      	cmp	r3, #255	; 0xff
 8014b80:	d015      	beq.n	8014bae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	33b0      	adds	r3, #176	; 0xb0
 8014b8c:	009b      	lsls	r3, r3, #2
 8014b8e:	4413      	add	r3, r2
 8014b90:	685b      	ldr	r3, [r3, #4]
 8014b92:	689b      	ldr	r3, [r3, #8]
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014b9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ba2:	b292      	uxth	r2, r2
 8014ba4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	22ff      	movs	r2, #255	; 0xff
 8014baa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bc0:	2182      	movs	r1, #130	; 0x82
 8014bc2:	4818      	ldr	r0, [pc, #96]	; (8014c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bc4:	f000 fd4f 	bl	8015666 <USBD_GetEpDesc>
 8014bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bca:	2101      	movs	r1, #1
 8014bcc:	4815      	ldr	r0, [pc, #84]	; (8014c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bce:	f000 fd4a 	bl	8015666 <USBD_GetEpDesc>
 8014bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bd4:	2181      	movs	r1, #129	; 0x81
 8014bd6:	4813      	ldr	r0, [pc, #76]	; (8014c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014bd8:	f000 fd45 	bl	8015666 <USBD_GetEpDesc>
 8014bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d002      	beq.n	8014bea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	2210      	movs	r2, #16
 8014be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d006      	beq.n	8014bfe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bf8:	711a      	strb	r2, [r3, #4]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d006      	beq.n	8014c12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	2200      	movs	r2, #0
 8014c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c0c:	711a      	strb	r2, [r3, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2243      	movs	r2, #67	; 0x43
 8014c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c18:	4b02      	ldr	r3, [pc, #8]	; (8014c24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	3718      	adds	r7, #24
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}
 8014c22:	bf00      	nop
 8014c24:	24000054 	.word	0x24000054

08014c28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c30:	2182      	movs	r1, #130	; 0x82
 8014c32:	4818      	ldr	r0, [pc, #96]	; (8014c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c34:	f000 fd17 	bl	8015666 <USBD_GetEpDesc>
 8014c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c3a:	2101      	movs	r1, #1
 8014c3c:	4815      	ldr	r0, [pc, #84]	; (8014c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c3e:	f000 fd12 	bl	8015666 <USBD_GetEpDesc>
 8014c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c44:	2181      	movs	r1, #129	; 0x81
 8014c46:	4813      	ldr	r0, [pc, #76]	; (8014c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014c48:	f000 fd0d 	bl	8015666 <USBD_GetEpDesc>
 8014c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d002      	beq.n	8014c5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	2210      	movs	r2, #16
 8014c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d006      	beq.n	8014c6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	2200      	movs	r2, #0
 8014c64:	711a      	strb	r2, [r3, #4]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f042 0202 	orr.w	r2, r2, #2
 8014c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d006      	beq.n	8014c82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2200      	movs	r2, #0
 8014c78:	711a      	strb	r2, [r3, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f042 0202 	orr.w	r2, r2, #2
 8014c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2243      	movs	r2, #67	; 0x43
 8014c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c88:	4b02      	ldr	r3, [pc, #8]	; (8014c94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3718      	adds	r7, #24
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	24000054 	.word	0x24000054

08014c98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b086      	sub	sp, #24
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ca0:	2182      	movs	r1, #130	; 0x82
 8014ca2:	4818      	ldr	r0, [pc, #96]	; (8014d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014ca4:	f000 fcdf 	bl	8015666 <USBD_GetEpDesc>
 8014ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014caa:	2101      	movs	r1, #1
 8014cac:	4815      	ldr	r0, [pc, #84]	; (8014d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014cae:	f000 fcda 	bl	8015666 <USBD_GetEpDesc>
 8014cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cb4:	2181      	movs	r1, #129	; 0x81
 8014cb6:	4813      	ldr	r0, [pc, #76]	; (8014d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014cb8:	f000 fcd5 	bl	8015666 <USBD_GetEpDesc>
 8014cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d002      	beq.n	8014cca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	2210      	movs	r2, #16
 8014cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cca:	693b      	ldr	r3, [r7, #16]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d006      	beq.n	8014cde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cd0:	693b      	ldr	r3, [r7, #16]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cd8:	711a      	strb	r2, [r3, #4]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d006      	beq.n	8014cf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cec:	711a      	strb	r2, [r3, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	2243      	movs	r2, #67	; 0x43
 8014cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cf8:	4b02      	ldr	r3, [pc, #8]	; (8014d04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3718      	adds	r7, #24
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	24000054 	.word	0x24000054

08014d08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b083      	sub	sp, #12
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	220a      	movs	r2, #10
 8014d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014d16:	4b03      	ldr	r3, [pc, #12]	; (8014d24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	370c      	adds	r7, #12
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr
 8014d24:	24000010 	.word	0x24000010

08014d28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014d28:	b480      	push	{r7}
 8014d2a:	b083      	sub	sp, #12
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014d32:	683b      	ldr	r3, [r7, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d101      	bne.n	8014d3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014d38:	2303      	movs	r3, #3
 8014d3a:	e009      	b.n	8014d50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	33b0      	adds	r3, #176	; 0xb0
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	4413      	add	r3, r2
 8014d4a:	683a      	ldr	r2, [r7, #0]
 8014d4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014d4e:	2300      	movs	r3, #0
}
 8014d50:	4618      	mov	r0, r3
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014d5c:	b480      	push	{r7}
 8014d5e:	b087      	sub	sp, #28
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	60f8      	str	r0, [r7, #12]
 8014d64:	60b9      	str	r1, [r7, #8]
 8014d66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	32b0      	adds	r2, #176	; 0xb0
 8014d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d101      	bne.n	8014d82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	e008      	b.n	8014d94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	68ba      	ldr	r2, [r7, #8]
 8014d86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	371c      	adds	r7, #28
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr

08014da0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b085      	sub	sp, #20
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	32b0      	adds	r2, #176	; 0xb0
 8014db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014db8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d101      	bne.n	8014dc4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014dc0:	2303      	movs	r3, #3
 8014dc2:	e004      	b.n	8014dce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	683a      	ldr	r2, [r7, #0]
 8014dc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3714      	adds	r7, #20
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd8:	4770      	bx	lr
	...

08014ddc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	32b0      	adds	r2, #176	; 0xb0
 8014dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014df4:	2301      	movs	r3, #1
 8014df6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	e025      	b.n	8014e4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d11f      	bne.n	8014e4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2201      	movs	r2, #1
 8014e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014e14:	4b10      	ldr	r3, [pc, #64]	; (8014e58 <USBD_CDC_TransmitPacket+0x7c>)
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	f003 020f 	and.w	r2, r3, #15
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	4613      	mov	r3, r2
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4413      	add	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4403      	add	r3, r0
 8014e2e:	3318      	adds	r3, #24
 8014e30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <USBD_CDC_TransmitPacket+0x7c>)
 8014e34:	7819      	ldrb	r1, [r3, #0]
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f004 fd2f 	bl	80198a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3710      	adds	r7, #16
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	24000097 	.word	0x24000097

08014e5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	32b0      	adds	r2, #176	; 0xb0
 8014e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	32b0      	adds	r2, #176	; 0xb0
 8014e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d101      	bne.n	8014e8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014e86:	2303      	movs	r3, #3
 8014e88:	e018      	b.n	8014ebc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	7c1b      	ldrb	r3, [r3, #16]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d10a      	bne.n	8014ea8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014e92:	4b0c      	ldr	r3, [pc, #48]	; (8014ec4 <USBD_CDC_ReceivePacket+0x68>)
 8014e94:	7819      	ldrb	r1, [r3, #0]
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f004 fd21 	bl	80198e8 <USBD_LL_PrepareReceive>
 8014ea6:	e008      	b.n	8014eba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014ea8:	4b06      	ldr	r3, [pc, #24]	; (8014ec4 <USBD_CDC_ReceivePacket+0x68>)
 8014eaa:	7819      	ldrb	r1, [r3, #0]
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014eb2:	2340      	movs	r3, #64	; 0x40
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f004 fd17 	bl	80198e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014eba:	2300      	movs	r3, #0
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3710      	adds	r7, #16
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	24000098 	.word	0x24000098

08014ec8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	4613      	mov	r3, r2
 8014ed4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d101      	bne.n	8014ee0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014edc:	2303      	movs	r3, #3
 8014ede:	e01f      	b.n	8014f20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2200      	movs	r2, #0
 8014eec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d003      	beq.n	8014f06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	68ba      	ldr	r2, [r7, #8]
 8014f02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	2201      	movs	r2, #1
 8014f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	79fa      	ldrb	r2, [r7, #7]
 8014f12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014f14:	68f8      	ldr	r0, [r7, #12]
 8014f16:	f004 fb8b 	bl	8019630 <USBD_LL_Init>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
 8014f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014f32:	2300      	movs	r3, #0
 8014f34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d101      	bne.n	8014f40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f3c:	2303      	movs	r3, #3
 8014f3e:	e025      	b.n	8014f8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	683a      	ldr	r2, [r7, #0]
 8014f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	32ae      	adds	r2, #174	; 0xae
 8014f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d00f      	beq.n	8014f7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	32ae      	adds	r2, #174	; 0xae
 8014f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f6c:	f107 020e 	add.w	r2, r7, #14
 8014f70:	4610      	mov	r0, r2
 8014f72:	4798      	blx	r3
 8014f74:	4602      	mov	r2, r0
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014f82:	1c5a      	adds	r2, r3, #1
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014f8a:	2300      	movs	r3, #0
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	3710      	adds	r7, #16
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}

08014f94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f004 fb99 	bl	80196d4 <USBD_LL_Start>
 8014fa2:	4603      	mov	r3, r0
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}

08014fac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014fac:	b480      	push	{r7}
 8014fae:	b083      	sub	sp, #12
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014fb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	370c      	adds	r7, #12
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc0:	4770      	bx	lr

08014fc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014fc2:	b580      	push	{r7, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	af00      	add	r7, sp, #0
 8014fc8:	6078      	str	r0, [r7, #4]
 8014fca:	460b      	mov	r3, r1
 8014fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d009      	beq.n	8014ff0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	78fa      	ldrb	r2, [r7, #3]
 8014fe6:	4611      	mov	r1, r2
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	4798      	blx	r3
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	3710      	adds	r7, #16
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b084      	sub	sp, #16
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
 8015002:	460b      	mov	r3, r1
 8015004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015006:	2300      	movs	r3, #0
 8015008:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	78fa      	ldrb	r2, [r7, #3]
 8015014:	4611      	mov	r1, r2
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	4798      	blx	r3
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d001      	beq.n	8015024 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015020:	2303      	movs	r3, #3
 8015022:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015024:	7bfb      	ldrb	r3, [r7, #15]
}
 8015026:	4618      	mov	r0, r3
 8015028:	3710      	adds	r7, #16
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}

0801502e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801502e:	b580      	push	{r7, lr}
 8015030:	b084      	sub	sp, #16
 8015032:	af00      	add	r7, sp, #0
 8015034:	6078      	str	r0, [r7, #4]
 8015036:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801503e:	6839      	ldr	r1, [r7, #0]
 8015040:	4618      	mov	r0, r3
 8015042:	f001 f90e 	bl	8016262 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2201      	movs	r2, #1
 801504a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015054:	461a      	mov	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015062:	f003 031f 	and.w	r3, r3, #31
 8015066:	2b02      	cmp	r3, #2
 8015068:	d01a      	beq.n	80150a0 <USBD_LL_SetupStage+0x72>
 801506a:	2b02      	cmp	r3, #2
 801506c:	d822      	bhi.n	80150b4 <USBD_LL_SetupStage+0x86>
 801506e:	2b00      	cmp	r3, #0
 8015070:	d002      	beq.n	8015078 <USBD_LL_SetupStage+0x4a>
 8015072:	2b01      	cmp	r3, #1
 8015074:	d00a      	beq.n	801508c <USBD_LL_SetupStage+0x5e>
 8015076:	e01d      	b.n	80150b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801507e:	4619      	mov	r1, r3
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fb65 	bl	8015750 <USBD_StdDevReq>
 8015086:	4603      	mov	r3, r0
 8015088:	73fb      	strb	r3, [r7, #15]
      break;
 801508a:	e020      	b.n	80150ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015092:	4619      	mov	r1, r3
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f000 fbcd 	bl	8015834 <USBD_StdItfReq>
 801509a:	4603      	mov	r3, r0
 801509c:	73fb      	strb	r3, [r7, #15]
      break;
 801509e:	e016      	b.n	80150ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150a6:	4619      	mov	r1, r3
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	f000 fc2f 	bl	801590c <USBD_StdEPReq>
 80150ae:	4603      	mov	r3, r0
 80150b0:	73fb      	strb	r3, [r7, #15]
      break;
 80150b2:	e00c      	b.n	80150ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80150ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	4619      	mov	r1, r3
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f004 fb66 	bl	8019794 <USBD_LL_StallEP>
 80150c8:	4603      	mov	r3, r0
 80150ca:	73fb      	strb	r3, [r7, #15]
      break;
 80150cc:	bf00      	nop
  }

  return ret;
 80150ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b086      	sub	sp, #24
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	460b      	mov	r3, r1
 80150e2:	607a      	str	r2, [r7, #4]
 80150e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80150e6:	2300      	movs	r3, #0
 80150e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80150ea:	7afb      	ldrb	r3, [r7, #11]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d16e      	bne.n	80151ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80150f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80150fe:	2b03      	cmp	r3, #3
 8015100:	f040 8098 	bne.w	8015234 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	689a      	ldr	r2, [r3, #8]
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	429a      	cmp	r2, r3
 801510e:	d913      	bls.n	8015138 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	689a      	ldr	r2, [r3, #8]
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	1ad2      	subs	r2, r2, r3
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	68da      	ldr	r2, [r3, #12]
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	4293      	cmp	r3, r2
 8015128:	bf28      	it	cs
 801512a:	4613      	movcs	r3, r2
 801512c:	461a      	mov	r2, r3
 801512e:	6879      	ldr	r1, [r7, #4]
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	f001 f98a 	bl	801644a <USBD_CtlContinueRx>
 8015136:	e07d      	b.n	8015234 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801513e:	f003 031f 	and.w	r3, r3, #31
 8015142:	2b02      	cmp	r3, #2
 8015144:	d014      	beq.n	8015170 <USBD_LL_DataOutStage+0x98>
 8015146:	2b02      	cmp	r3, #2
 8015148:	d81d      	bhi.n	8015186 <USBD_LL_DataOutStage+0xae>
 801514a:	2b00      	cmp	r3, #0
 801514c:	d002      	beq.n	8015154 <USBD_LL_DataOutStage+0x7c>
 801514e:	2b01      	cmp	r3, #1
 8015150:	d003      	beq.n	801515a <USBD_LL_DataOutStage+0x82>
 8015152:	e018      	b.n	8015186 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015154:	2300      	movs	r3, #0
 8015156:	75bb      	strb	r3, [r7, #22]
            break;
 8015158:	e018      	b.n	801518c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015160:	b2db      	uxtb	r3, r3
 8015162:	4619      	mov	r1, r3
 8015164:	68f8      	ldr	r0, [r7, #12]
 8015166:	f000 fa64 	bl	8015632 <USBD_CoreFindIF>
 801516a:	4603      	mov	r3, r0
 801516c:	75bb      	strb	r3, [r7, #22]
            break;
 801516e:	e00d      	b.n	801518c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015176:	b2db      	uxtb	r3, r3
 8015178:	4619      	mov	r1, r3
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f000 fa66 	bl	801564c <USBD_CoreFindEP>
 8015180:	4603      	mov	r3, r0
 8015182:	75bb      	strb	r3, [r7, #22]
            break;
 8015184:	e002      	b.n	801518c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015186:	2300      	movs	r3, #0
 8015188:	75bb      	strb	r3, [r7, #22]
            break;
 801518a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801518c:	7dbb      	ldrb	r3, [r7, #22]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d119      	bne.n	80151c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015198:	b2db      	uxtb	r3, r3
 801519a:	2b03      	cmp	r3, #3
 801519c:	d113      	bne.n	80151c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801519e:	7dba      	ldrb	r2, [r7, #22]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	32ae      	adds	r2, #174	; 0xae
 80151a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a8:	691b      	ldr	r3, [r3, #16]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00b      	beq.n	80151c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80151ae:	7dba      	ldrb	r2, [r7, #22]
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80151b6:	7dba      	ldrb	r2, [r7, #22]
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	32ae      	adds	r2, #174	; 0xae
 80151bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c0:	691b      	ldr	r3, [r3, #16]
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f001 f950 	bl	801646c <USBD_CtlSendStatus>
 80151cc:	e032      	b.n	8015234 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80151ce:	7afb      	ldrb	r3, [r7, #11]
 80151d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80151d4:	b2db      	uxtb	r3, r3
 80151d6:	4619      	mov	r1, r3
 80151d8:	68f8      	ldr	r0, [r7, #12]
 80151da:	f000 fa37 	bl	801564c <USBD_CoreFindEP>
 80151de:	4603      	mov	r3, r0
 80151e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151e2:	7dbb      	ldrb	r3, [r7, #22]
 80151e4:	2bff      	cmp	r3, #255	; 0xff
 80151e6:	d025      	beq.n	8015234 <USBD_LL_DataOutStage+0x15c>
 80151e8:	7dbb      	ldrb	r3, [r7, #22]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d122      	bne.n	8015234 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	2b03      	cmp	r3, #3
 80151f8:	d117      	bne.n	801522a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80151fa:	7dba      	ldrb	r2, [r7, #22]
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	32ae      	adds	r2, #174	; 0xae
 8015200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015204:	699b      	ldr	r3, [r3, #24]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d00f      	beq.n	801522a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801520a:	7dba      	ldrb	r2, [r7, #22]
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015212:	7dba      	ldrb	r2, [r7, #22]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	32ae      	adds	r2, #174	; 0xae
 8015218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801521c:	699b      	ldr	r3, [r3, #24]
 801521e:	7afa      	ldrb	r2, [r7, #11]
 8015220:	4611      	mov	r1, r2
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	4798      	blx	r3
 8015226:	4603      	mov	r3, r0
 8015228:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801522a:	7dfb      	ldrb	r3, [r7, #23]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d001      	beq.n	8015234 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015230:	7dfb      	ldrb	r3, [r7, #23]
 8015232:	e000      	b.n	8015236 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015234:	2300      	movs	r3, #0
}
 8015236:	4618      	mov	r0, r3
 8015238:	3718      	adds	r7, #24
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}

0801523e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801523e:	b580      	push	{r7, lr}
 8015240:	b086      	sub	sp, #24
 8015242:	af00      	add	r7, sp, #0
 8015244:	60f8      	str	r0, [r7, #12]
 8015246:	460b      	mov	r3, r1
 8015248:	607a      	str	r2, [r7, #4]
 801524a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801524c:	7afb      	ldrb	r3, [r7, #11]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d16f      	bne.n	8015332 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	3314      	adds	r3, #20
 8015256:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801525e:	2b02      	cmp	r3, #2
 8015260:	d15a      	bne.n	8015318 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	689a      	ldr	r2, [r3, #8]
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	68db      	ldr	r3, [r3, #12]
 801526a:	429a      	cmp	r2, r3
 801526c:	d914      	bls.n	8015298 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	689a      	ldr	r2, [r3, #8]
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	68db      	ldr	r3, [r3, #12]
 8015276:	1ad2      	subs	r2, r2, r3
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	461a      	mov	r2, r3
 8015282:	6879      	ldr	r1, [r7, #4]
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	f001 f8b2 	bl	80163ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801528a:	2300      	movs	r3, #0
 801528c:	2200      	movs	r2, #0
 801528e:	2100      	movs	r1, #0
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f004 fb29 	bl	80198e8 <USBD_LL_PrepareReceive>
 8015296:	e03f      	b.n	8015318 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	68da      	ldr	r2, [r3, #12]
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d11c      	bne.n	80152de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	685a      	ldr	r2, [r3, #4]
 80152a8:	693b      	ldr	r3, [r7, #16]
 80152aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d316      	bcc.n	80152de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	685a      	ldr	r2, [r3, #4]
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80152ba:	429a      	cmp	r2, r3
 80152bc:	d20f      	bcs.n	80152de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80152be:	2200      	movs	r2, #0
 80152c0:	2100      	movs	r1, #0
 80152c2:	68f8      	ldr	r0, [r7, #12]
 80152c4:	f001 f893 	bl	80163ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152d0:	2300      	movs	r3, #0
 80152d2:	2200      	movs	r2, #0
 80152d4:	2100      	movs	r1, #0
 80152d6:	68f8      	ldr	r0, [r7, #12]
 80152d8:	f004 fb06 	bl	80198e8 <USBD_LL_PrepareReceive>
 80152dc:	e01c      	b.n	8015318 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152e4:	b2db      	uxtb	r3, r3
 80152e6:	2b03      	cmp	r3, #3
 80152e8:	d10f      	bne.n	801530a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f0:	68db      	ldr	r3, [r3, #12]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d009      	beq.n	801530a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015304:	68db      	ldr	r3, [r3, #12]
 8015306:	68f8      	ldr	r0, [r7, #12]
 8015308:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801530a:	2180      	movs	r1, #128	; 0x80
 801530c:	68f8      	ldr	r0, [r7, #12]
 801530e:	f004 fa41 	bl	8019794 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015312:	68f8      	ldr	r0, [r7, #12]
 8015314:	f001 f8bd 	bl	8016492 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801531e:	2b00      	cmp	r3, #0
 8015320:	d03a      	beq.n	8015398 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015322:	68f8      	ldr	r0, [r7, #12]
 8015324:	f7ff fe42 	bl	8014fac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2200      	movs	r2, #0
 801532c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015330:	e032      	b.n	8015398 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015332:	7afb      	ldrb	r3, [r7, #11]
 8015334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015338:	b2db      	uxtb	r3, r3
 801533a:	4619      	mov	r1, r3
 801533c:	68f8      	ldr	r0, [r7, #12]
 801533e:	f000 f985 	bl	801564c <USBD_CoreFindEP>
 8015342:	4603      	mov	r3, r0
 8015344:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015346:	7dfb      	ldrb	r3, [r7, #23]
 8015348:	2bff      	cmp	r3, #255	; 0xff
 801534a:	d025      	beq.n	8015398 <USBD_LL_DataInStage+0x15a>
 801534c:	7dfb      	ldrb	r3, [r7, #23]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d122      	bne.n	8015398 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015358:	b2db      	uxtb	r3, r3
 801535a:	2b03      	cmp	r3, #3
 801535c:	d11c      	bne.n	8015398 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801535e:	7dfa      	ldrb	r2, [r7, #23]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	32ae      	adds	r2, #174	; 0xae
 8015364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015368:	695b      	ldr	r3, [r3, #20]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d014      	beq.n	8015398 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801536e:	7dfa      	ldrb	r2, [r7, #23]
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015376:	7dfa      	ldrb	r2, [r7, #23]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	32ae      	adds	r2, #174	; 0xae
 801537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015380:	695b      	ldr	r3, [r3, #20]
 8015382:	7afa      	ldrb	r2, [r7, #11]
 8015384:	4611      	mov	r1, r2
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	4798      	blx	r3
 801538a:	4603      	mov	r3, r0
 801538c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801538e:	7dbb      	ldrb	r3, [r7, #22]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d001      	beq.n	8015398 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015394:	7dbb      	ldrb	r3, [r7, #22]
 8015396:	e000      	b.n	801539a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	3718      	adds	r7, #24
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80153aa:	2300      	movs	r3, #0
 80153ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2201      	movs	r2, #1
 80153b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2200      	movs	r2, #0
 80153ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2200      	movs	r2, #0
 80153c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2200      	movs	r2, #0
 80153c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2200      	movs	r2, #0
 80153d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d014      	beq.n	8015408 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00e      	beq.n	8015408 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	687a      	ldr	r2, [r7, #4]
 80153f4:	6852      	ldr	r2, [r2, #4]
 80153f6:	b2d2      	uxtb	r2, r2
 80153f8:	4611      	mov	r1, r2
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	4798      	blx	r3
 80153fe:	4603      	mov	r3, r0
 8015400:	2b00      	cmp	r3, #0
 8015402:	d001      	beq.n	8015408 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015404:	2303      	movs	r3, #3
 8015406:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015408:	2340      	movs	r3, #64	; 0x40
 801540a:	2200      	movs	r2, #0
 801540c:	2100      	movs	r1, #0
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f004 f97b 	bl	801970a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2201      	movs	r2, #1
 8015418:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2240      	movs	r2, #64	; 0x40
 8015420:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015424:	2340      	movs	r3, #64	; 0x40
 8015426:	2200      	movs	r2, #0
 8015428:	2180      	movs	r1, #128	; 0x80
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f004 f96d 	bl	801970a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2201      	movs	r2, #1
 8015434:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2240      	movs	r2, #64	; 0x40
 801543a:	621a      	str	r2, [r3, #32]

  return ret;
 801543c:	7bfb      	ldrb	r3, [r7, #15]
}
 801543e:	4618      	mov	r0, r3
 8015440:	3710      	adds	r7, #16
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}

08015446 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015446:	b480      	push	{r7}
 8015448:	b083      	sub	sp, #12
 801544a:	af00      	add	r7, sp, #0
 801544c:	6078      	str	r0, [r7, #4]
 801544e:	460b      	mov	r3, r1
 8015450:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	78fa      	ldrb	r2, [r7, #3]
 8015456:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	370c      	adds	r7, #12
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr

08015466 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015466:	b480      	push	{r7}
 8015468:	b083      	sub	sp, #12
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015474:	b2db      	uxtb	r3, r3
 8015476:	2b04      	cmp	r3, #4
 8015478:	d006      	beq.n	8015488 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015480:	b2da      	uxtb	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2204      	movs	r2, #4
 801548c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	370c      	adds	r7, #12
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801549e:	b480      	push	{r7}
 80154a0:	b083      	sub	sp, #12
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154ac:	b2db      	uxtb	r3, r3
 80154ae:	2b04      	cmp	r3, #4
 80154b0:	d106      	bne.n	80154c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80154b8:	b2da      	uxtb	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80154c0:	2300      	movs	r3, #0
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr

080154ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b082      	sub	sp, #8
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	2b03      	cmp	r3, #3
 80154e0:	d110      	bne.n	8015504 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00b      	beq.n	8015504 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f2:	69db      	ldr	r3, [r3, #28]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d005      	beq.n	8015504 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154fe:	69db      	ldr	r3, [r3, #28]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015504:	2300      	movs	r3, #0
}
 8015506:	4618      	mov	r0, r3
 8015508:	3708      	adds	r7, #8
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}

0801550e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801550e:	b580      	push	{r7, lr}
 8015510:	b082      	sub	sp, #8
 8015512:	af00      	add	r7, sp, #0
 8015514:	6078      	str	r0, [r7, #4]
 8015516:	460b      	mov	r3, r1
 8015518:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	32ae      	adds	r2, #174	; 0xae
 8015524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d101      	bne.n	8015530 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801552c:	2303      	movs	r3, #3
 801552e:	e01c      	b.n	801556a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b03      	cmp	r3, #3
 801553a:	d115      	bne.n	8015568 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	32ae      	adds	r2, #174	; 0xae
 8015546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554a:	6a1b      	ldr	r3, [r3, #32]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d00b      	beq.n	8015568 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	32ae      	adds	r2, #174	; 0xae
 801555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801555e:	6a1b      	ldr	r3, [r3, #32]
 8015560:	78fa      	ldrb	r2, [r7, #3]
 8015562:	4611      	mov	r1, r2
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015568:	2300      	movs	r3, #0
}
 801556a:	4618      	mov	r0, r3
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}

08015572 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015572:	b580      	push	{r7, lr}
 8015574:	b082      	sub	sp, #8
 8015576:	af00      	add	r7, sp, #0
 8015578:	6078      	str	r0, [r7, #4]
 801557a:	460b      	mov	r3, r1
 801557c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	32ae      	adds	r2, #174	; 0xae
 8015588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015590:	2303      	movs	r3, #3
 8015592:	e01c      	b.n	80155ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b03      	cmp	r3, #3
 801559e:	d115      	bne.n	80155cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	32ae      	adds	r2, #174	; 0xae
 80155aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d00b      	beq.n	80155cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	32ae      	adds	r2, #174	; 0xae
 80155be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155c4:	78fa      	ldrb	r2, [r7, #3]
 80155c6:	4611      	mov	r1, r2
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3708      	adds	r7, #8
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80155d6:	b480      	push	{r7}
 80155d8:	b083      	sub	sp, #12
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80155de:	2300      	movs	r3, #0
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	370c      	adds	r7, #12
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr

080155ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80155f4:	2300      	movs	r3, #0
 80155f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2201      	movs	r2, #1
 80155fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015606:	2b00      	cmp	r3, #0
 8015608:	d00e      	beq.n	8015628 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	6852      	ldr	r2, [r2, #4]
 8015616:	b2d2      	uxtb	r2, r2
 8015618:	4611      	mov	r1, r2
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	4798      	blx	r3
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015624:	2303      	movs	r3, #3
 8015626:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015628:	7bfb      	ldrb	r3, [r7, #15]
}
 801562a:	4618      	mov	r0, r3
 801562c:	3710      	adds	r7, #16
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015632:	b480      	push	{r7}
 8015634:	b083      	sub	sp, #12
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
 801563a:	460b      	mov	r3, r1
 801563c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801563e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015640:	4618      	mov	r0, r3
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015658:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801565a:	4618      	mov	r0, r3
 801565c:	370c      	adds	r7, #12
 801565e:	46bd      	mov	sp, r7
 8015660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015664:	4770      	bx	lr

08015666 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b086      	sub	sp, #24
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
 801566e:	460b      	mov	r3, r1
 8015670:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	885b      	ldrh	r3, [r3, #2]
 8015682:	b29a      	uxth	r2, r3
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	b29b      	uxth	r3, r3
 801568a:	429a      	cmp	r2, r3
 801568c:	d920      	bls.n	80156d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	b29b      	uxth	r3, r3
 8015694:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015696:	e013      	b.n	80156c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015698:	f107 030a 	add.w	r3, r7, #10
 801569c:	4619      	mov	r1, r3
 801569e:	6978      	ldr	r0, [r7, #20]
 80156a0:	f000 f81b 	bl	80156da <USBD_GetNextDesc>
 80156a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	785b      	ldrb	r3, [r3, #1]
 80156aa:	2b05      	cmp	r3, #5
 80156ac:	d108      	bne.n	80156c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	789b      	ldrb	r3, [r3, #2]
 80156b6:	78fa      	ldrb	r2, [r7, #3]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d008      	beq.n	80156ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80156bc:	2300      	movs	r3, #0
 80156be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	885b      	ldrh	r3, [r3, #2]
 80156c4:	b29a      	uxth	r2, r3
 80156c6:	897b      	ldrh	r3, [r7, #10]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d8e5      	bhi.n	8015698 <USBD_GetEpDesc+0x32>
 80156cc:	e000      	b.n	80156d0 <USBD_GetEpDesc+0x6a>
          break;
 80156ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80156d0:	693b      	ldr	r3, [r7, #16]
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3718      	adds	r7, #24
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}

080156da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80156da:	b480      	push	{r7}
 80156dc:	b085      	sub	sp, #20
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
 80156e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	881a      	ldrh	r2, [r3, #0]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	b29b      	uxth	r3, r3
 80156f2:	4413      	add	r3, r2
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	781b      	ldrb	r3, [r3, #0]
 80156fe:	461a      	mov	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4413      	add	r3, r2
 8015704:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015706:	68fb      	ldr	r3, [r7, #12]
}
 8015708:	4618      	mov	r0, r3
 801570a:	3714      	adds	r7, #20
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr

08015714 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015714:	b480      	push	{r7}
 8015716:	b087      	sub	sp, #28
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	3301      	adds	r3, #1
 801572a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015732:	8a3b      	ldrh	r3, [r7, #16]
 8015734:	021b      	lsls	r3, r3, #8
 8015736:	b21a      	sxth	r2, r3
 8015738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801573c:	4313      	orrs	r3, r2
 801573e:	b21b      	sxth	r3, r3
 8015740:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015742:	89fb      	ldrh	r3, [r7, #14]
}
 8015744:	4618      	mov	r0, r3
 8015746:	371c      	adds	r7, #28
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b084      	sub	sp, #16
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801575a:	2300      	movs	r3, #0
 801575c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	781b      	ldrb	r3, [r3, #0]
 8015762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015766:	2b40      	cmp	r3, #64	; 0x40
 8015768:	d005      	beq.n	8015776 <USBD_StdDevReq+0x26>
 801576a:	2b40      	cmp	r3, #64	; 0x40
 801576c:	d857      	bhi.n	801581e <USBD_StdDevReq+0xce>
 801576e:	2b00      	cmp	r3, #0
 8015770:	d00f      	beq.n	8015792 <USBD_StdDevReq+0x42>
 8015772:	2b20      	cmp	r3, #32
 8015774:	d153      	bne.n	801581e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	32ae      	adds	r2, #174	; 0xae
 8015780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015784:	689b      	ldr	r3, [r3, #8]
 8015786:	6839      	ldr	r1, [r7, #0]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	4798      	blx	r3
 801578c:	4603      	mov	r3, r0
 801578e:	73fb      	strb	r3, [r7, #15]
      break;
 8015790:	e04a      	b.n	8015828 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	785b      	ldrb	r3, [r3, #1]
 8015796:	2b09      	cmp	r3, #9
 8015798:	d83b      	bhi.n	8015812 <USBD_StdDevReq+0xc2>
 801579a:	a201      	add	r2, pc, #4	; (adr r2, 80157a0 <USBD_StdDevReq+0x50>)
 801579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a0:	080157f5 	.word	0x080157f5
 80157a4:	08015809 	.word	0x08015809
 80157a8:	08015813 	.word	0x08015813
 80157ac:	080157ff 	.word	0x080157ff
 80157b0:	08015813 	.word	0x08015813
 80157b4:	080157d3 	.word	0x080157d3
 80157b8:	080157c9 	.word	0x080157c9
 80157bc:	08015813 	.word	0x08015813
 80157c0:	080157eb 	.word	0x080157eb
 80157c4:	080157dd 	.word	0x080157dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80157c8:	6839      	ldr	r1, [r7, #0]
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f000 fa3c 	bl	8015c48 <USBD_GetDescriptor>
          break;
 80157d0:	e024      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80157d2:	6839      	ldr	r1, [r7, #0]
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	f000 fba1 	bl	8015f1c <USBD_SetAddress>
          break;
 80157da:	e01f      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80157dc:	6839      	ldr	r1, [r7, #0]
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	f000 fbe0 	bl	8015fa4 <USBD_SetConfig>
 80157e4:	4603      	mov	r3, r0
 80157e6:	73fb      	strb	r3, [r7, #15]
          break;
 80157e8:	e018      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157ea:	6839      	ldr	r1, [r7, #0]
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 fc83 	bl	80160f8 <USBD_GetConfig>
          break;
 80157f2:	e013      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157f4:	6839      	ldr	r1, [r7, #0]
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f000 fcb4 	bl	8016164 <USBD_GetStatus>
          break;
 80157fc:	e00e      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157fe:	6839      	ldr	r1, [r7, #0]
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fce3 	bl	80161cc <USBD_SetFeature>
          break;
 8015806:	e009      	b.n	801581c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015808:	6839      	ldr	r1, [r7, #0]
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 fd07 	bl	801621e <USBD_ClrFeature>
          break;
 8015810:	e004      	b.n	801581c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f000 fd5e 	bl	80162d6 <USBD_CtlError>
          break;
 801581a:	bf00      	nop
      }
      break;
 801581c:	e004      	b.n	8015828 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f000 fd58 	bl	80162d6 <USBD_CtlError>
      break;
 8015826:	bf00      	nop
  }

  return ret;
 8015828:	7bfb      	ldrb	r3, [r7, #15]
}
 801582a:	4618      	mov	r0, r3
 801582c:	3710      	adds	r7, #16
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop

08015834 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801584a:	2b40      	cmp	r3, #64	; 0x40
 801584c:	d005      	beq.n	801585a <USBD_StdItfReq+0x26>
 801584e:	2b40      	cmp	r3, #64	; 0x40
 8015850:	d852      	bhi.n	80158f8 <USBD_StdItfReq+0xc4>
 8015852:	2b00      	cmp	r3, #0
 8015854:	d001      	beq.n	801585a <USBD_StdItfReq+0x26>
 8015856:	2b20      	cmp	r3, #32
 8015858:	d14e      	bne.n	80158f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015860:	b2db      	uxtb	r3, r3
 8015862:	3b01      	subs	r3, #1
 8015864:	2b02      	cmp	r3, #2
 8015866:	d840      	bhi.n	80158ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	889b      	ldrh	r3, [r3, #4]
 801586c:	b2db      	uxtb	r3, r3
 801586e:	2b01      	cmp	r3, #1
 8015870:	d836      	bhi.n	80158e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	889b      	ldrh	r3, [r3, #4]
 8015876:	b2db      	uxtb	r3, r3
 8015878:	4619      	mov	r1, r3
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f7ff fed9 	bl	8015632 <USBD_CoreFindIF>
 8015880:	4603      	mov	r3, r0
 8015882:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015884:	7bbb      	ldrb	r3, [r7, #14]
 8015886:	2bff      	cmp	r3, #255	; 0xff
 8015888:	d01d      	beq.n	80158c6 <USBD_StdItfReq+0x92>
 801588a:	7bbb      	ldrb	r3, [r7, #14]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d11a      	bne.n	80158c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015890:	7bba      	ldrb	r2, [r7, #14]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	32ae      	adds	r2, #174	; 0xae
 8015896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801589a:	689b      	ldr	r3, [r3, #8]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d00f      	beq.n	80158c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80158a0:	7bba      	ldrb	r2, [r7, #14]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80158a8:	7bba      	ldrb	r2, [r7, #14]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	32ae      	adds	r2, #174	; 0xae
 80158ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158b2:	689b      	ldr	r3, [r3, #8]
 80158b4:	6839      	ldr	r1, [r7, #0]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	4798      	blx	r3
 80158ba:	4603      	mov	r3, r0
 80158bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158be:	e004      	b.n	80158ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80158c0:	2303      	movs	r3, #3
 80158c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80158c4:	e001      	b.n	80158ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80158c6:	2303      	movs	r3, #3
 80158c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	88db      	ldrh	r3, [r3, #6]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d110      	bne.n	80158f4 <USBD_StdItfReq+0xc0>
 80158d2:	7bfb      	ldrb	r3, [r7, #15]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d10d      	bne.n	80158f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f000 fdc7 	bl	801646c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80158de:	e009      	b.n	80158f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 fcf7 	bl	80162d6 <USBD_CtlError>
          break;
 80158e8:	e004      	b.n	80158f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80158ea:	6839      	ldr	r1, [r7, #0]
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f000 fcf2 	bl	80162d6 <USBD_CtlError>
          break;
 80158f2:	e000      	b.n	80158f6 <USBD_StdItfReq+0xc2>
          break;
 80158f4:	bf00      	nop
      }
      break;
 80158f6:	e004      	b.n	8015902 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80158f8:	6839      	ldr	r1, [r7, #0]
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f000 fceb 	bl	80162d6 <USBD_CtlError>
      break;
 8015900:	bf00      	nop
  }

  return ret;
 8015902:	7bfb      	ldrb	r3, [r7, #15]
}
 8015904:	4618      	mov	r0, r3
 8015906:	3710      	adds	r7, #16
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015916:	2300      	movs	r3, #0
 8015918:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	889b      	ldrh	r3, [r3, #4]
 801591e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015928:	2b40      	cmp	r3, #64	; 0x40
 801592a:	d007      	beq.n	801593c <USBD_StdEPReq+0x30>
 801592c:	2b40      	cmp	r3, #64	; 0x40
 801592e:	f200 817f 	bhi.w	8015c30 <USBD_StdEPReq+0x324>
 8015932:	2b00      	cmp	r3, #0
 8015934:	d02a      	beq.n	801598c <USBD_StdEPReq+0x80>
 8015936:	2b20      	cmp	r3, #32
 8015938:	f040 817a 	bne.w	8015c30 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801593c:	7bbb      	ldrb	r3, [r7, #14]
 801593e:	4619      	mov	r1, r3
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f7ff fe83 	bl	801564c <USBD_CoreFindEP>
 8015946:	4603      	mov	r3, r0
 8015948:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801594a:	7b7b      	ldrb	r3, [r7, #13]
 801594c:	2bff      	cmp	r3, #255	; 0xff
 801594e:	f000 8174 	beq.w	8015c3a <USBD_StdEPReq+0x32e>
 8015952:	7b7b      	ldrb	r3, [r7, #13]
 8015954:	2b00      	cmp	r3, #0
 8015956:	f040 8170 	bne.w	8015c3a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801595a:	7b7a      	ldrb	r2, [r7, #13]
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015962:	7b7a      	ldrb	r2, [r7, #13]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	32ae      	adds	r2, #174	; 0xae
 8015968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801596c:	689b      	ldr	r3, [r3, #8]
 801596e:	2b00      	cmp	r3, #0
 8015970:	f000 8163 	beq.w	8015c3a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015974:	7b7a      	ldrb	r2, [r7, #13]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	32ae      	adds	r2, #174	; 0xae
 801597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801597e:	689b      	ldr	r3, [r3, #8]
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	4798      	blx	r3
 8015986:	4603      	mov	r3, r0
 8015988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801598a:	e156      	b.n	8015c3a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	785b      	ldrb	r3, [r3, #1]
 8015990:	2b03      	cmp	r3, #3
 8015992:	d008      	beq.n	80159a6 <USBD_StdEPReq+0x9a>
 8015994:	2b03      	cmp	r3, #3
 8015996:	f300 8145 	bgt.w	8015c24 <USBD_StdEPReq+0x318>
 801599a:	2b00      	cmp	r3, #0
 801599c:	f000 809b 	beq.w	8015ad6 <USBD_StdEPReq+0x1ca>
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	d03c      	beq.n	8015a1e <USBD_StdEPReq+0x112>
 80159a4:	e13e      	b.n	8015c24 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	2b02      	cmp	r3, #2
 80159b0:	d002      	beq.n	80159b8 <USBD_StdEPReq+0xac>
 80159b2:	2b03      	cmp	r3, #3
 80159b4:	d016      	beq.n	80159e4 <USBD_StdEPReq+0xd8>
 80159b6:	e02c      	b.n	8015a12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159b8:	7bbb      	ldrb	r3, [r7, #14]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d00d      	beq.n	80159da <USBD_StdEPReq+0xce>
 80159be:	7bbb      	ldrb	r3, [r7, #14]
 80159c0:	2b80      	cmp	r3, #128	; 0x80
 80159c2:	d00a      	beq.n	80159da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80159c4:	7bbb      	ldrb	r3, [r7, #14]
 80159c6:	4619      	mov	r1, r3
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f003 fee3 	bl	8019794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80159ce:	2180      	movs	r1, #128	; 0x80
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f003 fedf 	bl	8019794 <USBD_LL_StallEP>
 80159d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80159d8:	e020      	b.n	8015a1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80159da:	6839      	ldr	r1, [r7, #0]
 80159dc:	6878      	ldr	r0, [r7, #4]
 80159de:	f000 fc7a 	bl	80162d6 <USBD_CtlError>
              break;
 80159e2:	e01b      	b.n	8015a1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	885b      	ldrh	r3, [r3, #2]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d10e      	bne.n	8015a0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159ec:	7bbb      	ldrb	r3, [r7, #14]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00b      	beq.n	8015a0a <USBD_StdEPReq+0xfe>
 80159f2:	7bbb      	ldrb	r3, [r7, #14]
 80159f4:	2b80      	cmp	r3, #128	; 0x80
 80159f6:	d008      	beq.n	8015a0a <USBD_StdEPReq+0xfe>
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	88db      	ldrh	r3, [r3, #6]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d104      	bne.n	8015a0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a00:	7bbb      	ldrb	r3, [r7, #14]
 8015a02:	4619      	mov	r1, r3
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f003 fec5 	bl	8019794 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f000 fd2e 	bl	801646c <USBD_CtlSendStatus>

              break;
 8015a10:	e004      	b.n	8015a1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015a12:	6839      	ldr	r1, [r7, #0]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f000 fc5e 	bl	80162d6 <USBD_CtlError>
              break;
 8015a1a:	bf00      	nop
          }
          break;
 8015a1c:	e107      	b.n	8015c2e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d002      	beq.n	8015a30 <USBD_StdEPReq+0x124>
 8015a2a:	2b03      	cmp	r3, #3
 8015a2c:	d016      	beq.n	8015a5c <USBD_StdEPReq+0x150>
 8015a2e:	e04b      	b.n	8015ac8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a30:	7bbb      	ldrb	r3, [r7, #14]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d00d      	beq.n	8015a52 <USBD_StdEPReq+0x146>
 8015a36:	7bbb      	ldrb	r3, [r7, #14]
 8015a38:	2b80      	cmp	r3, #128	; 0x80
 8015a3a:	d00a      	beq.n	8015a52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a3c:	7bbb      	ldrb	r3, [r7, #14]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f003 fea7 	bl	8019794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a46:	2180      	movs	r1, #128	; 0x80
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f003 fea3 	bl	8019794 <USBD_LL_StallEP>
 8015a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a50:	e040      	b.n	8015ad4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015a52:	6839      	ldr	r1, [r7, #0]
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f000 fc3e 	bl	80162d6 <USBD_CtlError>
              break;
 8015a5a:	e03b      	b.n	8015ad4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a5c:	683b      	ldr	r3, [r7, #0]
 8015a5e:	885b      	ldrh	r3, [r3, #2]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d136      	bne.n	8015ad2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a64:	7bbb      	ldrb	r3, [r7, #14]
 8015a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d004      	beq.n	8015a78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
 8015a70:	4619      	mov	r1, r3
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f003 fead 	bl	80197d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 fcf7 	bl	801646c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
 8015a80:	4619      	mov	r1, r3
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7ff fde2 	bl	801564c <USBD_CoreFindEP>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a8c:	7b7b      	ldrb	r3, [r7, #13]
 8015a8e:	2bff      	cmp	r3, #255	; 0xff
 8015a90:	d01f      	beq.n	8015ad2 <USBD_StdEPReq+0x1c6>
 8015a92:	7b7b      	ldrb	r3, [r7, #13]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d11c      	bne.n	8015ad2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015a98:	7b7a      	ldrb	r2, [r7, #13]
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015aa0:	7b7a      	ldrb	r2, [r7, #13]
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	32ae      	adds	r2, #174	; 0xae
 8015aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aaa:	689b      	ldr	r3, [r3, #8]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d010      	beq.n	8015ad2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ab0:	7b7a      	ldrb	r2, [r7, #13]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	32ae      	adds	r2, #174	; 0xae
 8015ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	4798      	blx	r3
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015ac6:	e004      	b.n	8015ad2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 fc03 	bl	80162d6 <USBD_CtlError>
              break;
 8015ad0:	e000      	b.n	8015ad4 <USBD_StdEPReq+0x1c8>
              break;
 8015ad2:	bf00      	nop
          }
          break;
 8015ad4:	e0ab      	b.n	8015c2e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	2b02      	cmp	r3, #2
 8015ae0:	d002      	beq.n	8015ae8 <USBD_StdEPReq+0x1dc>
 8015ae2:	2b03      	cmp	r3, #3
 8015ae4:	d032      	beq.n	8015b4c <USBD_StdEPReq+0x240>
 8015ae6:	e097      	b.n	8015c18 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ae8:	7bbb      	ldrb	r3, [r7, #14]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d007      	beq.n	8015afe <USBD_StdEPReq+0x1f2>
 8015aee:	7bbb      	ldrb	r3, [r7, #14]
 8015af0:	2b80      	cmp	r3, #128	; 0x80
 8015af2:	d004      	beq.n	8015afe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015af4:	6839      	ldr	r1, [r7, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f000 fbed 	bl	80162d6 <USBD_CtlError>
                break;
 8015afc:	e091      	b.n	8015c22 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015afe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	da0b      	bge.n	8015b1e <USBD_StdEPReq+0x212>
 8015b06:	7bbb      	ldrb	r3, [r7, #14]
 8015b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b0c:	4613      	mov	r3, r2
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	4413      	add	r3, r2
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	3310      	adds	r3, #16
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	4413      	add	r3, r2
 8015b1a:	3304      	adds	r3, #4
 8015b1c:	e00b      	b.n	8015b36 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b1e:	7bbb      	ldrb	r3, [r7, #14]
 8015b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b24:	4613      	mov	r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	4413      	add	r3, r2
 8015b2a:	009b      	lsls	r3, r3, #2
 8015b2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	4413      	add	r3, r2
 8015b34:	3304      	adds	r3, #4
 8015b36:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	2202      	movs	r2, #2
 8015b42:	4619      	mov	r1, r3
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f000 fc37 	bl	80163b8 <USBD_CtlSendData>
              break;
 8015b4a:	e06a      	b.n	8015c22 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	da11      	bge.n	8015b78 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b54:	7bbb      	ldrb	r3, [r7, #14]
 8015b56:	f003 020f 	and.w	r2, r3, #15
 8015b5a:	6879      	ldr	r1, [r7, #4]
 8015b5c:	4613      	mov	r3, r2
 8015b5e:	009b      	lsls	r3, r3, #2
 8015b60:	4413      	add	r3, r2
 8015b62:	009b      	lsls	r3, r3, #2
 8015b64:	440b      	add	r3, r1
 8015b66:	3324      	adds	r3, #36	; 0x24
 8015b68:	881b      	ldrh	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d117      	bne.n	8015b9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b6e:	6839      	ldr	r1, [r7, #0]
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f000 fbb0 	bl	80162d6 <USBD_CtlError>
                  break;
 8015b76:	e054      	b.n	8015c22 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b78:	7bbb      	ldrb	r3, [r7, #14]
 8015b7a:	f003 020f 	and.w	r2, r3, #15
 8015b7e:	6879      	ldr	r1, [r7, #4]
 8015b80:	4613      	mov	r3, r2
 8015b82:	009b      	lsls	r3, r3, #2
 8015b84:	4413      	add	r3, r2
 8015b86:	009b      	lsls	r3, r3, #2
 8015b88:	440b      	add	r3, r1
 8015b8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b8e:	881b      	ldrh	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d104      	bne.n	8015b9e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015b94:	6839      	ldr	r1, [r7, #0]
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f000 fb9d 	bl	80162d6 <USBD_CtlError>
                  break;
 8015b9c:	e041      	b.n	8015c22 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	da0b      	bge.n	8015bbe <USBD_StdEPReq+0x2b2>
 8015ba6:	7bbb      	ldrb	r3, [r7, #14]
 8015ba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bac:	4613      	mov	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	4413      	add	r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	3310      	adds	r3, #16
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	4413      	add	r3, r2
 8015bba:	3304      	adds	r3, #4
 8015bbc:	e00b      	b.n	8015bd6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bbe:	7bbb      	ldrb	r3, [r7, #14]
 8015bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	009b      	lsls	r3, r3, #2
 8015bc8:	4413      	add	r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	4413      	add	r3, r2
 8015bd4:	3304      	adds	r3, #4
 8015bd6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bd8:	7bbb      	ldrb	r3, [r7, #14]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d002      	beq.n	8015be4 <USBD_StdEPReq+0x2d8>
 8015bde:	7bbb      	ldrb	r3, [r7, #14]
 8015be0:	2b80      	cmp	r3, #128	; 0x80
 8015be2:	d103      	bne.n	8015bec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	2200      	movs	r2, #0
 8015be8:	601a      	str	r2, [r3, #0]
 8015bea:	e00e      	b.n	8015c0a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bec:	7bbb      	ldrb	r3, [r7, #14]
 8015bee:	4619      	mov	r1, r3
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f003 fe0d 	bl	8019810 <USBD_LL_IsStallEP>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d003      	beq.n	8015c04 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	2201      	movs	r2, #1
 8015c00:	601a      	str	r2, [r3, #0]
 8015c02:	e002      	b.n	8015c0a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	2200      	movs	r2, #0
 8015c08:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2202      	movs	r2, #2
 8015c0e:	4619      	mov	r1, r3
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f000 fbd1 	bl	80163b8 <USBD_CtlSendData>
              break;
 8015c16:	e004      	b.n	8015c22 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f000 fb5b 	bl	80162d6 <USBD_CtlError>
              break;
 8015c20:	bf00      	nop
          }
          break;
 8015c22:	e004      	b.n	8015c2e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015c24:	6839      	ldr	r1, [r7, #0]
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 fb55 	bl	80162d6 <USBD_CtlError>
          break;
 8015c2c:	bf00      	nop
      }
      break;
 8015c2e:	e005      	b.n	8015c3c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015c30:	6839      	ldr	r1, [r7, #0]
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f000 fb4f 	bl	80162d6 <USBD_CtlError>
      break;
 8015c38:	e000      	b.n	8015c3c <USBD_StdEPReq+0x330>
      break;
 8015c3a:	bf00      	nop
  }

  return ret;
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
	...

08015c48 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c52:	2300      	movs	r3, #0
 8015c54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c56:	2300      	movs	r3, #0
 8015c58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	885b      	ldrh	r3, [r3, #2]
 8015c62:	0a1b      	lsrs	r3, r3, #8
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	3b01      	subs	r3, #1
 8015c68:	2b06      	cmp	r3, #6
 8015c6a:	f200 8128 	bhi.w	8015ebe <USBD_GetDescriptor+0x276>
 8015c6e:	a201      	add	r2, pc, #4	; (adr r2, 8015c74 <USBD_GetDescriptor+0x2c>)
 8015c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c74:	08015c91 	.word	0x08015c91
 8015c78:	08015ca9 	.word	0x08015ca9
 8015c7c:	08015ce9 	.word	0x08015ce9
 8015c80:	08015ebf 	.word	0x08015ebf
 8015c84:	08015ebf 	.word	0x08015ebf
 8015c88:	08015e5f 	.word	0x08015e5f
 8015c8c:	08015e8b 	.word	0x08015e8b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	7c12      	ldrb	r2, [r2, #16]
 8015c9c:	f107 0108 	add.w	r1, r7, #8
 8015ca0:	4610      	mov	r0, r2
 8015ca2:	4798      	blx	r3
 8015ca4:	60f8      	str	r0, [r7, #12]
      break;
 8015ca6:	e112      	b.n	8015ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	7c1b      	ldrb	r3, [r3, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d10d      	bne.n	8015ccc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cb8:	f107 0208 	add.w	r2, r7, #8
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	4798      	blx	r3
 8015cc0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	2202      	movs	r2, #2
 8015cc8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015cca:	e100      	b.n	8015ece <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd4:	f107 0208 	add.w	r2, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	2202      	movs	r2, #2
 8015ce4:	701a      	strb	r2, [r3, #0]
      break;
 8015ce6:	e0f2      	b.n	8015ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	885b      	ldrh	r3, [r3, #2]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b05      	cmp	r3, #5
 8015cf0:	f200 80ac 	bhi.w	8015e4c <USBD_GetDescriptor+0x204>
 8015cf4:	a201      	add	r2, pc, #4	; (adr r2, 8015cfc <USBD_GetDescriptor+0xb4>)
 8015cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cfa:	bf00      	nop
 8015cfc:	08015d15 	.word	0x08015d15
 8015d00:	08015d49 	.word	0x08015d49
 8015d04:	08015d7d 	.word	0x08015d7d
 8015d08:	08015db1 	.word	0x08015db1
 8015d0c:	08015de5 	.word	0x08015de5
 8015d10:	08015e19 	.word	0x08015e19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00b      	beq.n	8015d38 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	687a      	ldr	r2, [r7, #4]
 8015d2a:	7c12      	ldrb	r2, [r2, #16]
 8015d2c:	f107 0108 	add.w	r1, r7, #8
 8015d30:	4610      	mov	r0, r2
 8015d32:	4798      	blx	r3
 8015d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d36:	e091      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d38:	6839      	ldr	r1, [r7, #0]
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 facb 	bl	80162d6 <USBD_CtlError>
            err++;
 8015d40:	7afb      	ldrb	r3, [r7, #11]
 8015d42:	3301      	adds	r3, #1
 8015d44:	72fb      	strb	r3, [r7, #11]
          break;
 8015d46:	e089      	b.n	8015e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00b      	beq.n	8015d6c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5a:	689b      	ldr	r3, [r3, #8]
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	7c12      	ldrb	r2, [r2, #16]
 8015d60:	f107 0108 	add.w	r1, r7, #8
 8015d64:	4610      	mov	r0, r2
 8015d66:	4798      	blx	r3
 8015d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d6a:	e077      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d6c:	6839      	ldr	r1, [r7, #0]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f000 fab1 	bl	80162d6 <USBD_CtlError>
            err++;
 8015d74:	7afb      	ldrb	r3, [r7, #11]
 8015d76:	3301      	adds	r3, #1
 8015d78:	72fb      	strb	r3, [r7, #11]
          break;
 8015d7a:	e06f      	b.n	8015e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00b      	beq.n	8015da0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d8e:	68db      	ldr	r3, [r3, #12]
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	7c12      	ldrb	r2, [r2, #16]
 8015d94:	f107 0108 	add.w	r1, r7, #8
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d9e:	e05d      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 fa97 	bl	80162d6 <USBD_CtlError>
            err++;
 8015da8:	7afb      	ldrb	r3, [r7, #11]
 8015daa:	3301      	adds	r3, #1
 8015dac:	72fb      	strb	r3, [r7, #11]
          break;
 8015dae:	e055      	b.n	8015e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015db6:	691b      	ldr	r3, [r3, #16]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00b      	beq.n	8015dd4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dc2:	691b      	ldr	r3, [r3, #16]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	7c12      	ldrb	r2, [r2, #16]
 8015dc8:	f107 0108 	add.w	r1, r7, #8
 8015dcc:	4610      	mov	r0, r2
 8015dce:	4798      	blx	r3
 8015dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dd2:	e043      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dd4:	6839      	ldr	r1, [r7, #0]
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 fa7d 	bl	80162d6 <USBD_CtlError>
            err++;
 8015ddc:	7afb      	ldrb	r3, [r7, #11]
 8015dde:	3301      	adds	r3, #1
 8015de0:	72fb      	strb	r3, [r7, #11]
          break;
 8015de2:	e03b      	b.n	8015e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dea:	695b      	ldr	r3, [r3, #20]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d00b      	beq.n	8015e08 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df6:	695b      	ldr	r3, [r3, #20]
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	7c12      	ldrb	r2, [r2, #16]
 8015dfc:	f107 0108 	add.w	r1, r7, #8
 8015e00:	4610      	mov	r0, r2
 8015e02:	4798      	blx	r3
 8015e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e06:	e029      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e08:	6839      	ldr	r1, [r7, #0]
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 fa63 	bl	80162d6 <USBD_CtlError>
            err++;
 8015e10:	7afb      	ldrb	r3, [r7, #11]
 8015e12:	3301      	adds	r3, #1
 8015e14:	72fb      	strb	r3, [r7, #11]
          break;
 8015e16:	e021      	b.n	8015e5c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1e:	699b      	ldr	r3, [r3, #24]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00b      	beq.n	8015e3c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2a:	699b      	ldr	r3, [r3, #24]
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	7c12      	ldrb	r2, [r2, #16]
 8015e30:	f107 0108 	add.w	r1, r7, #8
 8015e34:	4610      	mov	r0, r2
 8015e36:	4798      	blx	r3
 8015e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e3a:	e00f      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 fa49 	bl	80162d6 <USBD_CtlError>
            err++;
 8015e44:	7afb      	ldrb	r3, [r7, #11]
 8015e46:	3301      	adds	r3, #1
 8015e48:	72fb      	strb	r3, [r7, #11]
          break;
 8015e4a:	e007      	b.n	8015e5c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 fa41 	bl	80162d6 <USBD_CtlError>
          err++;
 8015e54:	7afb      	ldrb	r3, [r7, #11]
 8015e56:	3301      	adds	r3, #1
 8015e58:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015e5a:	bf00      	nop
      }
      break;
 8015e5c:	e037      	b.n	8015ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	7c1b      	ldrb	r3, [r3, #16]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d109      	bne.n	8015e7a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e6e:	f107 0208 	add.w	r2, r7, #8
 8015e72:	4610      	mov	r0, r2
 8015e74:	4798      	blx	r3
 8015e76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e78:	e029      	b.n	8015ece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015e7a:	6839      	ldr	r1, [r7, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 fa2a 	bl	80162d6 <USBD_CtlError>
        err++;
 8015e82:	7afb      	ldrb	r3, [r7, #11]
 8015e84:	3301      	adds	r3, #1
 8015e86:	72fb      	strb	r3, [r7, #11]
      break;
 8015e88:	e021      	b.n	8015ece <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	7c1b      	ldrb	r3, [r3, #16]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d10d      	bne.n	8015eae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e9a:	f107 0208 	add.w	r2, r7, #8
 8015e9e:	4610      	mov	r0, r2
 8015ea0:	4798      	blx	r3
 8015ea2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	2207      	movs	r2, #7
 8015eaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015eac:	e00f      	b.n	8015ece <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015eae:	6839      	ldr	r1, [r7, #0]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 fa10 	bl	80162d6 <USBD_CtlError>
        err++;
 8015eb6:	7afb      	ldrb	r3, [r7, #11]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	72fb      	strb	r3, [r7, #11]
      break;
 8015ebc:	e007      	b.n	8015ece <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015ebe:	6839      	ldr	r1, [r7, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f000 fa08 	bl	80162d6 <USBD_CtlError>
      err++;
 8015ec6:	7afb      	ldrb	r3, [r7, #11]
 8015ec8:	3301      	adds	r3, #1
 8015eca:	72fb      	strb	r3, [r7, #11]
      break;
 8015ecc:	bf00      	nop
  }

  if (err != 0U)
 8015ece:	7afb      	ldrb	r3, [r7, #11]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d11e      	bne.n	8015f12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	88db      	ldrh	r3, [r3, #6]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d016      	beq.n	8015f0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015edc:	893b      	ldrh	r3, [r7, #8]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00e      	beq.n	8015f00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	88da      	ldrh	r2, [r3, #6]
 8015ee6:	893b      	ldrh	r3, [r7, #8]
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	bf28      	it	cs
 8015eec:	4613      	movcs	r3, r2
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ef2:	893b      	ldrh	r3, [r7, #8]
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	68f9      	ldr	r1, [r7, #12]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fa5d 	bl	80163b8 <USBD_CtlSendData>
 8015efe:	e009      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 f9e7 	bl	80162d6 <USBD_CtlError>
 8015f08:	e004      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 faae 	bl	801646c <USBD_CtlSendStatus>
 8015f10:	e000      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
    return;
 8015f12:	bf00      	nop
  }
}
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop

08015f1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	889b      	ldrh	r3, [r3, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d131      	bne.n	8015f92 <USBD_SetAddress+0x76>
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	88db      	ldrh	r3, [r3, #6]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d12d      	bne.n	8015f92 <USBD_SetAddress+0x76>
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	885b      	ldrh	r3, [r3, #2]
 8015f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8015f3c:	d829      	bhi.n	8015f92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	885b      	ldrh	r3, [r3, #2]
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f50:	b2db      	uxtb	r3, r3
 8015f52:	2b03      	cmp	r3, #3
 8015f54:	d104      	bne.n	8015f60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015f56:	6839      	ldr	r1, [r7, #0]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 f9bc 	bl	80162d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f5e:	e01d      	b.n	8015f9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	7bfa      	ldrb	r2, [r7, #15]
 8015f64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f68:	7bfb      	ldrb	r3, [r7, #15]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f003 fc7b 	bl	8019868 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f000 fa7a 	bl	801646c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f78:	7bfb      	ldrb	r3, [r7, #15]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d004      	beq.n	8015f88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2202      	movs	r2, #2
 8015f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f86:	e009      	b.n	8015f9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f90:	e004      	b.n	8015f9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f92:	6839      	ldr	r1, [r7, #0]
 8015f94:	6878      	ldr	r0, [r7, #4]
 8015f96:	f000 f99e 	bl	80162d6 <USBD_CtlError>
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	bf00      	nop
 8015f9e:	3710      	adds	r7, #16
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b084      	sub	sp, #16
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
 8015fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	885b      	ldrh	r3, [r3, #2]
 8015fb6:	b2da      	uxtb	r2, r3
 8015fb8:	4b4e      	ldr	r3, [pc, #312]	; (80160f4 <USBD_SetConfig+0x150>)
 8015fba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015fbc:	4b4d      	ldr	r3, [pc, #308]	; (80160f4 <USBD_SetConfig+0x150>)
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	2b01      	cmp	r3, #1
 8015fc2:	d905      	bls.n	8015fd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 f985 	bl	80162d6 <USBD_CtlError>
    return USBD_FAIL;
 8015fcc:	2303      	movs	r3, #3
 8015fce:	e08c      	b.n	80160ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	2b02      	cmp	r3, #2
 8015fda:	d002      	beq.n	8015fe2 <USBD_SetConfig+0x3e>
 8015fdc:	2b03      	cmp	r3, #3
 8015fde:	d029      	beq.n	8016034 <USBD_SetConfig+0x90>
 8015fe0:	e075      	b.n	80160ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015fe2:	4b44      	ldr	r3, [pc, #272]	; (80160f4 <USBD_SetConfig+0x150>)
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d020      	beq.n	801602c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015fea:	4b42      	ldr	r3, [pc, #264]	; (80160f4 <USBD_SetConfig+0x150>)
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	461a      	mov	r2, r3
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ff4:	4b3f      	ldr	r3, [pc, #252]	; (80160f4 <USBD_SetConfig+0x150>)
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7fe ffe1 	bl	8014fc2 <USBD_SetClassConfig>
 8016000:	4603      	mov	r3, r0
 8016002:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016004:	7bfb      	ldrb	r3, [r7, #15]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d008      	beq.n	801601c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801600a:	6839      	ldr	r1, [r7, #0]
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f000 f962 	bl	80162d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2202      	movs	r2, #2
 8016016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801601a:	e065      	b.n	80160e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f000 fa25 	bl	801646c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	2203      	movs	r2, #3
 8016026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801602a:	e05d      	b.n	80160e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 fa1d 	bl	801646c <USBD_CtlSendStatus>
      break;
 8016032:	e059      	b.n	80160e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016034:	4b2f      	ldr	r3, [pc, #188]	; (80160f4 <USBD_SetConfig+0x150>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d112      	bne.n	8016062 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2202      	movs	r2, #2
 8016040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016044:	4b2b      	ldr	r3, [pc, #172]	; (80160f4 <USBD_SetConfig+0x150>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	461a      	mov	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801604e:	4b29      	ldr	r3, [pc, #164]	; (80160f4 <USBD_SetConfig+0x150>)
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	4619      	mov	r1, r3
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7fe ffd0 	bl	8014ffa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 fa06 	bl	801646c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016060:	e042      	b.n	80160e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016062:	4b24      	ldr	r3, [pc, #144]	; (80160f4 <USBD_SetConfig+0x150>)
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	461a      	mov	r2, r3
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	429a      	cmp	r2, r3
 801606e:	d02a      	beq.n	80160c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	b2db      	uxtb	r3, r3
 8016076:	4619      	mov	r1, r3
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f7fe ffbe 	bl	8014ffa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801607e:	4b1d      	ldr	r3, [pc, #116]	; (80160f4 <USBD_SetConfig+0x150>)
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	461a      	mov	r2, r3
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016088:	4b1a      	ldr	r3, [pc, #104]	; (80160f4 <USBD_SetConfig+0x150>)
 801608a:	781b      	ldrb	r3, [r3, #0]
 801608c:	4619      	mov	r1, r3
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7fe ff97 	bl	8014fc2 <USBD_SetClassConfig>
 8016094:	4603      	mov	r3, r0
 8016096:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016098:	7bfb      	ldrb	r3, [r7, #15]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d00f      	beq.n	80160be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801609e:	6839      	ldr	r1, [r7, #0]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 f918 	bl	80162d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	4619      	mov	r1, r3
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f7fe ffa3 	bl	8014ffa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2202      	movs	r2, #2
 80160b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160bc:	e014      	b.n	80160e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 f9d4 	bl	801646c <USBD_CtlSendStatus>
      break;
 80160c4:	e010      	b.n	80160e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 f9d0 	bl	801646c <USBD_CtlSendStatus>
      break;
 80160cc:	e00c      	b.n	80160e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f900 	bl	80162d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160d6:	4b07      	ldr	r3, [pc, #28]	; (80160f4 <USBD_SetConfig+0x150>)
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	4619      	mov	r1, r3
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f7fe ff8c 	bl	8014ffa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80160e2:	2303      	movs	r3, #3
 80160e4:	73fb      	strb	r3, [r7, #15]
      break;
 80160e6:	bf00      	nop
  }

  return ret;
 80160e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3710      	adds	r7, #16
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	240016b8 	.word	0x240016b8

080160f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	88db      	ldrh	r3, [r3, #6]
 8016106:	2b01      	cmp	r3, #1
 8016108:	d004      	beq.n	8016114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801610a:	6839      	ldr	r1, [r7, #0]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 f8e2 	bl	80162d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016112:	e023      	b.n	801615c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801611a:	b2db      	uxtb	r3, r3
 801611c:	2b02      	cmp	r3, #2
 801611e:	dc02      	bgt.n	8016126 <USBD_GetConfig+0x2e>
 8016120:	2b00      	cmp	r3, #0
 8016122:	dc03      	bgt.n	801612c <USBD_GetConfig+0x34>
 8016124:	e015      	b.n	8016152 <USBD_GetConfig+0x5a>
 8016126:	2b03      	cmp	r3, #3
 8016128:	d00b      	beq.n	8016142 <USBD_GetConfig+0x4a>
 801612a:	e012      	b.n	8016152 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2200      	movs	r2, #0
 8016130:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	3308      	adds	r3, #8
 8016136:	2201      	movs	r2, #1
 8016138:	4619      	mov	r1, r3
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 f93c 	bl	80163b8 <USBD_CtlSendData>
        break;
 8016140:	e00c      	b.n	801615c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	3304      	adds	r3, #4
 8016146:	2201      	movs	r2, #1
 8016148:	4619      	mov	r1, r3
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f934 	bl	80163b8 <USBD_CtlSendData>
        break;
 8016150:	e004      	b.n	801615c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016152:	6839      	ldr	r1, [r7, #0]
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f000 f8be 	bl	80162d6 <USBD_CtlError>
        break;
 801615a:	bf00      	nop
}
 801615c:	bf00      	nop
 801615e:	3708      	adds	r7, #8
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016174:	b2db      	uxtb	r3, r3
 8016176:	3b01      	subs	r3, #1
 8016178:	2b02      	cmp	r3, #2
 801617a:	d81e      	bhi.n	80161ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	88db      	ldrh	r3, [r3, #6]
 8016180:	2b02      	cmp	r3, #2
 8016182:	d004      	beq.n	801618e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016184:	6839      	ldr	r1, [r7, #0]
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f000 f8a5 	bl	80162d6 <USBD_CtlError>
        break;
 801618c:	e01a      	b.n	80161c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2201      	movs	r2, #1
 8016192:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801619a:	2b00      	cmp	r3, #0
 801619c:	d005      	beq.n	80161aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	68db      	ldr	r3, [r3, #12]
 80161a2:	f043 0202 	orr.w	r2, r3, #2
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	330c      	adds	r3, #12
 80161ae:	2202      	movs	r2, #2
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f000 f900 	bl	80163b8 <USBD_CtlSendData>
      break;
 80161b8:	e004      	b.n	80161c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80161ba:	6839      	ldr	r1, [r7, #0]
 80161bc:	6878      	ldr	r0, [r7, #4]
 80161be:	f000 f88a 	bl	80162d6 <USBD_CtlError>
      break;
 80161c2:	bf00      	nop
  }
}
 80161c4:	bf00      	nop
 80161c6:	3708      	adds	r7, #8
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	885b      	ldrh	r3, [r3, #2]
 80161da:	2b01      	cmp	r3, #1
 80161dc:	d107      	bne.n	80161ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2201      	movs	r2, #1
 80161e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f000 f940 	bl	801646c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80161ec:	e013      	b.n	8016216 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	885b      	ldrh	r3, [r3, #2]
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	d10b      	bne.n	801620e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	889b      	ldrh	r3, [r3, #4]
 80161fa:	0a1b      	lsrs	r3, r3, #8
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	b2da      	uxtb	r2, r3
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f930 	bl	801646c <USBD_CtlSendStatus>
}
 801620c:	e003      	b.n	8016216 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 f860 	bl	80162d6 <USBD_CtlError>
}
 8016216:	bf00      	nop
 8016218:	3708      	adds	r7, #8
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}

0801621e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801621e:	b580      	push	{r7, lr}
 8016220:	b082      	sub	sp, #8
 8016222:	af00      	add	r7, sp, #0
 8016224:	6078      	str	r0, [r7, #4]
 8016226:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801622e:	b2db      	uxtb	r3, r3
 8016230:	3b01      	subs	r3, #1
 8016232:	2b02      	cmp	r3, #2
 8016234:	d80b      	bhi.n	801624e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	885b      	ldrh	r3, [r3, #2]
 801623a:	2b01      	cmp	r3, #1
 801623c:	d10c      	bne.n	8016258 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2200      	movs	r2, #0
 8016242:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f910 	bl	801646c <USBD_CtlSendStatus>
      }
      break;
 801624c:	e004      	b.n	8016258 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801624e:	6839      	ldr	r1, [r7, #0]
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f000 f840 	bl	80162d6 <USBD_CtlError>
      break;
 8016256:	e000      	b.n	801625a <USBD_ClrFeature+0x3c>
      break;
 8016258:	bf00      	nop
  }
}
 801625a:	bf00      	nop
 801625c:	3708      	adds	r7, #8
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}

08016262 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016262:	b580      	push	{r7, lr}
 8016264:	b084      	sub	sp, #16
 8016266:	af00      	add	r7, sp, #0
 8016268:	6078      	str	r0, [r7, #4]
 801626a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	781a      	ldrb	r2, [r3, #0]
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	3301      	adds	r3, #1
 801627c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	781a      	ldrb	r2, [r3, #0]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	3301      	adds	r3, #1
 801628a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f7ff fa41 	bl	8015714 <SWAPBYTE>
 8016292:	4603      	mov	r3, r0
 8016294:	461a      	mov	r2, r3
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	3301      	adds	r3, #1
 801629e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	3301      	adds	r3, #1
 80162a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80162a6:	68f8      	ldr	r0, [r7, #12]
 80162a8:	f7ff fa34 	bl	8015714 <SWAPBYTE>
 80162ac:	4603      	mov	r3, r0
 80162ae:	461a      	mov	r2, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	3301      	adds	r3, #1
 80162b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	3301      	adds	r3, #1
 80162be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80162c0:	68f8      	ldr	r0, [r7, #12]
 80162c2:	f7ff fa27 	bl	8015714 <SWAPBYTE>
 80162c6:	4603      	mov	r3, r0
 80162c8:	461a      	mov	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	80da      	strh	r2, [r3, #6]
}
 80162ce:	bf00      	nop
 80162d0:	3710      	adds	r7, #16
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}

080162d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162d6:	b580      	push	{r7, lr}
 80162d8:	b082      	sub	sp, #8
 80162da:	af00      	add	r7, sp, #0
 80162dc:	6078      	str	r0, [r7, #4]
 80162de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80162e0:	2180      	movs	r1, #128	; 0x80
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f003 fa56 	bl	8019794 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162e8:	2100      	movs	r1, #0
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f003 fa52 	bl	8019794 <USBD_LL_StallEP>
}
 80162f0:	bf00      	nop
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}

080162f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b086      	sub	sp, #24
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016304:	2300      	movs	r3, #0
 8016306:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d036      	beq.n	801637c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016312:	6938      	ldr	r0, [r7, #16]
 8016314:	f000 f836 	bl	8016384 <USBD_GetLen>
 8016318:	4603      	mov	r3, r0
 801631a:	3301      	adds	r3, #1
 801631c:	b29b      	uxth	r3, r3
 801631e:	005b      	lsls	r3, r3, #1
 8016320:	b29a      	uxth	r2, r3
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016326:	7dfb      	ldrb	r3, [r7, #23]
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	4413      	add	r3, r2
 801632c:	687a      	ldr	r2, [r7, #4]
 801632e:	7812      	ldrb	r2, [r2, #0]
 8016330:	701a      	strb	r2, [r3, #0]
  idx++;
 8016332:	7dfb      	ldrb	r3, [r7, #23]
 8016334:	3301      	adds	r3, #1
 8016336:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016338:	7dfb      	ldrb	r3, [r7, #23]
 801633a:	68ba      	ldr	r2, [r7, #8]
 801633c:	4413      	add	r3, r2
 801633e:	2203      	movs	r2, #3
 8016340:	701a      	strb	r2, [r3, #0]
  idx++;
 8016342:	7dfb      	ldrb	r3, [r7, #23]
 8016344:	3301      	adds	r3, #1
 8016346:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016348:	e013      	b.n	8016372 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801634a:	7dfb      	ldrb	r3, [r7, #23]
 801634c:	68ba      	ldr	r2, [r7, #8]
 801634e:	4413      	add	r3, r2
 8016350:	693a      	ldr	r2, [r7, #16]
 8016352:	7812      	ldrb	r2, [r2, #0]
 8016354:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	3301      	adds	r3, #1
 801635a:	613b      	str	r3, [r7, #16]
    idx++;
 801635c:	7dfb      	ldrb	r3, [r7, #23]
 801635e:	3301      	adds	r3, #1
 8016360:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016362:	7dfb      	ldrb	r3, [r7, #23]
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	4413      	add	r3, r2
 8016368:	2200      	movs	r2, #0
 801636a:	701a      	strb	r2, [r3, #0]
    idx++;
 801636c:	7dfb      	ldrb	r3, [r7, #23]
 801636e:	3301      	adds	r3, #1
 8016370:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d1e7      	bne.n	801634a <USBD_GetString+0x52>
 801637a:	e000      	b.n	801637e <USBD_GetString+0x86>
    return;
 801637c:	bf00      	nop
  }
}
 801637e:	3718      	adds	r7, #24
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}

08016384 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016384:	b480      	push	{r7}
 8016386:	b085      	sub	sp, #20
 8016388:	af00      	add	r7, sp, #0
 801638a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801638c:	2300      	movs	r3, #0
 801638e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016394:	e005      	b.n	80163a2 <USBD_GetLen+0x1e>
  {
    len++;
 8016396:	7bfb      	ldrb	r3, [r7, #15]
 8016398:	3301      	adds	r3, #1
 801639a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	3301      	adds	r3, #1
 80163a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1f5      	bne.n	8016396 <USBD_GetLen+0x12>
  }

  return len;
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3714      	adds	r7, #20
 80163b0:	46bd      	mov	sp, r7
 80163b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163b6:	4770      	bx	lr

080163b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2202      	movs	r2, #2
 80163c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	68ba      	ldr	r2, [r7, #8]
 80163dc:	2100      	movs	r1, #0
 80163de:	68f8      	ldr	r0, [r7, #12]
 80163e0:	f003 fa61 	bl	80198a6 <USBD_LL_Transmit>

  return USBD_OK;
 80163e4:	2300      	movs	r3, #0
}
 80163e6:	4618      	mov	r0, r3
 80163e8:	3710      	adds	r7, #16
 80163ea:	46bd      	mov	sp, r7
 80163ec:	bd80      	pop	{r7, pc}

080163ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80163ee:	b580      	push	{r7, lr}
 80163f0:	b084      	sub	sp, #16
 80163f2:	af00      	add	r7, sp, #0
 80163f4:	60f8      	str	r0, [r7, #12]
 80163f6:	60b9      	str	r1, [r7, #8]
 80163f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	2100      	movs	r1, #0
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f003 fa50 	bl	80198a6 <USBD_LL_Transmit>

  return USBD_OK;
 8016406:	2300      	movs	r3, #0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3710      	adds	r7, #16
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}

08016410 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2203      	movs	r2, #3
 8016420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	68ba      	ldr	r2, [r7, #8]
 8016438:	2100      	movs	r1, #0
 801643a:	68f8      	ldr	r0, [r7, #12]
 801643c:	f003 fa54 	bl	80198e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016440:	2300      	movs	r3, #0
}
 8016442:	4618      	mov	r0, r3
 8016444:	3710      	adds	r7, #16
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}

0801644a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801644a:	b580      	push	{r7, lr}
 801644c:	b084      	sub	sp, #16
 801644e:	af00      	add	r7, sp, #0
 8016450:	60f8      	str	r0, [r7, #12]
 8016452:	60b9      	str	r1, [r7, #8]
 8016454:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	68ba      	ldr	r2, [r7, #8]
 801645a:	2100      	movs	r1, #0
 801645c:	68f8      	ldr	r0, [r7, #12]
 801645e:	f003 fa43 	bl	80198e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016462:	2300      	movs	r3, #0
}
 8016464:	4618      	mov	r0, r3
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2204      	movs	r2, #4
 8016478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801647c:	2300      	movs	r3, #0
 801647e:	2200      	movs	r2, #0
 8016480:	2100      	movs	r1, #0
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f003 fa0f 	bl	80198a6 <USBD_LL_Transmit>

  return USBD_OK;
 8016488:	2300      	movs	r3, #0
}
 801648a:	4618      	mov	r0, r3
 801648c:	3708      	adds	r7, #8
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}

08016492 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016492:	b580      	push	{r7, lr}
 8016494:	b082      	sub	sp, #8
 8016496:	af00      	add	r7, sp, #0
 8016498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2205      	movs	r2, #5
 801649e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164a2:	2300      	movs	r3, #0
 80164a4:	2200      	movs	r2, #0
 80164a6:	2100      	movs	r1, #0
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f003 fa1d 	bl	80198e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3708      	adds	r7, #8
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	4603      	mov	r3, r0
 80164c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80164c2:	79fb      	ldrb	r3, [r7, #7]
 80164c4:	4a08      	ldr	r2, [pc, #32]	; (80164e8 <disk_status+0x30>)
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	4413      	add	r3, r2
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	79fa      	ldrb	r2, [r7, #7]
 80164d0:	4905      	ldr	r1, [pc, #20]	; (80164e8 <disk_status+0x30>)
 80164d2:	440a      	add	r2, r1
 80164d4:	7a12      	ldrb	r2, [r2, #8]
 80164d6:	4610      	mov	r0, r2
 80164d8:	4798      	blx	r3
 80164da:	4603      	mov	r3, r0
 80164dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80164de:	7bfb      	ldrb	r3, [r7, #15]
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3710      	adds	r7, #16
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	240018e4 	.word	0x240018e4

080164ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	4603      	mov	r3, r0
 80164f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80164f6:	2300      	movs	r3, #0
 80164f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80164fa:	79fb      	ldrb	r3, [r7, #7]
 80164fc:	4a0d      	ldr	r2, [pc, #52]	; (8016534 <disk_initialize+0x48>)
 80164fe:	5cd3      	ldrb	r3, [r2, r3]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d111      	bne.n	8016528 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016504:	79fb      	ldrb	r3, [r7, #7]
 8016506:	4a0b      	ldr	r2, [pc, #44]	; (8016534 <disk_initialize+0x48>)
 8016508:	2101      	movs	r1, #1
 801650a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801650c:	79fb      	ldrb	r3, [r7, #7]
 801650e:	4a09      	ldr	r2, [pc, #36]	; (8016534 <disk_initialize+0x48>)
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4413      	add	r3, r2
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	79fa      	ldrb	r2, [r7, #7]
 801651a:	4906      	ldr	r1, [pc, #24]	; (8016534 <disk_initialize+0x48>)
 801651c:	440a      	add	r2, r1
 801651e:	7a12      	ldrb	r2, [r2, #8]
 8016520:	4610      	mov	r0, r2
 8016522:	4798      	blx	r3
 8016524:	4603      	mov	r3, r0
 8016526:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016528:	7bfb      	ldrb	r3, [r7, #15]
}
 801652a:	4618      	mov	r0, r3
 801652c:	3710      	adds	r7, #16
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	240018e4 	.word	0x240018e4

08016538 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016538:	b590      	push	{r4, r7, lr}
 801653a:	b087      	sub	sp, #28
 801653c:	af00      	add	r7, sp, #0
 801653e:	60b9      	str	r1, [r7, #8]
 8016540:	607a      	str	r2, [r7, #4]
 8016542:	603b      	str	r3, [r7, #0]
 8016544:	4603      	mov	r3, r0
 8016546:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016548:	7bfb      	ldrb	r3, [r7, #15]
 801654a:	4a0a      	ldr	r2, [pc, #40]	; (8016574 <disk_read+0x3c>)
 801654c:	009b      	lsls	r3, r3, #2
 801654e:	4413      	add	r3, r2
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	689c      	ldr	r4, [r3, #8]
 8016554:	7bfb      	ldrb	r3, [r7, #15]
 8016556:	4a07      	ldr	r2, [pc, #28]	; (8016574 <disk_read+0x3c>)
 8016558:	4413      	add	r3, r2
 801655a:	7a18      	ldrb	r0, [r3, #8]
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	687a      	ldr	r2, [r7, #4]
 8016560:	68b9      	ldr	r1, [r7, #8]
 8016562:	47a0      	blx	r4
 8016564:	4603      	mov	r3, r0
 8016566:	75fb      	strb	r3, [r7, #23]
  return res;
 8016568:	7dfb      	ldrb	r3, [r7, #23]
}
 801656a:	4618      	mov	r0, r3
 801656c:	371c      	adds	r7, #28
 801656e:	46bd      	mov	sp, r7
 8016570:	bd90      	pop	{r4, r7, pc}
 8016572:	bf00      	nop
 8016574:	240018e4 	.word	0x240018e4

08016578 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016578:	b590      	push	{r4, r7, lr}
 801657a:	b087      	sub	sp, #28
 801657c:	af00      	add	r7, sp, #0
 801657e:	60b9      	str	r1, [r7, #8]
 8016580:	607a      	str	r2, [r7, #4]
 8016582:	603b      	str	r3, [r7, #0]
 8016584:	4603      	mov	r3, r0
 8016586:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016588:	7bfb      	ldrb	r3, [r7, #15]
 801658a:	4a0a      	ldr	r2, [pc, #40]	; (80165b4 <disk_write+0x3c>)
 801658c:	009b      	lsls	r3, r3, #2
 801658e:	4413      	add	r3, r2
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	68dc      	ldr	r4, [r3, #12]
 8016594:	7bfb      	ldrb	r3, [r7, #15]
 8016596:	4a07      	ldr	r2, [pc, #28]	; (80165b4 <disk_write+0x3c>)
 8016598:	4413      	add	r3, r2
 801659a:	7a18      	ldrb	r0, [r3, #8]
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	68b9      	ldr	r1, [r7, #8]
 80165a2:	47a0      	blx	r4
 80165a4:	4603      	mov	r3, r0
 80165a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80165a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	371c      	adds	r7, #28
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd90      	pop	{r4, r7, pc}
 80165b2:	bf00      	nop
 80165b4:	240018e4 	.word	0x240018e4

080165b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b084      	sub	sp, #16
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	603a      	str	r2, [r7, #0]
 80165c2:	71fb      	strb	r3, [r7, #7]
 80165c4:	460b      	mov	r3, r1
 80165c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80165c8:	79fb      	ldrb	r3, [r7, #7]
 80165ca:	4a09      	ldr	r2, [pc, #36]	; (80165f0 <disk_ioctl+0x38>)
 80165cc:	009b      	lsls	r3, r3, #2
 80165ce:	4413      	add	r3, r2
 80165d0:	685b      	ldr	r3, [r3, #4]
 80165d2:	691b      	ldr	r3, [r3, #16]
 80165d4:	79fa      	ldrb	r2, [r7, #7]
 80165d6:	4906      	ldr	r1, [pc, #24]	; (80165f0 <disk_ioctl+0x38>)
 80165d8:	440a      	add	r2, r1
 80165da:	7a10      	ldrb	r0, [r2, #8]
 80165dc:	79b9      	ldrb	r1, [r7, #6]
 80165de:	683a      	ldr	r2, [r7, #0]
 80165e0:	4798      	blx	r3
 80165e2:	4603      	mov	r3, r0
 80165e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}
 80165f0:	240018e4 	.word	0x240018e4

080165f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80165f4:	b480      	push	{r7}
 80165f6:	b085      	sub	sp, #20
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	3301      	adds	r3, #1
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016604:	89fb      	ldrh	r3, [r7, #14]
 8016606:	021b      	lsls	r3, r3, #8
 8016608:	b21a      	sxth	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	b21b      	sxth	r3, r3
 8016610:	4313      	orrs	r3, r2
 8016612:	b21b      	sxth	r3, r3
 8016614:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016616:	89fb      	ldrh	r3, [r7, #14]
}
 8016618:	4618      	mov	r0, r3
 801661a:	3714      	adds	r7, #20
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016624:	b480      	push	{r7}
 8016626:	b085      	sub	sp, #20
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3303      	adds	r3, #3
 8016630:	781b      	ldrb	r3, [r3, #0]
 8016632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	021b      	lsls	r3, r3, #8
 8016638:	687a      	ldr	r2, [r7, #4]
 801663a:	3202      	adds	r2, #2
 801663c:	7812      	ldrb	r2, [r2, #0]
 801663e:	4313      	orrs	r3, r2
 8016640:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	021b      	lsls	r3, r3, #8
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	3201      	adds	r2, #1
 801664a:	7812      	ldrb	r2, [r2, #0]
 801664c:	4313      	orrs	r3, r2
 801664e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	021b      	lsls	r3, r3, #8
 8016654:	687a      	ldr	r2, [r7, #4]
 8016656:	7812      	ldrb	r2, [r2, #0]
 8016658:	4313      	orrs	r3, r2
 801665a:	60fb      	str	r3, [r7, #12]
	return rv;
 801665c:	68fb      	ldr	r3, [r7, #12]
}
 801665e:	4618      	mov	r0, r3
 8016660:	3714      	adds	r7, #20
 8016662:	46bd      	mov	sp, r7
 8016664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016668:	4770      	bx	lr

0801666a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801666a:	b480      	push	{r7}
 801666c:	b083      	sub	sp, #12
 801666e:	af00      	add	r7, sp, #0
 8016670:	6078      	str	r0, [r7, #4]
 8016672:	460b      	mov	r3, r1
 8016674:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	1c5a      	adds	r2, r3, #1
 801667a:	607a      	str	r2, [r7, #4]
 801667c:	887a      	ldrh	r2, [r7, #2]
 801667e:	b2d2      	uxtb	r2, r2
 8016680:	701a      	strb	r2, [r3, #0]
 8016682:	887b      	ldrh	r3, [r7, #2]
 8016684:	0a1b      	lsrs	r3, r3, #8
 8016686:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	1c5a      	adds	r2, r3, #1
 801668c:	607a      	str	r2, [r7, #4]
 801668e:	887a      	ldrh	r2, [r7, #2]
 8016690:	b2d2      	uxtb	r2, r2
 8016692:	701a      	strb	r2, [r3, #0]
}
 8016694:	bf00      	nop
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr

080166a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	1c5a      	adds	r2, r3, #1
 80166ae:	607a      	str	r2, [r7, #4]
 80166b0:	683a      	ldr	r2, [r7, #0]
 80166b2:	b2d2      	uxtb	r2, r2
 80166b4:	701a      	strb	r2, [r3, #0]
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	0a1b      	lsrs	r3, r3, #8
 80166ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	1c5a      	adds	r2, r3, #1
 80166c0:	607a      	str	r2, [r7, #4]
 80166c2:	683a      	ldr	r2, [r7, #0]
 80166c4:	b2d2      	uxtb	r2, r2
 80166c6:	701a      	strb	r2, [r3, #0]
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	0a1b      	lsrs	r3, r3, #8
 80166cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	607a      	str	r2, [r7, #4]
 80166d4:	683a      	ldr	r2, [r7, #0]
 80166d6:	b2d2      	uxtb	r2, r2
 80166d8:	701a      	strb	r2, [r3, #0]
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	0a1b      	lsrs	r3, r3, #8
 80166de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	1c5a      	adds	r2, r3, #1
 80166e4:	607a      	str	r2, [r7, #4]
 80166e6:	683a      	ldr	r2, [r7, #0]
 80166e8:	b2d2      	uxtb	r2, r2
 80166ea:	701a      	strb	r2, [r3, #0]
}
 80166ec:	bf00      	nop
 80166ee:	370c      	adds	r7, #12
 80166f0:	46bd      	mov	sp, r7
 80166f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f6:	4770      	bx	lr

080166f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80166f8:	b480      	push	{r7}
 80166fa:	b087      	sub	sp, #28
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d00d      	beq.n	801672e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016712:	693a      	ldr	r2, [r7, #16]
 8016714:	1c53      	adds	r3, r2, #1
 8016716:	613b      	str	r3, [r7, #16]
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	1c59      	adds	r1, r3, #1
 801671c:	6179      	str	r1, [r7, #20]
 801671e:	7812      	ldrb	r2, [r2, #0]
 8016720:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	3b01      	subs	r3, #1
 8016726:	607b      	str	r3, [r7, #4]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d1f1      	bne.n	8016712 <mem_cpy+0x1a>
	}
}
 801672e:	bf00      	nop
 8016730:	371c      	adds	r7, #28
 8016732:	46bd      	mov	sp, r7
 8016734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016738:	4770      	bx	lr

0801673a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801673a:	b480      	push	{r7}
 801673c:	b087      	sub	sp, #28
 801673e:	af00      	add	r7, sp, #0
 8016740:	60f8      	str	r0, [r7, #12]
 8016742:	60b9      	str	r1, [r7, #8]
 8016744:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	1c5a      	adds	r2, r3, #1
 801674e:	617a      	str	r2, [r7, #20]
 8016750:	68ba      	ldr	r2, [r7, #8]
 8016752:	b2d2      	uxtb	r2, r2
 8016754:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	3b01      	subs	r3, #1
 801675a:	607b      	str	r3, [r7, #4]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1f3      	bne.n	801674a <mem_set+0x10>
}
 8016762:	bf00      	nop
 8016764:	bf00      	nop
 8016766:	371c      	adds	r7, #28
 8016768:	46bd      	mov	sp, r7
 801676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676e:	4770      	bx	lr

08016770 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016770:	b480      	push	{r7}
 8016772:	b089      	sub	sp, #36	; 0x24
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	61fb      	str	r3, [r7, #28]
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016784:	2300      	movs	r3, #0
 8016786:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016788:	69fb      	ldr	r3, [r7, #28]
 801678a:	1c5a      	adds	r2, r3, #1
 801678c:	61fa      	str	r2, [r7, #28]
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	4619      	mov	r1, r3
 8016792:	69bb      	ldr	r3, [r7, #24]
 8016794:	1c5a      	adds	r2, r3, #1
 8016796:	61ba      	str	r2, [r7, #24]
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	1acb      	subs	r3, r1, r3
 801679c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	3b01      	subs	r3, #1
 80167a2:	607b      	str	r3, [r7, #4]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d002      	beq.n	80167b0 <mem_cmp+0x40>
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d0eb      	beq.n	8016788 <mem_cmp+0x18>

	return r;
 80167b0:	697b      	ldr	r3, [r7, #20]
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3724      	adds	r7, #36	; 0x24
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr

080167be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80167be:	b480      	push	{r7}
 80167c0:	b083      	sub	sp, #12
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
 80167c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80167c8:	e002      	b.n	80167d0 <chk_chr+0x12>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	3301      	adds	r3, #1
 80167ce:	607b      	str	r3, [r7, #4]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	781b      	ldrb	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d005      	beq.n	80167e4 <chk_chr+0x26>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	461a      	mov	r2, r3
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d1f2      	bne.n	80167ca <chk_chr+0xc>
	return *str;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	781b      	ldrb	r3, [r3, #0]
}
 80167e8:	4618      	mov	r0, r3
 80167ea:	370c      	adds	r7, #12
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80167fe:	2300      	movs	r3, #0
 8016800:	60bb      	str	r3, [r7, #8]
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	60fb      	str	r3, [r7, #12]
 8016806:	e029      	b.n	801685c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016808:	4a27      	ldr	r2, [pc, #156]	; (80168a8 <chk_lock+0xb4>)
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	011b      	lsls	r3, r3, #4
 801680e:	4413      	add	r3, r2
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d01d      	beq.n	8016852 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016816:	4a24      	ldr	r2, [pc, #144]	; (80168a8 <chk_lock+0xb4>)
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	011b      	lsls	r3, r3, #4
 801681c:	4413      	add	r3, r2
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	429a      	cmp	r2, r3
 8016826:	d116      	bne.n	8016856 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016828:	4a1f      	ldr	r2, [pc, #124]	; (80168a8 <chk_lock+0xb4>)
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	011b      	lsls	r3, r3, #4
 801682e:	4413      	add	r3, r2
 8016830:	3304      	adds	r3, #4
 8016832:	681a      	ldr	r2, [r3, #0]
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016838:	429a      	cmp	r2, r3
 801683a:	d10c      	bne.n	8016856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801683c:	4a1a      	ldr	r2, [pc, #104]	; (80168a8 <chk_lock+0xb4>)
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	011b      	lsls	r3, r3, #4
 8016842:	4413      	add	r3, r2
 8016844:	3308      	adds	r3, #8
 8016846:	681a      	ldr	r2, [r3, #0]
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801684c:	429a      	cmp	r2, r3
 801684e:	d102      	bne.n	8016856 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016850:	e007      	b.n	8016862 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016852:	2301      	movs	r3, #1
 8016854:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	3301      	adds	r3, #1
 801685a:	60fb      	str	r3, [r7, #12]
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2b01      	cmp	r3, #1
 8016860:	d9d2      	bls.n	8016808 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	2b02      	cmp	r3, #2
 8016866:	d109      	bne.n	801687c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d102      	bne.n	8016874 <chk_lock+0x80>
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	2b02      	cmp	r3, #2
 8016872:	d101      	bne.n	8016878 <chk_lock+0x84>
 8016874:	2300      	movs	r3, #0
 8016876:	e010      	b.n	801689a <chk_lock+0xa6>
 8016878:	2312      	movs	r3, #18
 801687a:	e00e      	b.n	801689a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d108      	bne.n	8016894 <chk_lock+0xa0>
 8016882:	4a09      	ldr	r2, [pc, #36]	; (80168a8 <chk_lock+0xb4>)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	011b      	lsls	r3, r3, #4
 8016888:	4413      	add	r3, r2
 801688a:	330c      	adds	r3, #12
 801688c:	881b      	ldrh	r3, [r3, #0]
 801688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016892:	d101      	bne.n	8016898 <chk_lock+0xa4>
 8016894:	2310      	movs	r3, #16
 8016896:	e000      	b.n	801689a <chk_lock+0xa6>
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3714      	adds	r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	240016c4 	.word	0x240016c4

080168ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80168b2:	2300      	movs	r3, #0
 80168b4:	607b      	str	r3, [r7, #4]
 80168b6:	e002      	b.n	80168be <enq_lock+0x12>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	3301      	adds	r3, #1
 80168bc:	607b      	str	r3, [r7, #4]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d806      	bhi.n	80168d2 <enq_lock+0x26>
 80168c4:	4a09      	ldr	r2, [pc, #36]	; (80168ec <enq_lock+0x40>)
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	011b      	lsls	r3, r3, #4
 80168ca:	4413      	add	r3, r2
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d1f2      	bne.n	80168b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2b02      	cmp	r3, #2
 80168d6:	bf14      	ite	ne
 80168d8:	2301      	movne	r3, #1
 80168da:	2300      	moveq	r3, #0
 80168dc:	b2db      	uxtb	r3, r3
}
 80168de:	4618      	mov	r0, r3
 80168e0:	370c      	adds	r7, #12
 80168e2:	46bd      	mov	sp, r7
 80168e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e8:	4770      	bx	lr
 80168ea:	bf00      	nop
 80168ec:	240016c4 	.word	0x240016c4

080168f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80168f0:	b480      	push	{r7}
 80168f2:	b085      	sub	sp, #20
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80168fa:	2300      	movs	r3, #0
 80168fc:	60fb      	str	r3, [r7, #12]
 80168fe:	e01f      	b.n	8016940 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016900:	4a41      	ldr	r2, [pc, #260]	; (8016a08 <inc_lock+0x118>)
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	011b      	lsls	r3, r3, #4
 8016906:	4413      	add	r3, r2
 8016908:	681a      	ldr	r2, [r3, #0]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	429a      	cmp	r2, r3
 8016910:	d113      	bne.n	801693a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016912:	4a3d      	ldr	r2, [pc, #244]	; (8016a08 <inc_lock+0x118>)
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	011b      	lsls	r3, r3, #4
 8016918:	4413      	add	r3, r2
 801691a:	3304      	adds	r3, #4
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016922:	429a      	cmp	r2, r3
 8016924:	d109      	bne.n	801693a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8016926:	4a38      	ldr	r2, [pc, #224]	; (8016a08 <inc_lock+0x118>)
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	011b      	lsls	r3, r3, #4
 801692c:	4413      	add	r3, r2
 801692e:	3308      	adds	r3, #8
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8016936:	429a      	cmp	r2, r3
 8016938:	d006      	beq.n	8016948 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	3301      	adds	r3, #1
 801693e:	60fb      	str	r3, [r7, #12]
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	2b01      	cmp	r3, #1
 8016944:	d9dc      	bls.n	8016900 <inc_lock+0x10>
 8016946:	e000      	b.n	801694a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8016948:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	2b02      	cmp	r3, #2
 801694e:	d132      	bne.n	80169b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016950:	2300      	movs	r3, #0
 8016952:	60fb      	str	r3, [r7, #12]
 8016954:	e002      	b.n	801695c <inc_lock+0x6c>
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	3301      	adds	r3, #1
 801695a:	60fb      	str	r3, [r7, #12]
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	2b01      	cmp	r3, #1
 8016960:	d806      	bhi.n	8016970 <inc_lock+0x80>
 8016962:	4a29      	ldr	r2, [pc, #164]	; (8016a08 <inc_lock+0x118>)
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	011b      	lsls	r3, r3, #4
 8016968:	4413      	add	r3, r2
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d1f2      	bne.n	8016956 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2b02      	cmp	r3, #2
 8016974:	d101      	bne.n	801697a <inc_lock+0x8a>
 8016976:	2300      	movs	r3, #0
 8016978:	e040      	b.n	80169fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	4922      	ldr	r1, [pc, #136]	; (8016a08 <inc_lock+0x118>)
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	011b      	lsls	r3, r3, #4
 8016984:	440b      	add	r3, r1
 8016986:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	689a      	ldr	r2, [r3, #8]
 801698c:	491e      	ldr	r1, [pc, #120]	; (8016a08 <inc_lock+0x118>)
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	011b      	lsls	r3, r3, #4
 8016992:	440b      	add	r3, r1
 8016994:	3304      	adds	r3, #4
 8016996:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	695a      	ldr	r2, [r3, #20]
 801699c:	491a      	ldr	r1, [pc, #104]	; (8016a08 <inc_lock+0x118>)
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	011b      	lsls	r3, r3, #4
 80169a2:	440b      	add	r3, r1
 80169a4:	3308      	adds	r3, #8
 80169a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80169a8:	4a17      	ldr	r2, [pc, #92]	; (8016a08 <inc_lock+0x118>)
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	011b      	lsls	r3, r3, #4
 80169ae:	4413      	add	r3, r2
 80169b0:	330c      	adds	r3, #12
 80169b2:	2200      	movs	r2, #0
 80169b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d009      	beq.n	80169d0 <inc_lock+0xe0>
 80169bc:	4a12      	ldr	r2, [pc, #72]	; (8016a08 <inc_lock+0x118>)
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	011b      	lsls	r3, r3, #4
 80169c2:	4413      	add	r3, r2
 80169c4:	330c      	adds	r3, #12
 80169c6:	881b      	ldrh	r3, [r3, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d001      	beq.n	80169d0 <inc_lock+0xe0>
 80169cc:	2300      	movs	r3, #0
 80169ce:	e015      	b.n	80169fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d108      	bne.n	80169e8 <inc_lock+0xf8>
 80169d6:	4a0c      	ldr	r2, [pc, #48]	; (8016a08 <inc_lock+0x118>)
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	011b      	lsls	r3, r3, #4
 80169dc:	4413      	add	r3, r2
 80169de:	330c      	adds	r3, #12
 80169e0:	881b      	ldrh	r3, [r3, #0]
 80169e2:	3301      	adds	r3, #1
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	e001      	b.n	80169ec <inc_lock+0xfc>
 80169e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80169ec:	4906      	ldr	r1, [pc, #24]	; (8016a08 <inc_lock+0x118>)
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	011b      	lsls	r3, r3, #4
 80169f2:	440b      	add	r3, r1
 80169f4:	330c      	adds	r3, #12
 80169f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	3301      	adds	r3, #1
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3714      	adds	r7, #20
 8016a00:	46bd      	mov	sp, r7
 8016a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a06:	4770      	bx	lr
 8016a08:	240016c4 	.word	0x240016c4

08016a0c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016a0c:	b480      	push	{r7}
 8016a0e:	b085      	sub	sp, #20
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	3b01      	subs	r3, #1
 8016a18:	607b      	str	r3, [r7, #4]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d825      	bhi.n	8016a6c <dec_lock+0x60>
		n = Files[i].ctr;
 8016a20:	4a17      	ldr	r2, [pc, #92]	; (8016a80 <dec_lock+0x74>)
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	011b      	lsls	r3, r3, #4
 8016a26:	4413      	add	r3, r2
 8016a28:	330c      	adds	r3, #12
 8016a2a:	881b      	ldrh	r3, [r3, #0]
 8016a2c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016a2e:	89fb      	ldrh	r3, [r7, #14]
 8016a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a34:	d101      	bne.n	8016a3a <dec_lock+0x2e>
 8016a36:	2300      	movs	r3, #0
 8016a38:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016a3a:	89fb      	ldrh	r3, [r7, #14]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d002      	beq.n	8016a46 <dec_lock+0x3a>
 8016a40:	89fb      	ldrh	r3, [r7, #14]
 8016a42:	3b01      	subs	r3, #1
 8016a44:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8016a46:	4a0e      	ldr	r2, [pc, #56]	; (8016a80 <dec_lock+0x74>)
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	011b      	lsls	r3, r3, #4
 8016a4c:	4413      	add	r3, r2
 8016a4e:	330c      	adds	r3, #12
 8016a50:	89fa      	ldrh	r2, [r7, #14]
 8016a52:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016a54:	89fb      	ldrh	r3, [r7, #14]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d105      	bne.n	8016a66 <dec_lock+0x5a>
 8016a5a:	4a09      	ldr	r2, [pc, #36]	; (8016a80 <dec_lock+0x74>)
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	011b      	lsls	r3, r3, #4
 8016a60:	4413      	add	r3, r2
 8016a62:	2200      	movs	r2, #0
 8016a64:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8016a66:	2300      	movs	r3, #0
 8016a68:	737b      	strb	r3, [r7, #13]
 8016a6a:	e001      	b.n	8016a70 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016a6c:	2302      	movs	r3, #2
 8016a6e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016a70:	7b7b      	ldrb	r3, [r7, #13]
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3714      	adds	r7, #20
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr
 8016a7e:	bf00      	nop
 8016a80:	240016c4 	.word	0x240016c4

08016a84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016a84:	b480      	push	{r7}
 8016a86:	b085      	sub	sp, #20
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	60fb      	str	r3, [r7, #12]
 8016a90:	e010      	b.n	8016ab4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016a92:	4a0d      	ldr	r2, [pc, #52]	; (8016ac8 <clear_lock+0x44>)
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	011b      	lsls	r3, r3, #4
 8016a98:	4413      	add	r3, r2
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	d105      	bne.n	8016aae <clear_lock+0x2a>
 8016aa2:	4a09      	ldr	r2, [pc, #36]	; (8016ac8 <clear_lock+0x44>)
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	011b      	lsls	r3, r3, #4
 8016aa8:	4413      	add	r3, r2
 8016aaa:	2200      	movs	r2, #0
 8016aac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	2b01      	cmp	r3, #1
 8016ab8:	d9eb      	bls.n	8016a92 <clear_lock+0xe>
	}
}
 8016aba:	bf00      	nop
 8016abc:	bf00      	nop
 8016abe:	3714      	adds	r7, #20
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac6:	4770      	bx	lr
 8016ac8:	240016c4 	.word	0x240016c4

08016acc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b086      	sub	sp, #24
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	78db      	ldrb	r3, [r3, #3]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d034      	beq.n	8016b4a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ae4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	7858      	ldrb	r0, [r3, #1]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016af0:	2301      	movs	r3, #1
 8016af2:	697a      	ldr	r2, [r7, #20]
 8016af4:	f7ff fd40 	bl	8016578 <disk_write>
 8016af8:	4603      	mov	r3, r0
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d002      	beq.n	8016b04 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016afe:	2301      	movs	r3, #1
 8016b00:	73fb      	strb	r3, [r7, #15]
 8016b02:	e022      	b.n	8016b4a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	2200      	movs	r2, #0
 8016b08:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b0e:	697a      	ldr	r2, [r7, #20]
 8016b10:	1ad2      	subs	r2, r2, r3
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	6a1b      	ldr	r3, [r3, #32]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d217      	bcs.n	8016b4a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	789b      	ldrb	r3, [r3, #2]
 8016b1e:	613b      	str	r3, [r7, #16]
 8016b20:	e010      	b.n	8016b44 <sync_window+0x78>
					wsect += fs->fsize;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6a1b      	ldr	r3, [r3, #32]
 8016b26:	697a      	ldr	r2, [r7, #20]
 8016b28:	4413      	add	r3, r2
 8016b2a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	7858      	ldrb	r0, [r3, #1]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016b36:	2301      	movs	r3, #1
 8016b38:	697a      	ldr	r2, [r7, #20]
 8016b3a:	f7ff fd1d 	bl	8016578 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	3b01      	subs	r3, #1
 8016b42:	613b      	str	r3, [r7, #16]
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	2b01      	cmp	r3, #1
 8016b48:	d8eb      	bhi.n	8016b22 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3718      	adds	r7, #24
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b66:	683a      	ldr	r2, [r7, #0]
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d01b      	beq.n	8016ba4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f7ff ffad 	bl	8016acc <sync_window>
 8016b72:	4603      	mov	r3, r0
 8016b74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d113      	bne.n	8016ba4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	7858      	ldrb	r0, [r3, #1]
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016b86:	2301      	movs	r3, #1
 8016b88:	683a      	ldr	r2, [r7, #0]
 8016b8a:	f7ff fcd5 	bl	8016538 <disk_read>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d004      	beq.n	8016b9e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016b94:	f04f 33ff 	mov.w	r3, #4294967295
 8016b98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	683a      	ldr	r2, [r7, #0]
 8016ba2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8016ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	3710      	adds	r7, #16
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
	...

08016bb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f7ff ff87 	bl	8016acc <sync_window>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016bc2:	7bfb      	ldrb	r3, [r7, #15]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d159      	bne.n	8016c7c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	2b03      	cmp	r3, #3
 8016bce:	d149      	bne.n	8016c64 <sync_fs+0xb4>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	791b      	ldrb	r3, [r3, #4]
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	d145      	bne.n	8016c64 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	899b      	ldrh	r3, [r3, #12]
 8016be2:	461a      	mov	r2, r3
 8016be4:	2100      	movs	r1, #0
 8016be6:	f7ff fda8 	bl	801673a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	3338      	adds	r3, #56	; 0x38
 8016bee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016bf2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7ff fd37 	bl	801666a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	3338      	adds	r3, #56	; 0x38
 8016c00:	4921      	ldr	r1, [pc, #132]	; (8016c88 <sync_fs+0xd8>)
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7ff fd4c 	bl	80166a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	3338      	adds	r3, #56	; 0x38
 8016c0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016c10:	491e      	ldr	r1, [pc, #120]	; (8016c8c <sync_fs+0xdc>)
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7ff fd44 	bl	80166a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	3338      	adds	r3, #56	; 0x38
 8016c1c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	699b      	ldr	r3, [r3, #24]
 8016c24:	4619      	mov	r1, r3
 8016c26:	4610      	mov	r0, r2
 8016c28:	f7ff fd3a 	bl	80166a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	3338      	adds	r3, #56	; 0x38
 8016c30:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	695b      	ldr	r3, [r3, #20]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	f7ff fd30 	bl	80166a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c44:	1c5a      	adds	r2, r3, #1
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	7858      	ldrb	r0, [r3, #1]
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016c58:	2301      	movs	r3, #1
 8016c5a:	f7ff fc8d 	bl	8016578 <disk_write>
			fs->fsi_flag = 0;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2200      	movs	r2, #0
 8016c62:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	785b      	ldrb	r3, [r3, #1]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f7ff fca3 	bl	80165b8 <disk_ioctl>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d001      	beq.n	8016c7c <sync_fs+0xcc>
 8016c78:	2301      	movs	r3, #1
 8016c7a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3710      	adds	r7, #16
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}
 8016c86:	bf00      	nop
 8016c88:	41615252 	.word	0x41615252
 8016c8c:	61417272 	.word	0x61417272

08016c90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	3b02      	subs	r3, #2
 8016c9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	69db      	ldr	r3, [r3, #28]
 8016ca4:	3b02      	subs	r3, #2
 8016ca6:	683a      	ldr	r2, [r7, #0]
 8016ca8:	429a      	cmp	r2, r3
 8016caa:	d301      	bcc.n	8016cb0 <clust2sect+0x20>
 8016cac:	2300      	movs	r3, #0
 8016cae:	e008      	b.n	8016cc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	895b      	ldrh	r3, [r3, #10]
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	fb03 f202 	mul.w	r2, r3, r2
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cc0:	4413      	add	r3, r2
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	370c      	adds	r7, #12
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr

08016cce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016cce:	b580      	push	{r7, lr}
 8016cd0:	b086      	sub	sp, #24
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	6078      	str	r0, [r7, #4]
 8016cd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016cde:	683b      	ldr	r3, [r7, #0]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d904      	bls.n	8016cee <get_fat+0x20>
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	69db      	ldr	r3, [r3, #28]
 8016ce8:	683a      	ldr	r2, [r7, #0]
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d302      	bcc.n	8016cf4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016cee:	2301      	movs	r3, #1
 8016cf0:	617b      	str	r3, [r7, #20]
 8016cf2:	e0bb      	b.n	8016e6c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8016cf8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016cfa:	693b      	ldr	r3, [r7, #16]
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	2b03      	cmp	r3, #3
 8016d00:	f000 8083 	beq.w	8016e0a <get_fat+0x13c>
 8016d04:	2b03      	cmp	r3, #3
 8016d06:	f300 80a7 	bgt.w	8016e58 <get_fat+0x18a>
 8016d0a:	2b01      	cmp	r3, #1
 8016d0c:	d002      	beq.n	8016d14 <get_fat+0x46>
 8016d0e:	2b02      	cmp	r3, #2
 8016d10:	d056      	beq.n	8016dc0 <get_fat+0xf2>
 8016d12:	e0a1      	b.n	8016e58 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	60fb      	str	r3, [r7, #12]
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	085b      	lsrs	r3, r3, #1
 8016d1c:	68fa      	ldr	r2, [r7, #12]
 8016d1e:	4413      	add	r3, r2
 8016d20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d22:	693b      	ldr	r3, [r7, #16]
 8016d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	899b      	ldrh	r3, [r3, #12]
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d32:	4413      	add	r3, r2
 8016d34:	4619      	mov	r1, r3
 8016d36:	6938      	ldr	r0, [r7, #16]
 8016d38:	f7ff ff0c 	bl	8016b54 <move_window>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	f040 808d 	bne.w	8016e5e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	1c5a      	adds	r2, r3, #1
 8016d48:	60fa      	str	r2, [r7, #12]
 8016d4a:	693a      	ldr	r2, [r7, #16]
 8016d4c:	8992      	ldrh	r2, [r2, #12]
 8016d4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d52:	fb01 f202 	mul.w	r2, r1, r2
 8016d56:	1a9b      	subs	r3, r3, r2
 8016d58:	693a      	ldr	r2, [r7, #16]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	899b      	ldrh	r3, [r3, #12]
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d72:	4413      	add	r3, r2
 8016d74:	4619      	mov	r1, r3
 8016d76:	6938      	ldr	r0, [r7, #16]
 8016d78:	f7ff feec 	bl	8016b54 <move_window>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d16f      	bne.n	8016e62 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	899b      	ldrh	r3, [r3, #12]
 8016d86:	461a      	mov	r2, r3
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d8e:	fb01 f202 	mul.w	r2, r1, r2
 8016d92:	1a9b      	subs	r3, r3, r2
 8016d94:	693a      	ldr	r2, [r7, #16]
 8016d96:	4413      	add	r3, r2
 8016d98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016d9c:	021b      	lsls	r3, r3, #8
 8016d9e:	461a      	mov	r2, r3
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	4313      	orrs	r3, r2
 8016da4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	f003 0301 	and.w	r3, r3, #1
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d002      	beq.n	8016db6 <get_fat+0xe8>
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	091b      	lsrs	r3, r3, #4
 8016db4:	e002      	b.n	8016dbc <get_fat+0xee>
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016dbc:	617b      	str	r3, [r7, #20]
			break;
 8016dbe:	e055      	b.n	8016e6c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	899b      	ldrh	r3, [r3, #12]
 8016dc8:	085b      	lsrs	r3, r3, #1
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	4619      	mov	r1, r3
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016dd4:	4413      	add	r3, r2
 8016dd6:	4619      	mov	r1, r3
 8016dd8:	6938      	ldr	r0, [r7, #16]
 8016dda:	f7ff febb 	bl	8016b54 <move_window>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d140      	bne.n	8016e66 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	005b      	lsls	r3, r3, #1
 8016dee:	693a      	ldr	r2, [r7, #16]
 8016df0:	8992      	ldrh	r2, [r2, #12]
 8016df2:	fbb3 f0f2 	udiv	r0, r3, r2
 8016df6:	fb00 f202 	mul.w	r2, r0, r2
 8016dfa:	1a9b      	subs	r3, r3, r2
 8016dfc:	440b      	add	r3, r1
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7ff fbf8 	bl	80165f4 <ld_word>
 8016e04:	4603      	mov	r3, r0
 8016e06:	617b      	str	r3, [r7, #20]
			break;
 8016e08:	e030      	b.n	8016e6c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	899b      	ldrh	r3, [r3, #12]
 8016e12:	089b      	lsrs	r3, r3, #2
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	4619      	mov	r1, r3
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8016e1e:	4413      	add	r3, r2
 8016e20:	4619      	mov	r1, r3
 8016e22:	6938      	ldr	r0, [r7, #16]
 8016e24:	f7ff fe96 	bl	8016b54 <move_window>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d11d      	bne.n	8016e6a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	693a      	ldr	r2, [r7, #16]
 8016e3a:	8992      	ldrh	r2, [r2, #12]
 8016e3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016e40:	fb00 f202 	mul.w	r2, r0, r2
 8016e44:	1a9b      	subs	r3, r3, r2
 8016e46:	440b      	add	r3, r1
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7ff fbeb 	bl	8016624 <ld_dword>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016e54:	617b      	str	r3, [r7, #20]
			break;
 8016e56:	e009      	b.n	8016e6c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016e58:	2301      	movs	r3, #1
 8016e5a:	617b      	str	r3, [r7, #20]
 8016e5c:	e006      	b.n	8016e6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016e5e:	bf00      	nop
 8016e60:	e004      	b.n	8016e6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016e62:	bf00      	nop
 8016e64:	e002      	b.n	8016e6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016e66:	bf00      	nop
 8016e68:	e000      	b.n	8016e6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016e6a:	bf00      	nop
		}
	}

	return val;
 8016e6c:	697b      	ldr	r3, [r7, #20]
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3718      	adds	r7, #24
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}

08016e76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016e76:	b590      	push	{r4, r7, lr}
 8016e78:	b089      	sub	sp, #36	; 0x24
 8016e7a:	af00      	add	r7, sp, #0
 8016e7c:	60f8      	str	r0, [r7, #12]
 8016e7e:	60b9      	str	r1, [r7, #8]
 8016e80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016e82:	2302      	movs	r3, #2
 8016e84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	2b01      	cmp	r3, #1
 8016e8a:	f240 8109 	bls.w	80170a0 <put_fat+0x22a>
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	69db      	ldr	r3, [r3, #28]
 8016e92:	68ba      	ldr	r2, [r7, #8]
 8016e94:	429a      	cmp	r2, r3
 8016e96:	f080 8103 	bcs.w	80170a0 <put_fat+0x22a>
		switch (fs->fs_type) {
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	2b03      	cmp	r3, #3
 8016ea0:	f000 80b6 	beq.w	8017010 <put_fat+0x19a>
 8016ea4:	2b03      	cmp	r3, #3
 8016ea6:	f300 80fb 	bgt.w	80170a0 <put_fat+0x22a>
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	d003      	beq.n	8016eb6 <put_fat+0x40>
 8016eae:	2b02      	cmp	r3, #2
 8016eb0:	f000 8083 	beq.w	8016fba <put_fat+0x144>
 8016eb4:	e0f4      	b.n	80170a0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	61bb      	str	r3, [r7, #24]
 8016eba:	69bb      	ldr	r3, [r7, #24]
 8016ebc:	085b      	lsrs	r3, r3, #1
 8016ebe:	69ba      	ldr	r2, [r7, #24]
 8016ec0:	4413      	add	r3, r2
 8016ec2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	899b      	ldrh	r3, [r3, #12]
 8016ecc:	4619      	mov	r1, r3
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8016ed4:	4413      	add	r3, r2
 8016ed6:	4619      	mov	r1, r3
 8016ed8:	68f8      	ldr	r0, [r7, #12]
 8016eda:	f7ff fe3b 	bl	8016b54 <move_window>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ee2:	7ffb      	ldrb	r3, [r7, #31]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	f040 80d4 	bne.w	8017092 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016ef0:	69bb      	ldr	r3, [r7, #24]
 8016ef2:	1c5a      	adds	r2, r3, #1
 8016ef4:	61ba      	str	r2, [r7, #24]
 8016ef6:	68fa      	ldr	r2, [r7, #12]
 8016ef8:	8992      	ldrh	r2, [r2, #12]
 8016efa:	fbb3 f0f2 	udiv	r0, r3, r2
 8016efe:	fb00 f202 	mul.w	r2, r0, r2
 8016f02:	1a9b      	subs	r3, r3, r2
 8016f04:	440b      	add	r3, r1
 8016f06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	f003 0301 	and.w	r3, r3, #1
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d00d      	beq.n	8016f2e <put_fat+0xb8>
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	781b      	ldrb	r3, [r3, #0]
 8016f16:	b25b      	sxtb	r3, r3
 8016f18:	f003 030f 	and.w	r3, r3, #15
 8016f1c:	b25a      	sxtb	r2, r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	b2db      	uxtb	r3, r3
 8016f22:	011b      	lsls	r3, r3, #4
 8016f24:	b25b      	sxtb	r3, r3
 8016f26:	4313      	orrs	r3, r2
 8016f28:	b25b      	sxtb	r3, r3
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	e001      	b.n	8016f32 <put_fat+0xbc>
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	b2db      	uxtb	r3, r3
 8016f32:	697a      	ldr	r2, [r7, #20]
 8016f34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	2201      	movs	r2, #1
 8016f3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	899b      	ldrh	r3, [r3, #12]
 8016f44:	4619      	mov	r1, r3
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	fbb3 f3f1 	udiv	r3, r3, r1
 8016f4c:	4413      	add	r3, r2
 8016f4e:	4619      	mov	r1, r3
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f7ff fdff 	bl	8016b54 <move_window>
 8016f56:	4603      	mov	r3, r0
 8016f58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016f5a:	7ffb      	ldrb	r3, [r7, #31]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	f040 809a 	bne.w	8017096 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	899b      	ldrh	r3, [r3, #12]
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	69bb      	ldr	r3, [r7, #24]
 8016f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f74:	fb00 f202 	mul.w	r2, r0, r2
 8016f78:	1a9b      	subs	r3, r3, r2
 8016f7a:	440b      	add	r3, r1
 8016f7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	f003 0301 	and.w	r3, r3, #1
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d003      	beq.n	8016f90 <put_fat+0x11a>
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	091b      	lsrs	r3, r3, #4
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	e00e      	b.n	8016fae <put_fat+0x138>
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	781b      	ldrb	r3, [r3, #0]
 8016f94:	b25b      	sxtb	r3, r3
 8016f96:	f023 030f 	bic.w	r3, r3, #15
 8016f9a:	b25a      	sxtb	r2, r3
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	0a1b      	lsrs	r3, r3, #8
 8016fa0:	b25b      	sxtb	r3, r3
 8016fa2:	f003 030f 	and.w	r3, r3, #15
 8016fa6:	b25b      	sxtb	r3, r3
 8016fa8:	4313      	orrs	r3, r2
 8016faa:	b25b      	sxtb	r3, r3
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	697a      	ldr	r2, [r7, #20]
 8016fb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	2201      	movs	r2, #1
 8016fb6:	70da      	strb	r2, [r3, #3]
			break;
 8016fb8:	e072      	b.n	80170a0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016fba:	68fb      	ldr	r3, [r7, #12]
 8016fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	899b      	ldrh	r3, [r3, #12]
 8016fc2:	085b      	lsrs	r3, r3, #1
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8016fce:	4413      	add	r3, r2
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	68f8      	ldr	r0, [r7, #12]
 8016fd4:	f7ff fdbe 	bl	8016b54 <move_window>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016fdc:	7ffb      	ldrb	r3, [r7, #31]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d15b      	bne.n	801709a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016fe8:	68bb      	ldr	r3, [r7, #8]
 8016fea:	005b      	lsls	r3, r3, #1
 8016fec:	68fa      	ldr	r2, [r7, #12]
 8016fee:	8992      	ldrh	r2, [r2, #12]
 8016ff0:	fbb3 f0f2 	udiv	r0, r3, r2
 8016ff4:	fb00 f202 	mul.w	r2, r0, r2
 8016ff8:	1a9b      	subs	r3, r3, r2
 8016ffa:	440b      	add	r3, r1
 8016ffc:	687a      	ldr	r2, [r7, #4]
 8016ffe:	b292      	uxth	r2, r2
 8017000:	4611      	mov	r1, r2
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff fb31 	bl	801666a <st_word>
			fs->wflag = 1;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2201      	movs	r2, #1
 801700c:	70da      	strb	r2, [r3, #3]
			break;
 801700e:	e047      	b.n	80170a0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	899b      	ldrh	r3, [r3, #12]
 8017018:	089b      	lsrs	r3, r3, #2
 801701a:	b29b      	uxth	r3, r3
 801701c:	4619      	mov	r1, r3
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	fbb3 f3f1 	udiv	r3, r3, r1
 8017024:	4413      	add	r3, r2
 8017026:	4619      	mov	r1, r3
 8017028:	68f8      	ldr	r0, [r7, #12]
 801702a:	f7ff fd93 	bl	8016b54 <move_window>
 801702e:	4603      	mov	r3, r0
 8017030:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017032:	7ffb      	ldrb	r3, [r7, #31]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d132      	bne.n	801709e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	68fa      	ldr	r2, [r7, #12]
 801704a:	8992      	ldrh	r2, [r2, #12]
 801704c:	fbb3 f0f2 	udiv	r0, r3, r2
 8017050:	fb00 f202 	mul.w	r2, r0, r2
 8017054:	1a9b      	subs	r3, r3, r2
 8017056:	440b      	add	r3, r1
 8017058:	4618      	mov	r0, r3
 801705a:	f7ff fae3 	bl	8016624 <ld_dword>
 801705e:	4603      	mov	r3, r0
 8017060:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017064:	4323      	orrs	r3, r4
 8017066:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	009b      	lsls	r3, r3, #2
 8017072:	68fa      	ldr	r2, [r7, #12]
 8017074:	8992      	ldrh	r2, [r2, #12]
 8017076:	fbb3 f0f2 	udiv	r0, r3, r2
 801707a:	fb00 f202 	mul.w	r2, r0, r2
 801707e:	1a9b      	subs	r3, r3, r2
 8017080:	440b      	add	r3, r1
 8017082:	6879      	ldr	r1, [r7, #4]
 8017084:	4618      	mov	r0, r3
 8017086:	f7ff fb0b 	bl	80166a0 <st_dword>
			fs->wflag = 1;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	2201      	movs	r2, #1
 801708e:	70da      	strb	r2, [r3, #3]
			break;
 8017090:	e006      	b.n	80170a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017092:	bf00      	nop
 8017094:	e004      	b.n	80170a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 8017096:	bf00      	nop
 8017098:	e002      	b.n	80170a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 801709a:	bf00      	nop
 801709c:	e000      	b.n	80170a0 <put_fat+0x22a>
			if (res != FR_OK) break;
 801709e:	bf00      	nop
		}
	}
	return res;
 80170a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	3724      	adds	r7, #36	; 0x24
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd90      	pop	{r4, r7, pc}

080170aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80170aa:	b580      	push	{r7, lr}
 80170ac:	b088      	sub	sp, #32
 80170ae:	af00      	add	r7, sp, #0
 80170b0:	60f8      	str	r0, [r7, #12]
 80170b2:	60b9      	str	r1, [r7, #8]
 80170b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80170b6:	2300      	movs	r3, #0
 80170b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	2b01      	cmp	r3, #1
 80170c4:	d904      	bls.n	80170d0 <remove_chain+0x26>
 80170c6:	69bb      	ldr	r3, [r7, #24]
 80170c8:	69db      	ldr	r3, [r3, #28]
 80170ca:	68ba      	ldr	r2, [r7, #8]
 80170cc:	429a      	cmp	r2, r3
 80170ce:	d301      	bcc.n	80170d4 <remove_chain+0x2a>
 80170d0:	2302      	movs	r3, #2
 80170d2:	e04b      	b.n	801716c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d00c      	beq.n	80170f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80170da:	f04f 32ff 	mov.w	r2, #4294967295
 80170de:	6879      	ldr	r1, [r7, #4]
 80170e0:	69b8      	ldr	r0, [r7, #24]
 80170e2:	f7ff fec8 	bl	8016e76 <put_fat>
 80170e6:	4603      	mov	r3, r0
 80170e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80170ea:	7ffb      	ldrb	r3, [r7, #31]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d001      	beq.n	80170f4 <remove_chain+0x4a>
 80170f0:	7ffb      	ldrb	r3, [r7, #31]
 80170f2:	e03b      	b.n	801716c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80170f4:	68b9      	ldr	r1, [r7, #8]
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f7ff fde9 	bl	8016cce <get_fat>
 80170fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d031      	beq.n	8017168 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	2b01      	cmp	r3, #1
 8017108:	d101      	bne.n	801710e <remove_chain+0x64>
 801710a:	2302      	movs	r3, #2
 801710c:	e02e      	b.n	801716c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017114:	d101      	bne.n	801711a <remove_chain+0x70>
 8017116:	2301      	movs	r3, #1
 8017118:	e028      	b.n	801716c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801711a:	2200      	movs	r2, #0
 801711c:	68b9      	ldr	r1, [r7, #8]
 801711e:	69b8      	ldr	r0, [r7, #24]
 8017120:	f7ff fea9 	bl	8016e76 <put_fat>
 8017124:	4603      	mov	r3, r0
 8017126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017128:	7ffb      	ldrb	r3, [r7, #31]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d001      	beq.n	8017132 <remove_chain+0x88>
 801712e:	7ffb      	ldrb	r3, [r7, #31]
 8017130:	e01c      	b.n	801716c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017132:	69bb      	ldr	r3, [r7, #24]
 8017134:	699a      	ldr	r2, [r3, #24]
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	69db      	ldr	r3, [r3, #28]
 801713a:	3b02      	subs	r3, #2
 801713c:	429a      	cmp	r2, r3
 801713e:	d20b      	bcs.n	8017158 <remove_chain+0xae>
			fs->free_clst++;
 8017140:	69bb      	ldr	r3, [r7, #24]
 8017142:	699b      	ldr	r3, [r3, #24]
 8017144:	1c5a      	adds	r2, r3, #1
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	791b      	ldrb	r3, [r3, #4]
 801714e:	f043 0301 	orr.w	r3, r3, #1
 8017152:	b2da      	uxtb	r2, r3
 8017154:	69bb      	ldr	r3, [r7, #24]
 8017156:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017158:	697b      	ldr	r3, [r7, #20]
 801715a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801715c:	69bb      	ldr	r3, [r7, #24]
 801715e:	69db      	ldr	r3, [r3, #28]
 8017160:	68ba      	ldr	r2, [r7, #8]
 8017162:	429a      	cmp	r2, r3
 8017164:	d3c6      	bcc.n	80170f4 <remove_chain+0x4a>
 8017166:	e000      	b.n	801716a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017168:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801716a:	2300      	movs	r3, #0
}
 801716c:	4618      	mov	r0, r3
 801716e:	3720      	adds	r7, #32
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b088      	sub	sp, #32
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d10d      	bne.n	80171a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	695b      	ldr	r3, [r3, #20]
 801718e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d004      	beq.n	80171a0 <create_chain+0x2c>
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	69db      	ldr	r3, [r3, #28]
 801719a:	69ba      	ldr	r2, [r7, #24]
 801719c:	429a      	cmp	r2, r3
 801719e:	d31b      	bcc.n	80171d8 <create_chain+0x64>
 80171a0:	2301      	movs	r3, #1
 80171a2:	61bb      	str	r3, [r7, #24]
 80171a4:	e018      	b.n	80171d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80171a6:	6839      	ldr	r1, [r7, #0]
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f7ff fd90 	bl	8016cce <get_fat>
 80171ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2b01      	cmp	r3, #1
 80171b4:	d801      	bhi.n	80171ba <create_chain+0x46>
 80171b6:	2301      	movs	r3, #1
 80171b8:	e070      	b.n	801729c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171c0:	d101      	bne.n	80171c6 <create_chain+0x52>
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	e06a      	b.n	801729c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	69db      	ldr	r3, [r3, #28]
 80171ca:	68fa      	ldr	r2, [r7, #12]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d201      	bcs.n	80171d4 <create_chain+0x60>
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	e063      	b.n	801729c <create_chain+0x128>
		scl = clst;
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80171d8:	69bb      	ldr	r3, [r7, #24]
 80171da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	3301      	adds	r3, #1
 80171e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	69db      	ldr	r3, [r3, #28]
 80171e6:	69fa      	ldr	r2, [r7, #28]
 80171e8:	429a      	cmp	r2, r3
 80171ea:	d307      	bcc.n	80171fc <create_chain+0x88>
				ncl = 2;
 80171ec:	2302      	movs	r3, #2
 80171ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80171f0:	69fa      	ldr	r2, [r7, #28]
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d901      	bls.n	80171fc <create_chain+0x88>
 80171f8:	2300      	movs	r3, #0
 80171fa:	e04f      	b.n	801729c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80171fc:	69f9      	ldr	r1, [r7, #28]
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f7ff fd65 	bl	8016cce <get_fat>
 8017204:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d00e      	beq.n	801722a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	2b01      	cmp	r3, #1
 8017210:	d003      	beq.n	801721a <create_chain+0xa6>
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017218:	d101      	bne.n	801721e <create_chain+0xaa>
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	e03e      	b.n	801729c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801721e:	69fa      	ldr	r2, [r7, #28]
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	429a      	cmp	r2, r3
 8017224:	d1da      	bne.n	80171dc <create_chain+0x68>
 8017226:	2300      	movs	r3, #0
 8017228:	e038      	b.n	801729c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801722a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801722c:	f04f 32ff 	mov.w	r2, #4294967295
 8017230:	69f9      	ldr	r1, [r7, #28]
 8017232:	6938      	ldr	r0, [r7, #16]
 8017234:	f7ff fe1f 	bl	8016e76 <put_fat>
 8017238:	4603      	mov	r3, r0
 801723a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801723c:	7dfb      	ldrb	r3, [r7, #23]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d109      	bne.n	8017256 <create_chain+0xe2>
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d006      	beq.n	8017256 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017248:	69fa      	ldr	r2, [r7, #28]
 801724a:	6839      	ldr	r1, [r7, #0]
 801724c:	6938      	ldr	r0, [r7, #16]
 801724e:	f7ff fe12 	bl	8016e76 <put_fat>
 8017252:	4603      	mov	r3, r0
 8017254:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017256:	7dfb      	ldrb	r3, [r7, #23]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d116      	bne.n	801728a <create_chain+0x116>
		fs->last_clst = ncl;
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	69fa      	ldr	r2, [r7, #28]
 8017260:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	699a      	ldr	r2, [r3, #24]
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	69db      	ldr	r3, [r3, #28]
 801726a:	3b02      	subs	r3, #2
 801726c:	429a      	cmp	r2, r3
 801726e:	d804      	bhi.n	801727a <create_chain+0x106>
 8017270:	693b      	ldr	r3, [r7, #16]
 8017272:	699b      	ldr	r3, [r3, #24]
 8017274:	1e5a      	subs	r2, r3, #1
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	791b      	ldrb	r3, [r3, #4]
 801727e:	f043 0301 	orr.w	r3, r3, #1
 8017282:	b2da      	uxtb	r2, r3
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	711a      	strb	r2, [r3, #4]
 8017288:	e007      	b.n	801729a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801728a:	7dfb      	ldrb	r3, [r7, #23]
 801728c:	2b01      	cmp	r3, #1
 801728e:	d102      	bne.n	8017296 <create_chain+0x122>
 8017290:	f04f 33ff 	mov.w	r3, #4294967295
 8017294:	e000      	b.n	8017298 <create_chain+0x124>
 8017296:	2301      	movs	r3, #1
 8017298:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801729a:	69fb      	ldr	r3, [r7, #28]
}
 801729c:	4618      	mov	r0, r3
 801729e:	3720      	adds	r7, #32
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b086      	sub	sp, #24
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172ba:	d204      	bcs.n	80172c6 <dir_sdi+0x22>
 80172bc:	683b      	ldr	r3, [r7, #0]
 80172be:	f003 031f 	and.w	r3, r3, #31
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d001      	beq.n	80172ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80172c6:	2302      	movs	r3, #2
 80172c8:	e071      	b.n	80173ae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	683a      	ldr	r2, [r7, #0]
 80172ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	689b      	ldr	r3, [r3, #8]
 80172d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80172d6:	697b      	ldr	r3, [r7, #20]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d106      	bne.n	80172ea <dir_sdi+0x46>
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	781b      	ldrb	r3, [r3, #0]
 80172e0:	2b02      	cmp	r3, #2
 80172e2:	d902      	bls.n	80172ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80172e4:	693b      	ldr	r3, [r7, #16]
 80172e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d10c      	bne.n	801730a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	095b      	lsrs	r3, r3, #5
 80172f4:	693a      	ldr	r2, [r7, #16]
 80172f6:	8912      	ldrh	r2, [r2, #8]
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d301      	bcc.n	8017300 <dir_sdi+0x5c>
 80172fc:	2302      	movs	r3, #2
 80172fe:	e056      	b.n	80173ae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	61da      	str	r2, [r3, #28]
 8017308:	e02d      	b.n	8017366 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	895b      	ldrh	r3, [r3, #10]
 801730e:	461a      	mov	r2, r3
 8017310:	693b      	ldr	r3, [r7, #16]
 8017312:	899b      	ldrh	r3, [r3, #12]
 8017314:	fb02 f303 	mul.w	r3, r2, r3
 8017318:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801731a:	e019      	b.n	8017350 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6979      	ldr	r1, [r7, #20]
 8017320:	4618      	mov	r0, r3
 8017322:	f7ff fcd4 	bl	8016cce <get_fat>
 8017326:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801732e:	d101      	bne.n	8017334 <dir_sdi+0x90>
 8017330:	2301      	movs	r3, #1
 8017332:	e03c      	b.n	80173ae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	2b01      	cmp	r3, #1
 8017338:	d904      	bls.n	8017344 <dir_sdi+0xa0>
 801733a:	693b      	ldr	r3, [r7, #16]
 801733c:	69db      	ldr	r3, [r3, #28]
 801733e:	697a      	ldr	r2, [r7, #20]
 8017340:	429a      	cmp	r2, r3
 8017342:	d301      	bcc.n	8017348 <dir_sdi+0xa4>
 8017344:	2302      	movs	r3, #2
 8017346:	e032      	b.n	80173ae <dir_sdi+0x10a>
			ofs -= csz;
 8017348:	683a      	ldr	r2, [r7, #0]
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	1ad3      	subs	r3, r2, r3
 801734e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017350:	683a      	ldr	r2, [r7, #0]
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	429a      	cmp	r2, r3
 8017356:	d2e1      	bcs.n	801731c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8017358:	6979      	ldr	r1, [r7, #20]
 801735a:	6938      	ldr	r0, [r7, #16]
 801735c:	f7ff fc98 	bl	8016c90 <clust2sect>
 8017360:	4602      	mov	r2, r0
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	697a      	ldr	r2, [r7, #20]
 801736a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	69db      	ldr	r3, [r3, #28]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d101      	bne.n	8017378 <dir_sdi+0xd4>
 8017374:	2302      	movs	r3, #2
 8017376:	e01a      	b.n	80173ae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	69da      	ldr	r2, [r3, #28]
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	899b      	ldrh	r3, [r3, #12]
 8017380:	4619      	mov	r1, r3
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	fbb3 f3f1 	udiv	r3, r3, r1
 8017388:	441a      	add	r2, r3
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801738e:	693b      	ldr	r3, [r7, #16]
 8017390:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	899b      	ldrh	r3, [r3, #12]
 8017398:	461a      	mov	r2, r3
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	fbb3 f0f2 	udiv	r0, r3, r2
 80173a0:	fb00 f202 	mul.w	r2, r0, r2
 80173a4:	1a9b      	subs	r3, r3, r2
 80173a6:	18ca      	adds	r2, r1, r3
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80173ac:	2300      	movs	r3, #0
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3718      	adds	r7, #24
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}

080173b6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80173b6:	b580      	push	{r7, lr}
 80173b8:	b086      	sub	sp, #24
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	6078      	str	r0, [r7, #4]
 80173be:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	695b      	ldr	r3, [r3, #20]
 80173ca:	3320      	adds	r3, #32
 80173cc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	69db      	ldr	r3, [r3, #28]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d003      	beq.n	80173de <dir_next+0x28>
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80173dc:	d301      	bcc.n	80173e2 <dir_next+0x2c>
 80173de:	2304      	movs	r3, #4
 80173e0:	e0bb      	b.n	801755a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	899b      	ldrh	r3, [r3, #12]
 80173e6:	461a      	mov	r2, r3
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80173ee:	fb01 f202 	mul.w	r2, r1, r2
 80173f2:	1a9b      	subs	r3, r3, r2
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f040 809d 	bne.w	8017534 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	69db      	ldr	r3, [r3, #28]
 80173fe:	1c5a      	adds	r2, r3, #1
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	699b      	ldr	r3, [r3, #24]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d10b      	bne.n	8017424 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	095b      	lsrs	r3, r3, #5
 8017410:	68fa      	ldr	r2, [r7, #12]
 8017412:	8912      	ldrh	r2, [r2, #8]
 8017414:	4293      	cmp	r3, r2
 8017416:	f0c0 808d 	bcc.w	8017534 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2200      	movs	r2, #0
 801741e:	61da      	str	r2, [r3, #28]
 8017420:	2304      	movs	r3, #4
 8017422:	e09a      	b.n	801755a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	899b      	ldrh	r3, [r3, #12]
 8017428:	461a      	mov	r2, r3
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017430:	68fa      	ldr	r2, [r7, #12]
 8017432:	8952      	ldrh	r2, [r2, #10]
 8017434:	3a01      	subs	r2, #1
 8017436:	4013      	ands	r3, r2
 8017438:	2b00      	cmp	r3, #0
 801743a:	d17b      	bne.n	8017534 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	699b      	ldr	r3, [r3, #24]
 8017442:	4619      	mov	r1, r3
 8017444:	4610      	mov	r0, r2
 8017446:	f7ff fc42 	bl	8016cce <get_fat>
 801744a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801744c:	697b      	ldr	r3, [r7, #20]
 801744e:	2b01      	cmp	r3, #1
 8017450:	d801      	bhi.n	8017456 <dir_next+0xa0>
 8017452:	2302      	movs	r3, #2
 8017454:	e081      	b.n	801755a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	f1b3 3fff 	cmp.w	r3, #4294967295
 801745c:	d101      	bne.n	8017462 <dir_next+0xac>
 801745e:	2301      	movs	r3, #1
 8017460:	e07b      	b.n	801755a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	69db      	ldr	r3, [r3, #28]
 8017466:	697a      	ldr	r2, [r7, #20]
 8017468:	429a      	cmp	r2, r3
 801746a:	d359      	bcc.n	8017520 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d104      	bne.n	801747c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	61da      	str	r2, [r3, #28]
 8017478:	2304      	movs	r3, #4
 801747a:	e06e      	b.n	801755a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	699b      	ldr	r3, [r3, #24]
 8017482:	4619      	mov	r1, r3
 8017484:	4610      	mov	r0, r2
 8017486:	f7ff fe75 	bl	8017174 <create_chain>
 801748a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801748c:	697b      	ldr	r3, [r7, #20]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d101      	bne.n	8017496 <dir_next+0xe0>
 8017492:	2307      	movs	r3, #7
 8017494:	e061      	b.n	801755a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	2b01      	cmp	r3, #1
 801749a:	d101      	bne.n	80174a0 <dir_next+0xea>
 801749c:	2302      	movs	r3, #2
 801749e:	e05c      	b.n	801755a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80174a0:	697b      	ldr	r3, [r7, #20]
 80174a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174a6:	d101      	bne.n	80174ac <dir_next+0xf6>
 80174a8:	2301      	movs	r3, #1
 80174aa:	e056      	b.n	801755a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80174ac:	68f8      	ldr	r0, [r7, #12]
 80174ae:	f7ff fb0d 	bl	8016acc <sync_window>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d001      	beq.n	80174bc <dir_next+0x106>
 80174b8:	2301      	movs	r3, #1
 80174ba:	e04e      	b.n	801755a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	899b      	ldrh	r3, [r3, #12]
 80174c6:	461a      	mov	r2, r3
 80174c8:	2100      	movs	r1, #0
 80174ca:	f7ff f936 	bl	801673a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80174ce:	2300      	movs	r3, #0
 80174d0:	613b      	str	r3, [r7, #16]
 80174d2:	6979      	ldr	r1, [r7, #20]
 80174d4:	68f8      	ldr	r0, [r7, #12]
 80174d6:	f7ff fbdb 	bl	8016c90 <clust2sect>
 80174da:	4602      	mov	r2, r0
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	635a      	str	r2, [r3, #52]	; 0x34
 80174e0:	e012      	b.n	8017508 <dir_next+0x152>
						fs->wflag = 1;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	2201      	movs	r2, #1
 80174e6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80174e8:	68f8      	ldr	r0, [r7, #12]
 80174ea:	f7ff faef 	bl	8016acc <sync_window>
 80174ee:	4603      	mov	r3, r0
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d001      	beq.n	80174f8 <dir_next+0x142>
 80174f4:	2301      	movs	r3, #1
 80174f6:	e030      	b.n	801755a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	3301      	adds	r3, #1
 80174fc:	613b      	str	r3, [r7, #16]
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017502:	1c5a      	adds	r2, r3, #1
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	635a      	str	r2, [r3, #52]	; 0x34
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	895b      	ldrh	r3, [r3, #10]
 801750c:	461a      	mov	r2, r3
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	4293      	cmp	r3, r2
 8017512:	d3e6      	bcc.n	80174e2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	1ad2      	subs	r2, r2, r3
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	697a      	ldr	r2, [r7, #20]
 8017524:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017526:	6979      	ldr	r1, [r7, #20]
 8017528:	68f8      	ldr	r0, [r7, #12]
 801752a:	f7ff fbb1 	bl	8016c90 <clust2sect>
 801752e:	4602      	mov	r2, r0
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	68ba      	ldr	r2, [r7, #8]
 8017538:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	899b      	ldrh	r3, [r3, #12]
 8017544:	461a      	mov	r2, r3
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	fbb3 f0f2 	udiv	r0, r3, r2
 801754c:	fb00 f202 	mul.w	r2, r0, r2
 8017550:	1a9b      	subs	r3, r3, r2
 8017552:	18ca      	adds	r2, r1, r3
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017558:	2300      	movs	r3, #0
}
 801755a:	4618      	mov	r0, r3
 801755c:	3718      	adds	r7, #24
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017562:	b580      	push	{r7, lr}
 8017564:	b086      	sub	sp, #24
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
 801756a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017572:	2100      	movs	r1, #0
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f7ff fe95 	bl	80172a4 <dir_sdi>
 801757a:	4603      	mov	r3, r0
 801757c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801757e:	7dfb      	ldrb	r3, [r7, #23]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d12b      	bne.n	80175dc <dir_alloc+0x7a>
		n = 0;
 8017584:	2300      	movs	r3, #0
 8017586:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	69db      	ldr	r3, [r3, #28]
 801758c:	4619      	mov	r1, r3
 801758e:	68f8      	ldr	r0, [r7, #12]
 8017590:	f7ff fae0 	bl	8016b54 <move_window>
 8017594:	4603      	mov	r3, r0
 8017596:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017598:	7dfb      	ldrb	r3, [r7, #23]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d11d      	bne.n	80175da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6a1b      	ldr	r3, [r3, #32]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	2be5      	cmp	r3, #229	; 0xe5
 80175a6:	d004      	beq.n	80175b2 <dir_alloc+0x50>
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6a1b      	ldr	r3, [r3, #32]
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d107      	bne.n	80175c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	3301      	adds	r3, #1
 80175b6:	613b      	str	r3, [r7, #16]
 80175b8:	693a      	ldr	r2, [r7, #16]
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	429a      	cmp	r2, r3
 80175be:	d102      	bne.n	80175c6 <dir_alloc+0x64>
 80175c0:	e00c      	b.n	80175dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80175c2:	2300      	movs	r3, #0
 80175c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80175c6:	2101      	movs	r1, #1
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f7ff fef4 	bl	80173b6 <dir_next>
 80175ce:	4603      	mov	r3, r0
 80175d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80175d2:	7dfb      	ldrb	r3, [r7, #23]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d0d7      	beq.n	8017588 <dir_alloc+0x26>
 80175d8:	e000      	b.n	80175dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80175da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80175dc:	7dfb      	ldrb	r3, [r7, #23]
 80175de:	2b04      	cmp	r3, #4
 80175e0:	d101      	bne.n	80175e6 <dir_alloc+0x84>
 80175e2:	2307      	movs	r3, #7
 80175e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80175e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3718      	adds	r7, #24
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	331a      	adds	r3, #26
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fe fff8 	bl	80165f4 <ld_word>
 8017604:	4603      	mov	r3, r0
 8017606:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b03      	cmp	r3, #3
 801760e:	d109      	bne.n	8017624 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	3314      	adds	r3, #20
 8017614:	4618      	mov	r0, r3
 8017616:	f7fe ffed 	bl	80165f4 <ld_word>
 801761a:	4603      	mov	r3, r0
 801761c:	041b      	lsls	r3, r3, #16
 801761e:	68fa      	ldr	r2, [r7, #12]
 8017620:	4313      	orrs	r3, r2
 8017622:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017624:	68fb      	ldr	r3, [r7, #12]
}
 8017626:	4618      	mov	r0, r3
 8017628:	3710      	adds	r7, #16
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}

0801762e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b084      	sub	sp, #16
 8017632:	af00      	add	r7, sp, #0
 8017634:	60f8      	str	r0, [r7, #12]
 8017636:	60b9      	str	r1, [r7, #8]
 8017638:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801763a:	68bb      	ldr	r3, [r7, #8]
 801763c:	331a      	adds	r3, #26
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	b292      	uxth	r2, r2
 8017642:	4611      	mov	r1, r2
 8017644:	4618      	mov	r0, r3
 8017646:	f7ff f810 	bl	801666a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2b03      	cmp	r3, #3
 8017650:	d109      	bne.n	8017666 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017652:	68bb      	ldr	r3, [r7, #8]
 8017654:	f103 0214 	add.w	r2, r3, #20
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	0c1b      	lsrs	r3, r3, #16
 801765c:	b29b      	uxth	r3, r3
 801765e:	4619      	mov	r1, r3
 8017660:	4610      	mov	r0, r2
 8017662:	f7ff f802 	bl	801666a <st_word>
	}
}
 8017666:	bf00      	nop
 8017668:	3710      	adds	r7, #16
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
	...

08017670 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8017670:	b590      	push	{r4, r7, lr}
 8017672:	b087      	sub	sp, #28
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
 8017678:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	331a      	adds	r3, #26
 801767e:	4618      	mov	r0, r3
 8017680:	f7fe ffb8 	bl	80165f4 <ld_word>
 8017684:	4603      	mov	r3, r0
 8017686:	2b00      	cmp	r3, #0
 8017688:	d001      	beq.n	801768e <cmp_lfn+0x1e>
 801768a:	2300      	movs	r3, #0
 801768c:	e059      	b.n	8017742 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	781b      	ldrb	r3, [r3, #0]
 8017692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017696:	1e5a      	subs	r2, r3, #1
 8017698:	4613      	mov	r3, r2
 801769a:	005b      	lsls	r3, r3, #1
 801769c:	4413      	add	r3, r2
 801769e:	009b      	lsls	r3, r3, #2
 80176a0:	4413      	add	r3, r2
 80176a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80176a4:	2301      	movs	r3, #1
 80176a6:	81fb      	strh	r3, [r7, #14]
 80176a8:	2300      	movs	r3, #0
 80176aa:	613b      	str	r3, [r7, #16]
 80176ac:	e033      	b.n	8017716 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80176ae:	4a27      	ldr	r2, [pc, #156]	; (801774c <cmp_lfn+0xdc>)
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	4413      	add	r3, r2
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	461a      	mov	r2, r3
 80176b8:	683b      	ldr	r3, [r7, #0]
 80176ba:	4413      	add	r3, r2
 80176bc:	4618      	mov	r0, r3
 80176be:	f7fe ff99 	bl	80165f4 <ld_word>
 80176c2:	4603      	mov	r3, r0
 80176c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80176c6:	89fb      	ldrh	r3, [r7, #14]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d01a      	beq.n	8017702 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80176cc:	697b      	ldr	r3, [r7, #20]
 80176ce:	2bfe      	cmp	r3, #254	; 0xfe
 80176d0:	d812      	bhi.n	80176f8 <cmp_lfn+0x88>
 80176d2:	89bb      	ldrh	r3, [r7, #12]
 80176d4:	4618      	mov	r0, r3
 80176d6:	f001 fbe1 	bl	8018e9c <ff_wtoupper>
 80176da:	4603      	mov	r3, r0
 80176dc:	461c      	mov	r4, r3
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	1c5a      	adds	r2, r3, #1
 80176e2:	617a      	str	r2, [r7, #20]
 80176e4:	005b      	lsls	r3, r3, #1
 80176e6:	687a      	ldr	r2, [r7, #4]
 80176e8:	4413      	add	r3, r2
 80176ea:	881b      	ldrh	r3, [r3, #0]
 80176ec:	4618      	mov	r0, r3
 80176ee:	f001 fbd5 	bl	8018e9c <ff_wtoupper>
 80176f2:	4603      	mov	r3, r0
 80176f4:	429c      	cmp	r4, r3
 80176f6:	d001      	beq.n	80176fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80176f8:	2300      	movs	r3, #0
 80176fa:	e022      	b.n	8017742 <cmp_lfn+0xd2>
			}
			wc = uc;
 80176fc:	89bb      	ldrh	r3, [r7, #12]
 80176fe:	81fb      	strh	r3, [r7, #14]
 8017700:	e006      	b.n	8017710 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8017702:	89bb      	ldrh	r3, [r7, #12]
 8017704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017708:	4293      	cmp	r3, r2
 801770a:	d001      	beq.n	8017710 <cmp_lfn+0xa0>
 801770c:	2300      	movs	r3, #0
 801770e:	e018      	b.n	8017742 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017710:	693b      	ldr	r3, [r7, #16]
 8017712:	3301      	adds	r3, #1
 8017714:	613b      	str	r3, [r7, #16]
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	2b0c      	cmp	r3, #12
 801771a:	d9c8      	bls.n	80176ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017724:	2b00      	cmp	r3, #0
 8017726:	d00b      	beq.n	8017740 <cmp_lfn+0xd0>
 8017728:	89fb      	ldrh	r3, [r7, #14]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d008      	beq.n	8017740 <cmp_lfn+0xd0>
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	005b      	lsls	r3, r3, #1
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	4413      	add	r3, r2
 8017736:	881b      	ldrh	r3, [r3, #0]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d001      	beq.n	8017740 <cmp_lfn+0xd0>
 801773c:	2300      	movs	r3, #0
 801773e:	e000      	b.n	8017742 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017740:	2301      	movs	r3, #1
}
 8017742:	4618      	mov	r0, r3
 8017744:	371c      	adds	r7, #28
 8017746:	46bd      	mov	sp, r7
 8017748:	bd90      	pop	{r4, r7, pc}
 801774a:	bf00      	nop
 801774c:	0801e208 	.word	0x0801e208

08017750 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b088      	sub	sp, #32
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	4611      	mov	r1, r2
 801775c:	461a      	mov	r2, r3
 801775e:	460b      	mov	r3, r1
 8017760:	71fb      	strb	r3, [r7, #7]
 8017762:	4613      	mov	r3, r2
 8017764:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	330d      	adds	r3, #13
 801776a:	79ba      	ldrb	r2, [r7, #6]
 801776c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	330b      	adds	r3, #11
 8017772:	220f      	movs	r2, #15
 8017774:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	330c      	adds	r3, #12
 801777a:	2200      	movs	r2, #0
 801777c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	331a      	adds	r3, #26
 8017782:	2100      	movs	r1, #0
 8017784:	4618      	mov	r0, r3
 8017786:	f7fe ff70 	bl	801666a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	1e5a      	subs	r2, r3, #1
 801778e:	4613      	mov	r3, r2
 8017790:	005b      	lsls	r3, r3, #1
 8017792:	4413      	add	r3, r2
 8017794:	009b      	lsls	r3, r3, #2
 8017796:	4413      	add	r3, r2
 8017798:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801779a:	2300      	movs	r3, #0
 801779c:	82fb      	strh	r3, [r7, #22]
 801779e:	2300      	movs	r3, #0
 80177a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80177a2:	8afb      	ldrh	r3, [r7, #22]
 80177a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177a8:	4293      	cmp	r3, r2
 80177aa:	d007      	beq.n	80177bc <put_lfn+0x6c>
 80177ac:	69fb      	ldr	r3, [r7, #28]
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	61fa      	str	r2, [r7, #28]
 80177b2:	005b      	lsls	r3, r3, #1
 80177b4:	68fa      	ldr	r2, [r7, #12]
 80177b6:	4413      	add	r3, r2
 80177b8:	881b      	ldrh	r3, [r3, #0]
 80177ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80177bc:	4a17      	ldr	r2, [pc, #92]	; (801781c <put_lfn+0xcc>)
 80177be:	69bb      	ldr	r3, [r7, #24]
 80177c0:	4413      	add	r3, r2
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	461a      	mov	r2, r3
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	4413      	add	r3, r2
 80177ca:	8afa      	ldrh	r2, [r7, #22]
 80177cc:	4611      	mov	r1, r2
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7fe ff4b 	bl	801666a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80177d4:	8afb      	ldrh	r3, [r7, #22]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d102      	bne.n	80177e0 <put_lfn+0x90>
 80177da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80177e0:	69bb      	ldr	r3, [r7, #24]
 80177e2:	3301      	adds	r3, #1
 80177e4:	61bb      	str	r3, [r7, #24]
 80177e6:	69bb      	ldr	r3, [r7, #24]
 80177e8:	2b0c      	cmp	r3, #12
 80177ea:	d9da      	bls.n	80177a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80177ec:	8afb      	ldrh	r3, [r7, #22]
 80177ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177f2:	4293      	cmp	r3, r2
 80177f4:	d006      	beq.n	8017804 <put_lfn+0xb4>
 80177f6:	69fb      	ldr	r3, [r7, #28]
 80177f8:	005b      	lsls	r3, r3, #1
 80177fa:	68fa      	ldr	r2, [r7, #12]
 80177fc:	4413      	add	r3, r2
 80177fe:	881b      	ldrh	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d103      	bne.n	801780c <put_lfn+0xbc>
 8017804:	79fb      	ldrb	r3, [r7, #7]
 8017806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801780a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	79fa      	ldrb	r2, [r7, #7]
 8017810:	701a      	strb	r2, [r3, #0]
}
 8017812:	bf00      	nop
 8017814:	3720      	adds	r7, #32
 8017816:	46bd      	mov	sp, r7
 8017818:	bd80      	pop	{r7, pc}
 801781a:	bf00      	nop
 801781c:	0801e208 	.word	0x0801e208

08017820 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b08c      	sub	sp, #48	; 0x30
 8017824:	af00      	add	r7, sp, #0
 8017826:	60f8      	str	r0, [r7, #12]
 8017828:	60b9      	str	r1, [r7, #8]
 801782a:	607a      	str	r2, [r7, #4]
 801782c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801782e:	220b      	movs	r2, #11
 8017830:	68b9      	ldr	r1, [r7, #8]
 8017832:	68f8      	ldr	r0, [r7, #12]
 8017834:	f7fe ff60 	bl	80166f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	2b05      	cmp	r3, #5
 801783c:	d929      	bls.n	8017892 <gen_numname+0x72>
		sr = seq;
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8017842:	e020      	b.n	8017886 <gen_numname+0x66>
			wc = *lfn++;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	1c9a      	adds	r2, r3, #2
 8017848:	607a      	str	r2, [r7, #4]
 801784a:	881b      	ldrh	r3, [r3, #0]
 801784c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801784e:	2300      	movs	r3, #0
 8017850:	62bb      	str	r3, [r7, #40]	; 0x28
 8017852:	e015      	b.n	8017880 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	005a      	lsls	r2, r3, #1
 8017858:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801785a:	f003 0301 	and.w	r3, r3, #1
 801785e:	4413      	add	r3, r2
 8017860:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8017862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017864:	085b      	lsrs	r3, r3, #1
 8017866:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017868:	69fb      	ldr	r3, [r7, #28]
 801786a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801786e:	2b00      	cmp	r3, #0
 8017870:	d003      	beq.n	801787a <gen_numname+0x5a>
 8017872:	69fa      	ldr	r2, [r7, #28]
 8017874:	4b30      	ldr	r3, [pc, #192]	; (8017938 <gen_numname+0x118>)
 8017876:	4053      	eors	r3, r2
 8017878:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787c:	3301      	adds	r3, #1
 801787e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017882:	2b0f      	cmp	r3, #15
 8017884:	d9e6      	bls.n	8017854 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d1da      	bne.n	8017844 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8017892:	2307      	movs	r3, #7
 8017894:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	b2db      	uxtb	r3, r3
 801789a:	f003 030f 	and.w	r3, r3, #15
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	3330      	adds	r3, #48	; 0x30
 80178a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80178a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80178aa:	2b39      	cmp	r3, #57	; 0x39
 80178ac:	d904      	bls.n	80178b8 <gen_numname+0x98>
 80178ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80178b2:	3307      	adds	r3, #7
 80178b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80178b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178ba:	1e5a      	subs	r2, r3, #1
 80178bc:	62ba      	str	r2, [r7, #40]	; 0x28
 80178be:	3330      	adds	r3, #48	; 0x30
 80178c0:	443b      	add	r3, r7
 80178c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80178c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	091b      	lsrs	r3, r3, #4
 80178ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d1df      	bne.n	8017896 <gen_numname+0x76>
	ns[i] = '~';
 80178d6:	f107 0214 	add.w	r2, r7, #20
 80178da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178dc:	4413      	add	r3, r2
 80178de:	227e      	movs	r2, #126	; 0x7e
 80178e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80178e2:	2300      	movs	r3, #0
 80178e4:	627b      	str	r3, [r7, #36]	; 0x24
 80178e6:	e002      	b.n	80178ee <gen_numname+0xce>
 80178e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ea:	3301      	adds	r3, #1
 80178ec:	627b      	str	r3, [r7, #36]	; 0x24
 80178ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d205      	bcs.n	8017902 <gen_numname+0xe2>
 80178f6:	68fa      	ldr	r2, [r7, #12]
 80178f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178fa:	4413      	add	r3, r2
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	2b20      	cmp	r3, #32
 8017900:	d1f2      	bne.n	80178e8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8017902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017904:	2b07      	cmp	r3, #7
 8017906:	d807      	bhi.n	8017918 <gen_numname+0xf8>
 8017908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801790a:	1c5a      	adds	r2, r3, #1
 801790c:	62ba      	str	r2, [r7, #40]	; 0x28
 801790e:	3330      	adds	r3, #48	; 0x30
 8017910:	443b      	add	r3, r7
 8017912:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8017916:	e000      	b.n	801791a <gen_numname+0xfa>
 8017918:	2120      	movs	r1, #32
 801791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801791c:	1c5a      	adds	r2, r3, #1
 801791e:	627a      	str	r2, [r7, #36]	; 0x24
 8017920:	68fa      	ldr	r2, [r7, #12]
 8017922:	4413      	add	r3, r2
 8017924:	460a      	mov	r2, r1
 8017926:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801792a:	2b07      	cmp	r3, #7
 801792c:	d9e9      	bls.n	8017902 <gen_numname+0xe2>
}
 801792e:	bf00      	nop
 8017930:	bf00      	nop
 8017932:	3730      	adds	r7, #48	; 0x30
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	00011021 	.word	0x00011021

0801793c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801793c:	b480      	push	{r7}
 801793e:	b085      	sub	sp, #20
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8017944:	2300      	movs	r3, #0
 8017946:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017948:	230b      	movs	r3, #11
 801794a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801794c:	7bfb      	ldrb	r3, [r7, #15]
 801794e:	b2da      	uxtb	r2, r3
 8017950:	0852      	lsrs	r2, r2, #1
 8017952:	01db      	lsls	r3, r3, #7
 8017954:	4313      	orrs	r3, r2
 8017956:	b2da      	uxtb	r2, r3
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	1c59      	adds	r1, r3, #1
 801795c:	6079      	str	r1, [r7, #4]
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	4413      	add	r3, r2
 8017962:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	3b01      	subs	r3, #1
 8017968:	60bb      	str	r3, [r7, #8]
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d1ed      	bne.n	801794c <sum_sfn+0x10>
	return sum;
 8017970:	7bfb      	ldrb	r3, [r7, #15]
}
 8017972:	4618      	mov	r0, r3
 8017974:	3714      	adds	r7, #20
 8017976:	46bd      	mov	sp, r7
 8017978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797c:	4770      	bx	lr

0801797e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801797e:	b580      	push	{r7, lr}
 8017980:	b086      	sub	sp, #24
 8017982:	af00      	add	r7, sp, #0
 8017984:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801798c:	2100      	movs	r1, #0
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	f7ff fc88 	bl	80172a4 <dir_sdi>
 8017994:	4603      	mov	r3, r0
 8017996:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017998:	7dfb      	ldrb	r3, [r7, #23]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d001      	beq.n	80179a2 <dir_find+0x24>
 801799e:	7dfb      	ldrb	r3, [r7, #23]
 80179a0:	e0a9      	b.n	8017af6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80179a2:	23ff      	movs	r3, #255	; 0xff
 80179a4:	753b      	strb	r3, [r7, #20]
 80179a6:	7d3b      	ldrb	r3, [r7, #20]
 80179a8:	757b      	strb	r3, [r7, #21]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	f04f 32ff 	mov.w	r2, #4294967295
 80179b0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	69db      	ldr	r3, [r3, #28]
 80179b6:	4619      	mov	r1, r3
 80179b8:	6938      	ldr	r0, [r7, #16]
 80179ba:	f7ff f8cb 	bl	8016b54 <move_window>
 80179be:	4603      	mov	r3, r0
 80179c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80179c2:	7dfb      	ldrb	r3, [r7, #23]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	f040 8090 	bne.w	8017aea <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6a1b      	ldr	r3, [r3, #32]
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80179d2:	7dbb      	ldrb	r3, [r7, #22]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d102      	bne.n	80179de <dir_find+0x60>
 80179d8:	2304      	movs	r3, #4
 80179da:	75fb      	strb	r3, [r7, #23]
 80179dc:	e08a      	b.n	8017af4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	6a1b      	ldr	r3, [r3, #32]
 80179e2:	330b      	adds	r3, #11
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179ea:	73fb      	strb	r3, [r7, #15]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	7bfa      	ldrb	r2, [r7, #15]
 80179f0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80179f2:	7dbb      	ldrb	r3, [r7, #22]
 80179f4:	2be5      	cmp	r3, #229	; 0xe5
 80179f6:	d007      	beq.n	8017a08 <dir_find+0x8a>
 80179f8:	7bfb      	ldrb	r3, [r7, #15]
 80179fa:	f003 0308 	and.w	r3, r3, #8
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d009      	beq.n	8017a16 <dir_find+0x98>
 8017a02:	7bfb      	ldrb	r3, [r7, #15]
 8017a04:	2b0f      	cmp	r3, #15
 8017a06:	d006      	beq.n	8017a16 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017a08:	23ff      	movs	r3, #255	; 0xff
 8017a0a:	757b      	strb	r3, [r7, #21]
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8017a12:	631a      	str	r2, [r3, #48]	; 0x30
 8017a14:	e05e      	b.n	8017ad4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8017a16:	7bfb      	ldrb	r3, [r7, #15]
 8017a18:	2b0f      	cmp	r3, #15
 8017a1a:	d136      	bne.n	8017a8a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d154      	bne.n	8017ad4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017a2a:	7dbb      	ldrb	r3, [r7, #22]
 8017a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d00d      	beq.n	8017a50 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	6a1b      	ldr	r3, [r3, #32]
 8017a38:	7b5b      	ldrb	r3, [r3, #13]
 8017a3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017a3c:	7dbb      	ldrb	r3, [r7, #22]
 8017a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a42:	75bb      	strb	r3, [r7, #22]
 8017a44:	7dbb      	ldrb	r3, [r7, #22]
 8017a46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	695a      	ldr	r2, [r3, #20]
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017a50:	7dba      	ldrb	r2, [r7, #22]
 8017a52:	7d7b      	ldrb	r3, [r7, #21]
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d115      	bne.n	8017a84 <dir_find+0x106>
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6a1b      	ldr	r3, [r3, #32]
 8017a5c:	330d      	adds	r3, #13
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	7d3a      	ldrb	r2, [r7, #20]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d10e      	bne.n	8017a84 <dir_find+0x106>
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	691a      	ldr	r2, [r3, #16]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6a1b      	ldr	r3, [r3, #32]
 8017a6e:	4619      	mov	r1, r3
 8017a70:	4610      	mov	r0, r2
 8017a72:	f7ff fdfd 	bl	8017670 <cmp_lfn>
 8017a76:	4603      	mov	r3, r0
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d003      	beq.n	8017a84 <dir_find+0x106>
 8017a7c:	7d7b      	ldrb	r3, [r7, #21]
 8017a7e:	3b01      	subs	r3, #1
 8017a80:	b2db      	uxtb	r3, r3
 8017a82:	e000      	b.n	8017a86 <dir_find+0x108>
 8017a84:	23ff      	movs	r3, #255	; 0xff
 8017a86:	757b      	strb	r3, [r7, #21]
 8017a88:	e024      	b.n	8017ad4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017a8a:	7d7b      	ldrb	r3, [r7, #21]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d109      	bne.n	8017aa4 <dir_find+0x126>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	6a1b      	ldr	r3, [r3, #32]
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7ff ff51 	bl	801793c <sum_sfn>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	7d3b      	ldrb	r3, [r7, #20]
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	d024      	beq.n	8017aee <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017aaa:	f003 0301 	and.w	r3, r3, #1
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d10a      	bne.n	8017ac8 <dir_find+0x14a>
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6a18      	ldr	r0, [r3, #32]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	3324      	adds	r3, #36	; 0x24
 8017aba:	220b      	movs	r2, #11
 8017abc:	4619      	mov	r1, r3
 8017abe:	f7fe fe57 	bl	8016770 <mem_cmp>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d014      	beq.n	8017af2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017ac8:	23ff      	movs	r3, #255	; 0xff
 8017aca:	757b      	strb	r3, [r7, #21]
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f04f 32ff 	mov.w	r2, #4294967295
 8017ad2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ff fc6d 	bl	80173b6 <dir_next>
 8017adc:	4603      	mov	r3, r0
 8017ade:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017ae0:	7dfb      	ldrb	r3, [r7, #23]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f43f af65 	beq.w	80179b2 <dir_find+0x34>
 8017ae8:	e004      	b.n	8017af4 <dir_find+0x176>
		if (res != FR_OK) break;
 8017aea:	bf00      	nop
 8017aec:	e002      	b.n	8017af4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017aee:	bf00      	nop
 8017af0:	e000      	b.n	8017af4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8017af2:	bf00      	nop

	return res;
 8017af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
	...

08017b00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b08c      	sub	sp, #48	; 0x30
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017b14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d001      	beq.n	8017b20 <dir_register+0x20>
 8017b1c:	2306      	movs	r3, #6
 8017b1e:	e0e0      	b.n	8017ce2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017b20:	2300      	movs	r3, #0
 8017b22:	627b      	str	r3, [r7, #36]	; 0x24
 8017b24:	e002      	b.n	8017b2c <dir_register+0x2c>
 8017b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b28:	3301      	adds	r3, #1
 8017b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8017b2c:	69fb      	ldr	r3, [r7, #28]
 8017b2e:	691a      	ldr	r2, [r3, #16]
 8017b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b32:	005b      	lsls	r3, r3, #1
 8017b34:	4413      	add	r3, r2
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d1f4      	bne.n	8017b26 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017b42:	f107 030c 	add.w	r3, r7, #12
 8017b46:	220c      	movs	r2, #12
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7fe fdd5 	bl	80166f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8017b4e:	7dfb      	ldrb	r3, [r7, #23]
 8017b50:	f003 0301 	and.w	r3, r3, #1
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d032      	beq.n	8017bbe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2240      	movs	r2, #64	; 0x40
 8017b5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017b60:	2301      	movs	r3, #1
 8017b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b64:	e016      	b.n	8017b94 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	691a      	ldr	r2, [r3, #16]
 8017b70:	f107 010c 	add.w	r1, r7, #12
 8017b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b76:	f7ff fe53 	bl	8017820 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7ff feff 	bl	801797e <dir_find>
 8017b80:	4603      	mov	r3, r0
 8017b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8017b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d106      	bne.n	8017b9c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8017b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b90:	3301      	adds	r3, #1
 8017b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b96:	2b63      	cmp	r3, #99	; 0x63
 8017b98:	d9e5      	bls.n	8017b66 <dir_register+0x66>
 8017b9a:	e000      	b.n	8017b9e <dir_register+0x9e>
			if (res != FR_OK) break;
 8017b9c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8017b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba0:	2b64      	cmp	r3, #100	; 0x64
 8017ba2:	d101      	bne.n	8017ba8 <dir_register+0xa8>
 8017ba4:	2307      	movs	r3, #7
 8017ba6:	e09c      	b.n	8017ce2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8017ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017bac:	2b04      	cmp	r3, #4
 8017bae:	d002      	beq.n	8017bb6 <dir_register+0xb6>
 8017bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017bb4:	e095      	b.n	8017ce2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8017bb6:	7dfa      	ldrb	r2, [r7, #23]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8017bbe:	7dfb      	ldrb	r3, [r7, #23]
 8017bc0:	f003 0302 	and.w	r3, r3, #2
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d007      	beq.n	8017bd8 <dir_register+0xd8>
 8017bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bca:	330c      	adds	r3, #12
 8017bcc:	4a47      	ldr	r2, [pc, #284]	; (8017cec <dir_register+0x1ec>)
 8017bce:	fba2 2303 	umull	r2, r3, r2, r3
 8017bd2:	089b      	lsrs	r3, r3, #2
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	e000      	b.n	8017bda <dir_register+0xda>
 8017bd8:	2301      	movs	r3, #1
 8017bda:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017bdc:	6a39      	ldr	r1, [r7, #32]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f7ff fcbf 	bl	8017562 <dir_alloc>
 8017be4:	4603      	mov	r3, r0
 8017be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d148      	bne.n	8017c84 <dir_register+0x184>
 8017bf2:	6a3b      	ldr	r3, [r7, #32]
 8017bf4:	3b01      	subs	r3, #1
 8017bf6:	623b      	str	r3, [r7, #32]
 8017bf8:	6a3b      	ldr	r3, [r7, #32]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d042      	beq.n	8017c84 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	695a      	ldr	r2, [r3, #20]
 8017c02:	6a3b      	ldr	r3, [r7, #32]
 8017c04:	015b      	lsls	r3, r3, #5
 8017c06:	1ad3      	subs	r3, r2, r3
 8017c08:	4619      	mov	r1, r3
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f7ff fb4a 	bl	80172a4 <dir_sdi>
 8017c10:	4603      	mov	r3, r0
 8017c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d132      	bne.n	8017c84 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	3324      	adds	r3, #36	; 0x24
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7ff fe8a 	bl	801793c <sum_sfn>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	69db      	ldr	r3, [r3, #28]
 8017c30:	4619      	mov	r1, r3
 8017c32:	69f8      	ldr	r0, [r7, #28]
 8017c34:	f7fe ff8e 	bl	8016b54 <move_window>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8017c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d11d      	bne.n	8017c82 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8017c46:	69fb      	ldr	r3, [r7, #28]
 8017c48:	6918      	ldr	r0, [r3, #16]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	6a19      	ldr	r1, [r3, #32]
 8017c4e:	6a3b      	ldr	r3, [r7, #32]
 8017c50:	b2da      	uxtb	r2, r3
 8017c52:	7efb      	ldrb	r3, [r7, #27]
 8017c54:	f7ff fd7c 	bl	8017750 <put_lfn>
				fs->wflag = 1;
 8017c58:	69fb      	ldr	r3, [r7, #28]
 8017c5a:	2201      	movs	r2, #1
 8017c5c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017c5e:	2100      	movs	r1, #0
 8017c60:	6878      	ldr	r0, [r7, #4]
 8017c62:	f7ff fba8 	bl	80173b6 <dir_next>
 8017c66:	4603      	mov	r3, r0
 8017c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8017c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d107      	bne.n	8017c84 <dir_register+0x184>
 8017c74:	6a3b      	ldr	r3, [r7, #32]
 8017c76:	3b01      	subs	r3, #1
 8017c78:	623b      	str	r3, [r7, #32]
 8017c7a:	6a3b      	ldr	r3, [r7, #32]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d1d5      	bne.n	8017c2c <dir_register+0x12c>
 8017c80:	e000      	b.n	8017c84 <dir_register+0x184>
				if (res != FR_OK) break;
 8017c82:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d128      	bne.n	8017cde <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	69db      	ldr	r3, [r3, #28]
 8017c90:	4619      	mov	r1, r3
 8017c92:	69f8      	ldr	r0, [r7, #28]
 8017c94:	f7fe ff5e 	bl	8016b54 <move_window>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8017c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d11b      	bne.n	8017cde <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6a1b      	ldr	r3, [r3, #32]
 8017caa:	2220      	movs	r2, #32
 8017cac:	2100      	movs	r1, #0
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fe fd43 	bl	801673a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6a18      	ldr	r0, [r3, #32]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	3324      	adds	r3, #36	; 0x24
 8017cbc:	220b      	movs	r2, #11
 8017cbe:	4619      	mov	r1, r3
 8017cc0:	f7fe fd1a 	bl	80166f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6a1b      	ldr	r3, [r3, #32]
 8017cce:	330c      	adds	r3, #12
 8017cd0:	f002 0218 	and.w	r2, r2, #24
 8017cd4:	b2d2      	uxtb	r2, r2
 8017cd6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017cd8:	69fb      	ldr	r3, [r7, #28]
 8017cda:	2201      	movs	r2, #1
 8017cdc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3730      	adds	r7, #48	; 0x30
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bd80      	pop	{r7, pc}
 8017cea:	bf00      	nop
 8017cec:	4ec4ec4f 	.word	0x4ec4ec4f

08017cf0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b08a      	sub	sp, #40	; 0x28
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
 8017cf8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	613b      	str	r3, [r7, #16]
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	691b      	ldr	r3, [r3, #16]
 8017d06:	60fb      	str	r3, [r7, #12]
 8017d08:	2300      	movs	r3, #0
 8017d0a:	617b      	str	r3, [r7, #20]
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017d10:	69bb      	ldr	r3, [r7, #24]
 8017d12:	1c5a      	adds	r2, r3, #1
 8017d14:	61ba      	str	r2, [r7, #24]
 8017d16:	693a      	ldr	r2, [r7, #16]
 8017d18:	4413      	add	r3, r2
 8017d1a:	781b      	ldrb	r3, [r3, #0]
 8017d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8017d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d20:	2b1f      	cmp	r3, #31
 8017d22:	d940      	bls.n	8017da6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8017d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d26:	2b2f      	cmp	r3, #47	; 0x2f
 8017d28:	d006      	beq.n	8017d38 <create_name+0x48>
 8017d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d2c:	2b5c      	cmp	r3, #92	; 0x5c
 8017d2e:	d110      	bne.n	8017d52 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017d30:	e002      	b.n	8017d38 <create_name+0x48>
 8017d32:	69bb      	ldr	r3, [r7, #24]
 8017d34:	3301      	adds	r3, #1
 8017d36:	61bb      	str	r3, [r7, #24]
 8017d38:	693a      	ldr	r2, [r7, #16]
 8017d3a:	69bb      	ldr	r3, [r7, #24]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	2b2f      	cmp	r3, #47	; 0x2f
 8017d42:	d0f6      	beq.n	8017d32 <create_name+0x42>
 8017d44:	693a      	ldr	r2, [r7, #16]
 8017d46:	69bb      	ldr	r3, [r7, #24]
 8017d48:	4413      	add	r3, r2
 8017d4a:	781b      	ldrb	r3, [r3, #0]
 8017d4c:	2b5c      	cmp	r3, #92	; 0x5c
 8017d4e:	d0f0      	beq.n	8017d32 <create_name+0x42>
			break;
 8017d50:	e02a      	b.n	8017da8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	2bfe      	cmp	r3, #254	; 0xfe
 8017d56:	d901      	bls.n	8017d5c <create_name+0x6c>
 8017d58:	2306      	movs	r3, #6
 8017d5a:	e17d      	b.n	8018058 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8017d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d64:	2101      	movs	r1, #1
 8017d66:	4618      	mov	r0, r3
 8017d68:	f001 f85c 	bl	8018e24 <ff_convert>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d101      	bne.n	8017d7a <create_name+0x8a>
 8017d76:	2306      	movs	r3, #6
 8017d78:	e16e      	b.n	8018058 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8017d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8017d7e:	d809      	bhi.n	8017d94 <create_name+0xa4>
 8017d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d82:	4619      	mov	r1, r3
 8017d84:	488d      	ldr	r0, [pc, #564]	; (8017fbc <create_name+0x2cc>)
 8017d86:	f7fe fd1a 	bl	80167be <chk_chr>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d001      	beq.n	8017d94 <create_name+0xa4>
 8017d90:	2306      	movs	r3, #6
 8017d92:	e161      	b.n	8018058 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	1c5a      	adds	r2, r3, #1
 8017d98:	617a      	str	r2, [r7, #20]
 8017d9a:	005b      	lsls	r3, r3, #1
 8017d9c:	68fa      	ldr	r2, [r7, #12]
 8017d9e:	4413      	add	r3, r2
 8017da0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017da2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8017da4:	e7b4      	b.n	8017d10 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8017da6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8017da8:	693a      	ldr	r2, [r7, #16]
 8017daa:	69bb      	ldr	r3, [r7, #24]
 8017dac:	441a      	add	r2, r3
 8017dae:	683b      	ldr	r3, [r7, #0]
 8017db0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017db4:	2b1f      	cmp	r3, #31
 8017db6:	d801      	bhi.n	8017dbc <create_name+0xcc>
 8017db8:	2304      	movs	r3, #4
 8017dba:	e000      	b.n	8017dbe <create_name+0xce>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017dc2:	e011      	b.n	8017de8 <create_name+0xf8>
		w = lfn[di - 1];
 8017dc4:	697a      	ldr	r2, [r7, #20]
 8017dc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017dca:	4413      	add	r3, r2
 8017dcc:	005b      	lsls	r3, r3, #1
 8017dce:	68fa      	ldr	r2, [r7, #12]
 8017dd0:	4413      	add	r3, r2
 8017dd2:	881b      	ldrh	r3, [r3, #0]
 8017dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8017dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dd8:	2b20      	cmp	r3, #32
 8017dda:	d002      	beq.n	8017de2 <create_name+0xf2>
 8017ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dde:	2b2e      	cmp	r3, #46	; 0x2e
 8017de0:	d106      	bne.n	8017df0 <create_name+0x100>
		di--;
 8017de2:	697b      	ldr	r3, [r7, #20]
 8017de4:	3b01      	subs	r3, #1
 8017de6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017de8:	697b      	ldr	r3, [r7, #20]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d1ea      	bne.n	8017dc4 <create_name+0xd4>
 8017dee:	e000      	b.n	8017df2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017df0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8017df2:	697b      	ldr	r3, [r7, #20]
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	68fa      	ldr	r2, [r7, #12]
 8017df8:	4413      	add	r3, r2
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8017dfe:	697b      	ldr	r3, [r7, #20]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d101      	bne.n	8017e08 <create_name+0x118>
 8017e04:	2306      	movs	r3, #6
 8017e06:	e127      	b.n	8018058 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	3324      	adds	r3, #36	; 0x24
 8017e0c:	220b      	movs	r2, #11
 8017e0e:	2120      	movs	r1, #32
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7fe fc92 	bl	801673a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8017e16:	2300      	movs	r3, #0
 8017e18:	61bb      	str	r3, [r7, #24]
 8017e1a:	e002      	b.n	8017e22 <create_name+0x132>
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	3301      	adds	r3, #1
 8017e20:	61bb      	str	r3, [r7, #24]
 8017e22:	69bb      	ldr	r3, [r7, #24]
 8017e24:	005b      	lsls	r3, r3, #1
 8017e26:	68fa      	ldr	r2, [r7, #12]
 8017e28:	4413      	add	r3, r2
 8017e2a:	881b      	ldrh	r3, [r3, #0]
 8017e2c:	2b20      	cmp	r3, #32
 8017e2e:	d0f5      	beq.n	8017e1c <create_name+0x12c>
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	005b      	lsls	r3, r3, #1
 8017e34:	68fa      	ldr	r2, [r7, #12]
 8017e36:	4413      	add	r3, r2
 8017e38:	881b      	ldrh	r3, [r3, #0]
 8017e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8017e3c:	d0ee      	beq.n	8017e1c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d009      	beq.n	8017e58 <create_name+0x168>
 8017e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e48:	f043 0303 	orr.w	r3, r3, #3
 8017e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017e50:	e002      	b.n	8017e58 <create_name+0x168>
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	3b01      	subs	r3, #1
 8017e56:	617b      	str	r3, [r7, #20]
 8017e58:	697b      	ldr	r3, [r7, #20]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d009      	beq.n	8017e72 <create_name+0x182>
 8017e5e:	697a      	ldr	r2, [r7, #20]
 8017e60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e64:	4413      	add	r3, r2
 8017e66:	005b      	lsls	r3, r3, #1
 8017e68:	68fa      	ldr	r2, [r7, #12]
 8017e6a:	4413      	add	r3, r2
 8017e6c:	881b      	ldrh	r3, [r3, #0]
 8017e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8017e70:	d1ef      	bne.n	8017e52 <create_name+0x162>

	i = b = 0; ni = 8;
 8017e72:	2300      	movs	r3, #0
 8017e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e78:	2300      	movs	r3, #0
 8017e7a:	623b      	str	r3, [r7, #32]
 8017e7c:	2308      	movs	r3, #8
 8017e7e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8017e80:	69bb      	ldr	r3, [r7, #24]
 8017e82:	1c5a      	adds	r2, r3, #1
 8017e84:	61ba      	str	r2, [r7, #24]
 8017e86:	005b      	lsls	r3, r3, #1
 8017e88:	68fa      	ldr	r2, [r7, #12]
 8017e8a:	4413      	add	r3, r2
 8017e8c:	881b      	ldrh	r3, [r3, #0]
 8017e8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8017e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	f000 8090 	beq.w	8017fb8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8017e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e9a:	2b20      	cmp	r3, #32
 8017e9c:	d006      	beq.n	8017eac <create_name+0x1bc>
 8017e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ea2:	d10a      	bne.n	8017eba <create_name+0x1ca>
 8017ea4:	69ba      	ldr	r2, [r7, #24]
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d006      	beq.n	8017eba <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8017eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eb0:	f043 0303 	orr.w	r3, r3, #3
 8017eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017eb8:	e07d      	b.n	8017fb6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8017eba:	6a3a      	ldr	r2, [r7, #32]
 8017ebc:	69fb      	ldr	r3, [r7, #28]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d203      	bcs.n	8017eca <create_name+0x1da>
 8017ec2:	69ba      	ldr	r2, [r7, #24]
 8017ec4:	697b      	ldr	r3, [r7, #20]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d123      	bne.n	8017f12 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	2b0b      	cmp	r3, #11
 8017ece:	d106      	bne.n	8017ede <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8017ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ed4:	f043 0303 	orr.w	r3, r3, #3
 8017ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017edc:	e075      	b.n	8017fca <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017ede:	69ba      	ldr	r2, [r7, #24]
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d005      	beq.n	8017ef2 <create_name+0x202>
 8017ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017eea:	f043 0303 	orr.w	r3, r3, #3
 8017eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8017ef2:	69ba      	ldr	r2, [r7, #24]
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d866      	bhi.n	8017fc8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	61bb      	str	r3, [r7, #24]
 8017efe:	2308      	movs	r3, #8
 8017f00:	623b      	str	r3, [r7, #32]
 8017f02:	230b      	movs	r3, #11
 8017f04:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8017f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f0a:	009b      	lsls	r3, r3, #2
 8017f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f10:	e051      	b.n	8017fb6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8017f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f14:	2b7f      	cmp	r3, #127	; 0x7f
 8017f16:	d914      	bls.n	8017f42 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f1a:	2100      	movs	r1, #0
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f000 ff81 	bl	8018e24 <ff_convert>
 8017f22:	4603      	mov	r3, r0
 8017f24:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8017f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d004      	beq.n	8017f36 <create_name+0x246>
 8017f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f2e:	3b80      	subs	r3, #128	; 0x80
 8017f30:	4a23      	ldr	r2, [pc, #140]	; (8017fc0 <create_name+0x2d0>)
 8017f32:	5cd3      	ldrb	r3, [r2, r3]
 8017f34:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8017f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f3a:	f043 0302 	orr.w	r3, r3, #2
 8017f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8017f42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d007      	beq.n	8017f58 <create_name+0x268>
 8017f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	481d      	ldr	r0, [pc, #116]	; (8017fc4 <create_name+0x2d4>)
 8017f4e:	f7fe fc36 	bl	80167be <chk_chr>
 8017f52:	4603      	mov	r3, r0
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d008      	beq.n	8017f6a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017f58:	235f      	movs	r3, #95	; 0x5f
 8017f5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f60:	f043 0303 	orr.w	r3, r3, #3
 8017f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f68:	e01b      	b.n	8017fa2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f6c:	2b40      	cmp	r3, #64	; 0x40
 8017f6e:	d909      	bls.n	8017f84 <create_name+0x294>
 8017f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f72:	2b5a      	cmp	r3, #90	; 0x5a
 8017f74:	d806      	bhi.n	8017f84 <create_name+0x294>
					b |= 2;
 8017f76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f7a:	f043 0302 	orr.w	r3, r3, #2
 8017f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f82:	e00e      	b.n	8017fa2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8017f84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f86:	2b60      	cmp	r3, #96	; 0x60
 8017f88:	d90b      	bls.n	8017fa2 <create_name+0x2b2>
 8017f8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f8c:	2b7a      	cmp	r3, #122	; 0x7a
 8017f8e:	d808      	bhi.n	8017fa2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8017f90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f94:	f043 0301 	orr.w	r3, r3, #1
 8017f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f9e:	3b20      	subs	r3, #32
 8017fa0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8017fa2:	6a3b      	ldr	r3, [r7, #32]
 8017fa4:	1c5a      	adds	r2, r3, #1
 8017fa6:	623a      	str	r2, [r7, #32]
 8017fa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017faa:	b2d1      	uxtb	r1, r2
 8017fac:	687a      	ldr	r2, [r7, #4]
 8017fae:	4413      	add	r3, r2
 8017fb0:	460a      	mov	r2, r1
 8017fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8017fb6:	e763      	b.n	8017e80 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8017fb8:	bf00      	nop
 8017fba:	e006      	b.n	8017fca <create_name+0x2da>
 8017fbc:	0801e040 	.word	0x0801e040
 8017fc0:	0801e188 	.word	0x0801e188
 8017fc4:	0801e04c 	.word	0x0801e04c
			if (si > di) break;			/* No extension */
 8017fc8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017fd0:	2be5      	cmp	r3, #229	; 0xe5
 8017fd2:	d103      	bne.n	8017fdc <create_name+0x2ec>
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2205      	movs	r2, #5
 8017fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	2b08      	cmp	r3, #8
 8017fe0:	d104      	bne.n	8017fec <create_name+0x2fc>
 8017fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fe6:	009b      	lsls	r3, r3, #2
 8017fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ff0:	f003 030c 	and.w	r3, r3, #12
 8017ff4:	2b0c      	cmp	r3, #12
 8017ff6:	d005      	beq.n	8018004 <create_name+0x314>
 8017ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ffc:	f003 0303 	and.w	r3, r3, #3
 8018000:	2b03      	cmp	r3, #3
 8018002:	d105      	bne.n	8018010 <create_name+0x320>
 8018004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018008:	f043 0302 	orr.w	r3, r3, #2
 801800c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018014:	f003 0302 	and.w	r3, r3, #2
 8018018:	2b00      	cmp	r3, #0
 801801a:	d117      	bne.n	801804c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801801c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018020:	f003 0303 	and.w	r3, r3, #3
 8018024:	2b01      	cmp	r3, #1
 8018026:	d105      	bne.n	8018034 <create_name+0x344>
 8018028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801802c:	f043 0310 	orr.w	r3, r3, #16
 8018030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018038:	f003 030c 	and.w	r3, r3, #12
 801803c:	2b04      	cmp	r3, #4
 801803e:	d105      	bne.n	801804c <create_name+0x35c>
 8018040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018044:	f043 0308 	orr.w	r3, r3, #8
 8018048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018052:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018056:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018058:	4618      	mov	r0, r3
 801805a:	3728      	adds	r7, #40	; 0x28
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b086      	sub	sp, #24
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018074:	e002      	b.n	801807c <follow_path+0x1c>
 8018076:	683b      	ldr	r3, [r7, #0]
 8018078:	3301      	adds	r3, #1
 801807a:	603b      	str	r3, [r7, #0]
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	2b2f      	cmp	r3, #47	; 0x2f
 8018082:	d0f8      	beq.n	8018076 <follow_path+0x16>
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	2b5c      	cmp	r3, #92	; 0x5c
 801808a:	d0f4      	beq.n	8018076 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	2200      	movs	r2, #0
 8018090:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b1f      	cmp	r3, #31
 8018098:	d80a      	bhi.n	80180b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2280      	movs	r2, #128	; 0x80
 801809e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80180a2:	2100      	movs	r1, #0
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f7ff f8fd 	bl	80172a4 <dir_sdi>
 80180aa:	4603      	mov	r3, r0
 80180ac:	75fb      	strb	r3, [r7, #23]
 80180ae:	e048      	b.n	8018142 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80180b0:	463b      	mov	r3, r7
 80180b2:	4619      	mov	r1, r3
 80180b4:	6878      	ldr	r0, [r7, #4]
 80180b6:	f7ff fe1b 	bl	8017cf0 <create_name>
 80180ba:	4603      	mov	r3, r0
 80180bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80180be:	7dfb      	ldrb	r3, [r7, #23]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d139      	bne.n	8018138 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f7ff fc5a 	bl	801797e <dir_find>
 80180ca:	4603      	mov	r3, r0
 80180cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80180d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80180d6:	7dfb      	ldrb	r3, [r7, #23]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d00a      	beq.n	80180f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80180dc:	7dfb      	ldrb	r3, [r7, #23]
 80180de:	2b04      	cmp	r3, #4
 80180e0:	d12c      	bne.n	801813c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80180e2:	7afb      	ldrb	r3, [r7, #11]
 80180e4:	f003 0304 	and.w	r3, r3, #4
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d127      	bne.n	801813c <follow_path+0xdc>
 80180ec:	2305      	movs	r3, #5
 80180ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80180f0:	e024      	b.n	801813c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80180f2:	7afb      	ldrb	r3, [r7, #11]
 80180f4:	f003 0304 	and.w	r3, r3, #4
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d121      	bne.n	8018140 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	799b      	ldrb	r3, [r3, #6]
 8018100:	f003 0310 	and.w	r3, r3, #16
 8018104:	2b00      	cmp	r3, #0
 8018106:	d102      	bne.n	801810e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018108:	2305      	movs	r3, #5
 801810a:	75fb      	strb	r3, [r7, #23]
 801810c:	e019      	b.n	8018142 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	695b      	ldr	r3, [r3, #20]
 8018118:	68fa      	ldr	r2, [r7, #12]
 801811a:	8992      	ldrh	r2, [r2, #12]
 801811c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018120:	fb00 f202 	mul.w	r2, r0, r2
 8018124:	1a9b      	subs	r3, r3, r2
 8018126:	440b      	add	r3, r1
 8018128:	4619      	mov	r1, r3
 801812a:	68f8      	ldr	r0, [r7, #12]
 801812c:	f7ff fa60 	bl	80175f0 <ld_clust>
 8018130:	4602      	mov	r2, r0
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018136:	e7bb      	b.n	80180b0 <follow_path+0x50>
			if (res != FR_OK) break;
 8018138:	bf00      	nop
 801813a:	e002      	b.n	8018142 <follow_path+0xe2>
				break;
 801813c:	bf00      	nop
 801813e:	e000      	b.n	8018142 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018140:	bf00      	nop
			}
		}
	}

	return res;
 8018142:	7dfb      	ldrb	r3, [r7, #23]
}
 8018144:	4618      	mov	r0, r3
 8018146:	3718      	adds	r7, #24
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801814c:	b480      	push	{r7}
 801814e:	b087      	sub	sp, #28
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018154:	f04f 33ff 	mov.w	r3, #4294967295
 8018158:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d031      	beq.n	80181c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	617b      	str	r3, [r7, #20]
 8018168:	e002      	b.n	8018170 <get_ldnumber+0x24>
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	3301      	adds	r3, #1
 801816e:	617b      	str	r3, [r7, #20]
 8018170:	697b      	ldr	r3, [r7, #20]
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	2b1f      	cmp	r3, #31
 8018176:	d903      	bls.n	8018180 <get_ldnumber+0x34>
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	2b3a      	cmp	r3, #58	; 0x3a
 801817e:	d1f4      	bne.n	801816a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	781b      	ldrb	r3, [r3, #0]
 8018184:	2b3a      	cmp	r3, #58	; 0x3a
 8018186:	d11c      	bne.n	80181c2 <get_ldnumber+0x76>
			tp = *path;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	1c5a      	adds	r2, r3, #1
 8018192:	60fa      	str	r2, [r7, #12]
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	3b30      	subs	r3, #48	; 0x30
 8018198:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801819a:	68bb      	ldr	r3, [r7, #8]
 801819c:	2b09      	cmp	r3, #9
 801819e:	d80e      	bhi.n	80181be <get_ldnumber+0x72>
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d10a      	bne.n	80181be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d107      	bne.n	80181be <get_ldnumber+0x72>
					vol = (int)i;
 80181ae:	68bb      	ldr	r3, [r7, #8]
 80181b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80181b2:	697b      	ldr	r3, [r7, #20]
 80181b4:	3301      	adds	r3, #1
 80181b6:	617b      	str	r3, [r7, #20]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	697a      	ldr	r2, [r7, #20]
 80181bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80181be:	693b      	ldr	r3, [r7, #16]
 80181c0:	e002      	b.n	80181c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80181c2:	2300      	movs	r3, #0
 80181c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80181c6:	693b      	ldr	r3, [r7, #16]
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	371c      	adds	r7, #28
 80181cc:	46bd      	mov	sp, r7
 80181ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d2:	4770      	bx	lr

080181d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2200      	movs	r2, #0
 80181e2:	70da      	strb	r2, [r3, #3]
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f04f 32ff 	mov.w	r2, #4294967295
 80181ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80181ec:	6839      	ldr	r1, [r7, #0]
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7fe fcb0 	bl	8016b54 <move_window>
 80181f4:	4603      	mov	r3, r0
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d001      	beq.n	80181fe <check_fs+0x2a>
 80181fa:	2304      	movs	r3, #4
 80181fc:	e038      	b.n	8018270 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	3338      	adds	r3, #56	; 0x38
 8018202:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018206:	4618      	mov	r0, r3
 8018208:	f7fe f9f4 	bl	80165f4 <ld_word>
 801820c:	4603      	mov	r3, r0
 801820e:	461a      	mov	r2, r3
 8018210:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018214:	429a      	cmp	r2, r3
 8018216:	d001      	beq.n	801821c <check_fs+0x48>
 8018218:	2303      	movs	r3, #3
 801821a:	e029      	b.n	8018270 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018222:	2be9      	cmp	r3, #233	; 0xe9
 8018224:	d009      	beq.n	801823a <check_fs+0x66>
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801822c:	2beb      	cmp	r3, #235	; 0xeb
 801822e:	d11e      	bne.n	801826e <check_fs+0x9a>
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8018236:	2b90      	cmp	r3, #144	; 0x90
 8018238:	d119      	bne.n	801826e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	3338      	adds	r3, #56	; 0x38
 801823e:	3336      	adds	r3, #54	; 0x36
 8018240:	4618      	mov	r0, r3
 8018242:	f7fe f9ef 	bl	8016624 <ld_dword>
 8018246:	4603      	mov	r3, r0
 8018248:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801824c:	4a0a      	ldr	r2, [pc, #40]	; (8018278 <check_fs+0xa4>)
 801824e:	4293      	cmp	r3, r2
 8018250:	d101      	bne.n	8018256 <check_fs+0x82>
 8018252:	2300      	movs	r3, #0
 8018254:	e00c      	b.n	8018270 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	3338      	adds	r3, #56	; 0x38
 801825a:	3352      	adds	r3, #82	; 0x52
 801825c:	4618      	mov	r0, r3
 801825e:	f7fe f9e1 	bl	8016624 <ld_dword>
 8018262:	4603      	mov	r3, r0
 8018264:	4a05      	ldr	r2, [pc, #20]	; (801827c <check_fs+0xa8>)
 8018266:	4293      	cmp	r3, r2
 8018268:	d101      	bne.n	801826e <check_fs+0x9a>
 801826a:	2300      	movs	r3, #0
 801826c:	e000      	b.n	8018270 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801826e:	2302      	movs	r3, #2
}
 8018270:	4618      	mov	r0, r3
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	00544146 	.word	0x00544146
 801827c:	33544146 	.word	0x33544146

08018280 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b096      	sub	sp, #88	; 0x58
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	4613      	mov	r3, r2
 801828c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801828e:	68bb      	ldr	r3, [r7, #8]
 8018290:	2200      	movs	r2, #0
 8018292:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018294:	68f8      	ldr	r0, [r7, #12]
 8018296:	f7ff ff59 	bl	801814c <get_ldnumber>
 801829a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801829e:	2b00      	cmp	r3, #0
 80182a0:	da01      	bge.n	80182a6 <find_volume+0x26>
 80182a2:	230b      	movs	r3, #11
 80182a4:	e265      	b.n	8018772 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80182a6:	4a9f      	ldr	r2, [pc, #636]	; (8018524 <find_volume+0x2a4>)
 80182a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80182b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d101      	bne.n	80182ba <find_volume+0x3a>
 80182b6:	230c      	movs	r3, #12
 80182b8:	e25b      	b.n	8018772 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80182be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80182c0:	79fb      	ldrb	r3, [r7, #7]
 80182c2:	f023 0301 	bic.w	r3, r3, #1
 80182c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80182c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ca:	781b      	ldrb	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d01a      	beq.n	8018306 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80182d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182d2:	785b      	ldrb	r3, [r3, #1]
 80182d4:	4618      	mov	r0, r3
 80182d6:	f7fe f8ef 	bl	80164b8 <disk_status>
 80182da:	4603      	mov	r3, r0
 80182dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80182e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182e4:	f003 0301 	and.w	r3, r3, #1
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d10c      	bne.n	8018306 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80182ec:	79fb      	ldrb	r3, [r7, #7]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d007      	beq.n	8018302 <find_volume+0x82>
 80182f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182f6:	f003 0304 	and.w	r3, r3, #4
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d001      	beq.n	8018302 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80182fe:	230a      	movs	r3, #10
 8018300:	e237      	b.n	8018772 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8018302:	2300      	movs	r3, #0
 8018304:	e235      	b.n	8018772 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8018306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018308:	2200      	movs	r2, #0
 801830a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801830e:	b2da      	uxtb	r2, r3
 8018310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018312:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018316:	785b      	ldrb	r3, [r3, #1]
 8018318:	4618      	mov	r0, r3
 801831a:	f7fe f8e7 	bl	80164ec <disk_initialize>
 801831e:	4603      	mov	r3, r0
 8018320:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018328:	f003 0301 	and.w	r3, r3, #1
 801832c:	2b00      	cmp	r3, #0
 801832e:	d001      	beq.n	8018334 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018330:	2303      	movs	r3, #3
 8018332:	e21e      	b.n	8018772 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018334:	79fb      	ldrb	r3, [r7, #7]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d007      	beq.n	801834a <find_volume+0xca>
 801833a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801833e:	f003 0304 	and.w	r3, r3, #4
 8018342:	2b00      	cmp	r3, #0
 8018344:	d001      	beq.n	801834a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8018346:	230a      	movs	r3, #10
 8018348:	e213      	b.n	8018772 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801834c:	7858      	ldrb	r0, [r3, #1]
 801834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018350:	330c      	adds	r3, #12
 8018352:	461a      	mov	r2, r3
 8018354:	2102      	movs	r1, #2
 8018356:	f7fe f92f 	bl	80165b8 <disk_ioctl>
 801835a:	4603      	mov	r3, r0
 801835c:	2b00      	cmp	r3, #0
 801835e:	d001      	beq.n	8018364 <find_volume+0xe4>
 8018360:	2301      	movs	r3, #1
 8018362:	e206      	b.n	8018772 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8018364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018366:	899b      	ldrh	r3, [r3, #12]
 8018368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801836c:	d80d      	bhi.n	801838a <find_volume+0x10a>
 801836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018370:	899b      	ldrh	r3, [r3, #12]
 8018372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018376:	d308      	bcc.n	801838a <find_volume+0x10a>
 8018378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837a:	899b      	ldrh	r3, [r3, #12]
 801837c:	461a      	mov	r2, r3
 801837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018380:	899b      	ldrh	r3, [r3, #12]
 8018382:	3b01      	subs	r3, #1
 8018384:	4013      	ands	r3, r2
 8018386:	2b00      	cmp	r3, #0
 8018388:	d001      	beq.n	801838e <find_volume+0x10e>
 801838a:	2301      	movs	r3, #1
 801838c:	e1f1      	b.n	8018772 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801838e:	2300      	movs	r3, #0
 8018390:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018396:	f7ff ff1d 	bl	80181d4 <check_fs>
 801839a:	4603      	mov	r3, r0
 801839c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80183a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80183a4:	2b02      	cmp	r3, #2
 80183a6:	d149      	bne.n	801843c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80183a8:	2300      	movs	r3, #0
 80183aa:	643b      	str	r3, [r7, #64]	; 0x40
 80183ac:	e01e      	b.n	80183ec <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80183ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80183b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183b6:	011b      	lsls	r3, r3, #4
 80183b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80183bc:	4413      	add	r3, r2
 80183be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80183c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c2:	3304      	adds	r3, #4
 80183c4:	781b      	ldrb	r3, [r3, #0]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d006      	beq.n	80183d8 <find_volume+0x158>
 80183ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183cc:	3308      	adds	r3, #8
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fe f928 	bl	8016624 <ld_dword>
 80183d4:	4602      	mov	r2, r0
 80183d6:	e000      	b.n	80183da <find_volume+0x15a>
 80183d8:	2200      	movs	r2, #0
 80183da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183dc:	009b      	lsls	r3, r3, #2
 80183de:	3358      	adds	r3, #88	; 0x58
 80183e0:	443b      	add	r3, r7
 80183e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80183e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183e8:	3301      	adds	r3, #1
 80183ea:	643b      	str	r3, [r7, #64]	; 0x40
 80183ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183ee:	2b03      	cmp	r3, #3
 80183f0:	d9dd      	bls.n	80183ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80183f2:	2300      	movs	r3, #0
 80183f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80183f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d002      	beq.n	8018402 <find_volume+0x182>
 80183fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80183fe:	3b01      	subs	r3, #1
 8018400:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8018402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018404:	009b      	lsls	r3, r3, #2
 8018406:	3358      	adds	r3, #88	; 0x58
 8018408:	443b      	add	r3, r7
 801840a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801840e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8018410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018412:	2b00      	cmp	r3, #0
 8018414:	d005      	beq.n	8018422 <find_volume+0x1a2>
 8018416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801841a:	f7ff fedb 	bl	80181d4 <check_fs>
 801841e:	4603      	mov	r3, r0
 8018420:	e000      	b.n	8018424 <find_volume+0x1a4>
 8018422:	2303      	movs	r3, #3
 8018424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8018428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801842c:	2b01      	cmp	r3, #1
 801842e:	d905      	bls.n	801843c <find_volume+0x1bc>
 8018430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018432:	3301      	adds	r3, #1
 8018434:	643b      	str	r3, [r7, #64]	; 0x40
 8018436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018438:	2b03      	cmp	r3, #3
 801843a:	d9e2      	bls.n	8018402 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801843c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018440:	2b04      	cmp	r3, #4
 8018442:	d101      	bne.n	8018448 <find_volume+0x1c8>
 8018444:	2301      	movs	r3, #1
 8018446:	e194      	b.n	8018772 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8018448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801844c:	2b01      	cmp	r3, #1
 801844e:	d901      	bls.n	8018454 <find_volume+0x1d4>
 8018450:	230d      	movs	r3, #13
 8018452:	e18e      	b.n	8018772 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018456:	3338      	adds	r3, #56	; 0x38
 8018458:	330b      	adds	r3, #11
 801845a:	4618      	mov	r0, r3
 801845c:	f7fe f8ca 	bl	80165f4 <ld_word>
 8018460:	4603      	mov	r3, r0
 8018462:	461a      	mov	r2, r3
 8018464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018466:	899b      	ldrh	r3, [r3, #12]
 8018468:	429a      	cmp	r2, r3
 801846a:	d001      	beq.n	8018470 <find_volume+0x1f0>
 801846c:	230d      	movs	r3, #13
 801846e:	e180      	b.n	8018772 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018472:	3338      	adds	r3, #56	; 0x38
 8018474:	3316      	adds	r3, #22
 8018476:	4618      	mov	r0, r3
 8018478:	f7fe f8bc 	bl	80165f4 <ld_word>
 801847c:	4603      	mov	r3, r0
 801847e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018482:	2b00      	cmp	r3, #0
 8018484:	d106      	bne.n	8018494 <find_volume+0x214>
 8018486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018488:	3338      	adds	r3, #56	; 0x38
 801848a:	3324      	adds	r3, #36	; 0x24
 801848c:	4618      	mov	r0, r3
 801848e:	f7fe f8c9 	bl	8016624 <ld_dword>
 8018492:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018498:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801849c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80184a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80184a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a6:	789b      	ldrb	r3, [r3, #2]
 80184a8:	2b01      	cmp	r3, #1
 80184aa:	d005      	beq.n	80184b8 <find_volume+0x238>
 80184ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ae:	789b      	ldrb	r3, [r3, #2]
 80184b0:	2b02      	cmp	r3, #2
 80184b2:	d001      	beq.n	80184b8 <find_volume+0x238>
 80184b4:	230d      	movs	r3, #13
 80184b6:	e15c      	b.n	8018772 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80184b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ba:	789b      	ldrb	r3, [r3, #2]
 80184bc:	461a      	mov	r2, r3
 80184be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80184c0:	fb02 f303 	mul.w	r3, r2, r3
 80184c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80184c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80184cc:	b29a      	uxth	r2, r3
 80184ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80184d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d4:	895b      	ldrh	r3, [r3, #10]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d008      	beq.n	80184ec <find_volume+0x26c>
 80184da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184dc:	895b      	ldrh	r3, [r3, #10]
 80184de:	461a      	mov	r2, r3
 80184e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184e2:	895b      	ldrh	r3, [r3, #10]
 80184e4:	3b01      	subs	r3, #1
 80184e6:	4013      	ands	r3, r2
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d001      	beq.n	80184f0 <find_volume+0x270>
 80184ec:	230d      	movs	r3, #13
 80184ee:	e140      	b.n	8018772 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80184f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184f2:	3338      	adds	r3, #56	; 0x38
 80184f4:	3311      	adds	r3, #17
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fe f87c 	bl	80165f4 <ld_word>
 80184fc:	4603      	mov	r3, r0
 80184fe:	461a      	mov	r2, r3
 8018500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018502:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8018504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018506:	891b      	ldrh	r3, [r3, #8]
 8018508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801850a:	8992      	ldrh	r2, [r2, #12]
 801850c:	0952      	lsrs	r2, r2, #5
 801850e:	b292      	uxth	r2, r2
 8018510:	fbb3 f1f2 	udiv	r1, r3, r2
 8018514:	fb01 f202 	mul.w	r2, r1, r2
 8018518:	1a9b      	subs	r3, r3, r2
 801851a:	b29b      	uxth	r3, r3
 801851c:	2b00      	cmp	r3, #0
 801851e:	d003      	beq.n	8018528 <find_volume+0x2a8>
 8018520:	230d      	movs	r3, #13
 8018522:	e126      	b.n	8018772 <find_volume+0x4f2>
 8018524:	240016bc 	.word	0x240016bc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8018528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801852a:	3338      	adds	r3, #56	; 0x38
 801852c:	3313      	adds	r3, #19
 801852e:	4618      	mov	r0, r3
 8018530:	f7fe f860 	bl	80165f4 <ld_word>
 8018534:	4603      	mov	r3, r0
 8018536:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801853a:	2b00      	cmp	r3, #0
 801853c:	d106      	bne.n	801854c <find_volume+0x2cc>
 801853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018540:	3338      	adds	r3, #56	; 0x38
 8018542:	3320      	adds	r3, #32
 8018544:	4618      	mov	r0, r3
 8018546:	f7fe f86d 	bl	8016624 <ld_dword>
 801854a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801854e:	3338      	adds	r3, #56	; 0x38
 8018550:	330e      	adds	r3, #14
 8018552:	4618      	mov	r0, r3
 8018554:	f7fe f84e 	bl	80165f4 <ld_word>
 8018558:	4603      	mov	r3, r0
 801855a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801855c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801855e:	2b00      	cmp	r3, #0
 8018560:	d101      	bne.n	8018566 <find_volume+0x2e6>
 8018562:	230d      	movs	r3, #13
 8018564:	e105      	b.n	8018772 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018566:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856a:	4413      	add	r3, r2
 801856c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801856e:	8911      	ldrh	r1, [r2, #8]
 8018570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018572:	8992      	ldrh	r2, [r2, #12]
 8018574:	0952      	lsrs	r2, r2, #5
 8018576:	b292      	uxth	r2, r2
 8018578:	fbb1 f2f2 	udiv	r2, r1, r2
 801857c:	b292      	uxth	r2, r2
 801857e:	4413      	add	r3, r2
 8018580:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018586:	429a      	cmp	r2, r3
 8018588:	d201      	bcs.n	801858e <find_volume+0x30e>
 801858a:	230d      	movs	r3, #13
 801858c:	e0f1      	b.n	8018772 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801858e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018592:	1ad3      	subs	r3, r2, r3
 8018594:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018596:	8952      	ldrh	r2, [r2, #10]
 8018598:	fbb3 f3f2 	udiv	r3, r3, r2
 801859c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d101      	bne.n	80185a8 <find_volume+0x328>
 80185a4:	230d      	movs	r3, #13
 80185a6:	e0e4      	b.n	8018772 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80185a8:	2303      	movs	r3, #3
 80185aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80185ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d802      	bhi.n	80185be <find_volume+0x33e>
 80185b8:	2302      	movs	r3, #2
 80185ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80185be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80185c4:	4293      	cmp	r3, r2
 80185c6:	d802      	bhi.n	80185ce <find_volume+0x34e>
 80185c8:	2301      	movs	r3, #1
 80185ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80185ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185d0:	1c9a      	adds	r2, r3, #2
 80185d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185d4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80185d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80185dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80185de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185e0:	441a      	add	r2, r3
 80185e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185e4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80185e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80185e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ea:	441a      	add	r2, r3
 80185ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ee:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80185f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80185f4:	2b03      	cmp	r3, #3
 80185f6:	d11e      	bne.n	8018636 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80185f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185fa:	3338      	adds	r3, #56	; 0x38
 80185fc:	332a      	adds	r3, #42	; 0x2a
 80185fe:	4618      	mov	r0, r3
 8018600:	f7fd fff8 	bl	80165f4 <ld_word>
 8018604:	4603      	mov	r3, r0
 8018606:	2b00      	cmp	r3, #0
 8018608:	d001      	beq.n	801860e <find_volume+0x38e>
 801860a:	230d      	movs	r3, #13
 801860c:	e0b1      	b.n	8018772 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018610:	891b      	ldrh	r3, [r3, #8]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d001      	beq.n	801861a <find_volume+0x39a>
 8018616:	230d      	movs	r3, #13
 8018618:	e0ab      	b.n	8018772 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801861c:	3338      	adds	r3, #56	; 0x38
 801861e:	332c      	adds	r3, #44	; 0x2c
 8018620:	4618      	mov	r0, r3
 8018622:	f7fd ffff 	bl	8016624 <ld_dword>
 8018626:	4602      	mov	r2, r0
 8018628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801862e:	69db      	ldr	r3, [r3, #28]
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	647b      	str	r3, [r7, #68]	; 0x44
 8018634:	e01f      	b.n	8018676 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8018636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018638:	891b      	ldrh	r3, [r3, #8]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d101      	bne.n	8018642 <find_volume+0x3c2>
 801863e:	230d      	movs	r3, #13
 8018640:	e097      	b.n	8018772 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8018642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018648:	441a      	add	r2, r3
 801864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801864c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801864e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018652:	2b02      	cmp	r3, #2
 8018654:	d103      	bne.n	801865e <find_volume+0x3de>
 8018656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018658:	69db      	ldr	r3, [r3, #28]
 801865a:	005b      	lsls	r3, r3, #1
 801865c:	e00a      	b.n	8018674 <find_volume+0x3f4>
 801865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018660:	69da      	ldr	r2, [r3, #28]
 8018662:	4613      	mov	r3, r2
 8018664:	005b      	lsls	r3, r3, #1
 8018666:	4413      	add	r3, r2
 8018668:	085a      	lsrs	r2, r3, #1
 801866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866c:	69db      	ldr	r3, [r3, #28]
 801866e:	f003 0301 	and.w	r3, r3, #1
 8018672:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8018674:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8018676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018678:	6a1a      	ldr	r2, [r3, #32]
 801867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801867c:	899b      	ldrh	r3, [r3, #12]
 801867e:	4619      	mov	r1, r3
 8018680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018682:	440b      	add	r3, r1
 8018684:	3b01      	subs	r3, #1
 8018686:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018688:	8989      	ldrh	r1, [r1, #12]
 801868a:	fbb3 f3f1 	udiv	r3, r3, r1
 801868e:	429a      	cmp	r2, r3
 8018690:	d201      	bcs.n	8018696 <find_volume+0x416>
 8018692:	230d      	movs	r3, #13
 8018694:	e06d      	b.n	8018772 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018698:	f04f 32ff 	mov.w	r2, #4294967295
 801869c:	619a      	str	r2, [r3, #24]
 801869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a0:	699a      	ldr	r2, [r3, #24]
 80186a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80186a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a8:	2280      	movs	r2, #128	; 0x80
 80186aa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80186ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80186b0:	2b03      	cmp	r3, #3
 80186b2:	d149      	bne.n	8018748 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80186b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b6:	3338      	adds	r3, #56	; 0x38
 80186b8:	3330      	adds	r3, #48	; 0x30
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7fd ff9a 	bl	80165f4 <ld_word>
 80186c0:	4603      	mov	r3, r0
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d140      	bne.n	8018748 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80186c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186c8:	3301      	adds	r3, #1
 80186ca:	4619      	mov	r1, r3
 80186cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80186ce:	f7fe fa41 	bl	8016b54 <move_window>
 80186d2:	4603      	mov	r3, r0
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d137      	bne.n	8018748 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80186d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186da:	2200      	movs	r2, #0
 80186dc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80186de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186e0:	3338      	adds	r3, #56	; 0x38
 80186e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fd ff84 	bl	80165f4 <ld_word>
 80186ec:	4603      	mov	r3, r0
 80186ee:	461a      	mov	r2, r3
 80186f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d127      	bne.n	8018748 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80186f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186fa:	3338      	adds	r3, #56	; 0x38
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7fd ff91 	bl	8016624 <ld_dword>
 8018702:	4603      	mov	r3, r0
 8018704:	4a1d      	ldr	r2, [pc, #116]	; (801877c <find_volume+0x4fc>)
 8018706:	4293      	cmp	r3, r2
 8018708:	d11e      	bne.n	8018748 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801870c:	3338      	adds	r3, #56	; 0x38
 801870e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8018712:	4618      	mov	r0, r3
 8018714:	f7fd ff86 	bl	8016624 <ld_dword>
 8018718:	4603      	mov	r3, r0
 801871a:	4a19      	ldr	r2, [pc, #100]	; (8018780 <find_volume+0x500>)
 801871c:	4293      	cmp	r3, r2
 801871e:	d113      	bne.n	8018748 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018722:	3338      	adds	r3, #56	; 0x38
 8018724:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018728:	4618      	mov	r0, r3
 801872a:	f7fd ff7b 	bl	8016624 <ld_dword>
 801872e:	4602      	mov	r2, r0
 8018730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018732:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8018734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018736:	3338      	adds	r3, #56	; 0x38
 8018738:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801873c:	4618      	mov	r0, r3
 801873e:	f7fd ff71 	bl	8016624 <ld_dword>
 8018742:	4602      	mov	r2, r0
 8018744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018746:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801874e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018750:	4b0c      	ldr	r3, [pc, #48]	; (8018784 <find_volume+0x504>)
 8018752:	881b      	ldrh	r3, [r3, #0]
 8018754:	3301      	adds	r3, #1
 8018756:	b29a      	uxth	r2, r3
 8018758:	4b0a      	ldr	r3, [pc, #40]	; (8018784 <find_volume+0x504>)
 801875a:	801a      	strh	r2, [r3, #0]
 801875c:	4b09      	ldr	r3, [pc, #36]	; (8018784 <find_volume+0x504>)
 801875e:	881a      	ldrh	r2, [r3, #0]
 8018760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018762:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8018764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018766:	4a08      	ldr	r2, [pc, #32]	; (8018788 <find_volume+0x508>)
 8018768:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801876a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801876c:	f7fe f98a 	bl	8016a84 <clear_lock>
#endif
	return FR_OK;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	3758      	adds	r7, #88	; 0x58
 8018776:	46bd      	mov	sp, r7
 8018778:	bd80      	pop	{r7, pc}
 801877a:	bf00      	nop
 801877c:	41615252 	.word	0x41615252
 8018780:	61417272 	.word	0x61417272
 8018784:	240016c0 	.word	0x240016c0
 8018788:	240016e4 	.word	0x240016e4

0801878c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018796:	2309      	movs	r3, #9
 8018798:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d01c      	beq.n	80187da <validate+0x4e>
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d018      	beq.n	80187da <validate+0x4e>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d013      	beq.n	80187da <validate+0x4e>
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	889a      	ldrh	r2, [r3, #4]
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	88db      	ldrh	r3, [r3, #6]
 80187bc:	429a      	cmp	r2, r3
 80187be:	d10c      	bne.n	80187da <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	785b      	ldrb	r3, [r3, #1]
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fd fe76 	bl	80164b8 <disk_status>
 80187cc:	4603      	mov	r3, r0
 80187ce:	f003 0301 	and.w	r3, r3, #1
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d101      	bne.n	80187da <validate+0x4e>
			res = FR_OK;
 80187d6:	2300      	movs	r3, #0
 80187d8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80187da:	7bfb      	ldrb	r3, [r7, #15]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d102      	bne.n	80187e6 <validate+0x5a>
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	e000      	b.n	80187e8 <validate+0x5c>
 80187e6:	2300      	movs	r3, #0
 80187e8:	683a      	ldr	r2, [r7, #0]
 80187ea:	6013      	str	r3, [r2, #0]
	return res;
 80187ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80187ee:	4618      	mov	r0, r3
 80187f0:	3710      	adds	r7, #16
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}
	...

080187f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b088      	sub	sp, #32
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	4613      	mov	r3, r2
 8018804:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801880a:	f107 0310 	add.w	r3, r7, #16
 801880e:	4618      	mov	r0, r3
 8018810:	f7ff fc9c 	bl	801814c <get_ldnumber>
 8018814:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018816:	69fb      	ldr	r3, [r7, #28]
 8018818:	2b00      	cmp	r3, #0
 801881a:	da01      	bge.n	8018820 <f_mount+0x28>
 801881c:	230b      	movs	r3, #11
 801881e:	e02b      	b.n	8018878 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018820:	4a17      	ldr	r2, [pc, #92]	; (8018880 <f_mount+0x88>)
 8018822:	69fb      	ldr	r3, [r7, #28]
 8018824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018828:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801882a:	69bb      	ldr	r3, [r7, #24]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d005      	beq.n	801883c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018830:	69b8      	ldr	r0, [r7, #24]
 8018832:	f7fe f927 	bl	8016a84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8018836:	69bb      	ldr	r3, [r7, #24]
 8018838:	2200      	movs	r2, #0
 801883a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d002      	beq.n	8018848 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2200      	movs	r2, #0
 8018846:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018848:	68fa      	ldr	r2, [r7, #12]
 801884a:	490d      	ldr	r1, [pc, #52]	; (8018880 <f_mount+0x88>)
 801884c:	69fb      	ldr	r3, [r7, #28]
 801884e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d002      	beq.n	801885e <f_mount+0x66>
 8018858:	79fb      	ldrb	r3, [r7, #7]
 801885a:	2b01      	cmp	r3, #1
 801885c:	d001      	beq.n	8018862 <f_mount+0x6a>
 801885e:	2300      	movs	r3, #0
 8018860:	e00a      	b.n	8018878 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018862:	f107 010c 	add.w	r1, r7, #12
 8018866:	f107 0308 	add.w	r3, r7, #8
 801886a:	2200      	movs	r2, #0
 801886c:	4618      	mov	r0, r3
 801886e:	f7ff fd07 	bl	8018280 <find_volume>
 8018872:	4603      	mov	r3, r0
 8018874:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018876:	7dfb      	ldrb	r3, [r7, #23]
}
 8018878:	4618      	mov	r0, r3
 801887a:	3720      	adds	r7, #32
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}
 8018880:	240016bc 	.word	0x240016bc

08018884 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b09a      	sub	sp, #104	; 0x68
 8018888:	af00      	add	r7, sp, #0
 801888a:	60f8      	str	r0, [r7, #12]
 801888c:	60b9      	str	r1, [r7, #8]
 801888e:	4613      	mov	r3, r2
 8018890:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d101      	bne.n	801889c <f_open+0x18>
 8018898:	2309      	movs	r3, #9
 801889a:	e1bb      	b.n	8018c14 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801889c:	79fb      	ldrb	r3, [r7, #7]
 801889e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80188a4:	79fa      	ldrb	r2, [r7, #7]
 80188a6:	f107 0114 	add.w	r1, r7, #20
 80188aa:	f107 0308 	add.w	r3, r7, #8
 80188ae:	4618      	mov	r0, r3
 80188b0:	f7ff fce6 	bl	8018280 <find_volume>
 80188b4:	4603      	mov	r3, r0
 80188b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80188ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f040 819f 	bne.w	8018c02 <f_open+0x37e>
		dj.obj.fs = fs;
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80188c8:	68ba      	ldr	r2, [r7, #8]
 80188ca:	f107 0318 	add.w	r3, r7, #24
 80188ce:	4611      	mov	r1, r2
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7ff fbc5 	bl	8018060 <follow_path>
 80188d6:	4603      	mov	r3, r0
 80188d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80188dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d11a      	bne.n	801891a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80188e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80188e8:	b25b      	sxtb	r3, r3
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	da03      	bge.n	80188f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80188ee:	2306      	movs	r3, #6
 80188f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80188f4:	e011      	b.n	801891a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80188f6:	79fb      	ldrb	r3, [r7, #7]
 80188f8:	f023 0301 	bic.w	r3, r3, #1
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	bf14      	ite	ne
 8018900:	2301      	movne	r3, #1
 8018902:	2300      	moveq	r3, #0
 8018904:	b2db      	uxtb	r3, r3
 8018906:	461a      	mov	r2, r3
 8018908:	f107 0318 	add.w	r3, r7, #24
 801890c:	4611      	mov	r1, r2
 801890e:	4618      	mov	r0, r3
 8018910:	f7fd ff70 	bl	80167f4 <chk_lock>
 8018914:	4603      	mov	r3, r0
 8018916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801891a:	79fb      	ldrb	r3, [r7, #7]
 801891c:	f003 031c 	and.w	r3, r3, #28
 8018920:	2b00      	cmp	r3, #0
 8018922:	d07f      	beq.n	8018a24 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8018924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018928:	2b00      	cmp	r3, #0
 801892a:	d017      	beq.n	801895c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801892c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018930:	2b04      	cmp	r3, #4
 8018932:	d10e      	bne.n	8018952 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8018934:	f7fd ffba 	bl	80168ac <enq_lock>
 8018938:	4603      	mov	r3, r0
 801893a:	2b00      	cmp	r3, #0
 801893c:	d006      	beq.n	801894c <f_open+0xc8>
 801893e:	f107 0318 	add.w	r3, r7, #24
 8018942:	4618      	mov	r0, r3
 8018944:	f7ff f8dc 	bl	8017b00 <dir_register>
 8018948:	4603      	mov	r3, r0
 801894a:	e000      	b.n	801894e <f_open+0xca>
 801894c:	2312      	movs	r3, #18
 801894e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018952:	79fb      	ldrb	r3, [r7, #7]
 8018954:	f043 0308 	orr.w	r3, r3, #8
 8018958:	71fb      	strb	r3, [r7, #7]
 801895a:	e010      	b.n	801897e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801895c:	7fbb      	ldrb	r3, [r7, #30]
 801895e:	f003 0311 	and.w	r3, r3, #17
 8018962:	2b00      	cmp	r3, #0
 8018964:	d003      	beq.n	801896e <f_open+0xea>
					res = FR_DENIED;
 8018966:	2307      	movs	r3, #7
 8018968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801896c:	e007      	b.n	801897e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801896e:	79fb      	ldrb	r3, [r7, #7]
 8018970:	f003 0304 	and.w	r3, r3, #4
 8018974:	2b00      	cmp	r3, #0
 8018976:	d002      	beq.n	801897e <f_open+0xfa>
 8018978:	2308      	movs	r3, #8
 801897a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801897e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018982:	2b00      	cmp	r3, #0
 8018984:	d168      	bne.n	8018a58 <f_open+0x1d4>
 8018986:	79fb      	ldrb	r3, [r7, #7]
 8018988:	f003 0308 	and.w	r3, r3, #8
 801898c:	2b00      	cmp	r3, #0
 801898e:	d063      	beq.n	8018a58 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018990:	f7fb fba8 	bl	80140e4 <get_fattime>
 8018994:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018998:	330e      	adds	r3, #14
 801899a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801899c:	4618      	mov	r0, r3
 801899e:	f7fd fe7f 	bl	80166a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80189a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189a4:	3316      	adds	r3, #22
 80189a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7fd fe79 	bl	80166a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80189ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b0:	330b      	adds	r3, #11
 80189b2:	2220      	movs	r2, #32
 80189b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80189ba:	4611      	mov	r1, r2
 80189bc:	4618      	mov	r0, r3
 80189be:	f7fe fe17 	bl	80175f0 <ld_clust>
 80189c2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80189c8:	2200      	movs	r2, #0
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fe fe2f 	bl	801762e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80189d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d2:	331c      	adds	r3, #28
 80189d4:	2100      	movs	r1, #0
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7fd fe62 	bl	80166a0 <st_dword>
					fs->wflag = 1;
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	2201      	movs	r2, #1
 80189e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80189e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d037      	beq.n	8018a58 <f_open+0x1d4>
						dw = fs->winsect;
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80189ec:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80189ee:	f107 0318 	add.w	r3, r7, #24
 80189f2:	2200      	movs	r2, #0
 80189f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7fe fb57 	bl	80170aa <remove_chain>
 80189fc:	4603      	mov	r3, r0
 80189fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8018a02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d126      	bne.n	8018a58 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018a0a:	697b      	ldr	r3, [r7, #20]
 8018a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fe f8a0 	bl	8016b54 <move_window>
 8018a14:	4603      	mov	r3, r0
 8018a16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018a1a:	697b      	ldr	r3, [r7, #20]
 8018a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018a1e:	3a01      	subs	r2, #1
 8018a20:	615a      	str	r2, [r3, #20]
 8018a22:	e019      	b.n	8018a58 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018a24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d115      	bne.n	8018a58 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018a2c:	7fbb      	ldrb	r3, [r7, #30]
 8018a2e:	f003 0310 	and.w	r3, r3, #16
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d003      	beq.n	8018a3e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018a36:	2304      	movs	r3, #4
 8018a38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018a3c:	e00c      	b.n	8018a58 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018a3e:	79fb      	ldrb	r3, [r7, #7]
 8018a40:	f003 0302 	and.w	r3, r3, #2
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d007      	beq.n	8018a58 <f_open+0x1d4>
 8018a48:	7fbb      	ldrb	r3, [r7, #30]
 8018a4a:	f003 0301 	and.w	r3, r3, #1
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d002      	beq.n	8018a58 <f_open+0x1d4>
						res = FR_DENIED;
 8018a52:	2307      	movs	r3, #7
 8018a54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018a58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d128      	bne.n	8018ab2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018a60:	79fb      	ldrb	r3, [r7, #7]
 8018a62:	f003 0308 	and.w	r3, r3, #8
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d003      	beq.n	8018a72 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018a6a:	79fb      	ldrb	r3, [r7, #7]
 8018a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018a80:	79fb      	ldrb	r3, [r7, #7]
 8018a82:	f023 0301 	bic.w	r3, r3, #1
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	bf14      	ite	ne
 8018a8a:	2301      	movne	r3, #1
 8018a8c:	2300      	moveq	r3, #0
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	461a      	mov	r2, r3
 8018a92:	f107 0318 	add.w	r3, r7, #24
 8018a96:	4611      	mov	r1, r2
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fd ff29 	bl	80168f0 <inc_lock>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	691b      	ldr	r3, [r3, #16]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d102      	bne.n	8018ab2 <f_open+0x22e>
 8018aac:	2302      	movs	r3, #2
 8018aae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018ab2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	f040 80a3 	bne.w	8018c02 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018ac0:	4611      	mov	r1, r2
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7fe fd94 	bl	80175f0 <ld_clust>
 8018ac8:	4602      	mov	r2, r0
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad0:	331c      	adds	r3, #28
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f7fd fda6 	bl	8016624 <ld_dword>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018ae4:	697a      	ldr	r2, [r7, #20]
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018aea:	697b      	ldr	r3, [r7, #20]
 8018aec:	88da      	ldrh	r2, [r3, #6]
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	79fa      	ldrb	r2, [r7, #7]
 8018af6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	2200      	movs	r2, #0
 8018afc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2200      	movs	r2, #0
 8018b02:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018b04:	68fb      	ldr	r3, [r7, #12]
 8018b06:	2200      	movs	r2, #0
 8018b08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	3330      	adds	r3, #48	; 0x30
 8018b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8018b12:	2100      	movs	r1, #0
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7fd fe10 	bl	801673a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018b1a:	79fb      	ldrb	r3, [r7, #7]
 8018b1c:	f003 0320 	and.w	r3, r3, #32
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d06e      	beq.n	8018c02 <f_open+0x37e>
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d06a      	beq.n	8018c02 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	68da      	ldr	r2, [r3, #12]
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	895b      	ldrh	r3, [r3, #10]
 8018b38:	461a      	mov	r2, r3
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	899b      	ldrh	r3, [r3, #12]
 8018b3e:	fb02 f303 	mul.w	r3, r2, r3
 8018b42:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	689b      	ldr	r3, [r3, #8]
 8018b48:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	68db      	ldr	r3, [r3, #12]
 8018b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018b50:	e016      	b.n	8018b80 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7fe f8b9 	bl	8016cce <get_fat>
 8018b5c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8018b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d802      	bhi.n	8018b6a <f_open+0x2e6>
 8018b64:	2302      	movs	r3, #2
 8018b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b70:	d102      	bne.n	8018b78 <f_open+0x2f4>
 8018b72:	2301      	movs	r3, #1
 8018b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b7c:	1ad3      	subs	r3, r2, r3
 8018b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018b80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d103      	bne.n	8018b90 <f_open+0x30c>
 8018b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d8e0      	bhi.n	8018b52 <f_open+0x2ce>
				}
				fp->clust = clst;
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018b94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d131      	bne.n	8018c02 <f_open+0x37e>
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	899b      	ldrh	r3, [r3, #12]
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8018baa:	fb01 f202 	mul.w	r2, r1, r2
 8018bae:	1a9b      	subs	r3, r3, r2
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d026      	beq.n	8018c02 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7fe f869 	bl	8016c90 <clust2sect>
 8018bbe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d103      	bne.n	8018bce <f_open+0x34a>
						res = FR_INT_ERR;
 8018bc6:	2302      	movs	r3, #2
 8018bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018bcc:	e019      	b.n	8018c02 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018bce:	697b      	ldr	r3, [r7, #20]
 8018bd0:	899b      	ldrh	r3, [r3, #12]
 8018bd2:	461a      	mov	r2, r3
 8018bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8018bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bdc:	441a      	add	r2, r3
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018be2:	697b      	ldr	r3, [r7, #20]
 8018be4:	7858      	ldrb	r0, [r3, #1]
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	6a1a      	ldr	r2, [r3, #32]
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	f7fd fca1 	bl	8016538 <disk_read>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d002      	beq.n	8018c02 <f_open+0x37e>
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018c02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d002      	beq.n	8018c10 <f_open+0x38c>
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018c10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8018c14:	4618      	mov	r0, r3
 8018c16:	3768      	adds	r7, #104	; 0x68
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}

08018c1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b086      	sub	sp, #24
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	f107 0208 	add.w	r2, r7, #8
 8018c2a:	4611      	mov	r1, r2
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	f7ff fdad 	bl	801878c <validate>
 8018c32:	4603      	mov	r3, r0
 8018c34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018c36:	7dfb      	ldrb	r3, [r7, #23]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d168      	bne.n	8018d0e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	7d1b      	ldrb	r3, [r3, #20]
 8018c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d062      	beq.n	8018d0e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	7d1b      	ldrb	r3, [r3, #20]
 8018c4c:	b25b      	sxtb	r3, r3
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	da15      	bge.n	8018c7e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	7858      	ldrb	r0, [r3, #1]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6a1a      	ldr	r2, [r3, #32]
 8018c60:	2301      	movs	r3, #1
 8018c62:	f7fd fc89 	bl	8016578 <disk_write>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d001      	beq.n	8018c70 <f_sync+0x54>
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	e04f      	b.n	8018d10 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	7d1b      	ldrb	r3, [r3, #20]
 8018c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c78:	b2da      	uxtb	r2, r3
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018c7e:	f7fb fa31 	bl	80140e4 <get_fattime>
 8018c82:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018c84:	68ba      	ldr	r2, [r7, #8]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	4610      	mov	r0, r2
 8018c8e:	f7fd ff61 	bl	8016b54 <move_window>
 8018c92:	4603      	mov	r3, r0
 8018c94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018c96:	7dfb      	ldrb	r3, [r7, #23]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d138      	bne.n	8018d0e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ca0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	330b      	adds	r3, #11
 8018ca6:	781a      	ldrb	r2, [r3, #0]
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	330b      	adds	r3, #11
 8018cac:	f042 0220 	orr.w	r2, r2, #32
 8018cb0:	b2d2      	uxtb	r2, r2
 8018cb2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6818      	ldr	r0, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	689b      	ldr	r3, [r3, #8]
 8018cbc:	461a      	mov	r2, r3
 8018cbe:	68f9      	ldr	r1, [r7, #12]
 8018cc0:	f7fe fcb5 	bl	801762e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	f103 021c 	add.w	r2, r3, #28
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	68db      	ldr	r3, [r3, #12]
 8018cce:	4619      	mov	r1, r3
 8018cd0:	4610      	mov	r0, r2
 8018cd2:	f7fd fce5 	bl	80166a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	3316      	adds	r3, #22
 8018cda:	6939      	ldr	r1, [r7, #16]
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f7fd fcdf 	bl	80166a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	3312      	adds	r3, #18
 8018ce6:	2100      	movs	r1, #0
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7fd fcbe 	bl	801666a <st_word>
					fs->wflag = 1;
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7fd ff5a 	bl	8016bb0 <sync_fs>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	7d1b      	ldrb	r3, [r3, #20]
 8018d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018d08:	b2da      	uxtb	r2, r3
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	3718      	adds	r7, #24
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}

08018d18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b084      	sub	sp, #16
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018d20:	6878      	ldr	r0, [r7, #4]
 8018d22:	f7ff ff7b 	bl	8018c1c <f_sync>
 8018d26:	4603      	mov	r3, r0
 8018d28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018d2a:	7bfb      	ldrb	r3, [r7, #15]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d118      	bne.n	8018d62 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	f107 0208 	add.w	r2, r7, #8
 8018d36:	4611      	mov	r1, r2
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7ff fd27 	bl	801878c <validate>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018d42:	7bfb      	ldrb	r3, [r7, #15]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d10c      	bne.n	8018d62 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	691b      	ldr	r3, [r3, #16]
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	f7fd fe5d 	bl	8016a0c <dec_lock>
 8018d52:	4603      	mov	r3, r0
 8018d54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018d56:	7bfb      	ldrb	r3, [r7, #15]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d102      	bne.n	8018d62 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	3710      	adds	r7, #16
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}

08018d6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b087      	sub	sp, #28
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	60b9      	str	r1, [r7, #8]
 8018d76:	4613      	mov	r3, r2
 8018d78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018d7e:	2300      	movs	r3, #0
 8018d80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018d82:	4b1f      	ldr	r3, [pc, #124]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018d84:	7a5b      	ldrb	r3, [r3, #9]
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d131      	bne.n	8018df0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018d8c:	4b1c      	ldr	r3, [pc, #112]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018d8e:	7a5b      	ldrb	r3, [r3, #9]
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	461a      	mov	r2, r3
 8018d94:	4b1a      	ldr	r3, [pc, #104]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018d96:	2100      	movs	r1, #0
 8018d98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018d9a:	4b19      	ldr	r3, [pc, #100]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018d9c:	7a5b      	ldrb	r3, [r3, #9]
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	4a17      	ldr	r2, [pc, #92]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018da2:	009b      	lsls	r3, r3, #2
 8018da4:	4413      	add	r3, r2
 8018da6:	68fa      	ldr	r2, [r7, #12]
 8018da8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018daa:	4b15      	ldr	r3, [pc, #84]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018dac:	7a5b      	ldrb	r3, [r3, #9]
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	461a      	mov	r2, r3
 8018db2:	4b13      	ldr	r3, [pc, #76]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018db4:	4413      	add	r3, r2
 8018db6:	79fa      	ldrb	r2, [r7, #7]
 8018db8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018dba:	4b11      	ldr	r3, [pc, #68]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018dbc:	7a5b      	ldrb	r3, [r3, #9]
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	1c5a      	adds	r2, r3, #1
 8018dc2:	b2d1      	uxtb	r1, r2
 8018dc4:	4a0e      	ldr	r2, [pc, #56]	; (8018e00 <FATFS_LinkDriverEx+0x94>)
 8018dc6:	7251      	strb	r1, [r2, #9]
 8018dc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018dca:	7dbb      	ldrb	r3, [r7, #22]
 8018dcc:	3330      	adds	r3, #48	; 0x30
 8018dce:	b2da      	uxtb	r2, r3
 8018dd0:	68bb      	ldr	r3, [r7, #8]
 8018dd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018dd4:	68bb      	ldr	r3, [r7, #8]
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	223a      	movs	r2, #58	; 0x3a
 8018dda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	3302      	adds	r3, #2
 8018de0:	222f      	movs	r2, #47	; 0x2f
 8018de2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018de4:	68bb      	ldr	r3, [r7, #8]
 8018de6:	3303      	adds	r3, #3
 8018de8:	2200      	movs	r2, #0
 8018dea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018dec:	2300      	movs	r3, #0
 8018dee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	371c      	adds	r7, #28
 8018df6:	46bd      	mov	sp, r7
 8018df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfc:	4770      	bx	lr
 8018dfe:	bf00      	nop
 8018e00:	240018e4 	.word	0x240018e4

08018e04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
 8018e0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018e0e:	2200      	movs	r2, #0
 8018e10:	6839      	ldr	r1, [r7, #0]
 8018e12:	6878      	ldr	r0, [r7, #4]
 8018e14:	f7ff ffaa 	bl	8018d6c <FATFS_LinkDriverEx>
 8018e18:	4603      	mov	r3, r0
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3708      	adds	r7, #8
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
	...

08018e24 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b085      	sub	sp, #20
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	6039      	str	r1, [r7, #0]
 8018e2e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018e30:	88fb      	ldrh	r3, [r7, #6]
 8018e32:	2b7f      	cmp	r3, #127	; 0x7f
 8018e34:	d802      	bhi.n	8018e3c <ff_convert+0x18>
		c = chr;
 8018e36:	88fb      	ldrh	r3, [r7, #6]
 8018e38:	81fb      	strh	r3, [r7, #14]
 8018e3a:	e025      	b.n	8018e88 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018e3c:	683b      	ldr	r3, [r7, #0]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d00b      	beq.n	8018e5a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018e42:	88fb      	ldrh	r3, [r7, #6]
 8018e44:	2bff      	cmp	r3, #255	; 0xff
 8018e46:	d805      	bhi.n	8018e54 <ff_convert+0x30>
 8018e48:	88fb      	ldrh	r3, [r7, #6]
 8018e4a:	3b80      	subs	r3, #128	; 0x80
 8018e4c:	4a12      	ldr	r2, [pc, #72]	; (8018e98 <ff_convert+0x74>)
 8018e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e52:	e000      	b.n	8018e56 <ff_convert+0x32>
 8018e54:	2300      	movs	r3, #0
 8018e56:	81fb      	strh	r3, [r7, #14]
 8018e58:	e016      	b.n	8018e88 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	81fb      	strh	r3, [r7, #14]
 8018e5e:	e009      	b.n	8018e74 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018e60:	89fb      	ldrh	r3, [r7, #14]
 8018e62:	4a0d      	ldr	r2, [pc, #52]	; (8018e98 <ff_convert+0x74>)
 8018e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e68:	88fa      	ldrh	r2, [r7, #6]
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d006      	beq.n	8018e7c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018e6e:	89fb      	ldrh	r3, [r7, #14]
 8018e70:	3301      	adds	r3, #1
 8018e72:	81fb      	strh	r3, [r7, #14]
 8018e74:	89fb      	ldrh	r3, [r7, #14]
 8018e76:	2b7f      	cmp	r3, #127	; 0x7f
 8018e78:	d9f2      	bls.n	8018e60 <ff_convert+0x3c>
 8018e7a:	e000      	b.n	8018e7e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018e7c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018e7e:	89fb      	ldrh	r3, [r7, #14]
 8018e80:	3380      	adds	r3, #128	; 0x80
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	b2db      	uxtb	r3, r3
 8018e86:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018e88:	89fb      	ldrh	r3, [r7, #14]
}
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	3714      	adds	r7, #20
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e94:	4770      	bx	lr
 8018e96:	bf00      	nop
 8018e98:	0801e218 	.word	0x0801e218

08018e9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018e9c:	b480      	push	{r7}
 8018e9e:	b087      	sub	sp, #28
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018ea6:	88fb      	ldrh	r3, [r7, #6]
 8018ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018eac:	d201      	bcs.n	8018eb2 <ff_wtoupper+0x16>
 8018eae:	4b3e      	ldr	r3, [pc, #248]	; (8018fa8 <ff_wtoupper+0x10c>)
 8018eb0:	e000      	b.n	8018eb4 <ff_wtoupper+0x18>
 8018eb2:	4b3e      	ldr	r3, [pc, #248]	; (8018fac <ff_wtoupper+0x110>)
 8018eb4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018eb6:	697b      	ldr	r3, [r7, #20]
 8018eb8:	1c9a      	adds	r2, r3, #2
 8018eba:	617a      	str	r2, [r7, #20]
 8018ebc:	881b      	ldrh	r3, [r3, #0]
 8018ebe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018ec0:	8a7b      	ldrh	r3, [r7, #18]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d068      	beq.n	8018f98 <ff_wtoupper+0xfc>
 8018ec6:	88fa      	ldrh	r2, [r7, #6]
 8018ec8:	8a7b      	ldrh	r3, [r7, #18]
 8018eca:	429a      	cmp	r2, r3
 8018ecc:	d364      	bcc.n	8018f98 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	1c9a      	adds	r2, r3, #2
 8018ed2:	617a      	str	r2, [r7, #20]
 8018ed4:	881b      	ldrh	r3, [r3, #0]
 8018ed6:	823b      	strh	r3, [r7, #16]
 8018ed8:	8a3b      	ldrh	r3, [r7, #16]
 8018eda:	0a1b      	lsrs	r3, r3, #8
 8018edc:	81fb      	strh	r3, [r7, #14]
 8018ede:	8a3b      	ldrh	r3, [r7, #16]
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8018ee4:	88fa      	ldrh	r2, [r7, #6]
 8018ee6:	8a79      	ldrh	r1, [r7, #18]
 8018ee8:	8a3b      	ldrh	r3, [r7, #16]
 8018eea:	440b      	add	r3, r1
 8018eec:	429a      	cmp	r2, r3
 8018eee:	da49      	bge.n	8018f84 <ff_wtoupper+0xe8>
			switch (cmd) {
 8018ef0:	89fb      	ldrh	r3, [r7, #14]
 8018ef2:	2b08      	cmp	r3, #8
 8018ef4:	d84f      	bhi.n	8018f96 <ff_wtoupper+0xfa>
 8018ef6:	a201      	add	r2, pc, #4	; (adr r2, 8018efc <ff_wtoupper+0x60>)
 8018ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018efc:	08018f21 	.word	0x08018f21
 8018f00:	08018f33 	.word	0x08018f33
 8018f04:	08018f49 	.word	0x08018f49
 8018f08:	08018f51 	.word	0x08018f51
 8018f0c:	08018f59 	.word	0x08018f59
 8018f10:	08018f61 	.word	0x08018f61
 8018f14:	08018f69 	.word	0x08018f69
 8018f18:	08018f71 	.word	0x08018f71
 8018f1c:	08018f79 	.word	0x08018f79
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018f20:	88fa      	ldrh	r2, [r7, #6]
 8018f22:	8a7b      	ldrh	r3, [r7, #18]
 8018f24:	1ad3      	subs	r3, r2, r3
 8018f26:	005b      	lsls	r3, r3, #1
 8018f28:	697a      	ldr	r2, [r7, #20]
 8018f2a:	4413      	add	r3, r2
 8018f2c:	881b      	ldrh	r3, [r3, #0]
 8018f2e:	80fb      	strh	r3, [r7, #6]
 8018f30:	e027      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018f32:	88fa      	ldrh	r2, [r7, #6]
 8018f34:	8a7b      	ldrh	r3, [r7, #18]
 8018f36:	1ad3      	subs	r3, r2, r3
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	f003 0301 	and.w	r3, r3, #1
 8018f3e:	b29b      	uxth	r3, r3
 8018f40:	88fa      	ldrh	r2, [r7, #6]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	80fb      	strh	r3, [r7, #6]
 8018f46:	e01c      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018f48:	88fb      	ldrh	r3, [r7, #6]
 8018f4a:	3b10      	subs	r3, #16
 8018f4c:	80fb      	strh	r3, [r7, #6]
 8018f4e:	e018      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018f50:	88fb      	ldrh	r3, [r7, #6]
 8018f52:	3b20      	subs	r3, #32
 8018f54:	80fb      	strh	r3, [r7, #6]
 8018f56:	e014      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018f58:	88fb      	ldrh	r3, [r7, #6]
 8018f5a:	3b30      	subs	r3, #48	; 0x30
 8018f5c:	80fb      	strh	r3, [r7, #6]
 8018f5e:	e010      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018f60:	88fb      	ldrh	r3, [r7, #6]
 8018f62:	3b1a      	subs	r3, #26
 8018f64:	80fb      	strh	r3, [r7, #6]
 8018f66:	e00c      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018f68:	88fb      	ldrh	r3, [r7, #6]
 8018f6a:	3308      	adds	r3, #8
 8018f6c:	80fb      	strh	r3, [r7, #6]
 8018f6e:	e008      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018f70:	88fb      	ldrh	r3, [r7, #6]
 8018f72:	3b50      	subs	r3, #80	; 0x50
 8018f74:	80fb      	strh	r3, [r7, #6]
 8018f76:	e004      	b.n	8018f82 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018f78:	88fb      	ldrh	r3, [r7, #6]
 8018f7a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018f7e:	80fb      	strh	r3, [r7, #6]
 8018f80:	bf00      	nop
			}
			break;
 8018f82:	e008      	b.n	8018f96 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018f84:	89fb      	ldrh	r3, [r7, #14]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d195      	bne.n	8018eb6 <ff_wtoupper+0x1a>
 8018f8a:	8a3b      	ldrh	r3, [r7, #16]
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	697a      	ldr	r2, [r7, #20]
 8018f90:	4413      	add	r3, r2
 8018f92:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018f94:	e78f      	b.n	8018eb6 <ff_wtoupper+0x1a>
			break;
 8018f96:	bf00      	nop
	}

	return chr;
 8018f98:	88fb      	ldrh	r3, [r7, #6]
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	371c      	adds	r7, #28
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa4:	4770      	bx	lr
 8018fa6:	bf00      	nop
 8018fa8:	0801e318 	.word	0x0801e318
 8018fac:	0801e50c 	.word	0x0801e50c

08018fb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8018fb4:	2201      	movs	r2, #1
 8018fb6:	4913      	ldr	r1, [pc, #76]	; (8019004 <MX_USB_DEVICE_Init+0x54>)
 8018fb8:	4813      	ldr	r0, [pc, #76]	; (8019008 <MX_USB_DEVICE_Init+0x58>)
 8018fba:	f7fb ff85 	bl	8014ec8 <USBD_Init>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d001      	beq.n	8018fc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018fc4:	f7e9 fa02 	bl	80023cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8018fc8:	4910      	ldr	r1, [pc, #64]	; (801900c <MX_USB_DEVICE_Init+0x5c>)
 8018fca:	480f      	ldr	r0, [pc, #60]	; (8019008 <MX_USB_DEVICE_Init+0x58>)
 8018fcc:	f7fb ffac 	bl	8014f28 <USBD_RegisterClass>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d001      	beq.n	8018fda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018fd6:	f7e9 f9f9 	bl	80023cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8018fda:	490d      	ldr	r1, [pc, #52]	; (8019010 <MX_USB_DEVICE_Init+0x60>)
 8018fdc:	480a      	ldr	r0, [pc, #40]	; (8019008 <MX_USB_DEVICE_Init+0x58>)
 8018fde:	f7fb fea3 	bl	8014d28 <USBD_CDC_RegisterInterface>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d001      	beq.n	8018fec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018fe8:	f7e9 f9f0 	bl	80023cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8018fec:	4806      	ldr	r0, [pc, #24]	; (8019008 <MX_USB_DEVICE_Init+0x58>)
 8018fee:	f7fb ffd1 	bl	8014f94 <USBD_Start>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d001      	beq.n	8018ffc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018ff8:	f7e9 f9e8 	bl	80023cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018ffc:	f7f0 fa4e 	bl	800949c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019000:	bf00      	nop
 8019002:	bd80      	pop	{r7, pc}
 8019004:	240000b0 	.word	0x240000b0
 8019008:	240018f0 	.word	0x240018f0
 801900c:	2400001c 	.word	0x2400001c
 8019010:	2400009c 	.word	0x2400009c

08019014 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8019018:	2200      	movs	r2, #0
 801901a:	4905      	ldr	r1, [pc, #20]	; (8019030 <CDC_Init_HS+0x1c>)
 801901c:	4805      	ldr	r0, [pc, #20]	; (8019034 <CDC_Init_HS+0x20>)
 801901e:	f7fb fe9d 	bl	8014d5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8019022:	4905      	ldr	r1, [pc, #20]	; (8019038 <CDC_Init_HS+0x24>)
 8019024:	4803      	ldr	r0, [pc, #12]	; (8019034 <CDC_Init_HS+0x20>)
 8019026:	f7fb febb 	bl	8014da0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801902a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801902c:	4618      	mov	r0, r3
 801902e:	bd80      	pop	{r7, pc}
 8019030:	240023cc 	.word	0x240023cc
 8019034:	240018f0 	.word	0x240018f0
 8019038:	24001bcc 	.word	0x24001bcc

0801903c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801903c:	b480      	push	{r7}
 801903e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8019040:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8019042:	4618      	mov	r0, r3
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr

0801904c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801904c:	b480      	push	{r7}
 801904e:	b083      	sub	sp, #12
 8019050:	af00      	add	r7, sp, #0
 8019052:	4603      	mov	r3, r0
 8019054:	6039      	str	r1, [r7, #0]
 8019056:	71fb      	strb	r3, [r7, #7]
 8019058:	4613      	mov	r3, r2
 801905a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801905c:	79fb      	ldrb	r3, [r7, #7]
 801905e:	2b23      	cmp	r3, #35	; 0x23
 8019060:	d84a      	bhi.n	80190f8 <CDC_Control_HS+0xac>
 8019062:	a201      	add	r2, pc, #4	; (adr r2, 8019068 <CDC_Control_HS+0x1c>)
 8019064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019068:	080190f9 	.word	0x080190f9
 801906c:	080190f9 	.word	0x080190f9
 8019070:	080190f9 	.word	0x080190f9
 8019074:	080190f9 	.word	0x080190f9
 8019078:	080190f9 	.word	0x080190f9
 801907c:	080190f9 	.word	0x080190f9
 8019080:	080190f9 	.word	0x080190f9
 8019084:	080190f9 	.word	0x080190f9
 8019088:	080190f9 	.word	0x080190f9
 801908c:	080190f9 	.word	0x080190f9
 8019090:	080190f9 	.word	0x080190f9
 8019094:	080190f9 	.word	0x080190f9
 8019098:	080190f9 	.word	0x080190f9
 801909c:	080190f9 	.word	0x080190f9
 80190a0:	080190f9 	.word	0x080190f9
 80190a4:	080190f9 	.word	0x080190f9
 80190a8:	080190f9 	.word	0x080190f9
 80190ac:	080190f9 	.word	0x080190f9
 80190b0:	080190f9 	.word	0x080190f9
 80190b4:	080190f9 	.word	0x080190f9
 80190b8:	080190f9 	.word	0x080190f9
 80190bc:	080190f9 	.word	0x080190f9
 80190c0:	080190f9 	.word	0x080190f9
 80190c4:	080190f9 	.word	0x080190f9
 80190c8:	080190f9 	.word	0x080190f9
 80190cc:	080190f9 	.word	0x080190f9
 80190d0:	080190f9 	.word	0x080190f9
 80190d4:	080190f9 	.word	0x080190f9
 80190d8:	080190f9 	.word	0x080190f9
 80190dc:	080190f9 	.word	0x080190f9
 80190e0:	080190f9 	.word	0x080190f9
 80190e4:	080190f9 	.word	0x080190f9
 80190e8:	080190f9 	.word	0x080190f9
 80190ec:	080190f9 	.word	0x080190f9
 80190f0:	080190f9 	.word	0x080190f9
 80190f4:	080190f9 	.word	0x080190f9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80190f8:	bf00      	nop
  }

  return (USBD_OK);
 80190fa:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	370c      	adds	r7, #12
 8019100:	46bd      	mov	sp, r7
 8019102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019106:	4770      	bx	lr

08019108 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b082      	sub	sp, #8
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8019112:	6879      	ldr	r1, [r7, #4]
 8019114:	4805      	ldr	r0, [pc, #20]	; (801912c <CDC_Receive_HS+0x24>)
 8019116:	f7fb fe43 	bl	8014da0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801911a:	4804      	ldr	r0, [pc, #16]	; (801912c <CDC_Receive_HS+0x24>)
 801911c:	f7fb fe9e 	bl	8014e5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019120:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8019122:	4618      	mov	r0, r3
 8019124:	3708      	adds	r7, #8
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
 801912a:	bf00      	nop
 801912c:	240018f0 	.word	0x240018f0

08019130 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b084      	sub	sp, #16
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	460b      	mov	r3, r1
 801913a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801913c:	2300      	movs	r3, #0
 801913e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8019140:	4b0d      	ldr	r3, [pc, #52]	; (8019178 <CDC_Transmit_HS+0x48>)
 8019142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019146:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019148:	68bb      	ldr	r3, [r7, #8]
 801914a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801914e:	2b00      	cmp	r3, #0
 8019150:	d001      	beq.n	8019156 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8019152:	2301      	movs	r3, #1
 8019154:	e00b      	b.n	801916e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8019156:	887b      	ldrh	r3, [r7, #2]
 8019158:	461a      	mov	r2, r3
 801915a:	6879      	ldr	r1, [r7, #4]
 801915c:	4806      	ldr	r0, [pc, #24]	; (8019178 <CDC_Transmit_HS+0x48>)
 801915e:	f7fb fdfd 	bl	8014d5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8019162:	4805      	ldr	r0, [pc, #20]	; (8019178 <CDC_Transmit_HS+0x48>)
 8019164:	f7fb fe3a 	bl	8014ddc <USBD_CDC_TransmitPacket>
 8019168:	4603      	mov	r3, r0
 801916a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801916c:	7bfb      	ldrb	r3, [r7, #15]
}
 801916e:	4618      	mov	r0, r3
 8019170:	3710      	adds	r7, #16
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}
 8019176:	bf00      	nop
 8019178:	240018f0 	.word	0x240018f0

0801917c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801917c:	b480      	push	{r7}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	4613      	mov	r3, r2
 8019188:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801918a:	2300      	movs	r3, #0
 801918c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801918e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019192:	4618      	mov	r0, r3
 8019194:	371c      	adds	r7, #28
 8019196:	46bd      	mov	sp, r7
 8019198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919c:	4770      	bx	lr
	...

080191a0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191a0:	b480      	push	{r7}
 80191a2:	b083      	sub	sp, #12
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	4603      	mov	r3, r0
 80191a8:	6039      	str	r1, [r7, #0]
 80191aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	2212      	movs	r2, #18
 80191b0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80191b2:	4b03      	ldr	r3, [pc, #12]	; (80191c0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr
 80191c0:	240000cc 	.word	0x240000cc

080191c4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191c4:	b480      	push	{r7}
 80191c6:	b083      	sub	sp, #12
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	4603      	mov	r3, r0
 80191cc:	6039      	str	r1, [r7, #0]
 80191ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	2204      	movs	r2, #4
 80191d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80191d6:	4b03      	ldr	r3, [pc, #12]	; (80191e4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80191d8:	4618      	mov	r0, r3
 80191da:	370c      	adds	r7, #12
 80191dc:	46bd      	mov	sp, r7
 80191de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e2:	4770      	bx	lr
 80191e4:	240000e0 	.word	0x240000e0

080191e8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b082      	sub	sp, #8
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	4603      	mov	r3, r0
 80191f0:	6039      	str	r1, [r7, #0]
 80191f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80191f4:	79fb      	ldrb	r3, [r7, #7]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d105      	bne.n	8019206 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80191fa:	683a      	ldr	r2, [r7, #0]
 80191fc:	4907      	ldr	r1, [pc, #28]	; (801921c <USBD_HS_ProductStrDescriptor+0x34>)
 80191fe:	4808      	ldr	r0, [pc, #32]	; (8019220 <USBD_HS_ProductStrDescriptor+0x38>)
 8019200:	f7fd f87a 	bl	80162f8 <USBD_GetString>
 8019204:	e004      	b.n	8019210 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8019206:	683a      	ldr	r2, [r7, #0]
 8019208:	4904      	ldr	r1, [pc, #16]	; (801921c <USBD_HS_ProductStrDescriptor+0x34>)
 801920a:	4805      	ldr	r0, [pc, #20]	; (8019220 <USBD_HS_ProductStrDescriptor+0x38>)
 801920c:	f7fd f874 	bl	80162f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019210:	4b02      	ldr	r3, [pc, #8]	; (801921c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8019212:	4618      	mov	r0, r3
 8019214:	3708      	adds	r7, #8
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}
 801921a:	bf00      	nop
 801921c:	24002bcc 	.word	0x24002bcc
 8019220:	0801e088 	.word	0x0801e088

08019224 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b082      	sub	sp, #8
 8019228:	af00      	add	r7, sp, #0
 801922a:	4603      	mov	r3, r0
 801922c:	6039      	str	r1, [r7, #0]
 801922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019230:	683a      	ldr	r2, [r7, #0]
 8019232:	4904      	ldr	r1, [pc, #16]	; (8019244 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8019234:	4804      	ldr	r0, [pc, #16]	; (8019248 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8019236:	f7fd f85f 	bl	80162f8 <USBD_GetString>
  return USBD_StrDesc;
 801923a:	4b02      	ldr	r3, [pc, #8]	; (8019244 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801923c:	4618      	mov	r0, r3
 801923e:	3708      	adds	r7, #8
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	24002bcc 	.word	0x24002bcc
 8019248:	0801e0a4 	.word	0x0801e0a4

0801924c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b082      	sub	sp, #8
 8019250:	af00      	add	r7, sp, #0
 8019252:	4603      	mov	r3, r0
 8019254:	6039      	str	r1, [r7, #0]
 8019256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	221a      	movs	r2, #26
 801925c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801925e:	f000 f843 	bl	80192e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019262:	4b02      	ldr	r3, [pc, #8]	; (801926c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8019264:	4618      	mov	r0, r3
 8019266:	3708      	adds	r7, #8
 8019268:	46bd      	mov	sp, r7
 801926a:	bd80      	pop	{r7, pc}
 801926c:	240000e4 	.word	0x240000e4

08019270 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019270:	b580      	push	{r7, lr}
 8019272:	b082      	sub	sp, #8
 8019274:	af00      	add	r7, sp, #0
 8019276:	4603      	mov	r3, r0
 8019278:	6039      	str	r1, [r7, #0]
 801927a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801927c:	79fb      	ldrb	r3, [r7, #7]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d105      	bne.n	801928e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8019282:	683a      	ldr	r2, [r7, #0]
 8019284:	4907      	ldr	r1, [pc, #28]	; (80192a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8019286:	4808      	ldr	r0, [pc, #32]	; (80192a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019288:	f7fd f836 	bl	80162f8 <USBD_GetString>
 801928c:	e004      	b.n	8019298 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801928e:	683a      	ldr	r2, [r7, #0]
 8019290:	4904      	ldr	r1, [pc, #16]	; (80192a4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8019292:	4805      	ldr	r0, [pc, #20]	; (80192a8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019294:	f7fd f830 	bl	80162f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019298:	4b02      	ldr	r3, [pc, #8]	; (80192a4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801929a:	4618      	mov	r0, r3
 801929c:	3708      	adds	r7, #8
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	24002bcc 	.word	0x24002bcc
 80192a8:	0801e0a8 	.word	0x0801e0a8

080192ac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b082      	sub	sp, #8
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	4603      	mov	r3, r0
 80192b4:	6039      	str	r1, [r7, #0]
 80192b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80192b8:	79fb      	ldrb	r3, [r7, #7]
 80192ba:	2b00      	cmp	r3, #0
 80192bc:	d105      	bne.n	80192ca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80192be:	683a      	ldr	r2, [r7, #0]
 80192c0:	4907      	ldr	r1, [pc, #28]	; (80192e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80192c2:	4808      	ldr	r0, [pc, #32]	; (80192e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80192c4:	f7fd f818 	bl	80162f8 <USBD_GetString>
 80192c8:	e004      	b.n	80192d4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	4904      	ldr	r1, [pc, #16]	; (80192e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80192ce:	4805      	ldr	r0, [pc, #20]	; (80192e4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80192d0:	f7fd f812 	bl	80162f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80192d4:	4b02      	ldr	r3, [pc, #8]	; (80192e0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	3708      	adds	r7, #8
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
 80192de:	bf00      	nop
 80192e0:	24002bcc 	.word	0x24002bcc
 80192e4:	0801e0b4 	.word	0x0801e0b4

080192e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80192ee:	4b0f      	ldr	r3, [pc, #60]	; (801932c <Get_SerialNum+0x44>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80192f4:	4b0e      	ldr	r3, [pc, #56]	; (8019330 <Get_SerialNum+0x48>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80192fa:	4b0e      	ldr	r3, [pc, #56]	; (8019334 <Get_SerialNum+0x4c>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019300:	68fa      	ldr	r2, [r7, #12]
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	4413      	add	r3, r2
 8019306:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d009      	beq.n	8019322 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801930e:	2208      	movs	r2, #8
 8019310:	4909      	ldr	r1, [pc, #36]	; (8019338 <Get_SerialNum+0x50>)
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f000 f814 	bl	8019340 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019318:	2204      	movs	r2, #4
 801931a:	4908      	ldr	r1, [pc, #32]	; (801933c <Get_SerialNum+0x54>)
 801931c:	68b8      	ldr	r0, [r7, #8]
 801931e:	f000 f80f 	bl	8019340 <IntToUnicode>
  }
}
 8019322:	bf00      	nop
 8019324:	3710      	adds	r7, #16
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}
 801932a:	bf00      	nop
 801932c:	1ff1e800 	.word	0x1ff1e800
 8019330:	1ff1e804 	.word	0x1ff1e804
 8019334:	1ff1e808 	.word	0x1ff1e808
 8019338:	240000e6 	.word	0x240000e6
 801933c:	240000f6 	.word	0x240000f6

08019340 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019340:	b480      	push	{r7}
 8019342:	b087      	sub	sp, #28
 8019344:	af00      	add	r7, sp, #0
 8019346:	60f8      	str	r0, [r7, #12]
 8019348:	60b9      	str	r1, [r7, #8]
 801934a:	4613      	mov	r3, r2
 801934c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801934e:	2300      	movs	r3, #0
 8019350:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019352:	2300      	movs	r3, #0
 8019354:	75fb      	strb	r3, [r7, #23]
 8019356:	e027      	b.n	80193a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	0f1b      	lsrs	r3, r3, #28
 801935c:	2b09      	cmp	r3, #9
 801935e:	d80b      	bhi.n	8019378 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	0f1b      	lsrs	r3, r3, #28
 8019364:	b2da      	uxtb	r2, r3
 8019366:	7dfb      	ldrb	r3, [r7, #23]
 8019368:	005b      	lsls	r3, r3, #1
 801936a:	4619      	mov	r1, r3
 801936c:	68bb      	ldr	r3, [r7, #8]
 801936e:	440b      	add	r3, r1
 8019370:	3230      	adds	r2, #48	; 0x30
 8019372:	b2d2      	uxtb	r2, r2
 8019374:	701a      	strb	r2, [r3, #0]
 8019376:	e00a      	b.n	801938e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	0f1b      	lsrs	r3, r3, #28
 801937c:	b2da      	uxtb	r2, r3
 801937e:	7dfb      	ldrb	r3, [r7, #23]
 8019380:	005b      	lsls	r3, r3, #1
 8019382:	4619      	mov	r1, r3
 8019384:	68bb      	ldr	r3, [r7, #8]
 8019386:	440b      	add	r3, r1
 8019388:	3237      	adds	r2, #55	; 0x37
 801938a:	b2d2      	uxtb	r2, r2
 801938c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	011b      	lsls	r3, r3, #4
 8019392:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019394:	7dfb      	ldrb	r3, [r7, #23]
 8019396:	005b      	lsls	r3, r3, #1
 8019398:	3301      	adds	r3, #1
 801939a:	68ba      	ldr	r2, [r7, #8]
 801939c:	4413      	add	r3, r2
 801939e:	2200      	movs	r2, #0
 80193a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80193a2:	7dfb      	ldrb	r3, [r7, #23]
 80193a4:	3301      	adds	r3, #1
 80193a6:	75fb      	strb	r3, [r7, #23]
 80193a8:	7dfa      	ldrb	r2, [r7, #23]
 80193aa:	79fb      	ldrb	r3, [r7, #7]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d3d3      	bcc.n	8019358 <IntToUnicode+0x18>
  }
}
 80193b0:	bf00      	nop
 80193b2:	bf00      	nop
 80193b4:	371c      	adds	r7, #28
 80193b6:	46bd      	mov	sp, r7
 80193b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193bc:	4770      	bx	lr
	...

080193c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b0b2      	sub	sp, #200	; 0xc8
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80193c8:	f107 0310 	add.w	r3, r7, #16
 80193cc:	22b8      	movs	r2, #184	; 0xb8
 80193ce:	2100      	movs	r1, #0
 80193d0:	4618      	mov	r0, r3
 80193d2:	f001 fa64 	bl	801a89e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4a1a      	ldr	r2, [pc, #104]	; (8019444 <HAL_PCD_MspInit+0x84>)
 80193dc:	4293      	cmp	r3, r2
 80193de:	d12c      	bne.n	801943a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80193e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80193e4:	f04f 0300 	mov.w	r3, #0
 80193e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80193ec:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80193f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80193f4:	f107 0310 	add.w	r3, r7, #16
 80193f8:	4618      	mov	r0, r3
 80193fa:	f7f1 f82f 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 80193fe:	4603      	mov	r3, r0
 8019400:	2b00      	cmp	r3, #0
 8019402:	d001      	beq.n	8019408 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8019404:	f7e8 ffe2 	bl	80023cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8019408:	f7f0 f848 	bl	800949c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801940c:	4b0e      	ldr	r3, [pc, #56]	; (8019448 <HAL_PCD_MspInit+0x88>)
 801940e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019412:	4a0d      	ldr	r2, [pc, #52]	; (8019448 <HAL_PCD_MspInit+0x88>)
 8019414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019418:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801941c:	4b0a      	ldr	r3, [pc, #40]	; (8019448 <HAL_PCD_MspInit+0x88>)
 801941e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019426:	60fb      	str	r3, [r7, #12]
 8019428:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801942a:	2200      	movs	r2, #0
 801942c:	2100      	movs	r1, #0
 801942e:	204d      	movs	r0, #77	; 0x4d
 8019430:	f7eb fdd1 	bl	8004fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8019434:	204d      	movs	r0, #77	; 0x4d
 8019436:	f7eb fde8 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801943a:	bf00      	nop
 801943c:	37c8      	adds	r7, #200	; 0xc8
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	40040000 	.word	0x40040000
 8019448:	58024400 	.word	0x58024400

0801944c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019460:	4619      	mov	r1, r3
 8019462:	4610      	mov	r0, r2
 8019464:	f7fb fde3 	bl	801502e <USBD_LL_SetupStage>
}
 8019468:	bf00      	nop
 801946a:	3708      	adds	r7, #8
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	460b      	mov	r3, r1
 801947a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019482:	78fa      	ldrb	r2, [r7, #3]
 8019484:	6879      	ldr	r1, [r7, #4]
 8019486:	4613      	mov	r3, r2
 8019488:	00db      	lsls	r3, r3, #3
 801948a:	4413      	add	r3, r2
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	440b      	add	r3, r1
 8019490:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8019494:	681a      	ldr	r2, [r3, #0]
 8019496:	78fb      	ldrb	r3, [r7, #3]
 8019498:	4619      	mov	r1, r3
 801949a:	f7fb fe1d 	bl	80150d8 <USBD_LL_DataOutStage>
}
 801949e:	bf00      	nop
 80194a0:	3708      	adds	r7, #8
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}

080194a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194a6:	b580      	push	{r7, lr}
 80194a8:	b082      	sub	sp, #8
 80194aa:	af00      	add	r7, sp, #0
 80194ac:	6078      	str	r0, [r7, #4]
 80194ae:	460b      	mov	r3, r1
 80194b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80194b8:	78fa      	ldrb	r2, [r7, #3]
 80194ba:	6879      	ldr	r1, [r7, #4]
 80194bc:	4613      	mov	r3, r2
 80194be:	00db      	lsls	r3, r3, #3
 80194c0:	4413      	add	r3, r2
 80194c2:	009b      	lsls	r3, r3, #2
 80194c4:	440b      	add	r3, r1
 80194c6:	3348      	adds	r3, #72	; 0x48
 80194c8:	681a      	ldr	r2, [r3, #0]
 80194ca:	78fb      	ldrb	r3, [r7, #3]
 80194cc:	4619      	mov	r1, r3
 80194ce:	f7fb feb6 	bl	801523e <USBD_LL_DataInStage>
}
 80194d2:	bf00      	nop
 80194d4:	3708      	adds	r7, #8
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}

080194da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194da:	b580      	push	{r7, lr}
 80194dc:	b082      	sub	sp, #8
 80194de:	af00      	add	r7, sp, #0
 80194e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80194e8:	4618      	mov	r0, r3
 80194ea:	f7fb fff0 	bl	80154ce <USBD_LL_SOF>
}
 80194ee:	bf00      	nop
 80194f0:	3708      	adds	r7, #8
 80194f2:	46bd      	mov	sp, r7
 80194f4:	bd80      	pop	{r7, pc}

080194f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80194f6:	b580      	push	{r7, lr}
 80194f8:	b084      	sub	sp, #16
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80194fe:	2301      	movs	r3, #1
 8019500:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	691b      	ldr	r3, [r3, #16]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d102      	bne.n	8019510 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801950a:	2300      	movs	r3, #0
 801950c:	73fb      	strb	r3, [r7, #15]
 801950e:	e008      	b.n	8019522 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	691b      	ldr	r3, [r3, #16]
 8019514:	2b02      	cmp	r3, #2
 8019516:	d102      	bne.n	801951e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019518:	2301      	movs	r3, #1
 801951a:	73fb      	strb	r3, [r7, #15]
 801951c:	e001      	b.n	8019522 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801951e:	f7e8 ff55 	bl	80023cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019528:	7bfa      	ldrb	r2, [r7, #15]
 801952a:	4611      	mov	r1, r2
 801952c:	4618      	mov	r0, r3
 801952e:	f7fb ff8a 	bl	8015446 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019538:	4618      	mov	r0, r3
 801953a:	f7fb ff32 	bl	80153a2 <USBD_LL_Reset>
}
 801953e:	bf00      	nop
 8019540:	3710      	adds	r7, #16
 8019542:	46bd      	mov	sp, r7
 8019544:	bd80      	pop	{r7, pc}
	...

08019548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b082      	sub	sp, #8
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019556:	4618      	mov	r0, r3
 8019558:	f7fb ff85 	bl	8015466 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	687a      	ldr	r2, [r7, #4]
 8019568:	6812      	ldr	r2, [r2, #0]
 801956a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801956e:	f043 0301 	orr.w	r3, r3, #1
 8019572:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6a1b      	ldr	r3, [r3, #32]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d005      	beq.n	8019588 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801957c:	4b04      	ldr	r3, [pc, #16]	; (8019590 <HAL_PCD_SuspendCallback+0x48>)
 801957e:	691b      	ldr	r3, [r3, #16]
 8019580:	4a03      	ldr	r2, [pc, #12]	; (8019590 <HAL_PCD_SuspendCallback+0x48>)
 8019582:	f043 0306 	orr.w	r3, r3, #6
 8019586:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019588:	bf00      	nop
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}
 8019590:	e000ed00 	.word	0xe000ed00

08019594 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b082      	sub	sp, #8
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fb ff7b 	bl	801549e <USBD_LL_Resume>
}
 80195a8:	bf00      	nop
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}

080195b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195b0:	b580      	push	{r7, lr}
 80195b2:	b082      	sub	sp, #8
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
 80195b8:	460b      	mov	r3, r1
 80195ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195c2:	78fa      	ldrb	r2, [r7, #3]
 80195c4:	4611      	mov	r1, r2
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7fb ffd3 	bl	8015572 <USBD_LL_IsoOUTIncomplete>
}
 80195cc:	bf00      	nop
 80195ce:	3708      	adds	r7, #8
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}

080195d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195d4:	b580      	push	{r7, lr}
 80195d6:	b082      	sub	sp, #8
 80195d8:	af00      	add	r7, sp, #0
 80195da:	6078      	str	r0, [r7, #4]
 80195dc:	460b      	mov	r3, r1
 80195de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80195e6:	78fa      	ldrb	r2, [r7, #3]
 80195e8:	4611      	mov	r1, r2
 80195ea:	4618      	mov	r0, r3
 80195ec:	f7fb ff8f 	bl	801550e <USBD_LL_IsoINIncomplete>
}
 80195f0:	bf00      	nop
 80195f2:	3708      	adds	r7, #8
 80195f4:	46bd      	mov	sp, r7
 80195f6:	bd80      	pop	{r7, pc}

080195f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b082      	sub	sp, #8
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019606:	4618      	mov	r0, r3
 8019608:	f7fb ffe5 	bl	80155d6 <USBD_LL_DevConnected>
}
 801960c:	bf00      	nop
 801960e:	3708      	adds	r7, #8
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}

08019614 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019622:	4618      	mov	r0, r3
 8019624:	f7fb ffe2 	bl	80155ec <USBD_LL_DevDisconnected>
}
 8019628:	bf00      	nop
 801962a:	3708      	adds	r7, #8
 801962c:	46bd      	mov	sp, r7
 801962e:	bd80      	pop	{r7, pc}

08019630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	2b01      	cmp	r3, #1
 801963e:	d140      	bne.n	80196c2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8019640:	4a22      	ldr	r2, [pc, #136]	; (80196cc <USBD_LL_Init+0x9c>)
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	4a20      	ldr	r2, [pc, #128]	; (80196cc <USBD_LL_Init+0x9c>)
 801964c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8019650:	4b1e      	ldr	r3, [pc, #120]	; (80196cc <USBD_LL_Init+0x9c>)
 8019652:	4a1f      	ldr	r2, [pc, #124]	; (80196d0 <USBD_LL_Init+0xa0>)
 8019654:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8019656:	4b1d      	ldr	r3, [pc, #116]	; (80196cc <USBD_LL_Init+0x9c>)
 8019658:	2209      	movs	r2, #9
 801965a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801965c:	4b1b      	ldr	r3, [pc, #108]	; (80196cc <USBD_LL_Init+0x9c>)
 801965e:	2202      	movs	r2, #2
 8019660:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8019662:	4b1a      	ldr	r3, [pc, #104]	; (80196cc <USBD_LL_Init+0x9c>)
 8019664:	2200      	movs	r2, #0
 8019666:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8019668:	4b18      	ldr	r3, [pc, #96]	; (80196cc <USBD_LL_Init+0x9c>)
 801966a:	2202      	movs	r2, #2
 801966c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801966e:	4b17      	ldr	r3, [pc, #92]	; (80196cc <USBD_LL_Init+0x9c>)
 8019670:	2200      	movs	r2, #0
 8019672:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8019674:	4b15      	ldr	r3, [pc, #84]	; (80196cc <USBD_LL_Init+0x9c>)
 8019676:	2200      	movs	r2, #0
 8019678:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801967a:	4b14      	ldr	r3, [pc, #80]	; (80196cc <USBD_LL_Init+0x9c>)
 801967c:	2200      	movs	r2, #0
 801967e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8019680:	4b12      	ldr	r3, [pc, #72]	; (80196cc <USBD_LL_Init+0x9c>)
 8019682:	2200      	movs	r2, #0
 8019684:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8019686:	4b11      	ldr	r3, [pc, #68]	; (80196cc <USBD_LL_Init+0x9c>)
 8019688:	2200      	movs	r2, #0
 801968a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801968c:	4b0f      	ldr	r3, [pc, #60]	; (80196cc <USBD_LL_Init+0x9c>)
 801968e:	2200      	movs	r2, #0
 8019690:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8019692:	480e      	ldr	r0, [pc, #56]	; (80196cc <USBD_LL_Init+0x9c>)
 8019694:	f7ee fc0f 	bl	8007eb6 <HAL_PCD_Init>
 8019698:	4603      	mov	r3, r0
 801969a:	2b00      	cmp	r3, #0
 801969c:	d001      	beq.n	80196a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801969e:	f7e8 fe95 	bl	80023cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80196a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80196a6:	4809      	ldr	r0, [pc, #36]	; (80196cc <USBD_LL_Init+0x9c>)
 80196a8:	f7ef fe7d 	bl	80093a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80196ac:	2280      	movs	r2, #128	; 0x80
 80196ae:	2100      	movs	r1, #0
 80196b0:	4806      	ldr	r0, [pc, #24]	; (80196cc <USBD_LL_Init+0x9c>)
 80196b2:	f7ef fe31 	bl	8009318 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80196b6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80196ba:	2101      	movs	r1, #1
 80196bc:	4803      	ldr	r0, [pc, #12]	; (80196cc <USBD_LL_Init+0x9c>)
 80196be:	f7ef fe2b 	bl	8009318 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80196c2:	2300      	movs	r3, #0
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3708      	adds	r7, #8
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	24002dcc 	.word	0x24002dcc
 80196d0:	40040000 	.word	0x40040000

080196d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b084      	sub	sp, #16
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80196dc:	2300      	movs	r3, #0
 80196de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80196e0:	2300      	movs	r3, #0
 80196e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7ee fd07 	bl	80080fe <HAL_PCD_Start>
 80196f0:	4603      	mov	r3, r0
 80196f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80196f4:	7bfb      	ldrb	r3, [r7, #15]
 80196f6:	4618      	mov	r0, r3
 80196f8:	f000 f942 	bl	8019980 <USBD_Get_USB_Status>
 80196fc:	4603      	mov	r3, r0
 80196fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019700:	7bbb      	ldrb	r3, [r7, #14]
}
 8019702:	4618      	mov	r0, r3
 8019704:	3710      	adds	r7, #16
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}

0801970a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801970a:	b580      	push	{r7, lr}
 801970c:	b084      	sub	sp, #16
 801970e:	af00      	add	r7, sp, #0
 8019710:	6078      	str	r0, [r7, #4]
 8019712:	4608      	mov	r0, r1
 8019714:	4611      	mov	r1, r2
 8019716:	461a      	mov	r2, r3
 8019718:	4603      	mov	r3, r0
 801971a:	70fb      	strb	r3, [r7, #3]
 801971c:	460b      	mov	r3, r1
 801971e:	70bb      	strb	r3, [r7, #2]
 8019720:	4613      	mov	r3, r2
 8019722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019724:	2300      	movs	r3, #0
 8019726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019728:	2300      	movs	r3, #0
 801972a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019732:	78bb      	ldrb	r3, [r7, #2]
 8019734:	883a      	ldrh	r2, [r7, #0]
 8019736:	78f9      	ldrb	r1, [r7, #3]
 8019738:	f7ef fa07 	bl	8008b4a <HAL_PCD_EP_Open>
 801973c:	4603      	mov	r3, r0
 801973e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019740:	7bfb      	ldrb	r3, [r7, #15]
 8019742:	4618      	mov	r0, r3
 8019744:	f000 f91c 	bl	8019980 <USBD_Get_USB_Status>
 8019748:	4603      	mov	r3, r0
 801974a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801974c:	7bbb      	ldrb	r3, [r7, #14]
}
 801974e:	4618      	mov	r0, r3
 8019750:	3710      	adds	r7, #16
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}

08019756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019756:	b580      	push	{r7, lr}
 8019758:	b084      	sub	sp, #16
 801975a:	af00      	add	r7, sp, #0
 801975c:	6078      	str	r0, [r7, #4]
 801975e:	460b      	mov	r3, r1
 8019760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019762:	2300      	movs	r3, #0
 8019764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019766:	2300      	movs	r3, #0
 8019768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019770:	78fa      	ldrb	r2, [r7, #3]
 8019772:	4611      	mov	r1, r2
 8019774:	4618      	mov	r0, r3
 8019776:	f7ef fa50 	bl	8008c1a <HAL_PCD_EP_Close>
 801977a:	4603      	mov	r3, r0
 801977c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801977e:	7bfb      	ldrb	r3, [r7, #15]
 8019780:	4618      	mov	r0, r3
 8019782:	f000 f8fd 	bl	8019980 <USBD_Get_USB_Status>
 8019786:	4603      	mov	r3, r0
 8019788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801978a:	7bbb      	ldrb	r3, [r7, #14]
}
 801978c:	4618      	mov	r0, r3
 801978e:	3710      	adds	r7, #16
 8019790:	46bd      	mov	sp, r7
 8019792:	bd80      	pop	{r7, pc}

08019794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b084      	sub	sp, #16
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	460b      	mov	r3, r1
 801979e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197a0:	2300      	movs	r3, #0
 80197a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197a4:	2300      	movs	r3, #0
 80197a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80197ae:	78fa      	ldrb	r2, [r7, #3]
 80197b0:	4611      	mov	r1, r2
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ef fb0a 	bl	8008dcc <HAL_PCD_EP_SetStall>
 80197b8:	4603      	mov	r3, r0
 80197ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197bc:	7bfb      	ldrb	r3, [r7, #15]
 80197be:	4618      	mov	r0, r3
 80197c0:	f000 f8de 	bl	8019980 <USBD_Get_USB_Status>
 80197c4:	4603      	mov	r3, r0
 80197c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80197c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80197ca:	4618      	mov	r0, r3
 80197cc:	3710      	adds	r7, #16
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}

080197d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80197d2:	b580      	push	{r7, lr}
 80197d4:	b084      	sub	sp, #16
 80197d6:	af00      	add	r7, sp, #0
 80197d8:	6078      	str	r0, [r7, #4]
 80197da:	460b      	mov	r3, r1
 80197dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197de:	2300      	movs	r3, #0
 80197e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80197e2:	2300      	movs	r3, #0
 80197e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80197ec:	78fa      	ldrb	r2, [r7, #3]
 80197ee:	4611      	mov	r1, r2
 80197f0:	4618      	mov	r0, r3
 80197f2:	f7ef fb4f 	bl	8008e94 <HAL_PCD_EP_ClrStall>
 80197f6:	4603      	mov	r3, r0
 80197f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80197fa:	7bfb      	ldrb	r3, [r7, #15]
 80197fc:	4618      	mov	r0, r3
 80197fe:	f000 f8bf 	bl	8019980 <USBD_Get_USB_Status>
 8019802:	4603      	mov	r3, r0
 8019804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019806:	7bbb      	ldrb	r3, [r7, #14]
}
 8019808:	4618      	mov	r0, r3
 801980a:	3710      	adds	r7, #16
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}

08019810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019810:	b480      	push	{r7}
 8019812:	b085      	sub	sp, #20
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	460b      	mov	r3, r1
 801981a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019828:	2b00      	cmp	r3, #0
 801982a:	da0b      	bge.n	8019844 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801982c:	78fb      	ldrb	r3, [r7, #3]
 801982e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019832:	68f9      	ldr	r1, [r7, #12]
 8019834:	4613      	mov	r3, r2
 8019836:	00db      	lsls	r3, r3, #3
 8019838:	4413      	add	r3, r2
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	440b      	add	r3, r1
 801983e:	333e      	adds	r3, #62	; 0x3e
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	e00b      	b.n	801985c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019844:	78fb      	ldrb	r3, [r7, #3]
 8019846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801984a:	68f9      	ldr	r1, [r7, #12]
 801984c:	4613      	mov	r3, r2
 801984e:	00db      	lsls	r3, r3, #3
 8019850:	4413      	add	r3, r2
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	440b      	add	r3, r1
 8019856:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801985a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801985c:	4618      	mov	r0, r3
 801985e:	3714      	adds	r7, #20
 8019860:	46bd      	mov	sp, r7
 8019862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019866:	4770      	bx	lr

08019868 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b084      	sub	sp, #16
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	460b      	mov	r3, r1
 8019872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019874:	2300      	movs	r3, #0
 8019876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019878:	2300      	movs	r3, #0
 801987a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019882:	78fa      	ldrb	r2, [r7, #3]
 8019884:	4611      	mov	r1, r2
 8019886:	4618      	mov	r0, r3
 8019888:	f7ef f93a 	bl	8008b00 <HAL_PCD_SetAddress>
 801988c:	4603      	mov	r3, r0
 801988e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019890:	7bfb      	ldrb	r3, [r7, #15]
 8019892:	4618      	mov	r0, r3
 8019894:	f000 f874 	bl	8019980 <USBD_Get_USB_Status>
 8019898:	4603      	mov	r3, r0
 801989a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801989c:	7bbb      	ldrb	r3, [r7, #14]
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3710      	adds	r7, #16
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}

080198a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80198a6:	b580      	push	{r7, lr}
 80198a8:	b086      	sub	sp, #24
 80198aa:	af00      	add	r7, sp, #0
 80198ac:	60f8      	str	r0, [r7, #12]
 80198ae:	607a      	str	r2, [r7, #4]
 80198b0:	603b      	str	r3, [r7, #0]
 80198b2:	460b      	mov	r3, r1
 80198b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198b6:	2300      	movs	r3, #0
 80198b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198ba:	2300      	movs	r3, #0
 80198bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80198c4:	7af9      	ldrb	r1, [r7, #11]
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	f7ef fa44 	bl	8008d56 <HAL_PCD_EP_Transmit>
 80198ce:	4603      	mov	r3, r0
 80198d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198d2:	7dfb      	ldrb	r3, [r7, #23]
 80198d4:	4618      	mov	r0, r3
 80198d6:	f000 f853 	bl	8019980 <USBD_Get_USB_Status>
 80198da:	4603      	mov	r3, r0
 80198dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80198de:	7dbb      	ldrb	r3, [r7, #22]
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	3718      	adds	r7, #24
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}

080198e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b086      	sub	sp, #24
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	60f8      	str	r0, [r7, #12]
 80198f0:	607a      	str	r2, [r7, #4]
 80198f2:	603b      	str	r3, [r7, #0]
 80198f4:	460b      	mov	r3, r1
 80198f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198f8:	2300      	movs	r3, #0
 80198fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198fc:	2300      	movs	r3, #0
 80198fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019906:	7af9      	ldrb	r1, [r7, #11]
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	f7ef f9cf 	bl	8008cae <HAL_PCD_EP_Receive>
 8019910:	4603      	mov	r3, r0
 8019912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019914:	7dfb      	ldrb	r3, [r7, #23]
 8019916:	4618      	mov	r0, r3
 8019918:	f000 f832 	bl	8019980 <USBD_Get_USB_Status>
 801991c:	4603      	mov	r3, r0
 801991e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019920:	7dbb      	ldrb	r3, [r7, #22]
}
 8019922:	4618      	mov	r0, r3
 8019924:	3718      	adds	r7, #24
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}

0801992a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801992a:	b580      	push	{r7, lr}
 801992c:	b082      	sub	sp, #8
 801992e:	af00      	add	r7, sp, #0
 8019930:	6078      	str	r0, [r7, #4]
 8019932:	460b      	mov	r3, r1
 8019934:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801993c:	78fa      	ldrb	r2, [r7, #3]
 801993e:	4611      	mov	r1, r2
 8019940:	4618      	mov	r0, r3
 8019942:	f7ef f9f0 	bl	8008d26 <HAL_PCD_EP_GetRxCount>
 8019946:	4603      	mov	r3, r0
}
 8019948:	4618      	mov	r0, r3
 801994a:	3708      	adds	r7, #8
 801994c:	46bd      	mov	sp, r7
 801994e:	bd80      	pop	{r7, pc}

08019950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019950:	b480      	push	{r7}
 8019952:	b083      	sub	sp, #12
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019958:	4b03      	ldr	r3, [pc, #12]	; (8019968 <USBD_static_malloc+0x18>)
}
 801995a:	4618      	mov	r0, r3
 801995c:	370c      	adds	r7, #12
 801995e:	46bd      	mov	sp, r7
 8019960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019964:	4770      	bx	lr
 8019966:	bf00      	nop
 8019968:	240032d8 	.word	0x240032d8

0801996c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801996c:	b480      	push	{r7}
 801996e:	b083      	sub	sp, #12
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8019974:	bf00      	nop
 8019976:	370c      	adds	r7, #12
 8019978:	46bd      	mov	sp, r7
 801997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997e:	4770      	bx	lr

08019980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019980:	b480      	push	{r7}
 8019982:	b085      	sub	sp, #20
 8019984:	af00      	add	r7, sp, #0
 8019986:	4603      	mov	r3, r0
 8019988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801998a:	2300      	movs	r3, #0
 801998c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801998e:	79fb      	ldrb	r3, [r7, #7]
 8019990:	2b03      	cmp	r3, #3
 8019992:	d817      	bhi.n	80199c4 <USBD_Get_USB_Status+0x44>
 8019994:	a201      	add	r2, pc, #4	; (adr r2, 801999c <USBD_Get_USB_Status+0x1c>)
 8019996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801999a:	bf00      	nop
 801999c:	080199ad 	.word	0x080199ad
 80199a0:	080199b3 	.word	0x080199b3
 80199a4:	080199b9 	.word	0x080199b9
 80199a8:	080199bf 	.word	0x080199bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80199ac:	2300      	movs	r3, #0
 80199ae:	73fb      	strb	r3, [r7, #15]
    break;
 80199b0:	e00b      	b.n	80199ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80199b2:	2303      	movs	r3, #3
 80199b4:	73fb      	strb	r3, [r7, #15]
    break;
 80199b6:	e008      	b.n	80199ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80199b8:	2301      	movs	r3, #1
 80199ba:	73fb      	strb	r3, [r7, #15]
    break;
 80199bc:	e005      	b.n	80199ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80199be:	2303      	movs	r3, #3
 80199c0:	73fb      	strb	r3, [r7, #15]
    break;
 80199c2:	e002      	b.n	80199ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80199c4:	2303      	movs	r3, #3
 80199c6:	73fb      	strb	r3, [r7, #15]
    break;
 80199c8:	bf00      	nop
  }
  return usb_status;
 80199ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80199cc:	4618      	mov	r0, r3
 80199ce:	3714      	adds	r7, #20
 80199d0:	46bd      	mov	sp, r7
 80199d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d6:	4770      	bx	lr

080199d8 <__cvt>:
 80199d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199da:	ed2d 8b02 	vpush	{d8}
 80199de:	eeb0 8b40 	vmov.f64	d8, d0
 80199e2:	b085      	sub	sp, #20
 80199e4:	4617      	mov	r7, r2
 80199e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80199e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80199ea:	ee18 2a90 	vmov	r2, s17
 80199ee:	f025 0520 	bic.w	r5, r5, #32
 80199f2:	2a00      	cmp	r2, #0
 80199f4:	bfb6      	itet	lt
 80199f6:	222d      	movlt	r2, #45	; 0x2d
 80199f8:	2200      	movge	r2, #0
 80199fa:	eeb1 8b40 	vneglt.f64	d8, d0
 80199fe:	2d46      	cmp	r5, #70	; 0x46
 8019a00:	460c      	mov	r4, r1
 8019a02:	701a      	strb	r2, [r3, #0]
 8019a04:	d004      	beq.n	8019a10 <__cvt+0x38>
 8019a06:	2d45      	cmp	r5, #69	; 0x45
 8019a08:	d100      	bne.n	8019a0c <__cvt+0x34>
 8019a0a:	3401      	adds	r4, #1
 8019a0c:	2102      	movs	r1, #2
 8019a0e:	e000      	b.n	8019a12 <__cvt+0x3a>
 8019a10:	2103      	movs	r1, #3
 8019a12:	ab03      	add	r3, sp, #12
 8019a14:	9301      	str	r3, [sp, #4]
 8019a16:	ab02      	add	r3, sp, #8
 8019a18:	9300      	str	r3, [sp, #0]
 8019a1a:	4622      	mov	r2, r4
 8019a1c:	4633      	mov	r3, r6
 8019a1e:	eeb0 0b48 	vmov.f64	d0, d8
 8019a22:	f001 f859 	bl	801aad8 <_dtoa_r>
 8019a26:	2d47      	cmp	r5, #71	; 0x47
 8019a28:	d101      	bne.n	8019a2e <__cvt+0x56>
 8019a2a:	07fb      	lsls	r3, r7, #31
 8019a2c:	d51a      	bpl.n	8019a64 <__cvt+0x8c>
 8019a2e:	2d46      	cmp	r5, #70	; 0x46
 8019a30:	eb00 0204 	add.w	r2, r0, r4
 8019a34:	d10c      	bne.n	8019a50 <__cvt+0x78>
 8019a36:	7803      	ldrb	r3, [r0, #0]
 8019a38:	2b30      	cmp	r3, #48	; 0x30
 8019a3a:	d107      	bne.n	8019a4c <__cvt+0x74>
 8019a3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a44:	bf1c      	itt	ne
 8019a46:	f1c4 0401 	rsbne	r4, r4, #1
 8019a4a:	6034      	strne	r4, [r6, #0]
 8019a4c:	6833      	ldr	r3, [r6, #0]
 8019a4e:	441a      	add	r2, r3
 8019a50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a58:	bf08      	it	eq
 8019a5a:	9203      	streq	r2, [sp, #12]
 8019a5c:	2130      	movs	r1, #48	; 0x30
 8019a5e:	9b03      	ldr	r3, [sp, #12]
 8019a60:	4293      	cmp	r3, r2
 8019a62:	d307      	bcc.n	8019a74 <__cvt+0x9c>
 8019a64:	9b03      	ldr	r3, [sp, #12]
 8019a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019a68:	1a1b      	subs	r3, r3, r0
 8019a6a:	6013      	str	r3, [r2, #0]
 8019a6c:	b005      	add	sp, #20
 8019a6e:	ecbd 8b02 	vpop	{d8}
 8019a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a74:	1c5c      	adds	r4, r3, #1
 8019a76:	9403      	str	r4, [sp, #12]
 8019a78:	7019      	strb	r1, [r3, #0]
 8019a7a:	e7f0      	b.n	8019a5e <__cvt+0x86>

08019a7c <__exponent>:
 8019a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2900      	cmp	r1, #0
 8019a82:	bfb8      	it	lt
 8019a84:	4249      	neglt	r1, r1
 8019a86:	f803 2b02 	strb.w	r2, [r3], #2
 8019a8a:	bfb4      	ite	lt
 8019a8c:	222d      	movlt	r2, #45	; 0x2d
 8019a8e:	222b      	movge	r2, #43	; 0x2b
 8019a90:	2909      	cmp	r1, #9
 8019a92:	7042      	strb	r2, [r0, #1]
 8019a94:	dd2a      	ble.n	8019aec <__exponent+0x70>
 8019a96:	f10d 0207 	add.w	r2, sp, #7
 8019a9a:	4617      	mov	r7, r2
 8019a9c:	260a      	movs	r6, #10
 8019a9e:	4694      	mov	ip, r2
 8019aa0:	fb91 f5f6 	sdiv	r5, r1, r6
 8019aa4:	fb06 1415 	mls	r4, r6, r5, r1
 8019aa8:	3430      	adds	r4, #48	; 0x30
 8019aaa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8019aae:	460c      	mov	r4, r1
 8019ab0:	2c63      	cmp	r4, #99	; 0x63
 8019ab2:	f102 32ff 	add.w	r2, r2, #4294967295
 8019ab6:	4629      	mov	r1, r5
 8019ab8:	dcf1      	bgt.n	8019a9e <__exponent+0x22>
 8019aba:	3130      	adds	r1, #48	; 0x30
 8019abc:	f1ac 0402 	sub.w	r4, ip, #2
 8019ac0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019ac4:	1c41      	adds	r1, r0, #1
 8019ac6:	4622      	mov	r2, r4
 8019ac8:	42ba      	cmp	r2, r7
 8019aca:	d30a      	bcc.n	8019ae2 <__exponent+0x66>
 8019acc:	f10d 0209 	add.w	r2, sp, #9
 8019ad0:	eba2 020c 	sub.w	r2, r2, ip
 8019ad4:	42bc      	cmp	r4, r7
 8019ad6:	bf88      	it	hi
 8019ad8:	2200      	movhi	r2, #0
 8019ada:	4413      	add	r3, r2
 8019adc:	1a18      	subs	r0, r3, r0
 8019ade:	b003      	add	sp, #12
 8019ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ae2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8019ae6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019aea:	e7ed      	b.n	8019ac8 <__exponent+0x4c>
 8019aec:	2330      	movs	r3, #48	; 0x30
 8019aee:	3130      	adds	r1, #48	; 0x30
 8019af0:	7083      	strb	r3, [r0, #2]
 8019af2:	70c1      	strb	r1, [r0, #3]
 8019af4:	1d03      	adds	r3, r0, #4
 8019af6:	e7f1      	b.n	8019adc <__exponent+0x60>

08019af8 <_printf_float>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	b08b      	sub	sp, #44	; 0x2c
 8019afe:	460c      	mov	r4, r1
 8019b00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019b04:	4616      	mov	r6, r2
 8019b06:	461f      	mov	r7, r3
 8019b08:	4605      	mov	r5, r0
 8019b0a:	f000 fed1 	bl	801a8b0 <_localeconv_r>
 8019b0e:	f8d0 b000 	ldr.w	fp, [r0]
 8019b12:	4658      	mov	r0, fp
 8019b14:	f7e6 fc4c 	bl	80003b0 <strlen>
 8019b18:	2300      	movs	r3, #0
 8019b1a:	9308      	str	r3, [sp, #32]
 8019b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8019b20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019b24:	6822      	ldr	r2, [r4, #0]
 8019b26:	3307      	adds	r3, #7
 8019b28:	f023 0307 	bic.w	r3, r3, #7
 8019b2c:	f103 0108 	add.w	r1, r3, #8
 8019b30:	f8c8 1000 	str.w	r1, [r8]
 8019b34:	ed93 0b00 	vldr	d0, [r3]
 8019b38:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8019d98 <_printf_float+0x2a0>
 8019b3c:	eeb0 7bc0 	vabs.f64	d7, d0
 8019b40:	eeb4 7b46 	vcmp.f64	d7, d6
 8019b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b48:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8019b4c:	4682      	mov	sl, r0
 8019b4e:	dd24      	ble.n	8019b9a <_printf_float+0xa2>
 8019b50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b58:	d502      	bpl.n	8019b60 <_printf_float+0x68>
 8019b5a:	232d      	movs	r3, #45	; 0x2d
 8019b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b60:	498f      	ldr	r1, [pc, #572]	; (8019da0 <_printf_float+0x2a8>)
 8019b62:	4b90      	ldr	r3, [pc, #576]	; (8019da4 <_printf_float+0x2ac>)
 8019b64:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019b68:	bf94      	ite	ls
 8019b6a:	4688      	movls	r8, r1
 8019b6c:	4698      	movhi	r8, r3
 8019b6e:	2303      	movs	r3, #3
 8019b70:	6123      	str	r3, [r4, #16]
 8019b72:	f022 0204 	bic.w	r2, r2, #4
 8019b76:	2300      	movs	r3, #0
 8019b78:	6022      	str	r2, [r4, #0]
 8019b7a:	9304      	str	r3, [sp, #16]
 8019b7c:	9700      	str	r7, [sp, #0]
 8019b7e:	4633      	mov	r3, r6
 8019b80:	aa09      	add	r2, sp, #36	; 0x24
 8019b82:	4621      	mov	r1, r4
 8019b84:	4628      	mov	r0, r5
 8019b86:	f000 f9d1 	bl	8019f2c <_printf_common>
 8019b8a:	3001      	adds	r0, #1
 8019b8c:	f040 808a 	bne.w	8019ca4 <_printf_float+0x1ac>
 8019b90:	f04f 30ff 	mov.w	r0, #4294967295
 8019b94:	b00b      	add	sp, #44	; 0x2c
 8019b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8019b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ba2:	d709      	bvc.n	8019bb8 <_printf_float+0xc0>
 8019ba4:	ee10 3a90 	vmov	r3, s1
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	bfbc      	itt	lt
 8019bac:	232d      	movlt	r3, #45	; 0x2d
 8019bae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019bb2:	497d      	ldr	r1, [pc, #500]	; (8019da8 <_printf_float+0x2b0>)
 8019bb4:	4b7d      	ldr	r3, [pc, #500]	; (8019dac <_printf_float+0x2b4>)
 8019bb6:	e7d5      	b.n	8019b64 <_printf_float+0x6c>
 8019bb8:	6863      	ldr	r3, [r4, #4]
 8019bba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019bbe:	9104      	str	r1, [sp, #16]
 8019bc0:	1c59      	adds	r1, r3, #1
 8019bc2:	d13c      	bne.n	8019c3e <_printf_float+0x146>
 8019bc4:	2306      	movs	r3, #6
 8019bc6:	6063      	str	r3, [r4, #4]
 8019bc8:	2300      	movs	r3, #0
 8019bca:	9303      	str	r3, [sp, #12]
 8019bcc:	ab08      	add	r3, sp, #32
 8019bce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019bd6:	ab07      	add	r3, sp, #28
 8019bd8:	6861      	ldr	r1, [r4, #4]
 8019bda:	9300      	str	r3, [sp, #0]
 8019bdc:	6022      	str	r2, [r4, #0]
 8019bde:	f10d 031b 	add.w	r3, sp, #27
 8019be2:	4628      	mov	r0, r5
 8019be4:	f7ff fef8 	bl	80199d8 <__cvt>
 8019be8:	9b04      	ldr	r3, [sp, #16]
 8019bea:	9907      	ldr	r1, [sp, #28]
 8019bec:	2b47      	cmp	r3, #71	; 0x47
 8019bee:	4680      	mov	r8, r0
 8019bf0:	d108      	bne.n	8019c04 <_printf_float+0x10c>
 8019bf2:	1cc8      	adds	r0, r1, #3
 8019bf4:	db02      	blt.n	8019bfc <_printf_float+0x104>
 8019bf6:	6863      	ldr	r3, [r4, #4]
 8019bf8:	4299      	cmp	r1, r3
 8019bfa:	dd41      	ble.n	8019c80 <_printf_float+0x188>
 8019bfc:	f1a9 0902 	sub.w	r9, r9, #2
 8019c00:	fa5f f989 	uxtb.w	r9, r9
 8019c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019c08:	d820      	bhi.n	8019c4c <_printf_float+0x154>
 8019c0a:	3901      	subs	r1, #1
 8019c0c:	464a      	mov	r2, r9
 8019c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019c12:	9107      	str	r1, [sp, #28]
 8019c14:	f7ff ff32 	bl	8019a7c <__exponent>
 8019c18:	9a08      	ldr	r2, [sp, #32]
 8019c1a:	9004      	str	r0, [sp, #16]
 8019c1c:	1813      	adds	r3, r2, r0
 8019c1e:	2a01      	cmp	r2, #1
 8019c20:	6123      	str	r3, [r4, #16]
 8019c22:	dc02      	bgt.n	8019c2a <_printf_float+0x132>
 8019c24:	6822      	ldr	r2, [r4, #0]
 8019c26:	07d2      	lsls	r2, r2, #31
 8019c28:	d501      	bpl.n	8019c2e <_printf_float+0x136>
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	6123      	str	r3, [r4, #16]
 8019c2e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d0a2      	beq.n	8019b7c <_printf_float+0x84>
 8019c36:	232d      	movs	r3, #45	; 0x2d
 8019c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c3c:	e79e      	b.n	8019b7c <_printf_float+0x84>
 8019c3e:	9904      	ldr	r1, [sp, #16]
 8019c40:	2947      	cmp	r1, #71	; 0x47
 8019c42:	d1c1      	bne.n	8019bc8 <_printf_float+0xd0>
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d1bf      	bne.n	8019bc8 <_printf_float+0xd0>
 8019c48:	2301      	movs	r3, #1
 8019c4a:	e7bc      	b.n	8019bc6 <_printf_float+0xce>
 8019c4c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019c50:	d118      	bne.n	8019c84 <_printf_float+0x18c>
 8019c52:	2900      	cmp	r1, #0
 8019c54:	6863      	ldr	r3, [r4, #4]
 8019c56:	dd0b      	ble.n	8019c70 <_printf_float+0x178>
 8019c58:	6121      	str	r1, [r4, #16]
 8019c5a:	b913      	cbnz	r3, 8019c62 <_printf_float+0x16a>
 8019c5c:	6822      	ldr	r2, [r4, #0]
 8019c5e:	07d0      	lsls	r0, r2, #31
 8019c60:	d502      	bpl.n	8019c68 <_printf_float+0x170>
 8019c62:	3301      	adds	r3, #1
 8019c64:	440b      	add	r3, r1
 8019c66:	6123      	str	r3, [r4, #16]
 8019c68:	2300      	movs	r3, #0
 8019c6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8019c6c:	9304      	str	r3, [sp, #16]
 8019c6e:	e7de      	b.n	8019c2e <_printf_float+0x136>
 8019c70:	b913      	cbnz	r3, 8019c78 <_printf_float+0x180>
 8019c72:	6822      	ldr	r2, [r4, #0]
 8019c74:	07d2      	lsls	r2, r2, #31
 8019c76:	d501      	bpl.n	8019c7c <_printf_float+0x184>
 8019c78:	3302      	adds	r3, #2
 8019c7a:	e7f4      	b.n	8019c66 <_printf_float+0x16e>
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	e7f2      	b.n	8019c66 <_printf_float+0x16e>
 8019c80:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019c84:	9b08      	ldr	r3, [sp, #32]
 8019c86:	4299      	cmp	r1, r3
 8019c88:	db05      	blt.n	8019c96 <_printf_float+0x19e>
 8019c8a:	6823      	ldr	r3, [r4, #0]
 8019c8c:	6121      	str	r1, [r4, #16]
 8019c8e:	07d8      	lsls	r0, r3, #31
 8019c90:	d5ea      	bpl.n	8019c68 <_printf_float+0x170>
 8019c92:	1c4b      	adds	r3, r1, #1
 8019c94:	e7e7      	b.n	8019c66 <_printf_float+0x16e>
 8019c96:	2900      	cmp	r1, #0
 8019c98:	bfd4      	ite	le
 8019c9a:	f1c1 0202 	rsble	r2, r1, #2
 8019c9e:	2201      	movgt	r2, #1
 8019ca0:	4413      	add	r3, r2
 8019ca2:	e7e0      	b.n	8019c66 <_printf_float+0x16e>
 8019ca4:	6823      	ldr	r3, [r4, #0]
 8019ca6:	055a      	lsls	r2, r3, #21
 8019ca8:	d407      	bmi.n	8019cba <_printf_float+0x1c2>
 8019caa:	6923      	ldr	r3, [r4, #16]
 8019cac:	4642      	mov	r2, r8
 8019cae:	4631      	mov	r1, r6
 8019cb0:	4628      	mov	r0, r5
 8019cb2:	47b8      	blx	r7
 8019cb4:	3001      	adds	r0, #1
 8019cb6:	d12a      	bne.n	8019d0e <_printf_float+0x216>
 8019cb8:	e76a      	b.n	8019b90 <_printf_float+0x98>
 8019cba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019cbe:	f240 80e0 	bls.w	8019e82 <_printf_float+0x38a>
 8019cc2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019cc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cce:	d133      	bne.n	8019d38 <_printf_float+0x240>
 8019cd0:	4a37      	ldr	r2, [pc, #220]	; (8019db0 <_printf_float+0x2b8>)
 8019cd2:	2301      	movs	r3, #1
 8019cd4:	4631      	mov	r1, r6
 8019cd6:	4628      	mov	r0, r5
 8019cd8:	47b8      	blx	r7
 8019cda:	3001      	adds	r0, #1
 8019cdc:	f43f af58 	beq.w	8019b90 <_printf_float+0x98>
 8019ce0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019ce4:	429a      	cmp	r2, r3
 8019ce6:	db02      	blt.n	8019cee <_printf_float+0x1f6>
 8019ce8:	6823      	ldr	r3, [r4, #0]
 8019cea:	07d8      	lsls	r0, r3, #31
 8019cec:	d50f      	bpl.n	8019d0e <_printf_float+0x216>
 8019cee:	4653      	mov	r3, sl
 8019cf0:	465a      	mov	r2, fp
 8019cf2:	4631      	mov	r1, r6
 8019cf4:	4628      	mov	r0, r5
 8019cf6:	47b8      	blx	r7
 8019cf8:	3001      	adds	r0, #1
 8019cfa:	f43f af49 	beq.w	8019b90 <_printf_float+0x98>
 8019cfe:	f04f 0800 	mov.w	r8, #0
 8019d02:	f104 091a 	add.w	r9, r4, #26
 8019d06:	9b08      	ldr	r3, [sp, #32]
 8019d08:	3b01      	subs	r3, #1
 8019d0a:	4543      	cmp	r3, r8
 8019d0c:	dc09      	bgt.n	8019d22 <_printf_float+0x22a>
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	079b      	lsls	r3, r3, #30
 8019d12:	f100 8106 	bmi.w	8019f22 <_printf_float+0x42a>
 8019d16:	68e0      	ldr	r0, [r4, #12]
 8019d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d1a:	4298      	cmp	r0, r3
 8019d1c:	bfb8      	it	lt
 8019d1e:	4618      	movlt	r0, r3
 8019d20:	e738      	b.n	8019b94 <_printf_float+0x9c>
 8019d22:	2301      	movs	r3, #1
 8019d24:	464a      	mov	r2, r9
 8019d26:	4631      	mov	r1, r6
 8019d28:	4628      	mov	r0, r5
 8019d2a:	47b8      	blx	r7
 8019d2c:	3001      	adds	r0, #1
 8019d2e:	f43f af2f 	beq.w	8019b90 <_printf_float+0x98>
 8019d32:	f108 0801 	add.w	r8, r8, #1
 8019d36:	e7e6      	b.n	8019d06 <_printf_float+0x20e>
 8019d38:	9b07      	ldr	r3, [sp, #28]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	dc3a      	bgt.n	8019db4 <_printf_float+0x2bc>
 8019d3e:	4a1c      	ldr	r2, [pc, #112]	; (8019db0 <_printf_float+0x2b8>)
 8019d40:	2301      	movs	r3, #1
 8019d42:	4631      	mov	r1, r6
 8019d44:	4628      	mov	r0, r5
 8019d46:	47b8      	blx	r7
 8019d48:	3001      	adds	r0, #1
 8019d4a:	f43f af21 	beq.w	8019b90 <_printf_float+0x98>
 8019d4e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019d52:	4313      	orrs	r3, r2
 8019d54:	d102      	bne.n	8019d5c <_printf_float+0x264>
 8019d56:	6823      	ldr	r3, [r4, #0]
 8019d58:	07d9      	lsls	r1, r3, #31
 8019d5a:	d5d8      	bpl.n	8019d0e <_printf_float+0x216>
 8019d5c:	4653      	mov	r3, sl
 8019d5e:	465a      	mov	r2, fp
 8019d60:	4631      	mov	r1, r6
 8019d62:	4628      	mov	r0, r5
 8019d64:	47b8      	blx	r7
 8019d66:	3001      	adds	r0, #1
 8019d68:	f43f af12 	beq.w	8019b90 <_printf_float+0x98>
 8019d6c:	f04f 0900 	mov.w	r9, #0
 8019d70:	f104 0a1a 	add.w	sl, r4, #26
 8019d74:	9b07      	ldr	r3, [sp, #28]
 8019d76:	425b      	negs	r3, r3
 8019d78:	454b      	cmp	r3, r9
 8019d7a:	dc01      	bgt.n	8019d80 <_printf_float+0x288>
 8019d7c:	9b08      	ldr	r3, [sp, #32]
 8019d7e:	e795      	b.n	8019cac <_printf_float+0x1b4>
 8019d80:	2301      	movs	r3, #1
 8019d82:	4652      	mov	r2, sl
 8019d84:	4631      	mov	r1, r6
 8019d86:	4628      	mov	r0, r5
 8019d88:	47b8      	blx	r7
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	f43f af00 	beq.w	8019b90 <_printf_float+0x98>
 8019d90:	f109 0901 	add.w	r9, r9, #1
 8019d94:	e7ee      	b.n	8019d74 <_printf_float+0x27c>
 8019d96:	bf00      	nop
 8019d98:	ffffffff 	.word	0xffffffff
 8019d9c:	7fefffff 	.word	0x7fefffff
 8019da0:	0801e5c8 	.word	0x0801e5c8
 8019da4:	0801e5cc 	.word	0x0801e5cc
 8019da8:	0801e5d0 	.word	0x0801e5d0
 8019dac:	0801e5d4 	.word	0x0801e5d4
 8019db0:	0801e5d8 	.word	0x0801e5d8
 8019db4:	9a08      	ldr	r2, [sp, #32]
 8019db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019db8:	429a      	cmp	r2, r3
 8019dba:	bfa8      	it	ge
 8019dbc:	461a      	movge	r2, r3
 8019dbe:	2a00      	cmp	r2, #0
 8019dc0:	4691      	mov	r9, r2
 8019dc2:	dc38      	bgt.n	8019e36 <_printf_float+0x33e>
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	9305      	str	r3, [sp, #20]
 8019dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019dcc:	f104 021a 	add.w	r2, r4, #26
 8019dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019dd2:	9905      	ldr	r1, [sp, #20]
 8019dd4:	9304      	str	r3, [sp, #16]
 8019dd6:	eba3 0309 	sub.w	r3, r3, r9
 8019dda:	428b      	cmp	r3, r1
 8019ddc:	dc33      	bgt.n	8019e46 <_printf_float+0x34e>
 8019dde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019de2:	429a      	cmp	r2, r3
 8019de4:	db3c      	blt.n	8019e60 <_printf_float+0x368>
 8019de6:	6823      	ldr	r3, [r4, #0]
 8019de8:	07da      	lsls	r2, r3, #31
 8019dea:	d439      	bmi.n	8019e60 <_printf_float+0x368>
 8019dec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019df0:	eba2 0903 	sub.w	r9, r2, r3
 8019df4:	9b04      	ldr	r3, [sp, #16]
 8019df6:	1ad2      	subs	r2, r2, r3
 8019df8:	4591      	cmp	r9, r2
 8019dfa:	bfa8      	it	ge
 8019dfc:	4691      	movge	r9, r2
 8019dfe:	f1b9 0f00 	cmp.w	r9, #0
 8019e02:	dc35      	bgt.n	8019e70 <_printf_float+0x378>
 8019e04:	f04f 0800 	mov.w	r8, #0
 8019e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019e0c:	f104 0a1a 	add.w	sl, r4, #26
 8019e10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019e14:	1a9b      	subs	r3, r3, r2
 8019e16:	eba3 0309 	sub.w	r3, r3, r9
 8019e1a:	4543      	cmp	r3, r8
 8019e1c:	f77f af77 	ble.w	8019d0e <_printf_float+0x216>
 8019e20:	2301      	movs	r3, #1
 8019e22:	4652      	mov	r2, sl
 8019e24:	4631      	mov	r1, r6
 8019e26:	4628      	mov	r0, r5
 8019e28:	47b8      	blx	r7
 8019e2a:	3001      	adds	r0, #1
 8019e2c:	f43f aeb0 	beq.w	8019b90 <_printf_float+0x98>
 8019e30:	f108 0801 	add.w	r8, r8, #1
 8019e34:	e7ec      	b.n	8019e10 <_printf_float+0x318>
 8019e36:	4613      	mov	r3, r2
 8019e38:	4631      	mov	r1, r6
 8019e3a:	4642      	mov	r2, r8
 8019e3c:	4628      	mov	r0, r5
 8019e3e:	47b8      	blx	r7
 8019e40:	3001      	adds	r0, #1
 8019e42:	d1bf      	bne.n	8019dc4 <_printf_float+0x2cc>
 8019e44:	e6a4      	b.n	8019b90 <_printf_float+0x98>
 8019e46:	2301      	movs	r3, #1
 8019e48:	4631      	mov	r1, r6
 8019e4a:	4628      	mov	r0, r5
 8019e4c:	9204      	str	r2, [sp, #16]
 8019e4e:	47b8      	blx	r7
 8019e50:	3001      	adds	r0, #1
 8019e52:	f43f ae9d 	beq.w	8019b90 <_printf_float+0x98>
 8019e56:	9b05      	ldr	r3, [sp, #20]
 8019e58:	9a04      	ldr	r2, [sp, #16]
 8019e5a:	3301      	adds	r3, #1
 8019e5c:	9305      	str	r3, [sp, #20]
 8019e5e:	e7b7      	b.n	8019dd0 <_printf_float+0x2d8>
 8019e60:	4653      	mov	r3, sl
 8019e62:	465a      	mov	r2, fp
 8019e64:	4631      	mov	r1, r6
 8019e66:	4628      	mov	r0, r5
 8019e68:	47b8      	blx	r7
 8019e6a:	3001      	adds	r0, #1
 8019e6c:	d1be      	bne.n	8019dec <_printf_float+0x2f4>
 8019e6e:	e68f      	b.n	8019b90 <_printf_float+0x98>
 8019e70:	9a04      	ldr	r2, [sp, #16]
 8019e72:	464b      	mov	r3, r9
 8019e74:	4442      	add	r2, r8
 8019e76:	4631      	mov	r1, r6
 8019e78:	4628      	mov	r0, r5
 8019e7a:	47b8      	blx	r7
 8019e7c:	3001      	adds	r0, #1
 8019e7e:	d1c1      	bne.n	8019e04 <_printf_float+0x30c>
 8019e80:	e686      	b.n	8019b90 <_printf_float+0x98>
 8019e82:	9a08      	ldr	r2, [sp, #32]
 8019e84:	2a01      	cmp	r2, #1
 8019e86:	dc01      	bgt.n	8019e8c <_printf_float+0x394>
 8019e88:	07db      	lsls	r3, r3, #31
 8019e8a:	d537      	bpl.n	8019efc <_printf_float+0x404>
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	4642      	mov	r2, r8
 8019e90:	4631      	mov	r1, r6
 8019e92:	4628      	mov	r0, r5
 8019e94:	47b8      	blx	r7
 8019e96:	3001      	adds	r0, #1
 8019e98:	f43f ae7a 	beq.w	8019b90 <_printf_float+0x98>
 8019e9c:	4653      	mov	r3, sl
 8019e9e:	465a      	mov	r2, fp
 8019ea0:	4631      	mov	r1, r6
 8019ea2:	4628      	mov	r0, r5
 8019ea4:	47b8      	blx	r7
 8019ea6:	3001      	adds	r0, #1
 8019ea8:	f43f ae72 	beq.w	8019b90 <_printf_float+0x98>
 8019eac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019eb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb8:	9b08      	ldr	r3, [sp, #32]
 8019eba:	d01a      	beq.n	8019ef2 <_printf_float+0x3fa>
 8019ebc:	3b01      	subs	r3, #1
 8019ebe:	f108 0201 	add.w	r2, r8, #1
 8019ec2:	4631      	mov	r1, r6
 8019ec4:	4628      	mov	r0, r5
 8019ec6:	47b8      	blx	r7
 8019ec8:	3001      	adds	r0, #1
 8019eca:	d10e      	bne.n	8019eea <_printf_float+0x3f2>
 8019ecc:	e660      	b.n	8019b90 <_printf_float+0x98>
 8019ece:	2301      	movs	r3, #1
 8019ed0:	464a      	mov	r2, r9
 8019ed2:	4631      	mov	r1, r6
 8019ed4:	4628      	mov	r0, r5
 8019ed6:	47b8      	blx	r7
 8019ed8:	3001      	adds	r0, #1
 8019eda:	f43f ae59 	beq.w	8019b90 <_printf_float+0x98>
 8019ede:	f108 0801 	add.w	r8, r8, #1
 8019ee2:	9b08      	ldr	r3, [sp, #32]
 8019ee4:	3b01      	subs	r3, #1
 8019ee6:	4543      	cmp	r3, r8
 8019ee8:	dcf1      	bgt.n	8019ece <_printf_float+0x3d6>
 8019eea:	9b04      	ldr	r3, [sp, #16]
 8019eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019ef0:	e6dd      	b.n	8019cae <_printf_float+0x1b6>
 8019ef2:	f04f 0800 	mov.w	r8, #0
 8019ef6:	f104 091a 	add.w	r9, r4, #26
 8019efa:	e7f2      	b.n	8019ee2 <_printf_float+0x3ea>
 8019efc:	2301      	movs	r3, #1
 8019efe:	4642      	mov	r2, r8
 8019f00:	e7df      	b.n	8019ec2 <_printf_float+0x3ca>
 8019f02:	2301      	movs	r3, #1
 8019f04:	464a      	mov	r2, r9
 8019f06:	4631      	mov	r1, r6
 8019f08:	4628      	mov	r0, r5
 8019f0a:	47b8      	blx	r7
 8019f0c:	3001      	adds	r0, #1
 8019f0e:	f43f ae3f 	beq.w	8019b90 <_printf_float+0x98>
 8019f12:	f108 0801 	add.w	r8, r8, #1
 8019f16:	68e3      	ldr	r3, [r4, #12]
 8019f18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019f1a:	1a5b      	subs	r3, r3, r1
 8019f1c:	4543      	cmp	r3, r8
 8019f1e:	dcf0      	bgt.n	8019f02 <_printf_float+0x40a>
 8019f20:	e6f9      	b.n	8019d16 <_printf_float+0x21e>
 8019f22:	f04f 0800 	mov.w	r8, #0
 8019f26:	f104 0919 	add.w	r9, r4, #25
 8019f2a:	e7f4      	b.n	8019f16 <_printf_float+0x41e>

08019f2c <_printf_common>:
 8019f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f30:	4616      	mov	r6, r2
 8019f32:	4699      	mov	r9, r3
 8019f34:	688a      	ldr	r2, [r1, #8]
 8019f36:	690b      	ldr	r3, [r1, #16]
 8019f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	bfb8      	it	lt
 8019f40:	4613      	movlt	r3, r2
 8019f42:	6033      	str	r3, [r6, #0]
 8019f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f48:	4607      	mov	r7, r0
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	b10a      	cbz	r2, 8019f52 <_printf_common+0x26>
 8019f4e:	3301      	adds	r3, #1
 8019f50:	6033      	str	r3, [r6, #0]
 8019f52:	6823      	ldr	r3, [r4, #0]
 8019f54:	0699      	lsls	r1, r3, #26
 8019f56:	bf42      	ittt	mi
 8019f58:	6833      	ldrmi	r3, [r6, #0]
 8019f5a:	3302      	addmi	r3, #2
 8019f5c:	6033      	strmi	r3, [r6, #0]
 8019f5e:	6825      	ldr	r5, [r4, #0]
 8019f60:	f015 0506 	ands.w	r5, r5, #6
 8019f64:	d106      	bne.n	8019f74 <_printf_common+0x48>
 8019f66:	f104 0a19 	add.w	sl, r4, #25
 8019f6a:	68e3      	ldr	r3, [r4, #12]
 8019f6c:	6832      	ldr	r2, [r6, #0]
 8019f6e:	1a9b      	subs	r3, r3, r2
 8019f70:	42ab      	cmp	r3, r5
 8019f72:	dc26      	bgt.n	8019fc2 <_printf_common+0x96>
 8019f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019f78:	1e13      	subs	r3, r2, #0
 8019f7a:	6822      	ldr	r2, [r4, #0]
 8019f7c:	bf18      	it	ne
 8019f7e:	2301      	movne	r3, #1
 8019f80:	0692      	lsls	r2, r2, #26
 8019f82:	d42b      	bmi.n	8019fdc <_printf_common+0xb0>
 8019f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f88:	4649      	mov	r1, r9
 8019f8a:	4638      	mov	r0, r7
 8019f8c:	47c0      	blx	r8
 8019f8e:	3001      	adds	r0, #1
 8019f90:	d01e      	beq.n	8019fd0 <_printf_common+0xa4>
 8019f92:	6823      	ldr	r3, [r4, #0]
 8019f94:	6922      	ldr	r2, [r4, #16]
 8019f96:	f003 0306 	and.w	r3, r3, #6
 8019f9a:	2b04      	cmp	r3, #4
 8019f9c:	bf02      	ittt	eq
 8019f9e:	68e5      	ldreq	r5, [r4, #12]
 8019fa0:	6833      	ldreq	r3, [r6, #0]
 8019fa2:	1aed      	subeq	r5, r5, r3
 8019fa4:	68a3      	ldr	r3, [r4, #8]
 8019fa6:	bf0c      	ite	eq
 8019fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019fac:	2500      	movne	r5, #0
 8019fae:	4293      	cmp	r3, r2
 8019fb0:	bfc4      	itt	gt
 8019fb2:	1a9b      	subgt	r3, r3, r2
 8019fb4:	18ed      	addgt	r5, r5, r3
 8019fb6:	2600      	movs	r6, #0
 8019fb8:	341a      	adds	r4, #26
 8019fba:	42b5      	cmp	r5, r6
 8019fbc:	d11a      	bne.n	8019ff4 <_printf_common+0xc8>
 8019fbe:	2000      	movs	r0, #0
 8019fc0:	e008      	b.n	8019fd4 <_printf_common+0xa8>
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	4652      	mov	r2, sl
 8019fc6:	4649      	mov	r1, r9
 8019fc8:	4638      	mov	r0, r7
 8019fca:	47c0      	blx	r8
 8019fcc:	3001      	adds	r0, #1
 8019fce:	d103      	bne.n	8019fd8 <_printf_common+0xac>
 8019fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8019fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fd8:	3501      	adds	r5, #1
 8019fda:	e7c6      	b.n	8019f6a <_printf_common+0x3e>
 8019fdc:	18e1      	adds	r1, r4, r3
 8019fde:	1c5a      	adds	r2, r3, #1
 8019fe0:	2030      	movs	r0, #48	; 0x30
 8019fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019fe6:	4422      	add	r2, r4
 8019fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019ff0:	3302      	adds	r3, #2
 8019ff2:	e7c7      	b.n	8019f84 <_printf_common+0x58>
 8019ff4:	2301      	movs	r3, #1
 8019ff6:	4622      	mov	r2, r4
 8019ff8:	4649      	mov	r1, r9
 8019ffa:	4638      	mov	r0, r7
 8019ffc:	47c0      	blx	r8
 8019ffe:	3001      	adds	r0, #1
 801a000:	d0e6      	beq.n	8019fd0 <_printf_common+0xa4>
 801a002:	3601      	adds	r6, #1
 801a004:	e7d9      	b.n	8019fba <_printf_common+0x8e>
	...

0801a008 <_printf_i>:
 801a008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a00c:	7e0f      	ldrb	r7, [r1, #24]
 801a00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a010:	2f78      	cmp	r7, #120	; 0x78
 801a012:	4691      	mov	r9, r2
 801a014:	4680      	mov	r8, r0
 801a016:	460c      	mov	r4, r1
 801a018:	469a      	mov	sl, r3
 801a01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a01e:	d807      	bhi.n	801a030 <_printf_i+0x28>
 801a020:	2f62      	cmp	r7, #98	; 0x62
 801a022:	d80a      	bhi.n	801a03a <_printf_i+0x32>
 801a024:	2f00      	cmp	r7, #0
 801a026:	f000 80d4 	beq.w	801a1d2 <_printf_i+0x1ca>
 801a02a:	2f58      	cmp	r7, #88	; 0x58
 801a02c:	f000 80c0 	beq.w	801a1b0 <_printf_i+0x1a8>
 801a030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a038:	e03a      	b.n	801a0b0 <_printf_i+0xa8>
 801a03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a03e:	2b15      	cmp	r3, #21
 801a040:	d8f6      	bhi.n	801a030 <_printf_i+0x28>
 801a042:	a101      	add	r1, pc, #4	; (adr r1, 801a048 <_printf_i+0x40>)
 801a044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a048:	0801a0a1 	.word	0x0801a0a1
 801a04c:	0801a0b5 	.word	0x0801a0b5
 801a050:	0801a031 	.word	0x0801a031
 801a054:	0801a031 	.word	0x0801a031
 801a058:	0801a031 	.word	0x0801a031
 801a05c:	0801a031 	.word	0x0801a031
 801a060:	0801a0b5 	.word	0x0801a0b5
 801a064:	0801a031 	.word	0x0801a031
 801a068:	0801a031 	.word	0x0801a031
 801a06c:	0801a031 	.word	0x0801a031
 801a070:	0801a031 	.word	0x0801a031
 801a074:	0801a1b9 	.word	0x0801a1b9
 801a078:	0801a0e1 	.word	0x0801a0e1
 801a07c:	0801a173 	.word	0x0801a173
 801a080:	0801a031 	.word	0x0801a031
 801a084:	0801a031 	.word	0x0801a031
 801a088:	0801a1db 	.word	0x0801a1db
 801a08c:	0801a031 	.word	0x0801a031
 801a090:	0801a0e1 	.word	0x0801a0e1
 801a094:	0801a031 	.word	0x0801a031
 801a098:	0801a031 	.word	0x0801a031
 801a09c:	0801a17b 	.word	0x0801a17b
 801a0a0:	682b      	ldr	r3, [r5, #0]
 801a0a2:	1d1a      	adds	r2, r3, #4
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	602a      	str	r2, [r5, #0]
 801a0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a0b0:	2301      	movs	r3, #1
 801a0b2:	e09f      	b.n	801a1f4 <_printf_i+0x1ec>
 801a0b4:	6820      	ldr	r0, [r4, #0]
 801a0b6:	682b      	ldr	r3, [r5, #0]
 801a0b8:	0607      	lsls	r7, r0, #24
 801a0ba:	f103 0104 	add.w	r1, r3, #4
 801a0be:	6029      	str	r1, [r5, #0]
 801a0c0:	d501      	bpl.n	801a0c6 <_printf_i+0xbe>
 801a0c2:	681e      	ldr	r6, [r3, #0]
 801a0c4:	e003      	b.n	801a0ce <_printf_i+0xc6>
 801a0c6:	0646      	lsls	r6, r0, #25
 801a0c8:	d5fb      	bpl.n	801a0c2 <_printf_i+0xba>
 801a0ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a0ce:	2e00      	cmp	r6, #0
 801a0d0:	da03      	bge.n	801a0da <_printf_i+0xd2>
 801a0d2:	232d      	movs	r3, #45	; 0x2d
 801a0d4:	4276      	negs	r6, r6
 801a0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0da:	485a      	ldr	r0, [pc, #360]	; (801a244 <_printf_i+0x23c>)
 801a0dc:	230a      	movs	r3, #10
 801a0de:	e012      	b.n	801a106 <_printf_i+0xfe>
 801a0e0:	682b      	ldr	r3, [r5, #0]
 801a0e2:	6820      	ldr	r0, [r4, #0]
 801a0e4:	1d19      	adds	r1, r3, #4
 801a0e6:	6029      	str	r1, [r5, #0]
 801a0e8:	0605      	lsls	r5, r0, #24
 801a0ea:	d501      	bpl.n	801a0f0 <_printf_i+0xe8>
 801a0ec:	681e      	ldr	r6, [r3, #0]
 801a0ee:	e002      	b.n	801a0f6 <_printf_i+0xee>
 801a0f0:	0641      	lsls	r1, r0, #25
 801a0f2:	d5fb      	bpl.n	801a0ec <_printf_i+0xe4>
 801a0f4:	881e      	ldrh	r6, [r3, #0]
 801a0f6:	4853      	ldr	r0, [pc, #332]	; (801a244 <_printf_i+0x23c>)
 801a0f8:	2f6f      	cmp	r7, #111	; 0x6f
 801a0fa:	bf0c      	ite	eq
 801a0fc:	2308      	moveq	r3, #8
 801a0fe:	230a      	movne	r3, #10
 801a100:	2100      	movs	r1, #0
 801a102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a106:	6865      	ldr	r5, [r4, #4]
 801a108:	60a5      	str	r5, [r4, #8]
 801a10a:	2d00      	cmp	r5, #0
 801a10c:	bfa2      	ittt	ge
 801a10e:	6821      	ldrge	r1, [r4, #0]
 801a110:	f021 0104 	bicge.w	r1, r1, #4
 801a114:	6021      	strge	r1, [r4, #0]
 801a116:	b90e      	cbnz	r6, 801a11c <_printf_i+0x114>
 801a118:	2d00      	cmp	r5, #0
 801a11a:	d04b      	beq.n	801a1b4 <_printf_i+0x1ac>
 801a11c:	4615      	mov	r5, r2
 801a11e:	fbb6 f1f3 	udiv	r1, r6, r3
 801a122:	fb03 6711 	mls	r7, r3, r1, r6
 801a126:	5dc7      	ldrb	r7, [r0, r7]
 801a128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a12c:	4637      	mov	r7, r6
 801a12e:	42bb      	cmp	r3, r7
 801a130:	460e      	mov	r6, r1
 801a132:	d9f4      	bls.n	801a11e <_printf_i+0x116>
 801a134:	2b08      	cmp	r3, #8
 801a136:	d10b      	bne.n	801a150 <_printf_i+0x148>
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	07de      	lsls	r6, r3, #31
 801a13c:	d508      	bpl.n	801a150 <_printf_i+0x148>
 801a13e:	6923      	ldr	r3, [r4, #16]
 801a140:	6861      	ldr	r1, [r4, #4]
 801a142:	4299      	cmp	r1, r3
 801a144:	bfde      	ittt	le
 801a146:	2330      	movle	r3, #48	; 0x30
 801a148:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a14c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a150:	1b52      	subs	r2, r2, r5
 801a152:	6122      	str	r2, [r4, #16]
 801a154:	f8cd a000 	str.w	sl, [sp]
 801a158:	464b      	mov	r3, r9
 801a15a:	aa03      	add	r2, sp, #12
 801a15c:	4621      	mov	r1, r4
 801a15e:	4640      	mov	r0, r8
 801a160:	f7ff fee4 	bl	8019f2c <_printf_common>
 801a164:	3001      	adds	r0, #1
 801a166:	d14a      	bne.n	801a1fe <_printf_i+0x1f6>
 801a168:	f04f 30ff 	mov.w	r0, #4294967295
 801a16c:	b004      	add	sp, #16
 801a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a172:	6823      	ldr	r3, [r4, #0]
 801a174:	f043 0320 	orr.w	r3, r3, #32
 801a178:	6023      	str	r3, [r4, #0]
 801a17a:	4833      	ldr	r0, [pc, #204]	; (801a248 <_printf_i+0x240>)
 801a17c:	2778      	movs	r7, #120	; 0x78
 801a17e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a182:	6823      	ldr	r3, [r4, #0]
 801a184:	6829      	ldr	r1, [r5, #0]
 801a186:	061f      	lsls	r7, r3, #24
 801a188:	f851 6b04 	ldr.w	r6, [r1], #4
 801a18c:	d402      	bmi.n	801a194 <_printf_i+0x18c>
 801a18e:	065f      	lsls	r7, r3, #25
 801a190:	bf48      	it	mi
 801a192:	b2b6      	uxthmi	r6, r6
 801a194:	07df      	lsls	r7, r3, #31
 801a196:	bf48      	it	mi
 801a198:	f043 0320 	orrmi.w	r3, r3, #32
 801a19c:	6029      	str	r1, [r5, #0]
 801a19e:	bf48      	it	mi
 801a1a0:	6023      	strmi	r3, [r4, #0]
 801a1a2:	b91e      	cbnz	r6, 801a1ac <_printf_i+0x1a4>
 801a1a4:	6823      	ldr	r3, [r4, #0]
 801a1a6:	f023 0320 	bic.w	r3, r3, #32
 801a1aa:	6023      	str	r3, [r4, #0]
 801a1ac:	2310      	movs	r3, #16
 801a1ae:	e7a7      	b.n	801a100 <_printf_i+0xf8>
 801a1b0:	4824      	ldr	r0, [pc, #144]	; (801a244 <_printf_i+0x23c>)
 801a1b2:	e7e4      	b.n	801a17e <_printf_i+0x176>
 801a1b4:	4615      	mov	r5, r2
 801a1b6:	e7bd      	b.n	801a134 <_printf_i+0x12c>
 801a1b8:	682b      	ldr	r3, [r5, #0]
 801a1ba:	6826      	ldr	r6, [r4, #0]
 801a1bc:	6961      	ldr	r1, [r4, #20]
 801a1be:	1d18      	adds	r0, r3, #4
 801a1c0:	6028      	str	r0, [r5, #0]
 801a1c2:	0635      	lsls	r5, r6, #24
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	d501      	bpl.n	801a1cc <_printf_i+0x1c4>
 801a1c8:	6019      	str	r1, [r3, #0]
 801a1ca:	e002      	b.n	801a1d2 <_printf_i+0x1ca>
 801a1cc:	0670      	lsls	r0, r6, #25
 801a1ce:	d5fb      	bpl.n	801a1c8 <_printf_i+0x1c0>
 801a1d0:	8019      	strh	r1, [r3, #0]
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	6123      	str	r3, [r4, #16]
 801a1d6:	4615      	mov	r5, r2
 801a1d8:	e7bc      	b.n	801a154 <_printf_i+0x14c>
 801a1da:	682b      	ldr	r3, [r5, #0]
 801a1dc:	1d1a      	adds	r2, r3, #4
 801a1de:	602a      	str	r2, [r5, #0]
 801a1e0:	681d      	ldr	r5, [r3, #0]
 801a1e2:	6862      	ldr	r2, [r4, #4]
 801a1e4:	2100      	movs	r1, #0
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f7e6 f892 	bl	8000310 <memchr>
 801a1ec:	b108      	cbz	r0, 801a1f2 <_printf_i+0x1ea>
 801a1ee:	1b40      	subs	r0, r0, r5
 801a1f0:	6060      	str	r0, [r4, #4]
 801a1f2:	6863      	ldr	r3, [r4, #4]
 801a1f4:	6123      	str	r3, [r4, #16]
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1fc:	e7aa      	b.n	801a154 <_printf_i+0x14c>
 801a1fe:	6923      	ldr	r3, [r4, #16]
 801a200:	462a      	mov	r2, r5
 801a202:	4649      	mov	r1, r9
 801a204:	4640      	mov	r0, r8
 801a206:	47d0      	blx	sl
 801a208:	3001      	adds	r0, #1
 801a20a:	d0ad      	beq.n	801a168 <_printf_i+0x160>
 801a20c:	6823      	ldr	r3, [r4, #0]
 801a20e:	079b      	lsls	r3, r3, #30
 801a210:	d413      	bmi.n	801a23a <_printf_i+0x232>
 801a212:	68e0      	ldr	r0, [r4, #12]
 801a214:	9b03      	ldr	r3, [sp, #12]
 801a216:	4298      	cmp	r0, r3
 801a218:	bfb8      	it	lt
 801a21a:	4618      	movlt	r0, r3
 801a21c:	e7a6      	b.n	801a16c <_printf_i+0x164>
 801a21e:	2301      	movs	r3, #1
 801a220:	4632      	mov	r2, r6
 801a222:	4649      	mov	r1, r9
 801a224:	4640      	mov	r0, r8
 801a226:	47d0      	blx	sl
 801a228:	3001      	adds	r0, #1
 801a22a:	d09d      	beq.n	801a168 <_printf_i+0x160>
 801a22c:	3501      	adds	r5, #1
 801a22e:	68e3      	ldr	r3, [r4, #12]
 801a230:	9903      	ldr	r1, [sp, #12]
 801a232:	1a5b      	subs	r3, r3, r1
 801a234:	42ab      	cmp	r3, r5
 801a236:	dcf2      	bgt.n	801a21e <_printf_i+0x216>
 801a238:	e7eb      	b.n	801a212 <_printf_i+0x20a>
 801a23a:	2500      	movs	r5, #0
 801a23c:	f104 0619 	add.w	r6, r4, #25
 801a240:	e7f5      	b.n	801a22e <_printf_i+0x226>
 801a242:	bf00      	nop
 801a244:	0801e5da 	.word	0x0801e5da
 801a248:	0801e5eb 	.word	0x0801e5eb

0801a24c <_scanf_float>:
 801a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a250:	b087      	sub	sp, #28
 801a252:	4617      	mov	r7, r2
 801a254:	9303      	str	r3, [sp, #12]
 801a256:	688b      	ldr	r3, [r1, #8]
 801a258:	1e5a      	subs	r2, r3, #1
 801a25a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a25e:	bf83      	ittte	hi
 801a260:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a264:	195b      	addhi	r3, r3, r5
 801a266:	9302      	strhi	r3, [sp, #8]
 801a268:	2300      	movls	r3, #0
 801a26a:	bf86      	itte	hi
 801a26c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a270:	608b      	strhi	r3, [r1, #8]
 801a272:	9302      	strls	r3, [sp, #8]
 801a274:	680b      	ldr	r3, [r1, #0]
 801a276:	468b      	mov	fp, r1
 801a278:	2500      	movs	r5, #0
 801a27a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a27e:	f84b 3b1c 	str.w	r3, [fp], #28
 801a282:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a286:	4680      	mov	r8, r0
 801a288:	460c      	mov	r4, r1
 801a28a:	465e      	mov	r6, fp
 801a28c:	46aa      	mov	sl, r5
 801a28e:	46a9      	mov	r9, r5
 801a290:	9501      	str	r5, [sp, #4]
 801a292:	68a2      	ldr	r2, [r4, #8]
 801a294:	b152      	cbz	r2, 801a2ac <_scanf_float+0x60>
 801a296:	683b      	ldr	r3, [r7, #0]
 801a298:	781b      	ldrb	r3, [r3, #0]
 801a29a:	2b4e      	cmp	r3, #78	; 0x4e
 801a29c:	d864      	bhi.n	801a368 <_scanf_float+0x11c>
 801a29e:	2b40      	cmp	r3, #64	; 0x40
 801a2a0:	d83c      	bhi.n	801a31c <_scanf_float+0xd0>
 801a2a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a2a6:	b2c8      	uxtb	r0, r1
 801a2a8:	280e      	cmp	r0, #14
 801a2aa:	d93a      	bls.n	801a322 <_scanf_float+0xd6>
 801a2ac:	f1b9 0f00 	cmp.w	r9, #0
 801a2b0:	d003      	beq.n	801a2ba <_scanf_float+0x6e>
 801a2b2:	6823      	ldr	r3, [r4, #0]
 801a2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a2b8:	6023      	str	r3, [r4, #0]
 801a2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2be:	f1ba 0f01 	cmp.w	sl, #1
 801a2c2:	f200 8113 	bhi.w	801a4ec <_scanf_float+0x2a0>
 801a2c6:	455e      	cmp	r6, fp
 801a2c8:	f200 8105 	bhi.w	801a4d6 <_scanf_float+0x28a>
 801a2cc:	2501      	movs	r5, #1
 801a2ce:	4628      	mov	r0, r5
 801a2d0:	b007      	add	sp, #28
 801a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a2da:	2a0d      	cmp	r2, #13
 801a2dc:	d8e6      	bhi.n	801a2ac <_scanf_float+0x60>
 801a2de:	a101      	add	r1, pc, #4	; (adr r1, 801a2e4 <_scanf_float+0x98>)
 801a2e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a2e4:	0801a423 	.word	0x0801a423
 801a2e8:	0801a2ad 	.word	0x0801a2ad
 801a2ec:	0801a2ad 	.word	0x0801a2ad
 801a2f0:	0801a2ad 	.word	0x0801a2ad
 801a2f4:	0801a483 	.word	0x0801a483
 801a2f8:	0801a45b 	.word	0x0801a45b
 801a2fc:	0801a2ad 	.word	0x0801a2ad
 801a300:	0801a2ad 	.word	0x0801a2ad
 801a304:	0801a431 	.word	0x0801a431
 801a308:	0801a2ad 	.word	0x0801a2ad
 801a30c:	0801a2ad 	.word	0x0801a2ad
 801a310:	0801a2ad 	.word	0x0801a2ad
 801a314:	0801a2ad 	.word	0x0801a2ad
 801a318:	0801a3e9 	.word	0x0801a3e9
 801a31c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a320:	e7db      	b.n	801a2da <_scanf_float+0x8e>
 801a322:	290e      	cmp	r1, #14
 801a324:	d8c2      	bhi.n	801a2ac <_scanf_float+0x60>
 801a326:	a001      	add	r0, pc, #4	; (adr r0, 801a32c <_scanf_float+0xe0>)
 801a328:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a32c:	0801a3db 	.word	0x0801a3db
 801a330:	0801a2ad 	.word	0x0801a2ad
 801a334:	0801a3db 	.word	0x0801a3db
 801a338:	0801a46f 	.word	0x0801a46f
 801a33c:	0801a2ad 	.word	0x0801a2ad
 801a340:	0801a389 	.word	0x0801a389
 801a344:	0801a3c5 	.word	0x0801a3c5
 801a348:	0801a3c5 	.word	0x0801a3c5
 801a34c:	0801a3c5 	.word	0x0801a3c5
 801a350:	0801a3c5 	.word	0x0801a3c5
 801a354:	0801a3c5 	.word	0x0801a3c5
 801a358:	0801a3c5 	.word	0x0801a3c5
 801a35c:	0801a3c5 	.word	0x0801a3c5
 801a360:	0801a3c5 	.word	0x0801a3c5
 801a364:	0801a3c5 	.word	0x0801a3c5
 801a368:	2b6e      	cmp	r3, #110	; 0x6e
 801a36a:	d809      	bhi.n	801a380 <_scanf_float+0x134>
 801a36c:	2b60      	cmp	r3, #96	; 0x60
 801a36e:	d8b2      	bhi.n	801a2d6 <_scanf_float+0x8a>
 801a370:	2b54      	cmp	r3, #84	; 0x54
 801a372:	d077      	beq.n	801a464 <_scanf_float+0x218>
 801a374:	2b59      	cmp	r3, #89	; 0x59
 801a376:	d199      	bne.n	801a2ac <_scanf_float+0x60>
 801a378:	2d07      	cmp	r5, #7
 801a37a:	d197      	bne.n	801a2ac <_scanf_float+0x60>
 801a37c:	2508      	movs	r5, #8
 801a37e:	e029      	b.n	801a3d4 <_scanf_float+0x188>
 801a380:	2b74      	cmp	r3, #116	; 0x74
 801a382:	d06f      	beq.n	801a464 <_scanf_float+0x218>
 801a384:	2b79      	cmp	r3, #121	; 0x79
 801a386:	e7f6      	b.n	801a376 <_scanf_float+0x12a>
 801a388:	6821      	ldr	r1, [r4, #0]
 801a38a:	05c8      	lsls	r0, r1, #23
 801a38c:	d51a      	bpl.n	801a3c4 <_scanf_float+0x178>
 801a38e:	9b02      	ldr	r3, [sp, #8]
 801a390:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a394:	6021      	str	r1, [r4, #0]
 801a396:	f109 0901 	add.w	r9, r9, #1
 801a39a:	b11b      	cbz	r3, 801a3a4 <_scanf_float+0x158>
 801a39c:	3b01      	subs	r3, #1
 801a39e:	3201      	adds	r2, #1
 801a3a0:	9302      	str	r3, [sp, #8]
 801a3a2:	60a2      	str	r2, [r4, #8]
 801a3a4:	68a3      	ldr	r3, [r4, #8]
 801a3a6:	3b01      	subs	r3, #1
 801a3a8:	60a3      	str	r3, [r4, #8]
 801a3aa:	6923      	ldr	r3, [r4, #16]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	6123      	str	r3, [r4, #16]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	3b01      	subs	r3, #1
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	607b      	str	r3, [r7, #4]
 801a3b8:	f340 8084 	ble.w	801a4c4 <_scanf_float+0x278>
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	3301      	adds	r3, #1
 801a3c0:	603b      	str	r3, [r7, #0]
 801a3c2:	e766      	b.n	801a292 <_scanf_float+0x46>
 801a3c4:	eb1a 0f05 	cmn.w	sl, r5
 801a3c8:	f47f af70 	bne.w	801a2ac <_scanf_float+0x60>
 801a3cc:	6822      	ldr	r2, [r4, #0]
 801a3ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a3d2:	6022      	str	r2, [r4, #0]
 801a3d4:	f806 3b01 	strb.w	r3, [r6], #1
 801a3d8:	e7e4      	b.n	801a3a4 <_scanf_float+0x158>
 801a3da:	6822      	ldr	r2, [r4, #0]
 801a3dc:	0610      	lsls	r0, r2, #24
 801a3de:	f57f af65 	bpl.w	801a2ac <_scanf_float+0x60>
 801a3e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a3e6:	e7f4      	b.n	801a3d2 <_scanf_float+0x186>
 801a3e8:	f1ba 0f00 	cmp.w	sl, #0
 801a3ec:	d10e      	bne.n	801a40c <_scanf_float+0x1c0>
 801a3ee:	f1b9 0f00 	cmp.w	r9, #0
 801a3f2:	d10e      	bne.n	801a412 <_scanf_float+0x1c6>
 801a3f4:	6822      	ldr	r2, [r4, #0]
 801a3f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a3fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a3fe:	d108      	bne.n	801a412 <_scanf_float+0x1c6>
 801a400:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a404:	6022      	str	r2, [r4, #0]
 801a406:	f04f 0a01 	mov.w	sl, #1
 801a40a:	e7e3      	b.n	801a3d4 <_scanf_float+0x188>
 801a40c:	f1ba 0f02 	cmp.w	sl, #2
 801a410:	d055      	beq.n	801a4be <_scanf_float+0x272>
 801a412:	2d01      	cmp	r5, #1
 801a414:	d002      	beq.n	801a41c <_scanf_float+0x1d0>
 801a416:	2d04      	cmp	r5, #4
 801a418:	f47f af48 	bne.w	801a2ac <_scanf_float+0x60>
 801a41c:	3501      	adds	r5, #1
 801a41e:	b2ed      	uxtb	r5, r5
 801a420:	e7d8      	b.n	801a3d4 <_scanf_float+0x188>
 801a422:	f1ba 0f01 	cmp.w	sl, #1
 801a426:	f47f af41 	bne.w	801a2ac <_scanf_float+0x60>
 801a42a:	f04f 0a02 	mov.w	sl, #2
 801a42e:	e7d1      	b.n	801a3d4 <_scanf_float+0x188>
 801a430:	b97d      	cbnz	r5, 801a452 <_scanf_float+0x206>
 801a432:	f1b9 0f00 	cmp.w	r9, #0
 801a436:	f47f af3c 	bne.w	801a2b2 <_scanf_float+0x66>
 801a43a:	6822      	ldr	r2, [r4, #0]
 801a43c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a440:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a444:	f47f af39 	bne.w	801a2ba <_scanf_float+0x6e>
 801a448:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a44c:	6022      	str	r2, [r4, #0]
 801a44e:	2501      	movs	r5, #1
 801a450:	e7c0      	b.n	801a3d4 <_scanf_float+0x188>
 801a452:	2d03      	cmp	r5, #3
 801a454:	d0e2      	beq.n	801a41c <_scanf_float+0x1d0>
 801a456:	2d05      	cmp	r5, #5
 801a458:	e7de      	b.n	801a418 <_scanf_float+0x1cc>
 801a45a:	2d02      	cmp	r5, #2
 801a45c:	f47f af26 	bne.w	801a2ac <_scanf_float+0x60>
 801a460:	2503      	movs	r5, #3
 801a462:	e7b7      	b.n	801a3d4 <_scanf_float+0x188>
 801a464:	2d06      	cmp	r5, #6
 801a466:	f47f af21 	bne.w	801a2ac <_scanf_float+0x60>
 801a46a:	2507      	movs	r5, #7
 801a46c:	e7b2      	b.n	801a3d4 <_scanf_float+0x188>
 801a46e:	6822      	ldr	r2, [r4, #0]
 801a470:	0591      	lsls	r1, r2, #22
 801a472:	f57f af1b 	bpl.w	801a2ac <_scanf_float+0x60>
 801a476:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a47a:	6022      	str	r2, [r4, #0]
 801a47c:	f8cd 9004 	str.w	r9, [sp, #4]
 801a480:	e7a8      	b.n	801a3d4 <_scanf_float+0x188>
 801a482:	6822      	ldr	r2, [r4, #0]
 801a484:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a488:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a48c:	d006      	beq.n	801a49c <_scanf_float+0x250>
 801a48e:	0550      	lsls	r0, r2, #21
 801a490:	f57f af0c 	bpl.w	801a2ac <_scanf_float+0x60>
 801a494:	f1b9 0f00 	cmp.w	r9, #0
 801a498:	f43f af0f 	beq.w	801a2ba <_scanf_float+0x6e>
 801a49c:	0591      	lsls	r1, r2, #22
 801a49e:	bf58      	it	pl
 801a4a0:	9901      	ldrpl	r1, [sp, #4]
 801a4a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a4a6:	bf58      	it	pl
 801a4a8:	eba9 0101 	subpl.w	r1, r9, r1
 801a4ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a4b0:	bf58      	it	pl
 801a4b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a4b6:	6022      	str	r2, [r4, #0]
 801a4b8:	f04f 0900 	mov.w	r9, #0
 801a4bc:	e78a      	b.n	801a3d4 <_scanf_float+0x188>
 801a4be:	f04f 0a03 	mov.w	sl, #3
 801a4c2:	e787      	b.n	801a3d4 <_scanf_float+0x188>
 801a4c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a4c8:	4639      	mov	r1, r7
 801a4ca:	4640      	mov	r0, r8
 801a4cc:	4798      	blx	r3
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	f43f aedf 	beq.w	801a292 <_scanf_float+0x46>
 801a4d4:	e6ea      	b.n	801a2ac <_scanf_float+0x60>
 801a4d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a4da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a4de:	463a      	mov	r2, r7
 801a4e0:	4640      	mov	r0, r8
 801a4e2:	4798      	blx	r3
 801a4e4:	6923      	ldr	r3, [r4, #16]
 801a4e6:	3b01      	subs	r3, #1
 801a4e8:	6123      	str	r3, [r4, #16]
 801a4ea:	e6ec      	b.n	801a2c6 <_scanf_float+0x7a>
 801a4ec:	1e6b      	subs	r3, r5, #1
 801a4ee:	2b06      	cmp	r3, #6
 801a4f0:	d825      	bhi.n	801a53e <_scanf_float+0x2f2>
 801a4f2:	2d02      	cmp	r5, #2
 801a4f4:	d836      	bhi.n	801a564 <_scanf_float+0x318>
 801a4f6:	455e      	cmp	r6, fp
 801a4f8:	f67f aee8 	bls.w	801a2cc <_scanf_float+0x80>
 801a4fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a500:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a504:	463a      	mov	r2, r7
 801a506:	4640      	mov	r0, r8
 801a508:	4798      	blx	r3
 801a50a:	6923      	ldr	r3, [r4, #16]
 801a50c:	3b01      	subs	r3, #1
 801a50e:	6123      	str	r3, [r4, #16]
 801a510:	e7f1      	b.n	801a4f6 <_scanf_float+0x2aa>
 801a512:	9802      	ldr	r0, [sp, #8]
 801a514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a518:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a51c:	9002      	str	r0, [sp, #8]
 801a51e:	463a      	mov	r2, r7
 801a520:	4640      	mov	r0, r8
 801a522:	4798      	blx	r3
 801a524:	6923      	ldr	r3, [r4, #16]
 801a526:	3b01      	subs	r3, #1
 801a528:	6123      	str	r3, [r4, #16]
 801a52a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a52e:	fa5f fa8a 	uxtb.w	sl, sl
 801a532:	f1ba 0f02 	cmp.w	sl, #2
 801a536:	d1ec      	bne.n	801a512 <_scanf_float+0x2c6>
 801a538:	3d03      	subs	r5, #3
 801a53a:	b2ed      	uxtb	r5, r5
 801a53c:	1b76      	subs	r6, r6, r5
 801a53e:	6823      	ldr	r3, [r4, #0]
 801a540:	05da      	lsls	r2, r3, #23
 801a542:	d52f      	bpl.n	801a5a4 <_scanf_float+0x358>
 801a544:	055b      	lsls	r3, r3, #21
 801a546:	d510      	bpl.n	801a56a <_scanf_float+0x31e>
 801a548:	455e      	cmp	r6, fp
 801a54a:	f67f aebf 	bls.w	801a2cc <_scanf_float+0x80>
 801a54e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a556:	463a      	mov	r2, r7
 801a558:	4640      	mov	r0, r8
 801a55a:	4798      	blx	r3
 801a55c:	6923      	ldr	r3, [r4, #16]
 801a55e:	3b01      	subs	r3, #1
 801a560:	6123      	str	r3, [r4, #16]
 801a562:	e7f1      	b.n	801a548 <_scanf_float+0x2fc>
 801a564:	46aa      	mov	sl, r5
 801a566:	9602      	str	r6, [sp, #8]
 801a568:	e7df      	b.n	801a52a <_scanf_float+0x2de>
 801a56a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a56e:	6923      	ldr	r3, [r4, #16]
 801a570:	2965      	cmp	r1, #101	; 0x65
 801a572:	f103 33ff 	add.w	r3, r3, #4294967295
 801a576:	f106 35ff 	add.w	r5, r6, #4294967295
 801a57a:	6123      	str	r3, [r4, #16]
 801a57c:	d00c      	beq.n	801a598 <_scanf_float+0x34c>
 801a57e:	2945      	cmp	r1, #69	; 0x45
 801a580:	d00a      	beq.n	801a598 <_scanf_float+0x34c>
 801a582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a586:	463a      	mov	r2, r7
 801a588:	4640      	mov	r0, r8
 801a58a:	4798      	blx	r3
 801a58c:	6923      	ldr	r3, [r4, #16]
 801a58e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a592:	3b01      	subs	r3, #1
 801a594:	1eb5      	subs	r5, r6, #2
 801a596:	6123      	str	r3, [r4, #16]
 801a598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a59c:	463a      	mov	r2, r7
 801a59e:	4640      	mov	r0, r8
 801a5a0:	4798      	blx	r3
 801a5a2:	462e      	mov	r6, r5
 801a5a4:	6825      	ldr	r5, [r4, #0]
 801a5a6:	f015 0510 	ands.w	r5, r5, #16
 801a5aa:	d14d      	bne.n	801a648 <_scanf_float+0x3fc>
 801a5ac:	7035      	strb	r5, [r6, #0]
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a5b8:	d11a      	bne.n	801a5f0 <_scanf_float+0x3a4>
 801a5ba:	9b01      	ldr	r3, [sp, #4]
 801a5bc:	454b      	cmp	r3, r9
 801a5be:	eba3 0209 	sub.w	r2, r3, r9
 801a5c2:	d122      	bne.n	801a60a <_scanf_float+0x3be>
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	4659      	mov	r1, fp
 801a5c8:	4640      	mov	r0, r8
 801a5ca:	f002 fb67 	bl	801cc9c <_strtod_r>
 801a5ce:	9b03      	ldr	r3, [sp, #12]
 801a5d0:	6821      	ldr	r1, [r4, #0]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	f011 0f02 	tst.w	r1, #2
 801a5d8:	f103 0204 	add.w	r2, r3, #4
 801a5dc:	d020      	beq.n	801a620 <_scanf_float+0x3d4>
 801a5de:	9903      	ldr	r1, [sp, #12]
 801a5e0:	600a      	str	r2, [r1, #0]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	ed83 0b00 	vstr	d0, [r3]
 801a5e8:	68e3      	ldr	r3, [r4, #12]
 801a5ea:	3301      	adds	r3, #1
 801a5ec:	60e3      	str	r3, [r4, #12]
 801a5ee:	e66e      	b.n	801a2ce <_scanf_float+0x82>
 801a5f0:	9b04      	ldr	r3, [sp, #16]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d0e6      	beq.n	801a5c4 <_scanf_float+0x378>
 801a5f6:	9905      	ldr	r1, [sp, #20]
 801a5f8:	230a      	movs	r3, #10
 801a5fa:	462a      	mov	r2, r5
 801a5fc:	3101      	adds	r1, #1
 801a5fe:	4640      	mov	r0, r8
 801a600:	f002 fbd4 	bl	801cdac <_strtol_r>
 801a604:	9b04      	ldr	r3, [sp, #16]
 801a606:	9e05      	ldr	r6, [sp, #20]
 801a608:	1ac2      	subs	r2, r0, r3
 801a60a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a60e:	429e      	cmp	r6, r3
 801a610:	bf28      	it	cs
 801a612:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a616:	490d      	ldr	r1, [pc, #52]	; (801a64c <_scanf_float+0x400>)
 801a618:	4630      	mov	r0, r6
 801a61a:	f000 f8dd 	bl	801a7d8 <siprintf>
 801a61e:	e7d1      	b.n	801a5c4 <_scanf_float+0x378>
 801a620:	f011 0f04 	tst.w	r1, #4
 801a624:	9903      	ldr	r1, [sp, #12]
 801a626:	600a      	str	r2, [r1, #0]
 801a628:	d1db      	bne.n	801a5e2 <_scanf_float+0x396>
 801a62a:	eeb4 0b40 	vcmp.f64	d0, d0
 801a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a632:	681e      	ldr	r6, [r3, #0]
 801a634:	d705      	bvc.n	801a642 <_scanf_float+0x3f6>
 801a636:	4806      	ldr	r0, [pc, #24]	; (801a650 <_scanf_float+0x404>)
 801a638:	f000 f9c0 	bl	801a9bc <nanf>
 801a63c:	ed86 0a00 	vstr	s0, [r6]
 801a640:	e7d2      	b.n	801a5e8 <_scanf_float+0x39c>
 801a642:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a646:	e7f9      	b.n	801a63c <_scanf_float+0x3f0>
 801a648:	2500      	movs	r5, #0
 801a64a:	e640      	b.n	801a2ce <_scanf_float+0x82>
 801a64c:	0801e5fc 	.word	0x0801e5fc
 801a650:	0801e98d 	.word	0x0801e98d

0801a654 <std>:
 801a654:	2300      	movs	r3, #0
 801a656:	b510      	push	{r4, lr}
 801a658:	4604      	mov	r4, r0
 801a65a:	e9c0 3300 	strd	r3, r3, [r0]
 801a65e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a662:	6083      	str	r3, [r0, #8]
 801a664:	8181      	strh	r1, [r0, #12]
 801a666:	6643      	str	r3, [r0, #100]	; 0x64
 801a668:	81c2      	strh	r2, [r0, #14]
 801a66a:	6183      	str	r3, [r0, #24]
 801a66c:	4619      	mov	r1, r3
 801a66e:	2208      	movs	r2, #8
 801a670:	305c      	adds	r0, #92	; 0x5c
 801a672:	f000 f914 	bl	801a89e <memset>
 801a676:	4b0d      	ldr	r3, [pc, #52]	; (801a6ac <std+0x58>)
 801a678:	6263      	str	r3, [r4, #36]	; 0x24
 801a67a:	4b0d      	ldr	r3, [pc, #52]	; (801a6b0 <std+0x5c>)
 801a67c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a67e:	4b0d      	ldr	r3, [pc, #52]	; (801a6b4 <std+0x60>)
 801a680:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a682:	4b0d      	ldr	r3, [pc, #52]	; (801a6b8 <std+0x64>)
 801a684:	6323      	str	r3, [r4, #48]	; 0x30
 801a686:	4b0d      	ldr	r3, [pc, #52]	; (801a6bc <std+0x68>)
 801a688:	6224      	str	r4, [r4, #32]
 801a68a:	429c      	cmp	r4, r3
 801a68c:	d006      	beq.n	801a69c <std+0x48>
 801a68e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a692:	4294      	cmp	r4, r2
 801a694:	d002      	beq.n	801a69c <std+0x48>
 801a696:	33d0      	adds	r3, #208	; 0xd0
 801a698:	429c      	cmp	r4, r3
 801a69a:	d105      	bne.n	801a6a8 <std+0x54>
 801a69c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6a4:	f000 b978 	b.w	801a998 <__retarget_lock_init_recursive>
 801a6a8:	bd10      	pop	{r4, pc}
 801a6aa:	bf00      	nop
 801a6ac:	0801a819 	.word	0x0801a819
 801a6b0:	0801a83b 	.word	0x0801a83b
 801a6b4:	0801a873 	.word	0x0801a873
 801a6b8:	0801a897 	.word	0x0801a897
 801a6bc:	240034f8 	.word	0x240034f8

0801a6c0 <stdio_exit_handler>:
 801a6c0:	4a02      	ldr	r2, [pc, #8]	; (801a6cc <stdio_exit_handler+0xc>)
 801a6c2:	4903      	ldr	r1, [pc, #12]	; (801a6d0 <stdio_exit_handler+0x10>)
 801a6c4:	4803      	ldr	r0, [pc, #12]	; (801a6d4 <stdio_exit_handler+0x14>)
 801a6c6:	f000 b869 	b.w	801a79c <_fwalk_sglue>
 801a6ca:	bf00      	nop
 801a6cc:	24000100 	.word	0x24000100
 801a6d0:	0801d16d 	.word	0x0801d16d
 801a6d4:	2400010c 	.word	0x2400010c

0801a6d8 <cleanup_stdio>:
 801a6d8:	6841      	ldr	r1, [r0, #4]
 801a6da:	4b0c      	ldr	r3, [pc, #48]	; (801a70c <cleanup_stdio+0x34>)
 801a6dc:	4299      	cmp	r1, r3
 801a6de:	b510      	push	{r4, lr}
 801a6e0:	4604      	mov	r4, r0
 801a6e2:	d001      	beq.n	801a6e8 <cleanup_stdio+0x10>
 801a6e4:	f002 fd42 	bl	801d16c <_fflush_r>
 801a6e8:	68a1      	ldr	r1, [r4, #8]
 801a6ea:	4b09      	ldr	r3, [pc, #36]	; (801a710 <cleanup_stdio+0x38>)
 801a6ec:	4299      	cmp	r1, r3
 801a6ee:	d002      	beq.n	801a6f6 <cleanup_stdio+0x1e>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	f002 fd3b 	bl	801d16c <_fflush_r>
 801a6f6:	68e1      	ldr	r1, [r4, #12]
 801a6f8:	4b06      	ldr	r3, [pc, #24]	; (801a714 <cleanup_stdio+0x3c>)
 801a6fa:	4299      	cmp	r1, r3
 801a6fc:	d004      	beq.n	801a708 <cleanup_stdio+0x30>
 801a6fe:	4620      	mov	r0, r4
 801a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a704:	f002 bd32 	b.w	801d16c <_fflush_r>
 801a708:	bd10      	pop	{r4, pc}
 801a70a:	bf00      	nop
 801a70c:	240034f8 	.word	0x240034f8
 801a710:	24003560 	.word	0x24003560
 801a714:	240035c8 	.word	0x240035c8

0801a718 <global_stdio_init.part.0>:
 801a718:	b510      	push	{r4, lr}
 801a71a:	4b0b      	ldr	r3, [pc, #44]	; (801a748 <global_stdio_init.part.0+0x30>)
 801a71c:	4c0b      	ldr	r4, [pc, #44]	; (801a74c <global_stdio_init.part.0+0x34>)
 801a71e:	4a0c      	ldr	r2, [pc, #48]	; (801a750 <global_stdio_init.part.0+0x38>)
 801a720:	601a      	str	r2, [r3, #0]
 801a722:	4620      	mov	r0, r4
 801a724:	2200      	movs	r2, #0
 801a726:	2104      	movs	r1, #4
 801a728:	f7ff ff94 	bl	801a654 <std>
 801a72c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a730:	2201      	movs	r2, #1
 801a732:	2109      	movs	r1, #9
 801a734:	f7ff ff8e 	bl	801a654 <std>
 801a738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a73c:	2202      	movs	r2, #2
 801a73e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a742:	2112      	movs	r1, #18
 801a744:	f7ff bf86 	b.w	801a654 <std>
 801a748:	24003630 	.word	0x24003630
 801a74c:	240034f8 	.word	0x240034f8
 801a750:	0801a6c1 	.word	0x0801a6c1

0801a754 <__sfp_lock_acquire>:
 801a754:	4801      	ldr	r0, [pc, #4]	; (801a75c <__sfp_lock_acquire+0x8>)
 801a756:	f000 b920 	b.w	801a99a <__retarget_lock_acquire_recursive>
 801a75a:	bf00      	nop
 801a75c:	24003639 	.word	0x24003639

0801a760 <__sfp_lock_release>:
 801a760:	4801      	ldr	r0, [pc, #4]	; (801a768 <__sfp_lock_release+0x8>)
 801a762:	f000 b91b 	b.w	801a99c <__retarget_lock_release_recursive>
 801a766:	bf00      	nop
 801a768:	24003639 	.word	0x24003639

0801a76c <__sinit>:
 801a76c:	b510      	push	{r4, lr}
 801a76e:	4604      	mov	r4, r0
 801a770:	f7ff fff0 	bl	801a754 <__sfp_lock_acquire>
 801a774:	6a23      	ldr	r3, [r4, #32]
 801a776:	b11b      	cbz	r3, 801a780 <__sinit+0x14>
 801a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a77c:	f7ff bff0 	b.w	801a760 <__sfp_lock_release>
 801a780:	4b04      	ldr	r3, [pc, #16]	; (801a794 <__sinit+0x28>)
 801a782:	6223      	str	r3, [r4, #32]
 801a784:	4b04      	ldr	r3, [pc, #16]	; (801a798 <__sinit+0x2c>)
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d1f5      	bne.n	801a778 <__sinit+0xc>
 801a78c:	f7ff ffc4 	bl	801a718 <global_stdio_init.part.0>
 801a790:	e7f2      	b.n	801a778 <__sinit+0xc>
 801a792:	bf00      	nop
 801a794:	0801a6d9 	.word	0x0801a6d9
 801a798:	24003630 	.word	0x24003630

0801a79c <_fwalk_sglue>:
 801a79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a7a0:	4607      	mov	r7, r0
 801a7a2:	4688      	mov	r8, r1
 801a7a4:	4614      	mov	r4, r2
 801a7a6:	2600      	movs	r6, #0
 801a7a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a7ac:	f1b9 0901 	subs.w	r9, r9, #1
 801a7b0:	d505      	bpl.n	801a7be <_fwalk_sglue+0x22>
 801a7b2:	6824      	ldr	r4, [r4, #0]
 801a7b4:	2c00      	cmp	r4, #0
 801a7b6:	d1f7      	bne.n	801a7a8 <_fwalk_sglue+0xc>
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a7be:	89ab      	ldrh	r3, [r5, #12]
 801a7c0:	2b01      	cmp	r3, #1
 801a7c2:	d907      	bls.n	801a7d4 <_fwalk_sglue+0x38>
 801a7c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	d003      	beq.n	801a7d4 <_fwalk_sglue+0x38>
 801a7cc:	4629      	mov	r1, r5
 801a7ce:	4638      	mov	r0, r7
 801a7d0:	47c0      	blx	r8
 801a7d2:	4306      	orrs	r6, r0
 801a7d4:	3568      	adds	r5, #104	; 0x68
 801a7d6:	e7e9      	b.n	801a7ac <_fwalk_sglue+0x10>

0801a7d8 <siprintf>:
 801a7d8:	b40e      	push	{r1, r2, r3}
 801a7da:	b500      	push	{lr}
 801a7dc:	b09c      	sub	sp, #112	; 0x70
 801a7de:	ab1d      	add	r3, sp, #116	; 0x74
 801a7e0:	9002      	str	r0, [sp, #8]
 801a7e2:	9006      	str	r0, [sp, #24]
 801a7e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a7e8:	4809      	ldr	r0, [pc, #36]	; (801a810 <siprintf+0x38>)
 801a7ea:	9107      	str	r1, [sp, #28]
 801a7ec:	9104      	str	r1, [sp, #16]
 801a7ee:	4909      	ldr	r1, [pc, #36]	; (801a814 <siprintf+0x3c>)
 801a7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7f4:	9105      	str	r1, [sp, #20]
 801a7f6:	6800      	ldr	r0, [r0, #0]
 801a7f8:	9301      	str	r3, [sp, #4]
 801a7fa:	a902      	add	r1, sp, #8
 801a7fc:	f002 fb32 	bl	801ce64 <_svfiprintf_r>
 801a800:	9b02      	ldr	r3, [sp, #8]
 801a802:	2200      	movs	r2, #0
 801a804:	701a      	strb	r2, [r3, #0]
 801a806:	b01c      	add	sp, #112	; 0x70
 801a808:	f85d eb04 	ldr.w	lr, [sp], #4
 801a80c:	b003      	add	sp, #12
 801a80e:	4770      	bx	lr
 801a810:	24000158 	.word	0x24000158
 801a814:	ffff0208 	.word	0xffff0208

0801a818 <__sread>:
 801a818:	b510      	push	{r4, lr}
 801a81a:	460c      	mov	r4, r1
 801a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a820:	f000 f86c 	bl	801a8fc <_read_r>
 801a824:	2800      	cmp	r0, #0
 801a826:	bfab      	itete	ge
 801a828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a82a:	89a3      	ldrhlt	r3, [r4, #12]
 801a82c:	181b      	addge	r3, r3, r0
 801a82e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a832:	bfac      	ite	ge
 801a834:	6563      	strge	r3, [r4, #84]	; 0x54
 801a836:	81a3      	strhlt	r3, [r4, #12]
 801a838:	bd10      	pop	{r4, pc}

0801a83a <__swrite>:
 801a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a83e:	461f      	mov	r7, r3
 801a840:	898b      	ldrh	r3, [r1, #12]
 801a842:	05db      	lsls	r3, r3, #23
 801a844:	4605      	mov	r5, r0
 801a846:	460c      	mov	r4, r1
 801a848:	4616      	mov	r6, r2
 801a84a:	d505      	bpl.n	801a858 <__swrite+0x1e>
 801a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a850:	2302      	movs	r3, #2
 801a852:	2200      	movs	r2, #0
 801a854:	f000 f840 	bl	801a8d8 <_lseek_r>
 801a858:	89a3      	ldrh	r3, [r4, #12]
 801a85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a85e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a862:	81a3      	strh	r3, [r4, #12]
 801a864:	4632      	mov	r2, r6
 801a866:	463b      	mov	r3, r7
 801a868:	4628      	mov	r0, r5
 801a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a86e:	f000 b857 	b.w	801a920 <_write_r>

0801a872 <__sseek>:
 801a872:	b510      	push	{r4, lr}
 801a874:	460c      	mov	r4, r1
 801a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a87a:	f000 f82d 	bl	801a8d8 <_lseek_r>
 801a87e:	1c43      	adds	r3, r0, #1
 801a880:	89a3      	ldrh	r3, [r4, #12]
 801a882:	bf15      	itete	ne
 801a884:	6560      	strne	r0, [r4, #84]	; 0x54
 801a886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a88a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a88e:	81a3      	strheq	r3, [r4, #12]
 801a890:	bf18      	it	ne
 801a892:	81a3      	strhne	r3, [r4, #12]
 801a894:	bd10      	pop	{r4, pc}

0801a896 <__sclose>:
 801a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a89a:	f000 b80d 	b.w	801a8b8 <_close_r>

0801a89e <memset>:
 801a89e:	4402      	add	r2, r0
 801a8a0:	4603      	mov	r3, r0
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	d100      	bne.n	801a8a8 <memset+0xa>
 801a8a6:	4770      	bx	lr
 801a8a8:	f803 1b01 	strb.w	r1, [r3], #1
 801a8ac:	e7f9      	b.n	801a8a2 <memset+0x4>
	...

0801a8b0 <_localeconv_r>:
 801a8b0:	4800      	ldr	r0, [pc, #0]	; (801a8b4 <_localeconv_r+0x4>)
 801a8b2:	4770      	bx	lr
 801a8b4:	2400024c 	.word	0x2400024c

0801a8b8 <_close_r>:
 801a8b8:	b538      	push	{r3, r4, r5, lr}
 801a8ba:	4d06      	ldr	r5, [pc, #24]	; (801a8d4 <_close_r+0x1c>)
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	602b      	str	r3, [r5, #0]
 801a8c4:	f7e8 fd63 	bl	800338e <_close>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	d102      	bne.n	801a8d2 <_close_r+0x1a>
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	b103      	cbz	r3, 801a8d2 <_close_r+0x1a>
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	24003634 	.word	0x24003634

0801a8d8 <_lseek_r>:
 801a8d8:	b538      	push	{r3, r4, r5, lr}
 801a8da:	4d07      	ldr	r5, [pc, #28]	; (801a8f8 <_lseek_r+0x20>)
 801a8dc:	4604      	mov	r4, r0
 801a8de:	4608      	mov	r0, r1
 801a8e0:	4611      	mov	r1, r2
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	602a      	str	r2, [r5, #0]
 801a8e6:	461a      	mov	r2, r3
 801a8e8:	f7e8 fd78 	bl	80033dc <_lseek>
 801a8ec:	1c43      	adds	r3, r0, #1
 801a8ee:	d102      	bne.n	801a8f6 <_lseek_r+0x1e>
 801a8f0:	682b      	ldr	r3, [r5, #0]
 801a8f2:	b103      	cbz	r3, 801a8f6 <_lseek_r+0x1e>
 801a8f4:	6023      	str	r3, [r4, #0]
 801a8f6:	bd38      	pop	{r3, r4, r5, pc}
 801a8f8:	24003634 	.word	0x24003634

0801a8fc <_read_r>:
 801a8fc:	b538      	push	{r3, r4, r5, lr}
 801a8fe:	4d07      	ldr	r5, [pc, #28]	; (801a91c <_read_r+0x20>)
 801a900:	4604      	mov	r4, r0
 801a902:	4608      	mov	r0, r1
 801a904:	4611      	mov	r1, r2
 801a906:	2200      	movs	r2, #0
 801a908:	602a      	str	r2, [r5, #0]
 801a90a:	461a      	mov	r2, r3
 801a90c:	f7e8 fd06 	bl	800331c <_read>
 801a910:	1c43      	adds	r3, r0, #1
 801a912:	d102      	bne.n	801a91a <_read_r+0x1e>
 801a914:	682b      	ldr	r3, [r5, #0]
 801a916:	b103      	cbz	r3, 801a91a <_read_r+0x1e>
 801a918:	6023      	str	r3, [r4, #0]
 801a91a:	bd38      	pop	{r3, r4, r5, pc}
 801a91c:	24003634 	.word	0x24003634

0801a920 <_write_r>:
 801a920:	b538      	push	{r3, r4, r5, lr}
 801a922:	4d07      	ldr	r5, [pc, #28]	; (801a940 <_write_r+0x20>)
 801a924:	4604      	mov	r4, r0
 801a926:	4608      	mov	r0, r1
 801a928:	4611      	mov	r1, r2
 801a92a:	2200      	movs	r2, #0
 801a92c:	602a      	str	r2, [r5, #0]
 801a92e:	461a      	mov	r2, r3
 801a930:	f7e8 fd11 	bl	8003356 <_write>
 801a934:	1c43      	adds	r3, r0, #1
 801a936:	d102      	bne.n	801a93e <_write_r+0x1e>
 801a938:	682b      	ldr	r3, [r5, #0]
 801a93a:	b103      	cbz	r3, 801a93e <_write_r+0x1e>
 801a93c:	6023      	str	r3, [r4, #0]
 801a93e:	bd38      	pop	{r3, r4, r5, pc}
 801a940:	24003634 	.word	0x24003634

0801a944 <__errno>:
 801a944:	4b01      	ldr	r3, [pc, #4]	; (801a94c <__errno+0x8>)
 801a946:	6818      	ldr	r0, [r3, #0]
 801a948:	4770      	bx	lr
 801a94a:	bf00      	nop
 801a94c:	24000158 	.word	0x24000158

0801a950 <__libc_init_array>:
 801a950:	b570      	push	{r4, r5, r6, lr}
 801a952:	4d0d      	ldr	r5, [pc, #52]	; (801a988 <__libc_init_array+0x38>)
 801a954:	4c0d      	ldr	r4, [pc, #52]	; (801a98c <__libc_init_array+0x3c>)
 801a956:	1b64      	subs	r4, r4, r5
 801a958:	10a4      	asrs	r4, r4, #2
 801a95a:	2600      	movs	r6, #0
 801a95c:	42a6      	cmp	r6, r4
 801a95e:	d109      	bne.n	801a974 <__libc_init_array+0x24>
 801a960:	4d0b      	ldr	r5, [pc, #44]	; (801a990 <__libc_init_array+0x40>)
 801a962:	4c0c      	ldr	r4, [pc, #48]	; (801a994 <__libc_init_array+0x44>)
 801a964:	f003 fb0c 	bl	801df80 <_init>
 801a968:	1b64      	subs	r4, r4, r5
 801a96a:	10a4      	asrs	r4, r4, #2
 801a96c:	2600      	movs	r6, #0
 801a96e:	42a6      	cmp	r6, r4
 801a970:	d105      	bne.n	801a97e <__libc_init_array+0x2e>
 801a972:	bd70      	pop	{r4, r5, r6, pc}
 801a974:	f855 3b04 	ldr.w	r3, [r5], #4
 801a978:	4798      	blx	r3
 801a97a:	3601      	adds	r6, #1
 801a97c:	e7ee      	b.n	801a95c <__libc_init_array+0xc>
 801a97e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a982:	4798      	blx	r3
 801a984:	3601      	adds	r6, #1
 801a986:	e7f2      	b.n	801a96e <__libc_init_array+0x1e>
 801a988:	0801e9f8 	.word	0x0801e9f8
 801a98c:	0801e9f8 	.word	0x0801e9f8
 801a990:	0801e9f8 	.word	0x0801e9f8
 801a994:	0801e9fc 	.word	0x0801e9fc

0801a998 <__retarget_lock_init_recursive>:
 801a998:	4770      	bx	lr

0801a99a <__retarget_lock_acquire_recursive>:
 801a99a:	4770      	bx	lr

0801a99c <__retarget_lock_release_recursive>:
 801a99c:	4770      	bx	lr

0801a99e <memcpy>:
 801a99e:	440a      	add	r2, r1
 801a9a0:	4291      	cmp	r1, r2
 801a9a2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a9a6:	d100      	bne.n	801a9aa <memcpy+0xc>
 801a9a8:	4770      	bx	lr
 801a9aa:	b510      	push	{r4, lr}
 801a9ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a9b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a9b4:	4291      	cmp	r1, r2
 801a9b6:	d1f9      	bne.n	801a9ac <memcpy+0xe>
 801a9b8:	bd10      	pop	{r4, pc}
	...

0801a9bc <nanf>:
 801a9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a9c4 <nanf+0x8>
 801a9c0:	4770      	bx	lr
 801a9c2:	bf00      	nop
 801a9c4:	7fc00000 	.word	0x7fc00000

0801a9c8 <quorem>:
 801a9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9cc:	6903      	ldr	r3, [r0, #16]
 801a9ce:	690c      	ldr	r4, [r1, #16]
 801a9d0:	42a3      	cmp	r3, r4
 801a9d2:	4607      	mov	r7, r0
 801a9d4:	db7e      	blt.n	801aad4 <quorem+0x10c>
 801a9d6:	3c01      	subs	r4, #1
 801a9d8:	f101 0814 	add.w	r8, r1, #20
 801a9dc:	f100 0514 	add.w	r5, r0, #20
 801a9e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a9e4:	9301      	str	r3, [sp, #4]
 801a9e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a9ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	429a      	cmp	r2, r3
 801a9f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a9f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a9fa:	fbb2 f6f3 	udiv	r6, r2, r3
 801a9fe:	d331      	bcc.n	801aa64 <quorem+0x9c>
 801aa00:	f04f 0e00 	mov.w	lr, #0
 801aa04:	4640      	mov	r0, r8
 801aa06:	46ac      	mov	ip, r5
 801aa08:	46f2      	mov	sl, lr
 801aa0a:	f850 2b04 	ldr.w	r2, [r0], #4
 801aa0e:	b293      	uxth	r3, r2
 801aa10:	fb06 e303 	mla	r3, r6, r3, lr
 801aa14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aa18:	0c1a      	lsrs	r2, r3, #16
 801aa1a:	b29b      	uxth	r3, r3
 801aa1c:	ebaa 0303 	sub.w	r3, sl, r3
 801aa20:	f8dc a000 	ldr.w	sl, [ip]
 801aa24:	fa13 f38a 	uxtah	r3, r3, sl
 801aa28:	fb06 220e 	mla	r2, r6, lr, r2
 801aa2c:	9300      	str	r3, [sp, #0]
 801aa2e:	9b00      	ldr	r3, [sp, #0]
 801aa30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aa34:	b292      	uxth	r2, r2
 801aa36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801aa3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aa3e:	f8bd 3000 	ldrh.w	r3, [sp]
 801aa42:	4581      	cmp	r9, r0
 801aa44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa48:	f84c 3b04 	str.w	r3, [ip], #4
 801aa4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801aa50:	d2db      	bcs.n	801aa0a <quorem+0x42>
 801aa52:	f855 300b 	ldr.w	r3, [r5, fp]
 801aa56:	b92b      	cbnz	r3, 801aa64 <quorem+0x9c>
 801aa58:	9b01      	ldr	r3, [sp, #4]
 801aa5a:	3b04      	subs	r3, #4
 801aa5c:	429d      	cmp	r5, r3
 801aa5e:	461a      	mov	r2, r3
 801aa60:	d32c      	bcc.n	801aabc <quorem+0xf4>
 801aa62:	613c      	str	r4, [r7, #16]
 801aa64:	4638      	mov	r0, r7
 801aa66:	f001 f969 	bl	801bd3c <__mcmp>
 801aa6a:	2800      	cmp	r0, #0
 801aa6c:	db22      	blt.n	801aab4 <quorem+0xec>
 801aa6e:	3601      	adds	r6, #1
 801aa70:	4629      	mov	r1, r5
 801aa72:	2000      	movs	r0, #0
 801aa74:	f858 2b04 	ldr.w	r2, [r8], #4
 801aa78:	f8d1 c000 	ldr.w	ip, [r1]
 801aa7c:	b293      	uxth	r3, r2
 801aa7e:	1ac3      	subs	r3, r0, r3
 801aa80:	0c12      	lsrs	r2, r2, #16
 801aa82:	fa13 f38c 	uxtah	r3, r3, ip
 801aa86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801aa8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa94:	45c1      	cmp	r9, r8
 801aa96:	f841 3b04 	str.w	r3, [r1], #4
 801aa9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801aa9e:	d2e9      	bcs.n	801aa74 <quorem+0xac>
 801aaa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aaa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aaa8:	b922      	cbnz	r2, 801aab4 <quorem+0xec>
 801aaaa:	3b04      	subs	r3, #4
 801aaac:	429d      	cmp	r5, r3
 801aaae:	461a      	mov	r2, r3
 801aab0:	d30a      	bcc.n	801aac8 <quorem+0x100>
 801aab2:	613c      	str	r4, [r7, #16]
 801aab4:	4630      	mov	r0, r6
 801aab6:	b003      	add	sp, #12
 801aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabc:	6812      	ldr	r2, [r2, #0]
 801aabe:	3b04      	subs	r3, #4
 801aac0:	2a00      	cmp	r2, #0
 801aac2:	d1ce      	bne.n	801aa62 <quorem+0x9a>
 801aac4:	3c01      	subs	r4, #1
 801aac6:	e7c9      	b.n	801aa5c <quorem+0x94>
 801aac8:	6812      	ldr	r2, [r2, #0]
 801aaca:	3b04      	subs	r3, #4
 801aacc:	2a00      	cmp	r2, #0
 801aace:	d1f0      	bne.n	801aab2 <quorem+0xea>
 801aad0:	3c01      	subs	r4, #1
 801aad2:	e7eb      	b.n	801aaac <quorem+0xe4>
 801aad4:	2000      	movs	r0, #0
 801aad6:	e7ee      	b.n	801aab6 <quorem+0xee>

0801aad8 <_dtoa_r>:
 801aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aadc:	ed2d 8b02 	vpush	{d8}
 801aae0:	69c5      	ldr	r5, [r0, #28]
 801aae2:	b091      	sub	sp, #68	; 0x44
 801aae4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801aae8:	ec59 8b10 	vmov	r8, r9, d0
 801aaec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801aaee:	9106      	str	r1, [sp, #24]
 801aaf0:	4606      	mov	r6, r0
 801aaf2:	9208      	str	r2, [sp, #32]
 801aaf4:	930c      	str	r3, [sp, #48]	; 0x30
 801aaf6:	b975      	cbnz	r5, 801ab16 <_dtoa_r+0x3e>
 801aaf8:	2010      	movs	r0, #16
 801aafa:	f000 fda5 	bl	801b648 <malloc>
 801aafe:	4602      	mov	r2, r0
 801ab00:	61f0      	str	r0, [r6, #28]
 801ab02:	b920      	cbnz	r0, 801ab0e <_dtoa_r+0x36>
 801ab04:	4ba6      	ldr	r3, [pc, #664]	; (801ada0 <_dtoa_r+0x2c8>)
 801ab06:	21ef      	movs	r1, #239	; 0xef
 801ab08:	48a6      	ldr	r0, [pc, #664]	; (801ada4 <_dtoa_r+0x2cc>)
 801ab0a:	f002 fb9d 	bl	801d248 <__assert_func>
 801ab0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ab12:	6005      	str	r5, [r0, #0]
 801ab14:	60c5      	str	r5, [r0, #12]
 801ab16:	69f3      	ldr	r3, [r6, #28]
 801ab18:	6819      	ldr	r1, [r3, #0]
 801ab1a:	b151      	cbz	r1, 801ab32 <_dtoa_r+0x5a>
 801ab1c:	685a      	ldr	r2, [r3, #4]
 801ab1e:	604a      	str	r2, [r1, #4]
 801ab20:	2301      	movs	r3, #1
 801ab22:	4093      	lsls	r3, r2
 801ab24:	608b      	str	r3, [r1, #8]
 801ab26:	4630      	mov	r0, r6
 801ab28:	f000 fe82 	bl	801b830 <_Bfree>
 801ab2c:	69f3      	ldr	r3, [r6, #28]
 801ab2e:	2200      	movs	r2, #0
 801ab30:	601a      	str	r2, [r3, #0]
 801ab32:	f1b9 0300 	subs.w	r3, r9, #0
 801ab36:	bfbb      	ittet	lt
 801ab38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ab3c:	9303      	strlt	r3, [sp, #12]
 801ab3e:	2300      	movge	r3, #0
 801ab40:	2201      	movlt	r2, #1
 801ab42:	bfac      	ite	ge
 801ab44:	6023      	strge	r3, [r4, #0]
 801ab46:	6022      	strlt	r2, [r4, #0]
 801ab48:	4b97      	ldr	r3, [pc, #604]	; (801ada8 <_dtoa_r+0x2d0>)
 801ab4a:	9c03      	ldr	r4, [sp, #12]
 801ab4c:	43a3      	bics	r3, r4
 801ab4e:	d11c      	bne.n	801ab8a <_dtoa_r+0xb2>
 801ab50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab52:	f242 730f 	movw	r3, #9999	; 0x270f
 801ab56:	6013      	str	r3, [r2, #0]
 801ab58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801ab5c:	ea53 0308 	orrs.w	r3, r3, r8
 801ab60:	f000 84fb 	beq.w	801b55a <_dtoa_r+0xa82>
 801ab64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ab66:	b963      	cbnz	r3, 801ab82 <_dtoa_r+0xaa>
 801ab68:	4b90      	ldr	r3, [pc, #576]	; (801adac <_dtoa_r+0x2d4>)
 801ab6a:	e020      	b.n	801abae <_dtoa_r+0xd6>
 801ab6c:	4b90      	ldr	r3, [pc, #576]	; (801adb0 <_dtoa_r+0x2d8>)
 801ab6e:	9301      	str	r3, [sp, #4]
 801ab70:	3308      	adds	r3, #8
 801ab72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ab74:	6013      	str	r3, [r2, #0]
 801ab76:	9801      	ldr	r0, [sp, #4]
 801ab78:	b011      	add	sp, #68	; 0x44
 801ab7a:	ecbd 8b02 	vpop	{d8}
 801ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab82:	4b8a      	ldr	r3, [pc, #552]	; (801adac <_dtoa_r+0x2d4>)
 801ab84:	9301      	str	r3, [sp, #4]
 801ab86:	3303      	adds	r3, #3
 801ab88:	e7f3      	b.n	801ab72 <_dtoa_r+0x9a>
 801ab8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ab8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ab92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab96:	d10c      	bne.n	801abb2 <_dtoa_r+0xda>
 801ab98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab9a:	2301      	movs	r3, #1
 801ab9c:	6013      	str	r3, [r2, #0]
 801ab9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	f000 84d7 	beq.w	801b554 <_dtoa_r+0xa7c>
 801aba6:	4b83      	ldr	r3, [pc, #524]	; (801adb4 <_dtoa_r+0x2dc>)
 801aba8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801abaa:	6013      	str	r3, [r2, #0]
 801abac:	3b01      	subs	r3, #1
 801abae:	9301      	str	r3, [sp, #4]
 801abb0:	e7e1      	b.n	801ab76 <_dtoa_r+0x9e>
 801abb2:	aa0e      	add	r2, sp, #56	; 0x38
 801abb4:	a90f      	add	r1, sp, #60	; 0x3c
 801abb6:	4630      	mov	r0, r6
 801abb8:	eeb0 0b48 	vmov.f64	d0, d8
 801abbc:	f001 f9d4 	bl	801bf68 <__d2b>
 801abc0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801abc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801abc6:	4605      	mov	r5, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d046      	beq.n	801ac5a <_dtoa_r+0x182>
 801abcc:	eeb0 7b48 	vmov.f64	d7, d8
 801abd0:	ee18 1a90 	vmov	r1, s17
 801abd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801abd8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801abdc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801abe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801abe4:	2000      	movs	r0, #0
 801abe6:	ee07 1a90 	vmov	s15, r1
 801abea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801abee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ad88 <_dtoa_r+0x2b0>
 801abf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801abf6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801ad90 <_dtoa_r+0x2b8>
 801abfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801abfe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801ad98 <_dtoa_r+0x2c0>
 801ac02:	ee07 3a90 	vmov	s15, r3
 801ac06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801ac0a:	eeb0 7b46 	vmov.f64	d7, d6
 801ac0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801ac12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801ac16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac1e:	ee16 ba90 	vmov	fp, s13
 801ac22:	9009      	str	r0, [sp, #36]	; 0x24
 801ac24:	d508      	bpl.n	801ac38 <_dtoa_r+0x160>
 801ac26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ac2a:	eeb4 6b47 	vcmp.f64	d6, d7
 801ac2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac32:	bf18      	it	ne
 801ac34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801ac38:	f1bb 0f16 	cmp.w	fp, #22
 801ac3c:	d82b      	bhi.n	801ac96 <_dtoa_r+0x1be>
 801ac3e:	495e      	ldr	r1, [pc, #376]	; (801adb8 <_dtoa_r+0x2e0>)
 801ac40:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801ac44:	ed91 7b00 	vldr	d7, [r1]
 801ac48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ac4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac50:	d501      	bpl.n	801ac56 <_dtoa_r+0x17e>
 801ac52:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac56:	2100      	movs	r1, #0
 801ac58:	e01e      	b.n	801ac98 <_dtoa_r+0x1c0>
 801ac5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac5c:	4413      	add	r3, r2
 801ac5e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801ac62:	2920      	cmp	r1, #32
 801ac64:	bfc1      	itttt	gt
 801ac66:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801ac6a:	408c      	lslgt	r4, r1
 801ac6c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801ac70:	fa28 f101 	lsrgt.w	r1, r8, r1
 801ac74:	bfd6      	itet	le
 801ac76:	f1c1 0120 	rsble	r1, r1, #32
 801ac7a:	4321      	orrgt	r1, r4
 801ac7c:	fa08 f101 	lslle.w	r1, r8, r1
 801ac80:	ee07 1a90 	vmov	s15, r1
 801ac84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ac88:	3b01      	subs	r3, #1
 801ac8a:	ee17 1a90 	vmov	r1, s15
 801ac8e:	2001      	movs	r0, #1
 801ac90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801ac94:	e7a7      	b.n	801abe6 <_dtoa_r+0x10e>
 801ac96:	2101      	movs	r1, #1
 801ac98:	1ad2      	subs	r2, r2, r3
 801ac9a:	1e53      	subs	r3, r2, #1
 801ac9c:	9305      	str	r3, [sp, #20]
 801ac9e:	bf45      	ittet	mi
 801aca0:	f1c2 0301 	rsbmi	r3, r2, #1
 801aca4:	9304      	strmi	r3, [sp, #16]
 801aca6:	2300      	movpl	r3, #0
 801aca8:	2300      	movmi	r3, #0
 801acaa:	bf4c      	ite	mi
 801acac:	9305      	strmi	r3, [sp, #20]
 801acae:	9304      	strpl	r3, [sp, #16]
 801acb0:	f1bb 0f00 	cmp.w	fp, #0
 801acb4:	910b      	str	r1, [sp, #44]	; 0x2c
 801acb6:	db18      	blt.n	801acea <_dtoa_r+0x212>
 801acb8:	9b05      	ldr	r3, [sp, #20]
 801acba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801acbe:	445b      	add	r3, fp
 801acc0:	9305      	str	r3, [sp, #20]
 801acc2:	2300      	movs	r3, #0
 801acc4:	9a06      	ldr	r2, [sp, #24]
 801acc6:	2a09      	cmp	r2, #9
 801acc8:	d848      	bhi.n	801ad5c <_dtoa_r+0x284>
 801acca:	2a05      	cmp	r2, #5
 801accc:	bfc4      	itt	gt
 801acce:	3a04      	subgt	r2, #4
 801acd0:	9206      	strgt	r2, [sp, #24]
 801acd2:	9a06      	ldr	r2, [sp, #24]
 801acd4:	f1a2 0202 	sub.w	r2, r2, #2
 801acd8:	bfcc      	ite	gt
 801acda:	2400      	movgt	r4, #0
 801acdc:	2401      	movle	r4, #1
 801acde:	2a03      	cmp	r2, #3
 801ace0:	d847      	bhi.n	801ad72 <_dtoa_r+0x29a>
 801ace2:	e8df f002 	tbb	[pc, r2]
 801ace6:	2d0b      	.short	0x2d0b
 801ace8:	392b      	.short	0x392b
 801acea:	9b04      	ldr	r3, [sp, #16]
 801acec:	2200      	movs	r2, #0
 801acee:	eba3 030b 	sub.w	r3, r3, fp
 801acf2:	9304      	str	r3, [sp, #16]
 801acf4:	920a      	str	r2, [sp, #40]	; 0x28
 801acf6:	f1cb 0300 	rsb	r3, fp, #0
 801acfa:	e7e3      	b.n	801acc4 <_dtoa_r+0x1ec>
 801acfc:	2200      	movs	r2, #0
 801acfe:	9207      	str	r2, [sp, #28]
 801ad00:	9a08      	ldr	r2, [sp, #32]
 801ad02:	2a00      	cmp	r2, #0
 801ad04:	dc38      	bgt.n	801ad78 <_dtoa_r+0x2a0>
 801ad06:	f04f 0a01 	mov.w	sl, #1
 801ad0a:	46d1      	mov	r9, sl
 801ad0c:	4652      	mov	r2, sl
 801ad0e:	f8cd a020 	str.w	sl, [sp, #32]
 801ad12:	69f7      	ldr	r7, [r6, #28]
 801ad14:	2100      	movs	r1, #0
 801ad16:	2004      	movs	r0, #4
 801ad18:	f100 0c14 	add.w	ip, r0, #20
 801ad1c:	4594      	cmp	ip, r2
 801ad1e:	d930      	bls.n	801ad82 <_dtoa_r+0x2aa>
 801ad20:	6079      	str	r1, [r7, #4]
 801ad22:	4630      	mov	r0, r6
 801ad24:	930d      	str	r3, [sp, #52]	; 0x34
 801ad26:	f000 fd43 	bl	801b7b0 <_Balloc>
 801ad2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad2c:	9001      	str	r0, [sp, #4]
 801ad2e:	4602      	mov	r2, r0
 801ad30:	2800      	cmp	r0, #0
 801ad32:	d145      	bne.n	801adc0 <_dtoa_r+0x2e8>
 801ad34:	4b21      	ldr	r3, [pc, #132]	; (801adbc <_dtoa_r+0x2e4>)
 801ad36:	f240 11af 	movw	r1, #431	; 0x1af
 801ad3a:	e6e5      	b.n	801ab08 <_dtoa_r+0x30>
 801ad3c:	2201      	movs	r2, #1
 801ad3e:	e7de      	b.n	801acfe <_dtoa_r+0x226>
 801ad40:	2200      	movs	r2, #0
 801ad42:	9207      	str	r2, [sp, #28]
 801ad44:	9a08      	ldr	r2, [sp, #32]
 801ad46:	eb0b 0a02 	add.w	sl, fp, r2
 801ad4a:	f10a 0901 	add.w	r9, sl, #1
 801ad4e:	464a      	mov	r2, r9
 801ad50:	2a01      	cmp	r2, #1
 801ad52:	bfb8      	it	lt
 801ad54:	2201      	movlt	r2, #1
 801ad56:	e7dc      	b.n	801ad12 <_dtoa_r+0x23a>
 801ad58:	2201      	movs	r2, #1
 801ad5a:	e7f2      	b.n	801ad42 <_dtoa_r+0x26a>
 801ad5c:	2401      	movs	r4, #1
 801ad5e:	2200      	movs	r2, #0
 801ad60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801ad64:	f04f 3aff 	mov.w	sl, #4294967295
 801ad68:	2100      	movs	r1, #0
 801ad6a:	46d1      	mov	r9, sl
 801ad6c:	2212      	movs	r2, #18
 801ad6e:	9108      	str	r1, [sp, #32]
 801ad70:	e7cf      	b.n	801ad12 <_dtoa_r+0x23a>
 801ad72:	2201      	movs	r2, #1
 801ad74:	9207      	str	r2, [sp, #28]
 801ad76:	e7f5      	b.n	801ad64 <_dtoa_r+0x28c>
 801ad78:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ad7c:	46d1      	mov	r9, sl
 801ad7e:	4652      	mov	r2, sl
 801ad80:	e7c7      	b.n	801ad12 <_dtoa_r+0x23a>
 801ad82:	3101      	adds	r1, #1
 801ad84:	0040      	lsls	r0, r0, #1
 801ad86:	e7c7      	b.n	801ad18 <_dtoa_r+0x240>
 801ad88:	636f4361 	.word	0x636f4361
 801ad8c:	3fd287a7 	.word	0x3fd287a7
 801ad90:	8b60c8b3 	.word	0x8b60c8b3
 801ad94:	3fc68a28 	.word	0x3fc68a28
 801ad98:	509f79fb 	.word	0x509f79fb
 801ad9c:	3fd34413 	.word	0x3fd34413
 801ada0:	0801e60e 	.word	0x0801e60e
 801ada4:	0801e625 	.word	0x0801e625
 801ada8:	7ff00000 	.word	0x7ff00000
 801adac:	0801e60a 	.word	0x0801e60a
 801adb0:	0801e601 	.word	0x0801e601
 801adb4:	0801e5d9 	.word	0x0801e5d9
 801adb8:	0801e710 	.word	0x0801e710
 801adbc:	0801e67d 	.word	0x0801e67d
 801adc0:	69f2      	ldr	r2, [r6, #28]
 801adc2:	9901      	ldr	r1, [sp, #4]
 801adc4:	6011      	str	r1, [r2, #0]
 801adc6:	f1b9 0f0e 	cmp.w	r9, #14
 801adca:	d86c      	bhi.n	801aea6 <_dtoa_r+0x3ce>
 801adcc:	2c00      	cmp	r4, #0
 801adce:	d06a      	beq.n	801aea6 <_dtoa_r+0x3ce>
 801add0:	f1bb 0f00 	cmp.w	fp, #0
 801add4:	f340 80a0 	ble.w	801af18 <_dtoa_r+0x440>
 801add8:	4ac1      	ldr	r2, [pc, #772]	; (801b0e0 <_dtoa_r+0x608>)
 801adda:	f00b 010f 	and.w	r1, fp, #15
 801adde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801ade2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ade6:	ed92 7b00 	vldr	d7, [r2]
 801adea:	ea4f 122b 	mov.w	r2, fp, asr #4
 801adee:	f000 8087 	beq.w	801af00 <_dtoa_r+0x428>
 801adf2:	49bc      	ldr	r1, [pc, #752]	; (801b0e4 <_dtoa_r+0x60c>)
 801adf4:	ed91 6b08 	vldr	d6, [r1, #32]
 801adf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801adfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ae00:	f002 020f 	and.w	r2, r2, #15
 801ae04:	2103      	movs	r1, #3
 801ae06:	48b7      	ldr	r0, [pc, #732]	; (801b0e4 <_dtoa_r+0x60c>)
 801ae08:	2a00      	cmp	r2, #0
 801ae0a:	d17b      	bne.n	801af04 <_dtoa_r+0x42c>
 801ae0c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ae10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ae14:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ae18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ae1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae1e:	2a00      	cmp	r2, #0
 801ae20:	f000 80a0 	beq.w	801af64 <_dtoa_r+0x48c>
 801ae24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ae28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae30:	f140 8098 	bpl.w	801af64 <_dtoa_r+0x48c>
 801ae34:	f1b9 0f00 	cmp.w	r9, #0
 801ae38:	f000 8094 	beq.w	801af64 <_dtoa_r+0x48c>
 801ae3c:	f1ba 0f00 	cmp.w	sl, #0
 801ae40:	dd2f      	ble.n	801aea2 <_dtoa_r+0x3ca>
 801ae42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ae46:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ae4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ae4e:	f10b 32ff 	add.w	r2, fp, #4294967295
 801ae52:	3101      	adds	r1, #1
 801ae54:	4654      	mov	r4, sl
 801ae56:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ae5a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ae5e:	ee07 1a90 	vmov	s15, r1
 801ae62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ae66:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ae6a:	ee15 7a90 	vmov	r7, s11
 801ae6e:	ec51 0b15 	vmov	r0, r1, d5
 801ae72:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801ae76:	2c00      	cmp	r4, #0
 801ae78:	d177      	bne.n	801af6a <_dtoa_r+0x492>
 801ae7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ae7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ae82:	ec41 0b17 	vmov	d7, r0, r1
 801ae86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae8e:	f300 826a 	bgt.w	801b366 <_dtoa_r+0x88e>
 801ae92:	eeb1 7b47 	vneg.f64	d7, d7
 801ae96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ae9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae9e:	f100 8260 	bmi.w	801b362 <_dtoa_r+0x88a>
 801aea2:	ed8d 8b02 	vstr	d8, [sp, #8]
 801aea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aea8:	2a00      	cmp	r2, #0
 801aeaa:	f2c0 811d 	blt.w	801b0e8 <_dtoa_r+0x610>
 801aeae:	f1bb 0f0e 	cmp.w	fp, #14
 801aeb2:	f300 8119 	bgt.w	801b0e8 <_dtoa_r+0x610>
 801aeb6:	4b8a      	ldr	r3, [pc, #552]	; (801b0e0 <_dtoa_r+0x608>)
 801aeb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801aebc:	ed93 6b00 	vldr	d6, [r3]
 801aec0:	9b08      	ldr	r3, [sp, #32]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	f280 80b7 	bge.w	801b036 <_dtoa_r+0x55e>
 801aec8:	f1b9 0f00 	cmp.w	r9, #0
 801aecc:	f300 80b3 	bgt.w	801b036 <_dtoa_r+0x55e>
 801aed0:	f040 8246 	bne.w	801b360 <_dtoa_r+0x888>
 801aed4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801aed8:	ee26 6b07 	vmul.f64	d6, d6, d7
 801aedc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aee0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aee8:	464c      	mov	r4, r9
 801aeea:	464f      	mov	r7, r9
 801aeec:	f280 821c 	bge.w	801b328 <_dtoa_r+0x850>
 801aef0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aef4:	2331      	movs	r3, #49	; 0x31
 801aef6:	f808 3b01 	strb.w	r3, [r8], #1
 801aefa:	f10b 0b01 	add.w	fp, fp, #1
 801aefe:	e218      	b.n	801b332 <_dtoa_r+0x85a>
 801af00:	2102      	movs	r1, #2
 801af02:	e780      	b.n	801ae06 <_dtoa_r+0x32e>
 801af04:	07d4      	lsls	r4, r2, #31
 801af06:	d504      	bpl.n	801af12 <_dtoa_r+0x43a>
 801af08:	ed90 6b00 	vldr	d6, [r0]
 801af0c:	3101      	adds	r1, #1
 801af0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801af12:	1052      	asrs	r2, r2, #1
 801af14:	3008      	adds	r0, #8
 801af16:	e777      	b.n	801ae08 <_dtoa_r+0x330>
 801af18:	d022      	beq.n	801af60 <_dtoa_r+0x488>
 801af1a:	f1cb 0200 	rsb	r2, fp, #0
 801af1e:	4970      	ldr	r1, [pc, #448]	; (801b0e0 <_dtoa_r+0x608>)
 801af20:	f002 000f 	and.w	r0, r2, #15
 801af24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801af28:	ed91 7b00 	vldr	d7, [r1]
 801af2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 801af30:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af34:	486b      	ldr	r0, [pc, #428]	; (801b0e4 <_dtoa_r+0x60c>)
 801af36:	1112      	asrs	r2, r2, #4
 801af38:	2400      	movs	r4, #0
 801af3a:	2102      	movs	r1, #2
 801af3c:	b92a      	cbnz	r2, 801af4a <_dtoa_r+0x472>
 801af3e:	2c00      	cmp	r4, #0
 801af40:	f43f af6a 	beq.w	801ae18 <_dtoa_r+0x340>
 801af44:	ed8d 7b02 	vstr	d7, [sp, #8]
 801af48:	e766      	b.n	801ae18 <_dtoa_r+0x340>
 801af4a:	07d7      	lsls	r7, r2, #31
 801af4c:	d505      	bpl.n	801af5a <_dtoa_r+0x482>
 801af4e:	ed90 6b00 	vldr	d6, [r0]
 801af52:	3101      	adds	r1, #1
 801af54:	2401      	movs	r4, #1
 801af56:	ee27 7b06 	vmul.f64	d7, d7, d6
 801af5a:	1052      	asrs	r2, r2, #1
 801af5c:	3008      	adds	r0, #8
 801af5e:	e7ed      	b.n	801af3c <_dtoa_r+0x464>
 801af60:	2102      	movs	r1, #2
 801af62:	e759      	b.n	801ae18 <_dtoa_r+0x340>
 801af64:	465a      	mov	r2, fp
 801af66:	464c      	mov	r4, r9
 801af68:	e775      	b.n	801ae56 <_dtoa_r+0x37e>
 801af6a:	ec41 0b17 	vmov	d7, r0, r1
 801af6e:	495c      	ldr	r1, [pc, #368]	; (801b0e0 <_dtoa_r+0x608>)
 801af70:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801af74:	ed11 4b02 	vldr	d4, [r1, #-8]
 801af78:	9901      	ldr	r1, [sp, #4]
 801af7a:	440c      	add	r4, r1
 801af7c:	9907      	ldr	r1, [sp, #28]
 801af7e:	b351      	cbz	r1, 801afd6 <_dtoa_r+0x4fe>
 801af80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801af84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801af88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801af8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801af90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801af94:	ee35 7b47 	vsub.f64	d7, d5, d7
 801af98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801af9c:	ee14 1a90 	vmov	r1, s9
 801afa0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801afa4:	3130      	adds	r1, #48	; 0x30
 801afa6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801afaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb2:	f808 1b01 	strb.w	r1, [r8], #1
 801afb6:	d439      	bmi.n	801b02c <_dtoa_r+0x554>
 801afb8:	ee32 5b46 	vsub.f64	d5, d2, d6
 801afbc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc4:	d472      	bmi.n	801b0ac <_dtoa_r+0x5d4>
 801afc6:	45a0      	cmp	r8, r4
 801afc8:	f43f af6b 	beq.w	801aea2 <_dtoa_r+0x3ca>
 801afcc:	ee27 7b03 	vmul.f64	d7, d7, d3
 801afd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801afd4:	e7e0      	b.n	801af98 <_dtoa_r+0x4c0>
 801afd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801afda:	ee27 7b04 	vmul.f64	d7, d7, d4
 801afde:	4620      	mov	r0, r4
 801afe0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801afe4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801afe8:	ee14 1a90 	vmov	r1, s9
 801afec:	3130      	adds	r1, #48	; 0x30
 801afee:	f808 1b01 	strb.w	r1, [r8], #1
 801aff2:	45a0      	cmp	r8, r4
 801aff4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801aff8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801affc:	d118      	bne.n	801b030 <_dtoa_r+0x558>
 801affe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801b002:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b006:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b00e:	dc4d      	bgt.n	801b0ac <_dtoa_r+0x5d4>
 801b010:	ee35 5b47 	vsub.f64	d5, d5, d7
 801b014:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b01c:	f57f af41 	bpl.w	801aea2 <_dtoa_r+0x3ca>
 801b020:	4680      	mov	r8, r0
 801b022:	3801      	subs	r0, #1
 801b024:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801b028:	2b30      	cmp	r3, #48	; 0x30
 801b02a:	d0f9      	beq.n	801b020 <_dtoa_r+0x548>
 801b02c:	4693      	mov	fp, r2
 801b02e:	e02a      	b.n	801b086 <_dtoa_r+0x5ae>
 801b030:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b034:	e7d6      	b.n	801afe4 <_dtoa_r+0x50c>
 801b036:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b03a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801b03e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b042:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b046:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b04a:	ee15 3a10 	vmov	r3, s10
 801b04e:	3330      	adds	r3, #48	; 0x30
 801b050:	f808 3b01 	strb.w	r3, [r8], #1
 801b054:	9b01      	ldr	r3, [sp, #4]
 801b056:	eba8 0303 	sub.w	r3, r8, r3
 801b05a:	4599      	cmp	r9, r3
 801b05c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b060:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b064:	d133      	bne.n	801b0ce <_dtoa_r+0x5f6>
 801b066:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b06a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b072:	dc1a      	bgt.n	801b0aa <_dtoa_r+0x5d2>
 801b074:	eeb4 7b46 	vcmp.f64	d7, d6
 801b078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b07c:	d103      	bne.n	801b086 <_dtoa_r+0x5ae>
 801b07e:	ee15 3a10 	vmov	r3, s10
 801b082:	07d9      	lsls	r1, r3, #31
 801b084:	d411      	bmi.n	801b0aa <_dtoa_r+0x5d2>
 801b086:	4629      	mov	r1, r5
 801b088:	4630      	mov	r0, r6
 801b08a:	f000 fbd1 	bl	801b830 <_Bfree>
 801b08e:	2300      	movs	r3, #0
 801b090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b092:	f888 3000 	strb.w	r3, [r8]
 801b096:	f10b 0301 	add.w	r3, fp, #1
 801b09a:	6013      	str	r3, [r2, #0]
 801b09c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f43f ad69 	beq.w	801ab76 <_dtoa_r+0x9e>
 801b0a4:	f8c3 8000 	str.w	r8, [r3]
 801b0a8:	e565      	b.n	801ab76 <_dtoa_r+0x9e>
 801b0aa:	465a      	mov	r2, fp
 801b0ac:	4643      	mov	r3, r8
 801b0ae:	4698      	mov	r8, r3
 801b0b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801b0b4:	2939      	cmp	r1, #57	; 0x39
 801b0b6:	d106      	bne.n	801b0c6 <_dtoa_r+0x5ee>
 801b0b8:	9901      	ldr	r1, [sp, #4]
 801b0ba:	4299      	cmp	r1, r3
 801b0bc:	d1f7      	bne.n	801b0ae <_dtoa_r+0x5d6>
 801b0be:	9801      	ldr	r0, [sp, #4]
 801b0c0:	2130      	movs	r1, #48	; 0x30
 801b0c2:	3201      	adds	r2, #1
 801b0c4:	7001      	strb	r1, [r0, #0]
 801b0c6:	7819      	ldrb	r1, [r3, #0]
 801b0c8:	3101      	adds	r1, #1
 801b0ca:	7019      	strb	r1, [r3, #0]
 801b0cc:	e7ae      	b.n	801b02c <_dtoa_r+0x554>
 801b0ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b0d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0da:	d1b2      	bne.n	801b042 <_dtoa_r+0x56a>
 801b0dc:	e7d3      	b.n	801b086 <_dtoa_r+0x5ae>
 801b0de:	bf00      	nop
 801b0e0:	0801e710 	.word	0x0801e710
 801b0e4:	0801e6e8 	.word	0x0801e6e8
 801b0e8:	9907      	ldr	r1, [sp, #28]
 801b0ea:	2900      	cmp	r1, #0
 801b0ec:	f000 80d0 	beq.w	801b290 <_dtoa_r+0x7b8>
 801b0f0:	9906      	ldr	r1, [sp, #24]
 801b0f2:	2901      	cmp	r1, #1
 801b0f4:	f300 80b4 	bgt.w	801b260 <_dtoa_r+0x788>
 801b0f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0fa:	2900      	cmp	r1, #0
 801b0fc:	f000 80ac 	beq.w	801b258 <_dtoa_r+0x780>
 801b100:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b104:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b108:	461c      	mov	r4, r3
 801b10a:	9309      	str	r3, [sp, #36]	; 0x24
 801b10c:	9b04      	ldr	r3, [sp, #16]
 801b10e:	4413      	add	r3, r2
 801b110:	9304      	str	r3, [sp, #16]
 801b112:	9b05      	ldr	r3, [sp, #20]
 801b114:	2101      	movs	r1, #1
 801b116:	4413      	add	r3, r2
 801b118:	4630      	mov	r0, r6
 801b11a:	9305      	str	r3, [sp, #20]
 801b11c:	f000 fc88 	bl	801ba30 <__i2b>
 801b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b122:	4607      	mov	r7, r0
 801b124:	f1b8 0f00 	cmp.w	r8, #0
 801b128:	d00d      	beq.n	801b146 <_dtoa_r+0x66e>
 801b12a:	9a05      	ldr	r2, [sp, #20]
 801b12c:	2a00      	cmp	r2, #0
 801b12e:	dd0a      	ble.n	801b146 <_dtoa_r+0x66e>
 801b130:	4542      	cmp	r2, r8
 801b132:	9904      	ldr	r1, [sp, #16]
 801b134:	bfa8      	it	ge
 801b136:	4642      	movge	r2, r8
 801b138:	1a89      	subs	r1, r1, r2
 801b13a:	9104      	str	r1, [sp, #16]
 801b13c:	9905      	ldr	r1, [sp, #20]
 801b13e:	eba8 0802 	sub.w	r8, r8, r2
 801b142:	1a8a      	subs	r2, r1, r2
 801b144:	9205      	str	r2, [sp, #20]
 801b146:	b303      	cbz	r3, 801b18a <_dtoa_r+0x6b2>
 801b148:	9a07      	ldr	r2, [sp, #28]
 801b14a:	2a00      	cmp	r2, #0
 801b14c:	f000 80a5 	beq.w	801b29a <_dtoa_r+0x7c2>
 801b150:	2c00      	cmp	r4, #0
 801b152:	dd13      	ble.n	801b17c <_dtoa_r+0x6a4>
 801b154:	4639      	mov	r1, r7
 801b156:	4622      	mov	r2, r4
 801b158:	4630      	mov	r0, r6
 801b15a:	930d      	str	r3, [sp, #52]	; 0x34
 801b15c:	f000 fd28 	bl	801bbb0 <__pow5mult>
 801b160:	462a      	mov	r2, r5
 801b162:	4601      	mov	r1, r0
 801b164:	4607      	mov	r7, r0
 801b166:	4630      	mov	r0, r6
 801b168:	f000 fc78 	bl	801ba5c <__multiply>
 801b16c:	4629      	mov	r1, r5
 801b16e:	9009      	str	r0, [sp, #36]	; 0x24
 801b170:	4630      	mov	r0, r6
 801b172:	f000 fb5d 	bl	801b830 <_Bfree>
 801b176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b178:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b17a:	4615      	mov	r5, r2
 801b17c:	1b1a      	subs	r2, r3, r4
 801b17e:	d004      	beq.n	801b18a <_dtoa_r+0x6b2>
 801b180:	4629      	mov	r1, r5
 801b182:	4630      	mov	r0, r6
 801b184:	f000 fd14 	bl	801bbb0 <__pow5mult>
 801b188:	4605      	mov	r5, r0
 801b18a:	2101      	movs	r1, #1
 801b18c:	4630      	mov	r0, r6
 801b18e:	f000 fc4f 	bl	801ba30 <__i2b>
 801b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b194:	2b00      	cmp	r3, #0
 801b196:	4604      	mov	r4, r0
 801b198:	f340 8081 	ble.w	801b29e <_dtoa_r+0x7c6>
 801b19c:	461a      	mov	r2, r3
 801b19e:	4601      	mov	r1, r0
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	f000 fd05 	bl	801bbb0 <__pow5mult>
 801b1a6:	9b06      	ldr	r3, [sp, #24]
 801b1a8:	2b01      	cmp	r3, #1
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	dd7a      	ble.n	801b2a4 <_dtoa_r+0x7cc>
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 801b1b2:	6922      	ldr	r2, [r4, #16]
 801b1b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b1b8:	6910      	ldr	r0, [r2, #16]
 801b1ba:	f000 fbeb 	bl	801b994 <__hi0bits>
 801b1be:	f1c0 0020 	rsb	r0, r0, #32
 801b1c2:	9b05      	ldr	r3, [sp, #20]
 801b1c4:	4418      	add	r0, r3
 801b1c6:	f010 001f 	ands.w	r0, r0, #31
 801b1ca:	f000 8093 	beq.w	801b2f4 <_dtoa_r+0x81c>
 801b1ce:	f1c0 0220 	rsb	r2, r0, #32
 801b1d2:	2a04      	cmp	r2, #4
 801b1d4:	f340 8085 	ble.w	801b2e2 <_dtoa_r+0x80a>
 801b1d8:	9b04      	ldr	r3, [sp, #16]
 801b1da:	f1c0 001c 	rsb	r0, r0, #28
 801b1de:	4403      	add	r3, r0
 801b1e0:	9304      	str	r3, [sp, #16]
 801b1e2:	9b05      	ldr	r3, [sp, #20]
 801b1e4:	4480      	add	r8, r0
 801b1e6:	4403      	add	r3, r0
 801b1e8:	9305      	str	r3, [sp, #20]
 801b1ea:	9b04      	ldr	r3, [sp, #16]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	dd05      	ble.n	801b1fc <_dtoa_r+0x724>
 801b1f0:	4629      	mov	r1, r5
 801b1f2:	461a      	mov	r2, r3
 801b1f4:	4630      	mov	r0, r6
 801b1f6:	f000 fd35 	bl	801bc64 <__lshift>
 801b1fa:	4605      	mov	r5, r0
 801b1fc:	9b05      	ldr	r3, [sp, #20]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	dd05      	ble.n	801b20e <_dtoa_r+0x736>
 801b202:	4621      	mov	r1, r4
 801b204:	461a      	mov	r2, r3
 801b206:	4630      	mov	r0, r6
 801b208:	f000 fd2c 	bl	801bc64 <__lshift>
 801b20c:	4604      	mov	r4, r0
 801b20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b210:	2b00      	cmp	r3, #0
 801b212:	d071      	beq.n	801b2f8 <_dtoa_r+0x820>
 801b214:	4621      	mov	r1, r4
 801b216:	4628      	mov	r0, r5
 801b218:	f000 fd90 	bl	801bd3c <__mcmp>
 801b21c:	2800      	cmp	r0, #0
 801b21e:	da6b      	bge.n	801b2f8 <_dtoa_r+0x820>
 801b220:	2300      	movs	r3, #0
 801b222:	4629      	mov	r1, r5
 801b224:	220a      	movs	r2, #10
 801b226:	4630      	mov	r0, r6
 801b228:	f000 fb24 	bl	801b874 <__multadd>
 801b22c:	9b07      	ldr	r3, [sp, #28]
 801b22e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b232:	4605      	mov	r5, r0
 801b234:	2b00      	cmp	r3, #0
 801b236:	f000 8197 	beq.w	801b568 <_dtoa_r+0xa90>
 801b23a:	4639      	mov	r1, r7
 801b23c:	2300      	movs	r3, #0
 801b23e:	220a      	movs	r2, #10
 801b240:	4630      	mov	r0, r6
 801b242:	f000 fb17 	bl	801b874 <__multadd>
 801b246:	f1ba 0f00 	cmp.w	sl, #0
 801b24a:	4607      	mov	r7, r0
 801b24c:	f300 8093 	bgt.w	801b376 <_dtoa_r+0x89e>
 801b250:	9b06      	ldr	r3, [sp, #24]
 801b252:	2b02      	cmp	r3, #2
 801b254:	dc57      	bgt.n	801b306 <_dtoa_r+0x82e>
 801b256:	e08e      	b.n	801b376 <_dtoa_r+0x89e>
 801b258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b25a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b25e:	e751      	b.n	801b104 <_dtoa_r+0x62c>
 801b260:	f109 34ff 	add.w	r4, r9, #4294967295
 801b264:	42a3      	cmp	r3, r4
 801b266:	bfbf      	itttt	lt
 801b268:	1ae2      	sublt	r2, r4, r3
 801b26a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b26c:	189b      	addlt	r3, r3, r2
 801b26e:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b270:	bfae      	itee	ge
 801b272:	1b1c      	subge	r4, r3, r4
 801b274:	4623      	movlt	r3, r4
 801b276:	2400      	movlt	r4, #0
 801b278:	f1b9 0f00 	cmp.w	r9, #0
 801b27c:	bfb5      	itete	lt
 801b27e:	9a04      	ldrlt	r2, [sp, #16]
 801b280:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801b284:	eba2 0809 	sublt.w	r8, r2, r9
 801b288:	464a      	movge	r2, r9
 801b28a:	bfb8      	it	lt
 801b28c:	2200      	movlt	r2, #0
 801b28e:	e73c      	b.n	801b10a <_dtoa_r+0x632>
 801b290:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b294:	9f07      	ldr	r7, [sp, #28]
 801b296:	461c      	mov	r4, r3
 801b298:	e744      	b.n	801b124 <_dtoa_r+0x64c>
 801b29a:	461a      	mov	r2, r3
 801b29c:	e770      	b.n	801b180 <_dtoa_r+0x6a8>
 801b29e:	9b06      	ldr	r3, [sp, #24]
 801b2a0:	2b01      	cmp	r3, #1
 801b2a2:	dc18      	bgt.n	801b2d6 <_dtoa_r+0x7fe>
 801b2a4:	9b02      	ldr	r3, [sp, #8]
 801b2a6:	b9b3      	cbnz	r3, 801b2d6 <_dtoa_r+0x7fe>
 801b2a8:	9b03      	ldr	r3, [sp, #12]
 801b2aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b2ae:	b9a2      	cbnz	r2, 801b2da <_dtoa_r+0x802>
 801b2b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b2b4:	0d12      	lsrs	r2, r2, #20
 801b2b6:	0512      	lsls	r2, r2, #20
 801b2b8:	b18a      	cbz	r2, 801b2de <_dtoa_r+0x806>
 801b2ba:	9b04      	ldr	r3, [sp, #16]
 801b2bc:	3301      	adds	r3, #1
 801b2be:	9304      	str	r3, [sp, #16]
 801b2c0:	9b05      	ldr	r3, [sp, #20]
 801b2c2:	3301      	adds	r3, #1
 801b2c4:	9305      	str	r3, [sp, #20]
 801b2c6:	2301      	movs	r3, #1
 801b2c8:	9309      	str	r3, [sp, #36]	; 0x24
 801b2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	f47f af70 	bne.w	801b1b2 <_dtoa_r+0x6da>
 801b2d2:	2001      	movs	r0, #1
 801b2d4:	e775      	b.n	801b1c2 <_dtoa_r+0x6ea>
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	e7f6      	b.n	801b2c8 <_dtoa_r+0x7f0>
 801b2da:	9b02      	ldr	r3, [sp, #8]
 801b2dc:	e7f4      	b.n	801b2c8 <_dtoa_r+0x7f0>
 801b2de:	9209      	str	r2, [sp, #36]	; 0x24
 801b2e0:	e7f3      	b.n	801b2ca <_dtoa_r+0x7f2>
 801b2e2:	d082      	beq.n	801b1ea <_dtoa_r+0x712>
 801b2e4:	9b04      	ldr	r3, [sp, #16]
 801b2e6:	321c      	adds	r2, #28
 801b2e8:	4413      	add	r3, r2
 801b2ea:	9304      	str	r3, [sp, #16]
 801b2ec:	9b05      	ldr	r3, [sp, #20]
 801b2ee:	4490      	add	r8, r2
 801b2f0:	4413      	add	r3, r2
 801b2f2:	e779      	b.n	801b1e8 <_dtoa_r+0x710>
 801b2f4:	4602      	mov	r2, r0
 801b2f6:	e7f5      	b.n	801b2e4 <_dtoa_r+0x80c>
 801b2f8:	f1b9 0f00 	cmp.w	r9, #0
 801b2fc:	dc36      	bgt.n	801b36c <_dtoa_r+0x894>
 801b2fe:	9b06      	ldr	r3, [sp, #24]
 801b300:	2b02      	cmp	r3, #2
 801b302:	dd33      	ble.n	801b36c <_dtoa_r+0x894>
 801b304:	46ca      	mov	sl, r9
 801b306:	f1ba 0f00 	cmp.w	sl, #0
 801b30a:	d10d      	bne.n	801b328 <_dtoa_r+0x850>
 801b30c:	4621      	mov	r1, r4
 801b30e:	4653      	mov	r3, sl
 801b310:	2205      	movs	r2, #5
 801b312:	4630      	mov	r0, r6
 801b314:	f000 faae 	bl	801b874 <__multadd>
 801b318:	4601      	mov	r1, r0
 801b31a:	4604      	mov	r4, r0
 801b31c:	4628      	mov	r0, r5
 801b31e:	f000 fd0d 	bl	801bd3c <__mcmp>
 801b322:	2800      	cmp	r0, #0
 801b324:	f73f ade4 	bgt.w	801aef0 <_dtoa_r+0x418>
 801b328:	9b08      	ldr	r3, [sp, #32]
 801b32a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b32e:	ea6f 0b03 	mvn.w	fp, r3
 801b332:	f04f 0900 	mov.w	r9, #0
 801b336:	4621      	mov	r1, r4
 801b338:	4630      	mov	r0, r6
 801b33a:	f000 fa79 	bl	801b830 <_Bfree>
 801b33e:	2f00      	cmp	r7, #0
 801b340:	f43f aea1 	beq.w	801b086 <_dtoa_r+0x5ae>
 801b344:	f1b9 0f00 	cmp.w	r9, #0
 801b348:	d005      	beq.n	801b356 <_dtoa_r+0x87e>
 801b34a:	45b9      	cmp	r9, r7
 801b34c:	d003      	beq.n	801b356 <_dtoa_r+0x87e>
 801b34e:	4649      	mov	r1, r9
 801b350:	4630      	mov	r0, r6
 801b352:	f000 fa6d 	bl	801b830 <_Bfree>
 801b356:	4639      	mov	r1, r7
 801b358:	4630      	mov	r0, r6
 801b35a:	f000 fa69 	bl	801b830 <_Bfree>
 801b35e:	e692      	b.n	801b086 <_dtoa_r+0x5ae>
 801b360:	2400      	movs	r4, #0
 801b362:	4627      	mov	r7, r4
 801b364:	e7e0      	b.n	801b328 <_dtoa_r+0x850>
 801b366:	4693      	mov	fp, r2
 801b368:	4627      	mov	r7, r4
 801b36a:	e5c1      	b.n	801aef0 <_dtoa_r+0x418>
 801b36c:	9b07      	ldr	r3, [sp, #28]
 801b36e:	46ca      	mov	sl, r9
 801b370:	2b00      	cmp	r3, #0
 801b372:	f000 8100 	beq.w	801b576 <_dtoa_r+0xa9e>
 801b376:	f1b8 0f00 	cmp.w	r8, #0
 801b37a:	dd05      	ble.n	801b388 <_dtoa_r+0x8b0>
 801b37c:	4639      	mov	r1, r7
 801b37e:	4642      	mov	r2, r8
 801b380:	4630      	mov	r0, r6
 801b382:	f000 fc6f 	bl	801bc64 <__lshift>
 801b386:	4607      	mov	r7, r0
 801b388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d05d      	beq.n	801b44a <_dtoa_r+0x972>
 801b38e:	6879      	ldr	r1, [r7, #4]
 801b390:	4630      	mov	r0, r6
 801b392:	f000 fa0d 	bl	801b7b0 <_Balloc>
 801b396:	4680      	mov	r8, r0
 801b398:	b928      	cbnz	r0, 801b3a6 <_dtoa_r+0x8ce>
 801b39a:	4b82      	ldr	r3, [pc, #520]	; (801b5a4 <_dtoa_r+0xacc>)
 801b39c:	4602      	mov	r2, r0
 801b39e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801b3a2:	f7ff bbb1 	b.w	801ab08 <_dtoa_r+0x30>
 801b3a6:	693a      	ldr	r2, [r7, #16]
 801b3a8:	3202      	adds	r2, #2
 801b3aa:	0092      	lsls	r2, r2, #2
 801b3ac:	f107 010c 	add.w	r1, r7, #12
 801b3b0:	300c      	adds	r0, #12
 801b3b2:	f7ff faf4 	bl	801a99e <memcpy>
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	4641      	mov	r1, r8
 801b3ba:	4630      	mov	r0, r6
 801b3bc:	f000 fc52 	bl	801bc64 <__lshift>
 801b3c0:	9b01      	ldr	r3, [sp, #4]
 801b3c2:	3301      	adds	r3, #1
 801b3c4:	9304      	str	r3, [sp, #16]
 801b3c6:	9b01      	ldr	r3, [sp, #4]
 801b3c8:	4453      	add	r3, sl
 801b3ca:	9308      	str	r3, [sp, #32]
 801b3cc:	9b02      	ldr	r3, [sp, #8]
 801b3ce:	f003 0301 	and.w	r3, r3, #1
 801b3d2:	46b9      	mov	r9, r7
 801b3d4:	9307      	str	r3, [sp, #28]
 801b3d6:	4607      	mov	r7, r0
 801b3d8:	9b04      	ldr	r3, [sp, #16]
 801b3da:	4621      	mov	r1, r4
 801b3dc:	3b01      	subs	r3, #1
 801b3de:	4628      	mov	r0, r5
 801b3e0:	9302      	str	r3, [sp, #8]
 801b3e2:	f7ff faf1 	bl	801a9c8 <quorem>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	3330      	adds	r3, #48	; 0x30
 801b3ea:	9005      	str	r0, [sp, #20]
 801b3ec:	4649      	mov	r1, r9
 801b3ee:	4628      	mov	r0, r5
 801b3f0:	9309      	str	r3, [sp, #36]	; 0x24
 801b3f2:	f000 fca3 	bl	801bd3c <__mcmp>
 801b3f6:	463a      	mov	r2, r7
 801b3f8:	4682      	mov	sl, r0
 801b3fa:	4621      	mov	r1, r4
 801b3fc:	4630      	mov	r0, r6
 801b3fe:	f000 fcb9 	bl	801bd74 <__mdiff>
 801b402:	68c2      	ldr	r2, [r0, #12]
 801b404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b406:	4680      	mov	r8, r0
 801b408:	bb0a      	cbnz	r2, 801b44e <_dtoa_r+0x976>
 801b40a:	4601      	mov	r1, r0
 801b40c:	4628      	mov	r0, r5
 801b40e:	f000 fc95 	bl	801bd3c <__mcmp>
 801b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b414:	4602      	mov	r2, r0
 801b416:	4641      	mov	r1, r8
 801b418:	4630      	mov	r0, r6
 801b41a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801b41e:	f000 fa07 	bl	801b830 <_Bfree>
 801b422:	9b06      	ldr	r3, [sp, #24]
 801b424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b426:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b42a:	ea43 0102 	orr.w	r1, r3, r2
 801b42e:	9b07      	ldr	r3, [sp, #28]
 801b430:	4319      	orrs	r1, r3
 801b432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b434:	d10d      	bne.n	801b452 <_dtoa_r+0x97a>
 801b436:	2b39      	cmp	r3, #57	; 0x39
 801b438:	d029      	beq.n	801b48e <_dtoa_r+0x9b6>
 801b43a:	f1ba 0f00 	cmp.w	sl, #0
 801b43e:	dd01      	ble.n	801b444 <_dtoa_r+0x96c>
 801b440:	9b05      	ldr	r3, [sp, #20]
 801b442:	3331      	adds	r3, #49	; 0x31
 801b444:	9a02      	ldr	r2, [sp, #8]
 801b446:	7013      	strb	r3, [r2, #0]
 801b448:	e775      	b.n	801b336 <_dtoa_r+0x85e>
 801b44a:	4638      	mov	r0, r7
 801b44c:	e7b8      	b.n	801b3c0 <_dtoa_r+0x8e8>
 801b44e:	2201      	movs	r2, #1
 801b450:	e7e1      	b.n	801b416 <_dtoa_r+0x93e>
 801b452:	f1ba 0f00 	cmp.w	sl, #0
 801b456:	db06      	blt.n	801b466 <_dtoa_r+0x98e>
 801b458:	9906      	ldr	r1, [sp, #24]
 801b45a:	ea41 0a0a 	orr.w	sl, r1, sl
 801b45e:	9907      	ldr	r1, [sp, #28]
 801b460:	ea5a 0a01 	orrs.w	sl, sl, r1
 801b464:	d120      	bne.n	801b4a8 <_dtoa_r+0x9d0>
 801b466:	2a00      	cmp	r2, #0
 801b468:	ddec      	ble.n	801b444 <_dtoa_r+0x96c>
 801b46a:	4629      	mov	r1, r5
 801b46c:	2201      	movs	r2, #1
 801b46e:	4630      	mov	r0, r6
 801b470:	9304      	str	r3, [sp, #16]
 801b472:	f000 fbf7 	bl	801bc64 <__lshift>
 801b476:	4621      	mov	r1, r4
 801b478:	4605      	mov	r5, r0
 801b47a:	f000 fc5f 	bl	801bd3c <__mcmp>
 801b47e:	2800      	cmp	r0, #0
 801b480:	9b04      	ldr	r3, [sp, #16]
 801b482:	dc02      	bgt.n	801b48a <_dtoa_r+0x9b2>
 801b484:	d1de      	bne.n	801b444 <_dtoa_r+0x96c>
 801b486:	07da      	lsls	r2, r3, #31
 801b488:	d5dc      	bpl.n	801b444 <_dtoa_r+0x96c>
 801b48a:	2b39      	cmp	r3, #57	; 0x39
 801b48c:	d1d8      	bne.n	801b440 <_dtoa_r+0x968>
 801b48e:	9a02      	ldr	r2, [sp, #8]
 801b490:	2339      	movs	r3, #57	; 0x39
 801b492:	7013      	strb	r3, [r2, #0]
 801b494:	4643      	mov	r3, r8
 801b496:	4698      	mov	r8, r3
 801b498:	3b01      	subs	r3, #1
 801b49a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801b49e:	2a39      	cmp	r2, #57	; 0x39
 801b4a0:	d051      	beq.n	801b546 <_dtoa_r+0xa6e>
 801b4a2:	3201      	adds	r2, #1
 801b4a4:	701a      	strb	r2, [r3, #0]
 801b4a6:	e746      	b.n	801b336 <_dtoa_r+0x85e>
 801b4a8:	2a00      	cmp	r2, #0
 801b4aa:	dd03      	ble.n	801b4b4 <_dtoa_r+0x9dc>
 801b4ac:	2b39      	cmp	r3, #57	; 0x39
 801b4ae:	d0ee      	beq.n	801b48e <_dtoa_r+0x9b6>
 801b4b0:	3301      	adds	r3, #1
 801b4b2:	e7c7      	b.n	801b444 <_dtoa_r+0x96c>
 801b4b4:	9a04      	ldr	r2, [sp, #16]
 801b4b6:	9908      	ldr	r1, [sp, #32]
 801b4b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b4bc:	428a      	cmp	r2, r1
 801b4be:	d02b      	beq.n	801b518 <_dtoa_r+0xa40>
 801b4c0:	4629      	mov	r1, r5
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	220a      	movs	r2, #10
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	f000 f9d4 	bl	801b874 <__multadd>
 801b4cc:	45b9      	cmp	r9, r7
 801b4ce:	4605      	mov	r5, r0
 801b4d0:	f04f 0300 	mov.w	r3, #0
 801b4d4:	f04f 020a 	mov.w	r2, #10
 801b4d8:	4649      	mov	r1, r9
 801b4da:	4630      	mov	r0, r6
 801b4dc:	d107      	bne.n	801b4ee <_dtoa_r+0xa16>
 801b4de:	f000 f9c9 	bl	801b874 <__multadd>
 801b4e2:	4681      	mov	r9, r0
 801b4e4:	4607      	mov	r7, r0
 801b4e6:	9b04      	ldr	r3, [sp, #16]
 801b4e8:	3301      	adds	r3, #1
 801b4ea:	9304      	str	r3, [sp, #16]
 801b4ec:	e774      	b.n	801b3d8 <_dtoa_r+0x900>
 801b4ee:	f000 f9c1 	bl	801b874 <__multadd>
 801b4f2:	4639      	mov	r1, r7
 801b4f4:	4681      	mov	r9, r0
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	220a      	movs	r2, #10
 801b4fa:	4630      	mov	r0, r6
 801b4fc:	f000 f9ba 	bl	801b874 <__multadd>
 801b500:	4607      	mov	r7, r0
 801b502:	e7f0      	b.n	801b4e6 <_dtoa_r+0xa0e>
 801b504:	f1ba 0f00 	cmp.w	sl, #0
 801b508:	9a01      	ldr	r2, [sp, #4]
 801b50a:	bfcc      	ite	gt
 801b50c:	46d0      	movgt	r8, sl
 801b50e:	f04f 0801 	movle.w	r8, #1
 801b512:	4490      	add	r8, r2
 801b514:	f04f 0900 	mov.w	r9, #0
 801b518:	4629      	mov	r1, r5
 801b51a:	2201      	movs	r2, #1
 801b51c:	4630      	mov	r0, r6
 801b51e:	9302      	str	r3, [sp, #8]
 801b520:	f000 fba0 	bl	801bc64 <__lshift>
 801b524:	4621      	mov	r1, r4
 801b526:	4605      	mov	r5, r0
 801b528:	f000 fc08 	bl	801bd3c <__mcmp>
 801b52c:	2800      	cmp	r0, #0
 801b52e:	dcb1      	bgt.n	801b494 <_dtoa_r+0x9bc>
 801b530:	d102      	bne.n	801b538 <_dtoa_r+0xa60>
 801b532:	9b02      	ldr	r3, [sp, #8]
 801b534:	07db      	lsls	r3, r3, #31
 801b536:	d4ad      	bmi.n	801b494 <_dtoa_r+0x9bc>
 801b538:	4643      	mov	r3, r8
 801b53a:	4698      	mov	r8, r3
 801b53c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b540:	2a30      	cmp	r2, #48	; 0x30
 801b542:	d0fa      	beq.n	801b53a <_dtoa_r+0xa62>
 801b544:	e6f7      	b.n	801b336 <_dtoa_r+0x85e>
 801b546:	9a01      	ldr	r2, [sp, #4]
 801b548:	429a      	cmp	r2, r3
 801b54a:	d1a4      	bne.n	801b496 <_dtoa_r+0x9be>
 801b54c:	f10b 0b01 	add.w	fp, fp, #1
 801b550:	2331      	movs	r3, #49	; 0x31
 801b552:	e778      	b.n	801b446 <_dtoa_r+0x96e>
 801b554:	4b14      	ldr	r3, [pc, #80]	; (801b5a8 <_dtoa_r+0xad0>)
 801b556:	f7ff bb2a 	b.w	801abae <_dtoa_r+0xd6>
 801b55a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	f47f ab05 	bne.w	801ab6c <_dtoa_r+0x94>
 801b562:	4b12      	ldr	r3, [pc, #72]	; (801b5ac <_dtoa_r+0xad4>)
 801b564:	f7ff bb23 	b.w	801abae <_dtoa_r+0xd6>
 801b568:	f1ba 0f00 	cmp.w	sl, #0
 801b56c:	dc03      	bgt.n	801b576 <_dtoa_r+0xa9e>
 801b56e:	9b06      	ldr	r3, [sp, #24]
 801b570:	2b02      	cmp	r3, #2
 801b572:	f73f aec8 	bgt.w	801b306 <_dtoa_r+0x82e>
 801b576:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b57a:	4621      	mov	r1, r4
 801b57c:	4628      	mov	r0, r5
 801b57e:	f7ff fa23 	bl	801a9c8 <quorem>
 801b582:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b586:	f808 3b01 	strb.w	r3, [r8], #1
 801b58a:	9a01      	ldr	r2, [sp, #4]
 801b58c:	eba8 0202 	sub.w	r2, r8, r2
 801b590:	4592      	cmp	sl, r2
 801b592:	ddb7      	ble.n	801b504 <_dtoa_r+0xa2c>
 801b594:	4629      	mov	r1, r5
 801b596:	2300      	movs	r3, #0
 801b598:	220a      	movs	r2, #10
 801b59a:	4630      	mov	r0, r6
 801b59c:	f000 f96a 	bl	801b874 <__multadd>
 801b5a0:	4605      	mov	r5, r0
 801b5a2:	e7ea      	b.n	801b57a <_dtoa_r+0xaa2>
 801b5a4:	0801e67d 	.word	0x0801e67d
 801b5a8:	0801e5d8 	.word	0x0801e5d8
 801b5ac:	0801e601 	.word	0x0801e601

0801b5b0 <_free_r>:
 801b5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5b2:	2900      	cmp	r1, #0
 801b5b4:	d044      	beq.n	801b640 <_free_r+0x90>
 801b5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5ba:	9001      	str	r0, [sp, #4]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	f1a1 0404 	sub.w	r4, r1, #4
 801b5c2:	bfb8      	it	lt
 801b5c4:	18e4      	addlt	r4, r4, r3
 801b5c6:	f000 f8e7 	bl	801b798 <__malloc_lock>
 801b5ca:	4a1e      	ldr	r2, [pc, #120]	; (801b644 <_free_r+0x94>)
 801b5cc:	9801      	ldr	r0, [sp, #4]
 801b5ce:	6813      	ldr	r3, [r2, #0]
 801b5d0:	b933      	cbnz	r3, 801b5e0 <_free_r+0x30>
 801b5d2:	6063      	str	r3, [r4, #4]
 801b5d4:	6014      	str	r4, [r2, #0]
 801b5d6:	b003      	add	sp, #12
 801b5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5dc:	f000 b8e2 	b.w	801b7a4 <__malloc_unlock>
 801b5e0:	42a3      	cmp	r3, r4
 801b5e2:	d908      	bls.n	801b5f6 <_free_r+0x46>
 801b5e4:	6825      	ldr	r5, [r4, #0]
 801b5e6:	1961      	adds	r1, r4, r5
 801b5e8:	428b      	cmp	r3, r1
 801b5ea:	bf01      	itttt	eq
 801b5ec:	6819      	ldreq	r1, [r3, #0]
 801b5ee:	685b      	ldreq	r3, [r3, #4]
 801b5f0:	1949      	addeq	r1, r1, r5
 801b5f2:	6021      	streq	r1, [r4, #0]
 801b5f4:	e7ed      	b.n	801b5d2 <_free_r+0x22>
 801b5f6:	461a      	mov	r2, r3
 801b5f8:	685b      	ldr	r3, [r3, #4]
 801b5fa:	b10b      	cbz	r3, 801b600 <_free_r+0x50>
 801b5fc:	42a3      	cmp	r3, r4
 801b5fe:	d9fa      	bls.n	801b5f6 <_free_r+0x46>
 801b600:	6811      	ldr	r1, [r2, #0]
 801b602:	1855      	adds	r5, r2, r1
 801b604:	42a5      	cmp	r5, r4
 801b606:	d10b      	bne.n	801b620 <_free_r+0x70>
 801b608:	6824      	ldr	r4, [r4, #0]
 801b60a:	4421      	add	r1, r4
 801b60c:	1854      	adds	r4, r2, r1
 801b60e:	42a3      	cmp	r3, r4
 801b610:	6011      	str	r1, [r2, #0]
 801b612:	d1e0      	bne.n	801b5d6 <_free_r+0x26>
 801b614:	681c      	ldr	r4, [r3, #0]
 801b616:	685b      	ldr	r3, [r3, #4]
 801b618:	6053      	str	r3, [r2, #4]
 801b61a:	440c      	add	r4, r1
 801b61c:	6014      	str	r4, [r2, #0]
 801b61e:	e7da      	b.n	801b5d6 <_free_r+0x26>
 801b620:	d902      	bls.n	801b628 <_free_r+0x78>
 801b622:	230c      	movs	r3, #12
 801b624:	6003      	str	r3, [r0, #0]
 801b626:	e7d6      	b.n	801b5d6 <_free_r+0x26>
 801b628:	6825      	ldr	r5, [r4, #0]
 801b62a:	1961      	adds	r1, r4, r5
 801b62c:	428b      	cmp	r3, r1
 801b62e:	bf04      	itt	eq
 801b630:	6819      	ldreq	r1, [r3, #0]
 801b632:	685b      	ldreq	r3, [r3, #4]
 801b634:	6063      	str	r3, [r4, #4]
 801b636:	bf04      	itt	eq
 801b638:	1949      	addeq	r1, r1, r5
 801b63a:	6021      	streq	r1, [r4, #0]
 801b63c:	6054      	str	r4, [r2, #4]
 801b63e:	e7ca      	b.n	801b5d6 <_free_r+0x26>
 801b640:	b003      	add	sp, #12
 801b642:	bd30      	pop	{r4, r5, pc}
 801b644:	2400363c 	.word	0x2400363c

0801b648 <malloc>:
 801b648:	4b02      	ldr	r3, [pc, #8]	; (801b654 <malloc+0xc>)
 801b64a:	4601      	mov	r1, r0
 801b64c:	6818      	ldr	r0, [r3, #0]
 801b64e:	f000 b823 	b.w	801b698 <_malloc_r>
 801b652:	bf00      	nop
 801b654:	24000158 	.word	0x24000158

0801b658 <sbrk_aligned>:
 801b658:	b570      	push	{r4, r5, r6, lr}
 801b65a:	4e0e      	ldr	r6, [pc, #56]	; (801b694 <sbrk_aligned+0x3c>)
 801b65c:	460c      	mov	r4, r1
 801b65e:	6831      	ldr	r1, [r6, #0]
 801b660:	4605      	mov	r5, r0
 801b662:	b911      	cbnz	r1, 801b66a <sbrk_aligned+0x12>
 801b664:	f001 fdd6 	bl	801d214 <_sbrk_r>
 801b668:	6030      	str	r0, [r6, #0]
 801b66a:	4621      	mov	r1, r4
 801b66c:	4628      	mov	r0, r5
 801b66e:	f001 fdd1 	bl	801d214 <_sbrk_r>
 801b672:	1c43      	adds	r3, r0, #1
 801b674:	d00a      	beq.n	801b68c <sbrk_aligned+0x34>
 801b676:	1cc4      	adds	r4, r0, #3
 801b678:	f024 0403 	bic.w	r4, r4, #3
 801b67c:	42a0      	cmp	r0, r4
 801b67e:	d007      	beq.n	801b690 <sbrk_aligned+0x38>
 801b680:	1a21      	subs	r1, r4, r0
 801b682:	4628      	mov	r0, r5
 801b684:	f001 fdc6 	bl	801d214 <_sbrk_r>
 801b688:	3001      	adds	r0, #1
 801b68a:	d101      	bne.n	801b690 <sbrk_aligned+0x38>
 801b68c:	f04f 34ff 	mov.w	r4, #4294967295
 801b690:	4620      	mov	r0, r4
 801b692:	bd70      	pop	{r4, r5, r6, pc}
 801b694:	24003640 	.word	0x24003640

0801b698 <_malloc_r>:
 801b698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b69c:	1ccd      	adds	r5, r1, #3
 801b69e:	f025 0503 	bic.w	r5, r5, #3
 801b6a2:	3508      	adds	r5, #8
 801b6a4:	2d0c      	cmp	r5, #12
 801b6a6:	bf38      	it	cc
 801b6a8:	250c      	movcc	r5, #12
 801b6aa:	2d00      	cmp	r5, #0
 801b6ac:	4607      	mov	r7, r0
 801b6ae:	db01      	blt.n	801b6b4 <_malloc_r+0x1c>
 801b6b0:	42a9      	cmp	r1, r5
 801b6b2:	d905      	bls.n	801b6c0 <_malloc_r+0x28>
 801b6b4:	230c      	movs	r3, #12
 801b6b6:	603b      	str	r3, [r7, #0]
 801b6b8:	2600      	movs	r6, #0
 801b6ba:	4630      	mov	r0, r6
 801b6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b794 <_malloc_r+0xfc>
 801b6c4:	f000 f868 	bl	801b798 <__malloc_lock>
 801b6c8:	f8d8 3000 	ldr.w	r3, [r8]
 801b6cc:	461c      	mov	r4, r3
 801b6ce:	bb5c      	cbnz	r4, 801b728 <_malloc_r+0x90>
 801b6d0:	4629      	mov	r1, r5
 801b6d2:	4638      	mov	r0, r7
 801b6d4:	f7ff ffc0 	bl	801b658 <sbrk_aligned>
 801b6d8:	1c43      	adds	r3, r0, #1
 801b6da:	4604      	mov	r4, r0
 801b6dc:	d155      	bne.n	801b78a <_malloc_r+0xf2>
 801b6de:	f8d8 4000 	ldr.w	r4, [r8]
 801b6e2:	4626      	mov	r6, r4
 801b6e4:	2e00      	cmp	r6, #0
 801b6e6:	d145      	bne.n	801b774 <_malloc_r+0xdc>
 801b6e8:	2c00      	cmp	r4, #0
 801b6ea:	d048      	beq.n	801b77e <_malloc_r+0xe6>
 801b6ec:	6823      	ldr	r3, [r4, #0]
 801b6ee:	4631      	mov	r1, r6
 801b6f0:	4638      	mov	r0, r7
 801b6f2:	eb04 0903 	add.w	r9, r4, r3
 801b6f6:	f001 fd8d 	bl	801d214 <_sbrk_r>
 801b6fa:	4581      	cmp	r9, r0
 801b6fc:	d13f      	bne.n	801b77e <_malloc_r+0xe6>
 801b6fe:	6821      	ldr	r1, [r4, #0]
 801b700:	1a6d      	subs	r5, r5, r1
 801b702:	4629      	mov	r1, r5
 801b704:	4638      	mov	r0, r7
 801b706:	f7ff ffa7 	bl	801b658 <sbrk_aligned>
 801b70a:	3001      	adds	r0, #1
 801b70c:	d037      	beq.n	801b77e <_malloc_r+0xe6>
 801b70e:	6823      	ldr	r3, [r4, #0]
 801b710:	442b      	add	r3, r5
 801b712:	6023      	str	r3, [r4, #0]
 801b714:	f8d8 3000 	ldr.w	r3, [r8]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d038      	beq.n	801b78e <_malloc_r+0xf6>
 801b71c:	685a      	ldr	r2, [r3, #4]
 801b71e:	42a2      	cmp	r2, r4
 801b720:	d12b      	bne.n	801b77a <_malloc_r+0xe2>
 801b722:	2200      	movs	r2, #0
 801b724:	605a      	str	r2, [r3, #4]
 801b726:	e00f      	b.n	801b748 <_malloc_r+0xb0>
 801b728:	6822      	ldr	r2, [r4, #0]
 801b72a:	1b52      	subs	r2, r2, r5
 801b72c:	d41f      	bmi.n	801b76e <_malloc_r+0xd6>
 801b72e:	2a0b      	cmp	r2, #11
 801b730:	d917      	bls.n	801b762 <_malloc_r+0xca>
 801b732:	1961      	adds	r1, r4, r5
 801b734:	42a3      	cmp	r3, r4
 801b736:	6025      	str	r5, [r4, #0]
 801b738:	bf18      	it	ne
 801b73a:	6059      	strne	r1, [r3, #4]
 801b73c:	6863      	ldr	r3, [r4, #4]
 801b73e:	bf08      	it	eq
 801b740:	f8c8 1000 	streq.w	r1, [r8]
 801b744:	5162      	str	r2, [r4, r5]
 801b746:	604b      	str	r3, [r1, #4]
 801b748:	4638      	mov	r0, r7
 801b74a:	f104 060b 	add.w	r6, r4, #11
 801b74e:	f000 f829 	bl	801b7a4 <__malloc_unlock>
 801b752:	f026 0607 	bic.w	r6, r6, #7
 801b756:	1d23      	adds	r3, r4, #4
 801b758:	1af2      	subs	r2, r6, r3
 801b75a:	d0ae      	beq.n	801b6ba <_malloc_r+0x22>
 801b75c:	1b9b      	subs	r3, r3, r6
 801b75e:	50a3      	str	r3, [r4, r2]
 801b760:	e7ab      	b.n	801b6ba <_malloc_r+0x22>
 801b762:	42a3      	cmp	r3, r4
 801b764:	6862      	ldr	r2, [r4, #4]
 801b766:	d1dd      	bne.n	801b724 <_malloc_r+0x8c>
 801b768:	f8c8 2000 	str.w	r2, [r8]
 801b76c:	e7ec      	b.n	801b748 <_malloc_r+0xb0>
 801b76e:	4623      	mov	r3, r4
 801b770:	6864      	ldr	r4, [r4, #4]
 801b772:	e7ac      	b.n	801b6ce <_malloc_r+0x36>
 801b774:	4634      	mov	r4, r6
 801b776:	6876      	ldr	r6, [r6, #4]
 801b778:	e7b4      	b.n	801b6e4 <_malloc_r+0x4c>
 801b77a:	4613      	mov	r3, r2
 801b77c:	e7cc      	b.n	801b718 <_malloc_r+0x80>
 801b77e:	230c      	movs	r3, #12
 801b780:	603b      	str	r3, [r7, #0]
 801b782:	4638      	mov	r0, r7
 801b784:	f000 f80e 	bl	801b7a4 <__malloc_unlock>
 801b788:	e797      	b.n	801b6ba <_malloc_r+0x22>
 801b78a:	6025      	str	r5, [r4, #0]
 801b78c:	e7dc      	b.n	801b748 <_malloc_r+0xb0>
 801b78e:	605b      	str	r3, [r3, #4]
 801b790:	deff      	udf	#255	; 0xff
 801b792:	bf00      	nop
 801b794:	2400363c 	.word	0x2400363c

0801b798 <__malloc_lock>:
 801b798:	4801      	ldr	r0, [pc, #4]	; (801b7a0 <__malloc_lock+0x8>)
 801b79a:	f7ff b8fe 	b.w	801a99a <__retarget_lock_acquire_recursive>
 801b79e:	bf00      	nop
 801b7a0:	24003638 	.word	0x24003638

0801b7a4 <__malloc_unlock>:
 801b7a4:	4801      	ldr	r0, [pc, #4]	; (801b7ac <__malloc_unlock+0x8>)
 801b7a6:	f7ff b8f9 	b.w	801a99c <__retarget_lock_release_recursive>
 801b7aa:	bf00      	nop
 801b7ac:	24003638 	.word	0x24003638

0801b7b0 <_Balloc>:
 801b7b0:	b570      	push	{r4, r5, r6, lr}
 801b7b2:	69c6      	ldr	r6, [r0, #28]
 801b7b4:	4604      	mov	r4, r0
 801b7b6:	460d      	mov	r5, r1
 801b7b8:	b976      	cbnz	r6, 801b7d8 <_Balloc+0x28>
 801b7ba:	2010      	movs	r0, #16
 801b7bc:	f7ff ff44 	bl	801b648 <malloc>
 801b7c0:	4602      	mov	r2, r0
 801b7c2:	61e0      	str	r0, [r4, #28]
 801b7c4:	b920      	cbnz	r0, 801b7d0 <_Balloc+0x20>
 801b7c6:	4b18      	ldr	r3, [pc, #96]	; (801b828 <_Balloc+0x78>)
 801b7c8:	4818      	ldr	r0, [pc, #96]	; (801b82c <_Balloc+0x7c>)
 801b7ca:	216b      	movs	r1, #107	; 0x6b
 801b7cc:	f001 fd3c 	bl	801d248 <__assert_func>
 801b7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b7d4:	6006      	str	r6, [r0, #0]
 801b7d6:	60c6      	str	r6, [r0, #12]
 801b7d8:	69e6      	ldr	r6, [r4, #28]
 801b7da:	68f3      	ldr	r3, [r6, #12]
 801b7dc:	b183      	cbz	r3, 801b800 <_Balloc+0x50>
 801b7de:	69e3      	ldr	r3, [r4, #28]
 801b7e0:	68db      	ldr	r3, [r3, #12]
 801b7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b7e6:	b9b8      	cbnz	r0, 801b818 <_Balloc+0x68>
 801b7e8:	2101      	movs	r1, #1
 801b7ea:	fa01 f605 	lsl.w	r6, r1, r5
 801b7ee:	1d72      	adds	r2, r6, #5
 801b7f0:	0092      	lsls	r2, r2, #2
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	f001 fd46 	bl	801d284 <_calloc_r>
 801b7f8:	b160      	cbz	r0, 801b814 <_Balloc+0x64>
 801b7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b7fe:	e00e      	b.n	801b81e <_Balloc+0x6e>
 801b800:	2221      	movs	r2, #33	; 0x21
 801b802:	2104      	movs	r1, #4
 801b804:	4620      	mov	r0, r4
 801b806:	f001 fd3d 	bl	801d284 <_calloc_r>
 801b80a:	69e3      	ldr	r3, [r4, #28]
 801b80c:	60f0      	str	r0, [r6, #12]
 801b80e:	68db      	ldr	r3, [r3, #12]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d1e4      	bne.n	801b7de <_Balloc+0x2e>
 801b814:	2000      	movs	r0, #0
 801b816:	bd70      	pop	{r4, r5, r6, pc}
 801b818:	6802      	ldr	r2, [r0, #0]
 801b81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b81e:	2300      	movs	r3, #0
 801b820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b824:	e7f7      	b.n	801b816 <_Balloc+0x66>
 801b826:	bf00      	nop
 801b828:	0801e60e 	.word	0x0801e60e
 801b82c:	0801e68e 	.word	0x0801e68e

0801b830 <_Bfree>:
 801b830:	b570      	push	{r4, r5, r6, lr}
 801b832:	69c6      	ldr	r6, [r0, #28]
 801b834:	4605      	mov	r5, r0
 801b836:	460c      	mov	r4, r1
 801b838:	b976      	cbnz	r6, 801b858 <_Bfree+0x28>
 801b83a:	2010      	movs	r0, #16
 801b83c:	f7ff ff04 	bl	801b648 <malloc>
 801b840:	4602      	mov	r2, r0
 801b842:	61e8      	str	r0, [r5, #28]
 801b844:	b920      	cbnz	r0, 801b850 <_Bfree+0x20>
 801b846:	4b09      	ldr	r3, [pc, #36]	; (801b86c <_Bfree+0x3c>)
 801b848:	4809      	ldr	r0, [pc, #36]	; (801b870 <_Bfree+0x40>)
 801b84a:	218f      	movs	r1, #143	; 0x8f
 801b84c:	f001 fcfc 	bl	801d248 <__assert_func>
 801b850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b854:	6006      	str	r6, [r0, #0]
 801b856:	60c6      	str	r6, [r0, #12]
 801b858:	b13c      	cbz	r4, 801b86a <_Bfree+0x3a>
 801b85a:	69eb      	ldr	r3, [r5, #28]
 801b85c:	6862      	ldr	r2, [r4, #4]
 801b85e:	68db      	ldr	r3, [r3, #12]
 801b860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b864:	6021      	str	r1, [r4, #0]
 801b866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b86a:	bd70      	pop	{r4, r5, r6, pc}
 801b86c:	0801e60e 	.word	0x0801e60e
 801b870:	0801e68e 	.word	0x0801e68e

0801b874 <__multadd>:
 801b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b878:	690d      	ldr	r5, [r1, #16]
 801b87a:	4607      	mov	r7, r0
 801b87c:	460c      	mov	r4, r1
 801b87e:	461e      	mov	r6, r3
 801b880:	f101 0c14 	add.w	ip, r1, #20
 801b884:	2000      	movs	r0, #0
 801b886:	f8dc 3000 	ldr.w	r3, [ip]
 801b88a:	b299      	uxth	r1, r3
 801b88c:	fb02 6101 	mla	r1, r2, r1, r6
 801b890:	0c1e      	lsrs	r6, r3, #16
 801b892:	0c0b      	lsrs	r3, r1, #16
 801b894:	fb02 3306 	mla	r3, r2, r6, r3
 801b898:	b289      	uxth	r1, r1
 801b89a:	3001      	adds	r0, #1
 801b89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b8a0:	4285      	cmp	r5, r0
 801b8a2:	f84c 1b04 	str.w	r1, [ip], #4
 801b8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b8aa:	dcec      	bgt.n	801b886 <__multadd+0x12>
 801b8ac:	b30e      	cbz	r6, 801b8f2 <__multadd+0x7e>
 801b8ae:	68a3      	ldr	r3, [r4, #8]
 801b8b0:	42ab      	cmp	r3, r5
 801b8b2:	dc19      	bgt.n	801b8e8 <__multadd+0x74>
 801b8b4:	6861      	ldr	r1, [r4, #4]
 801b8b6:	4638      	mov	r0, r7
 801b8b8:	3101      	adds	r1, #1
 801b8ba:	f7ff ff79 	bl	801b7b0 <_Balloc>
 801b8be:	4680      	mov	r8, r0
 801b8c0:	b928      	cbnz	r0, 801b8ce <__multadd+0x5a>
 801b8c2:	4602      	mov	r2, r0
 801b8c4:	4b0c      	ldr	r3, [pc, #48]	; (801b8f8 <__multadd+0x84>)
 801b8c6:	480d      	ldr	r0, [pc, #52]	; (801b8fc <__multadd+0x88>)
 801b8c8:	21ba      	movs	r1, #186	; 0xba
 801b8ca:	f001 fcbd 	bl	801d248 <__assert_func>
 801b8ce:	6922      	ldr	r2, [r4, #16]
 801b8d0:	3202      	adds	r2, #2
 801b8d2:	f104 010c 	add.w	r1, r4, #12
 801b8d6:	0092      	lsls	r2, r2, #2
 801b8d8:	300c      	adds	r0, #12
 801b8da:	f7ff f860 	bl	801a99e <memcpy>
 801b8de:	4621      	mov	r1, r4
 801b8e0:	4638      	mov	r0, r7
 801b8e2:	f7ff ffa5 	bl	801b830 <_Bfree>
 801b8e6:	4644      	mov	r4, r8
 801b8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b8ec:	3501      	adds	r5, #1
 801b8ee:	615e      	str	r6, [r3, #20]
 801b8f0:	6125      	str	r5, [r4, #16]
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8f8:	0801e67d 	.word	0x0801e67d
 801b8fc:	0801e68e 	.word	0x0801e68e

0801b900 <__s2b>:
 801b900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b904:	460c      	mov	r4, r1
 801b906:	4615      	mov	r5, r2
 801b908:	461f      	mov	r7, r3
 801b90a:	2209      	movs	r2, #9
 801b90c:	3308      	adds	r3, #8
 801b90e:	4606      	mov	r6, r0
 801b910:	fb93 f3f2 	sdiv	r3, r3, r2
 801b914:	2100      	movs	r1, #0
 801b916:	2201      	movs	r2, #1
 801b918:	429a      	cmp	r2, r3
 801b91a:	db09      	blt.n	801b930 <__s2b+0x30>
 801b91c:	4630      	mov	r0, r6
 801b91e:	f7ff ff47 	bl	801b7b0 <_Balloc>
 801b922:	b940      	cbnz	r0, 801b936 <__s2b+0x36>
 801b924:	4602      	mov	r2, r0
 801b926:	4b19      	ldr	r3, [pc, #100]	; (801b98c <__s2b+0x8c>)
 801b928:	4819      	ldr	r0, [pc, #100]	; (801b990 <__s2b+0x90>)
 801b92a:	21d3      	movs	r1, #211	; 0xd3
 801b92c:	f001 fc8c 	bl	801d248 <__assert_func>
 801b930:	0052      	lsls	r2, r2, #1
 801b932:	3101      	adds	r1, #1
 801b934:	e7f0      	b.n	801b918 <__s2b+0x18>
 801b936:	9b08      	ldr	r3, [sp, #32]
 801b938:	6143      	str	r3, [r0, #20]
 801b93a:	2d09      	cmp	r5, #9
 801b93c:	f04f 0301 	mov.w	r3, #1
 801b940:	6103      	str	r3, [r0, #16]
 801b942:	dd16      	ble.n	801b972 <__s2b+0x72>
 801b944:	f104 0909 	add.w	r9, r4, #9
 801b948:	46c8      	mov	r8, r9
 801b94a:	442c      	add	r4, r5
 801b94c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b950:	4601      	mov	r1, r0
 801b952:	3b30      	subs	r3, #48	; 0x30
 801b954:	220a      	movs	r2, #10
 801b956:	4630      	mov	r0, r6
 801b958:	f7ff ff8c 	bl	801b874 <__multadd>
 801b95c:	45a0      	cmp	r8, r4
 801b95e:	d1f5      	bne.n	801b94c <__s2b+0x4c>
 801b960:	f1a5 0408 	sub.w	r4, r5, #8
 801b964:	444c      	add	r4, r9
 801b966:	1b2d      	subs	r5, r5, r4
 801b968:	1963      	adds	r3, r4, r5
 801b96a:	42bb      	cmp	r3, r7
 801b96c:	db04      	blt.n	801b978 <__s2b+0x78>
 801b96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b972:	340a      	adds	r4, #10
 801b974:	2509      	movs	r5, #9
 801b976:	e7f6      	b.n	801b966 <__s2b+0x66>
 801b978:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b97c:	4601      	mov	r1, r0
 801b97e:	3b30      	subs	r3, #48	; 0x30
 801b980:	220a      	movs	r2, #10
 801b982:	4630      	mov	r0, r6
 801b984:	f7ff ff76 	bl	801b874 <__multadd>
 801b988:	e7ee      	b.n	801b968 <__s2b+0x68>
 801b98a:	bf00      	nop
 801b98c:	0801e67d 	.word	0x0801e67d
 801b990:	0801e68e 	.word	0x0801e68e

0801b994 <__hi0bits>:
 801b994:	0c03      	lsrs	r3, r0, #16
 801b996:	041b      	lsls	r3, r3, #16
 801b998:	b9d3      	cbnz	r3, 801b9d0 <__hi0bits+0x3c>
 801b99a:	0400      	lsls	r0, r0, #16
 801b99c:	2310      	movs	r3, #16
 801b99e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b9a2:	bf04      	itt	eq
 801b9a4:	0200      	lsleq	r0, r0, #8
 801b9a6:	3308      	addeq	r3, #8
 801b9a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b9ac:	bf04      	itt	eq
 801b9ae:	0100      	lsleq	r0, r0, #4
 801b9b0:	3304      	addeq	r3, #4
 801b9b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b9b6:	bf04      	itt	eq
 801b9b8:	0080      	lsleq	r0, r0, #2
 801b9ba:	3302      	addeq	r3, #2
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	db05      	blt.n	801b9cc <__hi0bits+0x38>
 801b9c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b9c4:	f103 0301 	add.w	r3, r3, #1
 801b9c8:	bf08      	it	eq
 801b9ca:	2320      	moveq	r3, #32
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	4770      	bx	lr
 801b9d0:	2300      	movs	r3, #0
 801b9d2:	e7e4      	b.n	801b99e <__hi0bits+0xa>

0801b9d4 <__lo0bits>:
 801b9d4:	6803      	ldr	r3, [r0, #0]
 801b9d6:	f013 0207 	ands.w	r2, r3, #7
 801b9da:	d00c      	beq.n	801b9f6 <__lo0bits+0x22>
 801b9dc:	07d9      	lsls	r1, r3, #31
 801b9de:	d422      	bmi.n	801ba26 <__lo0bits+0x52>
 801b9e0:	079a      	lsls	r2, r3, #30
 801b9e2:	bf49      	itett	mi
 801b9e4:	085b      	lsrmi	r3, r3, #1
 801b9e6:	089b      	lsrpl	r3, r3, #2
 801b9e8:	6003      	strmi	r3, [r0, #0]
 801b9ea:	2201      	movmi	r2, #1
 801b9ec:	bf5c      	itt	pl
 801b9ee:	6003      	strpl	r3, [r0, #0]
 801b9f0:	2202      	movpl	r2, #2
 801b9f2:	4610      	mov	r0, r2
 801b9f4:	4770      	bx	lr
 801b9f6:	b299      	uxth	r1, r3
 801b9f8:	b909      	cbnz	r1, 801b9fe <__lo0bits+0x2a>
 801b9fa:	0c1b      	lsrs	r3, r3, #16
 801b9fc:	2210      	movs	r2, #16
 801b9fe:	b2d9      	uxtb	r1, r3
 801ba00:	b909      	cbnz	r1, 801ba06 <__lo0bits+0x32>
 801ba02:	3208      	adds	r2, #8
 801ba04:	0a1b      	lsrs	r3, r3, #8
 801ba06:	0719      	lsls	r1, r3, #28
 801ba08:	bf04      	itt	eq
 801ba0a:	091b      	lsreq	r3, r3, #4
 801ba0c:	3204      	addeq	r2, #4
 801ba0e:	0799      	lsls	r1, r3, #30
 801ba10:	bf04      	itt	eq
 801ba12:	089b      	lsreq	r3, r3, #2
 801ba14:	3202      	addeq	r2, #2
 801ba16:	07d9      	lsls	r1, r3, #31
 801ba18:	d403      	bmi.n	801ba22 <__lo0bits+0x4e>
 801ba1a:	085b      	lsrs	r3, r3, #1
 801ba1c:	f102 0201 	add.w	r2, r2, #1
 801ba20:	d003      	beq.n	801ba2a <__lo0bits+0x56>
 801ba22:	6003      	str	r3, [r0, #0]
 801ba24:	e7e5      	b.n	801b9f2 <__lo0bits+0x1e>
 801ba26:	2200      	movs	r2, #0
 801ba28:	e7e3      	b.n	801b9f2 <__lo0bits+0x1e>
 801ba2a:	2220      	movs	r2, #32
 801ba2c:	e7e1      	b.n	801b9f2 <__lo0bits+0x1e>
	...

0801ba30 <__i2b>:
 801ba30:	b510      	push	{r4, lr}
 801ba32:	460c      	mov	r4, r1
 801ba34:	2101      	movs	r1, #1
 801ba36:	f7ff febb 	bl	801b7b0 <_Balloc>
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	b928      	cbnz	r0, 801ba4a <__i2b+0x1a>
 801ba3e:	4b05      	ldr	r3, [pc, #20]	; (801ba54 <__i2b+0x24>)
 801ba40:	4805      	ldr	r0, [pc, #20]	; (801ba58 <__i2b+0x28>)
 801ba42:	f240 1145 	movw	r1, #325	; 0x145
 801ba46:	f001 fbff 	bl	801d248 <__assert_func>
 801ba4a:	2301      	movs	r3, #1
 801ba4c:	6144      	str	r4, [r0, #20]
 801ba4e:	6103      	str	r3, [r0, #16]
 801ba50:	bd10      	pop	{r4, pc}
 801ba52:	bf00      	nop
 801ba54:	0801e67d 	.word	0x0801e67d
 801ba58:	0801e68e 	.word	0x0801e68e

0801ba5c <__multiply>:
 801ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba60:	4691      	mov	r9, r2
 801ba62:	690a      	ldr	r2, [r1, #16]
 801ba64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ba68:	429a      	cmp	r2, r3
 801ba6a:	bfb8      	it	lt
 801ba6c:	460b      	movlt	r3, r1
 801ba6e:	460c      	mov	r4, r1
 801ba70:	bfbc      	itt	lt
 801ba72:	464c      	movlt	r4, r9
 801ba74:	4699      	movlt	r9, r3
 801ba76:	6927      	ldr	r7, [r4, #16]
 801ba78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ba7c:	68a3      	ldr	r3, [r4, #8]
 801ba7e:	6861      	ldr	r1, [r4, #4]
 801ba80:	eb07 060a 	add.w	r6, r7, sl
 801ba84:	42b3      	cmp	r3, r6
 801ba86:	b085      	sub	sp, #20
 801ba88:	bfb8      	it	lt
 801ba8a:	3101      	addlt	r1, #1
 801ba8c:	f7ff fe90 	bl	801b7b0 <_Balloc>
 801ba90:	b930      	cbnz	r0, 801baa0 <__multiply+0x44>
 801ba92:	4602      	mov	r2, r0
 801ba94:	4b44      	ldr	r3, [pc, #272]	; (801bba8 <__multiply+0x14c>)
 801ba96:	4845      	ldr	r0, [pc, #276]	; (801bbac <__multiply+0x150>)
 801ba98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801ba9c:	f001 fbd4 	bl	801d248 <__assert_func>
 801baa0:	f100 0514 	add.w	r5, r0, #20
 801baa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801baa8:	462b      	mov	r3, r5
 801baaa:	2200      	movs	r2, #0
 801baac:	4543      	cmp	r3, r8
 801baae:	d321      	bcc.n	801baf4 <__multiply+0x98>
 801bab0:	f104 0314 	add.w	r3, r4, #20
 801bab4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bab8:	f109 0314 	add.w	r3, r9, #20
 801babc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bac0:	9202      	str	r2, [sp, #8]
 801bac2:	1b3a      	subs	r2, r7, r4
 801bac4:	3a15      	subs	r2, #21
 801bac6:	f022 0203 	bic.w	r2, r2, #3
 801baca:	3204      	adds	r2, #4
 801bacc:	f104 0115 	add.w	r1, r4, #21
 801bad0:	428f      	cmp	r7, r1
 801bad2:	bf38      	it	cc
 801bad4:	2204      	movcc	r2, #4
 801bad6:	9201      	str	r2, [sp, #4]
 801bad8:	9a02      	ldr	r2, [sp, #8]
 801bada:	9303      	str	r3, [sp, #12]
 801badc:	429a      	cmp	r2, r3
 801bade:	d80c      	bhi.n	801bafa <__multiply+0x9e>
 801bae0:	2e00      	cmp	r6, #0
 801bae2:	dd03      	ble.n	801baec <__multiply+0x90>
 801bae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d05b      	beq.n	801bba4 <__multiply+0x148>
 801baec:	6106      	str	r6, [r0, #16]
 801baee:	b005      	add	sp, #20
 801baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baf4:	f843 2b04 	str.w	r2, [r3], #4
 801baf8:	e7d8      	b.n	801baac <__multiply+0x50>
 801bafa:	f8b3 a000 	ldrh.w	sl, [r3]
 801bafe:	f1ba 0f00 	cmp.w	sl, #0
 801bb02:	d024      	beq.n	801bb4e <__multiply+0xf2>
 801bb04:	f104 0e14 	add.w	lr, r4, #20
 801bb08:	46a9      	mov	r9, r5
 801bb0a:	f04f 0c00 	mov.w	ip, #0
 801bb0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bb12:	f8d9 1000 	ldr.w	r1, [r9]
 801bb16:	fa1f fb82 	uxth.w	fp, r2
 801bb1a:	b289      	uxth	r1, r1
 801bb1c:	fb0a 110b 	mla	r1, sl, fp, r1
 801bb20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bb24:	f8d9 2000 	ldr.w	r2, [r9]
 801bb28:	4461      	add	r1, ip
 801bb2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bb2e:	fb0a c20b 	mla	r2, sl, fp, ip
 801bb32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bb36:	b289      	uxth	r1, r1
 801bb38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bb3c:	4577      	cmp	r7, lr
 801bb3e:	f849 1b04 	str.w	r1, [r9], #4
 801bb42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bb46:	d8e2      	bhi.n	801bb0e <__multiply+0xb2>
 801bb48:	9a01      	ldr	r2, [sp, #4]
 801bb4a:	f845 c002 	str.w	ip, [r5, r2]
 801bb4e:	9a03      	ldr	r2, [sp, #12]
 801bb50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bb54:	3304      	adds	r3, #4
 801bb56:	f1b9 0f00 	cmp.w	r9, #0
 801bb5a:	d021      	beq.n	801bba0 <__multiply+0x144>
 801bb5c:	6829      	ldr	r1, [r5, #0]
 801bb5e:	f104 0c14 	add.w	ip, r4, #20
 801bb62:	46ae      	mov	lr, r5
 801bb64:	f04f 0a00 	mov.w	sl, #0
 801bb68:	f8bc b000 	ldrh.w	fp, [ip]
 801bb6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bb70:	fb09 220b 	mla	r2, r9, fp, r2
 801bb74:	4452      	add	r2, sl
 801bb76:	b289      	uxth	r1, r1
 801bb78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bb7c:	f84e 1b04 	str.w	r1, [lr], #4
 801bb80:	f85c 1b04 	ldr.w	r1, [ip], #4
 801bb84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bb88:	f8be 1000 	ldrh.w	r1, [lr]
 801bb8c:	fb09 110a 	mla	r1, r9, sl, r1
 801bb90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801bb94:	4567      	cmp	r7, ip
 801bb96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bb9a:	d8e5      	bhi.n	801bb68 <__multiply+0x10c>
 801bb9c:	9a01      	ldr	r2, [sp, #4]
 801bb9e:	50a9      	str	r1, [r5, r2]
 801bba0:	3504      	adds	r5, #4
 801bba2:	e799      	b.n	801bad8 <__multiply+0x7c>
 801bba4:	3e01      	subs	r6, #1
 801bba6:	e79b      	b.n	801bae0 <__multiply+0x84>
 801bba8:	0801e67d 	.word	0x0801e67d
 801bbac:	0801e68e 	.word	0x0801e68e

0801bbb0 <__pow5mult>:
 801bbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	f012 0203 	ands.w	r2, r2, #3
 801bbba:	4606      	mov	r6, r0
 801bbbc:	460f      	mov	r7, r1
 801bbbe:	d007      	beq.n	801bbd0 <__pow5mult+0x20>
 801bbc0:	4c25      	ldr	r4, [pc, #148]	; (801bc58 <__pow5mult+0xa8>)
 801bbc2:	3a01      	subs	r2, #1
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bbca:	f7ff fe53 	bl	801b874 <__multadd>
 801bbce:	4607      	mov	r7, r0
 801bbd0:	10ad      	asrs	r5, r5, #2
 801bbd2:	d03d      	beq.n	801bc50 <__pow5mult+0xa0>
 801bbd4:	69f4      	ldr	r4, [r6, #28]
 801bbd6:	b97c      	cbnz	r4, 801bbf8 <__pow5mult+0x48>
 801bbd8:	2010      	movs	r0, #16
 801bbda:	f7ff fd35 	bl	801b648 <malloc>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	61f0      	str	r0, [r6, #28]
 801bbe2:	b928      	cbnz	r0, 801bbf0 <__pow5mult+0x40>
 801bbe4:	4b1d      	ldr	r3, [pc, #116]	; (801bc5c <__pow5mult+0xac>)
 801bbe6:	481e      	ldr	r0, [pc, #120]	; (801bc60 <__pow5mult+0xb0>)
 801bbe8:	f240 11b3 	movw	r1, #435	; 0x1b3
 801bbec:	f001 fb2c 	bl	801d248 <__assert_func>
 801bbf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bbf4:	6004      	str	r4, [r0, #0]
 801bbf6:	60c4      	str	r4, [r0, #12]
 801bbf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801bbfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bc00:	b94c      	cbnz	r4, 801bc16 <__pow5mult+0x66>
 801bc02:	f240 2171 	movw	r1, #625	; 0x271
 801bc06:	4630      	mov	r0, r6
 801bc08:	f7ff ff12 	bl	801ba30 <__i2b>
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	f8c8 0008 	str.w	r0, [r8, #8]
 801bc12:	4604      	mov	r4, r0
 801bc14:	6003      	str	r3, [r0, #0]
 801bc16:	f04f 0900 	mov.w	r9, #0
 801bc1a:	07eb      	lsls	r3, r5, #31
 801bc1c:	d50a      	bpl.n	801bc34 <__pow5mult+0x84>
 801bc1e:	4639      	mov	r1, r7
 801bc20:	4622      	mov	r2, r4
 801bc22:	4630      	mov	r0, r6
 801bc24:	f7ff ff1a 	bl	801ba5c <__multiply>
 801bc28:	4639      	mov	r1, r7
 801bc2a:	4680      	mov	r8, r0
 801bc2c:	4630      	mov	r0, r6
 801bc2e:	f7ff fdff 	bl	801b830 <_Bfree>
 801bc32:	4647      	mov	r7, r8
 801bc34:	106d      	asrs	r5, r5, #1
 801bc36:	d00b      	beq.n	801bc50 <__pow5mult+0xa0>
 801bc38:	6820      	ldr	r0, [r4, #0]
 801bc3a:	b938      	cbnz	r0, 801bc4c <__pow5mult+0x9c>
 801bc3c:	4622      	mov	r2, r4
 801bc3e:	4621      	mov	r1, r4
 801bc40:	4630      	mov	r0, r6
 801bc42:	f7ff ff0b 	bl	801ba5c <__multiply>
 801bc46:	6020      	str	r0, [r4, #0]
 801bc48:	f8c0 9000 	str.w	r9, [r0]
 801bc4c:	4604      	mov	r4, r0
 801bc4e:	e7e4      	b.n	801bc1a <__pow5mult+0x6a>
 801bc50:	4638      	mov	r0, r7
 801bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc56:	bf00      	nop
 801bc58:	0801e7d8 	.word	0x0801e7d8
 801bc5c:	0801e60e 	.word	0x0801e60e
 801bc60:	0801e68e 	.word	0x0801e68e

0801bc64 <__lshift>:
 801bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc68:	460c      	mov	r4, r1
 801bc6a:	6849      	ldr	r1, [r1, #4]
 801bc6c:	6923      	ldr	r3, [r4, #16]
 801bc6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bc72:	68a3      	ldr	r3, [r4, #8]
 801bc74:	4607      	mov	r7, r0
 801bc76:	4691      	mov	r9, r2
 801bc78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bc7c:	f108 0601 	add.w	r6, r8, #1
 801bc80:	42b3      	cmp	r3, r6
 801bc82:	db0b      	blt.n	801bc9c <__lshift+0x38>
 801bc84:	4638      	mov	r0, r7
 801bc86:	f7ff fd93 	bl	801b7b0 <_Balloc>
 801bc8a:	4605      	mov	r5, r0
 801bc8c:	b948      	cbnz	r0, 801bca2 <__lshift+0x3e>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	4b28      	ldr	r3, [pc, #160]	; (801bd34 <__lshift+0xd0>)
 801bc92:	4829      	ldr	r0, [pc, #164]	; (801bd38 <__lshift+0xd4>)
 801bc94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801bc98:	f001 fad6 	bl	801d248 <__assert_func>
 801bc9c:	3101      	adds	r1, #1
 801bc9e:	005b      	lsls	r3, r3, #1
 801bca0:	e7ee      	b.n	801bc80 <__lshift+0x1c>
 801bca2:	2300      	movs	r3, #0
 801bca4:	f100 0114 	add.w	r1, r0, #20
 801bca8:	f100 0210 	add.w	r2, r0, #16
 801bcac:	4618      	mov	r0, r3
 801bcae:	4553      	cmp	r3, sl
 801bcb0:	db33      	blt.n	801bd1a <__lshift+0xb6>
 801bcb2:	6920      	ldr	r0, [r4, #16]
 801bcb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bcb8:	f104 0314 	add.w	r3, r4, #20
 801bcbc:	f019 091f 	ands.w	r9, r9, #31
 801bcc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bcc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bcc8:	d02b      	beq.n	801bd22 <__lshift+0xbe>
 801bcca:	f1c9 0e20 	rsb	lr, r9, #32
 801bcce:	468a      	mov	sl, r1
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	6818      	ldr	r0, [r3, #0]
 801bcd4:	fa00 f009 	lsl.w	r0, r0, r9
 801bcd8:	4310      	orrs	r0, r2
 801bcda:	f84a 0b04 	str.w	r0, [sl], #4
 801bcde:	f853 2b04 	ldr.w	r2, [r3], #4
 801bce2:	459c      	cmp	ip, r3
 801bce4:	fa22 f20e 	lsr.w	r2, r2, lr
 801bce8:	d8f3      	bhi.n	801bcd2 <__lshift+0x6e>
 801bcea:	ebac 0304 	sub.w	r3, ip, r4
 801bcee:	3b15      	subs	r3, #21
 801bcf0:	f023 0303 	bic.w	r3, r3, #3
 801bcf4:	3304      	adds	r3, #4
 801bcf6:	f104 0015 	add.w	r0, r4, #21
 801bcfa:	4584      	cmp	ip, r0
 801bcfc:	bf38      	it	cc
 801bcfe:	2304      	movcc	r3, #4
 801bd00:	50ca      	str	r2, [r1, r3]
 801bd02:	b10a      	cbz	r2, 801bd08 <__lshift+0xa4>
 801bd04:	f108 0602 	add.w	r6, r8, #2
 801bd08:	3e01      	subs	r6, #1
 801bd0a:	4638      	mov	r0, r7
 801bd0c:	612e      	str	r6, [r5, #16]
 801bd0e:	4621      	mov	r1, r4
 801bd10:	f7ff fd8e 	bl	801b830 <_Bfree>
 801bd14:	4628      	mov	r0, r5
 801bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801bd1e:	3301      	adds	r3, #1
 801bd20:	e7c5      	b.n	801bcae <__lshift+0x4a>
 801bd22:	3904      	subs	r1, #4
 801bd24:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd28:	f841 2f04 	str.w	r2, [r1, #4]!
 801bd2c:	459c      	cmp	ip, r3
 801bd2e:	d8f9      	bhi.n	801bd24 <__lshift+0xc0>
 801bd30:	e7ea      	b.n	801bd08 <__lshift+0xa4>
 801bd32:	bf00      	nop
 801bd34:	0801e67d 	.word	0x0801e67d
 801bd38:	0801e68e 	.word	0x0801e68e

0801bd3c <__mcmp>:
 801bd3c:	b530      	push	{r4, r5, lr}
 801bd3e:	6902      	ldr	r2, [r0, #16]
 801bd40:	690c      	ldr	r4, [r1, #16]
 801bd42:	1b12      	subs	r2, r2, r4
 801bd44:	d10e      	bne.n	801bd64 <__mcmp+0x28>
 801bd46:	f100 0314 	add.w	r3, r0, #20
 801bd4a:	3114      	adds	r1, #20
 801bd4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bd50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bd54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bd58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bd5c:	42a5      	cmp	r5, r4
 801bd5e:	d003      	beq.n	801bd68 <__mcmp+0x2c>
 801bd60:	d305      	bcc.n	801bd6e <__mcmp+0x32>
 801bd62:	2201      	movs	r2, #1
 801bd64:	4610      	mov	r0, r2
 801bd66:	bd30      	pop	{r4, r5, pc}
 801bd68:	4283      	cmp	r3, r0
 801bd6a:	d3f3      	bcc.n	801bd54 <__mcmp+0x18>
 801bd6c:	e7fa      	b.n	801bd64 <__mcmp+0x28>
 801bd6e:	f04f 32ff 	mov.w	r2, #4294967295
 801bd72:	e7f7      	b.n	801bd64 <__mcmp+0x28>

0801bd74 <__mdiff>:
 801bd74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd78:	460c      	mov	r4, r1
 801bd7a:	4606      	mov	r6, r0
 801bd7c:	4611      	mov	r1, r2
 801bd7e:	4620      	mov	r0, r4
 801bd80:	4690      	mov	r8, r2
 801bd82:	f7ff ffdb 	bl	801bd3c <__mcmp>
 801bd86:	1e05      	subs	r5, r0, #0
 801bd88:	d110      	bne.n	801bdac <__mdiff+0x38>
 801bd8a:	4629      	mov	r1, r5
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	f7ff fd0f 	bl	801b7b0 <_Balloc>
 801bd92:	b930      	cbnz	r0, 801bda2 <__mdiff+0x2e>
 801bd94:	4b3a      	ldr	r3, [pc, #232]	; (801be80 <__mdiff+0x10c>)
 801bd96:	4602      	mov	r2, r0
 801bd98:	f240 2137 	movw	r1, #567	; 0x237
 801bd9c:	4839      	ldr	r0, [pc, #228]	; (801be84 <__mdiff+0x110>)
 801bd9e:	f001 fa53 	bl	801d248 <__assert_func>
 801bda2:	2301      	movs	r3, #1
 801bda4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bda8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdac:	bfa4      	itt	ge
 801bdae:	4643      	movge	r3, r8
 801bdb0:	46a0      	movge	r8, r4
 801bdb2:	4630      	mov	r0, r6
 801bdb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bdb8:	bfa6      	itte	ge
 801bdba:	461c      	movge	r4, r3
 801bdbc:	2500      	movge	r5, #0
 801bdbe:	2501      	movlt	r5, #1
 801bdc0:	f7ff fcf6 	bl	801b7b0 <_Balloc>
 801bdc4:	b920      	cbnz	r0, 801bdd0 <__mdiff+0x5c>
 801bdc6:	4b2e      	ldr	r3, [pc, #184]	; (801be80 <__mdiff+0x10c>)
 801bdc8:	4602      	mov	r2, r0
 801bdca:	f240 2145 	movw	r1, #581	; 0x245
 801bdce:	e7e5      	b.n	801bd9c <__mdiff+0x28>
 801bdd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bdd4:	6926      	ldr	r6, [r4, #16]
 801bdd6:	60c5      	str	r5, [r0, #12]
 801bdd8:	f104 0914 	add.w	r9, r4, #20
 801bddc:	f108 0514 	add.w	r5, r8, #20
 801bde0:	f100 0e14 	add.w	lr, r0, #20
 801bde4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bde8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bdec:	f108 0210 	add.w	r2, r8, #16
 801bdf0:	46f2      	mov	sl, lr
 801bdf2:	2100      	movs	r1, #0
 801bdf4:	f859 3b04 	ldr.w	r3, [r9], #4
 801bdf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bdfc:	fa11 f88b 	uxtah	r8, r1, fp
 801be00:	b299      	uxth	r1, r3
 801be02:	0c1b      	lsrs	r3, r3, #16
 801be04:	eba8 0801 	sub.w	r8, r8, r1
 801be08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801be0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801be10:	fa1f f888 	uxth.w	r8, r8
 801be14:	1419      	asrs	r1, r3, #16
 801be16:	454e      	cmp	r6, r9
 801be18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801be1c:	f84a 3b04 	str.w	r3, [sl], #4
 801be20:	d8e8      	bhi.n	801bdf4 <__mdiff+0x80>
 801be22:	1b33      	subs	r3, r6, r4
 801be24:	3b15      	subs	r3, #21
 801be26:	f023 0303 	bic.w	r3, r3, #3
 801be2a:	3304      	adds	r3, #4
 801be2c:	3415      	adds	r4, #21
 801be2e:	42a6      	cmp	r6, r4
 801be30:	bf38      	it	cc
 801be32:	2304      	movcc	r3, #4
 801be34:	441d      	add	r5, r3
 801be36:	4473      	add	r3, lr
 801be38:	469e      	mov	lr, r3
 801be3a:	462e      	mov	r6, r5
 801be3c:	4566      	cmp	r6, ip
 801be3e:	d30e      	bcc.n	801be5e <__mdiff+0xea>
 801be40:	f10c 0203 	add.w	r2, ip, #3
 801be44:	1b52      	subs	r2, r2, r5
 801be46:	f022 0203 	bic.w	r2, r2, #3
 801be4a:	3d03      	subs	r5, #3
 801be4c:	45ac      	cmp	ip, r5
 801be4e:	bf38      	it	cc
 801be50:	2200      	movcc	r2, #0
 801be52:	4413      	add	r3, r2
 801be54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801be58:	b17a      	cbz	r2, 801be7a <__mdiff+0x106>
 801be5a:	6107      	str	r7, [r0, #16]
 801be5c:	e7a4      	b.n	801bda8 <__mdiff+0x34>
 801be5e:	f856 8b04 	ldr.w	r8, [r6], #4
 801be62:	fa11 f288 	uxtah	r2, r1, r8
 801be66:	1414      	asrs	r4, r2, #16
 801be68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801be6c:	b292      	uxth	r2, r2
 801be6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801be72:	f84e 2b04 	str.w	r2, [lr], #4
 801be76:	1421      	asrs	r1, r4, #16
 801be78:	e7e0      	b.n	801be3c <__mdiff+0xc8>
 801be7a:	3f01      	subs	r7, #1
 801be7c:	e7ea      	b.n	801be54 <__mdiff+0xe0>
 801be7e:	bf00      	nop
 801be80:	0801e67d 	.word	0x0801e67d
 801be84:	0801e68e 	.word	0x0801e68e

0801be88 <__ulp>:
 801be88:	b082      	sub	sp, #8
 801be8a:	ed8d 0b00 	vstr	d0, [sp]
 801be8e:	9a01      	ldr	r2, [sp, #4]
 801be90:	4b0f      	ldr	r3, [pc, #60]	; (801bed0 <__ulp+0x48>)
 801be92:	4013      	ands	r3, r2
 801be94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801be98:	2b00      	cmp	r3, #0
 801be9a:	dc08      	bgt.n	801beae <__ulp+0x26>
 801be9c:	425b      	negs	r3, r3
 801be9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801bea2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bea6:	da04      	bge.n	801beb2 <__ulp+0x2a>
 801bea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801beac:	4113      	asrs	r3, r2
 801beae:	2200      	movs	r2, #0
 801beb0:	e008      	b.n	801bec4 <__ulp+0x3c>
 801beb2:	f1a2 0314 	sub.w	r3, r2, #20
 801beb6:	2b1e      	cmp	r3, #30
 801beb8:	bfda      	itte	le
 801beba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801bebe:	40da      	lsrle	r2, r3
 801bec0:	2201      	movgt	r2, #1
 801bec2:	2300      	movs	r3, #0
 801bec4:	4619      	mov	r1, r3
 801bec6:	4610      	mov	r0, r2
 801bec8:	ec41 0b10 	vmov	d0, r0, r1
 801becc:	b002      	add	sp, #8
 801bece:	4770      	bx	lr
 801bed0:	7ff00000 	.word	0x7ff00000

0801bed4 <__b2d>:
 801bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bed8:	6906      	ldr	r6, [r0, #16]
 801beda:	f100 0814 	add.w	r8, r0, #20
 801bede:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bee2:	1f37      	subs	r7, r6, #4
 801bee4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bee8:	4610      	mov	r0, r2
 801beea:	f7ff fd53 	bl	801b994 <__hi0bits>
 801beee:	f1c0 0320 	rsb	r3, r0, #32
 801bef2:	280a      	cmp	r0, #10
 801bef4:	600b      	str	r3, [r1, #0]
 801bef6:	491b      	ldr	r1, [pc, #108]	; (801bf64 <__b2d+0x90>)
 801bef8:	dc15      	bgt.n	801bf26 <__b2d+0x52>
 801befa:	f1c0 0c0b 	rsb	ip, r0, #11
 801befe:	fa22 f30c 	lsr.w	r3, r2, ip
 801bf02:	45b8      	cmp	r8, r7
 801bf04:	ea43 0501 	orr.w	r5, r3, r1
 801bf08:	bf34      	ite	cc
 801bf0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bf0e:	2300      	movcs	r3, #0
 801bf10:	3015      	adds	r0, #21
 801bf12:	fa02 f000 	lsl.w	r0, r2, r0
 801bf16:	fa23 f30c 	lsr.w	r3, r3, ip
 801bf1a:	4303      	orrs	r3, r0
 801bf1c:	461c      	mov	r4, r3
 801bf1e:	ec45 4b10 	vmov	d0, r4, r5
 801bf22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf26:	45b8      	cmp	r8, r7
 801bf28:	bf3a      	itte	cc
 801bf2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bf2e:	f1a6 0708 	subcc.w	r7, r6, #8
 801bf32:	2300      	movcs	r3, #0
 801bf34:	380b      	subs	r0, #11
 801bf36:	d012      	beq.n	801bf5e <__b2d+0x8a>
 801bf38:	f1c0 0120 	rsb	r1, r0, #32
 801bf3c:	fa23 f401 	lsr.w	r4, r3, r1
 801bf40:	4082      	lsls	r2, r0
 801bf42:	4322      	orrs	r2, r4
 801bf44:	4547      	cmp	r7, r8
 801bf46:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801bf4a:	bf8c      	ite	hi
 801bf4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bf50:	2200      	movls	r2, #0
 801bf52:	4083      	lsls	r3, r0
 801bf54:	40ca      	lsrs	r2, r1
 801bf56:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bf5a:	4313      	orrs	r3, r2
 801bf5c:	e7de      	b.n	801bf1c <__b2d+0x48>
 801bf5e:	ea42 0501 	orr.w	r5, r2, r1
 801bf62:	e7db      	b.n	801bf1c <__b2d+0x48>
 801bf64:	3ff00000 	.word	0x3ff00000

0801bf68 <__d2b>:
 801bf68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf6c:	460f      	mov	r7, r1
 801bf6e:	2101      	movs	r1, #1
 801bf70:	ec59 8b10 	vmov	r8, r9, d0
 801bf74:	4616      	mov	r6, r2
 801bf76:	f7ff fc1b 	bl	801b7b0 <_Balloc>
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	b930      	cbnz	r0, 801bf8c <__d2b+0x24>
 801bf7e:	4602      	mov	r2, r0
 801bf80:	4b24      	ldr	r3, [pc, #144]	; (801c014 <__d2b+0xac>)
 801bf82:	4825      	ldr	r0, [pc, #148]	; (801c018 <__d2b+0xb0>)
 801bf84:	f240 310f 	movw	r1, #783	; 0x30f
 801bf88:	f001 f95e 	bl	801d248 <__assert_func>
 801bf8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bf90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bf94:	bb2d      	cbnz	r5, 801bfe2 <__d2b+0x7a>
 801bf96:	9301      	str	r3, [sp, #4]
 801bf98:	f1b8 0300 	subs.w	r3, r8, #0
 801bf9c:	d026      	beq.n	801bfec <__d2b+0x84>
 801bf9e:	4668      	mov	r0, sp
 801bfa0:	9300      	str	r3, [sp, #0]
 801bfa2:	f7ff fd17 	bl	801b9d4 <__lo0bits>
 801bfa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bfaa:	b1e8      	cbz	r0, 801bfe8 <__d2b+0x80>
 801bfac:	f1c0 0320 	rsb	r3, r0, #32
 801bfb0:	fa02 f303 	lsl.w	r3, r2, r3
 801bfb4:	430b      	orrs	r3, r1
 801bfb6:	40c2      	lsrs	r2, r0
 801bfb8:	6163      	str	r3, [r4, #20]
 801bfba:	9201      	str	r2, [sp, #4]
 801bfbc:	9b01      	ldr	r3, [sp, #4]
 801bfbe:	61a3      	str	r3, [r4, #24]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	bf14      	ite	ne
 801bfc4:	2202      	movne	r2, #2
 801bfc6:	2201      	moveq	r2, #1
 801bfc8:	6122      	str	r2, [r4, #16]
 801bfca:	b1bd      	cbz	r5, 801bffc <__d2b+0x94>
 801bfcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bfd0:	4405      	add	r5, r0
 801bfd2:	603d      	str	r5, [r7, #0]
 801bfd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bfd8:	6030      	str	r0, [r6, #0]
 801bfda:	4620      	mov	r0, r4
 801bfdc:	b003      	add	sp, #12
 801bfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bfe6:	e7d6      	b.n	801bf96 <__d2b+0x2e>
 801bfe8:	6161      	str	r1, [r4, #20]
 801bfea:	e7e7      	b.n	801bfbc <__d2b+0x54>
 801bfec:	a801      	add	r0, sp, #4
 801bfee:	f7ff fcf1 	bl	801b9d4 <__lo0bits>
 801bff2:	9b01      	ldr	r3, [sp, #4]
 801bff4:	6163      	str	r3, [r4, #20]
 801bff6:	3020      	adds	r0, #32
 801bff8:	2201      	movs	r2, #1
 801bffa:	e7e5      	b.n	801bfc8 <__d2b+0x60>
 801bffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c004:	6038      	str	r0, [r7, #0]
 801c006:	6918      	ldr	r0, [r3, #16]
 801c008:	f7ff fcc4 	bl	801b994 <__hi0bits>
 801c00c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c010:	e7e2      	b.n	801bfd8 <__d2b+0x70>
 801c012:	bf00      	nop
 801c014:	0801e67d 	.word	0x0801e67d
 801c018:	0801e68e 	.word	0x0801e68e

0801c01c <__ratio>:
 801c01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c020:	4688      	mov	r8, r1
 801c022:	4669      	mov	r1, sp
 801c024:	4681      	mov	r9, r0
 801c026:	f7ff ff55 	bl	801bed4 <__b2d>
 801c02a:	a901      	add	r1, sp, #4
 801c02c:	4640      	mov	r0, r8
 801c02e:	ec55 4b10 	vmov	r4, r5, d0
 801c032:	ee10 aa10 	vmov	sl, s0
 801c036:	f7ff ff4d 	bl	801bed4 <__b2d>
 801c03a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801c03e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801c042:	1ad2      	subs	r2, r2, r3
 801c044:	e9dd 3100 	ldrd	r3, r1, [sp]
 801c048:	1a5b      	subs	r3, r3, r1
 801c04a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801c04e:	ec57 6b10 	vmov	r6, r7, d0
 801c052:	2b00      	cmp	r3, #0
 801c054:	bfd6      	itet	le
 801c056:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c05a:	462a      	movgt	r2, r5
 801c05c:	463a      	movle	r2, r7
 801c05e:	46ab      	mov	fp, r5
 801c060:	bfd6      	itet	le
 801c062:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801c066:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801c06a:	ee00 3a90 	vmovle	s1, r3
 801c06e:	ec4b ab17 	vmov	d7, sl, fp
 801c072:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801c076:	b003      	add	sp, #12
 801c078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c07c <__copybits>:
 801c07c:	3901      	subs	r1, #1
 801c07e:	b570      	push	{r4, r5, r6, lr}
 801c080:	1149      	asrs	r1, r1, #5
 801c082:	6914      	ldr	r4, [r2, #16]
 801c084:	3101      	adds	r1, #1
 801c086:	f102 0314 	add.w	r3, r2, #20
 801c08a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c08e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c092:	1f05      	subs	r5, r0, #4
 801c094:	42a3      	cmp	r3, r4
 801c096:	d30c      	bcc.n	801c0b2 <__copybits+0x36>
 801c098:	1aa3      	subs	r3, r4, r2
 801c09a:	3b11      	subs	r3, #17
 801c09c:	f023 0303 	bic.w	r3, r3, #3
 801c0a0:	3211      	adds	r2, #17
 801c0a2:	42a2      	cmp	r2, r4
 801c0a4:	bf88      	it	hi
 801c0a6:	2300      	movhi	r3, #0
 801c0a8:	4418      	add	r0, r3
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	4288      	cmp	r0, r1
 801c0ae:	d305      	bcc.n	801c0bc <__copybits+0x40>
 801c0b0:	bd70      	pop	{r4, r5, r6, pc}
 801c0b2:	f853 6b04 	ldr.w	r6, [r3], #4
 801c0b6:	f845 6f04 	str.w	r6, [r5, #4]!
 801c0ba:	e7eb      	b.n	801c094 <__copybits+0x18>
 801c0bc:	f840 3b04 	str.w	r3, [r0], #4
 801c0c0:	e7f4      	b.n	801c0ac <__copybits+0x30>

0801c0c2 <__any_on>:
 801c0c2:	f100 0214 	add.w	r2, r0, #20
 801c0c6:	6900      	ldr	r0, [r0, #16]
 801c0c8:	114b      	asrs	r3, r1, #5
 801c0ca:	4298      	cmp	r0, r3
 801c0cc:	b510      	push	{r4, lr}
 801c0ce:	db11      	blt.n	801c0f4 <__any_on+0x32>
 801c0d0:	dd0a      	ble.n	801c0e8 <__any_on+0x26>
 801c0d2:	f011 011f 	ands.w	r1, r1, #31
 801c0d6:	d007      	beq.n	801c0e8 <__any_on+0x26>
 801c0d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c0dc:	fa24 f001 	lsr.w	r0, r4, r1
 801c0e0:	fa00 f101 	lsl.w	r1, r0, r1
 801c0e4:	428c      	cmp	r4, r1
 801c0e6:	d10b      	bne.n	801c100 <__any_on+0x3e>
 801c0e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c0ec:	4293      	cmp	r3, r2
 801c0ee:	d803      	bhi.n	801c0f8 <__any_on+0x36>
 801c0f0:	2000      	movs	r0, #0
 801c0f2:	bd10      	pop	{r4, pc}
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	e7f7      	b.n	801c0e8 <__any_on+0x26>
 801c0f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c0fc:	2900      	cmp	r1, #0
 801c0fe:	d0f5      	beq.n	801c0ec <__any_on+0x2a>
 801c100:	2001      	movs	r0, #1
 801c102:	e7f6      	b.n	801c0f2 <__any_on+0x30>

0801c104 <sulp>:
 801c104:	b570      	push	{r4, r5, r6, lr}
 801c106:	4604      	mov	r4, r0
 801c108:	460d      	mov	r5, r1
 801c10a:	4616      	mov	r6, r2
 801c10c:	ec45 4b10 	vmov	d0, r4, r5
 801c110:	f7ff feba 	bl	801be88 <__ulp>
 801c114:	b17e      	cbz	r6, 801c136 <sulp+0x32>
 801c116:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c11a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c11e:	2b00      	cmp	r3, #0
 801c120:	dd09      	ble.n	801c136 <sulp+0x32>
 801c122:	051b      	lsls	r3, r3, #20
 801c124:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801c128:	2000      	movs	r0, #0
 801c12a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801c12e:	ec41 0b17 	vmov	d7, r0, r1
 801c132:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c136:	bd70      	pop	{r4, r5, r6, pc}

0801c138 <_strtod_l>:
 801c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c13c:	ed2d 8b0e 	vpush	{d8-d14}
 801c140:	b097      	sub	sp, #92	; 0x5c
 801c142:	4604      	mov	r4, r0
 801c144:	920d      	str	r2, [sp, #52]	; 0x34
 801c146:	2200      	movs	r2, #0
 801c148:	9212      	str	r2, [sp, #72]	; 0x48
 801c14a:	468a      	mov	sl, r1
 801c14c:	f04f 0800 	mov.w	r8, #0
 801c150:	f04f 0900 	mov.w	r9, #0
 801c154:	460a      	mov	r2, r1
 801c156:	9211      	str	r2, [sp, #68]	; 0x44
 801c158:	7811      	ldrb	r1, [r2, #0]
 801c15a:	292b      	cmp	r1, #43	; 0x2b
 801c15c:	d04c      	beq.n	801c1f8 <_strtod_l+0xc0>
 801c15e:	d839      	bhi.n	801c1d4 <_strtod_l+0x9c>
 801c160:	290d      	cmp	r1, #13
 801c162:	d833      	bhi.n	801c1cc <_strtod_l+0x94>
 801c164:	2908      	cmp	r1, #8
 801c166:	d833      	bhi.n	801c1d0 <_strtod_l+0x98>
 801c168:	2900      	cmp	r1, #0
 801c16a:	d03c      	beq.n	801c1e6 <_strtod_l+0xae>
 801c16c:	2200      	movs	r2, #0
 801c16e:	9208      	str	r2, [sp, #32]
 801c170:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c172:	7832      	ldrb	r2, [r6, #0]
 801c174:	2a30      	cmp	r2, #48	; 0x30
 801c176:	f040 80b8 	bne.w	801c2ea <_strtod_l+0x1b2>
 801c17a:	7872      	ldrb	r2, [r6, #1]
 801c17c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801c180:	2a58      	cmp	r2, #88	; 0x58
 801c182:	d170      	bne.n	801c266 <_strtod_l+0x12e>
 801c184:	9302      	str	r3, [sp, #8]
 801c186:	9b08      	ldr	r3, [sp, #32]
 801c188:	9301      	str	r3, [sp, #4]
 801c18a:	ab12      	add	r3, sp, #72	; 0x48
 801c18c:	9300      	str	r3, [sp, #0]
 801c18e:	4a91      	ldr	r2, [pc, #580]	; (801c3d4 <_strtod_l+0x29c>)
 801c190:	ab13      	add	r3, sp, #76	; 0x4c
 801c192:	a911      	add	r1, sp, #68	; 0x44
 801c194:	4620      	mov	r0, r4
 801c196:	f001 f8f3 	bl	801d380 <__gethex>
 801c19a:	f010 070f 	ands.w	r7, r0, #15
 801c19e:	4605      	mov	r5, r0
 801c1a0:	d005      	beq.n	801c1ae <_strtod_l+0x76>
 801c1a2:	2f06      	cmp	r7, #6
 801c1a4:	d12a      	bne.n	801c1fc <_strtod_l+0xc4>
 801c1a6:	3601      	adds	r6, #1
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	9611      	str	r6, [sp, #68]	; 0x44
 801c1ac:	9308      	str	r3, [sp, #32]
 801c1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	f040 8555 	bne.w	801cc60 <_strtod_l+0xb28>
 801c1b6:	9b08      	ldr	r3, [sp, #32]
 801c1b8:	ec49 8b10 	vmov	d0, r8, r9
 801c1bc:	b1cb      	cbz	r3, 801c1f2 <_strtod_l+0xba>
 801c1be:	eeb1 0b40 	vneg.f64	d0, d0
 801c1c2:	b017      	add	sp, #92	; 0x5c
 801c1c4:	ecbd 8b0e 	vpop	{d8-d14}
 801c1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1cc:	2920      	cmp	r1, #32
 801c1ce:	d1cd      	bne.n	801c16c <_strtod_l+0x34>
 801c1d0:	3201      	adds	r2, #1
 801c1d2:	e7c0      	b.n	801c156 <_strtod_l+0x1e>
 801c1d4:	292d      	cmp	r1, #45	; 0x2d
 801c1d6:	d1c9      	bne.n	801c16c <_strtod_l+0x34>
 801c1d8:	2101      	movs	r1, #1
 801c1da:	9108      	str	r1, [sp, #32]
 801c1dc:	1c51      	adds	r1, r2, #1
 801c1de:	9111      	str	r1, [sp, #68]	; 0x44
 801c1e0:	7852      	ldrb	r2, [r2, #1]
 801c1e2:	2a00      	cmp	r2, #0
 801c1e4:	d1c4      	bne.n	801c170 <_strtod_l+0x38>
 801c1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c1e8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	f040 8535 	bne.w	801cc5c <_strtod_l+0xb24>
 801c1f2:	ec49 8b10 	vmov	d0, r8, r9
 801c1f6:	e7e4      	b.n	801c1c2 <_strtod_l+0x8a>
 801c1f8:	2100      	movs	r1, #0
 801c1fa:	e7ee      	b.n	801c1da <_strtod_l+0xa2>
 801c1fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c1fe:	b13a      	cbz	r2, 801c210 <_strtod_l+0xd8>
 801c200:	2135      	movs	r1, #53	; 0x35
 801c202:	a814      	add	r0, sp, #80	; 0x50
 801c204:	f7ff ff3a 	bl	801c07c <__copybits>
 801c208:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c20a:	4620      	mov	r0, r4
 801c20c:	f7ff fb10 	bl	801b830 <_Bfree>
 801c210:	1e7b      	subs	r3, r7, #1
 801c212:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c214:	2b04      	cmp	r3, #4
 801c216:	d806      	bhi.n	801c226 <_strtod_l+0xee>
 801c218:	e8df f003 	tbb	[pc, r3]
 801c21c:	201d0314 	.word	0x201d0314
 801c220:	14          	.byte	0x14
 801c221:	00          	.byte	0x00
 801c222:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801c226:	05eb      	lsls	r3, r5, #23
 801c228:	bf48      	it	mi
 801c22a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801c22e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c232:	0d1b      	lsrs	r3, r3, #20
 801c234:	051b      	lsls	r3, r3, #20
 801c236:	2b00      	cmp	r3, #0
 801c238:	d1b9      	bne.n	801c1ae <_strtod_l+0x76>
 801c23a:	f7fe fb83 	bl	801a944 <__errno>
 801c23e:	2322      	movs	r3, #34	; 0x22
 801c240:	6003      	str	r3, [r0, #0]
 801c242:	e7b4      	b.n	801c1ae <_strtod_l+0x76>
 801c244:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801c248:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c24c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c250:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c254:	e7e7      	b.n	801c226 <_strtod_l+0xee>
 801c256:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801c3dc <_strtod_l+0x2a4>
 801c25a:	e7e4      	b.n	801c226 <_strtod_l+0xee>
 801c25c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c260:	f04f 38ff 	mov.w	r8, #4294967295
 801c264:	e7df      	b.n	801c226 <_strtod_l+0xee>
 801c266:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c268:	1c5a      	adds	r2, r3, #1
 801c26a:	9211      	str	r2, [sp, #68]	; 0x44
 801c26c:	785b      	ldrb	r3, [r3, #1]
 801c26e:	2b30      	cmp	r3, #48	; 0x30
 801c270:	d0f9      	beq.n	801c266 <_strtod_l+0x12e>
 801c272:	2b00      	cmp	r3, #0
 801c274:	d09b      	beq.n	801c1ae <_strtod_l+0x76>
 801c276:	2301      	movs	r3, #1
 801c278:	9306      	str	r3, [sp, #24]
 801c27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c27c:	9309      	str	r3, [sp, #36]	; 0x24
 801c27e:	2300      	movs	r3, #0
 801c280:	9305      	str	r3, [sp, #20]
 801c282:	9307      	str	r3, [sp, #28]
 801c284:	461e      	mov	r6, r3
 801c286:	220a      	movs	r2, #10
 801c288:	9811      	ldr	r0, [sp, #68]	; 0x44
 801c28a:	7805      	ldrb	r5, [r0, #0]
 801c28c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801c290:	b2d9      	uxtb	r1, r3
 801c292:	2909      	cmp	r1, #9
 801c294:	d92b      	bls.n	801c2ee <_strtod_l+0x1b6>
 801c296:	4950      	ldr	r1, [pc, #320]	; (801c3d8 <_strtod_l+0x2a0>)
 801c298:	2201      	movs	r2, #1
 801c29a:	f000 ffa9 	bl	801d1f0 <strncmp>
 801c29e:	2800      	cmp	r0, #0
 801c2a0:	d035      	beq.n	801c30e <_strtod_l+0x1d6>
 801c2a2:	2000      	movs	r0, #0
 801c2a4:	462a      	mov	r2, r5
 801c2a6:	4633      	mov	r3, r6
 801c2a8:	4683      	mov	fp, r0
 801c2aa:	4601      	mov	r1, r0
 801c2ac:	2a65      	cmp	r2, #101	; 0x65
 801c2ae:	d001      	beq.n	801c2b4 <_strtod_l+0x17c>
 801c2b0:	2a45      	cmp	r2, #69	; 0x45
 801c2b2:	d118      	bne.n	801c2e6 <_strtod_l+0x1ae>
 801c2b4:	b91b      	cbnz	r3, 801c2be <_strtod_l+0x186>
 801c2b6:	9b06      	ldr	r3, [sp, #24]
 801c2b8:	4303      	orrs	r3, r0
 801c2ba:	d094      	beq.n	801c1e6 <_strtod_l+0xae>
 801c2bc:	2300      	movs	r3, #0
 801c2be:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 801c2c2:	f10a 0201 	add.w	r2, sl, #1
 801c2c6:	9211      	str	r2, [sp, #68]	; 0x44
 801c2c8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c2cc:	2a2b      	cmp	r2, #43	; 0x2b
 801c2ce:	d075      	beq.n	801c3bc <_strtod_l+0x284>
 801c2d0:	2a2d      	cmp	r2, #45	; 0x2d
 801c2d2:	d07b      	beq.n	801c3cc <_strtod_l+0x294>
 801c2d4:	f04f 0e00 	mov.w	lr, #0
 801c2d8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801c2dc:	2d09      	cmp	r5, #9
 801c2de:	f240 8083 	bls.w	801c3e8 <_strtod_l+0x2b0>
 801c2e2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801c2e6:	2500      	movs	r5, #0
 801c2e8:	e09e      	b.n	801c428 <_strtod_l+0x2f0>
 801c2ea:	2300      	movs	r3, #0
 801c2ec:	e7c4      	b.n	801c278 <_strtod_l+0x140>
 801c2ee:	2e08      	cmp	r6, #8
 801c2f0:	bfd5      	itete	le
 801c2f2:	9907      	ldrle	r1, [sp, #28]
 801c2f4:	9905      	ldrgt	r1, [sp, #20]
 801c2f6:	fb02 3301 	mlale	r3, r2, r1, r3
 801c2fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c2fe:	f100 0001 	add.w	r0, r0, #1
 801c302:	bfd4      	ite	le
 801c304:	9307      	strle	r3, [sp, #28]
 801c306:	9305      	strgt	r3, [sp, #20]
 801c308:	3601      	adds	r6, #1
 801c30a:	9011      	str	r0, [sp, #68]	; 0x44
 801c30c:	e7bc      	b.n	801c288 <_strtod_l+0x150>
 801c30e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c310:	1c5a      	adds	r2, r3, #1
 801c312:	9211      	str	r2, [sp, #68]	; 0x44
 801c314:	785a      	ldrb	r2, [r3, #1]
 801c316:	b3ae      	cbz	r6, 801c384 <_strtod_l+0x24c>
 801c318:	4683      	mov	fp, r0
 801c31a:	4633      	mov	r3, r6
 801c31c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801c320:	2909      	cmp	r1, #9
 801c322:	d912      	bls.n	801c34a <_strtod_l+0x212>
 801c324:	2101      	movs	r1, #1
 801c326:	e7c1      	b.n	801c2ac <_strtod_l+0x174>
 801c328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c32a:	1c5a      	adds	r2, r3, #1
 801c32c:	9211      	str	r2, [sp, #68]	; 0x44
 801c32e:	785a      	ldrb	r2, [r3, #1]
 801c330:	3001      	adds	r0, #1
 801c332:	2a30      	cmp	r2, #48	; 0x30
 801c334:	d0f8      	beq.n	801c328 <_strtod_l+0x1f0>
 801c336:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801c33a:	2b08      	cmp	r3, #8
 801c33c:	f200 8495 	bhi.w	801cc6a <_strtod_l+0xb32>
 801c340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c342:	9309      	str	r3, [sp, #36]	; 0x24
 801c344:	4683      	mov	fp, r0
 801c346:	2000      	movs	r0, #0
 801c348:	4603      	mov	r3, r0
 801c34a:	3a30      	subs	r2, #48	; 0x30
 801c34c:	f100 0101 	add.w	r1, r0, #1
 801c350:	d012      	beq.n	801c378 <_strtod_l+0x240>
 801c352:	448b      	add	fp, r1
 801c354:	eb00 0c03 	add.w	ip, r0, r3
 801c358:	4619      	mov	r1, r3
 801c35a:	250a      	movs	r5, #10
 801c35c:	4561      	cmp	r1, ip
 801c35e:	d113      	bne.n	801c388 <_strtod_l+0x250>
 801c360:	1819      	adds	r1, r3, r0
 801c362:	2908      	cmp	r1, #8
 801c364:	f103 0301 	add.w	r3, r3, #1
 801c368:	4403      	add	r3, r0
 801c36a:	dc1b      	bgt.n	801c3a4 <_strtod_l+0x26c>
 801c36c:	9807      	ldr	r0, [sp, #28]
 801c36e:	210a      	movs	r1, #10
 801c370:	fb01 2200 	mla	r2, r1, r0, r2
 801c374:	9207      	str	r2, [sp, #28]
 801c376:	2100      	movs	r1, #0
 801c378:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c37a:	1c50      	adds	r0, r2, #1
 801c37c:	9011      	str	r0, [sp, #68]	; 0x44
 801c37e:	7852      	ldrb	r2, [r2, #1]
 801c380:	4608      	mov	r0, r1
 801c382:	e7cb      	b.n	801c31c <_strtod_l+0x1e4>
 801c384:	4630      	mov	r0, r6
 801c386:	e7d4      	b.n	801c332 <_strtod_l+0x1fa>
 801c388:	2908      	cmp	r1, #8
 801c38a:	f101 0101 	add.w	r1, r1, #1
 801c38e:	dc03      	bgt.n	801c398 <_strtod_l+0x260>
 801c390:	9f07      	ldr	r7, [sp, #28]
 801c392:	436f      	muls	r7, r5
 801c394:	9707      	str	r7, [sp, #28]
 801c396:	e7e1      	b.n	801c35c <_strtod_l+0x224>
 801c398:	2910      	cmp	r1, #16
 801c39a:	bfde      	ittt	le
 801c39c:	9f05      	ldrle	r7, [sp, #20]
 801c39e:	436f      	mulle	r7, r5
 801c3a0:	9705      	strle	r7, [sp, #20]
 801c3a2:	e7db      	b.n	801c35c <_strtod_l+0x224>
 801c3a4:	2b10      	cmp	r3, #16
 801c3a6:	bfdf      	itttt	le
 801c3a8:	9805      	ldrle	r0, [sp, #20]
 801c3aa:	210a      	movle	r1, #10
 801c3ac:	fb01 2200 	mlale	r2, r1, r0, r2
 801c3b0:	9205      	strle	r2, [sp, #20]
 801c3b2:	e7e0      	b.n	801c376 <_strtod_l+0x23e>
 801c3b4:	f04f 0b00 	mov.w	fp, #0
 801c3b8:	2101      	movs	r1, #1
 801c3ba:	e77c      	b.n	801c2b6 <_strtod_l+0x17e>
 801c3bc:	f04f 0e00 	mov.w	lr, #0
 801c3c0:	f10a 0202 	add.w	r2, sl, #2
 801c3c4:	9211      	str	r2, [sp, #68]	; 0x44
 801c3c6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801c3ca:	e785      	b.n	801c2d8 <_strtod_l+0x1a0>
 801c3cc:	f04f 0e01 	mov.w	lr, #1
 801c3d0:	e7f6      	b.n	801c3c0 <_strtod_l+0x288>
 801c3d2:	bf00      	nop
 801c3d4:	0801e7e8 	.word	0x0801e7e8
 801c3d8:	0801e7e4 	.word	0x0801e7e4
 801c3dc:	7ff00000 	.word	0x7ff00000
 801c3e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3e2:	1c55      	adds	r5, r2, #1
 801c3e4:	9511      	str	r5, [sp, #68]	; 0x44
 801c3e6:	7852      	ldrb	r2, [r2, #1]
 801c3e8:	2a30      	cmp	r2, #48	; 0x30
 801c3ea:	d0f9      	beq.n	801c3e0 <_strtod_l+0x2a8>
 801c3ec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801c3f0:	2d08      	cmp	r5, #8
 801c3f2:	f63f af78 	bhi.w	801c2e6 <_strtod_l+0x1ae>
 801c3f6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801c3fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3fc:	920a      	str	r2, [sp, #40]	; 0x28
 801c3fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c400:	1c55      	adds	r5, r2, #1
 801c402:	9511      	str	r5, [sp, #68]	; 0x44
 801c404:	7852      	ldrb	r2, [r2, #1]
 801c406:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801c40a:	2f09      	cmp	r7, #9
 801c40c:	d937      	bls.n	801c47e <_strtod_l+0x346>
 801c40e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c410:	1bed      	subs	r5, r5, r7
 801c412:	2d08      	cmp	r5, #8
 801c414:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801c418:	dc02      	bgt.n	801c420 <_strtod_l+0x2e8>
 801c41a:	4565      	cmp	r5, ip
 801c41c:	bfa8      	it	ge
 801c41e:	4665      	movge	r5, ip
 801c420:	f1be 0f00 	cmp.w	lr, #0
 801c424:	d000      	beq.n	801c428 <_strtod_l+0x2f0>
 801c426:	426d      	negs	r5, r5
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d14d      	bne.n	801c4c8 <_strtod_l+0x390>
 801c42c:	9b06      	ldr	r3, [sp, #24]
 801c42e:	4303      	orrs	r3, r0
 801c430:	f47f aebd 	bne.w	801c1ae <_strtod_l+0x76>
 801c434:	2900      	cmp	r1, #0
 801c436:	f47f aed6 	bne.w	801c1e6 <_strtod_l+0xae>
 801c43a:	2a69      	cmp	r2, #105	; 0x69
 801c43c:	d027      	beq.n	801c48e <_strtod_l+0x356>
 801c43e:	dc24      	bgt.n	801c48a <_strtod_l+0x352>
 801c440:	2a49      	cmp	r2, #73	; 0x49
 801c442:	d024      	beq.n	801c48e <_strtod_l+0x356>
 801c444:	2a4e      	cmp	r2, #78	; 0x4e
 801c446:	f47f aece 	bne.w	801c1e6 <_strtod_l+0xae>
 801c44a:	4995      	ldr	r1, [pc, #596]	; (801c6a0 <_strtod_l+0x568>)
 801c44c:	a811      	add	r0, sp, #68	; 0x44
 801c44e:	f001 f9d7 	bl	801d800 <__match>
 801c452:	2800      	cmp	r0, #0
 801c454:	f43f aec7 	beq.w	801c1e6 <_strtod_l+0xae>
 801c458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	2b28      	cmp	r3, #40	; 0x28
 801c45e:	d12d      	bne.n	801c4bc <_strtod_l+0x384>
 801c460:	4990      	ldr	r1, [pc, #576]	; (801c6a4 <_strtod_l+0x56c>)
 801c462:	aa14      	add	r2, sp, #80	; 0x50
 801c464:	a811      	add	r0, sp, #68	; 0x44
 801c466:	f001 f9df 	bl	801d828 <__hexnan>
 801c46a:	2805      	cmp	r0, #5
 801c46c:	d126      	bne.n	801c4bc <_strtod_l+0x384>
 801c46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c470:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801c474:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801c478:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801c47c:	e697      	b.n	801c1ae <_strtod_l+0x76>
 801c47e:	250a      	movs	r5, #10
 801c480:	fb05 2c0c 	mla	ip, r5, ip, r2
 801c484:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801c488:	e7b9      	b.n	801c3fe <_strtod_l+0x2c6>
 801c48a:	2a6e      	cmp	r2, #110	; 0x6e
 801c48c:	e7db      	b.n	801c446 <_strtod_l+0x30e>
 801c48e:	4986      	ldr	r1, [pc, #536]	; (801c6a8 <_strtod_l+0x570>)
 801c490:	a811      	add	r0, sp, #68	; 0x44
 801c492:	f001 f9b5 	bl	801d800 <__match>
 801c496:	2800      	cmp	r0, #0
 801c498:	f43f aea5 	beq.w	801c1e6 <_strtod_l+0xae>
 801c49c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c49e:	4983      	ldr	r1, [pc, #524]	; (801c6ac <_strtod_l+0x574>)
 801c4a0:	3b01      	subs	r3, #1
 801c4a2:	a811      	add	r0, sp, #68	; 0x44
 801c4a4:	9311      	str	r3, [sp, #68]	; 0x44
 801c4a6:	f001 f9ab 	bl	801d800 <__match>
 801c4aa:	b910      	cbnz	r0, 801c4b2 <_strtod_l+0x37a>
 801c4ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c4ae:	3301      	adds	r3, #1
 801c4b0:	9311      	str	r3, [sp, #68]	; 0x44
 801c4b2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801c6c0 <_strtod_l+0x588>
 801c4b6:	f04f 0800 	mov.w	r8, #0
 801c4ba:	e678      	b.n	801c1ae <_strtod_l+0x76>
 801c4bc:	487c      	ldr	r0, [pc, #496]	; (801c6b0 <_strtod_l+0x578>)
 801c4be:	f000 febb 	bl	801d238 <nan>
 801c4c2:	ec59 8b10 	vmov	r8, r9, d0
 801c4c6:	e672      	b.n	801c1ae <_strtod_l+0x76>
 801c4c8:	eddd 7a07 	vldr	s15, [sp, #28]
 801c4cc:	eba5 020b 	sub.w	r2, r5, fp
 801c4d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c4d4:	2e00      	cmp	r6, #0
 801c4d6:	bf08      	it	eq
 801c4d8:	461e      	moveq	r6, r3
 801c4da:	2b10      	cmp	r3, #16
 801c4dc:	9206      	str	r2, [sp, #24]
 801c4de:	461a      	mov	r2, r3
 801c4e0:	bfa8      	it	ge
 801c4e2:	2210      	movge	r2, #16
 801c4e4:	2b09      	cmp	r3, #9
 801c4e6:	ec59 8b17 	vmov	r8, r9, d7
 801c4ea:	dd0c      	ble.n	801c506 <_strtod_l+0x3ce>
 801c4ec:	4971      	ldr	r1, [pc, #452]	; (801c6b4 <_strtod_l+0x57c>)
 801c4ee:	eddd 6a05 	vldr	s13, [sp, #20]
 801c4f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801c4f6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801c4fa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801c4fe:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c502:	ec59 8b16 	vmov	r8, r9, d6
 801c506:	2b0f      	cmp	r3, #15
 801c508:	dc37      	bgt.n	801c57a <_strtod_l+0x442>
 801c50a:	9906      	ldr	r1, [sp, #24]
 801c50c:	2900      	cmp	r1, #0
 801c50e:	f43f ae4e 	beq.w	801c1ae <_strtod_l+0x76>
 801c512:	dd23      	ble.n	801c55c <_strtod_l+0x424>
 801c514:	2916      	cmp	r1, #22
 801c516:	dc0b      	bgt.n	801c530 <_strtod_l+0x3f8>
 801c518:	4b66      	ldr	r3, [pc, #408]	; (801c6b4 <_strtod_l+0x57c>)
 801c51a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c51e:	ed93 7b00 	vldr	d7, [r3]
 801c522:	ec49 8b16 	vmov	d6, r8, r9
 801c526:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c52a:	ec59 8b17 	vmov	r8, r9, d7
 801c52e:	e63e      	b.n	801c1ae <_strtod_l+0x76>
 801c530:	9806      	ldr	r0, [sp, #24]
 801c532:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801c536:	4281      	cmp	r1, r0
 801c538:	db1f      	blt.n	801c57a <_strtod_l+0x442>
 801c53a:	4a5e      	ldr	r2, [pc, #376]	; (801c6b4 <_strtod_l+0x57c>)
 801c53c:	f1c3 030f 	rsb	r3, r3, #15
 801c540:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801c544:	ed91 7b00 	vldr	d7, [r1]
 801c548:	ec49 8b16 	vmov	d6, r8, r9
 801c54c:	1ac3      	subs	r3, r0, r3
 801c54e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801c552:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c556:	ed92 6b00 	vldr	d6, [r2]
 801c55a:	e7e4      	b.n	801c526 <_strtod_l+0x3ee>
 801c55c:	9906      	ldr	r1, [sp, #24]
 801c55e:	3116      	adds	r1, #22
 801c560:	db0b      	blt.n	801c57a <_strtod_l+0x442>
 801c562:	4b54      	ldr	r3, [pc, #336]	; (801c6b4 <_strtod_l+0x57c>)
 801c564:	ebab 0505 	sub.w	r5, fp, r5
 801c568:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801c56c:	ed95 7b00 	vldr	d7, [r5]
 801c570:	ec49 8b16 	vmov	d6, r8, r9
 801c574:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c578:	e7d7      	b.n	801c52a <_strtod_l+0x3f2>
 801c57a:	9906      	ldr	r1, [sp, #24]
 801c57c:	1a9a      	subs	r2, r3, r2
 801c57e:	440a      	add	r2, r1
 801c580:	2a00      	cmp	r2, #0
 801c582:	dd6e      	ble.n	801c662 <_strtod_l+0x52a>
 801c584:	f012 000f 	ands.w	r0, r2, #15
 801c588:	d00a      	beq.n	801c5a0 <_strtod_l+0x468>
 801c58a:	494a      	ldr	r1, [pc, #296]	; (801c6b4 <_strtod_l+0x57c>)
 801c58c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c590:	ed91 7b00 	vldr	d7, [r1]
 801c594:	ec49 8b16 	vmov	d6, r8, r9
 801c598:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c59c:	ec59 8b17 	vmov	r8, r9, d7
 801c5a0:	f032 020f 	bics.w	r2, r2, #15
 801c5a4:	d04e      	beq.n	801c644 <_strtod_l+0x50c>
 801c5a6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801c5aa:	dd22      	ble.n	801c5f2 <_strtod_l+0x4ba>
 801c5ac:	2500      	movs	r5, #0
 801c5ae:	462e      	mov	r6, r5
 801c5b0:	9507      	str	r5, [sp, #28]
 801c5b2:	462f      	mov	r7, r5
 801c5b4:	2322      	movs	r3, #34	; 0x22
 801c5b6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801c6c0 <_strtod_l+0x588>
 801c5ba:	6023      	str	r3, [r4, #0]
 801c5bc:	f04f 0800 	mov.w	r8, #0
 801c5c0:	9b07      	ldr	r3, [sp, #28]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	f43f adf3 	beq.w	801c1ae <_strtod_l+0x76>
 801c5c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c5ca:	4620      	mov	r0, r4
 801c5cc:	f7ff f930 	bl	801b830 <_Bfree>
 801c5d0:	4639      	mov	r1, r7
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	f7ff f92c 	bl	801b830 <_Bfree>
 801c5d8:	4631      	mov	r1, r6
 801c5da:	4620      	mov	r0, r4
 801c5dc:	f7ff f928 	bl	801b830 <_Bfree>
 801c5e0:	9907      	ldr	r1, [sp, #28]
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	f7ff f924 	bl	801b830 <_Bfree>
 801c5e8:	4629      	mov	r1, r5
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	f7ff f920 	bl	801b830 <_Bfree>
 801c5f0:	e5dd      	b.n	801c1ae <_strtod_l+0x76>
 801c5f2:	2000      	movs	r0, #0
 801c5f4:	ec49 8b17 	vmov	d7, r8, r9
 801c5f8:	4f2f      	ldr	r7, [pc, #188]	; (801c6b8 <_strtod_l+0x580>)
 801c5fa:	1112      	asrs	r2, r2, #4
 801c5fc:	4601      	mov	r1, r0
 801c5fe:	2a01      	cmp	r2, #1
 801c600:	dc23      	bgt.n	801c64a <_strtod_l+0x512>
 801c602:	b108      	cbz	r0, 801c608 <_strtod_l+0x4d0>
 801c604:	ec59 8b17 	vmov	r8, r9, d7
 801c608:	4a2b      	ldr	r2, [pc, #172]	; (801c6b8 <_strtod_l+0x580>)
 801c60a:	482c      	ldr	r0, [pc, #176]	; (801c6bc <_strtod_l+0x584>)
 801c60c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c610:	ed92 7b00 	vldr	d7, [r2]
 801c614:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c618:	ec49 8b16 	vmov	d6, r8, r9
 801c61c:	4a28      	ldr	r2, [pc, #160]	; (801c6c0 <_strtod_l+0x588>)
 801c61e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c622:	ee17 1a90 	vmov	r1, s15
 801c626:	400a      	ands	r2, r1
 801c628:	4282      	cmp	r2, r0
 801c62a:	ec59 8b17 	vmov	r8, r9, d7
 801c62e:	d8bd      	bhi.n	801c5ac <_strtod_l+0x474>
 801c630:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c634:	4282      	cmp	r2, r0
 801c636:	bf86      	itte	hi
 801c638:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801c6c4 <_strtod_l+0x58c>
 801c63c:	f04f 38ff 	movhi.w	r8, #4294967295
 801c640:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c644:	2200      	movs	r2, #0
 801c646:	9205      	str	r2, [sp, #20]
 801c648:	e076      	b.n	801c738 <_strtod_l+0x600>
 801c64a:	f012 0f01 	tst.w	r2, #1
 801c64e:	d004      	beq.n	801c65a <_strtod_l+0x522>
 801c650:	ed97 6b00 	vldr	d6, [r7]
 801c654:	2001      	movs	r0, #1
 801c656:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c65a:	3101      	adds	r1, #1
 801c65c:	1052      	asrs	r2, r2, #1
 801c65e:	3708      	adds	r7, #8
 801c660:	e7cd      	b.n	801c5fe <_strtod_l+0x4c6>
 801c662:	d0ef      	beq.n	801c644 <_strtod_l+0x50c>
 801c664:	4252      	negs	r2, r2
 801c666:	f012 000f 	ands.w	r0, r2, #15
 801c66a:	d00a      	beq.n	801c682 <_strtod_l+0x54a>
 801c66c:	4911      	ldr	r1, [pc, #68]	; (801c6b4 <_strtod_l+0x57c>)
 801c66e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c672:	ed91 7b00 	vldr	d7, [r1]
 801c676:	ec49 8b16 	vmov	d6, r8, r9
 801c67a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c67e:	ec59 8b17 	vmov	r8, r9, d7
 801c682:	1112      	asrs	r2, r2, #4
 801c684:	d0de      	beq.n	801c644 <_strtod_l+0x50c>
 801c686:	2a1f      	cmp	r2, #31
 801c688:	dd1e      	ble.n	801c6c8 <_strtod_l+0x590>
 801c68a:	2500      	movs	r5, #0
 801c68c:	462e      	mov	r6, r5
 801c68e:	9507      	str	r5, [sp, #28]
 801c690:	462f      	mov	r7, r5
 801c692:	2322      	movs	r3, #34	; 0x22
 801c694:	f04f 0800 	mov.w	r8, #0
 801c698:	f04f 0900 	mov.w	r9, #0
 801c69c:	6023      	str	r3, [r4, #0]
 801c69e:	e78f      	b.n	801c5c0 <_strtod_l+0x488>
 801c6a0:	0801e5d5 	.word	0x0801e5d5
 801c6a4:	0801e7fc 	.word	0x0801e7fc
 801c6a8:	0801e5cd 	.word	0x0801e5cd
 801c6ac:	0801e604 	.word	0x0801e604
 801c6b0:	0801e98d 	.word	0x0801e98d
 801c6b4:	0801e710 	.word	0x0801e710
 801c6b8:	0801e6e8 	.word	0x0801e6e8
 801c6bc:	7ca00000 	.word	0x7ca00000
 801c6c0:	7ff00000 	.word	0x7ff00000
 801c6c4:	7fefffff 	.word	0x7fefffff
 801c6c8:	f012 0110 	ands.w	r1, r2, #16
 801c6cc:	bf18      	it	ne
 801c6ce:	216a      	movne	r1, #106	; 0x6a
 801c6d0:	9105      	str	r1, [sp, #20]
 801c6d2:	ec49 8b17 	vmov	d7, r8, r9
 801c6d6:	49be      	ldr	r1, [pc, #760]	; (801c9d0 <_strtod_l+0x898>)
 801c6d8:	2000      	movs	r0, #0
 801c6da:	07d7      	lsls	r7, r2, #31
 801c6dc:	d504      	bpl.n	801c6e8 <_strtod_l+0x5b0>
 801c6de:	ed91 6b00 	vldr	d6, [r1]
 801c6e2:	2001      	movs	r0, #1
 801c6e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6e8:	1052      	asrs	r2, r2, #1
 801c6ea:	f101 0108 	add.w	r1, r1, #8
 801c6ee:	d1f4      	bne.n	801c6da <_strtod_l+0x5a2>
 801c6f0:	b108      	cbz	r0, 801c6f6 <_strtod_l+0x5be>
 801c6f2:	ec59 8b17 	vmov	r8, r9, d7
 801c6f6:	9a05      	ldr	r2, [sp, #20]
 801c6f8:	b1ba      	cbz	r2, 801c72a <_strtod_l+0x5f2>
 801c6fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c6fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c702:	2a00      	cmp	r2, #0
 801c704:	4648      	mov	r0, r9
 801c706:	dd10      	ble.n	801c72a <_strtod_l+0x5f2>
 801c708:	2a1f      	cmp	r2, #31
 801c70a:	f340 812c 	ble.w	801c966 <_strtod_l+0x82e>
 801c70e:	2a34      	cmp	r2, #52	; 0x34
 801c710:	bfde      	ittt	le
 801c712:	f04f 32ff 	movle.w	r2, #4294967295
 801c716:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c71a:	408a      	lslle	r2, r1
 801c71c:	f04f 0800 	mov.w	r8, #0
 801c720:	bfcc      	ite	gt
 801c722:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c726:	ea02 0900 	andle.w	r9, r2, r0
 801c72a:	ec49 8b17 	vmov	d7, r8, r9
 801c72e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c736:	d0a8      	beq.n	801c68a <_strtod_l+0x552>
 801c738:	9a07      	ldr	r2, [sp, #28]
 801c73a:	9200      	str	r2, [sp, #0]
 801c73c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c73e:	4632      	mov	r2, r6
 801c740:	4620      	mov	r0, r4
 801c742:	f7ff f8dd 	bl	801b900 <__s2b>
 801c746:	9007      	str	r0, [sp, #28]
 801c748:	2800      	cmp	r0, #0
 801c74a:	f43f af2f 	beq.w	801c5ac <_strtod_l+0x474>
 801c74e:	9a06      	ldr	r2, [sp, #24]
 801c750:	2a00      	cmp	r2, #0
 801c752:	ebab 0305 	sub.w	r3, fp, r5
 801c756:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801c9b0 <_strtod_l+0x878>
 801c75a:	bfa8      	it	ge
 801c75c:	2300      	movge	r3, #0
 801c75e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c9b8 <_strtod_l+0x880>
 801c762:	ed9f bb97 	vldr	d11, [pc, #604]	; 801c9c0 <_strtod_l+0x888>
 801c766:	9309      	str	r3, [sp, #36]	; 0x24
 801c768:	2500      	movs	r5, #0
 801c76a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c76e:	930c      	str	r3, [sp, #48]	; 0x30
 801c770:	462e      	mov	r6, r5
 801c772:	9b07      	ldr	r3, [sp, #28]
 801c774:	4620      	mov	r0, r4
 801c776:	6859      	ldr	r1, [r3, #4]
 801c778:	f7ff f81a 	bl	801b7b0 <_Balloc>
 801c77c:	4607      	mov	r7, r0
 801c77e:	2800      	cmp	r0, #0
 801c780:	f43f af18 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c784:	9b07      	ldr	r3, [sp, #28]
 801c786:	691a      	ldr	r2, [r3, #16]
 801c788:	3202      	adds	r2, #2
 801c78a:	f103 010c 	add.w	r1, r3, #12
 801c78e:	0092      	lsls	r2, r2, #2
 801c790:	300c      	adds	r0, #12
 801c792:	f7fe f904 	bl	801a99e <memcpy>
 801c796:	ec49 8b10 	vmov	d0, r8, r9
 801c79a:	aa14      	add	r2, sp, #80	; 0x50
 801c79c:	a913      	add	r1, sp, #76	; 0x4c
 801c79e:	4620      	mov	r0, r4
 801c7a0:	f7ff fbe2 	bl	801bf68 <__d2b>
 801c7a4:	ec49 8b18 	vmov	d8, r8, r9
 801c7a8:	9012      	str	r0, [sp, #72]	; 0x48
 801c7aa:	2800      	cmp	r0, #0
 801c7ac:	f43f af02 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c7b0:	2101      	movs	r1, #1
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	f7ff f93c 	bl	801ba30 <__i2b>
 801c7b8:	4606      	mov	r6, r0
 801c7ba:	2800      	cmp	r0, #0
 801c7bc:	f43f aefa 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c7c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c7c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	bfab      	itete	ge
 801c7c8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c7ca:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c7cc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c7d0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c7d4:	bfac      	ite	ge
 801c7d6:	eb03 0b02 	addge.w	fp, r3, r2
 801c7da:	eba2 0a03 	sublt.w	sl, r2, r3
 801c7de:	9a05      	ldr	r2, [sp, #20]
 801c7e0:	1a9b      	subs	r3, r3, r2
 801c7e2:	440b      	add	r3, r1
 801c7e4:	4a7b      	ldr	r2, [pc, #492]	; (801c9d4 <_strtod_l+0x89c>)
 801c7e6:	3b01      	subs	r3, #1
 801c7e8:	4293      	cmp	r3, r2
 801c7ea:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c7ee:	f280 80cd 	bge.w	801c98c <_strtod_l+0x854>
 801c7f2:	1ad2      	subs	r2, r2, r3
 801c7f4:	2a1f      	cmp	r2, #31
 801c7f6:	eba1 0102 	sub.w	r1, r1, r2
 801c7fa:	f04f 0001 	mov.w	r0, #1
 801c7fe:	f300 80b9 	bgt.w	801c974 <_strtod_l+0x83c>
 801c802:	fa00 f302 	lsl.w	r3, r0, r2
 801c806:	930b      	str	r3, [sp, #44]	; 0x2c
 801c808:	2300      	movs	r3, #0
 801c80a:	930a      	str	r3, [sp, #40]	; 0x28
 801c80c:	eb0b 0301 	add.w	r3, fp, r1
 801c810:	9a05      	ldr	r2, [sp, #20]
 801c812:	459b      	cmp	fp, r3
 801c814:	448a      	add	sl, r1
 801c816:	4492      	add	sl, r2
 801c818:	465a      	mov	r2, fp
 801c81a:	bfa8      	it	ge
 801c81c:	461a      	movge	r2, r3
 801c81e:	4552      	cmp	r2, sl
 801c820:	bfa8      	it	ge
 801c822:	4652      	movge	r2, sl
 801c824:	2a00      	cmp	r2, #0
 801c826:	bfc2      	ittt	gt
 801c828:	1a9b      	subgt	r3, r3, r2
 801c82a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c82e:	ebab 0b02 	subgt.w	fp, fp, r2
 801c832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c834:	2a00      	cmp	r2, #0
 801c836:	dd18      	ble.n	801c86a <_strtod_l+0x732>
 801c838:	4631      	mov	r1, r6
 801c83a:	4620      	mov	r0, r4
 801c83c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c83e:	f7ff f9b7 	bl	801bbb0 <__pow5mult>
 801c842:	4606      	mov	r6, r0
 801c844:	2800      	cmp	r0, #0
 801c846:	f43f aeb5 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c84a:	4601      	mov	r1, r0
 801c84c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c84e:	4620      	mov	r0, r4
 801c850:	f7ff f904 	bl	801ba5c <__multiply>
 801c854:	900e      	str	r0, [sp, #56]	; 0x38
 801c856:	2800      	cmp	r0, #0
 801c858:	f43f aeac 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c85c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c85e:	4620      	mov	r0, r4
 801c860:	f7fe ffe6 	bl	801b830 <_Bfree>
 801c864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c868:	9212      	str	r2, [sp, #72]	; 0x48
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	f300 8093 	bgt.w	801c996 <_strtod_l+0x85e>
 801c870:	9b06      	ldr	r3, [sp, #24]
 801c872:	2b00      	cmp	r3, #0
 801c874:	dd08      	ble.n	801c888 <_strtod_l+0x750>
 801c876:	4639      	mov	r1, r7
 801c878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c87a:	4620      	mov	r0, r4
 801c87c:	f7ff f998 	bl	801bbb0 <__pow5mult>
 801c880:	4607      	mov	r7, r0
 801c882:	2800      	cmp	r0, #0
 801c884:	f43f ae96 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c888:	f1ba 0f00 	cmp.w	sl, #0
 801c88c:	dd08      	ble.n	801c8a0 <_strtod_l+0x768>
 801c88e:	4639      	mov	r1, r7
 801c890:	4652      	mov	r2, sl
 801c892:	4620      	mov	r0, r4
 801c894:	f7ff f9e6 	bl	801bc64 <__lshift>
 801c898:	4607      	mov	r7, r0
 801c89a:	2800      	cmp	r0, #0
 801c89c:	f43f ae8a 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c8a0:	f1bb 0f00 	cmp.w	fp, #0
 801c8a4:	dd08      	ble.n	801c8b8 <_strtod_l+0x780>
 801c8a6:	4631      	mov	r1, r6
 801c8a8:	465a      	mov	r2, fp
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	f7ff f9da 	bl	801bc64 <__lshift>
 801c8b0:	4606      	mov	r6, r0
 801c8b2:	2800      	cmp	r0, #0
 801c8b4:	f43f ae7e 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c8b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c8ba:	463a      	mov	r2, r7
 801c8bc:	4620      	mov	r0, r4
 801c8be:	f7ff fa59 	bl	801bd74 <__mdiff>
 801c8c2:	4605      	mov	r5, r0
 801c8c4:	2800      	cmp	r0, #0
 801c8c6:	f43f ae75 	beq.w	801c5b4 <_strtod_l+0x47c>
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c8d0:	60c3      	str	r3, [r0, #12]
 801c8d2:	4631      	mov	r1, r6
 801c8d4:	f7ff fa32 	bl	801bd3c <__mcmp>
 801c8d8:	2800      	cmp	r0, #0
 801c8da:	da7f      	bge.n	801c9dc <_strtod_l+0x8a4>
 801c8dc:	ea5a 0a08 	orrs.w	sl, sl, r8
 801c8e0:	f040 80a5 	bne.w	801ca2e <_strtod_l+0x8f6>
 801c8e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	f040 80a0 	bne.w	801ca2e <_strtod_l+0x8f6>
 801c8ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c8f2:	0d1b      	lsrs	r3, r3, #20
 801c8f4:	051b      	lsls	r3, r3, #20
 801c8f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c8fa:	f240 8098 	bls.w	801ca2e <_strtod_l+0x8f6>
 801c8fe:	696b      	ldr	r3, [r5, #20]
 801c900:	b91b      	cbnz	r3, 801c90a <_strtod_l+0x7d2>
 801c902:	692b      	ldr	r3, [r5, #16]
 801c904:	2b01      	cmp	r3, #1
 801c906:	f340 8092 	ble.w	801ca2e <_strtod_l+0x8f6>
 801c90a:	4629      	mov	r1, r5
 801c90c:	2201      	movs	r2, #1
 801c90e:	4620      	mov	r0, r4
 801c910:	f7ff f9a8 	bl	801bc64 <__lshift>
 801c914:	4631      	mov	r1, r6
 801c916:	4605      	mov	r5, r0
 801c918:	f7ff fa10 	bl	801bd3c <__mcmp>
 801c91c:	2800      	cmp	r0, #0
 801c91e:	f340 8086 	ble.w	801ca2e <_strtod_l+0x8f6>
 801c922:	9905      	ldr	r1, [sp, #20]
 801c924:	4a2c      	ldr	r2, [pc, #176]	; (801c9d8 <_strtod_l+0x8a0>)
 801c926:	464b      	mov	r3, r9
 801c928:	2900      	cmp	r1, #0
 801c92a:	f000 809f 	beq.w	801ca6c <_strtod_l+0x934>
 801c92e:	ea02 0109 	and.w	r1, r2, r9
 801c932:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c936:	f300 8099 	bgt.w	801ca6c <_strtod_l+0x934>
 801c93a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c93e:	f77f aea8 	ble.w	801c692 <_strtod_l+0x55a>
 801c942:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c9c8 <_strtod_l+0x890>
 801c946:	ec49 8b16 	vmov	d6, r8, r9
 801c94a:	4b23      	ldr	r3, [pc, #140]	; (801c9d8 <_strtod_l+0x8a0>)
 801c94c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c950:	ee17 2a90 	vmov	r2, s15
 801c954:	4013      	ands	r3, r2
 801c956:	ec59 8b17 	vmov	r8, r9, d7
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	f47f ae34 	bne.w	801c5c8 <_strtod_l+0x490>
 801c960:	2322      	movs	r3, #34	; 0x22
 801c962:	6023      	str	r3, [r4, #0]
 801c964:	e630      	b.n	801c5c8 <_strtod_l+0x490>
 801c966:	f04f 31ff 	mov.w	r1, #4294967295
 801c96a:	fa01 f202 	lsl.w	r2, r1, r2
 801c96e:	ea02 0808 	and.w	r8, r2, r8
 801c972:	e6da      	b.n	801c72a <_strtod_l+0x5f2>
 801c974:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c978:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c97c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c980:	33e2      	adds	r3, #226	; 0xe2
 801c982:	fa00 f303 	lsl.w	r3, r0, r3
 801c986:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801c98a:	e73f      	b.n	801c80c <_strtod_l+0x6d4>
 801c98c:	2200      	movs	r2, #0
 801c98e:	2301      	movs	r3, #1
 801c990:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c994:	e73a      	b.n	801c80c <_strtod_l+0x6d4>
 801c996:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c998:	461a      	mov	r2, r3
 801c99a:	4620      	mov	r0, r4
 801c99c:	f7ff f962 	bl	801bc64 <__lshift>
 801c9a0:	9012      	str	r0, [sp, #72]	; 0x48
 801c9a2:	2800      	cmp	r0, #0
 801c9a4:	f47f af64 	bne.w	801c870 <_strtod_l+0x738>
 801c9a8:	e604      	b.n	801c5b4 <_strtod_l+0x47c>
 801c9aa:	bf00      	nop
 801c9ac:	f3af 8000 	nop.w
 801c9b0:	94a03595 	.word	0x94a03595
 801c9b4:	3fcfffff 	.word	0x3fcfffff
 801c9b8:	94a03595 	.word	0x94a03595
 801c9bc:	3fdfffff 	.word	0x3fdfffff
 801c9c0:	35afe535 	.word	0x35afe535
 801c9c4:	3fe00000 	.word	0x3fe00000
 801c9c8:	00000000 	.word	0x00000000
 801c9cc:	39500000 	.word	0x39500000
 801c9d0:	0801e810 	.word	0x0801e810
 801c9d4:	fffffc02 	.word	0xfffffc02
 801c9d8:	7ff00000 	.word	0x7ff00000
 801c9dc:	46cb      	mov	fp, r9
 801c9de:	d15f      	bne.n	801caa0 <_strtod_l+0x968>
 801c9e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c9e4:	f1ba 0f00 	cmp.w	sl, #0
 801c9e8:	d02a      	beq.n	801ca40 <_strtod_l+0x908>
 801c9ea:	4aa7      	ldr	r2, [pc, #668]	; (801cc88 <_strtod_l+0xb50>)
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	d12b      	bne.n	801ca48 <_strtod_l+0x910>
 801c9f0:	9b05      	ldr	r3, [sp, #20]
 801c9f2:	4642      	mov	r2, r8
 801c9f4:	b1fb      	cbz	r3, 801ca36 <_strtod_l+0x8fe>
 801c9f6:	4ba5      	ldr	r3, [pc, #660]	; (801cc8c <_strtod_l+0xb54>)
 801c9f8:	ea09 0303 	and.w	r3, r9, r3
 801c9fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ca00:	f04f 31ff 	mov.w	r1, #4294967295
 801ca04:	d81a      	bhi.n	801ca3c <_strtod_l+0x904>
 801ca06:	0d1b      	lsrs	r3, r3, #20
 801ca08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ca0c:	fa01 f303 	lsl.w	r3, r1, r3
 801ca10:	429a      	cmp	r2, r3
 801ca12:	d119      	bne.n	801ca48 <_strtod_l+0x910>
 801ca14:	4b9e      	ldr	r3, [pc, #632]	; (801cc90 <_strtod_l+0xb58>)
 801ca16:	459b      	cmp	fp, r3
 801ca18:	d102      	bne.n	801ca20 <_strtod_l+0x8e8>
 801ca1a:	3201      	adds	r2, #1
 801ca1c:	f43f adca 	beq.w	801c5b4 <_strtod_l+0x47c>
 801ca20:	4b9a      	ldr	r3, [pc, #616]	; (801cc8c <_strtod_l+0xb54>)
 801ca22:	ea0b 0303 	and.w	r3, fp, r3
 801ca26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801ca2a:	f04f 0800 	mov.w	r8, #0
 801ca2e:	9b05      	ldr	r3, [sp, #20]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d186      	bne.n	801c942 <_strtod_l+0x80a>
 801ca34:	e5c8      	b.n	801c5c8 <_strtod_l+0x490>
 801ca36:	f04f 33ff 	mov.w	r3, #4294967295
 801ca3a:	e7e9      	b.n	801ca10 <_strtod_l+0x8d8>
 801ca3c:	460b      	mov	r3, r1
 801ca3e:	e7e7      	b.n	801ca10 <_strtod_l+0x8d8>
 801ca40:	ea53 0308 	orrs.w	r3, r3, r8
 801ca44:	f43f af6d 	beq.w	801c922 <_strtod_l+0x7ea>
 801ca48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca4a:	b1cb      	cbz	r3, 801ca80 <_strtod_l+0x948>
 801ca4c:	ea13 0f0b 	tst.w	r3, fp
 801ca50:	d0ed      	beq.n	801ca2e <_strtod_l+0x8f6>
 801ca52:	9a05      	ldr	r2, [sp, #20]
 801ca54:	4640      	mov	r0, r8
 801ca56:	4649      	mov	r1, r9
 801ca58:	f1ba 0f00 	cmp.w	sl, #0
 801ca5c:	d014      	beq.n	801ca88 <_strtod_l+0x950>
 801ca5e:	f7ff fb51 	bl	801c104 <sulp>
 801ca62:	ee38 7b00 	vadd.f64	d7, d8, d0
 801ca66:	ec59 8b17 	vmov	r8, r9, d7
 801ca6a:	e7e0      	b.n	801ca2e <_strtod_l+0x8f6>
 801ca6c:	4013      	ands	r3, r2
 801ca6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ca72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801ca76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801ca7a:	f04f 38ff 	mov.w	r8, #4294967295
 801ca7e:	e7d6      	b.n	801ca2e <_strtod_l+0x8f6>
 801ca80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca82:	ea13 0f08 	tst.w	r3, r8
 801ca86:	e7e3      	b.n	801ca50 <_strtod_l+0x918>
 801ca88:	f7ff fb3c 	bl	801c104 <sulp>
 801ca8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801ca90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801ca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca98:	ec59 8b10 	vmov	r8, r9, d0
 801ca9c:	d1c7      	bne.n	801ca2e <_strtod_l+0x8f6>
 801ca9e:	e5f8      	b.n	801c692 <_strtod_l+0x55a>
 801caa0:	4631      	mov	r1, r6
 801caa2:	4628      	mov	r0, r5
 801caa4:	f7ff faba 	bl	801c01c <__ratio>
 801caa8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801caac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801cab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cab4:	d85f      	bhi.n	801cb76 <_strtod_l+0xa3e>
 801cab6:	f1ba 0f00 	cmp.w	sl, #0
 801caba:	d166      	bne.n	801cb8a <_strtod_l+0xa52>
 801cabc:	f1b8 0f00 	cmp.w	r8, #0
 801cac0:	d14d      	bne.n	801cb5e <_strtod_l+0xa26>
 801cac2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cac6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d162      	bne.n	801cb94 <_strtod_l+0xa5c>
 801cace:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801cad2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801cad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cada:	d401      	bmi.n	801cae0 <_strtod_l+0x9a8>
 801cadc:	ee20 db0d 	vmul.f64	d13, d0, d13
 801cae0:	eeb1 cb4d 	vneg.f64	d12, d13
 801cae4:	4869      	ldr	r0, [pc, #420]	; (801cc8c <_strtod_l+0xb54>)
 801cae6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801cc98 <_strtod_l+0xb60>
 801caea:	ea0b 0100 	and.w	r1, fp, r0
 801caee:	4561      	cmp	r1, ip
 801caf0:	ec53 2b1c 	vmov	r2, r3, d12
 801caf4:	d17a      	bne.n	801cbec <_strtod_l+0xab4>
 801caf6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801cafa:	ec49 8b10 	vmov	d0, r8, r9
 801cafe:	910a      	str	r1, [sp, #40]	; 0x28
 801cb00:	f7ff f9c2 	bl	801be88 <__ulp>
 801cb04:	ec49 8b1e 	vmov	d14, r8, r9
 801cb08:	4860      	ldr	r0, [pc, #384]	; (801cc8c <_strtod_l+0xb54>)
 801cb0a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801cb0e:	ee1e 3a90 	vmov	r3, s29
 801cb12:	4a60      	ldr	r2, [pc, #384]	; (801cc94 <_strtod_l+0xb5c>)
 801cb14:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cb16:	4018      	ands	r0, r3
 801cb18:	4290      	cmp	r0, r2
 801cb1a:	ec59 8b1e 	vmov	r8, r9, d14
 801cb1e:	d93c      	bls.n	801cb9a <_strtod_l+0xa62>
 801cb20:	ee18 2a90 	vmov	r2, s17
 801cb24:	4b5a      	ldr	r3, [pc, #360]	; (801cc90 <_strtod_l+0xb58>)
 801cb26:	429a      	cmp	r2, r3
 801cb28:	d104      	bne.n	801cb34 <_strtod_l+0x9fc>
 801cb2a:	ee18 3a10 	vmov	r3, s16
 801cb2e:	3301      	adds	r3, #1
 801cb30:	f43f ad40 	beq.w	801c5b4 <_strtod_l+0x47c>
 801cb34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801cc90 <_strtod_l+0xb58>
 801cb38:	f04f 38ff 	mov.w	r8, #4294967295
 801cb3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cb3e:	4620      	mov	r0, r4
 801cb40:	f7fe fe76 	bl	801b830 <_Bfree>
 801cb44:	4639      	mov	r1, r7
 801cb46:	4620      	mov	r0, r4
 801cb48:	f7fe fe72 	bl	801b830 <_Bfree>
 801cb4c:	4631      	mov	r1, r6
 801cb4e:	4620      	mov	r0, r4
 801cb50:	f7fe fe6e 	bl	801b830 <_Bfree>
 801cb54:	4629      	mov	r1, r5
 801cb56:	4620      	mov	r0, r4
 801cb58:	f7fe fe6a 	bl	801b830 <_Bfree>
 801cb5c:	e609      	b.n	801c772 <_strtod_l+0x63a>
 801cb5e:	f1b8 0f01 	cmp.w	r8, #1
 801cb62:	d103      	bne.n	801cb6c <_strtod_l+0xa34>
 801cb64:	f1b9 0f00 	cmp.w	r9, #0
 801cb68:	f43f ad93 	beq.w	801c692 <_strtod_l+0x55a>
 801cb6c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801cb70:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801cb74:	e7b6      	b.n	801cae4 <_strtod_l+0x9ac>
 801cb76:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801cb7a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801cb7e:	f1ba 0f00 	cmp.w	sl, #0
 801cb82:	d0ad      	beq.n	801cae0 <_strtod_l+0x9a8>
 801cb84:	eeb0 cb4d 	vmov.f64	d12, d13
 801cb88:	e7ac      	b.n	801cae4 <_strtod_l+0x9ac>
 801cb8a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801cb8e:	eeb0 db4c 	vmov.f64	d13, d12
 801cb92:	e7a7      	b.n	801cae4 <_strtod_l+0x9ac>
 801cb94:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801cb98:	e7a4      	b.n	801cae4 <_strtod_l+0x9ac>
 801cb9a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801cb9e:	9b05      	ldr	r3, [sp, #20]
 801cba0:	46cb      	mov	fp, r9
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d1ca      	bne.n	801cb3c <_strtod_l+0xa04>
 801cba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cbaa:	0d1b      	lsrs	r3, r3, #20
 801cbac:	051b      	lsls	r3, r3, #20
 801cbae:	4299      	cmp	r1, r3
 801cbb0:	d1c4      	bne.n	801cb3c <_strtod_l+0xa04>
 801cbb2:	ec51 0b1d 	vmov	r0, r1, d13
 801cbb6:	f7e3 fdd7 	bl	8000768 <__aeabi_d2lz>
 801cbba:	f7e3 fd8f 	bl	80006dc <__aeabi_l2d>
 801cbbe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801cbc2:	ec41 0b17 	vmov	d7, r0, r1
 801cbc6:	ea4b 0b08 	orr.w	fp, fp, r8
 801cbca:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801cbce:	ee3d db47 	vsub.f64	d13, d13, d7
 801cbd2:	d03c      	beq.n	801cc4e <_strtod_l+0xb16>
 801cbd4:	eeb4 dbca 	vcmpe.f64	d13, d10
 801cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbdc:	f53f acf4 	bmi.w	801c5c8 <_strtod_l+0x490>
 801cbe0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801cbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbe8:	dda8      	ble.n	801cb3c <_strtod_l+0xa04>
 801cbea:	e4ed      	b.n	801c5c8 <_strtod_l+0x490>
 801cbec:	9805      	ldr	r0, [sp, #20]
 801cbee:	b1f0      	cbz	r0, 801cc2e <_strtod_l+0xaf6>
 801cbf0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801cbf4:	d81b      	bhi.n	801cc2e <_strtod_l+0xaf6>
 801cbf6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801cc80 <_strtod_l+0xb48>
 801cbfa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801cbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc02:	d811      	bhi.n	801cc28 <_strtod_l+0xaf0>
 801cc04:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801cc08:	ee1d 3a10 	vmov	r3, s26
 801cc0c:	2b01      	cmp	r3, #1
 801cc0e:	bf38      	it	cc
 801cc10:	2301      	movcc	r3, #1
 801cc12:	ee0d 3a10 	vmov	s26, r3
 801cc16:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801cc1a:	f1ba 0f00 	cmp.w	sl, #0
 801cc1e:	d113      	bne.n	801cc48 <_strtod_l+0xb10>
 801cc20:	eeb1 7b4d 	vneg.f64	d7, d13
 801cc24:	ec53 2b17 	vmov	r2, r3, d7
 801cc28:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801cc2c:	1a43      	subs	r3, r0, r1
 801cc2e:	eeb0 0b48 	vmov.f64	d0, d8
 801cc32:	ec43 2b1c 	vmov	d12, r2, r3
 801cc36:	910a      	str	r1, [sp, #40]	; 0x28
 801cc38:	f7ff f926 	bl	801be88 <__ulp>
 801cc3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cc3e:	eeac 8b00 	vfma.f64	d8, d12, d0
 801cc42:	ec59 8b18 	vmov	r8, r9, d8
 801cc46:	e7aa      	b.n	801cb9e <_strtod_l+0xa66>
 801cc48:	eeb0 7b4d 	vmov.f64	d7, d13
 801cc4c:	e7ea      	b.n	801cc24 <_strtod_l+0xaec>
 801cc4e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801cc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc56:	f57f af71 	bpl.w	801cb3c <_strtod_l+0xa04>
 801cc5a:	e4b5      	b.n	801c5c8 <_strtod_l+0x490>
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	9308      	str	r3, [sp, #32]
 801cc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc64:	6013      	str	r3, [r2, #0]
 801cc66:	f7ff baa6 	b.w	801c1b6 <_strtod_l+0x7e>
 801cc6a:	2a65      	cmp	r2, #101	; 0x65
 801cc6c:	f43f aba2 	beq.w	801c3b4 <_strtod_l+0x27c>
 801cc70:	2a45      	cmp	r2, #69	; 0x45
 801cc72:	f43f ab9f 	beq.w	801c3b4 <_strtod_l+0x27c>
 801cc76:	2101      	movs	r1, #1
 801cc78:	f7ff bbd8 	b.w	801c42c <_strtod_l+0x2f4>
 801cc7c:	f3af 8000 	nop.w
 801cc80:	ffc00000 	.word	0xffc00000
 801cc84:	41dfffff 	.word	0x41dfffff
 801cc88:	000fffff 	.word	0x000fffff
 801cc8c:	7ff00000 	.word	0x7ff00000
 801cc90:	7fefffff 	.word	0x7fefffff
 801cc94:	7c9fffff 	.word	0x7c9fffff
 801cc98:	7fe00000 	.word	0x7fe00000

0801cc9c <_strtod_r>:
 801cc9c:	4b01      	ldr	r3, [pc, #4]	; (801cca4 <_strtod_r+0x8>)
 801cc9e:	f7ff ba4b 	b.w	801c138 <_strtod_l>
 801cca2:	bf00      	nop
 801cca4:	2400015c 	.word	0x2400015c

0801cca8 <_strtol_l.constprop.0>:
 801cca8:	2b01      	cmp	r3, #1
 801ccaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccae:	d001      	beq.n	801ccb4 <_strtol_l.constprop.0+0xc>
 801ccb0:	2b24      	cmp	r3, #36	; 0x24
 801ccb2:	d906      	bls.n	801ccc2 <_strtol_l.constprop.0+0x1a>
 801ccb4:	f7fd fe46 	bl	801a944 <__errno>
 801ccb8:	2316      	movs	r3, #22
 801ccba:	6003      	str	r3, [r0, #0]
 801ccbc:	2000      	movs	r0, #0
 801ccbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801cda8 <_strtol_l.constprop.0+0x100>
 801ccc6:	460d      	mov	r5, r1
 801ccc8:	462e      	mov	r6, r5
 801ccca:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ccce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801ccd2:	f017 0708 	ands.w	r7, r7, #8
 801ccd6:	d1f7      	bne.n	801ccc8 <_strtol_l.constprop.0+0x20>
 801ccd8:	2c2d      	cmp	r4, #45	; 0x2d
 801ccda:	d132      	bne.n	801cd42 <_strtol_l.constprop.0+0x9a>
 801ccdc:	782c      	ldrb	r4, [r5, #0]
 801ccde:	2701      	movs	r7, #1
 801cce0:	1cb5      	adds	r5, r6, #2
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d05b      	beq.n	801cd9e <_strtol_l.constprop.0+0xf6>
 801cce6:	2b10      	cmp	r3, #16
 801cce8:	d109      	bne.n	801ccfe <_strtol_l.constprop.0+0x56>
 801ccea:	2c30      	cmp	r4, #48	; 0x30
 801ccec:	d107      	bne.n	801ccfe <_strtol_l.constprop.0+0x56>
 801ccee:	782c      	ldrb	r4, [r5, #0]
 801ccf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ccf4:	2c58      	cmp	r4, #88	; 0x58
 801ccf6:	d14d      	bne.n	801cd94 <_strtol_l.constprop.0+0xec>
 801ccf8:	786c      	ldrb	r4, [r5, #1]
 801ccfa:	2310      	movs	r3, #16
 801ccfc:	3502      	adds	r5, #2
 801ccfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801cd02:	f108 38ff 	add.w	r8, r8, #4294967295
 801cd06:	f04f 0e00 	mov.w	lr, #0
 801cd0a:	fbb8 f9f3 	udiv	r9, r8, r3
 801cd0e:	4676      	mov	r6, lr
 801cd10:	fb03 8a19 	mls	sl, r3, r9, r8
 801cd14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801cd18:	f1bc 0f09 	cmp.w	ip, #9
 801cd1c:	d816      	bhi.n	801cd4c <_strtol_l.constprop.0+0xa4>
 801cd1e:	4664      	mov	r4, ip
 801cd20:	42a3      	cmp	r3, r4
 801cd22:	dd24      	ble.n	801cd6e <_strtol_l.constprop.0+0xc6>
 801cd24:	f1be 3fff 	cmp.w	lr, #4294967295
 801cd28:	d008      	beq.n	801cd3c <_strtol_l.constprop.0+0x94>
 801cd2a:	45b1      	cmp	r9, r6
 801cd2c:	d31c      	bcc.n	801cd68 <_strtol_l.constprop.0+0xc0>
 801cd2e:	d101      	bne.n	801cd34 <_strtol_l.constprop.0+0x8c>
 801cd30:	45a2      	cmp	sl, r4
 801cd32:	db19      	blt.n	801cd68 <_strtol_l.constprop.0+0xc0>
 801cd34:	fb06 4603 	mla	r6, r6, r3, r4
 801cd38:	f04f 0e01 	mov.w	lr, #1
 801cd3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd40:	e7e8      	b.n	801cd14 <_strtol_l.constprop.0+0x6c>
 801cd42:	2c2b      	cmp	r4, #43	; 0x2b
 801cd44:	bf04      	itt	eq
 801cd46:	782c      	ldrbeq	r4, [r5, #0]
 801cd48:	1cb5      	addeq	r5, r6, #2
 801cd4a:	e7ca      	b.n	801cce2 <_strtol_l.constprop.0+0x3a>
 801cd4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801cd50:	f1bc 0f19 	cmp.w	ip, #25
 801cd54:	d801      	bhi.n	801cd5a <_strtol_l.constprop.0+0xb2>
 801cd56:	3c37      	subs	r4, #55	; 0x37
 801cd58:	e7e2      	b.n	801cd20 <_strtol_l.constprop.0+0x78>
 801cd5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801cd5e:	f1bc 0f19 	cmp.w	ip, #25
 801cd62:	d804      	bhi.n	801cd6e <_strtol_l.constprop.0+0xc6>
 801cd64:	3c57      	subs	r4, #87	; 0x57
 801cd66:	e7db      	b.n	801cd20 <_strtol_l.constprop.0+0x78>
 801cd68:	f04f 3eff 	mov.w	lr, #4294967295
 801cd6c:	e7e6      	b.n	801cd3c <_strtol_l.constprop.0+0x94>
 801cd6e:	f1be 3fff 	cmp.w	lr, #4294967295
 801cd72:	d105      	bne.n	801cd80 <_strtol_l.constprop.0+0xd8>
 801cd74:	2322      	movs	r3, #34	; 0x22
 801cd76:	6003      	str	r3, [r0, #0]
 801cd78:	4646      	mov	r6, r8
 801cd7a:	b942      	cbnz	r2, 801cd8e <_strtol_l.constprop.0+0xe6>
 801cd7c:	4630      	mov	r0, r6
 801cd7e:	e79e      	b.n	801ccbe <_strtol_l.constprop.0+0x16>
 801cd80:	b107      	cbz	r7, 801cd84 <_strtol_l.constprop.0+0xdc>
 801cd82:	4276      	negs	r6, r6
 801cd84:	2a00      	cmp	r2, #0
 801cd86:	d0f9      	beq.n	801cd7c <_strtol_l.constprop.0+0xd4>
 801cd88:	f1be 0f00 	cmp.w	lr, #0
 801cd8c:	d000      	beq.n	801cd90 <_strtol_l.constprop.0+0xe8>
 801cd8e:	1e69      	subs	r1, r5, #1
 801cd90:	6011      	str	r1, [r2, #0]
 801cd92:	e7f3      	b.n	801cd7c <_strtol_l.constprop.0+0xd4>
 801cd94:	2430      	movs	r4, #48	; 0x30
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d1b1      	bne.n	801ccfe <_strtol_l.constprop.0+0x56>
 801cd9a:	2308      	movs	r3, #8
 801cd9c:	e7af      	b.n	801ccfe <_strtol_l.constprop.0+0x56>
 801cd9e:	2c30      	cmp	r4, #48	; 0x30
 801cda0:	d0a5      	beq.n	801ccee <_strtol_l.constprop.0+0x46>
 801cda2:	230a      	movs	r3, #10
 801cda4:	e7ab      	b.n	801ccfe <_strtol_l.constprop.0+0x56>
 801cda6:	bf00      	nop
 801cda8:	0801e839 	.word	0x0801e839

0801cdac <_strtol_r>:
 801cdac:	f7ff bf7c 	b.w	801cca8 <_strtol_l.constprop.0>

0801cdb0 <__ssputs_r>:
 801cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdb4:	688e      	ldr	r6, [r1, #8]
 801cdb6:	461f      	mov	r7, r3
 801cdb8:	42be      	cmp	r6, r7
 801cdba:	680b      	ldr	r3, [r1, #0]
 801cdbc:	4682      	mov	sl, r0
 801cdbe:	460c      	mov	r4, r1
 801cdc0:	4690      	mov	r8, r2
 801cdc2:	d82c      	bhi.n	801ce1e <__ssputs_r+0x6e>
 801cdc4:	898a      	ldrh	r2, [r1, #12]
 801cdc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cdca:	d026      	beq.n	801ce1a <__ssputs_r+0x6a>
 801cdcc:	6965      	ldr	r5, [r4, #20]
 801cdce:	6909      	ldr	r1, [r1, #16]
 801cdd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cdd4:	eba3 0901 	sub.w	r9, r3, r1
 801cdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cddc:	1c7b      	adds	r3, r7, #1
 801cdde:	444b      	add	r3, r9
 801cde0:	106d      	asrs	r5, r5, #1
 801cde2:	429d      	cmp	r5, r3
 801cde4:	bf38      	it	cc
 801cde6:	461d      	movcc	r5, r3
 801cde8:	0553      	lsls	r3, r2, #21
 801cdea:	d527      	bpl.n	801ce3c <__ssputs_r+0x8c>
 801cdec:	4629      	mov	r1, r5
 801cdee:	f7fe fc53 	bl	801b698 <_malloc_r>
 801cdf2:	4606      	mov	r6, r0
 801cdf4:	b360      	cbz	r0, 801ce50 <__ssputs_r+0xa0>
 801cdf6:	6921      	ldr	r1, [r4, #16]
 801cdf8:	464a      	mov	r2, r9
 801cdfa:	f7fd fdd0 	bl	801a99e <memcpy>
 801cdfe:	89a3      	ldrh	r3, [r4, #12]
 801ce00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ce04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce08:	81a3      	strh	r3, [r4, #12]
 801ce0a:	6126      	str	r6, [r4, #16]
 801ce0c:	6165      	str	r5, [r4, #20]
 801ce0e:	444e      	add	r6, r9
 801ce10:	eba5 0509 	sub.w	r5, r5, r9
 801ce14:	6026      	str	r6, [r4, #0]
 801ce16:	60a5      	str	r5, [r4, #8]
 801ce18:	463e      	mov	r6, r7
 801ce1a:	42be      	cmp	r6, r7
 801ce1c:	d900      	bls.n	801ce20 <__ssputs_r+0x70>
 801ce1e:	463e      	mov	r6, r7
 801ce20:	6820      	ldr	r0, [r4, #0]
 801ce22:	4632      	mov	r2, r6
 801ce24:	4641      	mov	r1, r8
 801ce26:	f000 f9c9 	bl	801d1bc <memmove>
 801ce2a:	68a3      	ldr	r3, [r4, #8]
 801ce2c:	1b9b      	subs	r3, r3, r6
 801ce2e:	60a3      	str	r3, [r4, #8]
 801ce30:	6823      	ldr	r3, [r4, #0]
 801ce32:	4433      	add	r3, r6
 801ce34:	6023      	str	r3, [r4, #0]
 801ce36:	2000      	movs	r0, #0
 801ce38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce3c:	462a      	mov	r2, r5
 801ce3e:	f000 fda0 	bl	801d982 <_realloc_r>
 801ce42:	4606      	mov	r6, r0
 801ce44:	2800      	cmp	r0, #0
 801ce46:	d1e0      	bne.n	801ce0a <__ssputs_r+0x5a>
 801ce48:	6921      	ldr	r1, [r4, #16]
 801ce4a:	4650      	mov	r0, sl
 801ce4c:	f7fe fbb0 	bl	801b5b0 <_free_r>
 801ce50:	230c      	movs	r3, #12
 801ce52:	f8ca 3000 	str.w	r3, [sl]
 801ce56:	89a3      	ldrh	r3, [r4, #12]
 801ce58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce5c:	81a3      	strh	r3, [r4, #12]
 801ce5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ce62:	e7e9      	b.n	801ce38 <__ssputs_r+0x88>

0801ce64 <_svfiprintf_r>:
 801ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce68:	4698      	mov	r8, r3
 801ce6a:	898b      	ldrh	r3, [r1, #12]
 801ce6c:	061b      	lsls	r3, r3, #24
 801ce6e:	b09d      	sub	sp, #116	; 0x74
 801ce70:	4607      	mov	r7, r0
 801ce72:	460d      	mov	r5, r1
 801ce74:	4614      	mov	r4, r2
 801ce76:	d50e      	bpl.n	801ce96 <_svfiprintf_r+0x32>
 801ce78:	690b      	ldr	r3, [r1, #16]
 801ce7a:	b963      	cbnz	r3, 801ce96 <_svfiprintf_r+0x32>
 801ce7c:	2140      	movs	r1, #64	; 0x40
 801ce7e:	f7fe fc0b 	bl	801b698 <_malloc_r>
 801ce82:	6028      	str	r0, [r5, #0]
 801ce84:	6128      	str	r0, [r5, #16]
 801ce86:	b920      	cbnz	r0, 801ce92 <_svfiprintf_r+0x2e>
 801ce88:	230c      	movs	r3, #12
 801ce8a:	603b      	str	r3, [r7, #0]
 801ce8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ce90:	e0d0      	b.n	801d034 <_svfiprintf_r+0x1d0>
 801ce92:	2340      	movs	r3, #64	; 0x40
 801ce94:	616b      	str	r3, [r5, #20]
 801ce96:	2300      	movs	r3, #0
 801ce98:	9309      	str	r3, [sp, #36]	; 0x24
 801ce9a:	2320      	movs	r3, #32
 801ce9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cea0:	f8cd 800c 	str.w	r8, [sp, #12]
 801cea4:	2330      	movs	r3, #48	; 0x30
 801cea6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801d04c <_svfiprintf_r+0x1e8>
 801ceaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ceae:	f04f 0901 	mov.w	r9, #1
 801ceb2:	4623      	mov	r3, r4
 801ceb4:	469a      	mov	sl, r3
 801ceb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ceba:	b10a      	cbz	r2, 801cec0 <_svfiprintf_r+0x5c>
 801cebc:	2a25      	cmp	r2, #37	; 0x25
 801cebe:	d1f9      	bne.n	801ceb4 <_svfiprintf_r+0x50>
 801cec0:	ebba 0b04 	subs.w	fp, sl, r4
 801cec4:	d00b      	beq.n	801cede <_svfiprintf_r+0x7a>
 801cec6:	465b      	mov	r3, fp
 801cec8:	4622      	mov	r2, r4
 801ceca:	4629      	mov	r1, r5
 801cecc:	4638      	mov	r0, r7
 801cece:	f7ff ff6f 	bl	801cdb0 <__ssputs_r>
 801ced2:	3001      	adds	r0, #1
 801ced4:	f000 80a9 	beq.w	801d02a <_svfiprintf_r+0x1c6>
 801ced8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ceda:	445a      	add	r2, fp
 801cedc:	9209      	str	r2, [sp, #36]	; 0x24
 801cede:	f89a 3000 	ldrb.w	r3, [sl]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	f000 80a1 	beq.w	801d02a <_svfiprintf_r+0x1c6>
 801cee8:	2300      	movs	r3, #0
 801ceea:	f04f 32ff 	mov.w	r2, #4294967295
 801ceee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cef2:	f10a 0a01 	add.w	sl, sl, #1
 801cef6:	9304      	str	r3, [sp, #16]
 801cef8:	9307      	str	r3, [sp, #28]
 801cefa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cefe:	931a      	str	r3, [sp, #104]	; 0x68
 801cf00:	4654      	mov	r4, sl
 801cf02:	2205      	movs	r2, #5
 801cf04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf08:	4850      	ldr	r0, [pc, #320]	; (801d04c <_svfiprintf_r+0x1e8>)
 801cf0a:	f7e3 fa01 	bl	8000310 <memchr>
 801cf0e:	9a04      	ldr	r2, [sp, #16]
 801cf10:	b9d8      	cbnz	r0, 801cf4a <_svfiprintf_r+0xe6>
 801cf12:	06d0      	lsls	r0, r2, #27
 801cf14:	bf44      	itt	mi
 801cf16:	2320      	movmi	r3, #32
 801cf18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf1c:	0711      	lsls	r1, r2, #28
 801cf1e:	bf44      	itt	mi
 801cf20:	232b      	movmi	r3, #43	; 0x2b
 801cf22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cf26:	f89a 3000 	ldrb.w	r3, [sl]
 801cf2a:	2b2a      	cmp	r3, #42	; 0x2a
 801cf2c:	d015      	beq.n	801cf5a <_svfiprintf_r+0xf6>
 801cf2e:	9a07      	ldr	r2, [sp, #28]
 801cf30:	4654      	mov	r4, sl
 801cf32:	2000      	movs	r0, #0
 801cf34:	f04f 0c0a 	mov.w	ip, #10
 801cf38:	4621      	mov	r1, r4
 801cf3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf3e:	3b30      	subs	r3, #48	; 0x30
 801cf40:	2b09      	cmp	r3, #9
 801cf42:	d94d      	bls.n	801cfe0 <_svfiprintf_r+0x17c>
 801cf44:	b1b0      	cbz	r0, 801cf74 <_svfiprintf_r+0x110>
 801cf46:	9207      	str	r2, [sp, #28]
 801cf48:	e014      	b.n	801cf74 <_svfiprintf_r+0x110>
 801cf4a:	eba0 0308 	sub.w	r3, r0, r8
 801cf4e:	fa09 f303 	lsl.w	r3, r9, r3
 801cf52:	4313      	orrs	r3, r2
 801cf54:	9304      	str	r3, [sp, #16]
 801cf56:	46a2      	mov	sl, r4
 801cf58:	e7d2      	b.n	801cf00 <_svfiprintf_r+0x9c>
 801cf5a:	9b03      	ldr	r3, [sp, #12]
 801cf5c:	1d19      	adds	r1, r3, #4
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	9103      	str	r1, [sp, #12]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	bfbb      	ittet	lt
 801cf66:	425b      	neglt	r3, r3
 801cf68:	f042 0202 	orrlt.w	r2, r2, #2
 801cf6c:	9307      	strge	r3, [sp, #28]
 801cf6e:	9307      	strlt	r3, [sp, #28]
 801cf70:	bfb8      	it	lt
 801cf72:	9204      	strlt	r2, [sp, #16]
 801cf74:	7823      	ldrb	r3, [r4, #0]
 801cf76:	2b2e      	cmp	r3, #46	; 0x2e
 801cf78:	d10c      	bne.n	801cf94 <_svfiprintf_r+0x130>
 801cf7a:	7863      	ldrb	r3, [r4, #1]
 801cf7c:	2b2a      	cmp	r3, #42	; 0x2a
 801cf7e:	d134      	bne.n	801cfea <_svfiprintf_r+0x186>
 801cf80:	9b03      	ldr	r3, [sp, #12]
 801cf82:	1d1a      	adds	r2, r3, #4
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	9203      	str	r2, [sp, #12]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	bfb8      	it	lt
 801cf8c:	f04f 33ff 	movlt.w	r3, #4294967295
 801cf90:	3402      	adds	r4, #2
 801cf92:	9305      	str	r3, [sp, #20]
 801cf94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801d05c <_svfiprintf_r+0x1f8>
 801cf98:	7821      	ldrb	r1, [r4, #0]
 801cf9a:	2203      	movs	r2, #3
 801cf9c:	4650      	mov	r0, sl
 801cf9e:	f7e3 f9b7 	bl	8000310 <memchr>
 801cfa2:	b138      	cbz	r0, 801cfb4 <_svfiprintf_r+0x150>
 801cfa4:	9b04      	ldr	r3, [sp, #16]
 801cfa6:	eba0 000a 	sub.w	r0, r0, sl
 801cfaa:	2240      	movs	r2, #64	; 0x40
 801cfac:	4082      	lsls	r2, r0
 801cfae:	4313      	orrs	r3, r2
 801cfb0:	3401      	adds	r4, #1
 801cfb2:	9304      	str	r3, [sp, #16]
 801cfb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfb8:	4825      	ldr	r0, [pc, #148]	; (801d050 <_svfiprintf_r+0x1ec>)
 801cfba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cfbe:	2206      	movs	r2, #6
 801cfc0:	f7e3 f9a6 	bl	8000310 <memchr>
 801cfc4:	2800      	cmp	r0, #0
 801cfc6:	d038      	beq.n	801d03a <_svfiprintf_r+0x1d6>
 801cfc8:	4b22      	ldr	r3, [pc, #136]	; (801d054 <_svfiprintf_r+0x1f0>)
 801cfca:	bb1b      	cbnz	r3, 801d014 <_svfiprintf_r+0x1b0>
 801cfcc:	9b03      	ldr	r3, [sp, #12]
 801cfce:	3307      	adds	r3, #7
 801cfd0:	f023 0307 	bic.w	r3, r3, #7
 801cfd4:	3308      	adds	r3, #8
 801cfd6:	9303      	str	r3, [sp, #12]
 801cfd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfda:	4433      	add	r3, r6
 801cfdc:	9309      	str	r3, [sp, #36]	; 0x24
 801cfde:	e768      	b.n	801ceb2 <_svfiprintf_r+0x4e>
 801cfe0:	fb0c 3202 	mla	r2, ip, r2, r3
 801cfe4:	460c      	mov	r4, r1
 801cfe6:	2001      	movs	r0, #1
 801cfe8:	e7a6      	b.n	801cf38 <_svfiprintf_r+0xd4>
 801cfea:	2300      	movs	r3, #0
 801cfec:	3401      	adds	r4, #1
 801cfee:	9305      	str	r3, [sp, #20]
 801cff0:	4619      	mov	r1, r3
 801cff2:	f04f 0c0a 	mov.w	ip, #10
 801cff6:	4620      	mov	r0, r4
 801cff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cffc:	3a30      	subs	r2, #48	; 0x30
 801cffe:	2a09      	cmp	r2, #9
 801d000:	d903      	bls.n	801d00a <_svfiprintf_r+0x1a6>
 801d002:	2b00      	cmp	r3, #0
 801d004:	d0c6      	beq.n	801cf94 <_svfiprintf_r+0x130>
 801d006:	9105      	str	r1, [sp, #20]
 801d008:	e7c4      	b.n	801cf94 <_svfiprintf_r+0x130>
 801d00a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d00e:	4604      	mov	r4, r0
 801d010:	2301      	movs	r3, #1
 801d012:	e7f0      	b.n	801cff6 <_svfiprintf_r+0x192>
 801d014:	ab03      	add	r3, sp, #12
 801d016:	9300      	str	r3, [sp, #0]
 801d018:	462a      	mov	r2, r5
 801d01a:	4b0f      	ldr	r3, [pc, #60]	; (801d058 <_svfiprintf_r+0x1f4>)
 801d01c:	a904      	add	r1, sp, #16
 801d01e:	4638      	mov	r0, r7
 801d020:	f7fc fd6a 	bl	8019af8 <_printf_float>
 801d024:	1c42      	adds	r2, r0, #1
 801d026:	4606      	mov	r6, r0
 801d028:	d1d6      	bne.n	801cfd8 <_svfiprintf_r+0x174>
 801d02a:	89ab      	ldrh	r3, [r5, #12]
 801d02c:	065b      	lsls	r3, r3, #25
 801d02e:	f53f af2d 	bmi.w	801ce8c <_svfiprintf_r+0x28>
 801d032:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d034:	b01d      	add	sp, #116	; 0x74
 801d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d03a:	ab03      	add	r3, sp, #12
 801d03c:	9300      	str	r3, [sp, #0]
 801d03e:	462a      	mov	r2, r5
 801d040:	4b05      	ldr	r3, [pc, #20]	; (801d058 <_svfiprintf_r+0x1f4>)
 801d042:	a904      	add	r1, sp, #16
 801d044:	4638      	mov	r0, r7
 801d046:	f7fc ffdf 	bl	801a008 <_printf_i>
 801d04a:	e7eb      	b.n	801d024 <_svfiprintf_r+0x1c0>
 801d04c:	0801e939 	.word	0x0801e939
 801d050:	0801e943 	.word	0x0801e943
 801d054:	08019af9 	.word	0x08019af9
 801d058:	0801cdb1 	.word	0x0801cdb1
 801d05c:	0801e93f 	.word	0x0801e93f

0801d060 <__sflush_r>:
 801d060:	898a      	ldrh	r2, [r1, #12]
 801d062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d066:	4605      	mov	r5, r0
 801d068:	0710      	lsls	r0, r2, #28
 801d06a:	460c      	mov	r4, r1
 801d06c:	d458      	bmi.n	801d120 <__sflush_r+0xc0>
 801d06e:	684b      	ldr	r3, [r1, #4]
 801d070:	2b00      	cmp	r3, #0
 801d072:	dc05      	bgt.n	801d080 <__sflush_r+0x20>
 801d074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d076:	2b00      	cmp	r3, #0
 801d078:	dc02      	bgt.n	801d080 <__sflush_r+0x20>
 801d07a:	2000      	movs	r0, #0
 801d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d082:	2e00      	cmp	r6, #0
 801d084:	d0f9      	beq.n	801d07a <__sflush_r+0x1a>
 801d086:	2300      	movs	r3, #0
 801d088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d08c:	682f      	ldr	r7, [r5, #0]
 801d08e:	6a21      	ldr	r1, [r4, #32]
 801d090:	602b      	str	r3, [r5, #0]
 801d092:	d032      	beq.n	801d0fa <__sflush_r+0x9a>
 801d094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d096:	89a3      	ldrh	r3, [r4, #12]
 801d098:	075a      	lsls	r2, r3, #29
 801d09a:	d505      	bpl.n	801d0a8 <__sflush_r+0x48>
 801d09c:	6863      	ldr	r3, [r4, #4]
 801d09e:	1ac0      	subs	r0, r0, r3
 801d0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d0a2:	b10b      	cbz	r3, 801d0a8 <__sflush_r+0x48>
 801d0a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d0a6:	1ac0      	subs	r0, r0, r3
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	4602      	mov	r2, r0
 801d0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0ae:	6a21      	ldr	r1, [r4, #32]
 801d0b0:	4628      	mov	r0, r5
 801d0b2:	47b0      	blx	r6
 801d0b4:	1c43      	adds	r3, r0, #1
 801d0b6:	89a3      	ldrh	r3, [r4, #12]
 801d0b8:	d106      	bne.n	801d0c8 <__sflush_r+0x68>
 801d0ba:	6829      	ldr	r1, [r5, #0]
 801d0bc:	291d      	cmp	r1, #29
 801d0be:	d82b      	bhi.n	801d118 <__sflush_r+0xb8>
 801d0c0:	4a29      	ldr	r2, [pc, #164]	; (801d168 <__sflush_r+0x108>)
 801d0c2:	410a      	asrs	r2, r1
 801d0c4:	07d6      	lsls	r6, r2, #31
 801d0c6:	d427      	bmi.n	801d118 <__sflush_r+0xb8>
 801d0c8:	2200      	movs	r2, #0
 801d0ca:	6062      	str	r2, [r4, #4]
 801d0cc:	04d9      	lsls	r1, r3, #19
 801d0ce:	6922      	ldr	r2, [r4, #16]
 801d0d0:	6022      	str	r2, [r4, #0]
 801d0d2:	d504      	bpl.n	801d0de <__sflush_r+0x7e>
 801d0d4:	1c42      	adds	r2, r0, #1
 801d0d6:	d101      	bne.n	801d0dc <__sflush_r+0x7c>
 801d0d8:	682b      	ldr	r3, [r5, #0]
 801d0da:	b903      	cbnz	r3, 801d0de <__sflush_r+0x7e>
 801d0dc:	6560      	str	r0, [r4, #84]	; 0x54
 801d0de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d0e0:	602f      	str	r7, [r5, #0]
 801d0e2:	2900      	cmp	r1, #0
 801d0e4:	d0c9      	beq.n	801d07a <__sflush_r+0x1a>
 801d0e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d0ea:	4299      	cmp	r1, r3
 801d0ec:	d002      	beq.n	801d0f4 <__sflush_r+0x94>
 801d0ee:	4628      	mov	r0, r5
 801d0f0:	f7fe fa5e 	bl	801b5b0 <_free_r>
 801d0f4:	2000      	movs	r0, #0
 801d0f6:	6360      	str	r0, [r4, #52]	; 0x34
 801d0f8:	e7c0      	b.n	801d07c <__sflush_r+0x1c>
 801d0fa:	2301      	movs	r3, #1
 801d0fc:	4628      	mov	r0, r5
 801d0fe:	47b0      	blx	r6
 801d100:	1c41      	adds	r1, r0, #1
 801d102:	d1c8      	bne.n	801d096 <__sflush_r+0x36>
 801d104:	682b      	ldr	r3, [r5, #0]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d0c5      	beq.n	801d096 <__sflush_r+0x36>
 801d10a:	2b1d      	cmp	r3, #29
 801d10c:	d001      	beq.n	801d112 <__sflush_r+0xb2>
 801d10e:	2b16      	cmp	r3, #22
 801d110:	d101      	bne.n	801d116 <__sflush_r+0xb6>
 801d112:	602f      	str	r7, [r5, #0]
 801d114:	e7b1      	b.n	801d07a <__sflush_r+0x1a>
 801d116:	89a3      	ldrh	r3, [r4, #12]
 801d118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d11c:	81a3      	strh	r3, [r4, #12]
 801d11e:	e7ad      	b.n	801d07c <__sflush_r+0x1c>
 801d120:	690f      	ldr	r7, [r1, #16]
 801d122:	2f00      	cmp	r7, #0
 801d124:	d0a9      	beq.n	801d07a <__sflush_r+0x1a>
 801d126:	0793      	lsls	r3, r2, #30
 801d128:	680e      	ldr	r6, [r1, #0]
 801d12a:	bf08      	it	eq
 801d12c:	694b      	ldreq	r3, [r1, #20]
 801d12e:	600f      	str	r7, [r1, #0]
 801d130:	bf18      	it	ne
 801d132:	2300      	movne	r3, #0
 801d134:	eba6 0807 	sub.w	r8, r6, r7
 801d138:	608b      	str	r3, [r1, #8]
 801d13a:	f1b8 0f00 	cmp.w	r8, #0
 801d13e:	dd9c      	ble.n	801d07a <__sflush_r+0x1a>
 801d140:	6a21      	ldr	r1, [r4, #32]
 801d142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d144:	4643      	mov	r3, r8
 801d146:	463a      	mov	r2, r7
 801d148:	4628      	mov	r0, r5
 801d14a:	47b0      	blx	r6
 801d14c:	2800      	cmp	r0, #0
 801d14e:	dc06      	bgt.n	801d15e <__sflush_r+0xfe>
 801d150:	89a3      	ldrh	r3, [r4, #12]
 801d152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d156:	81a3      	strh	r3, [r4, #12]
 801d158:	f04f 30ff 	mov.w	r0, #4294967295
 801d15c:	e78e      	b.n	801d07c <__sflush_r+0x1c>
 801d15e:	4407      	add	r7, r0
 801d160:	eba8 0800 	sub.w	r8, r8, r0
 801d164:	e7e9      	b.n	801d13a <__sflush_r+0xda>
 801d166:	bf00      	nop
 801d168:	dfbffffe 	.word	0xdfbffffe

0801d16c <_fflush_r>:
 801d16c:	b538      	push	{r3, r4, r5, lr}
 801d16e:	690b      	ldr	r3, [r1, #16]
 801d170:	4605      	mov	r5, r0
 801d172:	460c      	mov	r4, r1
 801d174:	b913      	cbnz	r3, 801d17c <_fflush_r+0x10>
 801d176:	2500      	movs	r5, #0
 801d178:	4628      	mov	r0, r5
 801d17a:	bd38      	pop	{r3, r4, r5, pc}
 801d17c:	b118      	cbz	r0, 801d186 <_fflush_r+0x1a>
 801d17e:	6a03      	ldr	r3, [r0, #32]
 801d180:	b90b      	cbnz	r3, 801d186 <_fflush_r+0x1a>
 801d182:	f7fd faf3 	bl	801a76c <__sinit>
 801d186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	d0f3      	beq.n	801d176 <_fflush_r+0xa>
 801d18e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d190:	07d0      	lsls	r0, r2, #31
 801d192:	d404      	bmi.n	801d19e <_fflush_r+0x32>
 801d194:	0599      	lsls	r1, r3, #22
 801d196:	d402      	bmi.n	801d19e <_fflush_r+0x32>
 801d198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d19a:	f7fd fbfe 	bl	801a99a <__retarget_lock_acquire_recursive>
 801d19e:	4628      	mov	r0, r5
 801d1a0:	4621      	mov	r1, r4
 801d1a2:	f7ff ff5d 	bl	801d060 <__sflush_r>
 801d1a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1a8:	07da      	lsls	r2, r3, #31
 801d1aa:	4605      	mov	r5, r0
 801d1ac:	d4e4      	bmi.n	801d178 <_fflush_r+0xc>
 801d1ae:	89a3      	ldrh	r3, [r4, #12]
 801d1b0:	059b      	lsls	r3, r3, #22
 801d1b2:	d4e1      	bmi.n	801d178 <_fflush_r+0xc>
 801d1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1b6:	f7fd fbf1 	bl	801a99c <__retarget_lock_release_recursive>
 801d1ba:	e7dd      	b.n	801d178 <_fflush_r+0xc>

0801d1bc <memmove>:
 801d1bc:	4288      	cmp	r0, r1
 801d1be:	b510      	push	{r4, lr}
 801d1c0:	eb01 0402 	add.w	r4, r1, r2
 801d1c4:	d902      	bls.n	801d1cc <memmove+0x10>
 801d1c6:	4284      	cmp	r4, r0
 801d1c8:	4623      	mov	r3, r4
 801d1ca:	d807      	bhi.n	801d1dc <memmove+0x20>
 801d1cc:	1e43      	subs	r3, r0, #1
 801d1ce:	42a1      	cmp	r1, r4
 801d1d0:	d008      	beq.n	801d1e4 <memmove+0x28>
 801d1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d1da:	e7f8      	b.n	801d1ce <memmove+0x12>
 801d1dc:	4402      	add	r2, r0
 801d1de:	4601      	mov	r1, r0
 801d1e0:	428a      	cmp	r2, r1
 801d1e2:	d100      	bne.n	801d1e6 <memmove+0x2a>
 801d1e4:	bd10      	pop	{r4, pc}
 801d1e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d1ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d1ee:	e7f7      	b.n	801d1e0 <memmove+0x24>

0801d1f0 <strncmp>:
 801d1f0:	b510      	push	{r4, lr}
 801d1f2:	b16a      	cbz	r2, 801d210 <strncmp+0x20>
 801d1f4:	3901      	subs	r1, #1
 801d1f6:	1884      	adds	r4, r0, r2
 801d1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d1fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d200:	429a      	cmp	r2, r3
 801d202:	d103      	bne.n	801d20c <strncmp+0x1c>
 801d204:	42a0      	cmp	r0, r4
 801d206:	d001      	beq.n	801d20c <strncmp+0x1c>
 801d208:	2a00      	cmp	r2, #0
 801d20a:	d1f5      	bne.n	801d1f8 <strncmp+0x8>
 801d20c:	1ad0      	subs	r0, r2, r3
 801d20e:	bd10      	pop	{r4, pc}
 801d210:	4610      	mov	r0, r2
 801d212:	e7fc      	b.n	801d20e <strncmp+0x1e>

0801d214 <_sbrk_r>:
 801d214:	b538      	push	{r3, r4, r5, lr}
 801d216:	4d06      	ldr	r5, [pc, #24]	; (801d230 <_sbrk_r+0x1c>)
 801d218:	2300      	movs	r3, #0
 801d21a:	4604      	mov	r4, r0
 801d21c:	4608      	mov	r0, r1
 801d21e:	602b      	str	r3, [r5, #0]
 801d220:	f7e6 f8ea 	bl	80033f8 <_sbrk>
 801d224:	1c43      	adds	r3, r0, #1
 801d226:	d102      	bne.n	801d22e <_sbrk_r+0x1a>
 801d228:	682b      	ldr	r3, [r5, #0]
 801d22a:	b103      	cbz	r3, 801d22e <_sbrk_r+0x1a>
 801d22c:	6023      	str	r3, [r4, #0]
 801d22e:	bd38      	pop	{r3, r4, r5, pc}
 801d230:	24003634 	.word	0x24003634
 801d234:	00000000 	.word	0x00000000

0801d238 <nan>:
 801d238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d240 <nan+0x8>
 801d23c:	4770      	bx	lr
 801d23e:	bf00      	nop
 801d240:	00000000 	.word	0x00000000
 801d244:	7ff80000 	.word	0x7ff80000

0801d248 <__assert_func>:
 801d248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d24a:	4614      	mov	r4, r2
 801d24c:	461a      	mov	r2, r3
 801d24e:	4b09      	ldr	r3, [pc, #36]	; (801d274 <__assert_func+0x2c>)
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	4605      	mov	r5, r0
 801d254:	68d8      	ldr	r0, [r3, #12]
 801d256:	b14c      	cbz	r4, 801d26c <__assert_func+0x24>
 801d258:	4b07      	ldr	r3, [pc, #28]	; (801d278 <__assert_func+0x30>)
 801d25a:	9100      	str	r1, [sp, #0]
 801d25c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d260:	4906      	ldr	r1, [pc, #24]	; (801d27c <__assert_func+0x34>)
 801d262:	462b      	mov	r3, r5
 801d264:	f000 fbca 	bl	801d9fc <fiprintf>
 801d268:	f000 fbda 	bl	801da20 <abort>
 801d26c:	4b04      	ldr	r3, [pc, #16]	; (801d280 <__assert_func+0x38>)
 801d26e:	461c      	mov	r4, r3
 801d270:	e7f3      	b.n	801d25a <__assert_func+0x12>
 801d272:	bf00      	nop
 801d274:	24000158 	.word	0x24000158
 801d278:	0801e952 	.word	0x0801e952
 801d27c:	0801e95f 	.word	0x0801e95f
 801d280:	0801e98d 	.word	0x0801e98d

0801d284 <_calloc_r>:
 801d284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d286:	fba1 2402 	umull	r2, r4, r1, r2
 801d28a:	b94c      	cbnz	r4, 801d2a0 <_calloc_r+0x1c>
 801d28c:	4611      	mov	r1, r2
 801d28e:	9201      	str	r2, [sp, #4]
 801d290:	f7fe fa02 	bl	801b698 <_malloc_r>
 801d294:	9a01      	ldr	r2, [sp, #4]
 801d296:	4605      	mov	r5, r0
 801d298:	b930      	cbnz	r0, 801d2a8 <_calloc_r+0x24>
 801d29a:	4628      	mov	r0, r5
 801d29c:	b003      	add	sp, #12
 801d29e:	bd30      	pop	{r4, r5, pc}
 801d2a0:	220c      	movs	r2, #12
 801d2a2:	6002      	str	r2, [r0, #0]
 801d2a4:	2500      	movs	r5, #0
 801d2a6:	e7f8      	b.n	801d29a <_calloc_r+0x16>
 801d2a8:	4621      	mov	r1, r4
 801d2aa:	f7fd faf8 	bl	801a89e <memset>
 801d2ae:	e7f4      	b.n	801d29a <_calloc_r+0x16>

0801d2b0 <rshift>:
 801d2b0:	6903      	ldr	r3, [r0, #16]
 801d2b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d2b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d2be:	f100 0414 	add.w	r4, r0, #20
 801d2c2:	dd45      	ble.n	801d350 <rshift+0xa0>
 801d2c4:	f011 011f 	ands.w	r1, r1, #31
 801d2c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d2cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d2d0:	d10c      	bne.n	801d2ec <rshift+0x3c>
 801d2d2:	f100 0710 	add.w	r7, r0, #16
 801d2d6:	4629      	mov	r1, r5
 801d2d8:	42b1      	cmp	r1, r6
 801d2da:	d334      	bcc.n	801d346 <rshift+0x96>
 801d2dc:	1a9b      	subs	r3, r3, r2
 801d2de:	009b      	lsls	r3, r3, #2
 801d2e0:	1eea      	subs	r2, r5, #3
 801d2e2:	4296      	cmp	r6, r2
 801d2e4:	bf38      	it	cc
 801d2e6:	2300      	movcc	r3, #0
 801d2e8:	4423      	add	r3, r4
 801d2ea:	e015      	b.n	801d318 <rshift+0x68>
 801d2ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d2f0:	f1c1 0820 	rsb	r8, r1, #32
 801d2f4:	40cf      	lsrs	r7, r1
 801d2f6:	f105 0e04 	add.w	lr, r5, #4
 801d2fa:	46a1      	mov	r9, r4
 801d2fc:	4576      	cmp	r6, lr
 801d2fe:	46f4      	mov	ip, lr
 801d300:	d815      	bhi.n	801d32e <rshift+0x7e>
 801d302:	1a9a      	subs	r2, r3, r2
 801d304:	0092      	lsls	r2, r2, #2
 801d306:	3a04      	subs	r2, #4
 801d308:	3501      	adds	r5, #1
 801d30a:	42ae      	cmp	r6, r5
 801d30c:	bf38      	it	cc
 801d30e:	2200      	movcc	r2, #0
 801d310:	18a3      	adds	r3, r4, r2
 801d312:	50a7      	str	r7, [r4, r2]
 801d314:	b107      	cbz	r7, 801d318 <rshift+0x68>
 801d316:	3304      	adds	r3, #4
 801d318:	1b1a      	subs	r2, r3, r4
 801d31a:	42a3      	cmp	r3, r4
 801d31c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d320:	bf08      	it	eq
 801d322:	2300      	moveq	r3, #0
 801d324:	6102      	str	r2, [r0, #16]
 801d326:	bf08      	it	eq
 801d328:	6143      	streq	r3, [r0, #20]
 801d32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d32e:	f8dc c000 	ldr.w	ip, [ip]
 801d332:	fa0c fc08 	lsl.w	ip, ip, r8
 801d336:	ea4c 0707 	orr.w	r7, ip, r7
 801d33a:	f849 7b04 	str.w	r7, [r9], #4
 801d33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d342:	40cf      	lsrs	r7, r1
 801d344:	e7da      	b.n	801d2fc <rshift+0x4c>
 801d346:	f851 cb04 	ldr.w	ip, [r1], #4
 801d34a:	f847 cf04 	str.w	ip, [r7, #4]!
 801d34e:	e7c3      	b.n	801d2d8 <rshift+0x28>
 801d350:	4623      	mov	r3, r4
 801d352:	e7e1      	b.n	801d318 <rshift+0x68>

0801d354 <__hexdig_fun>:
 801d354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d358:	2b09      	cmp	r3, #9
 801d35a:	d802      	bhi.n	801d362 <__hexdig_fun+0xe>
 801d35c:	3820      	subs	r0, #32
 801d35e:	b2c0      	uxtb	r0, r0
 801d360:	4770      	bx	lr
 801d362:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d366:	2b05      	cmp	r3, #5
 801d368:	d801      	bhi.n	801d36e <__hexdig_fun+0x1a>
 801d36a:	3847      	subs	r0, #71	; 0x47
 801d36c:	e7f7      	b.n	801d35e <__hexdig_fun+0xa>
 801d36e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d372:	2b05      	cmp	r3, #5
 801d374:	d801      	bhi.n	801d37a <__hexdig_fun+0x26>
 801d376:	3827      	subs	r0, #39	; 0x27
 801d378:	e7f1      	b.n	801d35e <__hexdig_fun+0xa>
 801d37a:	2000      	movs	r0, #0
 801d37c:	4770      	bx	lr
	...

0801d380 <__gethex>:
 801d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d384:	4617      	mov	r7, r2
 801d386:	680a      	ldr	r2, [r1, #0]
 801d388:	b085      	sub	sp, #20
 801d38a:	f102 0b02 	add.w	fp, r2, #2
 801d38e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d392:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d396:	4681      	mov	r9, r0
 801d398:	468a      	mov	sl, r1
 801d39a:	9302      	str	r3, [sp, #8]
 801d39c:	32fe      	adds	r2, #254	; 0xfe
 801d39e:	eb02 030b 	add.w	r3, r2, fp
 801d3a2:	46d8      	mov	r8, fp
 801d3a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801d3a8:	9301      	str	r3, [sp, #4]
 801d3aa:	2830      	cmp	r0, #48	; 0x30
 801d3ac:	d0f7      	beq.n	801d39e <__gethex+0x1e>
 801d3ae:	f7ff ffd1 	bl	801d354 <__hexdig_fun>
 801d3b2:	4604      	mov	r4, r0
 801d3b4:	2800      	cmp	r0, #0
 801d3b6:	d138      	bne.n	801d42a <__gethex+0xaa>
 801d3b8:	49a7      	ldr	r1, [pc, #668]	; (801d658 <__gethex+0x2d8>)
 801d3ba:	2201      	movs	r2, #1
 801d3bc:	4640      	mov	r0, r8
 801d3be:	f7ff ff17 	bl	801d1f0 <strncmp>
 801d3c2:	4606      	mov	r6, r0
 801d3c4:	2800      	cmp	r0, #0
 801d3c6:	d169      	bne.n	801d49c <__gethex+0x11c>
 801d3c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 801d3cc:	465d      	mov	r5, fp
 801d3ce:	f7ff ffc1 	bl	801d354 <__hexdig_fun>
 801d3d2:	2800      	cmp	r0, #0
 801d3d4:	d064      	beq.n	801d4a0 <__gethex+0x120>
 801d3d6:	465a      	mov	r2, fp
 801d3d8:	7810      	ldrb	r0, [r2, #0]
 801d3da:	2830      	cmp	r0, #48	; 0x30
 801d3dc:	4690      	mov	r8, r2
 801d3de:	f102 0201 	add.w	r2, r2, #1
 801d3e2:	d0f9      	beq.n	801d3d8 <__gethex+0x58>
 801d3e4:	f7ff ffb6 	bl	801d354 <__hexdig_fun>
 801d3e8:	2301      	movs	r3, #1
 801d3ea:	fab0 f480 	clz	r4, r0
 801d3ee:	0964      	lsrs	r4, r4, #5
 801d3f0:	465e      	mov	r6, fp
 801d3f2:	9301      	str	r3, [sp, #4]
 801d3f4:	4642      	mov	r2, r8
 801d3f6:	4615      	mov	r5, r2
 801d3f8:	3201      	adds	r2, #1
 801d3fa:	7828      	ldrb	r0, [r5, #0]
 801d3fc:	f7ff ffaa 	bl	801d354 <__hexdig_fun>
 801d400:	2800      	cmp	r0, #0
 801d402:	d1f8      	bne.n	801d3f6 <__gethex+0x76>
 801d404:	4994      	ldr	r1, [pc, #592]	; (801d658 <__gethex+0x2d8>)
 801d406:	2201      	movs	r2, #1
 801d408:	4628      	mov	r0, r5
 801d40a:	f7ff fef1 	bl	801d1f0 <strncmp>
 801d40e:	b978      	cbnz	r0, 801d430 <__gethex+0xb0>
 801d410:	b946      	cbnz	r6, 801d424 <__gethex+0xa4>
 801d412:	1c6e      	adds	r6, r5, #1
 801d414:	4632      	mov	r2, r6
 801d416:	4615      	mov	r5, r2
 801d418:	3201      	adds	r2, #1
 801d41a:	7828      	ldrb	r0, [r5, #0]
 801d41c:	f7ff ff9a 	bl	801d354 <__hexdig_fun>
 801d420:	2800      	cmp	r0, #0
 801d422:	d1f8      	bne.n	801d416 <__gethex+0x96>
 801d424:	1b73      	subs	r3, r6, r5
 801d426:	009e      	lsls	r6, r3, #2
 801d428:	e004      	b.n	801d434 <__gethex+0xb4>
 801d42a:	2400      	movs	r4, #0
 801d42c:	4626      	mov	r6, r4
 801d42e:	e7e1      	b.n	801d3f4 <__gethex+0x74>
 801d430:	2e00      	cmp	r6, #0
 801d432:	d1f7      	bne.n	801d424 <__gethex+0xa4>
 801d434:	782b      	ldrb	r3, [r5, #0]
 801d436:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d43a:	2b50      	cmp	r3, #80	; 0x50
 801d43c:	d13d      	bne.n	801d4ba <__gethex+0x13a>
 801d43e:	786b      	ldrb	r3, [r5, #1]
 801d440:	2b2b      	cmp	r3, #43	; 0x2b
 801d442:	d02f      	beq.n	801d4a4 <__gethex+0x124>
 801d444:	2b2d      	cmp	r3, #45	; 0x2d
 801d446:	d031      	beq.n	801d4ac <__gethex+0x12c>
 801d448:	1c69      	adds	r1, r5, #1
 801d44a:	f04f 0b00 	mov.w	fp, #0
 801d44e:	7808      	ldrb	r0, [r1, #0]
 801d450:	f7ff ff80 	bl	801d354 <__hexdig_fun>
 801d454:	1e42      	subs	r2, r0, #1
 801d456:	b2d2      	uxtb	r2, r2
 801d458:	2a18      	cmp	r2, #24
 801d45a:	d82e      	bhi.n	801d4ba <__gethex+0x13a>
 801d45c:	f1a0 0210 	sub.w	r2, r0, #16
 801d460:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d464:	f7ff ff76 	bl	801d354 <__hexdig_fun>
 801d468:	f100 3cff 	add.w	ip, r0, #4294967295
 801d46c:	fa5f fc8c 	uxtb.w	ip, ip
 801d470:	f1bc 0f18 	cmp.w	ip, #24
 801d474:	d91d      	bls.n	801d4b2 <__gethex+0x132>
 801d476:	f1bb 0f00 	cmp.w	fp, #0
 801d47a:	d000      	beq.n	801d47e <__gethex+0xfe>
 801d47c:	4252      	negs	r2, r2
 801d47e:	4416      	add	r6, r2
 801d480:	f8ca 1000 	str.w	r1, [sl]
 801d484:	b1dc      	cbz	r4, 801d4be <__gethex+0x13e>
 801d486:	9b01      	ldr	r3, [sp, #4]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	bf14      	ite	ne
 801d48c:	f04f 0800 	movne.w	r8, #0
 801d490:	f04f 0806 	moveq.w	r8, #6
 801d494:	4640      	mov	r0, r8
 801d496:	b005      	add	sp, #20
 801d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d49c:	4645      	mov	r5, r8
 801d49e:	4626      	mov	r6, r4
 801d4a0:	2401      	movs	r4, #1
 801d4a2:	e7c7      	b.n	801d434 <__gethex+0xb4>
 801d4a4:	f04f 0b00 	mov.w	fp, #0
 801d4a8:	1ca9      	adds	r1, r5, #2
 801d4aa:	e7d0      	b.n	801d44e <__gethex+0xce>
 801d4ac:	f04f 0b01 	mov.w	fp, #1
 801d4b0:	e7fa      	b.n	801d4a8 <__gethex+0x128>
 801d4b2:	230a      	movs	r3, #10
 801d4b4:	fb03 0002 	mla	r0, r3, r2, r0
 801d4b8:	e7d0      	b.n	801d45c <__gethex+0xdc>
 801d4ba:	4629      	mov	r1, r5
 801d4bc:	e7e0      	b.n	801d480 <__gethex+0x100>
 801d4be:	eba5 0308 	sub.w	r3, r5, r8
 801d4c2:	3b01      	subs	r3, #1
 801d4c4:	4621      	mov	r1, r4
 801d4c6:	2b07      	cmp	r3, #7
 801d4c8:	dc0a      	bgt.n	801d4e0 <__gethex+0x160>
 801d4ca:	4648      	mov	r0, r9
 801d4cc:	f7fe f970 	bl	801b7b0 <_Balloc>
 801d4d0:	4604      	mov	r4, r0
 801d4d2:	b940      	cbnz	r0, 801d4e6 <__gethex+0x166>
 801d4d4:	4b61      	ldr	r3, [pc, #388]	; (801d65c <__gethex+0x2dc>)
 801d4d6:	4602      	mov	r2, r0
 801d4d8:	21e4      	movs	r1, #228	; 0xe4
 801d4da:	4861      	ldr	r0, [pc, #388]	; (801d660 <__gethex+0x2e0>)
 801d4dc:	f7ff feb4 	bl	801d248 <__assert_func>
 801d4e0:	3101      	adds	r1, #1
 801d4e2:	105b      	asrs	r3, r3, #1
 801d4e4:	e7ef      	b.n	801d4c6 <__gethex+0x146>
 801d4e6:	f100 0a14 	add.w	sl, r0, #20
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	495a      	ldr	r1, [pc, #360]	; (801d658 <__gethex+0x2d8>)
 801d4ee:	f8cd a004 	str.w	sl, [sp, #4]
 801d4f2:	469b      	mov	fp, r3
 801d4f4:	45a8      	cmp	r8, r5
 801d4f6:	d342      	bcc.n	801d57e <__gethex+0x1fe>
 801d4f8:	9801      	ldr	r0, [sp, #4]
 801d4fa:	f840 bb04 	str.w	fp, [r0], #4
 801d4fe:	eba0 000a 	sub.w	r0, r0, sl
 801d502:	1080      	asrs	r0, r0, #2
 801d504:	6120      	str	r0, [r4, #16]
 801d506:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801d50a:	4658      	mov	r0, fp
 801d50c:	f7fe fa42 	bl	801b994 <__hi0bits>
 801d510:	683d      	ldr	r5, [r7, #0]
 801d512:	eba8 0000 	sub.w	r0, r8, r0
 801d516:	42a8      	cmp	r0, r5
 801d518:	dd59      	ble.n	801d5ce <__gethex+0x24e>
 801d51a:	eba0 0805 	sub.w	r8, r0, r5
 801d51e:	4641      	mov	r1, r8
 801d520:	4620      	mov	r0, r4
 801d522:	f7fe fdce 	bl	801c0c2 <__any_on>
 801d526:	4683      	mov	fp, r0
 801d528:	b1b8      	cbz	r0, 801d55a <__gethex+0x1da>
 801d52a:	f108 33ff 	add.w	r3, r8, #4294967295
 801d52e:	1159      	asrs	r1, r3, #5
 801d530:	f003 021f 	and.w	r2, r3, #31
 801d534:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d538:	f04f 0b01 	mov.w	fp, #1
 801d53c:	fa0b f202 	lsl.w	r2, fp, r2
 801d540:	420a      	tst	r2, r1
 801d542:	d00a      	beq.n	801d55a <__gethex+0x1da>
 801d544:	455b      	cmp	r3, fp
 801d546:	dd06      	ble.n	801d556 <__gethex+0x1d6>
 801d548:	f1a8 0102 	sub.w	r1, r8, #2
 801d54c:	4620      	mov	r0, r4
 801d54e:	f7fe fdb8 	bl	801c0c2 <__any_on>
 801d552:	2800      	cmp	r0, #0
 801d554:	d138      	bne.n	801d5c8 <__gethex+0x248>
 801d556:	f04f 0b02 	mov.w	fp, #2
 801d55a:	4641      	mov	r1, r8
 801d55c:	4620      	mov	r0, r4
 801d55e:	f7ff fea7 	bl	801d2b0 <rshift>
 801d562:	4446      	add	r6, r8
 801d564:	68bb      	ldr	r3, [r7, #8]
 801d566:	42b3      	cmp	r3, r6
 801d568:	da41      	bge.n	801d5ee <__gethex+0x26e>
 801d56a:	4621      	mov	r1, r4
 801d56c:	4648      	mov	r0, r9
 801d56e:	f7fe f95f 	bl	801b830 <_Bfree>
 801d572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d574:	2300      	movs	r3, #0
 801d576:	6013      	str	r3, [r2, #0]
 801d578:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801d57c:	e78a      	b.n	801d494 <__gethex+0x114>
 801d57e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801d582:	2a2e      	cmp	r2, #46	; 0x2e
 801d584:	d014      	beq.n	801d5b0 <__gethex+0x230>
 801d586:	2b20      	cmp	r3, #32
 801d588:	d106      	bne.n	801d598 <__gethex+0x218>
 801d58a:	9b01      	ldr	r3, [sp, #4]
 801d58c:	f843 bb04 	str.w	fp, [r3], #4
 801d590:	f04f 0b00 	mov.w	fp, #0
 801d594:	9301      	str	r3, [sp, #4]
 801d596:	465b      	mov	r3, fp
 801d598:	7828      	ldrb	r0, [r5, #0]
 801d59a:	9303      	str	r3, [sp, #12]
 801d59c:	f7ff feda 	bl	801d354 <__hexdig_fun>
 801d5a0:	9b03      	ldr	r3, [sp, #12]
 801d5a2:	f000 000f 	and.w	r0, r0, #15
 801d5a6:	4098      	lsls	r0, r3
 801d5a8:	ea4b 0b00 	orr.w	fp, fp, r0
 801d5ac:	3304      	adds	r3, #4
 801d5ae:	e7a1      	b.n	801d4f4 <__gethex+0x174>
 801d5b0:	45a8      	cmp	r8, r5
 801d5b2:	d8e8      	bhi.n	801d586 <__gethex+0x206>
 801d5b4:	2201      	movs	r2, #1
 801d5b6:	4628      	mov	r0, r5
 801d5b8:	9303      	str	r3, [sp, #12]
 801d5ba:	f7ff fe19 	bl	801d1f0 <strncmp>
 801d5be:	4926      	ldr	r1, [pc, #152]	; (801d658 <__gethex+0x2d8>)
 801d5c0:	9b03      	ldr	r3, [sp, #12]
 801d5c2:	2800      	cmp	r0, #0
 801d5c4:	d1df      	bne.n	801d586 <__gethex+0x206>
 801d5c6:	e795      	b.n	801d4f4 <__gethex+0x174>
 801d5c8:	f04f 0b03 	mov.w	fp, #3
 801d5cc:	e7c5      	b.n	801d55a <__gethex+0x1da>
 801d5ce:	da0b      	bge.n	801d5e8 <__gethex+0x268>
 801d5d0:	eba5 0800 	sub.w	r8, r5, r0
 801d5d4:	4621      	mov	r1, r4
 801d5d6:	4642      	mov	r2, r8
 801d5d8:	4648      	mov	r0, r9
 801d5da:	f7fe fb43 	bl	801bc64 <__lshift>
 801d5de:	eba6 0608 	sub.w	r6, r6, r8
 801d5e2:	4604      	mov	r4, r0
 801d5e4:	f100 0a14 	add.w	sl, r0, #20
 801d5e8:	f04f 0b00 	mov.w	fp, #0
 801d5ec:	e7ba      	b.n	801d564 <__gethex+0x1e4>
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	42b3      	cmp	r3, r6
 801d5f2:	dd73      	ble.n	801d6dc <__gethex+0x35c>
 801d5f4:	1b9e      	subs	r6, r3, r6
 801d5f6:	42b5      	cmp	r5, r6
 801d5f8:	dc34      	bgt.n	801d664 <__gethex+0x2e4>
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	2b02      	cmp	r3, #2
 801d5fe:	d023      	beq.n	801d648 <__gethex+0x2c8>
 801d600:	2b03      	cmp	r3, #3
 801d602:	d025      	beq.n	801d650 <__gethex+0x2d0>
 801d604:	2b01      	cmp	r3, #1
 801d606:	d115      	bne.n	801d634 <__gethex+0x2b4>
 801d608:	42b5      	cmp	r5, r6
 801d60a:	d113      	bne.n	801d634 <__gethex+0x2b4>
 801d60c:	2d01      	cmp	r5, #1
 801d60e:	d10b      	bne.n	801d628 <__gethex+0x2a8>
 801d610:	9a02      	ldr	r2, [sp, #8]
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	6013      	str	r3, [r2, #0]
 801d616:	2301      	movs	r3, #1
 801d618:	6123      	str	r3, [r4, #16]
 801d61a:	f8ca 3000 	str.w	r3, [sl]
 801d61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d620:	f04f 0862 	mov.w	r8, #98	; 0x62
 801d624:	601c      	str	r4, [r3, #0]
 801d626:	e735      	b.n	801d494 <__gethex+0x114>
 801d628:	1e69      	subs	r1, r5, #1
 801d62a:	4620      	mov	r0, r4
 801d62c:	f7fe fd49 	bl	801c0c2 <__any_on>
 801d630:	2800      	cmp	r0, #0
 801d632:	d1ed      	bne.n	801d610 <__gethex+0x290>
 801d634:	4621      	mov	r1, r4
 801d636:	4648      	mov	r0, r9
 801d638:	f7fe f8fa 	bl	801b830 <_Bfree>
 801d63c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d63e:	2300      	movs	r3, #0
 801d640:	6013      	str	r3, [r2, #0]
 801d642:	f04f 0850 	mov.w	r8, #80	; 0x50
 801d646:	e725      	b.n	801d494 <__gethex+0x114>
 801d648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d1f2      	bne.n	801d634 <__gethex+0x2b4>
 801d64e:	e7df      	b.n	801d610 <__gethex+0x290>
 801d650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d652:	2b00      	cmp	r3, #0
 801d654:	d1dc      	bne.n	801d610 <__gethex+0x290>
 801d656:	e7ed      	b.n	801d634 <__gethex+0x2b4>
 801d658:	0801e7e4 	.word	0x0801e7e4
 801d65c:	0801e67d 	.word	0x0801e67d
 801d660:	0801e98e 	.word	0x0801e98e
 801d664:	f106 38ff 	add.w	r8, r6, #4294967295
 801d668:	f1bb 0f00 	cmp.w	fp, #0
 801d66c:	d133      	bne.n	801d6d6 <__gethex+0x356>
 801d66e:	f1b8 0f00 	cmp.w	r8, #0
 801d672:	d004      	beq.n	801d67e <__gethex+0x2fe>
 801d674:	4641      	mov	r1, r8
 801d676:	4620      	mov	r0, r4
 801d678:	f7fe fd23 	bl	801c0c2 <__any_on>
 801d67c:	4683      	mov	fp, r0
 801d67e:	ea4f 1268 	mov.w	r2, r8, asr #5
 801d682:	2301      	movs	r3, #1
 801d684:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d688:	f008 081f 	and.w	r8, r8, #31
 801d68c:	fa03 f308 	lsl.w	r3, r3, r8
 801d690:	4213      	tst	r3, r2
 801d692:	4631      	mov	r1, r6
 801d694:	4620      	mov	r0, r4
 801d696:	bf18      	it	ne
 801d698:	f04b 0b02 	orrne.w	fp, fp, #2
 801d69c:	1bad      	subs	r5, r5, r6
 801d69e:	f7ff fe07 	bl	801d2b0 <rshift>
 801d6a2:	687e      	ldr	r6, [r7, #4]
 801d6a4:	f04f 0802 	mov.w	r8, #2
 801d6a8:	f1bb 0f00 	cmp.w	fp, #0
 801d6ac:	d04a      	beq.n	801d744 <__gethex+0x3c4>
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	2b02      	cmp	r3, #2
 801d6b2:	d016      	beq.n	801d6e2 <__gethex+0x362>
 801d6b4:	2b03      	cmp	r3, #3
 801d6b6:	d018      	beq.n	801d6ea <__gethex+0x36a>
 801d6b8:	2b01      	cmp	r3, #1
 801d6ba:	d109      	bne.n	801d6d0 <__gethex+0x350>
 801d6bc:	f01b 0f02 	tst.w	fp, #2
 801d6c0:	d006      	beq.n	801d6d0 <__gethex+0x350>
 801d6c2:	f8da 3000 	ldr.w	r3, [sl]
 801d6c6:	ea4b 0b03 	orr.w	fp, fp, r3
 801d6ca:	f01b 0f01 	tst.w	fp, #1
 801d6ce:	d10f      	bne.n	801d6f0 <__gethex+0x370>
 801d6d0:	f048 0810 	orr.w	r8, r8, #16
 801d6d4:	e036      	b.n	801d744 <__gethex+0x3c4>
 801d6d6:	f04f 0b01 	mov.w	fp, #1
 801d6da:	e7d0      	b.n	801d67e <__gethex+0x2fe>
 801d6dc:	f04f 0801 	mov.w	r8, #1
 801d6e0:	e7e2      	b.n	801d6a8 <__gethex+0x328>
 801d6e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d6e4:	f1c3 0301 	rsb	r3, r3, #1
 801d6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801d6ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d0ef      	beq.n	801d6d0 <__gethex+0x350>
 801d6f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d6f4:	f104 0214 	add.w	r2, r4, #20
 801d6f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801d6fc:	9301      	str	r3, [sp, #4]
 801d6fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801d702:	2300      	movs	r3, #0
 801d704:	4694      	mov	ip, r2
 801d706:	f852 1b04 	ldr.w	r1, [r2], #4
 801d70a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801d70e:	d01e      	beq.n	801d74e <__gethex+0x3ce>
 801d710:	3101      	adds	r1, #1
 801d712:	f8cc 1000 	str.w	r1, [ip]
 801d716:	f1b8 0f02 	cmp.w	r8, #2
 801d71a:	f104 0214 	add.w	r2, r4, #20
 801d71e:	d13d      	bne.n	801d79c <__gethex+0x41c>
 801d720:	683b      	ldr	r3, [r7, #0]
 801d722:	3b01      	subs	r3, #1
 801d724:	42ab      	cmp	r3, r5
 801d726:	d10b      	bne.n	801d740 <__gethex+0x3c0>
 801d728:	1169      	asrs	r1, r5, #5
 801d72a:	2301      	movs	r3, #1
 801d72c:	f005 051f 	and.w	r5, r5, #31
 801d730:	fa03 f505 	lsl.w	r5, r3, r5
 801d734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d738:	421d      	tst	r5, r3
 801d73a:	bf18      	it	ne
 801d73c:	f04f 0801 	movne.w	r8, #1
 801d740:	f048 0820 	orr.w	r8, r8, #32
 801d744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d746:	601c      	str	r4, [r3, #0]
 801d748:	9b02      	ldr	r3, [sp, #8]
 801d74a:	601e      	str	r6, [r3, #0]
 801d74c:	e6a2      	b.n	801d494 <__gethex+0x114>
 801d74e:	4290      	cmp	r0, r2
 801d750:	f842 3c04 	str.w	r3, [r2, #-4]
 801d754:	d8d6      	bhi.n	801d704 <__gethex+0x384>
 801d756:	68a2      	ldr	r2, [r4, #8]
 801d758:	4593      	cmp	fp, r2
 801d75a:	db17      	blt.n	801d78c <__gethex+0x40c>
 801d75c:	6861      	ldr	r1, [r4, #4]
 801d75e:	4648      	mov	r0, r9
 801d760:	3101      	adds	r1, #1
 801d762:	f7fe f825 	bl	801b7b0 <_Balloc>
 801d766:	4682      	mov	sl, r0
 801d768:	b918      	cbnz	r0, 801d772 <__gethex+0x3f2>
 801d76a:	4b1b      	ldr	r3, [pc, #108]	; (801d7d8 <__gethex+0x458>)
 801d76c:	4602      	mov	r2, r0
 801d76e:	2184      	movs	r1, #132	; 0x84
 801d770:	e6b3      	b.n	801d4da <__gethex+0x15a>
 801d772:	6922      	ldr	r2, [r4, #16]
 801d774:	3202      	adds	r2, #2
 801d776:	f104 010c 	add.w	r1, r4, #12
 801d77a:	0092      	lsls	r2, r2, #2
 801d77c:	300c      	adds	r0, #12
 801d77e:	f7fd f90e 	bl	801a99e <memcpy>
 801d782:	4621      	mov	r1, r4
 801d784:	4648      	mov	r0, r9
 801d786:	f7fe f853 	bl	801b830 <_Bfree>
 801d78a:	4654      	mov	r4, sl
 801d78c:	6922      	ldr	r2, [r4, #16]
 801d78e:	1c51      	adds	r1, r2, #1
 801d790:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d794:	6121      	str	r1, [r4, #16]
 801d796:	2101      	movs	r1, #1
 801d798:	6151      	str	r1, [r2, #20]
 801d79a:	e7bc      	b.n	801d716 <__gethex+0x396>
 801d79c:	6921      	ldr	r1, [r4, #16]
 801d79e:	4559      	cmp	r1, fp
 801d7a0:	dd0b      	ble.n	801d7ba <__gethex+0x43a>
 801d7a2:	2101      	movs	r1, #1
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f7ff fd83 	bl	801d2b0 <rshift>
 801d7aa:	68bb      	ldr	r3, [r7, #8]
 801d7ac:	3601      	adds	r6, #1
 801d7ae:	42b3      	cmp	r3, r6
 801d7b0:	f6ff aedb 	blt.w	801d56a <__gethex+0x1ea>
 801d7b4:	f04f 0801 	mov.w	r8, #1
 801d7b8:	e7c2      	b.n	801d740 <__gethex+0x3c0>
 801d7ba:	f015 051f 	ands.w	r5, r5, #31
 801d7be:	d0f9      	beq.n	801d7b4 <__gethex+0x434>
 801d7c0:	9b01      	ldr	r3, [sp, #4]
 801d7c2:	441a      	add	r2, r3
 801d7c4:	f1c5 0520 	rsb	r5, r5, #32
 801d7c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801d7cc:	f7fe f8e2 	bl	801b994 <__hi0bits>
 801d7d0:	42a8      	cmp	r0, r5
 801d7d2:	dbe6      	blt.n	801d7a2 <__gethex+0x422>
 801d7d4:	e7ee      	b.n	801d7b4 <__gethex+0x434>
 801d7d6:	bf00      	nop
 801d7d8:	0801e67d 	.word	0x0801e67d

0801d7dc <L_shift>:
 801d7dc:	f1c2 0208 	rsb	r2, r2, #8
 801d7e0:	0092      	lsls	r2, r2, #2
 801d7e2:	b570      	push	{r4, r5, r6, lr}
 801d7e4:	f1c2 0620 	rsb	r6, r2, #32
 801d7e8:	6843      	ldr	r3, [r0, #4]
 801d7ea:	6804      	ldr	r4, [r0, #0]
 801d7ec:	fa03 f506 	lsl.w	r5, r3, r6
 801d7f0:	432c      	orrs	r4, r5
 801d7f2:	40d3      	lsrs	r3, r2
 801d7f4:	6004      	str	r4, [r0, #0]
 801d7f6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d7fa:	4288      	cmp	r0, r1
 801d7fc:	d3f4      	bcc.n	801d7e8 <L_shift+0xc>
 801d7fe:	bd70      	pop	{r4, r5, r6, pc}

0801d800 <__match>:
 801d800:	b530      	push	{r4, r5, lr}
 801d802:	6803      	ldr	r3, [r0, #0]
 801d804:	3301      	adds	r3, #1
 801d806:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d80a:	b914      	cbnz	r4, 801d812 <__match+0x12>
 801d80c:	6003      	str	r3, [r0, #0]
 801d80e:	2001      	movs	r0, #1
 801d810:	bd30      	pop	{r4, r5, pc}
 801d812:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d816:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d81a:	2d19      	cmp	r5, #25
 801d81c:	bf98      	it	ls
 801d81e:	3220      	addls	r2, #32
 801d820:	42a2      	cmp	r2, r4
 801d822:	d0f0      	beq.n	801d806 <__match+0x6>
 801d824:	2000      	movs	r0, #0
 801d826:	e7f3      	b.n	801d810 <__match+0x10>

0801d828 <__hexnan>:
 801d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d82c:	680b      	ldr	r3, [r1, #0]
 801d82e:	6801      	ldr	r1, [r0, #0]
 801d830:	115e      	asrs	r6, r3, #5
 801d832:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d836:	f013 031f 	ands.w	r3, r3, #31
 801d83a:	b087      	sub	sp, #28
 801d83c:	bf18      	it	ne
 801d83e:	3604      	addne	r6, #4
 801d840:	2500      	movs	r5, #0
 801d842:	1f37      	subs	r7, r6, #4
 801d844:	4682      	mov	sl, r0
 801d846:	4690      	mov	r8, r2
 801d848:	9301      	str	r3, [sp, #4]
 801d84a:	f846 5c04 	str.w	r5, [r6, #-4]
 801d84e:	46b9      	mov	r9, r7
 801d850:	463c      	mov	r4, r7
 801d852:	9502      	str	r5, [sp, #8]
 801d854:	46ab      	mov	fp, r5
 801d856:	784a      	ldrb	r2, [r1, #1]
 801d858:	1c4b      	adds	r3, r1, #1
 801d85a:	9303      	str	r3, [sp, #12]
 801d85c:	b342      	cbz	r2, 801d8b0 <__hexnan+0x88>
 801d85e:	4610      	mov	r0, r2
 801d860:	9105      	str	r1, [sp, #20]
 801d862:	9204      	str	r2, [sp, #16]
 801d864:	f7ff fd76 	bl	801d354 <__hexdig_fun>
 801d868:	2800      	cmp	r0, #0
 801d86a:	d14f      	bne.n	801d90c <__hexnan+0xe4>
 801d86c:	9a04      	ldr	r2, [sp, #16]
 801d86e:	9905      	ldr	r1, [sp, #20]
 801d870:	2a20      	cmp	r2, #32
 801d872:	d818      	bhi.n	801d8a6 <__hexnan+0x7e>
 801d874:	9b02      	ldr	r3, [sp, #8]
 801d876:	459b      	cmp	fp, r3
 801d878:	dd13      	ble.n	801d8a2 <__hexnan+0x7a>
 801d87a:	454c      	cmp	r4, r9
 801d87c:	d206      	bcs.n	801d88c <__hexnan+0x64>
 801d87e:	2d07      	cmp	r5, #7
 801d880:	dc04      	bgt.n	801d88c <__hexnan+0x64>
 801d882:	462a      	mov	r2, r5
 801d884:	4649      	mov	r1, r9
 801d886:	4620      	mov	r0, r4
 801d888:	f7ff ffa8 	bl	801d7dc <L_shift>
 801d88c:	4544      	cmp	r4, r8
 801d88e:	d950      	bls.n	801d932 <__hexnan+0x10a>
 801d890:	2300      	movs	r3, #0
 801d892:	f1a4 0904 	sub.w	r9, r4, #4
 801d896:	f844 3c04 	str.w	r3, [r4, #-4]
 801d89a:	f8cd b008 	str.w	fp, [sp, #8]
 801d89e:	464c      	mov	r4, r9
 801d8a0:	461d      	mov	r5, r3
 801d8a2:	9903      	ldr	r1, [sp, #12]
 801d8a4:	e7d7      	b.n	801d856 <__hexnan+0x2e>
 801d8a6:	2a29      	cmp	r2, #41	; 0x29
 801d8a8:	d155      	bne.n	801d956 <__hexnan+0x12e>
 801d8aa:	3102      	adds	r1, #2
 801d8ac:	f8ca 1000 	str.w	r1, [sl]
 801d8b0:	f1bb 0f00 	cmp.w	fp, #0
 801d8b4:	d04f      	beq.n	801d956 <__hexnan+0x12e>
 801d8b6:	454c      	cmp	r4, r9
 801d8b8:	d206      	bcs.n	801d8c8 <__hexnan+0xa0>
 801d8ba:	2d07      	cmp	r5, #7
 801d8bc:	dc04      	bgt.n	801d8c8 <__hexnan+0xa0>
 801d8be:	462a      	mov	r2, r5
 801d8c0:	4649      	mov	r1, r9
 801d8c2:	4620      	mov	r0, r4
 801d8c4:	f7ff ff8a 	bl	801d7dc <L_shift>
 801d8c8:	4544      	cmp	r4, r8
 801d8ca:	d934      	bls.n	801d936 <__hexnan+0x10e>
 801d8cc:	f1a8 0204 	sub.w	r2, r8, #4
 801d8d0:	4623      	mov	r3, r4
 801d8d2:	f853 1b04 	ldr.w	r1, [r3], #4
 801d8d6:	f842 1f04 	str.w	r1, [r2, #4]!
 801d8da:	429f      	cmp	r7, r3
 801d8dc:	d2f9      	bcs.n	801d8d2 <__hexnan+0xaa>
 801d8de:	1b3b      	subs	r3, r7, r4
 801d8e0:	f023 0303 	bic.w	r3, r3, #3
 801d8e4:	3304      	adds	r3, #4
 801d8e6:	3e03      	subs	r6, #3
 801d8e8:	3401      	adds	r4, #1
 801d8ea:	42a6      	cmp	r6, r4
 801d8ec:	bf38      	it	cc
 801d8ee:	2304      	movcc	r3, #4
 801d8f0:	4443      	add	r3, r8
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	f843 2b04 	str.w	r2, [r3], #4
 801d8f8:	429f      	cmp	r7, r3
 801d8fa:	d2fb      	bcs.n	801d8f4 <__hexnan+0xcc>
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	b91b      	cbnz	r3, 801d908 <__hexnan+0xe0>
 801d900:	4547      	cmp	r7, r8
 801d902:	d126      	bne.n	801d952 <__hexnan+0x12a>
 801d904:	2301      	movs	r3, #1
 801d906:	603b      	str	r3, [r7, #0]
 801d908:	2005      	movs	r0, #5
 801d90a:	e025      	b.n	801d958 <__hexnan+0x130>
 801d90c:	3501      	adds	r5, #1
 801d90e:	2d08      	cmp	r5, #8
 801d910:	f10b 0b01 	add.w	fp, fp, #1
 801d914:	dd06      	ble.n	801d924 <__hexnan+0xfc>
 801d916:	4544      	cmp	r4, r8
 801d918:	d9c3      	bls.n	801d8a2 <__hexnan+0x7a>
 801d91a:	2300      	movs	r3, #0
 801d91c:	f844 3c04 	str.w	r3, [r4, #-4]
 801d920:	2501      	movs	r5, #1
 801d922:	3c04      	subs	r4, #4
 801d924:	6822      	ldr	r2, [r4, #0]
 801d926:	f000 000f 	and.w	r0, r0, #15
 801d92a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801d92e:	6020      	str	r0, [r4, #0]
 801d930:	e7b7      	b.n	801d8a2 <__hexnan+0x7a>
 801d932:	2508      	movs	r5, #8
 801d934:	e7b5      	b.n	801d8a2 <__hexnan+0x7a>
 801d936:	9b01      	ldr	r3, [sp, #4]
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d0df      	beq.n	801d8fc <__hexnan+0xd4>
 801d93c:	f1c3 0320 	rsb	r3, r3, #32
 801d940:	f04f 32ff 	mov.w	r2, #4294967295
 801d944:	40da      	lsrs	r2, r3
 801d946:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801d94a:	4013      	ands	r3, r2
 801d94c:	f846 3c04 	str.w	r3, [r6, #-4]
 801d950:	e7d4      	b.n	801d8fc <__hexnan+0xd4>
 801d952:	3f04      	subs	r7, #4
 801d954:	e7d2      	b.n	801d8fc <__hexnan+0xd4>
 801d956:	2004      	movs	r0, #4
 801d958:	b007      	add	sp, #28
 801d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d95e <__ascii_mbtowc>:
 801d95e:	b082      	sub	sp, #8
 801d960:	b901      	cbnz	r1, 801d964 <__ascii_mbtowc+0x6>
 801d962:	a901      	add	r1, sp, #4
 801d964:	b142      	cbz	r2, 801d978 <__ascii_mbtowc+0x1a>
 801d966:	b14b      	cbz	r3, 801d97c <__ascii_mbtowc+0x1e>
 801d968:	7813      	ldrb	r3, [r2, #0]
 801d96a:	600b      	str	r3, [r1, #0]
 801d96c:	7812      	ldrb	r2, [r2, #0]
 801d96e:	1e10      	subs	r0, r2, #0
 801d970:	bf18      	it	ne
 801d972:	2001      	movne	r0, #1
 801d974:	b002      	add	sp, #8
 801d976:	4770      	bx	lr
 801d978:	4610      	mov	r0, r2
 801d97a:	e7fb      	b.n	801d974 <__ascii_mbtowc+0x16>
 801d97c:	f06f 0001 	mvn.w	r0, #1
 801d980:	e7f8      	b.n	801d974 <__ascii_mbtowc+0x16>

0801d982 <_realloc_r>:
 801d982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d986:	4680      	mov	r8, r0
 801d988:	4614      	mov	r4, r2
 801d98a:	460e      	mov	r6, r1
 801d98c:	b921      	cbnz	r1, 801d998 <_realloc_r+0x16>
 801d98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d992:	4611      	mov	r1, r2
 801d994:	f7fd be80 	b.w	801b698 <_malloc_r>
 801d998:	b92a      	cbnz	r2, 801d9a6 <_realloc_r+0x24>
 801d99a:	f7fd fe09 	bl	801b5b0 <_free_r>
 801d99e:	4625      	mov	r5, r4
 801d9a0:	4628      	mov	r0, r5
 801d9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9a6:	f000 f842 	bl	801da2e <_malloc_usable_size_r>
 801d9aa:	4284      	cmp	r4, r0
 801d9ac:	4607      	mov	r7, r0
 801d9ae:	d802      	bhi.n	801d9b6 <_realloc_r+0x34>
 801d9b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d9b4:	d812      	bhi.n	801d9dc <_realloc_r+0x5a>
 801d9b6:	4621      	mov	r1, r4
 801d9b8:	4640      	mov	r0, r8
 801d9ba:	f7fd fe6d 	bl	801b698 <_malloc_r>
 801d9be:	4605      	mov	r5, r0
 801d9c0:	2800      	cmp	r0, #0
 801d9c2:	d0ed      	beq.n	801d9a0 <_realloc_r+0x1e>
 801d9c4:	42bc      	cmp	r4, r7
 801d9c6:	4622      	mov	r2, r4
 801d9c8:	4631      	mov	r1, r6
 801d9ca:	bf28      	it	cs
 801d9cc:	463a      	movcs	r2, r7
 801d9ce:	f7fc ffe6 	bl	801a99e <memcpy>
 801d9d2:	4631      	mov	r1, r6
 801d9d4:	4640      	mov	r0, r8
 801d9d6:	f7fd fdeb 	bl	801b5b0 <_free_r>
 801d9da:	e7e1      	b.n	801d9a0 <_realloc_r+0x1e>
 801d9dc:	4635      	mov	r5, r6
 801d9de:	e7df      	b.n	801d9a0 <_realloc_r+0x1e>

0801d9e0 <__ascii_wctomb>:
 801d9e0:	b149      	cbz	r1, 801d9f6 <__ascii_wctomb+0x16>
 801d9e2:	2aff      	cmp	r2, #255	; 0xff
 801d9e4:	bf85      	ittet	hi
 801d9e6:	238a      	movhi	r3, #138	; 0x8a
 801d9e8:	6003      	strhi	r3, [r0, #0]
 801d9ea:	700a      	strbls	r2, [r1, #0]
 801d9ec:	f04f 30ff 	movhi.w	r0, #4294967295
 801d9f0:	bf98      	it	ls
 801d9f2:	2001      	movls	r0, #1
 801d9f4:	4770      	bx	lr
 801d9f6:	4608      	mov	r0, r1
 801d9f8:	4770      	bx	lr
	...

0801d9fc <fiprintf>:
 801d9fc:	b40e      	push	{r1, r2, r3}
 801d9fe:	b503      	push	{r0, r1, lr}
 801da00:	4601      	mov	r1, r0
 801da02:	ab03      	add	r3, sp, #12
 801da04:	4805      	ldr	r0, [pc, #20]	; (801da1c <fiprintf+0x20>)
 801da06:	f853 2b04 	ldr.w	r2, [r3], #4
 801da0a:	6800      	ldr	r0, [r0, #0]
 801da0c:	9301      	str	r3, [sp, #4]
 801da0e:	f000 f83f 	bl	801da90 <_vfiprintf_r>
 801da12:	b002      	add	sp, #8
 801da14:	f85d eb04 	ldr.w	lr, [sp], #4
 801da18:	b003      	add	sp, #12
 801da1a:	4770      	bx	lr
 801da1c:	24000158 	.word	0x24000158

0801da20 <abort>:
 801da20:	b508      	push	{r3, lr}
 801da22:	2006      	movs	r0, #6
 801da24:	f000 fa0c 	bl	801de40 <raise>
 801da28:	2001      	movs	r0, #1
 801da2a:	f7e5 fc6d 	bl	8003308 <_exit>

0801da2e <_malloc_usable_size_r>:
 801da2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801da32:	1f18      	subs	r0, r3, #4
 801da34:	2b00      	cmp	r3, #0
 801da36:	bfbc      	itt	lt
 801da38:	580b      	ldrlt	r3, [r1, r0]
 801da3a:	18c0      	addlt	r0, r0, r3
 801da3c:	4770      	bx	lr

0801da3e <__sfputc_r>:
 801da3e:	6893      	ldr	r3, [r2, #8]
 801da40:	3b01      	subs	r3, #1
 801da42:	2b00      	cmp	r3, #0
 801da44:	b410      	push	{r4}
 801da46:	6093      	str	r3, [r2, #8]
 801da48:	da08      	bge.n	801da5c <__sfputc_r+0x1e>
 801da4a:	6994      	ldr	r4, [r2, #24]
 801da4c:	42a3      	cmp	r3, r4
 801da4e:	db01      	blt.n	801da54 <__sfputc_r+0x16>
 801da50:	290a      	cmp	r1, #10
 801da52:	d103      	bne.n	801da5c <__sfputc_r+0x1e>
 801da54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da58:	f000 b934 	b.w	801dcc4 <__swbuf_r>
 801da5c:	6813      	ldr	r3, [r2, #0]
 801da5e:	1c58      	adds	r0, r3, #1
 801da60:	6010      	str	r0, [r2, #0]
 801da62:	7019      	strb	r1, [r3, #0]
 801da64:	4608      	mov	r0, r1
 801da66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da6a:	4770      	bx	lr

0801da6c <__sfputs_r>:
 801da6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da6e:	4606      	mov	r6, r0
 801da70:	460f      	mov	r7, r1
 801da72:	4614      	mov	r4, r2
 801da74:	18d5      	adds	r5, r2, r3
 801da76:	42ac      	cmp	r4, r5
 801da78:	d101      	bne.n	801da7e <__sfputs_r+0x12>
 801da7a:	2000      	movs	r0, #0
 801da7c:	e007      	b.n	801da8e <__sfputs_r+0x22>
 801da7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da82:	463a      	mov	r2, r7
 801da84:	4630      	mov	r0, r6
 801da86:	f7ff ffda 	bl	801da3e <__sfputc_r>
 801da8a:	1c43      	adds	r3, r0, #1
 801da8c:	d1f3      	bne.n	801da76 <__sfputs_r+0xa>
 801da8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801da90 <_vfiprintf_r>:
 801da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da94:	460d      	mov	r5, r1
 801da96:	b09d      	sub	sp, #116	; 0x74
 801da98:	4614      	mov	r4, r2
 801da9a:	4698      	mov	r8, r3
 801da9c:	4606      	mov	r6, r0
 801da9e:	b118      	cbz	r0, 801daa8 <_vfiprintf_r+0x18>
 801daa0:	6a03      	ldr	r3, [r0, #32]
 801daa2:	b90b      	cbnz	r3, 801daa8 <_vfiprintf_r+0x18>
 801daa4:	f7fc fe62 	bl	801a76c <__sinit>
 801daa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801daaa:	07d9      	lsls	r1, r3, #31
 801daac:	d405      	bmi.n	801daba <_vfiprintf_r+0x2a>
 801daae:	89ab      	ldrh	r3, [r5, #12]
 801dab0:	059a      	lsls	r2, r3, #22
 801dab2:	d402      	bmi.n	801daba <_vfiprintf_r+0x2a>
 801dab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dab6:	f7fc ff70 	bl	801a99a <__retarget_lock_acquire_recursive>
 801daba:	89ab      	ldrh	r3, [r5, #12]
 801dabc:	071b      	lsls	r3, r3, #28
 801dabe:	d501      	bpl.n	801dac4 <_vfiprintf_r+0x34>
 801dac0:	692b      	ldr	r3, [r5, #16]
 801dac2:	b99b      	cbnz	r3, 801daec <_vfiprintf_r+0x5c>
 801dac4:	4629      	mov	r1, r5
 801dac6:	4630      	mov	r0, r6
 801dac8:	f000 f93a 	bl	801dd40 <__swsetup_r>
 801dacc:	b170      	cbz	r0, 801daec <_vfiprintf_r+0x5c>
 801dace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dad0:	07dc      	lsls	r4, r3, #31
 801dad2:	d504      	bpl.n	801dade <_vfiprintf_r+0x4e>
 801dad4:	f04f 30ff 	mov.w	r0, #4294967295
 801dad8:	b01d      	add	sp, #116	; 0x74
 801dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dade:	89ab      	ldrh	r3, [r5, #12]
 801dae0:	0598      	lsls	r0, r3, #22
 801dae2:	d4f7      	bmi.n	801dad4 <_vfiprintf_r+0x44>
 801dae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dae6:	f7fc ff59 	bl	801a99c <__retarget_lock_release_recursive>
 801daea:	e7f3      	b.n	801dad4 <_vfiprintf_r+0x44>
 801daec:	2300      	movs	r3, #0
 801daee:	9309      	str	r3, [sp, #36]	; 0x24
 801daf0:	2320      	movs	r3, #32
 801daf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801daf6:	f8cd 800c 	str.w	r8, [sp, #12]
 801dafa:	2330      	movs	r3, #48	; 0x30
 801dafc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dcb0 <_vfiprintf_r+0x220>
 801db00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db04:	f04f 0901 	mov.w	r9, #1
 801db08:	4623      	mov	r3, r4
 801db0a:	469a      	mov	sl, r3
 801db0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db10:	b10a      	cbz	r2, 801db16 <_vfiprintf_r+0x86>
 801db12:	2a25      	cmp	r2, #37	; 0x25
 801db14:	d1f9      	bne.n	801db0a <_vfiprintf_r+0x7a>
 801db16:	ebba 0b04 	subs.w	fp, sl, r4
 801db1a:	d00b      	beq.n	801db34 <_vfiprintf_r+0xa4>
 801db1c:	465b      	mov	r3, fp
 801db1e:	4622      	mov	r2, r4
 801db20:	4629      	mov	r1, r5
 801db22:	4630      	mov	r0, r6
 801db24:	f7ff ffa2 	bl	801da6c <__sfputs_r>
 801db28:	3001      	adds	r0, #1
 801db2a:	f000 80a9 	beq.w	801dc80 <_vfiprintf_r+0x1f0>
 801db2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db30:	445a      	add	r2, fp
 801db32:	9209      	str	r2, [sp, #36]	; 0x24
 801db34:	f89a 3000 	ldrb.w	r3, [sl]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	f000 80a1 	beq.w	801dc80 <_vfiprintf_r+0x1f0>
 801db3e:	2300      	movs	r3, #0
 801db40:	f04f 32ff 	mov.w	r2, #4294967295
 801db44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db48:	f10a 0a01 	add.w	sl, sl, #1
 801db4c:	9304      	str	r3, [sp, #16]
 801db4e:	9307      	str	r3, [sp, #28]
 801db50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801db54:	931a      	str	r3, [sp, #104]	; 0x68
 801db56:	4654      	mov	r4, sl
 801db58:	2205      	movs	r2, #5
 801db5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db5e:	4854      	ldr	r0, [pc, #336]	; (801dcb0 <_vfiprintf_r+0x220>)
 801db60:	f7e2 fbd6 	bl	8000310 <memchr>
 801db64:	9a04      	ldr	r2, [sp, #16]
 801db66:	b9d8      	cbnz	r0, 801dba0 <_vfiprintf_r+0x110>
 801db68:	06d1      	lsls	r1, r2, #27
 801db6a:	bf44      	itt	mi
 801db6c:	2320      	movmi	r3, #32
 801db6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801db72:	0713      	lsls	r3, r2, #28
 801db74:	bf44      	itt	mi
 801db76:	232b      	movmi	r3, #43	; 0x2b
 801db78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801db7c:	f89a 3000 	ldrb.w	r3, [sl]
 801db80:	2b2a      	cmp	r3, #42	; 0x2a
 801db82:	d015      	beq.n	801dbb0 <_vfiprintf_r+0x120>
 801db84:	9a07      	ldr	r2, [sp, #28]
 801db86:	4654      	mov	r4, sl
 801db88:	2000      	movs	r0, #0
 801db8a:	f04f 0c0a 	mov.w	ip, #10
 801db8e:	4621      	mov	r1, r4
 801db90:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db94:	3b30      	subs	r3, #48	; 0x30
 801db96:	2b09      	cmp	r3, #9
 801db98:	d94d      	bls.n	801dc36 <_vfiprintf_r+0x1a6>
 801db9a:	b1b0      	cbz	r0, 801dbca <_vfiprintf_r+0x13a>
 801db9c:	9207      	str	r2, [sp, #28]
 801db9e:	e014      	b.n	801dbca <_vfiprintf_r+0x13a>
 801dba0:	eba0 0308 	sub.w	r3, r0, r8
 801dba4:	fa09 f303 	lsl.w	r3, r9, r3
 801dba8:	4313      	orrs	r3, r2
 801dbaa:	9304      	str	r3, [sp, #16]
 801dbac:	46a2      	mov	sl, r4
 801dbae:	e7d2      	b.n	801db56 <_vfiprintf_r+0xc6>
 801dbb0:	9b03      	ldr	r3, [sp, #12]
 801dbb2:	1d19      	adds	r1, r3, #4
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	9103      	str	r1, [sp, #12]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	bfbb      	ittet	lt
 801dbbc:	425b      	neglt	r3, r3
 801dbbe:	f042 0202 	orrlt.w	r2, r2, #2
 801dbc2:	9307      	strge	r3, [sp, #28]
 801dbc4:	9307      	strlt	r3, [sp, #28]
 801dbc6:	bfb8      	it	lt
 801dbc8:	9204      	strlt	r2, [sp, #16]
 801dbca:	7823      	ldrb	r3, [r4, #0]
 801dbcc:	2b2e      	cmp	r3, #46	; 0x2e
 801dbce:	d10c      	bne.n	801dbea <_vfiprintf_r+0x15a>
 801dbd0:	7863      	ldrb	r3, [r4, #1]
 801dbd2:	2b2a      	cmp	r3, #42	; 0x2a
 801dbd4:	d134      	bne.n	801dc40 <_vfiprintf_r+0x1b0>
 801dbd6:	9b03      	ldr	r3, [sp, #12]
 801dbd8:	1d1a      	adds	r2, r3, #4
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	9203      	str	r2, [sp, #12]
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	bfb8      	it	lt
 801dbe2:	f04f 33ff 	movlt.w	r3, #4294967295
 801dbe6:	3402      	adds	r4, #2
 801dbe8:	9305      	str	r3, [sp, #20]
 801dbea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dcc0 <_vfiprintf_r+0x230>
 801dbee:	7821      	ldrb	r1, [r4, #0]
 801dbf0:	2203      	movs	r2, #3
 801dbf2:	4650      	mov	r0, sl
 801dbf4:	f7e2 fb8c 	bl	8000310 <memchr>
 801dbf8:	b138      	cbz	r0, 801dc0a <_vfiprintf_r+0x17a>
 801dbfa:	9b04      	ldr	r3, [sp, #16]
 801dbfc:	eba0 000a 	sub.w	r0, r0, sl
 801dc00:	2240      	movs	r2, #64	; 0x40
 801dc02:	4082      	lsls	r2, r0
 801dc04:	4313      	orrs	r3, r2
 801dc06:	3401      	adds	r4, #1
 801dc08:	9304      	str	r3, [sp, #16]
 801dc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc0e:	4829      	ldr	r0, [pc, #164]	; (801dcb4 <_vfiprintf_r+0x224>)
 801dc10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc14:	2206      	movs	r2, #6
 801dc16:	f7e2 fb7b 	bl	8000310 <memchr>
 801dc1a:	2800      	cmp	r0, #0
 801dc1c:	d03f      	beq.n	801dc9e <_vfiprintf_r+0x20e>
 801dc1e:	4b26      	ldr	r3, [pc, #152]	; (801dcb8 <_vfiprintf_r+0x228>)
 801dc20:	bb1b      	cbnz	r3, 801dc6a <_vfiprintf_r+0x1da>
 801dc22:	9b03      	ldr	r3, [sp, #12]
 801dc24:	3307      	adds	r3, #7
 801dc26:	f023 0307 	bic.w	r3, r3, #7
 801dc2a:	3308      	adds	r3, #8
 801dc2c:	9303      	str	r3, [sp, #12]
 801dc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc30:	443b      	add	r3, r7
 801dc32:	9309      	str	r3, [sp, #36]	; 0x24
 801dc34:	e768      	b.n	801db08 <_vfiprintf_r+0x78>
 801dc36:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc3a:	460c      	mov	r4, r1
 801dc3c:	2001      	movs	r0, #1
 801dc3e:	e7a6      	b.n	801db8e <_vfiprintf_r+0xfe>
 801dc40:	2300      	movs	r3, #0
 801dc42:	3401      	adds	r4, #1
 801dc44:	9305      	str	r3, [sp, #20]
 801dc46:	4619      	mov	r1, r3
 801dc48:	f04f 0c0a 	mov.w	ip, #10
 801dc4c:	4620      	mov	r0, r4
 801dc4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc52:	3a30      	subs	r2, #48	; 0x30
 801dc54:	2a09      	cmp	r2, #9
 801dc56:	d903      	bls.n	801dc60 <_vfiprintf_r+0x1d0>
 801dc58:	2b00      	cmp	r3, #0
 801dc5a:	d0c6      	beq.n	801dbea <_vfiprintf_r+0x15a>
 801dc5c:	9105      	str	r1, [sp, #20]
 801dc5e:	e7c4      	b.n	801dbea <_vfiprintf_r+0x15a>
 801dc60:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc64:	4604      	mov	r4, r0
 801dc66:	2301      	movs	r3, #1
 801dc68:	e7f0      	b.n	801dc4c <_vfiprintf_r+0x1bc>
 801dc6a:	ab03      	add	r3, sp, #12
 801dc6c:	9300      	str	r3, [sp, #0]
 801dc6e:	462a      	mov	r2, r5
 801dc70:	4b12      	ldr	r3, [pc, #72]	; (801dcbc <_vfiprintf_r+0x22c>)
 801dc72:	a904      	add	r1, sp, #16
 801dc74:	4630      	mov	r0, r6
 801dc76:	f7fb ff3f 	bl	8019af8 <_printf_float>
 801dc7a:	4607      	mov	r7, r0
 801dc7c:	1c78      	adds	r0, r7, #1
 801dc7e:	d1d6      	bne.n	801dc2e <_vfiprintf_r+0x19e>
 801dc80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dc82:	07d9      	lsls	r1, r3, #31
 801dc84:	d405      	bmi.n	801dc92 <_vfiprintf_r+0x202>
 801dc86:	89ab      	ldrh	r3, [r5, #12]
 801dc88:	059a      	lsls	r2, r3, #22
 801dc8a:	d402      	bmi.n	801dc92 <_vfiprintf_r+0x202>
 801dc8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc8e:	f7fc fe85 	bl	801a99c <__retarget_lock_release_recursive>
 801dc92:	89ab      	ldrh	r3, [r5, #12]
 801dc94:	065b      	lsls	r3, r3, #25
 801dc96:	f53f af1d 	bmi.w	801dad4 <_vfiprintf_r+0x44>
 801dc9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dc9c:	e71c      	b.n	801dad8 <_vfiprintf_r+0x48>
 801dc9e:	ab03      	add	r3, sp, #12
 801dca0:	9300      	str	r3, [sp, #0]
 801dca2:	462a      	mov	r2, r5
 801dca4:	4b05      	ldr	r3, [pc, #20]	; (801dcbc <_vfiprintf_r+0x22c>)
 801dca6:	a904      	add	r1, sp, #16
 801dca8:	4630      	mov	r0, r6
 801dcaa:	f7fc f9ad 	bl	801a008 <_printf_i>
 801dcae:	e7e4      	b.n	801dc7a <_vfiprintf_r+0x1ea>
 801dcb0:	0801e939 	.word	0x0801e939
 801dcb4:	0801e943 	.word	0x0801e943
 801dcb8:	08019af9 	.word	0x08019af9
 801dcbc:	0801da6d 	.word	0x0801da6d
 801dcc0:	0801e93f 	.word	0x0801e93f

0801dcc4 <__swbuf_r>:
 801dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcc6:	460e      	mov	r6, r1
 801dcc8:	4614      	mov	r4, r2
 801dcca:	4605      	mov	r5, r0
 801dccc:	b118      	cbz	r0, 801dcd6 <__swbuf_r+0x12>
 801dcce:	6a03      	ldr	r3, [r0, #32]
 801dcd0:	b90b      	cbnz	r3, 801dcd6 <__swbuf_r+0x12>
 801dcd2:	f7fc fd4b 	bl	801a76c <__sinit>
 801dcd6:	69a3      	ldr	r3, [r4, #24]
 801dcd8:	60a3      	str	r3, [r4, #8]
 801dcda:	89a3      	ldrh	r3, [r4, #12]
 801dcdc:	071a      	lsls	r2, r3, #28
 801dcde:	d525      	bpl.n	801dd2c <__swbuf_r+0x68>
 801dce0:	6923      	ldr	r3, [r4, #16]
 801dce2:	b31b      	cbz	r3, 801dd2c <__swbuf_r+0x68>
 801dce4:	6823      	ldr	r3, [r4, #0]
 801dce6:	6922      	ldr	r2, [r4, #16]
 801dce8:	1a98      	subs	r0, r3, r2
 801dcea:	6963      	ldr	r3, [r4, #20]
 801dcec:	b2f6      	uxtb	r6, r6
 801dcee:	4283      	cmp	r3, r0
 801dcf0:	4637      	mov	r7, r6
 801dcf2:	dc04      	bgt.n	801dcfe <__swbuf_r+0x3a>
 801dcf4:	4621      	mov	r1, r4
 801dcf6:	4628      	mov	r0, r5
 801dcf8:	f7ff fa38 	bl	801d16c <_fflush_r>
 801dcfc:	b9e0      	cbnz	r0, 801dd38 <__swbuf_r+0x74>
 801dcfe:	68a3      	ldr	r3, [r4, #8]
 801dd00:	3b01      	subs	r3, #1
 801dd02:	60a3      	str	r3, [r4, #8]
 801dd04:	6823      	ldr	r3, [r4, #0]
 801dd06:	1c5a      	adds	r2, r3, #1
 801dd08:	6022      	str	r2, [r4, #0]
 801dd0a:	701e      	strb	r6, [r3, #0]
 801dd0c:	6962      	ldr	r2, [r4, #20]
 801dd0e:	1c43      	adds	r3, r0, #1
 801dd10:	429a      	cmp	r2, r3
 801dd12:	d004      	beq.n	801dd1e <__swbuf_r+0x5a>
 801dd14:	89a3      	ldrh	r3, [r4, #12]
 801dd16:	07db      	lsls	r3, r3, #31
 801dd18:	d506      	bpl.n	801dd28 <__swbuf_r+0x64>
 801dd1a:	2e0a      	cmp	r6, #10
 801dd1c:	d104      	bne.n	801dd28 <__swbuf_r+0x64>
 801dd1e:	4621      	mov	r1, r4
 801dd20:	4628      	mov	r0, r5
 801dd22:	f7ff fa23 	bl	801d16c <_fflush_r>
 801dd26:	b938      	cbnz	r0, 801dd38 <__swbuf_r+0x74>
 801dd28:	4638      	mov	r0, r7
 801dd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd2c:	4621      	mov	r1, r4
 801dd2e:	4628      	mov	r0, r5
 801dd30:	f000 f806 	bl	801dd40 <__swsetup_r>
 801dd34:	2800      	cmp	r0, #0
 801dd36:	d0d5      	beq.n	801dce4 <__swbuf_r+0x20>
 801dd38:	f04f 37ff 	mov.w	r7, #4294967295
 801dd3c:	e7f4      	b.n	801dd28 <__swbuf_r+0x64>
	...

0801dd40 <__swsetup_r>:
 801dd40:	b538      	push	{r3, r4, r5, lr}
 801dd42:	4b2a      	ldr	r3, [pc, #168]	; (801ddec <__swsetup_r+0xac>)
 801dd44:	4605      	mov	r5, r0
 801dd46:	6818      	ldr	r0, [r3, #0]
 801dd48:	460c      	mov	r4, r1
 801dd4a:	b118      	cbz	r0, 801dd54 <__swsetup_r+0x14>
 801dd4c:	6a03      	ldr	r3, [r0, #32]
 801dd4e:	b90b      	cbnz	r3, 801dd54 <__swsetup_r+0x14>
 801dd50:	f7fc fd0c 	bl	801a76c <__sinit>
 801dd54:	89a3      	ldrh	r3, [r4, #12]
 801dd56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dd5a:	0718      	lsls	r0, r3, #28
 801dd5c:	d422      	bmi.n	801dda4 <__swsetup_r+0x64>
 801dd5e:	06d9      	lsls	r1, r3, #27
 801dd60:	d407      	bmi.n	801dd72 <__swsetup_r+0x32>
 801dd62:	2309      	movs	r3, #9
 801dd64:	602b      	str	r3, [r5, #0]
 801dd66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dd6a:	81a3      	strh	r3, [r4, #12]
 801dd6c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd70:	e034      	b.n	801dddc <__swsetup_r+0x9c>
 801dd72:	0758      	lsls	r0, r3, #29
 801dd74:	d512      	bpl.n	801dd9c <__swsetup_r+0x5c>
 801dd76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dd78:	b141      	cbz	r1, 801dd8c <__swsetup_r+0x4c>
 801dd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dd7e:	4299      	cmp	r1, r3
 801dd80:	d002      	beq.n	801dd88 <__swsetup_r+0x48>
 801dd82:	4628      	mov	r0, r5
 801dd84:	f7fd fc14 	bl	801b5b0 <_free_r>
 801dd88:	2300      	movs	r3, #0
 801dd8a:	6363      	str	r3, [r4, #52]	; 0x34
 801dd8c:	89a3      	ldrh	r3, [r4, #12]
 801dd8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dd92:	81a3      	strh	r3, [r4, #12]
 801dd94:	2300      	movs	r3, #0
 801dd96:	6063      	str	r3, [r4, #4]
 801dd98:	6923      	ldr	r3, [r4, #16]
 801dd9a:	6023      	str	r3, [r4, #0]
 801dd9c:	89a3      	ldrh	r3, [r4, #12]
 801dd9e:	f043 0308 	orr.w	r3, r3, #8
 801dda2:	81a3      	strh	r3, [r4, #12]
 801dda4:	6923      	ldr	r3, [r4, #16]
 801dda6:	b94b      	cbnz	r3, 801ddbc <__swsetup_r+0x7c>
 801dda8:	89a3      	ldrh	r3, [r4, #12]
 801ddaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ddae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ddb2:	d003      	beq.n	801ddbc <__swsetup_r+0x7c>
 801ddb4:	4621      	mov	r1, r4
 801ddb6:	4628      	mov	r0, r5
 801ddb8:	f000 f884 	bl	801dec4 <__smakebuf_r>
 801ddbc:	89a0      	ldrh	r0, [r4, #12]
 801ddbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ddc2:	f010 0301 	ands.w	r3, r0, #1
 801ddc6:	d00a      	beq.n	801ddde <__swsetup_r+0x9e>
 801ddc8:	2300      	movs	r3, #0
 801ddca:	60a3      	str	r3, [r4, #8]
 801ddcc:	6963      	ldr	r3, [r4, #20]
 801ddce:	425b      	negs	r3, r3
 801ddd0:	61a3      	str	r3, [r4, #24]
 801ddd2:	6923      	ldr	r3, [r4, #16]
 801ddd4:	b943      	cbnz	r3, 801dde8 <__swsetup_r+0xa8>
 801ddd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ddda:	d1c4      	bne.n	801dd66 <__swsetup_r+0x26>
 801dddc:	bd38      	pop	{r3, r4, r5, pc}
 801ddde:	0781      	lsls	r1, r0, #30
 801dde0:	bf58      	it	pl
 801dde2:	6963      	ldrpl	r3, [r4, #20]
 801dde4:	60a3      	str	r3, [r4, #8]
 801dde6:	e7f4      	b.n	801ddd2 <__swsetup_r+0x92>
 801dde8:	2000      	movs	r0, #0
 801ddea:	e7f7      	b.n	801dddc <__swsetup_r+0x9c>
 801ddec:	24000158 	.word	0x24000158

0801ddf0 <_raise_r>:
 801ddf0:	291f      	cmp	r1, #31
 801ddf2:	b538      	push	{r3, r4, r5, lr}
 801ddf4:	4604      	mov	r4, r0
 801ddf6:	460d      	mov	r5, r1
 801ddf8:	d904      	bls.n	801de04 <_raise_r+0x14>
 801ddfa:	2316      	movs	r3, #22
 801ddfc:	6003      	str	r3, [r0, #0]
 801ddfe:	f04f 30ff 	mov.w	r0, #4294967295
 801de02:	bd38      	pop	{r3, r4, r5, pc}
 801de04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801de06:	b112      	cbz	r2, 801de0e <_raise_r+0x1e>
 801de08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801de0c:	b94b      	cbnz	r3, 801de22 <_raise_r+0x32>
 801de0e:	4620      	mov	r0, r4
 801de10:	f000 f830 	bl	801de74 <_getpid_r>
 801de14:	462a      	mov	r2, r5
 801de16:	4601      	mov	r1, r0
 801de18:	4620      	mov	r0, r4
 801de1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de1e:	f000 b817 	b.w	801de50 <_kill_r>
 801de22:	2b01      	cmp	r3, #1
 801de24:	d00a      	beq.n	801de3c <_raise_r+0x4c>
 801de26:	1c59      	adds	r1, r3, #1
 801de28:	d103      	bne.n	801de32 <_raise_r+0x42>
 801de2a:	2316      	movs	r3, #22
 801de2c:	6003      	str	r3, [r0, #0]
 801de2e:	2001      	movs	r0, #1
 801de30:	e7e7      	b.n	801de02 <_raise_r+0x12>
 801de32:	2400      	movs	r4, #0
 801de34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801de38:	4628      	mov	r0, r5
 801de3a:	4798      	blx	r3
 801de3c:	2000      	movs	r0, #0
 801de3e:	e7e0      	b.n	801de02 <_raise_r+0x12>

0801de40 <raise>:
 801de40:	4b02      	ldr	r3, [pc, #8]	; (801de4c <raise+0xc>)
 801de42:	4601      	mov	r1, r0
 801de44:	6818      	ldr	r0, [r3, #0]
 801de46:	f7ff bfd3 	b.w	801ddf0 <_raise_r>
 801de4a:	bf00      	nop
 801de4c:	24000158 	.word	0x24000158

0801de50 <_kill_r>:
 801de50:	b538      	push	{r3, r4, r5, lr}
 801de52:	4d07      	ldr	r5, [pc, #28]	; (801de70 <_kill_r+0x20>)
 801de54:	2300      	movs	r3, #0
 801de56:	4604      	mov	r4, r0
 801de58:	4608      	mov	r0, r1
 801de5a:	4611      	mov	r1, r2
 801de5c:	602b      	str	r3, [r5, #0]
 801de5e:	f7e5 fa43 	bl	80032e8 <_kill>
 801de62:	1c43      	adds	r3, r0, #1
 801de64:	d102      	bne.n	801de6c <_kill_r+0x1c>
 801de66:	682b      	ldr	r3, [r5, #0]
 801de68:	b103      	cbz	r3, 801de6c <_kill_r+0x1c>
 801de6a:	6023      	str	r3, [r4, #0]
 801de6c:	bd38      	pop	{r3, r4, r5, pc}
 801de6e:	bf00      	nop
 801de70:	24003634 	.word	0x24003634

0801de74 <_getpid_r>:
 801de74:	f7e5 ba30 	b.w	80032d8 <_getpid>

0801de78 <__swhatbuf_r>:
 801de78:	b570      	push	{r4, r5, r6, lr}
 801de7a:	460c      	mov	r4, r1
 801de7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de80:	2900      	cmp	r1, #0
 801de82:	b096      	sub	sp, #88	; 0x58
 801de84:	4615      	mov	r5, r2
 801de86:	461e      	mov	r6, r3
 801de88:	da0d      	bge.n	801dea6 <__swhatbuf_r+0x2e>
 801de8a:	89a3      	ldrh	r3, [r4, #12]
 801de8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801de90:	f04f 0100 	mov.w	r1, #0
 801de94:	bf0c      	ite	eq
 801de96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801de9a:	2340      	movne	r3, #64	; 0x40
 801de9c:	2000      	movs	r0, #0
 801de9e:	6031      	str	r1, [r6, #0]
 801dea0:	602b      	str	r3, [r5, #0]
 801dea2:	b016      	add	sp, #88	; 0x58
 801dea4:	bd70      	pop	{r4, r5, r6, pc}
 801dea6:	466a      	mov	r2, sp
 801dea8:	f000 f848 	bl	801df3c <_fstat_r>
 801deac:	2800      	cmp	r0, #0
 801deae:	dbec      	blt.n	801de8a <__swhatbuf_r+0x12>
 801deb0:	9901      	ldr	r1, [sp, #4]
 801deb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801deb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801deba:	4259      	negs	r1, r3
 801debc:	4159      	adcs	r1, r3
 801debe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dec2:	e7eb      	b.n	801de9c <__swhatbuf_r+0x24>

0801dec4 <__smakebuf_r>:
 801dec4:	898b      	ldrh	r3, [r1, #12]
 801dec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dec8:	079d      	lsls	r5, r3, #30
 801deca:	4606      	mov	r6, r0
 801decc:	460c      	mov	r4, r1
 801dece:	d507      	bpl.n	801dee0 <__smakebuf_r+0x1c>
 801ded0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ded4:	6023      	str	r3, [r4, #0]
 801ded6:	6123      	str	r3, [r4, #16]
 801ded8:	2301      	movs	r3, #1
 801deda:	6163      	str	r3, [r4, #20]
 801dedc:	b002      	add	sp, #8
 801dede:	bd70      	pop	{r4, r5, r6, pc}
 801dee0:	ab01      	add	r3, sp, #4
 801dee2:	466a      	mov	r2, sp
 801dee4:	f7ff ffc8 	bl	801de78 <__swhatbuf_r>
 801dee8:	9900      	ldr	r1, [sp, #0]
 801deea:	4605      	mov	r5, r0
 801deec:	4630      	mov	r0, r6
 801deee:	f7fd fbd3 	bl	801b698 <_malloc_r>
 801def2:	b948      	cbnz	r0, 801df08 <__smakebuf_r+0x44>
 801def4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801def8:	059a      	lsls	r2, r3, #22
 801defa:	d4ef      	bmi.n	801dedc <__smakebuf_r+0x18>
 801defc:	f023 0303 	bic.w	r3, r3, #3
 801df00:	f043 0302 	orr.w	r3, r3, #2
 801df04:	81a3      	strh	r3, [r4, #12]
 801df06:	e7e3      	b.n	801ded0 <__smakebuf_r+0xc>
 801df08:	89a3      	ldrh	r3, [r4, #12]
 801df0a:	6020      	str	r0, [r4, #0]
 801df0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df10:	81a3      	strh	r3, [r4, #12]
 801df12:	9b00      	ldr	r3, [sp, #0]
 801df14:	6163      	str	r3, [r4, #20]
 801df16:	9b01      	ldr	r3, [sp, #4]
 801df18:	6120      	str	r0, [r4, #16]
 801df1a:	b15b      	cbz	r3, 801df34 <__smakebuf_r+0x70>
 801df1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df20:	4630      	mov	r0, r6
 801df22:	f000 f81d 	bl	801df60 <_isatty_r>
 801df26:	b128      	cbz	r0, 801df34 <__smakebuf_r+0x70>
 801df28:	89a3      	ldrh	r3, [r4, #12]
 801df2a:	f023 0303 	bic.w	r3, r3, #3
 801df2e:	f043 0301 	orr.w	r3, r3, #1
 801df32:	81a3      	strh	r3, [r4, #12]
 801df34:	89a3      	ldrh	r3, [r4, #12]
 801df36:	431d      	orrs	r5, r3
 801df38:	81a5      	strh	r5, [r4, #12]
 801df3a:	e7cf      	b.n	801dedc <__smakebuf_r+0x18>

0801df3c <_fstat_r>:
 801df3c:	b538      	push	{r3, r4, r5, lr}
 801df3e:	4d07      	ldr	r5, [pc, #28]	; (801df5c <_fstat_r+0x20>)
 801df40:	2300      	movs	r3, #0
 801df42:	4604      	mov	r4, r0
 801df44:	4608      	mov	r0, r1
 801df46:	4611      	mov	r1, r2
 801df48:	602b      	str	r3, [r5, #0]
 801df4a:	f7e5 fa2c 	bl	80033a6 <_fstat>
 801df4e:	1c43      	adds	r3, r0, #1
 801df50:	d102      	bne.n	801df58 <_fstat_r+0x1c>
 801df52:	682b      	ldr	r3, [r5, #0]
 801df54:	b103      	cbz	r3, 801df58 <_fstat_r+0x1c>
 801df56:	6023      	str	r3, [r4, #0]
 801df58:	bd38      	pop	{r3, r4, r5, pc}
 801df5a:	bf00      	nop
 801df5c:	24003634 	.word	0x24003634

0801df60 <_isatty_r>:
 801df60:	b538      	push	{r3, r4, r5, lr}
 801df62:	4d06      	ldr	r5, [pc, #24]	; (801df7c <_isatty_r+0x1c>)
 801df64:	2300      	movs	r3, #0
 801df66:	4604      	mov	r4, r0
 801df68:	4608      	mov	r0, r1
 801df6a:	602b      	str	r3, [r5, #0]
 801df6c:	f7e5 fa2b 	bl	80033c6 <_isatty>
 801df70:	1c43      	adds	r3, r0, #1
 801df72:	d102      	bne.n	801df7a <_isatty_r+0x1a>
 801df74:	682b      	ldr	r3, [r5, #0]
 801df76:	b103      	cbz	r3, 801df7a <_isatty_r+0x1a>
 801df78:	6023      	str	r3, [r4, #0]
 801df7a:	bd38      	pop	{r3, r4, r5, pc}
 801df7c:	24003634 	.word	0x24003634

0801df80 <_init>:
 801df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df82:	bf00      	nop
 801df84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df86:	bc08      	pop	{r3}
 801df88:	469e      	mov	lr, r3
 801df8a:	4770      	bx	lr

0801df8c <_fini>:
 801df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df8e:	bf00      	nop
 801df90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df92:	bc08      	pop	{r3}
 801df94:	469e      	mov	lr, r3
 801df96:	4770      	bx	lr
